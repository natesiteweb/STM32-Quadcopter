
f4Quadcopter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c86c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800c9fc  0800c9fc  0001c9fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cac8  0800cac8  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800cac8  0800cac8  0001cac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cad0  0800cad0  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cad0  0800cad0  0001cad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cad4  0800cad4  0001cad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800cad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d30  200001ec  0800ccc4  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f1c  0800ccc4  00021f1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d9f6  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ef0  00000000  00000000  0003dc12  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015b0  00000000  00000000  00041b08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013d8  00000000  00000000  000430b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000241a5  00000000  00000000  00044490  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015af2  00000000  00000000  00068635  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c90a7  00000000  00000000  0007e127  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001471ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dc8  00000000  00000000  0014724c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c9e4 	.word	0x0800c9e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800c9e4 	.word	0x0800c9e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b972 	b.w	8000db8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9e08      	ldr	r6, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	4688      	mov	r8, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14b      	bne.n	8000b92 <__udivmoddi4+0xa6>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4615      	mov	r5, r2
 8000afe:	d967      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0720 	rsb	r7, r2, #32
 8000b0a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b12:	4095      	lsls	r5, r2
 8000b14:	ea47 0803 	orr.w	r8, r7, r3
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b24:	fa1f fc85 	uxth.w	ip, r5
 8000b28:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b2c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b30:	fb07 f10c 	mul.w	r1, r7, ip
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18eb      	adds	r3, r5, r3
 8000b3a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b3e:	f080 811b 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8118 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b48:	3f02      	subs	r7, #2
 8000b4a:	442b      	add	r3, r5
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b60:	45a4      	cmp	ip, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	192c      	adds	r4, r5, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6a:	f080 8107 	bcs.w	8000d7c <__udivmoddi4+0x290>
 8000b6e:	45a4      	cmp	ip, r4
 8000b70:	f240 8104 	bls.w	8000d7c <__udivmoddi4+0x290>
 8000b74:	3802      	subs	r0, #2
 8000b76:	442c      	add	r4, r5
 8000b78:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b7c:	eba4 040c 	sub.w	r4, r4, ip
 8000b80:	2700      	movs	r7, #0
 8000b82:	b11e      	cbz	r6, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c6 4300 	strd	r4, r3, [r6]
 8000b8c:	4639      	mov	r1, r7
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d909      	bls.n	8000baa <__udivmoddi4+0xbe>
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	f000 80eb 	beq.w	8000d72 <__udivmoddi4+0x286>
 8000b9c:	2700      	movs	r7, #0
 8000b9e:	e9c6 0100 	strd	r0, r1, [r6]
 8000ba2:	4638      	mov	r0, r7
 8000ba4:	4639      	mov	r1, r7
 8000ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000baa:	fab3 f783 	clz	r7, r3
 8000bae:	2f00      	cmp	r7, #0
 8000bb0:	d147      	bne.n	8000c42 <__udivmoddi4+0x156>
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d302      	bcc.n	8000bbc <__udivmoddi4+0xd0>
 8000bb6:	4282      	cmp	r2, r0
 8000bb8:	f200 80fa 	bhi.w	8000db0 <__udivmoddi4+0x2c4>
 8000bbc:	1a84      	subs	r4, r0, r2
 8000bbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	4698      	mov	r8, r3
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d0e0      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000bca:	e9c6 4800 	strd	r4, r8, [r6]
 8000bce:	e7dd      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000bd0:	b902      	cbnz	r2, 8000bd4 <__udivmoddi4+0xe8>
 8000bd2:	deff      	udf	#255	; 0xff
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	2a00      	cmp	r2, #0
 8000bda:	f040 808f 	bne.w	8000cfc <__udivmoddi4+0x210>
 8000bde:	1b49      	subs	r1, r1, r5
 8000be0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000be4:	fa1f f885 	uxth.w	r8, r5
 8000be8:	2701      	movs	r7, #1
 8000bea:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bee:	0c23      	lsrs	r3, r4, #16
 8000bf0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bf4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bfc:	4299      	cmp	r1, r3
 8000bfe:	d907      	bls.n	8000c10 <__udivmoddi4+0x124>
 8000c00:	18eb      	adds	r3, r5, r3
 8000c02:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x122>
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	f200 80cd 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000c0e:	4684      	mov	ip, r0
 8000c10:	1a59      	subs	r1, r3, r1
 8000c12:	b2a3      	uxth	r3, r4
 8000c14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c18:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c1c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c20:	fb08 f800 	mul.w	r8, r8, r0
 8000c24:	45a0      	cmp	r8, r4
 8000c26:	d907      	bls.n	8000c38 <__udivmoddi4+0x14c>
 8000c28:	192c      	adds	r4, r5, r4
 8000c2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x14a>
 8000c30:	45a0      	cmp	r8, r4
 8000c32:	f200 80b6 	bhi.w	8000da2 <__udivmoddi4+0x2b6>
 8000c36:	4618      	mov	r0, r3
 8000c38:	eba4 0408 	sub.w	r4, r4, r8
 8000c3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c40:	e79f      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c42:	f1c7 0c20 	rsb	ip, r7, #32
 8000c46:	40bb      	lsls	r3, r7
 8000c48:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c4c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c50:	fa01 f407 	lsl.w	r4, r1, r7
 8000c54:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c58:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c5c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c60:	4325      	orrs	r5, r4
 8000c62:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c66:	0c2c      	lsrs	r4, r5, #16
 8000c68:	fb08 3319 	mls	r3, r8, r9, r3
 8000c6c:	fa1f fa8e 	uxth.w	sl, lr
 8000c70:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c74:	fb09 f40a 	mul.w	r4, r9, sl
 8000c78:	429c      	cmp	r4, r3
 8000c7a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c7e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c82:	d90b      	bls.n	8000c9c <__udivmoddi4+0x1b0>
 8000c84:	eb1e 0303 	adds.w	r3, lr, r3
 8000c88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c8c:	f080 8087 	bcs.w	8000d9e <__udivmoddi4+0x2b2>
 8000c90:	429c      	cmp	r4, r3
 8000c92:	f240 8084 	bls.w	8000d9e <__udivmoddi4+0x2b2>
 8000c96:	f1a9 0902 	sub.w	r9, r9, #2
 8000c9a:	4473      	add	r3, lr
 8000c9c:	1b1b      	subs	r3, r3, r4
 8000c9e:	b2ad      	uxth	r5, r5
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cac:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cb0:	45a2      	cmp	sl, r4
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x1da>
 8000cb4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbc:	d26b      	bcs.n	8000d96 <__udivmoddi4+0x2aa>
 8000cbe:	45a2      	cmp	sl, r4
 8000cc0:	d969      	bls.n	8000d96 <__udivmoddi4+0x2aa>
 8000cc2:	3802      	subs	r0, #2
 8000cc4:	4474      	add	r4, lr
 8000cc6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cca:	fba0 8902 	umull	r8, r9, r0, r2
 8000cce:	eba4 040a 	sub.w	r4, r4, sl
 8000cd2:	454c      	cmp	r4, r9
 8000cd4:	46c2      	mov	sl, r8
 8000cd6:	464b      	mov	r3, r9
 8000cd8:	d354      	bcc.n	8000d84 <__udivmoddi4+0x298>
 8000cda:	d051      	beq.n	8000d80 <__udivmoddi4+0x294>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d069      	beq.n	8000db4 <__udivmoddi4+0x2c8>
 8000ce0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ce4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ce8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000cec:	40fd      	lsrs	r5, r7
 8000cee:	40fc      	lsrs	r4, r7
 8000cf0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cf4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cf8:	2700      	movs	r7, #0
 8000cfa:	e747      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000cfc:	f1c2 0320 	rsb	r3, r2, #32
 8000d00:	fa20 f703 	lsr.w	r7, r0, r3
 8000d04:	4095      	lsls	r5, r2
 8000d06:	fa01 f002 	lsl.w	r0, r1, r2
 8000d0a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d12:	4338      	orrs	r0, r7
 8000d14:	0c01      	lsrs	r1, r0, #16
 8000d16:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d1a:	fa1f f885 	uxth.w	r8, r5
 8000d1e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d26:	fb07 f308 	mul.w	r3, r7, r8
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x256>
 8000d32:	1869      	adds	r1, r5, r1
 8000d34:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d38:	d22f      	bcs.n	8000d9a <__udivmoddi4+0x2ae>
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	d92d      	bls.n	8000d9a <__udivmoddi4+0x2ae>
 8000d3e:	3f02      	subs	r7, #2
 8000d40:	4429      	add	r1, r5
 8000d42:	1acb      	subs	r3, r1, r3
 8000d44:	b281      	uxth	r1, r0
 8000d46:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d4a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d52:	fb00 f308 	mul.w	r3, r0, r8
 8000d56:	428b      	cmp	r3, r1
 8000d58:	d907      	bls.n	8000d6a <__udivmoddi4+0x27e>
 8000d5a:	1869      	adds	r1, r5, r1
 8000d5c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d60:	d217      	bcs.n	8000d92 <__udivmoddi4+0x2a6>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d915      	bls.n	8000d92 <__udivmoddi4+0x2a6>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4429      	add	r1, r5
 8000d6a:	1ac9      	subs	r1, r1, r3
 8000d6c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d70:	e73b      	b.n	8000bea <__udivmoddi4+0xfe>
 8000d72:	4637      	mov	r7, r6
 8000d74:	4630      	mov	r0, r6
 8000d76:	e709      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d78:	4607      	mov	r7, r0
 8000d7a:	e6e7      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	e6fb      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d80:	4541      	cmp	r1, r8
 8000d82:	d2ab      	bcs.n	8000cdc <__udivmoddi4+0x1f0>
 8000d84:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d88:	eb69 020e 	sbc.w	r2, r9, lr
 8000d8c:	3801      	subs	r0, #1
 8000d8e:	4613      	mov	r3, r2
 8000d90:	e7a4      	b.n	8000cdc <__udivmoddi4+0x1f0>
 8000d92:	4660      	mov	r0, ip
 8000d94:	e7e9      	b.n	8000d6a <__udivmoddi4+0x27e>
 8000d96:	4618      	mov	r0, r3
 8000d98:	e795      	b.n	8000cc6 <__udivmoddi4+0x1da>
 8000d9a:	4667      	mov	r7, ip
 8000d9c:	e7d1      	b.n	8000d42 <__udivmoddi4+0x256>
 8000d9e:	4681      	mov	r9, r0
 8000da0:	e77c      	b.n	8000c9c <__udivmoddi4+0x1b0>
 8000da2:	3802      	subs	r0, #2
 8000da4:	442c      	add	r4, r5
 8000da6:	e747      	b.n	8000c38 <__udivmoddi4+0x14c>
 8000da8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dac:	442b      	add	r3, r5
 8000dae:	e72f      	b.n	8000c10 <__udivmoddi4+0x124>
 8000db0:	4638      	mov	r0, r7
 8000db2:	e708      	b.n	8000bc6 <__udivmoddi4+0xda>
 8000db4:	4637      	mov	r7, r6
 8000db6:	e6e9      	b.n	8000b8c <__udivmoddi4+0xa0>

08000db8 <__aeabi_idiv0>:
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <MX_DMA_Init+0x6c>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a17      	ldr	r2, [pc, #92]	; (8000e28 <MX_DMA_Init+0x6c>)
 8000dcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <MX_DMA_Init+0x6c>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2100      	movs	r1, #0
 8000de2:	200b      	movs	r0, #11
 8000de4:	f001 fbbd 	bl	8002562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000de8:	200b      	movs	r0, #11
 8000dea:	f001 fbd6 	bl	800259a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	200e      	movs	r0, #14
 8000df4:	f001 fbb5 	bl	8002562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000df8:	200e      	movs	r0, #14
 8000dfa:	f001 fbce 	bl	800259a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2100      	movs	r1, #0
 8000e02:	2011      	movs	r0, #17
 8000e04:	f001 fbad 	bl	8002562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000e08:	2011      	movs	r0, #17
 8000e0a:	f001 fbc6 	bl	800259a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2100      	movs	r1, #0
 8000e12:	202f      	movs	r0, #47	; 0x2f
 8000e14:	f001 fba5 	bl	8002562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000e18:	202f      	movs	r0, #47	; 0x2f
 8000e1a:	f001 fbbe 	bl	800259a <HAL_NVIC_EnableIRQ>

}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023800 	.word	0x40023800

08000e2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	; 0x28
 8000e30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]
 8000e40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	4b31      	ldr	r3, [pc, #196]	; (8000f0c <MX_GPIO_Init+0xe0>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a30      	ldr	r2, [pc, #192]	; (8000f0c <MX_GPIO_Init+0xe0>)
 8000e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b2e      	ldr	r3, [pc, #184]	; (8000f0c <MX_GPIO_Init+0xe0>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b2a      	ldr	r3, [pc, #168]	; (8000f0c <MX_GPIO_Init+0xe0>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a29      	ldr	r2, [pc, #164]	; (8000f0c <MX_GPIO_Init+0xe0>)
 8000e68:	f043 0304 	orr.w	r3, r3, #4
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b27      	ldr	r3, [pc, #156]	; (8000f0c <MX_GPIO_Init+0xe0>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <MX_GPIO_Init+0xe0>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a22      	ldr	r2, [pc, #136]	; (8000f0c <MX_GPIO_Init+0xe0>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <MX_GPIO_Init+0xe0>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	4b1c      	ldr	r3, [pc, #112]	; (8000f0c <MX_GPIO_Init+0xe0>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a1b      	ldr	r2, [pc, #108]	; (8000f0c <MX_GPIO_Init+0xe0>)
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <MX_GPIO_Init+0xe0>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2106      	movs	r1, #6
 8000eb6:	4816      	ldr	r0, [pc, #88]	; (8000f10 <MX_GPIO_Init+0xe4>)
 8000eb8:	f002 f8e6 	bl	8003088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000ec2:	4814      	ldr	r0, [pc, #80]	; (8000f14 <MX_GPIO_Init+0xe8>)
 8000ec4:	f002 f8e0 	bl	8003088 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000ec8:	2306      	movs	r3, #6
 8000eca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4619      	mov	r1, r3
 8000ede:	480c      	ldr	r0, [pc, #48]	; (8000f10 <MX_GPIO_Init+0xe4>)
 8000ee0:	f001 ff20 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000ee4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000ee8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eea:	2301      	movs	r3, #1
 8000eec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	4805      	ldr	r0, [pc, #20]	; (8000f14 <MX_GPIO_Init+0xe8>)
 8000efe:	f001 ff11 	bl	8002d24 <HAL_GPIO_Init>

}
 8000f02:	bf00      	nop
 8000f04:	3728      	adds	r7, #40	; 0x28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	40020800 	.word	0x40020800
 8000f14:	40020400 	.word	0x40020400

08000f18 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_tx;
DMA_HandleTypeDef hdma_i2c2_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f1e:	4a13      	ldr	r2, [pc, #76]	; (8000f6c <MX_I2C1_Init+0x54>)
 8000f20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f24:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <MX_I2C1_Init+0x58>)
 8000f26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f56:	f002 f8cb 	bl	80030f0 <HAL_I2C_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f60:	f000 fd16 	bl	8001990 <Error_Handler>
  }

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000290 	.word	0x20000290
 8000f6c:	40005400 	.word	0x40005400
 8000f70:	00061a80 	.word	0x00061a80

08000f74 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <MX_I2C2_Init+0x50>)
 8000f7a:	4a13      	ldr	r2, [pc, #76]	; (8000fc8 <MX_I2C2_Init+0x54>)
 8000f7c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <MX_I2C2_Init+0x50>)
 8000f80:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <MX_I2C2_Init+0x58>)
 8000f82:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <MX_I2C2_Init+0x50>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <MX_I2C2_Init+0x50>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <MX_I2C2_Init+0x50>)
 8000f92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f96:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f98:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <MX_I2C2_Init+0x50>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <MX_I2C2_Init+0x50>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fa4:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <MX_I2C2_Init+0x50>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <MX_I2C2_Init+0x50>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fb0:	4804      	ldr	r0, [pc, #16]	; (8000fc4 <MX_I2C2_Init+0x50>)
 8000fb2:	f002 f89d 	bl	80030f0 <HAL_I2C_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000fbc:	f000 fce8 	bl	8001990 <Error_Handler>
  }

}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	200002e4 	.word	0x200002e4
 8000fc8:	40005800 	.word	0x40005800
 8000fcc:	00061a80 	.word	0x00061a80

08000fd0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08c      	sub	sp, #48	; 0x30
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 031c 	add.w	r3, r7, #28
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a99      	ldr	r2, [pc, #612]	; (8001254 <HAL_I2C_MspInit+0x284>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	f040 8093 	bne.w	800111a <HAL_I2C_MspInit+0x14a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61bb      	str	r3, [r7, #24]
 8000ff8:	4b97      	ldr	r3, [pc, #604]	; (8001258 <HAL_I2C_MspInit+0x288>)
 8000ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffc:	4a96      	ldr	r2, [pc, #600]	; (8001258 <HAL_I2C_MspInit+0x288>)
 8000ffe:	f043 0302 	orr.w	r3, r3, #2
 8001002:	6313      	str	r3, [r2, #48]	; 0x30
 8001004:	4b94      	ldr	r3, [pc, #592]	; (8001258 <HAL_I2C_MspInit+0x288>)
 8001006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	61bb      	str	r3, [r7, #24]
 800100e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001010:	23c0      	movs	r3, #192	; 0xc0
 8001012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001014:	2312      	movs	r3, #18
 8001016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001018:	2301      	movs	r3, #1
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001020:	2304      	movs	r3, #4
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	4619      	mov	r1, r3
 800102a:	488c      	ldr	r0, [pc, #560]	; (800125c <HAL_I2C_MspInit+0x28c>)
 800102c:	f001 fe7a 	bl	8002d24 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	4b88      	ldr	r3, [pc, #544]	; (8001258 <HAL_I2C_MspInit+0x288>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	4a87      	ldr	r2, [pc, #540]	; (8001258 <HAL_I2C_MspInit+0x288>)
 800103a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800103e:	6413      	str	r3, [r2, #64]	; 0x40
 8001040:	4b85      	ldr	r3, [pc, #532]	; (8001258 <HAL_I2C_MspInit+0x288>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800104c:	4b84      	ldr	r3, [pc, #528]	; (8001260 <HAL_I2C_MspInit+0x290>)
 800104e:	4a85      	ldr	r2, [pc, #532]	; (8001264 <HAL_I2C_MspInit+0x294>)
 8001050:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001052:	4b83      	ldr	r3, [pc, #524]	; (8001260 <HAL_I2C_MspInit+0x290>)
 8001054:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001058:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800105a:	4b81      	ldr	r3, [pc, #516]	; (8001260 <HAL_I2C_MspInit+0x290>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001060:	4b7f      	ldr	r3, [pc, #508]	; (8001260 <HAL_I2C_MspInit+0x290>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001066:	4b7e      	ldr	r3, [pc, #504]	; (8001260 <HAL_I2C_MspInit+0x290>)
 8001068:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800106c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800106e:	4b7c      	ldr	r3, [pc, #496]	; (8001260 <HAL_I2C_MspInit+0x290>)
 8001070:	2200      	movs	r2, #0
 8001072:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001074:	4b7a      	ldr	r3, [pc, #488]	; (8001260 <HAL_I2C_MspInit+0x290>)
 8001076:	2200      	movs	r2, #0
 8001078:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800107a:	4b79      	ldr	r3, [pc, #484]	; (8001260 <HAL_I2C_MspInit+0x290>)
 800107c:	2200      	movs	r2, #0
 800107e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001080:	4b77      	ldr	r3, [pc, #476]	; (8001260 <HAL_I2C_MspInit+0x290>)
 8001082:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001086:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001088:	4b75      	ldr	r3, [pc, #468]	; (8001260 <HAL_I2C_MspInit+0x290>)
 800108a:	2200      	movs	r2, #0
 800108c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800108e:	4874      	ldr	r0, [pc, #464]	; (8001260 <HAL_I2C_MspInit+0x290>)
 8001090:	f001 fa9e 	bl	80025d0 <HAL_DMA_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800109a:	f000 fc79 	bl	8001990 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a6f      	ldr	r2, [pc, #444]	; (8001260 <HAL_I2C_MspInit+0x290>)
 80010a2:	639a      	str	r2, [r3, #56]	; 0x38
 80010a4:	4a6e      	ldr	r2, [pc, #440]	; (8001260 <HAL_I2C_MspInit+0x290>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 80010aa:	4b6f      	ldr	r3, [pc, #444]	; (8001268 <HAL_I2C_MspInit+0x298>)
 80010ac:	4a6f      	ldr	r2, [pc, #444]	; (800126c <HAL_I2C_MspInit+0x29c>)
 80010ae:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 80010b0:	4b6d      	ldr	r3, [pc, #436]	; (8001268 <HAL_I2C_MspInit+0x298>)
 80010b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010b6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010b8:	4b6b      	ldr	r3, [pc, #428]	; (8001268 <HAL_I2C_MspInit+0x298>)
 80010ba:	2240      	movs	r2, #64	; 0x40
 80010bc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010be:	4b6a      	ldr	r3, [pc, #424]	; (8001268 <HAL_I2C_MspInit+0x298>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010c4:	4b68      	ldr	r3, [pc, #416]	; (8001268 <HAL_I2C_MspInit+0x298>)
 80010c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010ca:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010cc:	4b66      	ldr	r3, [pc, #408]	; (8001268 <HAL_I2C_MspInit+0x298>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010d2:	4b65      	ldr	r3, [pc, #404]	; (8001268 <HAL_I2C_MspInit+0x298>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80010d8:	4b63      	ldr	r3, [pc, #396]	; (8001268 <HAL_I2C_MspInit+0x298>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80010de:	4b62      	ldr	r3, [pc, #392]	; (8001268 <HAL_I2C_MspInit+0x298>)
 80010e0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010e4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010e6:	4b60      	ldr	r3, [pc, #384]	; (8001268 <HAL_I2C_MspInit+0x298>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80010ec:	485e      	ldr	r0, [pc, #376]	; (8001268 <HAL_I2C_MspInit+0x298>)
 80010ee:	f001 fa6f 	bl	80025d0 <HAL_DMA_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 80010f8:	f000 fc4a 	bl	8001990 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a5a      	ldr	r2, [pc, #360]	; (8001268 <HAL_I2C_MspInit+0x298>)
 8001100:	635a      	str	r2, [r3, #52]	; 0x34
 8001102:	4a59      	ldr	r2, [pc, #356]	; (8001268 <HAL_I2C_MspInit+0x298>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	2100      	movs	r1, #0
 800110c:	201f      	movs	r0, #31
 800110e:	f001 fa28 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001112:	201f      	movs	r0, #31
 8001114:	f001 fa41 	bl	800259a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001118:	e098      	b.n	800124c <HAL_I2C_MspInit+0x27c>
  else if(i2cHandle->Instance==I2C2)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a54      	ldr	r2, [pc, #336]	; (8001270 <HAL_I2C_MspInit+0x2a0>)
 8001120:	4293      	cmp	r3, r2
 8001122:	f040 8093 	bne.w	800124c <HAL_I2C_MspInit+0x27c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	4b4b      	ldr	r3, [pc, #300]	; (8001258 <HAL_I2C_MspInit+0x288>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a4a      	ldr	r2, [pc, #296]	; (8001258 <HAL_I2C_MspInit+0x288>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b48      	ldr	r3, [pc, #288]	; (8001258 <HAL_I2C_MspInit+0x288>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001142:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001148:	2312      	movs	r3, #18
 800114a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800114c:	2301      	movs	r3, #1
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001154:	2304      	movs	r3, #4
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001158:	f107 031c 	add.w	r3, r7, #28
 800115c:	4619      	mov	r1, r3
 800115e:	483f      	ldr	r0, [pc, #252]	; (800125c <HAL_I2C_MspInit+0x28c>)
 8001160:	f001 fde0 	bl	8002d24 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	4b3b      	ldr	r3, [pc, #236]	; (8001258 <HAL_I2C_MspInit+0x288>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	4a3a      	ldr	r2, [pc, #232]	; (8001258 <HAL_I2C_MspInit+0x288>)
 800116e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001172:	6413      	str	r3, [r2, #64]	; 0x40
 8001174:	4b38      	ldr	r3, [pc, #224]	; (8001258 <HAL_I2C_MspInit+0x288>)
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8001180:	4b3c      	ldr	r3, [pc, #240]	; (8001274 <HAL_I2C_MspInit+0x2a4>)
 8001182:	4a3d      	ldr	r2, [pc, #244]	; (8001278 <HAL_I2C_MspInit+0x2a8>)
 8001184:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8001186:	4b3b      	ldr	r3, [pc, #236]	; (8001274 <HAL_I2C_MspInit+0x2a4>)
 8001188:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800118c:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800118e:	4b39      	ldr	r3, [pc, #228]	; (8001274 <HAL_I2C_MspInit+0x2a4>)
 8001190:	2240      	movs	r2, #64	; 0x40
 8001192:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001194:	4b37      	ldr	r3, [pc, #220]	; (8001274 <HAL_I2C_MspInit+0x2a4>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800119a:	4b36      	ldr	r3, [pc, #216]	; (8001274 <HAL_I2C_MspInit+0x2a4>)
 800119c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011a0:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011a2:	4b34      	ldr	r3, [pc, #208]	; (8001274 <HAL_I2C_MspInit+0x2a4>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011a8:	4b32      	ldr	r3, [pc, #200]	; (8001274 <HAL_I2C_MspInit+0x2a4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80011ae:	4b31      	ldr	r3, [pc, #196]	; (8001274 <HAL_I2C_MspInit+0x2a4>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80011b4:	4b2f      	ldr	r3, [pc, #188]	; (8001274 <HAL_I2C_MspInit+0x2a4>)
 80011b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011ba:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011bc:	4b2d      	ldr	r3, [pc, #180]	; (8001274 <HAL_I2C_MspInit+0x2a4>)
 80011be:	2200      	movs	r2, #0
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80011c2:	482c      	ldr	r0, [pc, #176]	; (8001274 <HAL_I2C_MspInit+0x2a4>)
 80011c4:	f001 fa04 	bl	80025d0 <HAL_DMA_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_I2C_MspInit+0x202>
      Error_Handler();
 80011ce:	f000 fbdf 	bl	8001990 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a27      	ldr	r2, [pc, #156]	; (8001274 <HAL_I2C_MspInit+0x2a4>)
 80011d6:	635a      	str	r2, [r3, #52]	; 0x34
 80011d8:	4a26      	ldr	r2, [pc, #152]	; (8001274 <HAL_I2C_MspInit+0x2a4>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 80011de:	4b27      	ldr	r3, [pc, #156]	; (800127c <HAL_I2C_MspInit+0x2ac>)
 80011e0:	4a27      	ldr	r2, [pc, #156]	; (8001280 <HAL_I2C_MspInit+0x2b0>)
 80011e2:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80011e4:	4b25      	ldr	r3, [pc, #148]	; (800127c <HAL_I2C_MspInit+0x2ac>)
 80011e6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80011ea:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ec:	4b23      	ldr	r3, [pc, #140]	; (800127c <HAL_I2C_MspInit+0x2ac>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011f2:	4b22      	ldr	r3, [pc, #136]	; (800127c <HAL_I2C_MspInit+0x2ac>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011f8:	4b20      	ldr	r3, [pc, #128]	; (800127c <HAL_I2C_MspInit+0x2ac>)
 80011fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011fe:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001200:	4b1e      	ldr	r3, [pc, #120]	; (800127c <HAL_I2C_MspInit+0x2ac>)
 8001202:	2200      	movs	r2, #0
 8001204:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001206:	4b1d      	ldr	r3, [pc, #116]	; (800127c <HAL_I2C_MspInit+0x2ac>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <HAL_I2C_MspInit+0x2ac>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <HAL_I2C_MspInit+0x2ac>)
 8001214:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001218:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <HAL_I2C_MspInit+0x2ac>)
 800121c:	2200      	movs	r2, #0
 800121e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001220:	4816      	ldr	r0, [pc, #88]	; (800127c <HAL_I2C_MspInit+0x2ac>)
 8001222:	f001 f9d5 	bl	80025d0 <HAL_DMA_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <HAL_I2C_MspInit+0x260>
      Error_Handler();
 800122c:	f000 fbb0 	bl	8001990 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a12      	ldr	r2, [pc, #72]	; (800127c <HAL_I2C_MspInit+0x2ac>)
 8001234:	639a      	str	r2, [r3, #56]	; 0x38
 8001236:	4a11      	ldr	r2, [pc, #68]	; (800127c <HAL_I2C_MspInit+0x2ac>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800123c:	2200      	movs	r2, #0
 800123e:	2100      	movs	r1, #0
 8001240:	2021      	movs	r0, #33	; 0x21
 8001242:	f001 f98e 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001246:	2021      	movs	r0, #33	; 0x21
 8001248:	f001 f9a7 	bl	800259a <HAL_NVIC_EnableIRQ>
}
 800124c:	bf00      	nop
 800124e:	3730      	adds	r7, #48	; 0x30
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40005400 	.word	0x40005400
 8001258:	40023800 	.word	0x40023800
 800125c:	40020400 	.word	0x40020400
 8001260:	200003f8 	.word	0x200003f8
 8001264:	40026010 	.word	0x40026010
 8001268:	20000230 	.word	0x20000230
 800126c:	400260a0 	.word	0x400260a0
 8001270:	40005800 	.word	0x40005800
 8001274:	20000398 	.word	0x20000398
 8001278:	400260b8 	.word	0x400260b8
 800127c:	20000338 	.word	0x20000338
 8001280:	40026058 	.word	0x40026058
 8001284:	00000000 	.word	0x00000000

08001288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b089      	sub	sp, #36	; 0x24
 800128c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800128e:	f000 fff9 	bl	8002284 <HAL_Init>

  /* USER CODE BEGIN Init */

  HAL_Delay(500);
 8001292:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001296:	f001 f867 	bl	8002368 <HAL_Delay>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800129a:	f000 f99f 	bl	80015dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800129e:	f7ff fdc5 	bl	8000e2c <MX_GPIO_Init>
  MX_DMA_Init();
 80012a2:	f7ff fd8b 	bl	8000dbc <MX_DMA_Init>
  MX_I2C1_Init();
 80012a6:	f7ff fe37 	bl	8000f18 <MX_I2C1_Init>
  MX_I2C2_Init();
 80012aa:	f7ff fe63 	bl	8000f74 <MX_I2C2_Init>
  MX_RTC_Init();
 80012ae:	f000 fb77 	bl	80019a0 <MX_RTC_Init>
  MX_TIM3_Init();
 80012b2:	f000 fcad 	bl	8001c10 <MX_TIM3_Init>
  MX_TIM5_Init();
 80012b6:	f000 fd25 	bl	8001d04 <MX_TIM5_Init>
  MX_TIM8_Init();
 80012ba:	f000 fd93 	bl	8001de4 <MX_TIM8_Init>
  MX_USB_DEVICE_Init();
 80012be:	f00a fa6f 	bl	800b7a0 <MX_USB_DEVICE_Init>
  MX_TIM9_Init();
 80012c2:	f000 fe53 	bl	8001f6c <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 80012c6:	2100      	movs	r1, #0
 80012c8:	48b1      	ldr	r0, [pc, #708]	; (8001590 <main+0x308>)
 80012ca:	f006 fad7 	bl	800787c <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim9);
 80012ce:	48b1      	ldr	r0, [pc, #708]	; (8001594 <main+0x30c>)
 80012d0:	f006 fa50 	bl	8007774 <HAL_TIM_Base_Start_IT>

  for(int i = 0; i < 32; i++)
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	e007      	b.n	80012ea <main+0x62>
  {
	  send_buffer[i] = '\0';
 80012da:	4aaf      	ldr	r2, [pc, #700]	; (8001598 <main+0x310>)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4413      	add	r3, r2
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 32; i++)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	3301      	adds	r3, #1
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2b1f      	cmp	r3, #31
 80012ee:	ddf4      	ble.n	80012da <main+0x52>
  send_buffer[6] = 'o';
  send_buffer[7] = '\n';*/

  //sprintf((char*)send_buffer, "%l%s", test_capture_value, "\r\n");

  send_buffer[32] = 30;
 80012f0:	4ba9      	ldr	r3, [pc, #676]	; (8001598 <main+0x310>)
 80012f2:	221e      	movs	r2, #30
 80012f4:	f883 2020 	strb.w	r2, [r3, #32]
  send_buffer[33] = 0;//Unreliable
 80012f8:	4ba7      	ldr	r3, [pc, #668]	; (8001598 <main+0x310>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  send_buffer[34] = 0;//No data
 8001300:	4ba5      	ldr	r3, [pc, #660]	; (8001598 <main+0x310>)
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  buf[0] = 0x6B;
 8001308:	4ba4      	ldr	r3, [pc, #656]	; (800159c <main+0x314>)
 800130a:	226b      	movs	r2, #107	; 0x6b
 800130c:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x00;
 800130e:	4ba3      	ldr	r3, [pc, #652]	; (800159c <main+0x314>)
 8001310:	2200      	movs	r2, #0
 8001312:	705a      	strb	r2, [r3, #1]
  ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, buf, 2, HAL_MAX_DELAY);
 8001314:	23d0      	movs	r3, #208	; 0xd0
 8001316:	b299      	uxth	r1, r3
 8001318:	f04f 33ff 	mov.w	r3, #4294967295
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2302      	movs	r3, #2
 8001320:	4a9e      	ldr	r2, [pc, #632]	; (800159c <main+0x314>)
 8001322:	489f      	ldr	r0, [pc, #636]	; (80015a0 <main+0x318>)
 8001324:	f002 f81c 	bl	8003360 <HAL_I2C_Master_Transmit>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	4b9d      	ldr	r3, [pc, #628]	; (80015a4 <main+0x31c>)
 800132e:	701a      	strb	r2, [r3, #0]
  if(ret != HAL_OK)
 8001330:	4b9c      	ldr	r3, [pc, #624]	; (80015a4 <main+0x31c>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d008      	beq.n	800134a <main+0xc2>
  {
	  strcpy((char*)buf, "Error Tx\r\n");
 8001338:	4a98      	ldr	r2, [pc, #608]	; (800159c <main+0x314>)
 800133a:	4b9b      	ldr	r3, [pc, #620]	; (80015a8 <main+0x320>)
 800133c:	cb03      	ldmia	r3!, {r0, r1}
 800133e:	6010      	str	r0, [r2, #0]
 8001340:	6051      	str	r1, [r2, #4]
 8001342:	8819      	ldrh	r1, [r3, #0]
 8001344:	789b      	ldrb	r3, [r3, #2]
 8001346:	8111      	strh	r1, [r2, #8]
 8001348:	7293      	strb	r3, [r2, #10]
  }

  HAL_Delay(10);
 800134a:	200a      	movs	r0, #10
 800134c:	f001 f80c 	bl	8002368 <HAL_Delay>

  buf[0] = 0x1B;
 8001350:	4b92      	ldr	r3, [pc, #584]	; (800159c <main+0x314>)
 8001352:	221b      	movs	r2, #27
 8001354:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x08;
 8001356:	4b91      	ldr	r3, [pc, #580]	; (800159c <main+0x314>)
 8001358:	2208      	movs	r2, #8
 800135a:	705a      	strb	r2, [r3, #1]
  ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, buf, 2, HAL_MAX_DELAY);
 800135c:	23d0      	movs	r3, #208	; 0xd0
 800135e:	b299      	uxth	r1, r3
 8001360:	f04f 33ff 	mov.w	r3, #4294967295
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2302      	movs	r3, #2
 8001368:	4a8c      	ldr	r2, [pc, #560]	; (800159c <main+0x314>)
 800136a:	488d      	ldr	r0, [pc, #564]	; (80015a0 <main+0x318>)
 800136c:	f001 fff8 	bl	8003360 <HAL_I2C_Master_Transmit>
 8001370:	4603      	mov	r3, r0
 8001372:	461a      	mov	r2, r3
 8001374:	4b8b      	ldr	r3, [pc, #556]	; (80015a4 <main+0x31c>)
 8001376:	701a      	strb	r2, [r3, #0]
  if(ret != HAL_OK)
 8001378:	4b8a      	ldr	r3, [pc, #552]	; (80015a4 <main+0x31c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d008      	beq.n	8001392 <main+0x10a>
  {
	  strcpy((char*)buf, "Error Tx\r\n");
 8001380:	4a86      	ldr	r2, [pc, #536]	; (800159c <main+0x314>)
 8001382:	4b89      	ldr	r3, [pc, #548]	; (80015a8 <main+0x320>)
 8001384:	cb03      	ldmia	r3!, {r0, r1}
 8001386:	6010      	str	r0, [r2, #0]
 8001388:	6051      	str	r1, [r2, #4]
 800138a:	8819      	ldrh	r1, [r3, #0]
 800138c:	789b      	ldrb	r3, [r3, #2]
 800138e:	8111      	strh	r1, [r2, #8]
 8001390:	7293      	strb	r3, [r2, #10]
  }

  HAL_Delay(10);
 8001392:	200a      	movs	r0, #10
 8001394:	f000 ffe8 	bl	8002368 <HAL_Delay>

  buf[0] = 0x1A;
 8001398:	4b80      	ldr	r3, [pc, #512]	; (800159c <main+0x314>)
 800139a:	221a      	movs	r2, #26
 800139c:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x03;
 800139e:	4b7f      	ldr	r3, [pc, #508]	; (800159c <main+0x314>)
 80013a0:	2203      	movs	r2, #3
 80013a2:	705a      	strb	r2, [r3, #1]
  ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, buf, 2, HAL_MAX_DELAY);
 80013a4:	23d0      	movs	r3, #208	; 0xd0
 80013a6:	b299      	uxth	r1, r3
 80013a8:	f04f 33ff 	mov.w	r3, #4294967295
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	2302      	movs	r3, #2
 80013b0:	4a7a      	ldr	r2, [pc, #488]	; (800159c <main+0x314>)
 80013b2:	487b      	ldr	r0, [pc, #492]	; (80015a0 <main+0x318>)
 80013b4:	f001 ffd4 	bl	8003360 <HAL_I2C_Master_Transmit>
 80013b8:	4603      	mov	r3, r0
 80013ba:	461a      	mov	r2, r3
 80013bc:	4b79      	ldr	r3, [pc, #484]	; (80015a4 <main+0x31c>)
 80013be:	701a      	strb	r2, [r3, #0]
  if(ret != HAL_OK)
 80013c0:	4b78      	ldr	r3, [pc, #480]	; (80015a4 <main+0x31c>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d008      	beq.n	80013da <main+0x152>
  {
	  strcpy((char*)buf, "Error Tx\r\n");
 80013c8:	4a74      	ldr	r2, [pc, #464]	; (800159c <main+0x314>)
 80013ca:	4b77      	ldr	r3, [pc, #476]	; (80015a8 <main+0x320>)
 80013cc:	cb03      	ldmia	r3!, {r0, r1}
 80013ce:	6010      	str	r0, [r2, #0]
 80013d0:	6051      	str	r1, [r2, #4]
 80013d2:	8819      	ldrh	r1, [r3, #0]
 80013d4:	789b      	ldrb	r3, [r3, #2]
 80013d6:	8111      	strh	r1, [r2, #8]
 80013d8:	7293      	strb	r3, [r2, #10]
  }

  //CDC_Transmit_FS(buf, strlen((char*)buf));

  HAL_Delay(2000);
 80013da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80013de:	f000 ffc3 	bl	8002368 <HAL_Delay>

  uint32_t test_delay_timer = GetMicros();
 80013e2:	f000 fa39 	bl	8001858 <GetMicros>
 80013e6:	4603      	mov	r3, r0
 80013e8:	607b      	str	r3, [r7, #4]
  uint32_t test_timer_again = GetMillis();
 80013ea:	f000 fa41 	bl	8001870 <GetMillis>
 80013ee:	4603      	mov	r3, r0
 80013f0:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_Delay(1000);

	  test_delay_timer = GetMicros();
 80013f2:	f000 fa31 	bl	8001858 <GetMicros>
 80013f6:	4603      	mov	r3, r0
 80013f8:	607b      	str	r3, [r7, #4]
	  while(GetMicrosDifference(&test_delay_timer) < 500);
 80013fa:	bf00      	nop
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 fa56 	bl	80018b0 <GetMicrosDifference>
 8001404:	4603      	mov	r3, r0
 8001406:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800140a:	d3f7      	bcc.n	80013fc <main+0x174>

	  if(GetMillisDifference(&test_timer_again) > 500)
 800140c:	463b      	mov	r3, r7
 800140e:	4618      	mov	r0, r3
 8001410:	f000 fa40 	bl	8001894 <GetMillisDifference>
 8001414:	4603      	mov	r3, r0
 8001416:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800141a:	d907      	bls.n	800142c <main+0x1a4>
	  {
		  test_timer_again = GetMillis();
 800141c:	f000 fa28 	bl	8001870 <GetMillis>
 8001420:	4603      	mov	r3, r0
 8001422:	603b      	str	r3, [r7, #0]
		  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001424:	2104      	movs	r1, #4
 8001426:	4861      	ldr	r0, [pc, #388]	; (80015ac <main+0x324>)
 8001428:	f001 fe47 	bl	80030ba <HAL_GPIO_TogglePin>
	  }

	  if(/*HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY && */send_buffer[34] == 0)
 800142c:	4b5a      	ldr	r3, [pc, #360]	; (8001598 <main+0x310>)
 800142e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001432:	2b00      	cmp	r3, #0
 8001434:	d16d      	bne.n	8001512 <main+0x28a>
	  {
		  if(ack_rate_counter < 0xFF)
 8001436:	4b5e      	ldr	r3, [pc, #376]	; (80015b0 <main+0x328>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2bff      	cmp	r3, #255	; 0xff
 800143e:	d006      	beq.n	800144e <main+0x1c6>
			  ack_rate_counter++;
 8001440:	4b5b      	ldr	r3, [pc, #364]	; (80015b0 <main+0x328>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	3301      	adds	r3, #1
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4b59      	ldr	r3, [pc, #356]	; (80015b0 <main+0x328>)
 800144c:	701a      	strb	r2, [r3, #0]

		  for(int i = 0; i < 32; i++)
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	e007      	b.n	8001464 <main+0x1dc>
		  {
			  send_buffer[i] = '\0';
 8001454:	4a50      	ldr	r2, [pc, #320]	; (8001598 <main+0x310>)
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	4413      	add	r3, r2
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
		  for(int i = 0; i < 32; i++)
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	3301      	adds	r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	2b1f      	cmp	r3, #31
 8001468:	ddf4      	ble.n	8001454 <main+0x1cc>

		  //test_gyro_x =

		  //sprintf((char*)send_buffer, "%ld%s", ppm_channels[2], "\r\n");//int32_t
		  //sprintf((char*)send_buffer, "%c%c%lu%s%hd%s", 0x09 , 0x1E, GetMillisDifference(&test_millis_timer)/*ppm_channels[2]*/, ":", test_gyro_x, "\r\n");//uint32_t
		  sprintf((char*)send_buffer, "%lu%s%hd%s", GetMillisDifference(&test_millis_timer)/*ppm_channels[2]*/, ":", test_gyro_x, "\r\n");//uint32_t
 800146a:	4852      	ldr	r0, [pc, #328]	; (80015b4 <main+0x32c>)
 800146c:	f000 fa12 	bl	8001894 <GetMillisDifference>
 8001470:	4601      	mov	r1, r0
 8001472:	4b51      	ldr	r3, [pc, #324]	; (80015b8 <main+0x330>)
 8001474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001478:	461a      	mov	r2, r3
 800147a:	4b50      	ldr	r3, [pc, #320]	; (80015bc <main+0x334>)
 800147c:	9301      	str	r3, [sp, #4]
 800147e:	9200      	str	r2, [sp, #0]
 8001480:	4b4f      	ldr	r3, [pc, #316]	; (80015c0 <main+0x338>)
 8001482:	460a      	mov	r2, r1
 8001484:	494f      	ldr	r1, [pc, #316]	; (80015c4 <main+0x33c>)
 8001486:	4844      	ldr	r0, [pc, #272]	; (8001598 <main+0x310>)
 8001488:	f00a ff5e 	bl	800c348 <siprintf>
		  sprintf((char*)send_buffer, "%c%c%lu%s%hd%s", 0x09 , strlen((char*)send_buffer), GetMicrosDifference(&test_millis_timer)/*ppm_channels[2]*/, ":", test_gyro_x, "\r\n");//uint32_t
 800148c:	4842      	ldr	r0, [pc, #264]	; (8001598 <main+0x310>)
 800148e:	f7fe fe9f 	bl	80001d0 <strlen>
 8001492:	4604      	mov	r4, r0
 8001494:	4847      	ldr	r0, [pc, #284]	; (80015b4 <main+0x32c>)
 8001496:	f000 fa0b 	bl	80018b0 <GetMicrosDifference>
 800149a:	4602      	mov	r2, r0
 800149c:	4b46      	ldr	r3, [pc, #280]	; (80015b8 <main+0x330>)
 800149e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a2:	4619      	mov	r1, r3
 80014a4:	4b45      	ldr	r3, [pc, #276]	; (80015bc <main+0x334>)
 80014a6:	9303      	str	r3, [sp, #12]
 80014a8:	9102      	str	r1, [sp, #8]
 80014aa:	4b45      	ldr	r3, [pc, #276]	; (80015c0 <main+0x338>)
 80014ac:	9301      	str	r3, [sp, #4]
 80014ae:	9200      	str	r2, [sp, #0]
 80014b0:	4623      	mov	r3, r4
 80014b2:	2209      	movs	r2, #9
 80014b4:	4944      	ldr	r1, [pc, #272]	; (80015c8 <main+0x340>)
 80014b6:	4838      	ldr	r0, [pc, #224]	; (8001598 <main+0x310>)
 80014b8:	f00a ff46 	bl	800c348 <siprintf>
		  test_millis_timer = GetMicros();
 80014bc:	f000 f9cc 	bl	8001858 <GetMicros>
 80014c0:	4602      	mov	r2, r0
 80014c2:	4b3c      	ldr	r3, [pc, #240]	; (80015b4 <main+0x32c>)
 80014c4:	601a      	str	r2, [r3, #0]

		  //strcpy((char*)send_buffer, "TEST\r\n");

		  if(ack_rate_counter == ack_rate)
 80014c6:	4b3a      	ldr	r3, [pc, #232]	; (80015b0 <main+0x328>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	4b3f      	ldr	r3, [pc, #252]	; (80015cc <main+0x344>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d104      	bne.n	80014de <main+0x256>
		  {
			  //ack_rate_counter = 0;
			  send_buffer[34] = 1;
 80014d4:	4b30      	ldr	r3, [pc, #192]	; (8001598 <main+0x310>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80014dc:	e003      	b.n	80014e6 <main+0x25e>
		  }
		  else
		  {
			  send_buffer[34] = 0;
 80014de:	4b2e      	ldr	r3, [pc, #184]	; (8001598 <main+0x310>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		  }



		  send_buffer[32] = 30;
 80014e6:	4b2c      	ldr	r3, [pc, #176]	; (8001598 <main+0x310>)
 80014e8:	221e      	movs	r2, #30
 80014ea:	f883 2020 	strb.w	r2, [r3, #32]
		  send_buffer[33] = 0;//Unreliable
 80014ee:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <main+0x310>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		  send_buffer[34] = 0;//No data
 80014f6:	4b28      	ldr	r3, [pc, #160]	; (8001598 <main+0x310>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

		  HAL_I2C_Master_Transmit_DMA(&hi2c2, (uint8_t)(0x04 << 1), (uint8_t *)send_buffer, 35);
 80014fe:	2323      	movs	r3, #35	; 0x23
 8001500:	4a25      	ldr	r2, [pc, #148]	; (8001598 <main+0x310>)
 8001502:	2108      	movs	r1, #8
 8001504:	4832      	ldr	r0, [pc, #200]	; (80015d0 <main+0x348>)
 8001506:	f002 f829 	bl	800355c <HAL_I2C_Master_Transmit_DMA>
		  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800150a:	2102      	movs	r1, #2
 800150c:	4827      	ldr	r0, [pc, #156]	; (80015ac <main+0x324>)
 800150e:	f001 fdd4 	bl	80030ba <HAL_GPIO_TogglePin>

		  //HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	  }

	  if(read_flag == 1)
 8001512:	4b30      	ldr	r3, [pc, #192]	; (80015d4 <main+0x34c>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d121      	bne.n	800155e <main+0x2d6>
	  {
		  read_flag = 0;
 800151a:	4b2e      	ldr	r3, [pc, #184]	; (80015d4 <main+0x34c>)
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]

		  test_gyro_x = (int16_t)((buf[0] << 8) | (buf[1]));
 8001520:	4b1e      	ldr	r3, [pc, #120]	; (800159c <main+0x314>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	021b      	lsls	r3, r3, #8
 8001526:	b21a      	sxth	r2, r3
 8001528:	4b1c      	ldr	r3, [pc, #112]	; (800159c <main+0x314>)
 800152a:	785b      	ldrb	r3, [r3, #1]
 800152c:	b21b      	sxth	r3, r3
 800152e:	4313      	orrs	r3, r2
 8001530:	b21a      	sxth	r2, r3
 8001532:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <main+0x330>)
 8001534:	801a      	strh	r2, [r3, #0]

		  gyro_x = test_gyro_x / 65.5;
 8001536:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <main+0x330>)
 8001538:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe fff1 	bl	8000524 <__aeabi_i2d>
 8001542:	a311      	add	r3, pc, #68	; (adr r3, 8001588 <main+0x300>)
 8001544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001548:	f7ff f980 	bl	800084c <__aeabi_ddiv>
 800154c:	4603      	mov	r3, r0
 800154e:	460c      	mov	r4, r1
 8001550:	4618      	mov	r0, r3
 8001552:	4621      	mov	r1, r4
 8001554:	f7ff fa62 	bl	8000a1c <__aeabi_d2f>
 8001558:	4602      	mov	r2, r0
 800155a:	4b1f      	ldr	r3, [pc, #124]	; (80015d8 <main+0x350>)
 800155c:	601a      	str	r2, [r3, #0]
		  //HAL_Delay(10);
		  //i2c_transmit_timer = DWT->CYCCNT * (HAL_RCC_GetHCLKFreq() / 1000000);
		  //HAL_I2C_Master_Receive_IT(hi2c, DevAddress, pData, Size)
	  }

	  if(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)
 800155e:	4810      	ldr	r0, [pc, #64]	; (80015a0 <main+0x318>)
 8001560:	f002 fc0e 	bl	8003d80 <HAL_I2C_GetState>
 8001564:	4603      	mov	r3, r0
 8001566:	2b20      	cmp	r3, #32
 8001568:	f47f af43 	bne.w	80013f2 <main+0x16a>
	  {
		  HAL_I2C_Mem_Read_DMA(&hi2c1, GYRO_ADDR, 0x43, I2C_MEMADD_SIZE_8BIT, (uint8_t *)buf, 2);
 800156c:	23d0      	movs	r3, #208	; 0xd0
 800156e:	b299      	uxth	r1, r3
 8001570:	2302      	movs	r3, #2
 8001572:	9301      	str	r3, [sp, #4]
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <main+0x314>)
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	2301      	movs	r3, #1
 800157a:	2243      	movs	r2, #67	; 0x43
 800157c:	4808      	ldr	r0, [pc, #32]	; (80015a0 <main+0x318>)
 800157e:	f002 f903 	bl	8003788 <HAL_I2C_Mem_Read_DMA>
	  test_delay_timer = GetMicros();
 8001582:	e736      	b.n	80013f2 <main+0x16a>
 8001584:	f3af 8000 	nop.w
 8001588:	00000000 	.word	0x00000000
 800158c:	40506000 	.word	0x40506000
 8001590:	2000057c 	.word	0x2000057c
 8001594:	200005fc 	.word	0x200005fc
 8001598:	200004c4 	.word	0x200004c4
 800159c:	200004ec 	.word	0x200004ec
 80015a0:	20000290 	.word	0x20000290
 80015a4:	20000514 	.word	0x20000514
 80015a8:	0800c9fc 	.word	0x0800c9fc
 80015ac:	40020800 	.word	0x40020800
 80015b0:	20000209 	.word	0x20000209
 80015b4:	20000518 	.word	0x20000518
 80015b8:	2000021c 	.word	0x2000021c
 80015bc:	0800ca18 	.word	0x0800ca18
 80015c0:	0800ca08 	.word	0x0800ca08
 80015c4:	0800ca0c 	.word	0x0800ca0c
 80015c8:	0800ca1c 	.word	0x0800ca1c
 80015cc:	20000000 	.word	0x20000000
 80015d0:	200002e4 	.word	0x200002e4
 80015d4:	20000208 	.word	0x20000208
 80015d8:	200004e8 	.word	0x200004e8

080015dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b098      	sub	sp, #96	; 0x60
 80015e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015e6:	2230      	movs	r2, #48	; 0x30
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f00a fdec 	bl	800c1c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	4b31      	ldr	r3, [pc, #196]	; (80016d8 <SystemClock_Config+0xfc>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	4a30      	ldr	r2, [pc, #192]	; (80016d8 <SystemClock_Config+0xfc>)
 8001618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161c:	6413      	str	r3, [r2, #64]	; 0x40
 800161e:	4b2e      	ldr	r3, [pc, #184]	; (80016d8 <SystemClock_Config+0xfc>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	4b2b      	ldr	r3, [pc, #172]	; (80016dc <SystemClock_Config+0x100>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a2a      	ldr	r2, [pc, #168]	; (80016dc <SystemClock_Config+0x100>)
 8001634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	4b28      	ldr	r3, [pc, #160]	; (80016dc <SystemClock_Config+0x100>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001646:	2309      	movs	r3, #9
 8001648:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800164a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800164e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001650:	2301      	movs	r3, #1
 8001652:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001654:	2302      	movs	r3, #2
 8001656:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001658:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800165c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800165e:	2310      	movs	r3, #16
 8001660:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001662:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001666:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001668:	2302      	movs	r3, #2
 800166a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800166c:	2307      	movs	r3, #7
 800166e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001670:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001674:	4618      	mov	r0, r3
 8001676:	f005 fa3f 	bl	8006af8 <HAL_RCC_OscConfig>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001680:	f000 f986 	bl	8001990 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001684:	230f      	movs	r3, #15
 8001686:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001688:	2302      	movs	r3, #2
 800168a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800168c:	2300      	movs	r3, #0
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001690:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800169a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800169c:	f107 031c 	add.w	r3, r7, #28
 80016a0:	2105      	movs	r1, #5
 80016a2:	4618      	mov	r0, r3
 80016a4:	f005 fc98 	bl	8006fd8 <HAL_RCC_ClockConfig>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80016ae:	f000 f96f 	bl	8001990 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016b2:	2302      	movs	r3, #2
 80016b4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80016b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016ba:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016bc:	f107 030c 	add.w	r3, r7, #12
 80016c0:	4618      	mov	r0, r3
 80016c2:	f005 fe65 	bl	8007390 <HAL_RCCEx_PeriphCLKConfig>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80016cc:	f000 f960 	bl	8001990 <Error_Handler>
  }
}
 80016d0:	bf00      	nop
 80016d2:	3760      	adds	r7, #96	; 0x60
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40007000 	.word	0x40007000

080016e0 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a47      	ldr	r2, [pc, #284]	; (8001808 <HAL_TIM_IC_CaptureCallback+0x128>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	f040 8086 	bne.w	80017fe <HAL_TIM_IC_CaptureCallback+0x11e>
	{
		current_ppm_capture = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1);
 80016f2:	2100      	movs	r1, #0
 80016f4:	4844      	ldr	r0, [pc, #272]	; (8001808 <HAL_TIM_IC_CaptureCallback+0x128>)
 80016f6:	f006 fbe5 	bl	8007ec4 <HAL_TIM_ReadCapturedValue>
 80016fa:	4602      	mov	r2, r0
 80016fc:	4b43      	ldr	r3, [pc, #268]	; (800180c <HAL_TIM_IC_CaptureCallback+0x12c>)
 80016fe:	601a      	str	r2, [r3, #0]

		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8001700:	2101      	movs	r1, #1
 8001702:	4843      	ldr	r0, [pc, #268]	; (8001810 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001704:	f001 fca8 	bl	8003058 <HAL_GPIO_ReadPin>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d014      	beq.n	8001738 <HAL_TIM_IC_CaptureCallback+0x58>
		{
			last_ppm_capture = current_ppm_capture;
 800170e:	4b3f      	ldr	r3, [pc, #252]	; (800180c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a40      	ldr	r2, [pc, #256]	; (8001814 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001714:	6013      	str	r3, [r2, #0]

			//&htim3->Instance->CCER |= TIM_CCER_CC1P;
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001716:	4b3c      	ldr	r3, [pc, #240]	; (8001808 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6a1a      	ldr	r2, [r3, #32]
 800171c:	4b3a      	ldr	r3, [pc, #232]	; (8001808 <HAL_TIM_IC_CaptureCallback+0x128>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 020a 	bic.w	r2, r2, #10
 8001724:	621a      	str	r2, [r3, #32]
 8001726:	4b38      	ldr	r3, [pc, #224]	; (8001808 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6a1a      	ldr	r2, [r3, #32]
 800172c:	4b36      	ldr	r3, [pc, #216]	; (8001808 <HAL_TIM_IC_CaptureCallback+0x128>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f042 0202 	orr.w	r2, r2, #2
 8001734:	621a      	str	r2, [r3, #32]
			}

			__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
		}
	}
}
 8001736:	e062      	b.n	80017fe <HAL_TIM_IC_CaptureCallback+0x11e>
			if (current_ppm_capture > last_ppm_capture)
 8001738:	4b34      	ldr	r3, [pc, #208]	; (800180c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4b35      	ldr	r3, [pc, #212]	; (8001814 <HAL_TIM_IC_CaptureCallback+0x134>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	429a      	cmp	r2, r3
 8001742:	d907      	bls.n	8001754 <HAL_TIM_IC_CaptureCallback+0x74>
				frequency_read = current_ppm_capture - last_ppm_capture;
 8001744:	4b31      	ldr	r3, [pc, #196]	; (800180c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b32      	ldr	r3, [pc, #200]	; (8001814 <HAL_TIM_IC_CaptureCallback+0x134>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	4a32      	ldr	r2, [pc, #200]	; (8001818 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	e00d      	b.n	8001770 <HAL_TIM_IC_CaptureCallback+0x90>
			else if (current_ppm_capture <= last_ppm_capture)
 8001754:	4b2d      	ldr	r3, [pc, #180]	; (800180c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b2e      	ldr	r3, [pc, #184]	; (8001814 <HAL_TIM_IC_CaptureCallback+0x134>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	d807      	bhi.n	8001770 <HAL_TIM_IC_CaptureCallback+0x90>
				frequency_read = 0xFFFFFFFF + current_ppm_capture - last_ppm_capture;
 8001760:	4b2a      	ldr	r3, [pc, #168]	; (800180c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	3b01      	subs	r3, #1
 800176c:	4a2a      	ldr	r2, [pc, #168]	; (8001818 <HAL_TIM_IC_CaptureCallback+0x138>)
 800176e:	6013      	str	r3, [r2, #0]
			frequency_read /= 2;
 8001770:	4b29      	ldr	r3, [pc, #164]	; (8001818 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	085b      	lsrs	r3, r3, #1
 8001776:	4a28      	ldr	r2, [pc, #160]	; (8001818 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001778:	6013      	str	r3, [r2, #0]
			if(frequency_read > 3000)
 800177a:	4b27      	ldr	r3, [pc, #156]	; (8001818 <HAL_TIM_IC_CaptureCallback+0x138>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001782:	4293      	cmp	r3, r2
 8001784:	d903      	bls.n	800178e <HAL_TIM_IC_CaptureCallback+0xae>
				current_ppm_channel = 0;
 8001786:	4b25      	ldr	r3, [pc, #148]	; (800181c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]
 800178c:	e006      	b.n	800179c <HAL_TIM_IC_CaptureCallback+0xbc>
				current_ppm_channel++;
 800178e:	4b23      	ldr	r3, [pc, #140]	; (800181c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	3301      	adds	r3, #1
 8001796:	b2da      	uxtb	r2, r3
 8001798:	4b20      	ldr	r3, [pc, #128]	; (800181c <HAL_TIM_IC_CaptureCallback+0x13c>)
 800179a:	701a      	strb	r2, [r3, #0]
			if(frequency_read > test_max_frequency)
 800179c:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <HAL_TIM_IC_CaptureCallback+0x138>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <HAL_TIM_IC_CaptureCallback+0x140>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d903      	bls.n	80017b0 <HAL_TIM_IC_CaptureCallback+0xd0>
				test_max_frequency = frequency_read;
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <HAL_TIM_IC_CaptureCallback+0x138>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a1c      	ldr	r2, [pc, #112]	; (8001820 <HAL_TIM_IC_CaptureCallback+0x140>)
 80017ae:	6013      	str	r3, [r2, #0]
			frequency_read += 400;
 80017b0:	4b19      	ldr	r3, [pc, #100]	; (8001818 <HAL_TIM_IC_CaptureCallback+0x138>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80017b8:	4a17      	ldr	r2, [pc, #92]	; (8001818 <HAL_TIM_IC_CaptureCallback+0x138>)
 80017ba:	6013      	str	r3, [r2, #0]
			if(current_ppm_channel >= 1 && current_ppm_channel <= 6)
 80017bc:	4b17      	ldr	r3, [pc, #92]	; (800181c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00d      	beq.n	80017e2 <HAL_TIM_IC_CaptureCallback+0x102>
 80017c6:	4b15      	ldr	r3, [pc, #84]	; (800181c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b06      	cmp	r3, #6
 80017ce:	d808      	bhi.n	80017e2 <HAL_TIM_IC_CaptureCallback+0x102>
				ppm_channels[current_ppm_channel - 1] = frequency_read;
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	3b01      	subs	r3, #1
 80017d8:	4a0f      	ldr	r2, [pc, #60]	; (8001818 <HAL_TIM_IC_CaptureCallback+0x138>)
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	4911      	ldr	r1, [pc, #68]	; (8001824 <HAL_TIM_IC_CaptureCallback+0x144>)
 80017de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_TIM_IC_CaptureCallback+0x128>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6a1a      	ldr	r2, [r3, #32]
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <HAL_TIM_IC_CaptureCallback+0x128>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 020a 	bic.w	r2, r2, #10
 80017f0:	621a      	str	r2, [r3, #32]
 80017f2:	4b05      	ldr	r3, [pc, #20]	; (8001808 <HAL_TIM_IC_CaptureCallback+0x128>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	4b04      	ldr	r3, [pc, #16]	; (8001808 <HAL_TIM_IC_CaptureCallback+0x128>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6a12      	ldr	r2, [r2, #32]
 80017fc:	621a      	str	r2, [r3, #32]
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	2000057c 	.word	0x2000057c
 800180c:	2000020c 	.word	0x2000020c
 8001810:	40020000 	.word	0x40020000
 8001814:	20000210 	.word	0x20000210
 8001818:	20000004 	.word	0x20000004
 800181c:	20000214 	.word	0x20000214
 8001820:	20000218 	.word	0x20000218
 8001824:	200004a4 	.word	0x200004a4

08001828 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	if(htim == &htim9)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a07      	ldr	r2, [pc, #28]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d104      	bne.n	8001842 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		//micros_timer_base += 65000;//65536;
		millis_timer_base += 65;//Overflow doesn't matter unless board is running for more than 49 days
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3341      	adds	r3, #65	; 0x41
 800183e:	4a05      	ldr	r2, [pc, #20]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001840:	6013      	str	r3, [r2, #0]
	}
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	200005fc 	.word	0x200005fc
 8001854:	200004c0 	.word	0x200004c0

08001858 <GetMicros>:

uint32_t GetMicros()
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
	//return micros_timer_base + __HAL_TIM_GET_COUNTER(&htim4);
	return __HAL_TIM_GET_COUNTER(&htim9);
 800185c:	4b03      	ldr	r3, [pc, #12]	; (800186c <GetMicros+0x14>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001862:	4618      	mov	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	200005fc 	.word	0x200005fc

08001870 <GetMillis>:

uint32_t GetMillis()
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	return millis_timer_base + (GetMicros() / 1000);
 8001874:	f7ff fff0 	bl	8001858 <GetMicros>
 8001878:	4602      	mov	r2, r0
 800187a:	4b04      	ldr	r3, [pc, #16]	; (800188c <GetMillis+0x1c>)
 800187c:	fba3 2302 	umull	r2, r3, r3, r2
 8001880:	099a      	lsrs	r2, r3, #6
 8001882:	4b03      	ldr	r3, [pc, #12]	; (8001890 <GetMillis+0x20>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
}
 8001888:	4618      	mov	r0, r3
 800188a:	bd80      	pop	{r7, pc}
 800188c:	10624dd3 	.word	0x10624dd3
 8001890:	200004c0 	.word	0x200004c0

08001894 <GetMillisDifference>:

uint32_t GetMillisDifference(uint32_t *timer_counter_to_use)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
	return GetMillis() - *timer_counter_to_use;
 800189c:	f7ff ffe8 	bl	8001870 <GetMillis>
 80018a0:	4602      	mov	r2, r0
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	1ad3      	subs	r3, r2, r3
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <GetMicrosDifference>:

uint32_t GetMicrosDifference(uint32_t *timer_counter_to_use)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	uint32_t current_micros = GetMicros();
 80018b8:	f7ff ffce 	bl	8001858 <GetMicros>
 80018bc:	60b8      	str	r0, [r7, #8]
	uint32_t micros_difference = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]

	if(current_micros > *timer_counter_to_use)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d905      	bls.n	80018d8 <GetMicrosDifference+0x28>
	{
		micros_difference = current_micros - *timer_counter_to_use;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68ba      	ldr	r2, [r7, #8]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	e00c      	b.n	80018f2 <GetMicrosDifference+0x42>
	}
	else if(current_micros < *timer_counter_to_use)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68ba      	ldr	r2, [r7, #8]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d207      	bcs.n	80018f2 <GetMicrosDifference+0x42>
	{
		micros_difference = 65000 + current_micros - *timer_counter_to_use;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	f503 437d 	add.w	r3, r3, #64768	; 0xfd00
 80018ee:	33e8      	adds	r3, #232	; 0xe8
 80018f0:	60fb      	str	r3, [r7, #12]
	}

	return micros_difference;
 80018f2:	68fb      	ldr	r3, [r7, #12]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	read_flag = 1;
 8001904:	4b04      	ldr	r3, [pc, #16]	; (8001918 <HAL_I2C_MemRxCpltCallback+0x1c>)
 8001906:	2201      	movs	r2, #1
 8001908:	701a      	strb	r2, [r3, #0]
	//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	20000208 	.word	0x20000208

0800191c <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c2)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a09      	ldr	r2, [pc, #36]	; (800194c <HAL_I2C_MasterTxCpltCallback+0x30>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d109      	bne.n	8001940 <HAL_I2C_MasterTxCpltCallback+0x24>
	{
		if(ack_rate_counter == ack_rate)
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HAL_I2C_MasterTxCpltCallback+0x34>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4b08      	ldr	r3, [pc, #32]	; (8001954 <HAL_I2C_MasterTxCpltCallback+0x38>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d102      	bne.n	8001940 <HAL_I2C_MasterTxCpltCallback+0x24>
		{
			ack_rate_counter = 0;
 800193a:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_I2C_MasterTxCpltCallback+0x34>)
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
			//HAL_I2C_Master_Receive_DMA(&hi2c2, (uint8_t)(0x04 << 1), (uint8_t *)receive_buffer, 34);
		}
	}
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	200002e4 	.word	0x200002e4
 8001950:	20000209 	.word	0x20000209
 8001954:	20000000 	.word	0x20000000

08001958 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c2)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a08      	ldr	r2, [pc, #32]	; (8001984 <HAL_I2C_MasterRxCpltCallback+0x2c>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d106      	bne.n	8001976 <HAL_I2C_MasterRxCpltCallback+0x1e>
	{
		ack_rate_counter = 0;
 8001968:	4b07      	ldr	r3, [pc, #28]	; (8001988 <HAL_I2C_MasterRxCpltCallback+0x30>)
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]

		//HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);

		send_buffer[34] = 0;
 800196e:	4b07      	ldr	r3, [pc, #28]	; (800198c <HAL_I2C_MasterRxCpltCallback+0x34>)
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	}
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	200002e4 	.word	0x200002e4
 8001988:	20000209 	.word	0x20000209
 800198c:	200004c4 	.word	0x200004c4

08001990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
	...

080019a0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80019a4:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <MX_RTC_Init+0x44>)
 80019a6:	4a10      	ldr	r2, [pc, #64]	; (80019e8 <MX_RTC_Init+0x48>)
 80019a8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <MX_RTC_Init+0x44>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <MX_RTC_Init+0x44>)
 80019b2:	227f      	movs	r2, #127	; 0x7f
 80019b4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <MX_RTC_Init+0x44>)
 80019b8:	22ff      	movs	r2, #255	; 0xff
 80019ba:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <MX_RTC_Init+0x44>)
 80019be:	2200      	movs	r2, #0
 80019c0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019c2:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <MX_RTC_Init+0x44>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <MX_RTC_Init+0x44>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019ce:	4805      	ldr	r0, [pc, #20]	; (80019e4 <MX_RTC_Init+0x44>)
 80019d0:	f005 fdc0 	bl	8007554 <HAL_RTC_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80019da:	f7ff ffd9 	bl	8001990 <Error_Handler>
  }

}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	2000051c 	.word	0x2000051c
 80019e8:	40002800 	.word	0x40002800

080019ec <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <HAL_RTC_MspInit+0x24>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d102      	bne.n	8001a04 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019fe:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <HAL_RTC_MspInit+0x28>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	40002800 	.word	0x40002800
 8001a14:	42470e3c 	.word	0x42470e3c

08001a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <HAL_MspInit+0x4c>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	4a0f      	ldr	r2, [pc, #60]	; (8001a64 <HAL_MspInit+0x4c>)
 8001a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <HAL_MspInit+0x4c>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	603b      	str	r3, [r7, #0]
 8001a3e:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <HAL_MspInit+0x4c>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	4a08      	ldr	r2, [pc, #32]	; (8001a64 <HAL_MspInit+0x4c>)
 8001a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a48:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_MspInit+0x4c>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800

08001a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a7a:	e7fe      	b.n	8001a7a <HardFault_Handler+0x4>

08001a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <MemManage_Handler+0x4>

08001a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a86:	e7fe      	b.n	8001a86 <BusFault_Handler+0x4>

08001a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <UsageFault_Handler+0x4>

08001a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001abc:	f000 fc34 	bl	8002328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001ac8:	4802      	ldr	r0, [pc, #8]	; (8001ad4 <DMA1_Stream0_IRQHandler+0x10>)
 8001aca:	f000 fea9 	bl	8002820 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200003f8 	.word	0x200003f8

08001ad8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <DMA1_Stream3_IRQHandler+0x10>)
 8001ade:	f000 fe9f 	bl	8002820 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000338 	.word	0x20000338

08001aec <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001af0:	4802      	ldr	r0, [pc, #8]	; (8001afc <DMA1_Stream6_IRQHandler+0x10>)
 8001af2:	f000 fe95 	bl	8002820 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000230 	.word	0x20000230

08001b00 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001b04:	4802      	ldr	r0, [pc, #8]	; (8001b10 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001b06:	f005 ff21 	bl	800794c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200005fc 	.word	0x200005fc

08001b14 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b18:	4802      	ldr	r0, [pc, #8]	; (8001b24 <I2C1_EV_IRQHandler+0x10>)
 8001b1a:	f001 ff81 	bl	8003a20 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000290 	.word	0x20000290

08001b28 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001b2c:	4802      	ldr	r0, [pc, #8]	; (8001b38 <I2C2_EV_IRQHandler+0x10>)
 8001b2e:	f001 ff77 	bl	8003a20 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	200002e4 	.word	0x200002e4

08001b3c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001b40:	4802      	ldr	r0, [pc, #8]	; (8001b4c <DMA1_Stream7_IRQHandler+0x10>)
 8001b42:	f000 fe6d 	bl	8002820 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000398 	.word	0x20000398

08001b50 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001b54:	4802      	ldr	r0, [pc, #8]	; (8001b60 <TIM5_IRQHandler+0x10>)
 8001b56:	f005 fef9 	bl	800794c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	2000057c 	.word	0x2000057c

08001b64 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b68:	4802      	ldr	r0, [pc, #8]	; (8001b74 <OTG_FS_IRQHandler+0x10>)
 8001b6a:	f003 ff92 	bl	8005a92 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20001b10 	.word	0x20001b10

08001b78 <_sbrk>:
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	4a14      	ldr	r2, [pc, #80]	; (8001bd4 <_sbrk+0x5c>)
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <_sbrk+0x60>)
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <_sbrk+0x64>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d102      	bne.n	8001b9a <_sbrk+0x22>
 8001b94:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <_sbrk+0x64>)
 8001b96:	4a12      	ldr	r2, [pc, #72]	; (8001be0 <_sbrk+0x68>)
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <_sbrk+0x64>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d207      	bcs.n	8001bb8 <_sbrk+0x40>
 8001ba8:	f00a fad4 	bl	800c154 <__errno>
 8001bac:	4602      	mov	r2, r0
 8001bae:	230c      	movs	r3, #12
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb6:	e009      	b.n	8001bcc <_sbrk+0x54>
 8001bb8:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <_sbrk+0x64>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <_sbrk+0x64>)
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	4a05      	ldr	r2, [pc, #20]	; (8001bdc <_sbrk+0x64>)
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20020000 	.word	0x20020000
 8001bd8:	00000400 	.word	0x00000400
 8001bdc:	20000220 	.word	0x20000220
 8001be0:	20001f20 	.word	0x20001f20

08001be4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <SystemInit+0x28>)
 8001bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bee:	4a07      	ldr	r2, [pc, #28]	; (8001c0c <SystemInit+0x28>)
 8001bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bf8:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <SystemInit+0x28>)
 8001bfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bfe:	609a      	str	r2, [r3, #8]
#endif
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <MX_TIM3_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	; 0x28
 8001c14:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c16:	f107 0320 	add.w	r3, r7, #32
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	60da      	str	r2, [r3, #12]
 8001c2c:	611a      	str	r2, [r3, #16]
 8001c2e:	615a      	str	r2, [r3, #20]
 8001c30:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001c32:	4b32      	ldr	r3, [pc, #200]	; (8001cfc <MX_TIM3_Init+0xec>)
 8001c34:	4a32      	ldr	r2, [pc, #200]	; (8001d00 <MX_TIM3_Init+0xf0>)
 8001c36:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c38:	4b30      	ldr	r3, [pc, #192]	; (8001cfc <MX_TIM3_Init+0xec>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3e:	4b2f      	ldr	r3, [pc, #188]	; (8001cfc <MX_TIM3_Init+0xec>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c44:	4b2d      	ldr	r3, [pc, #180]	; (8001cfc <MX_TIM3_Init+0xec>)
 8001c46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c4c:	4b2b      	ldr	r3, [pc, #172]	; (8001cfc <MX_TIM3_Init+0xec>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c52:	4b2a      	ldr	r3, [pc, #168]	; (8001cfc <MX_TIM3_Init+0xec>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001c58:	4828      	ldr	r0, [pc, #160]	; (8001cfc <MX_TIM3_Init+0xec>)
 8001c5a:	f005 fdaf 	bl	80077bc <HAL_TIM_OC_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001c64:	f7ff fe94 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c70:	f107 0320 	add.w	r3, r7, #32
 8001c74:	4619      	mov	r1, r3
 8001c76:	4821      	ldr	r0, [pc, #132]	; (8001cfc <MX_TIM3_Init+0xec>)
 8001c78:	f006 fdc0 	bl	80087fc <HAL_TIMEx_MasterConfigSynchronization>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001c82:	f7ff fe85 	bl	8001990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001c86:	2300      	movs	r3, #0
 8001c88:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	2200      	movs	r2, #0
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4817      	ldr	r0, [pc, #92]	; (8001cfc <MX_TIM3_Init+0xec>)
 8001c9e:	f005 ff5d 	bl	8007b5c <HAL_TIM_OC_ConfigChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001ca8:	f7ff fe72 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	2204      	movs	r2, #4
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4812      	ldr	r0, [pc, #72]	; (8001cfc <MX_TIM3_Init+0xec>)
 8001cb4:	f005 ff52 	bl	8007b5c <HAL_TIM_OC_ConfigChannel>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001cbe:	f7ff fe67 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	2208      	movs	r2, #8
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	480c      	ldr	r0, [pc, #48]	; (8001cfc <MX_TIM3_Init+0xec>)
 8001cca:	f005 ff47 	bl	8007b5c <HAL_TIM_OC_ConfigChannel>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001cd4:	f7ff fe5c 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	220c      	movs	r2, #12
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4807      	ldr	r0, [pc, #28]	; (8001cfc <MX_TIM3_Init+0xec>)
 8001ce0:	f005 ff3c 	bl	8007b5c <HAL_TIM_OC_ConfigChannel>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001cea:	f7ff fe51 	bl	8001990 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001cee:	4803      	ldr	r0, [pc, #12]	; (8001cfc <MX_TIM3_Init+0xec>)
 8001cf0:	f000 fa1c 	bl	800212c <HAL_TIM_MspPostInit>

}
 8001cf4:	bf00      	nop
 8001cf6:	3728      	adds	r7, #40	; 0x28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	200005bc 	.word	0x200005bc
 8001d00:	40000400 	.word	0x40000400

08001d04 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	; 0x28
 8001d08:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d0a:	f107 0318 	add.w	r3, r7, #24
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d18:	f107 0310 	add.w	r3, r7, #16
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d22:	463b      	mov	r3, r7
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]

  htim5.Instance = TIM5;
 8001d2e:	4b2b      	ldr	r3, [pc, #172]	; (8001ddc <MX_TIM5_Init+0xd8>)
 8001d30:	4a2b      	ldr	r2, [pc, #172]	; (8001de0 <MX_TIM5_Init+0xdc>)
 8001d32:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 41;
 8001d34:	4b29      	ldr	r3, [pc, #164]	; (8001ddc <MX_TIM5_Init+0xd8>)
 8001d36:	2229      	movs	r2, #41	; 0x29
 8001d38:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3a:	4b28      	ldr	r3, [pc, #160]	; (8001ddc <MX_TIM5_Init+0xd8>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001d40:	4b26      	ldr	r3, [pc, #152]	; (8001ddc <MX_TIM5_Init+0xd8>)
 8001d42:	f04f 32ff 	mov.w	r2, #4294967295
 8001d46:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d48:	4b24      	ldr	r3, [pc, #144]	; (8001ddc <MX_TIM5_Init+0xd8>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d4e:	4b23      	ldr	r3, [pc, #140]	; (8001ddc <MX_TIM5_Init+0xd8>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001d54:	4821      	ldr	r0, [pc, #132]	; (8001ddc <MX_TIM5_Init+0xd8>)
 8001d56:	f005 fce2 	bl	800771e <HAL_TIM_Base_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8001d60:	f7ff fe16 	bl	8001990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d68:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001d6a:	f107 0318 	add.w	r3, r7, #24
 8001d6e:	4619      	mov	r1, r3
 8001d70:	481a      	ldr	r0, [pc, #104]	; (8001ddc <MX_TIM5_Init+0xd8>)
 8001d72:	f005 ffef 	bl	8007d54 <HAL_TIM_ConfigClockSource>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001d7c:	f7ff fe08 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001d80:	4816      	ldr	r0, [pc, #88]	; (8001ddc <MX_TIM5_Init+0xd8>)
 8001d82:	f005 fd46 	bl	8007812 <HAL_TIM_IC_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001d8c:	f7ff fe00 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d90:	2300      	movs	r3, #0
 8001d92:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d98:	f107 0310 	add.w	r3, r7, #16
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	480f      	ldr	r0, [pc, #60]	; (8001ddc <MX_TIM5_Init+0xd8>)
 8001da0:	f006 fd2c 	bl	80087fc <HAL_TIMEx_MasterConfigSynchronization>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 8001daa:	f7ff fdf1 	bl	8001990 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001dae:	2300      	movs	r3, #0
 8001db0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001db2:	2301      	movs	r3, #1
 8001db4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001db6:	2300      	movs	r3, #0
 8001db8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001dbe:	463b      	mov	r3, r7
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4805      	ldr	r0, [pc, #20]	; (8001ddc <MX_TIM5_Init+0xd8>)
 8001dc6:	f005 ff29 	bl	8007c1c <HAL_TIM_IC_ConfigChannel>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8001dd0:	f7ff fdde 	bl	8001990 <Error_Handler>
  }

}
 8001dd4:	bf00      	nop
 8001dd6:	3728      	adds	r7, #40	; 0x28
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	2000057c 	.word	0x2000057c
 8001de0:	40000c00 	.word	0x40000c00

08001de4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b096      	sub	sp, #88	; 0x58
 8001de8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	60da      	str	r2, [r3, #12]
 8001e10:	611a      	str	r2, [r3, #16]
 8001e12:	615a      	str	r2, [r3, #20]
 8001e14:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e16:	1d3b      	adds	r3, r7, #4
 8001e18:	2220      	movs	r2, #32
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f00a f9d3 	bl	800c1c8 <memset>

  htim8.Instance = TIM8;
 8001e22:	4b50      	ldr	r3, [pc, #320]	; (8001f64 <MX_TIM8_Init+0x180>)
 8001e24:	4a50      	ldr	r2, [pc, #320]	; (8001f68 <MX_TIM8_Init+0x184>)
 8001e26:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001e28:	4b4e      	ldr	r3, [pc, #312]	; (8001f64 <MX_TIM8_Init+0x180>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e2e:	4b4d      	ldr	r3, [pc, #308]	; (8001f64 <MX_TIM8_Init+0x180>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001e34:	4b4b      	ldr	r3, [pc, #300]	; (8001f64 <MX_TIM8_Init+0x180>)
 8001e36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e3a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e3c:	4b49      	ldr	r3, [pc, #292]	; (8001f64 <MX_TIM8_Init+0x180>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001e42:	4b48      	ldr	r3, [pc, #288]	; (8001f64 <MX_TIM8_Init+0x180>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e48:	4b46      	ldr	r3, [pc, #280]	; (8001f64 <MX_TIM8_Init+0x180>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001e4e:	4845      	ldr	r0, [pc, #276]	; (8001f64 <MX_TIM8_Init+0x180>)
 8001e50:	f005 fc65 	bl	800771e <HAL_TIM_Base_Init>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001e5a:	f7ff fd99 	bl	8001990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e62:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001e64:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e68:	4619      	mov	r1, r3
 8001e6a:	483e      	ldr	r0, [pc, #248]	; (8001f64 <MX_TIM8_Init+0x180>)
 8001e6c:	f005 ff72 	bl	8007d54 <HAL_TIM_ConfigClockSource>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001e76:	f7ff fd8b 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001e7a:	483a      	ldr	r0, [pc, #232]	; (8001f64 <MX_TIM8_Init+0x180>)
 8001e7c:	f005 fc9e 	bl	80077bc <HAL_TIM_OC_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001e86:	f7ff fd83 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e96:	4619      	mov	r1, r3
 8001e98:	4832      	ldr	r0, [pc, #200]	; (8001f64 <MX_TIM8_Init+0x180>)
 8001e9a:	f006 fcaf 	bl	80087fc <HAL_TIMEx_MasterConfigSynchronization>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001ea4:	f7ff fd74 	bl	8001990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec8:	2200      	movs	r2, #0
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4825      	ldr	r0, [pc, #148]	; (8001f64 <MX_TIM8_Init+0x180>)
 8001ece:	f005 fe45 	bl	8007b5c <HAL_TIM_OC_ConfigChannel>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001ed8:	f7ff fd5a 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee0:	2204      	movs	r2, #4
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	481f      	ldr	r0, [pc, #124]	; (8001f64 <MX_TIM8_Init+0x180>)
 8001ee6:	f005 fe39 	bl	8007b5c <HAL_TIM_OC_ConfigChannel>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001ef0:	f7ff fd4e 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef8:	2208      	movs	r2, #8
 8001efa:	4619      	mov	r1, r3
 8001efc:	4819      	ldr	r0, [pc, #100]	; (8001f64 <MX_TIM8_Init+0x180>)
 8001efe:	f005 fe2d 	bl	8007b5c <HAL_TIM_OC_ConfigChannel>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8001f08:	f7ff fd42 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f10:	220c      	movs	r2, #12
 8001f12:	4619      	mov	r1, r3
 8001f14:	4813      	ldr	r0, [pc, #76]	; (8001f64 <MX_TIM8_Init+0x180>)
 8001f16:	f005 fe21 	bl	8007b5c <HAL_TIM_OC_ConfigChannel>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8001f20:	f7ff fd36 	bl	8001990 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f3c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001f42:	1d3b      	adds	r3, r7, #4
 8001f44:	4619      	mov	r1, r3
 8001f46:	4807      	ldr	r0, [pc, #28]	; (8001f64 <MX_TIM8_Init+0x180>)
 8001f48:	f006 fcd4 	bl	80088f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8001f52:	f7ff fd1d 	bl	8001990 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8001f56:	4803      	ldr	r0, [pc, #12]	; (8001f64 <MX_TIM8_Init+0x180>)
 8001f58:	f000 f8e8 	bl	800212c <HAL_TIM_MspPostInit>

}
 8001f5c:	bf00      	nop
 8001f5e:	3758      	adds	r7, #88	; 0x58
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	2000053c 	.word	0x2000053c
 8001f68:	40010400 	.word	0x40010400

08001f6c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f72:	463b      	mov	r3, r7
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 8001f7e:	4b16      	ldr	r3, [pc, #88]	; (8001fd8 <MX_TIM9_Init+0x6c>)
 8001f80:	4a16      	ldr	r2, [pc, #88]	; (8001fdc <MX_TIM9_Init+0x70>)
 8001f82:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 167;
 8001f84:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <MX_TIM9_Init+0x6c>)
 8001f86:	22a7      	movs	r2, #167	; 0xa7
 8001f88:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f8a:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <MX_TIM9_Init+0x6c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 64999;
 8001f90:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <MX_TIM9_Init+0x6c>)
 8001f92:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8001f96:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f98:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <MX_TIM9_Init+0x6c>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <MX_TIM9_Init+0x6c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001fa4:	480c      	ldr	r0, [pc, #48]	; (8001fd8 <MX_TIM9_Init+0x6c>)
 8001fa6:	f005 fbba 	bl	800771e <HAL_TIM_Base_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001fb0:	f7ff fcee 	bl	8001990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fb8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001fba:	463b      	mov	r3, r7
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4806      	ldr	r0, [pc, #24]	; (8001fd8 <MX_TIM9_Init+0x6c>)
 8001fc0:	f005 fec8 	bl	8007d54 <HAL_TIM_ConfigClockSource>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001fca:	f7ff fce1 	bl	8001990 <Error_Handler>
  }

}
 8001fce:	bf00      	nop
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200005fc 	.word	0x200005fc
 8001fdc:	40014000 	.word	0x40014000

08001fe0 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM3)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a0b      	ldr	r2, [pc, #44]	; (800201c <HAL_TIM_OC_MspInit+0x3c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d10d      	bne.n	800200e <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <HAL_TIM_OC_MspInit+0x40>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	4a09      	ldr	r2, [pc, #36]	; (8002020 <HAL_TIM_OC_MspInit+0x40>)
 8001ffc:	f043 0302 	orr.w	r3, r3, #2
 8002000:	6413      	str	r3, [r2, #64]	; 0x40
 8002002:	4b07      	ldr	r3, [pc, #28]	; (8002020 <HAL_TIM_OC_MspInit+0x40>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800200e:	bf00      	nop
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40000400 	.word	0x40000400
 8002020:	40023800 	.word	0x40023800

08002024 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08c      	sub	sp, #48	; 0x30
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 031c 	add.w	r3, r7, #28
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM5)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a35      	ldr	r2, [pc, #212]	; (8002118 <HAL_TIM_Base_MspInit+0xf4>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d134      	bne.n	80020b0 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	61bb      	str	r3, [r7, #24]
 800204a:	4b34      	ldr	r3, [pc, #208]	; (800211c <HAL_TIM_Base_MspInit+0xf8>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	4a33      	ldr	r2, [pc, #204]	; (800211c <HAL_TIM_Base_MspInit+0xf8>)
 8002050:	f043 0308 	orr.w	r3, r3, #8
 8002054:	6413      	str	r3, [r2, #64]	; 0x40
 8002056:	4b31      	ldr	r3, [pc, #196]	; (800211c <HAL_TIM_Base_MspInit+0xf8>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	61bb      	str	r3, [r7, #24]
 8002060:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	4b2d      	ldr	r3, [pc, #180]	; (800211c <HAL_TIM_Base_MspInit+0xf8>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4a2c      	ldr	r2, [pc, #176]	; (800211c <HAL_TIM_Base_MspInit+0xf8>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4b2a      	ldr	r3, [pc, #168]	; (800211c <HAL_TIM_Base_MspInit+0xf8>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	697b      	ldr	r3, [r7, #20]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800207e:	2301      	movs	r3, #1
 8002080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002082:	2302      	movs	r3, #2
 8002084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208a:	2300      	movs	r3, #0
 800208c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800208e:	2302      	movs	r3, #2
 8002090:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002092:	f107 031c 	add.w	r3, r7, #28
 8002096:	4619      	mov	r1, r3
 8002098:	4821      	ldr	r0, [pc, #132]	; (8002120 <HAL_TIM_Base_MspInit+0xfc>)
 800209a:	f000 fe43 	bl	8002d24 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	2100      	movs	r1, #0
 80020a2:	2032      	movs	r0, #50	; 0x32
 80020a4:	f000 fa5d 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80020a8:	2032      	movs	r0, #50	; 0x32
 80020aa:	f000 fa76 	bl	800259a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80020ae:	e02e      	b.n	800210e <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM8)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a1b      	ldr	r2, [pc, #108]	; (8002124 <HAL_TIM_Base_MspInit+0x100>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d10e      	bne.n	80020d8 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	4b17      	ldr	r3, [pc, #92]	; (800211c <HAL_TIM_Base_MspInit+0xf8>)
 80020c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c2:	4a16      	ldr	r2, [pc, #88]	; (800211c <HAL_TIM_Base_MspInit+0xf8>)
 80020c4:	f043 0302 	orr.w	r3, r3, #2
 80020c8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ca:	4b14      	ldr	r3, [pc, #80]	; (800211c <HAL_TIM_Base_MspInit+0xf8>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	693b      	ldr	r3, [r7, #16]
}
 80020d6:	e01a      	b.n	800210e <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM9)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a12      	ldr	r2, [pc, #72]	; (8002128 <HAL_TIM_Base_MspInit+0x104>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d115      	bne.n	800210e <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	4b0d      	ldr	r3, [pc, #52]	; (800211c <HAL_TIM_Base_MspInit+0xf8>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	4a0c      	ldr	r2, [pc, #48]	; (800211c <HAL_TIM_Base_MspInit+0xf8>)
 80020ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f0:	6453      	str	r3, [r2, #68]	; 0x44
 80020f2:	4b0a      	ldr	r3, [pc, #40]	; (800211c <HAL_TIM_Base_MspInit+0xf8>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80020fe:	2200      	movs	r2, #0
 8002100:	2100      	movs	r1, #0
 8002102:	2018      	movs	r0, #24
 8002104:	f000 fa2d 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002108:	2018      	movs	r0, #24
 800210a:	f000 fa46 	bl	800259a <HAL_NVIC_EnableIRQ>
}
 800210e:	bf00      	nop
 8002110:	3730      	adds	r7, #48	; 0x30
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40000c00 	.word	0x40000c00
 800211c:	40023800 	.word	0x40023800
 8002120:	40020000 	.word	0x40020000
 8002124:	40010400 	.word	0x40010400
 8002128:	40014000 	.word	0x40014000

0800212c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08a      	sub	sp, #40	; 0x28
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a33      	ldr	r2, [pc, #204]	; (8002218 <HAL_TIM_MspPostInit+0xec>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d13c      	bne.n	80021c8 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	4b32      	ldr	r3, [pc, #200]	; (800221c <HAL_TIM_MspPostInit+0xf0>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	4a31      	ldr	r2, [pc, #196]	; (800221c <HAL_TIM_MspPostInit+0xf0>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6313      	str	r3, [r2, #48]	; 0x30
 800215e:	4b2f      	ldr	r3, [pc, #188]	; (800221c <HAL_TIM_MspPostInit+0xf0>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	4b2b      	ldr	r3, [pc, #172]	; (800221c <HAL_TIM_MspPostInit+0xf0>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	4a2a      	ldr	r2, [pc, #168]	; (800221c <HAL_TIM_MspPostInit+0xf0>)
 8002174:	f043 0302 	orr.w	r3, r3, #2
 8002178:	6313      	str	r3, [r2, #48]	; 0x30
 800217a:	4b28      	ldr	r3, [pc, #160]	; (800221c <HAL_TIM_MspPostInit+0xf0>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002186:	23c0      	movs	r3, #192	; 0xc0
 8002188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218a:	2302      	movs	r3, #2
 800218c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002192:	2300      	movs	r3, #0
 8002194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002196:	2302      	movs	r3, #2
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219a:	f107 0314 	add.w	r3, r7, #20
 800219e:	4619      	mov	r1, r3
 80021a0:	481f      	ldr	r0, [pc, #124]	; (8002220 <HAL_TIM_MspPostInit+0xf4>)
 80021a2:	f000 fdbf 	bl	8002d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021a6:	2303      	movs	r3, #3
 80021a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021aa:	2302      	movs	r3, #2
 80021ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b2:	2300      	movs	r3, #0
 80021b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021b6:	2302      	movs	r3, #2
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ba:	f107 0314 	add.w	r3, r7, #20
 80021be:	4619      	mov	r1, r3
 80021c0:	4818      	ldr	r0, [pc, #96]	; (8002224 <HAL_TIM_MspPostInit+0xf8>)
 80021c2:	f000 fdaf 	bl	8002d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80021c6:	e023      	b.n	8002210 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM8)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a16      	ldr	r2, [pc, #88]	; (8002228 <HAL_TIM_MspPostInit+0xfc>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d11e      	bne.n	8002210 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <HAL_TIM_MspPostInit+0xf0>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	4a10      	ldr	r2, [pc, #64]	; (800221c <HAL_TIM_MspPostInit+0xf0>)
 80021dc:	f043 0304 	orr.w	r3, r3, #4
 80021e0:	6313      	str	r3, [r2, #48]	; 0x30
 80021e2:	4b0e      	ldr	r3, [pc, #56]	; (800221c <HAL_TIM_MspPostInit+0xf0>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	60bb      	str	r3, [r7, #8]
 80021ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80021ee:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80021f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f4:	2302      	movs	r3, #2
 80021f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fc:	2300      	movs	r3, #0
 80021fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002200:	2303      	movs	r3, #3
 8002202:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	4619      	mov	r1, r3
 800220a:	4808      	ldr	r0, [pc, #32]	; (800222c <HAL_TIM_MspPostInit+0x100>)
 800220c:	f000 fd8a 	bl	8002d24 <HAL_GPIO_Init>
}
 8002210:	bf00      	nop
 8002212:	3728      	adds	r7, #40	; 0x28
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40000400 	.word	0x40000400
 800221c:	40023800 	.word	0x40023800
 8002220:	40020000 	.word	0x40020000
 8002224:	40020400 	.word	0x40020400
 8002228:	40010400 	.word	0x40010400
 800222c:	40020800 	.word	0x40020800

08002230 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002230:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002268 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002234:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002236:	e003      	b.n	8002240 <LoopCopyDataInit>

08002238 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800223a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800223c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800223e:	3104      	adds	r1, #4

08002240 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002240:	480b      	ldr	r0, [pc, #44]	; (8002270 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002242:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002244:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002246:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002248:	d3f6      	bcc.n	8002238 <CopyDataInit>
  ldr  r2, =_sbss
 800224a:	4a0b      	ldr	r2, [pc, #44]	; (8002278 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800224c:	e002      	b.n	8002254 <LoopFillZerobss>

0800224e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800224e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002250:	f842 3b04 	str.w	r3, [r2], #4

08002254 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002254:	4b09      	ldr	r3, [pc, #36]	; (800227c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002256:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002258:	d3f9      	bcc.n	800224e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800225a:	f7ff fcc3 	bl	8001be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800225e:	f009 ff7f 	bl	800c160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002262:	f7ff f811 	bl	8001288 <main>
  bx  lr    
 8002266:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002268:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800226c:	0800cad8 	.word	0x0800cad8
  ldr  r0, =_sdata
 8002270:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002274:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8002278:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 800227c:	20001f1c 	.word	0x20001f1c

08002280 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002280:	e7fe      	b.n	8002280 <ADC_IRQHandler>
	...

08002284 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002288:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <HAL_Init+0x40>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0d      	ldr	r2, [pc, #52]	; (80022c4 <HAL_Init+0x40>)
 800228e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002292:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <HAL_Init+0x40>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a0a      	ldr	r2, [pc, #40]	; (80022c4 <HAL_Init+0x40>)
 800229a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800229e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a0:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <HAL_Init+0x40>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a07      	ldr	r2, [pc, #28]	; (80022c4 <HAL_Init+0x40>)
 80022a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ac:	2003      	movs	r0, #3
 80022ae:	f000 f94d 	bl	800254c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022b2:	2000      	movs	r0, #0
 80022b4:	f000 f808 	bl	80022c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022b8:	f7ff fbae 	bl	8001a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40023c00 	.word	0x40023c00

080022c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022d0:	4b12      	ldr	r3, [pc, #72]	; (800231c <HAL_InitTick+0x54>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4b12      	ldr	r3, [pc, #72]	; (8002320 <HAL_InitTick+0x58>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	4619      	mov	r1, r3
 80022da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022de:	fbb3 f3f1 	udiv	r3, r3, r1
 80022e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 f965 	bl	80025b6 <HAL_SYSTICK_Config>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e00e      	b.n	8002314 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b0f      	cmp	r3, #15
 80022fa:	d80a      	bhi.n	8002312 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022fc:	2200      	movs	r2, #0
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	f04f 30ff 	mov.w	r0, #4294967295
 8002304:	f000 f92d 	bl	8002562 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002308:	4a06      	ldr	r2, [pc, #24]	; (8002324 <HAL_InitTick+0x5c>)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	e000      	b.n	8002314 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
}
 8002314:	4618      	mov	r0, r3
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20000008 	.word	0x20000008
 8002320:	20000010 	.word	0x20000010
 8002324:	2000000c 	.word	0x2000000c

08002328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800232c:	4b06      	ldr	r3, [pc, #24]	; (8002348 <HAL_IncTick+0x20>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	461a      	mov	r2, r3
 8002332:	4b06      	ldr	r3, [pc, #24]	; (800234c <HAL_IncTick+0x24>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4413      	add	r3, r2
 8002338:	4a04      	ldr	r2, [pc, #16]	; (800234c <HAL_IncTick+0x24>)
 800233a:	6013      	str	r3, [r2, #0]
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	20000010 	.word	0x20000010
 800234c:	2000063c 	.word	0x2000063c

08002350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return uwTick;
 8002354:	4b03      	ldr	r3, [pc, #12]	; (8002364 <HAL_GetTick+0x14>)
 8002356:	681b      	ldr	r3, [r3, #0]
}
 8002358:	4618      	mov	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	2000063c 	.word	0x2000063c

08002368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002370:	f7ff ffee 	bl	8002350 <HAL_GetTick>
 8002374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002380:	d005      	beq.n	800238e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002382:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <HAL_Delay+0x40>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	461a      	mov	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4413      	add	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800238e:	bf00      	nop
 8002390:	f7ff ffde 	bl	8002350 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	429a      	cmp	r2, r3
 800239e:	d8f7      	bhi.n	8002390 <HAL_Delay+0x28>
  {
  }
}
 80023a0:	bf00      	nop
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20000010 	.word	0x20000010

080023ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <__NVIC_SetPriorityGrouping+0x44>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023c8:	4013      	ands	r3, r2
 80023ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023de:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <__NVIC_SetPriorityGrouping+0x44>)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	60d3      	str	r3, [r2, #12]
}
 80023e4:	bf00      	nop
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <__NVIC_GetPriorityGrouping+0x18>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	0a1b      	lsrs	r3, r3, #8
 80023fe:	f003 0307 	and.w	r3, r3, #7
}
 8002402:	4618      	mov	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	2b00      	cmp	r3, #0
 8002420:	db0b      	blt.n	800243a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	f003 021f 	and.w	r2, r3, #31
 8002428:	4907      	ldr	r1, [pc, #28]	; (8002448 <__NVIC_EnableIRQ+0x38>)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	095b      	lsrs	r3, r3, #5
 8002430:	2001      	movs	r0, #1
 8002432:	fa00 f202 	lsl.w	r2, r0, r2
 8002436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	e000e100 	.word	0xe000e100

0800244c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	6039      	str	r1, [r7, #0]
 8002456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245c:	2b00      	cmp	r3, #0
 800245e:	db0a      	blt.n	8002476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	b2da      	uxtb	r2, r3
 8002464:	490c      	ldr	r1, [pc, #48]	; (8002498 <__NVIC_SetPriority+0x4c>)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	0112      	lsls	r2, r2, #4
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	440b      	add	r3, r1
 8002470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002474:	e00a      	b.n	800248c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	b2da      	uxtb	r2, r3
 800247a:	4908      	ldr	r1, [pc, #32]	; (800249c <__NVIC_SetPriority+0x50>)
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	3b04      	subs	r3, #4
 8002484:	0112      	lsls	r2, r2, #4
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	440b      	add	r3, r1
 800248a:	761a      	strb	r2, [r3, #24]
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	e000e100 	.word	0xe000e100
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	; 0x24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f1c3 0307 	rsb	r3, r3, #7
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	bf28      	it	cs
 80024be:	2304      	movcs	r3, #4
 80024c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	3304      	adds	r3, #4
 80024c6:	2b06      	cmp	r3, #6
 80024c8:	d902      	bls.n	80024d0 <NVIC_EncodePriority+0x30>
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3b03      	subs	r3, #3
 80024ce:	e000      	b.n	80024d2 <NVIC_EncodePriority+0x32>
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d4:	f04f 32ff 	mov.w	r2, #4294967295
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43da      	mvns	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	401a      	ands	r2, r3
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e8:	f04f 31ff 	mov.w	r1, #4294967295
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	fa01 f303 	lsl.w	r3, r1, r3
 80024f2:	43d9      	mvns	r1, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f8:	4313      	orrs	r3, r2
         );
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3724      	adds	r7, #36	; 0x24
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
	...

08002508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3b01      	subs	r3, #1
 8002514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002518:	d301      	bcc.n	800251e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800251a:	2301      	movs	r3, #1
 800251c:	e00f      	b.n	800253e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800251e:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <SysTick_Config+0x40>)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3b01      	subs	r3, #1
 8002524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002526:	210f      	movs	r1, #15
 8002528:	f04f 30ff 	mov.w	r0, #4294967295
 800252c:	f7ff ff8e 	bl	800244c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002530:	4b05      	ldr	r3, [pc, #20]	; (8002548 <SysTick_Config+0x40>)
 8002532:	2200      	movs	r2, #0
 8002534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002536:	4b04      	ldr	r3, [pc, #16]	; (8002548 <SysTick_Config+0x40>)
 8002538:	2207      	movs	r2, #7
 800253a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	e000e010 	.word	0xe000e010

0800254c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff ff29 	bl	80023ac <__NVIC_SetPriorityGrouping>
}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002562:	b580      	push	{r7, lr}
 8002564:	b086      	sub	sp, #24
 8002566:	af00      	add	r7, sp, #0
 8002568:	4603      	mov	r3, r0
 800256a:	60b9      	str	r1, [r7, #8]
 800256c:	607a      	str	r2, [r7, #4]
 800256e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002574:	f7ff ff3e 	bl	80023f4 <__NVIC_GetPriorityGrouping>
 8002578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	6978      	ldr	r0, [r7, #20]
 8002580:	f7ff ff8e 	bl	80024a0 <NVIC_EncodePriority>
 8002584:	4602      	mov	r2, r0
 8002586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800258a:	4611      	mov	r1, r2
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff ff5d 	bl	800244c <__NVIC_SetPriority>
}
 8002592:	bf00      	nop
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	4603      	mov	r3, r0
 80025a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff ff31 	bl	8002410 <__NVIC_EnableIRQ>
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff ffa2 	bl	8002508 <SysTick_Config>
 80025c4:	4603      	mov	r3, r0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025dc:	f7ff feb8 	bl	8002350 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e099      	b.n	8002720 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2202      	movs	r2, #2
 80025f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0201 	bic.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800260c:	e00f      	b.n	800262e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800260e:	f7ff fe9f 	bl	8002350 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b05      	cmp	r3, #5
 800261a:	d908      	bls.n	800262e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2220      	movs	r2, #32
 8002620:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2203      	movs	r2, #3
 8002626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e078      	b.n	8002720 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1e8      	bne.n	800260e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	4b38      	ldr	r3, [pc, #224]	; (8002728 <HAL_DMA_Init+0x158>)
 8002648:	4013      	ands	r3, r2
 800264a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800265a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002666:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002672:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	4313      	orrs	r3, r2
 800267e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	2b04      	cmp	r3, #4
 8002686:	d107      	bne.n	8002698 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	4313      	orrs	r3, r2
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4313      	orrs	r3, r2
 8002696:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f023 0307 	bic.w	r3, r3, #7
 80026ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d117      	bne.n	80026f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00e      	beq.n	80026f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 faab 	bl	8002c30 <DMA_CheckFifoParam>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2240      	movs	r2, #64	; 0x40
 80026e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80026ee:	2301      	movs	r3, #1
 80026f0:	e016      	b.n	8002720 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 fa62 	bl	8002bc4 <DMA_CalcBaseAndBitshift>
 8002700:	4603      	mov	r3, r0
 8002702:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002708:	223f      	movs	r2, #63	; 0x3f
 800270a:	409a      	lsls	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	f010803f 	.word	0xf010803f

0800272c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
 8002738:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002742:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <HAL_DMA_Start_IT+0x26>
 800274e:	2302      	movs	r3, #2
 8002750:	e040      	b.n	80027d4 <HAL_DMA_Start_IT+0xa8>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b01      	cmp	r3, #1
 8002764:	d12f      	bne.n	80027c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2202      	movs	r2, #2
 800276a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 f9f4 	bl	8002b68 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002784:	223f      	movs	r2, #63	; 0x3f
 8002786:	409a      	lsls	r2, r3
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 0216 	orr.w	r2, r2, #22
 800279a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d007      	beq.n	80027b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0208 	orr.w	r2, r2, #8
 80027b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0201 	orr.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	e005      	b.n	80027d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027ce:	2302      	movs	r3, #2
 80027d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d004      	beq.n	80027fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2280      	movs	r2, #128	; 0x80
 80027f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e00c      	b.n	8002814 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2205      	movs	r2, #5
 80027fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0201 	bic.w	r2, r2, #1
 8002810:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002828:	2300      	movs	r3, #0
 800282a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800282c:	4b92      	ldr	r3, [pc, #584]	; (8002a78 <HAL_DMA_IRQHandler+0x258>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a92      	ldr	r2, [pc, #584]	; (8002a7c <HAL_DMA_IRQHandler+0x25c>)
 8002832:	fba2 2303 	umull	r2, r3, r2, r3
 8002836:	0a9b      	lsrs	r3, r3, #10
 8002838:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284a:	2208      	movs	r2, #8
 800284c:	409a      	lsls	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4013      	ands	r3, r2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d01a      	beq.n	800288c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d013      	beq.n	800288c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0204 	bic.w	r2, r2, #4
 8002872:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002878:	2208      	movs	r2, #8
 800287a:	409a      	lsls	r2, r3
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002884:	f043 0201 	orr.w	r2, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002890:	2201      	movs	r2, #1
 8002892:	409a      	lsls	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4013      	ands	r3, r2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d012      	beq.n	80028c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00b      	beq.n	80028c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ae:	2201      	movs	r2, #1
 80028b0:	409a      	lsls	r2, r3
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ba:	f043 0202 	orr.w	r2, r3, #2
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c6:	2204      	movs	r2, #4
 80028c8:	409a      	lsls	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	4013      	ands	r3, r2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d012      	beq.n	80028f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00b      	beq.n	80028f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e4:	2204      	movs	r2, #4
 80028e6:	409a      	lsls	r2, r3
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f0:	f043 0204 	orr.w	r2, r3, #4
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fc:	2210      	movs	r2, #16
 80028fe:	409a      	lsls	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4013      	ands	r3, r2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d043      	beq.n	8002990 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d03c      	beq.n	8002990 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291a:	2210      	movs	r2, #16
 800291c:	409a      	lsls	r2, r3
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d018      	beq.n	8002962 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d108      	bne.n	8002950 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d024      	beq.n	8002990 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	4798      	blx	r3
 800294e:	e01f      	b.n	8002990 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002954:	2b00      	cmp	r3, #0
 8002956:	d01b      	beq.n	8002990 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	4798      	blx	r3
 8002960:	e016      	b.n	8002990 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296c:	2b00      	cmp	r3, #0
 800296e:	d107      	bne.n	8002980 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0208 	bic.w	r2, r2, #8
 800297e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002994:	2220      	movs	r2, #32
 8002996:	409a      	lsls	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4013      	ands	r3, r2
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 808e 	beq.w	8002abe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0310 	and.w	r3, r3, #16
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 8086 	beq.w	8002abe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b6:	2220      	movs	r2, #32
 80029b8:	409a      	lsls	r2, r3
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b05      	cmp	r3, #5
 80029c8:	d136      	bne.n	8002a38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f022 0216 	bic.w	r2, r2, #22
 80029d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695a      	ldr	r2, [r3, #20]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d103      	bne.n	80029fa <HAL_DMA_IRQHandler+0x1da>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d007      	beq.n	8002a0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 0208 	bic.w	r2, r2, #8
 8002a08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0e:	223f      	movs	r2, #63	; 0x3f
 8002a10:	409a      	lsls	r2, r3
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d07d      	beq.n	8002b2a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	4798      	blx	r3
        }
        return;
 8002a36:	e078      	b.n	8002b2a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d01c      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d108      	bne.n	8002a66 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d030      	beq.n	8002abe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	4798      	blx	r3
 8002a64:	e02b      	b.n	8002abe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d027      	beq.n	8002abe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	4798      	blx	r3
 8002a76:	e022      	b.n	8002abe <HAL_DMA_IRQHandler+0x29e>
 8002a78:	20000008 	.word	0x20000008
 8002a7c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10f      	bne.n	8002aae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0210 	bic.w	r2, r2, #16
 8002a9c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d032      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d022      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2205      	movs	r2, #5
 8002ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0201 	bic.w	r2, r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	3301      	adds	r3, #1
 8002aee:	60bb      	str	r3, [r7, #8]
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d307      	bcc.n	8002b06 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1f2      	bne.n	8002aea <HAL_DMA_IRQHandler+0x2ca>
 8002b04:	e000      	b.n	8002b08 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002b06:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	4798      	blx	r3
 8002b28:	e000      	b.n	8002b2c <HAL_DMA_IRQHandler+0x30c>
        return;
 8002b2a:	bf00      	nop
    }
  }
}
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop

08002b34 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b42:	b2db      	uxtb	r3, r3
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
 8002b74:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b84:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	2b40      	cmp	r3, #64	; 0x40
 8002b94:	d108      	bne.n	8002ba8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ba6:	e007      	b.n	8002bb8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	60da      	str	r2, [r3, #12]
}
 8002bb8:	bf00      	nop
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	3b10      	subs	r3, #16
 8002bd4:	4a14      	ldr	r2, [pc, #80]	; (8002c28 <DMA_CalcBaseAndBitshift+0x64>)
 8002bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bda:	091b      	lsrs	r3, r3, #4
 8002bdc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bde:	4a13      	ldr	r2, [pc, #76]	; (8002c2c <DMA_CalcBaseAndBitshift+0x68>)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4413      	add	r3, r2
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	461a      	mov	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	d909      	bls.n	8002c06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bfa:	f023 0303 	bic.w	r3, r3, #3
 8002bfe:	1d1a      	adds	r2, r3, #4
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	659a      	str	r2, [r3, #88]	; 0x58
 8002c04:	e007      	b.n	8002c16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c0e:	f023 0303 	bic.w	r3, r3, #3
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	aaaaaaab 	.word	0xaaaaaaab
 8002c2c:	0800ca8c 	.word	0x0800ca8c

08002c30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d11f      	bne.n	8002c8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	d855      	bhi.n	8002cfc <DMA_CheckFifoParam+0xcc>
 8002c50:	a201      	add	r2, pc, #4	; (adr r2, 8002c58 <DMA_CheckFifoParam+0x28>)
 8002c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c56:	bf00      	nop
 8002c58:	08002c69 	.word	0x08002c69
 8002c5c:	08002c7b 	.word	0x08002c7b
 8002c60:	08002c69 	.word	0x08002c69
 8002c64:	08002cfd 	.word	0x08002cfd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d045      	beq.n	8002d00 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c78:	e042      	b.n	8002d00 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c82:	d13f      	bne.n	8002d04 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c88:	e03c      	b.n	8002d04 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c92:	d121      	bne.n	8002cd8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b03      	cmp	r3, #3
 8002c98:	d836      	bhi.n	8002d08 <DMA_CheckFifoParam+0xd8>
 8002c9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ca0 <DMA_CheckFifoParam+0x70>)
 8002c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca0:	08002cb1 	.word	0x08002cb1
 8002ca4:	08002cb7 	.word	0x08002cb7
 8002ca8:	08002cb1 	.word	0x08002cb1
 8002cac:	08002cc9 	.word	0x08002cc9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cb4:	e02f      	b.n	8002d16 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d024      	beq.n	8002d0c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cc6:	e021      	b.n	8002d0c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ccc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cd0:	d11e      	bne.n	8002d10 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cd6:	e01b      	b.n	8002d10 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d902      	bls.n	8002ce4 <DMA_CheckFifoParam+0xb4>
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	d003      	beq.n	8002cea <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ce2:	e018      	b.n	8002d16 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ce8:	e015      	b.n	8002d16 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00e      	beq.n	8002d14 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8002cfa:	e00b      	b.n	8002d14 <DMA_CheckFifoParam+0xe4>
      break;
 8002cfc:	bf00      	nop
 8002cfe:	e00a      	b.n	8002d16 <DMA_CheckFifoParam+0xe6>
      break;
 8002d00:	bf00      	nop
 8002d02:	e008      	b.n	8002d16 <DMA_CheckFifoParam+0xe6>
      break;
 8002d04:	bf00      	nop
 8002d06:	e006      	b.n	8002d16 <DMA_CheckFifoParam+0xe6>
      break;
 8002d08:	bf00      	nop
 8002d0a:	e004      	b.n	8002d16 <DMA_CheckFifoParam+0xe6>
      break;
 8002d0c:	bf00      	nop
 8002d0e:	e002      	b.n	8002d16 <DMA_CheckFifoParam+0xe6>
      break;   
 8002d10:	bf00      	nop
 8002d12:	e000      	b.n	8002d16 <DMA_CheckFifoParam+0xe6>
      break;
 8002d14:	bf00      	nop
    }
  } 
  
  return status; 
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b089      	sub	sp, #36	; 0x24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
 8002d3e:	e16b      	b.n	8003018 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d40:	2201      	movs	r2, #1
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	4013      	ands	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	f040 815a 	bne.w	8003012 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d00b      	beq.n	8002d7e <HAL_GPIO_Init+0x5a>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d007      	beq.n	8002d7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d72:	2b11      	cmp	r3, #17
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b12      	cmp	r3, #18
 8002d7c:	d130      	bne.n	8002de0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	2203      	movs	r2, #3
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	4013      	ands	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002db4:	2201      	movs	r2, #1
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	091b      	lsrs	r3, r3, #4
 8002dca:	f003 0201 	and.w	r2, r3, #1
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	2203      	movs	r2, #3
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43db      	mvns	r3, r3
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4013      	ands	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d003      	beq.n	8002e20 <HAL_GPIO_Init+0xfc>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b12      	cmp	r3, #18
 8002e1e:	d123      	bne.n	8002e68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	08da      	lsrs	r2, r3, #3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3208      	adds	r2, #8
 8002e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	220f      	movs	r2, #15
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	4013      	ands	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	08da      	lsrs	r2, r3, #3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3208      	adds	r2, #8
 8002e62:	69b9      	ldr	r1, [r7, #24]
 8002e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	2203      	movs	r2, #3
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 0203 	and.w	r2, r3, #3
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 80b4 	beq.w	8003012 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	4b5f      	ldr	r3, [pc, #380]	; (800302c <HAL_GPIO_Init+0x308>)
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb2:	4a5e      	ldr	r2, [pc, #376]	; (800302c <HAL_GPIO_Init+0x308>)
 8002eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eba:	4b5c      	ldr	r3, [pc, #368]	; (800302c <HAL_GPIO_Init+0x308>)
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ec6:	4a5a      	ldr	r2, [pc, #360]	; (8003030 <HAL_GPIO_Init+0x30c>)
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	089b      	lsrs	r3, r3, #2
 8002ecc:	3302      	adds	r3, #2
 8002ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	220f      	movs	r2, #15
 8002ede:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a51      	ldr	r2, [pc, #324]	; (8003034 <HAL_GPIO_Init+0x310>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d02b      	beq.n	8002f4a <HAL_GPIO_Init+0x226>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a50      	ldr	r2, [pc, #320]	; (8003038 <HAL_GPIO_Init+0x314>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d025      	beq.n	8002f46 <HAL_GPIO_Init+0x222>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a4f      	ldr	r2, [pc, #316]	; (800303c <HAL_GPIO_Init+0x318>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d01f      	beq.n	8002f42 <HAL_GPIO_Init+0x21e>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a4e      	ldr	r2, [pc, #312]	; (8003040 <HAL_GPIO_Init+0x31c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d019      	beq.n	8002f3e <HAL_GPIO_Init+0x21a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a4d      	ldr	r2, [pc, #308]	; (8003044 <HAL_GPIO_Init+0x320>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d013      	beq.n	8002f3a <HAL_GPIO_Init+0x216>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a4c      	ldr	r2, [pc, #304]	; (8003048 <HAL_GPIO_Init+0x324>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00d      	beq.n	8002f36 <HAL_GPIO_Init+0x212>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a4b      	ldr	r2, [pc, #300]	; (800304c <HAL_GPIO_Init+0x328>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d007      	beq.n	8002f32 <HAL_GPIO_Init+0x20e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a4a      	ldr	r2, [pc, #296]	; (8003050 <HAL_GPIO_Init+0x32c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d101      	bne.n	8002f2e <HAL_GPIO_Init+0x20a>
 8002f2a:	2307      	movs	r3, #7
 8002f2c:	e00e      	b.n	8002f4c <HAL_GPIO_Init+0x228>
 8002f2e:	2308      	movs	r3, #8
 8002f30:	e00c      	b.n	8002f4c <HAL_GPIO_Init+0x228>
 8002f32:	2306      	movs	r3, #6
 8002f34:	e00a      	b.n	8002f4c <HAL_GPIO_Init+0x228>
 8002f36:	2305      	movs	r3, #5
 8002f38:	e008      	b.n	8002f4c <HAL_GPIO_Init+0x228>
 8002f3a:	2304      	movs	r3, #4
 8002f3c:	e006      	b.n	8002f4c <HAL_GPIO_Init+0x228>
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e004      	b.n	8002f4c <HAL_GPIO_Init+0x228>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e002      	b.n	8002f4c <HAL_GPIO_Init+0x228>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <HAL_GPIO_Init+0x228>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	69fa      	ldr	r2, [r7, #28]
 8002f4e:	f002 0203 	and.w	r2, r2, #3
 8002f52:	0092      	lsls	r2, r2, #2
 8002f54:	4093      	lsls	r3, r2
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f5c:	4934      	ldr	r1, [pc, #208]	; (8003030 <HAL_GPIO_Init+0x30c>)
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	089b      	lsrs	r3, r3, #2
 8002f62:	3302      	adds	r3, #2
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f6a:	4b3a      	ldr	r3, [pc, #232]	; (8003054 <HAL_GPIO_Init+0x330>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	43db      	mvns	r3, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4013      	ands	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f8e:	4a31      	ldr	r2, [pc, #196]	; (8003054 <HAL_GPIO_Init+0x330>)
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f94:	4b2f      	ldr	r3, [pc, #188]	; (8003054 <HAL_GPIO_Init+0x330>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fb8:	4a26      	ldr	r2, [pc, #152]	; (8003054 <HAL_GPIO_Init+0x330>)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fbe:	4b25      	ldr	r3, [pc, #148]	; (8003054 <HAL_GPIO_Init+0x330>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fe2:	4a1c      	ldr	r2, [pc, #112]	; (8003054 <HAL_GPIO_Init+0x330>)
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fe8:	4b1a      	ldr	r3, [pc, #104]	; (8003054 <HAL_GPIO_Init+0x330>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4313      	orrs	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800300c:	4a11      	ldr	r2, [pc, #68]	; (8003054 <HAL_GPIO_Init+0x330>)
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3301      	adds	r3, #1
 8003016:	61fb      	str	r3, [r7, #28]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	2b0f      	cmp	r3, #15
 800301c:	f67f ae90 	bls.w	8002d40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003020:	bf00      	nop
 8003022:	3724      	adds	r7, #36	; 0x24
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	40023800 	.word	0x40023800
 8003030:	40013800 	.word	0x40013800
 8003034:	40020000 	.word	0x40020000
 8003038:	40020400 	.word	0x40020400
 800303c:	40020800 	.word	0x40020800
 8003040:	40020c00 	.word	0x40020c00
 8003044:	40021000 	.word	0x40021000
 8003048:	40021400 	.word	0x40021400
 800304c:	40021800 	.word	0x40021800
 8003050:	40021c00 	.word	0x40021c00
 8003054:	40013c00 	.word	0x40013c00

08003058 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691a      	ldr	r2, [r3, #16]
 8003068:	887b      	ldrh	r3, [r7, #2]
 800306a:	4013      	ands	r3, r2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003070:	2301      	movs	r3, #1
 8003072:	73fb      	strb	r3, [r7, #15]
 8003074:	e001      	b.n	800307a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003076:	2300      	movs	r3, #0
 8003078:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800307a:	7bfb      	ldrb	r3, [r7, #15]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	460b      	mov	r3, r1
 8003092:	807b      	strh	r3, [r7, #2]
 8003094:	4613      	mov	r3, r2
 8003096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003098:	787b      	ldrb	r3, [r7, #1]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800309e:	887a      	ldrh	r2, [r7, #2]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030a4:	e003      	b.n	80030ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030a6:	887b      	ldrh	r3, [r7, #2]
 80030a8:	041a      	lsls	r2, r3, #16
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	619a      	str	r2, [r3, #24]
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
 80030c2:	460b      	mov	r3, r1
 80030c4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695a      	ldr	r2, [r3, #20]
 80030ca:	887b      	ldrh	r3, [r7, #2]
 80030cc:	401a      	ands	r2, r3
 80030ce:	887b      	ldrh	r3, [r7, #2]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d104      	bne.n	80030de <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80030d4:	887b      	ldrh	r3, [r7, #2]
 80030d6:	041a      	lsls	r2, r3, #16
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80030dc:	e002      	b.n	80030e4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80030de:	887a      	ldrh	r2, [r7, #2]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	619a      	str	r2, [r3, #24]
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e11f      	b.n	8003342 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d106      	bne.n	800311c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7fd ff5a 	bl	8000fd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2224      	movs	r2, #36	; 0x24
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0201 	bic.w	r2, r2, #1
 8003132:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003142:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003152:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003154:	f004 f908 	bl	8007368 <HAL_RCC_GetPCLK1Freq>
 8003158:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	4a7b      	ldr	r2, [pc, #492]	; (800334c <HAL_I2C_Init+0x25c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d807      	bhi.n	8003174 <HAL_I2C_Init+0x84>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4a7a      	ldr	r2, [pc, #488]	; (8003350 <HAL_I2C_Init+0x260>)
 8003168:	4293      	cmp	r3, r2
 800316a:	bf94      	ite	ls
 800316c:	2301      	movls	r3, #1
 800316e:	2300      	movhi	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	e006      	b.n	8003182 <HAL_I2C_Init+0x92>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4a77      	ldr	r2, [pc, #476]	; (8003354 <HAL_I2C_Init+0x264>)
 8003178:	4293      	cmp	r3, r2
 800317a:	bf94      	ite	ls
 800317c:	2301      	movls	r3, #1
 800317e:	2300      	movhi	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e0db      	b.n	8003342 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	4a72      	ldr	r2, [pc, #456]	; (8003358 <HAL_I2C_Init+0x268>)
 800318e:	fba2 2303 	umull	r2, r3, r2, r3
 8003192:	0c9b      	lsrs	r3, r3, #18
 8003194:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	4a64      	ldr	r2, [pc, #400]	; (800334c <HAL_I2C_Init+0x25c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d802      	bhi.n	80031c4 <HAL_I2C_Init+0xd4>
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	3301      	adds	r3, #1
 80031c2:	e009      	b.n	80031d8 <HAL_I2C_Init+0xe8>
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031ca:	fb02 f303 	mul.w	r3, r2, r3
 80031ce:	4a63      	ldr	r2, [pc, #396]	; (800335c <HAL_I2C_Init+0x26c>)
 80031d0:	fba2 2303 	umull	r2, r3, r2, r3
 80031d4:	099b      	lsrs	r3, r3, #6
 80031d6:	3301      	adds	r3, #1
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	430b      	orrs	r3, r1
 80031de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	4956      	ldr	r1, [pc, #344]	; (800334c <HAL_I2C_Init+0x25c>)
 80031f4:	428b      	cmp	r3, r1
 80031f6:	d80d      	bhi.n	8003214 <HAL_I2C_Init+0x124>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	1e59      	subs	r1, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	fbb1 f3f3 	udiv	r3, r1, r3
 8003206:	3301      	adds	r3, #1
 8003208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800320c:	2b04      	cmp	r3, #4
 800320e:	bf38      	it	cc
 8003210:	2304      	movcc	r3, #4
 8003212:	e04f      	b.n	80032b4 <HAL_I2C_Init+0x1c4>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d111      	bne.n	8003240 <HAL_I2C_Init+0x150>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	1e58      	subs	r0, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6859      	ldr	r1, [r3, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	440b      	add	r3, r1
 800322a:	fbb0 f3f3 	udiv	r3, r0, r3
 800322e:	3301      	adds	r3, #1
 8003230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003234:	2b00      	cmp	r3, #0
 8003236:	bf0c      	ite	eq
 8003238:	2301      	moveq	r3, #1
 800323a:	2300      	movne	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	e012      	b.n	8003266 <HAL_I2C_Init+0x176>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	1e58      	subs	r0, r3, #1
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6859      	ldr	r1, [r3, #4]
 8003248:	460b      	mov	r3, r1
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	0099      	lsls	r1, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	fbb0 f3f3 	udiv	r3, r0, r3
 8003256:	3301      	adds	r3, #1
 8003258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800325c:	2b00      	cmp	r3, #0
 800325e:	bf0c      	ite	eq
 8003260:	2301      	moveq	r3, #1
 8003262:	2300      	movne	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_I2C_Init+0x17e>
 800326a:	2301      	movs	r3, #1
 800326c:	e022      	b.n	80032b4 <HAL_I2C_Init+0x1c4>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10e      	bne.n	8003294 <HAL_I2C_Init+0x1a4>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	1e58      	subs	r0, r3, #1
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6859      	ldr	r1, [r3, #4]
 800327e:	460b      	mov	r3, r1
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	440b      	add	r3, r1
 8003284:	fbb0 f3f3 	udiv	r3, r0, r3
 8003288:	3301      	adds	r3, #1
 800328a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800328e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003292:	e00f      	b.n	80032b4 <HAL_I2C_Init+0x1c4>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	1e58      	subs	r0, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6859      	ldr	r1, [r3, #4]
 800329c:	460b      	mov	r3, r1
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	0099      	lsls	r1, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032aa:	3301      	adds	r3, #1
 80032ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	6809      	ldr	r1, [r1, #0]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69da      	ldr	r2, [r3, #28]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6911      	ldr	r1, [r2, #16]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	68d2      	ldr	r2, [r2, #12]
 80032ee:	4311      	orrs	r1, r2
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6812      	ldr	r2, [r2, #0]
 80032f4:	430b      	orrs	r3, r1
 80032f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695a      	ldr	r2, [r3, #20]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0201 	orr.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2220      	movs	r2, #32
 800332e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	000186a0 	.word	0x000186a0
 8003350:	001e847f 	.word	0x001e847f
 8003354:	003d08ff 	.word	0x003d08ff
 8003358:	431bde83 	.word	0x431bde83
 800335c:	10624dd3 	.word	0x10624dd3

08003360 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af02      	add	r7, sp, #8
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	607a      	str	r2, [r7, #4]
 800336a:	461a      	mov	r2, r3
 800336c:	460b      	mov	r3, r1
 800336e:	817b      	strh	r3, [r7, #10]
 8003370:	4613      	mov	r3, r2
 8003372:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003374:	f7fe ffec 	bl	8002350 <HAL_GetTick>
 8003378:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b20      	cmp	r3, #32
 8003384:	f040 80e0 	bne.w	8003548 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	2319      	movs	r3, #25
 800338e:	2201      	movs	r2, #1
 8003390:	4970      	ldr	r1, [pc, #448]	; (8003554 <HAL_I2C_Master_Transmit+0x1f4>)
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f002 f88b 	bl	80054ae <I2C_WaitOnFlagUntilTimeout>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800339e:	2302      	movs	r3, #2
 80033a0:	e0d3      	b.n	800354a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <HAL_I2C_Master_Transmit+0x50>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e0cc      	b.n	800354a <HAL_I2C_Master_Transmit+0x1ea>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d007      	beq.n	80033d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f042 0201 	orr.w	r2, r2, #1
 80033d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2221      	movs	r2, #33	; 0x21
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2210      	movs	r2, #16
 80033f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	893a      	ldrh	r2, [r7, #8]
 8003406:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340c:	b29a      	uxth	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4a50      	ldr	r2, [pc, #320]	; (8003558 <HAL_I2C_Master_Transmit+0x1f8>)
 8003416:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003418:	8979      	ldrh	r1, [r7, #10]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	6a3a      	ldr	r2, [r7, #32]
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f001 fd4c 	bl	8004ebc <I2C_MasterRequestWrite>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e08d      	b.n	800354a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800342e:	2300      	movs	r3, #0
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	613b      	str	r3, [r7, #16]
 8003442:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003444:	e066      	b.n	8003514 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	6a39      	ldr	r1, [r7, #32]
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f002 f905 	bl	800565a <I2C_WaitOnTXEFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00d      	beq.n	8003472 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	2b04      	cmp	r3, #4
 800345c:	d107      	bne.n	800346e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800346c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e06b      	b.n	800354a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	781a      	ldrb	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	1c5a      	adds	r2, r3, #1
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348c:	b29b      	uxth	r3, r3
 800348e:	3b01      	subs	r3, #1
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349a:	3b01      	subs	r3, #1
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d11b      	bne.n	80034e8 <HAL_I2C_Master_Transmit+0x188>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d017      	beq.n	80034e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	781a      	ldrb	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	6a39      	ldr	r1, [r7, #32]
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f002 f8f5 	bl	80056dc <I2C_WaitOnBTFFlagUntilTimeout>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00d      	beq.n	8003514 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d107      	bne.n	8003510 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800350e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e01a      	b.n	800354a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003518:	2b00      	cmp	r3, #0
 800351a:	d194      	bne.n	8003446 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800352a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003544:	2300      	movs	r3, #0
 8003546:	e000      	b.n	800354a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003548:	2302      	movs	r3, #2
  }
}
 800354a:	4618      	mov	r0, r3
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	00100002 	.word	0x00100002
 8003558:	ffff0000 	.word	0xffff0000

0800355c <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	607a      	str	r2, [r7, #4]
 8003566:	461a      	mov	r2, r3
 8003568:	460b      	mov	r3, r1
 800356a:	817b      	strh	r3, [r7, #10]
 800356c:	4613      	mov	r3, r2
 800356e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b20      	cmp	r3, #32
 800357e:	f040 80f4 	bne.w	800376a <HAL_I2C_Master_Transmit_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003582:	4b7c      	ldr	r3, [pc, #496]	; (8003774 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	08db      	lsrs	r3, r3, #3
 8003588:	4a7b      	ldr	r2, [pc, #492]	; (8003778 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800358a:	fba2 2303 	umull	r2, r3, r2, r3
 800358e:	0a1a      	lsrs	r2, r3, #8
 8003590:	4613      	mov	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	009a      	lsls	r2, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	3b01      	subs	r3, #1
 80035a0:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d116      	bne.n	80035d6 <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2220      	movs	r2, #32
 80035b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f043 0220 	orr.w	r2, r3, #32
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e0ca      	b.n	800376c <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d0db      	beq.n	800359c <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d101      	bne.n	80035f2 <HAL_I2C_Master_Transmit_DMA+0x96>
 80035ee:	2302      	movs	r3, #2
 80035f0:	e0bc      	b.n	800376c <HAL_I2C_Master_Transmit_DMA+0x210>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b01      	cmp	r3, #1
 8003606:	d007      	beq.n	8003618 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0201 	orr.w	r2, r2, #1
 8003616:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003626:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2221      	movs	r2, #33	; 0x21
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2210      	movs	r2, #16
 8003634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	893a      	ldrh	r2, [r7, #8]
 8003648:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4a49      	ldr	r2, [pc, #292]	; (800377c <HAL_I2C_Master_Transmit_DMA+0x220>)
 8003658:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800365a:	897a      	ldrh	r2, [r7, #10]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003664:	2b00      	cmp	r3, #0
 8003666:	d062      	beq.n	800372e <HAL_I2C_Master_Transmit_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800366c:	4a44      	ldr	r2, [pc, #272]	; (8003780 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800366e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003674:	4a43      	ldr	r2, [pc, #268]	; (8003784 <HAL_I2C_Master_Transmit_DMA+0x228>)
 8003676:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800367c:	2200      	movs	r2, #0
 800367e:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003684:	2200      	movs	r2, #0
 8003686:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368c:	2200      	movs	r2, #0
 800368e:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003694:	2200      	movs	r2, #0
 8003696:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	4619      	mov	r1, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	3310      	adds	r3, #16
 80036a8:	461a      	mov	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ae:	f7ff f83d 	bl	800272c <HAL_DMA_Start_IT>
 80036b2:	4603      	mov	r3, r0
 80036b4:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 80036b6:	7dfb      	ldrb	r3, [r7, #23]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d124      	bne.n	8003706 <HAL_I2C_Master_Transmit_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036ca:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036da:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80036f2:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003702:	605a      	str	r2, [r3, #4]
 8003704:	e02f      	b.n	8003766 <HAL_I2C_Master_Transmit_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2220      	movs	r2, #32
 800370a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	f043 0210 	orr.w	r2, r3, #16
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e01e      	b.n	800376c <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800373c:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800374c:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003764:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	e000      	b.n	800376c <HAL_I2C_Master_Transmit_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 800376a:	2302      	movs	r3, #2
  }
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	20000008 	.word	0x20000008
 8003778:	14f8b589 	.word	0x14f8b589
 800377c:	ffff0000 	.word	0xffff0000
 8003780:	0800518d 	.word	0x0800518d
 8003784:	08005337 	.word	0x08005337

08003788 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b08c      	sub	sp, #48	; 0x30
 800378c:	af02      	add	r7, sp, #8
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	4608      	mov	r0, r1
 8003792:	4611      	mov	r1, r2
 8003794:	461a      	mov	r2, r3
 8003796:	4603      	mov	r3, r0
 8003798:	817b      	strh	r3, [r7, #10]
 800379a:	460b      	mov	r3, r1
 800379c:	813b      	strh	r3, [r7, #8]
 800379e:	4613      	mov	r3, r2
 80037a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037a2:	f7fe fdd5 	bl	8002350 <HAL_GetTick>
 80037a6:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b20      	cmp	r3, #32
 80037b6:	f040 8123 	bne.w	8003a00 <HAL_I2C_Mem_Read_DMA+0x278>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80037ba:	4b94      	ldr	r3, [pc, #592]	; (8003a0c <HAL_I2C_Mem_Read_DMA+0x284>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	08db      	lsrs	r3, r3, #3
 80037c0:	4a93      	ldr	r2, [pc, #588]	; (8003a10 <HAL_I2C_Mem_Read_DMA+0x288>)
 80037c2:	fba2 2303 	umull	r2, r3, r2, r3
 80037c6:	0a1a      	lsrs	r2, r3, #8
 80037c8:	4613      	mov	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	009a      	lsls	r2, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d116      	bne.n	800380e <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2220      	movs	r2, #32
 80037ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f043 0220 	orr.w	r2, r3, #32
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e0f9      	b.n	8003a02 <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b02      	cmp	r3, #2
 800381a:	d0db      	beq.n	80037d4 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003822:	2b01      	cmp	r3, #1
 8003824:	d101      	bne.n	800382a <HAL_I2C_Mem_Read_DMA+0xa2>
 8003826:	2302      	movs	r3, #2
 8003828:	e0eb      	b.n	8003a02 <HAL_I2C_Mem_Read_DMA+0x27a>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b01      	cmp	r3, #1
 800383e:	d007      	beq.n	8003850 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800385e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2222      	movs	r2, #34	; 0x22
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2240      	movs	r2, #64	; 0x40
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800387a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003880:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003886:	b29a      	uxth	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4a61      	ldr	r2, [pc, #388]	; (8003a14 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8003890:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 8085 	beq.w	80039a6 <HAL_I2C_Mem_Read_DMA+0x21e>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a0:	4a5d      	ldr	r2, [pc, #372]	; (8003a18 <HAL_I2C_Mem_Read_DMA+0x290>)
 80038a2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a8:	4a5c      	ldr	r2, [pc, #368]	; (8003a1c <HAL_I2C_Mem_Read_DMA+0x294>)
 80038aa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b0:	2200      	movs	r2, #0
 80038b2:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b8:	2200      	movs	r2, #0
 80038ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c0:	2200      	movs	r2, #0
 80038c2:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c8:	2200      	movs	r2, #0
 80038ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	3310      	adds	r3, #16
 80038d6:	4619      	mov	r1, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	461a      	mov	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e2:	f7fe ff23 	bl	800272c <HAL_DMA_Start_IT>
 80038e6:	4603      	mov	r3, r0
 80038e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      if (dmaxferstatus == HAL_OK)
 80038ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d144      	bne.n	800397e <HAL_I2C_Mem_Read_DMA+0x1f6>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80038f4:	88f8      	ldrh	r0, [r7, #6]
 80038f6:	893a      	ldrh	r2, [r7, #8]
 80038f8:	8979      	ldrh	r1, [r7, #10]
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	9301      	str	r3, [sp, #4]
 80038fe:	2323      	movs	r3, #35	; 0x23
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	4603      	mov	r3, r0
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f001 fb5b 	bl	8004fc0 <I2C_RequestMemoryRead>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <HAL_I2C_Mem_Read_DMA+0x18c>
        {
          return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e076      	b.n	8003a02 <HAL_I2C_Mem_Read_DMA+0x27a>
        }

        if (hi2c->XferSize == 1U)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003918:	2b01      	cmp	r3, #1
 800391a:	d108      	bne.n	800392e <HAL_I2C_Mem_Read_DMA+0x1a6>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	e007      	b.n	800393e <HAL_I2C_Mem_Read_DMA+0x1b6>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800393c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800393e:	2300      	movs	r3, #0
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	61bb      	str	r3, [r7, #24]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	61bb      	str	r3, [r7, #24]
 8003952:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800396a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800397a:	605a      	str	r2, [r3, #4]
 800397c:	e03e      	b.n	80039fc <HAL_I2C_Mem_Read_DMA+0x274>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2220      	movs	r2, #32
 8003982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	f043 0210 	orr.w	r2, r3, #16
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e02d      	b.n	8003a02 <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80039a6:	88f8      	ldrh	r0, [r7, #6]
 80039a8:	893a      	ldrh	r2, [r7, #8]
 80039aa:	8979      	ldrh	r1, [r7, #10]
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	9301      	str	r3, [sp, #4]
 80039b0:	2323      	movs	r3, #35	; 0x23
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	4603      	mov	r3, r0
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f001 fb02 	bl	8004fc0 <I2C_RequestMemoryRead>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_I2C_Mem_Read_DMA+0x23e>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e01d      	b.n	8003a02 <HAL_I2C_Mem_Read_DMA+0x27a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039c6:	2300      	movs	r3, #0
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	617b      	str	r3, [r7, #20]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	617b      	str	r3, [r7, #20]
 80039da:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ea:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	e000      	b.n	8003a02 <HAL_I2C_Mem_Read_DMA+0x27a>
  }
  else
  {
    return HAL_BUSY;
 8003a00:	2302      	movs	r3, #2
  }
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3728      	adds	r7, #40	; 0x28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	20000008 	.word	0x20000008
 8003a10:	14f8b589 	.word	0x14f8b589
 8003a14:	ffff0000 	.word	0xffff0000
 8003a18:	0800518d 	.word	0x0800518d
 8003a1c:	08005337 	.word	0x08005337

08003a20 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b088      	sub	sp, #32
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a38:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a40:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a48:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	2b10      	cmp	r3, #16
 8003a4e:	d003      	beq.n	8003a58 <HAL_I2C_EV_IRQHandler+0x38>
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	2b40      	cmp	r3, #64	; 0x40
 8003a54:	f040 80b6 	bne.w	8003bc4 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10d      	bne.n	8003a8e <HAL_I2C_EV_IRQHandler+0x6e>
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003a78:	d003      	beq.n	8003a82 <HAL_I2C_EV_IRQHandler+0x62>
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003a80:	d101      	bne.n	8003a86 <HAL_I2C_EV_IRQHandler+0x66>
 8003a82:	2301      	movs	r3, #1
 8003a84:	e000      	b.n	8003a88 <HAL_I2C_EV_IRQHandler+0x68>
 8003a86:	2300      	movs	r3, #0
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	f000 8127 	beq.w	8003cdc <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00c      	beq.n	8003ab2 <HAL_I2C_EV_IRQHandler+0x92>
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	0a5b      	lsrs	r3, r3, #9
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d006      	beq.n	8003ab2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f001 fe89 	bl	80057bc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 fc65 	bl	800437a <I2C_Master_SB>
 8003ab0:	e087      	b.n	8003bc2 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	08db      	lsrs	r3, r3, #3
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d009      	beq.n	8003ad2 <HAL_I2C_EV_IRQHandler+0xb2>
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	0a5b      	lsrs	r3, r3, #9
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 fcdb 	bl	8004486 <I2C_Master_ADD10>
 8003ad0:	e077      	b.n	8003bc2 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	085b      	lsrs	r3, r3, #1
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d009      	beq.n	8003af2 <HAL_I2C_EV_IRQHandler+0xd2>
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	0a5b      	lsrs	r3, r3, #9
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 fcf5 	bl	80044da <I2C_Master_ADDR>
 8003af0:	e067      	b.n	8003bc2 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	089b      	lsrs	r3, r3, #2
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d030      	beq.n	8003b60 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b0c:	f000 80e8 	beq.w	8003ce0 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	09db      	lsrs	r3, r3, #7
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00f      	beq.n	8003b3c <HAL_I2C_EV_IRQHandler+0x11c>
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	0a9b      	lsrs	r3, r3, #10
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d009      	beq.n	8003b3c <HAL_I2C_EV_IRQHandler+0x11c>
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	089b      	lsrs	r3, r3, #2
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d103      	bne.n	8003b3c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f931 	bl	8003d9c <I2C_MasterTransmit_TXE>
 8003b3a:	e042      	b.n	8003bc2 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	089b      	lsrs	r3, r3, #2
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 80cb 	beq.w	8003ce0 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	0a5b      	lsrs	r3, r3, #9
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 80c4 	beq.w	8003ce0 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f9bb 	bl	8003ed4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b5e:	e0bf      	b.n	8003ce0 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b6e:	f000 80b7 	beq.w	8003ce0 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	099b      	lsrs	r3, r3, #6
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00f      	beq.n	8003b9e <HAL_I2C_EV_IRQHandler+0x17e>
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	0a9b      	lsrs	r3, r3, #10
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d009      	beq.n	8003b9e <HAL_I2C_EV_IRQHandler+0x17e>
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	089b      	lsrs	r3, r3, #2
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d103      	bne.n	8003b9e <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 fa83 	bl	80040a2 <I2C_MasterReceive_RXNE>
 8003b9c:	e011      	b.n	8003bc2 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	089b      	lsrs	r3, r3, #2
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 809a 	beq.w	8003ce0 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	0a5b      	lsrs	r3, r3, #9
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 8093 	beq.w	8003ce0 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 faf3 	bl	80041a6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bc0:	e08e      	b.n	8003ce0 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003bc2:	e08d      	b.n	8003ce0 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d004      	beq.n	8003bd6 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	61fb      	str	r3, [r7, #28]
 8003bd4:	e007      	b.n	8003be6 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695b      	ldr	r3, [r3, #20]
 8003be4:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	085b      	lsrs	r3, r3, #1
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d012      	beq.n	8003c18 <HAL_I2C_EV_IRQHandler+0x1f8>
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	0a5b      	lsrs	r3, r3, #9
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00c      	beq.n	8003c18 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003c0e:	69b9      	ldr	r1, [r7, #24]
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 feb1 	bl	8004978 <I2C_Slave_ADDR>
 8003c16:	e066      	b.n	8003ce6 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	091b      	lsrs	r3, r3, #4
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d009      	beq.n	8003c38 <HAL_I2C_EV_IRQHandler+0x218>
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	0a5b      	lsrs	r3, r3, #9
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 fee5 	bl	8004a00 <I2C_Slave_STOPF>
 8003c36:	e056      	b.n	8003ce6 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c38:	7bbb      	ldrb	r3, [r7, #14]
 8003c3a:	2b21      	cmp	r3, #33	; 0x21
 8003c3c:	d002      	beq.n	8003c44 <HAL_I2C_EV_IRQHandler+0x224>
 8003c3e:	7bbb      	ldrb	r3, [r7, #14]
 8003c40:	2b29      	cmp	r3, #41	; 0x29
 8003c42:	d125      	bne.n	8003c90 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	09db      	lsrs	r3, r3, #7
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00f      	beq.n	8003c70 <HAL_I2C_EV_IRQHandler+0x250>
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	0a9b      	lsrs	r3, r3, #10
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d009      	beq.n	8003c70 <HAL_I2C_EV_IRQHandler+0x250>
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	089b      	lsrs	r3, r3, #2
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d103      	bne.n	8003c70 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 fdc7 	bl	80047fc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c6e:	e039      	b.n	8003ce4 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	089b      	lsrs	r3, r3, #2
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d033      	beq.n	8003ce4 <HAL_I2C_EV_IRQHandler+0x2c4>
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	0a5b      	lsrs	r3, r3, #9
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d02d      	beq.n	8003ce4 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 fdf4 	bl	8004876 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c8e:	e029      	b.n	8003ce4 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	099b      	lsrs	r3, r3, #6
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00f      	beq.n	8003cbc <HAL_I2C_EV_IRQHandler+0x29c>
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	0a9b      	lsrs	r3, r3, #10
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d009      	beq.n	8003cbc <HAL_I2C_EV_IRQHandler+0x29c>
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	089b      	lsrs	r3, r3, #2
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d103      	bne.n	8003cbc <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 fdff 	bl	80048b8 <I2C_SlaveReceive_RXNE>
 8003cba:	e014      	b.n	8003ce6 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	089b      	lsrs	r3, r3, #2
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00e      	beq.n	8003ce6 <HAL_I2C_EV_IRQHandler+0x2c6>
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	0a5b      	lsrs	r3, r3, #9
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d008      	beq.n	8003ce6 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 fe2d 	bl	8004934 <I2C_SlaveReceive_BTF>
 8003cda:	e004      	b.n	8003ce6 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8003cdc:	bf00      	nop
 8003cde:	e002      	b.n	8003ce6 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ce0:	bf00      	nop
 8003ce2:	e000      	b.n	8003ce6 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ce4:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003ce6:	3720      	adds	r7, #32
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	70fb      	strb	r3, [r7, #3]
 8003d20:	4613      	mov	r3, r2
 8003d22:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d8e:	b2db      	uxtb	r3, r3
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003daa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003db2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d150      	bne.n	8003e64 <I2C_MasterTransmit_TXE+0xc8>
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
 8003dc4:	2b21      	cmp	r3, #33	; 0x21
 8003dc6:	d14d      	bne.n	8003e64 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2b08      	cmp	r3, #8
 8003dcc:	d01d      	beq.n	8003e0a <I2C_MasterTransmit_TXE+0x6e>
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2b20      	cmp	r3, #32
 8003dd2:	d01a      	beq.n	8003e0a <I2C_MasterTransmit_TXE+0x6e>
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dda:	d016      	beq.n	8003e0a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dea:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2211      	movs	r2, #17
 8003df0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7fd fd8a 	bl	800191c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e08:	e060      	b.n	8003ecc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e18:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e28:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2220      	movs	r2, #32
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b40      	cmp	r3, #64	; 0x40
 8003e42:	d107      	bne.n	8003e54 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff ff79 	bl	8003d44 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e52:	e03b      	b.n	8003ecc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7fd fd5d 	bl	800191c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e62:	e033      	b.n	8003ecc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
 8003e66:	2b21      	cmp	r3, #33	; 0x21
 8003e68:	d005      	beq.n	8003e76 <I2C_MasterTransmit_TXE+0xda>
 8003e6a:	7bbb      	ldrb	r3, [r7, #14]
 8003e6c:	2b40      	cmp	r3, #64	; 0x40
 8003e6e:	d12d      	bne.n	8003ecc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
 8003e72:	2b22      	cmp	r3, #34	; 0x22
 8003e74:	d12a      	bne.n	8003ecc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d108      	bne.n	8003e92 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e8e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003e90:	e01c      	b.n	8003ecc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b40      	cmp	r3, #64	; 0x40
 8003e9c:	d103      	bne.n	8003ea6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f898 	bl	8003fd4 <I2C_MemoryTransmit_TXE_BTF>
}
 8003ea4:	e012      	b.n	8003ecc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	781a      	ldrb	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003eca:	e7ff      	b.n	8003ecc <I2C_MasterTransmit_TXE+0x130>
 8003ecc:	bf00      	nop
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b21      	cmp	r3, #33	; 0x21
 8003eec:	d165      	bne.n	8003fba <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d012      	beq.n	8003f1e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	781a      	ldrb	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b01      	subs	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003f1c:	e056      	b.n	8003fcc <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d01d      	beq.n	8003f60 <I2C_MasterTransmit_BTF+0x8c>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2b20      	cmp	r3, #32
 8003f28:	d01a      	beq.n	8003f60 <I2C_MasterTransmit_BTF+0x8c>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f30:	d016      	beq.n	8003f60 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f40:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2211      	movs	r2, #17
 8003f46:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2220      	movs	r2, #32
 8003f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7fd fcdf 	bl	800191c <HAL_I2C_MasterTxCpltCallback>
}
 8003f5e:	e035      	b.n	8003fcc <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f6e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f7e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b40      	cmp	r3, #64	; 0x40
 8003f98:	d107      	bne.n	8003faa <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7ff fece 	bl	8003d44 <HAL_I2C_MemTxCpltCallback>
}
 8003fa8:	e010      	b.n	8003fcc <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7fd fcb2 	bl	800191c <HAL_I2C_MasterTxCpltCallback>
}
 8003fb8:	e008      	b.n	8003fcc <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b40      	cmp	r3, #64	; 0x40
 8003fc4:	d102      	bne.n	8003fcc <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f804 	bl	8003fd4 <I2C_MemoryTransmit_TXE_BTF>
}
 8003fcc:	bf00      	nop
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d11d      	bne.n	8004020 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d10b      	bne.n	8004004 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ffc:	1c9a      	adds	r2, r3, #2
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004002:	e048      	b.n	8004096 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004008:	b29b      	uxth	r3, r3
 800400a:	121b      	asrs	r3, r3, #8
 800400c:	b2da      	uxtb	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800401e:	e03a      	b.n	8004096 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004024:	2b01      	cmp	r3, #1
 8004026:	d10b      	bne.n	8004040 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800402c:	b2da      	uxtb	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800403e:	e02a      	b.n	8004096 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004044:	2b02      	cmp	r3, #2
 8004046:	d126      	bne.n	8004096 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b22      	cmp	r3, #34	; 0x22
 8004052:	d108      	bne.n	8004066 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004062:	601a      	str	r2, [r3, #0]
}
 8004064:	e017      	b.n	8004096 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b21      	cmp	r3, #33	; 0x21
 8004070:	d111      	bne.n	8004096 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	781a      	ldrb	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b22      	cmp	r3, #34	; 0x22
 80040b4:	d173      	bne.n	800419e <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2b03      	cmp	r3, #3
 80040c2:	d920      	bls.n	8004106 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691a      	ldr	r2, [r3, #16]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	b2d2      	uxtb	r2, r2
 80040d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d154      	bne.n	800419e <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004102:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004104:	e04b      	b.n	800419e <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410a:	2b02      	cmp	r3, #2
 800410c:	d047      	beq.n	800419e <I2C_MasterReceive_RXNE+0xfc>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d002      	beq.n	800411a <I2C_MasterReceive_RXNE+0x78>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d141      	bne.n	800419e <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004128:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004138:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	691a      	ldr	r2, [r3, #16]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	b2d2      	uxtb	r2, r2
 8004146:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	1c5a      	adds	r2, r3, #1
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004156:	b29b      	uxth	r3, r3
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2220      	movs	r2, #32
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b40      	cmp	r3, #64	; 0x40
 8004172:	d10a      	bne.n	800418a <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7fd fbba 	bl	80018fc <HAL_I2C_MemRxCpltCallback>
}
 8004188:	e009      	b.n	800419e <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2212      	movs	r2, #18
 8004196:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f7fd fbdd 	bl	8001958 <HAL_I2C_MasterRxCpltCallback>
}
 800419e:	bf00      	nop
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b084      	sub	sp, #16
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	d11b      	bne.n	80041f6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041cc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80041f4:	e0bd      	b.n	8004372 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	2b03      	cmp	r3, #3
 80041fe:	d129      	bne.n	8004254 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800420e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2b04      	cmp	r3, #4
 8004214:	d00a      	beq.n	800422c <I2C_MasterReceive_BTF+0x86>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2b02      	cmp	r3, #2
 800421a:	d007      	beq.n	800422c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800422a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691a      	ldr	r2, [r3, #16]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	b2d2      	uxtb	r2, r2
 8004238:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	1c5a      	adds	r2, r3, #1
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004248:	b29b      	uxth	r3, r3
 800424a:	3b01      	subs	r3, #1
 800424c:	b29a      	uxth	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004252:	e08e      	b.n	8004372 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004258:	b29b      	uxth	r3, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d176      	bne.n	800434c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d002      	beq.n	800426a <I2C_MasterReceive_BTF+0xc4>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2b10      	cmp	r3, #16
 8004268:	d108      	bne.n	800427c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004278:	601a      	str	r2, [r3, #0]
 800427a:	e019      	b.n	80042b0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2b04      	cmp	r3, #4
 8004280:	d002      	beq.n	8004288 <I2C_MasterReceive_BTF+0xe2>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2b02      	cmp	r3, #2
 8004286:	d108      	bne.n	800429a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	e00a      	b.n	80042b0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b10      	cmp	r3, #16
 800429e:	d007      	beq.n	80042b0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ae:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691a      	ldr	r2, [r3, #16]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	b2d2      	uxtb	r2, r2
 80042bc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800430a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b40      	cmp	r3, #64	; 0x40
 800431e:	d10a      	bne.n	8004336 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7fd fae4 	bl	80018fc <HAL_I2C_MemRxCpltCallback>
}
 8004334:	e01d      	b.n	8004372 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2212      	movs	r2, #18
 8004342:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f7fd fb07 	bl	8001958 <HAL_I2C_MasterRxCpltCallback>
}
 800434a:	e012      	b.n	8004372 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691a      	ldr	r2, [r3, #16]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004368:	b29b      	uxth	r3, r3
 800436a:	3b01      	subs	r3, #1
 800436c:	b29a      	uxth	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004372:	bf00      	nop
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b40      	cmp	r3, #64	; 0x40
 800438c:	d117      	bne.n	80043be <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004392:	2b00      	cmp	r3, #0
 8004394:	d109      	bne.n	80043aa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439a:	b2db      	uxtb	r3, r3
 800439c:	461a      	mov	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043a6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80043a8:	e067      	b.n	800447a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	f043 0301 	orr.w	r3, r3, #1
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	611a      	str	r2, [r3, #16]
}
 80043bc:	e05d      	b.n	800447a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043c6:	d133      	bne.n	8004430 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	2b21      	cmp	r3, #33	; 0x21
 80043d2:	d109      	bne.n	80043e8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	461a      	mov	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043e4:	611a      	str	r2, [r3, #16]
 80043e6:	e008      	b.n	80043fa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	f043 0301 	orr.w	r3, r3, #1
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d004      	beq.n	800440c <I2C_Master_SB+0x92>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004408:	2b00      	cmp	r3, #0
 800440a:	d108      	bne.n	800441e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	2b00      	cmp	r3, #0
 8004412:	d032      	beq.n	800447a <I2C_Master_SB+0x100>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441a:	2b00      	cmp	r3, #0
 800441c:	d02d      	beq.n	800447a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800442c:	605a      	str	r2, [r3, #4]
}
 800442e:	e024      	b.n	800447a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10e      	bne.n	8004456 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443c:	b29b      	uxth	r3, r3
 800443e:	11db      	asrs	r3, r3, #7
 8004440:	b2db      	uxtb	r3, r3
 8004442:	f003 0306 	and.w	r3, r3, #6
 8004446:	b2db      	uxtb	r3, r3
 8004448:	f063 030f 	orn	r3, r3, #15
 800444c:	b2da      	uxtb	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	611a      	str	r2, [r3, #16]
}
 8004454:	e011      	b.n	800447a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800445a:	2b01      	cmp	r3, #1
 800445c:	d10d      	bne.n	800447a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004462:	b29b      	uxth	r3, r3
 8004464:	11db      	asrs	r3, r3, #7
 8004466:	b2db      	uxtb	r3, r3
 8004468:	f003 0306 	and.w	r3, r3, #6
 800446c:	b2db      	uxtb	r3, r3
 800446e:	f063 030e 	orn	r3, r3, #14
 8004472:	b2da      	uxtb	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	611a      	str	r2, [r3, #16]
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004486:	b480      	push	{r7}
 8004488:	b083      	sub	sp, #12
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004492:	b2da      	uxtb	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d103      	bne.n	80044aa <I2C_Master_ADD10+0x24>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d011      	beq.n	80044ce <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d104      	bne.n	80044be <I2C_Master_ADD10+0x38>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d007      	beq.n	80044ce <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044cc:	605a      	str	r2, [r3, #4]
    }
  }
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80044da:	b480      	push	{r7}
 80044dc:	b091      	sub	sp, #68	; 0x44
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b22      	cmp	r3, #34	; 0x22
 8004502:	f040 8169 	bne.w	80047d8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10f      	bne.n	800452e <I2C_Master_ADDR+0x54>
 800450e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004512:	2b40      	cmp	r3, #64	; 0x40
 8004514:	d10b      	bne.n	800452e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004516:	2300      	movs	r3, #0
 8004518:	633b      	str	r3, [r7, #48]	; 0x30
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	633b      	str	r3, [r7, #48]	; 0x30
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	633b      	str	r3, [r7, #48]	; 0x30
 800452a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452c:	e160      	b.n	80047f0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004532:	2b00      	cmp	r3, #0
 8004534:	d11d      	bne.n	8004572 <I2C_Master_ADDR+0x98>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800453e:	d118      	bne.n	8004572 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004540:	2300      	movs	r3, #0
 8004542:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004554:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004564:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800456a:	1c5a      	adds	r2, r3, #1
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	651a      	str	r2, [r3, #80]	; 0x50
 8004570:	e13e      	b.n	80047f0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004576:	b29b      	uxth	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d113      	bne.n	80045a4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800457c:	2300      	movs	r3, #0
 800457e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	62bb      	str	r3, [r7, #40]	; 0x28
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004590:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	e115      	b.n	80047d0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	f040 808a 	bne.w	80046c4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80045b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045b6:	d137      	bne.n	8004628 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d6:	d113      	bne.n	8004600 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045e6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045e8:	2300      	movs	r3, #0
 80045ea:	627b      	str	r3, [r7, #36]	; 0x24
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	627b      	str	r3, [r7, #36]	; 0x24
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	627b      	str	r3, [r7, #36]	; 0x24
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	e0e7      	b.n	80047d0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004600:	2300      	movs	r3, #0
 8004602:	623b      	str	r3, [r7, #32]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	623b      	str	r3, [r7, #32]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	623b      	str	r3, [r7, #32]
 8004614:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	e0d3      	b.n	80047d0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462a:	2b08      	cmp	r3, #8
 800462c:	d02e      	beq.n	800468c <I2C_Master_ADDR+0x1b2>
 800462e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004630:	2b20      	cmp	r3, #32
 8004632:	d02b      	beq.n	800468c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004636:	2b12      	cmp	r3, #18
 8004638:	d102      	bne.n	8004640 <I2C_Master_ADDR+0x166>
 800463a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463c:	2b01      	cmp	r3, #1
 800463e:	d125      	bne.n	800468c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004642:	2b04      	cmp	r3, #4
 8004644:	d00e      	beq.n	8004664 <I2C_Master_ADDR+0x18a>
 8004646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004648:	2b02      	cmp	r3, #2
 800464a:	d00b      	beq.n	8004664 <I2C_Master_ADDR+0x18a>
 800464c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800464e:	2b10      	cmp	r3, #16
 8004650:	d008      	beq.n	8004664 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	e007      	b.n	8004674 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004672:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004674:	2300      	movs	r3, #0
 8004676:	61fb      	str	r3, [r7, #28]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	61fb      	str	r3, [r7, #28]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	61fb      	str	r3, [r7, #28]
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	e0a1      	b.n	80047d0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800469a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800469c:	2300      	movs	r3, #0
 800469e:	61bb      	str	r3, [r7, #24]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	61bb      	str	r3, [r7, #24]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	61bb      	str	r3, [r7, #24]
 80046b0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	e085      	b.n	80047d0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d14d      	bne.n	800476a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80046ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d0:	2b04      	cmp	r3, #4
 80046d2:	d016      	beq.n	8004702 <I2C_Master_ADDR+0x228>
 80046d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d013      	beq.n	8004702 <I2C_Master_ADDR+0x228>
 80046da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046dc:	2b10      	cmp	r3, #16
 80046de:	d010      	beq.n	8004702 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ee:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	e007      	b.n	8004712 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004710:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800471c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004720:	d117      	bne.n	8004752 <I2C_Master_ADDR+0x278>
 8004722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004724:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004728:	d00b      	beq.n	8004742 <I2C_Master_ADDR+0x268>
 800472a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472c:	2b01      	cmp	r3, #1
 800472e:	d008      	beq.n	8004742 <I2C_Master_ADDR+0x268>
 8004730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004732:	2b08      	cmp	r3, #8
 8004734:	d005      	beq.n	8004742 <I2C_Master_ADDR+0x268>
 8004736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004738:	2b10      	cmp	r3, #16
 800473a:	d002      	beq.n	8004742 <I2C_Master_ADDR+0x268>
 800473c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473e:	2b20      	cmp	r3, #32
 8004740:	d107      	bne.n	8004752 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004750:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004752:	2300      	movs	r3, #0
 8004754:	617b      	str	r3, [r7, #20]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	617b      	str	r3, [r7, #20]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	617b      	str	r3, [r7, #20]
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	e032      	b.n	80047d0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004778:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004788:	d117      	bne.n	80047ba <I2C_Master_ADDR+0x2e0>
 800478a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004790:	d00b      	beq.n	80047aa <I2C_Master_ADDR+0x2d0>
 8004792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004794:	2b01      	cmp	r3, #1
 8004796:	d008      	beq.n	80047aa <I2C_Master_ADDR+0x2d0>
 8004798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479a:	2b08      	cmp	r3, #8
 800479c:	d005      	beq.n	80047aa <I2C_Master_ADDR+0x2d0>
 800479e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a0:	2b10      	cmp	r3, #16
 80047a2:	d002      	beq.n	80047aa <I2C_Master_ADDR+0x2d0>
 80047a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a6:	2b20      	cmp	r3, #32
 80047a8:	d107      	bne.n	80047ba <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047b8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ba:	2300      	movs	r3, #0
 80047bc:	613b      	str	r3, [r7, #16]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	613b      	str	r3, [r7, #16]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	613b      	str	r3, [r7, #16]
 80047ce:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80047d6:	e00b      	b.n	80047f0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047d8:	2300      	movs	r3, #0
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	68fb      	ldr	r3, [r7, #12]
}
 80047ee:	e7ff      	b.n	80047f0 <I2C_Master_ADDR+0x316>
 80047f0:	bf00      	nop
 80047f2:	3744      	adds	r7, #68	; 0x44
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800480a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004810:	b29b      	uxth	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d02b      	beq.n	800486e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	781a      	ldrb	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004830:	b29b      	uxth	r3, r3
 8004832:	3b01      	subs	r3, #1
 8004834:	b29a      	uxth	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d114      	bne.n	800486e <I2C_SlaveTransmit_TXE+0x72>
 8004844:	7bfb      	ldrb	r3, [r7, #15]
 8004846:	2b29      	cmp	r3, #41	; 0x29
 8004848:	d111      	bne.n	800486e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004858:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2221      	movs	r2, #33	; 0x21
 800485e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2228      	movs	r2, #40	; 0x28
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7ff fa3f 	bl	8003cec <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800486e:	bf00      	nop
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004882:	b29b      	uxth	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	d011      	beq.n	80048ac <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488c:	781a      	ldrb	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d02c      	beq.n	800492c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	691a      	ldr	r2, [r3, #16]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	b2d2      	uxtb	r2, r2
 80048de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	3b01      	subs	r3, #1
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d114      	bne.n	800492c <I2C_SlaveReceive_RXNE+0x74>
 8004902:	7bfb      	ldrb	r3, [r7, #15]
 8004904:	2b2a      	cmp	r3, #42	; 0x2a
 8004906:	d111      	bne.n	800492c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004916:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2222      	movs	r2, #34	; 0x22
 800491c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2228      	movs	r2, #40	; 0x28
 8004922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7ff f9ea 	bl	8003d00 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800492c:	bf00      	nop
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004940:	b29b      	uxth	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d012      	beq.n	800496c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	691a      	ldr	r2, [r3, #16]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	b2d2      	uxtb	r2, r2
 8004952:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004962:	b29b      	uxth	r3, r3
 8004964:	3b01      	subs	r3, #1
 8004966:	b29a      	uxth	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004982:	2300      	movs	r3, #0
 8004984:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800498c:	b2db      	uxtb	r3, r3
 800498e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004992:	2b28      	cmp	r3, #40	; 0x28
 8004994:	d127      	bne.n	80049e6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049a4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	089b      	lsrs	r3, r3, #2
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80049b2:	2301      	movs	r3, #1
 80049b4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	09db      	lsrs	r3, r3, #7
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d103      	bne.n	80049ca <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	81bb      	strh	r3, [r7, #12]
 80049c8:	e002      	b.n	80049d0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80049d8:	89ba      	ldrh	r2, [r7, #12]
 80049da:	7bfb      	ldrb	r3, [r7, #15]
 80049dc:	4619      	mov	r1, r3
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7ff f998 	bl	8003d14 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80049e4:	e008      	b.n	80049f8 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f06f 0202 	mvn.w	r2, #2
 80049ee:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80049f8:	bf00      	nop
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a0e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a1e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004a20:	2300      	movs	r3, #0
 8004a22:	60bb      	str	r3, [r7, #8]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	60bb      	str	r3, [r7, #8]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0201 	orr.w	r2, r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a4c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a5c:	d172      	bne.n	8004b44 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a5e:	7bfb      	ldrb	r3, [r7, #15]
 8004a60:	2b22      	cmp	r3, #34	; 0x22
 8004a62:	d002      	beq.n	8004a6a <I2C_Slave_STOPF+0x6a>
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
 8004a66:	2b2a      	cmp	r3, #42	; 0x2a
 8004a68:	d135      	bne.n	8004ad6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d005      	beq.n	8004a8e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	f043 0204 	orr.w	r2, r3, #4
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a9c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fe f846 	bl	8002b34 <HAL_DMA_GetState>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d049      	beq.n	8004b42 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab2:	4a69      	ldr	r2, [pc, #420]	; (8004c58 <I2C_Slave_STOPF+0x258>)
 8004ab4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fd fe8e 	bl	80027dc <HAL_DMA_Abort_IT>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d03d      	beq.n	8004b42 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ad4:	e035      	b.n	8004b42 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d005      	beq.n	8004afa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	f043 0204 	orr.w	r2, r3, #4
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b08:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7fe f810 	bl	8002b34 <HAL_DMA_GetState>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d014      	beq.n	8004b44 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b1e:	4a4e      	ldr	r2, [pc, #312]	; (8004c58 <I2C_Slave_STOPF+0x258>)
 8004b20:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7fd fe58 	bl	80027dc <HAL_DMA_Abort_IT>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d008      	beq.n	8004b44 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	4798      	blx	r3
 8004b40:	e000      	b.n	8004b44 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b42:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d03e      	beq.n	8004bcc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d112      	bne.n	8004b82 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	691a      	ldr	r2, [r3, #16]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b66:	b2d2      	uxtb	r2, r2
 8004b68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	1c5a      	adds	r2, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8c:	2b40      	cmp	r3, #64	; 0x40
 8004b8e:	d112      	bne.n	8004bb6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691a      	ldr	r2, [r3, #16]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	b2d2      	uxtb	r2, r2
 8004b9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	1c5a      	adds	r2, r3, #1
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d005      	beq.n	8004bcc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc4:	f043 0204 	orr.w	r2, r3, #4
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f843 	bl	8004c60 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004bda:	e039      	b.n	8004c50 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
 8004bde:	2b2a      	cmp	r3, #42	; 0x2a
 8004be0:	d109      	bne.n	8004bf6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2228      	movs	r2, #40	; 0x28
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7ff f885 	bl	8003d00 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b28      	cmp	r3, #40	; 0x28
 8004c00:	d111      	bne.n	8004c26 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a15      	ldr	r2, [pc, #84]	; (8004c5c <I2C_Slave_STOPF+0x25c>)
 8004c06:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7ff f886 	bl	8003d30 <HAL_I2C_ListenCpltCallback>
}
 8004c24:	e014      	b.n	8004c50 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2a:	2b22      	cmp	r3, #34	; 0x22
 8004c2c:	d002      	beq.n	8004c34 <I2C_Slave_STOPF+0x234>
 8004c2e:	7bfb      	ldrb	r3, [r7, #15]
 8004c30:	2b22      	cmp	r3, #34	; 0x22
 8004c32:	d10d      	bne.n	8004c50 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7ff f858 	bl	8003d00 <HAL_I2C_SlaveRxCpltCallback>
}
 8004c50:	bf00      	nop
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	080053b1 	.word	0x080053b1
 8004c5c:	ffff0000 	.word	0xffff0000

08004c60 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b10      	cmp	r3, #16
 8004c7a:	d10a      	bne.n	8004c92 <I2C_ITError+0x32>
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
 8004c7e:	2b22      	cmp	r3, #34	; 0x22
 8004c80:	d107      	bne.n	8004c92 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c90:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c92:	7bfb      	ldrb	r3, [r7, #15]
 8004c94:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c98:	2b28      	cmp	r3, #40	; 0x28
 8004c9a:	d107      	bne.n	8004cac <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2228      	movs	r2, #40	; 0x28
 8004ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004caa:	e015      	b.n	8004cd8 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cba:	d006      	beq.n	8004cca <I2C_ITError+0x6a>
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
 8004cbe:	2b60      	cmp	r3, #96	; 0x60
 8004cc0:	d003      	beq.n	8004cca <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ce2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ce6:	d162      	bne.n	8004dae <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cf6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d020      	beq.n	8004d48 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0a:	4a6a      	ldr	r2, [pc, #424]	; (8004eb4 <I2C_ITError+0x254>)
 8004d0c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fd fd62 	bl	80027dc <HAL_DMA_Abort_IT>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 8089 	beq.w	8004e32 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0201 	bic.w	r2, r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d42:	4610      	mov	r0, r2
 8004d44:	4798      	blx	r3
 8004d46:	e074      	b.n	8004e32 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4c:	4a59      	ldr	r2, [pc, #356]	; (8004eb4 <I2C_ITError+0x254>)
 8004d4e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fd fd41 	bl	80027dc <HAL_DMA_Abort_IT>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d068      	beq.n	8004e32 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6a:	2b40      	cmp	r3, #64	; 0x40
 8004d6c:	d10b      	bne.n	8004d86 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	691a      	ldr	r2, [r3, #16]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	b2d2      	uxtb	r2, r2
 8004d7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	1c5a      	adds	r2, r3, #1
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0201 	bic.w	r2, r2, #1
 8004d94:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004da8:	4610      	mov	r0, r2
 8004daa:	4798      	blx	r3
 8004dac:	e041      	b.n	8004e32 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b60      	cmp	r3, #96	; 0x60
 8004db8:	d125      	bne.n	8004e06 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd2:	2b40      	cmp	r3, #64	; 0x40
 8004dd4:	d10b      	bne.n	8004dee <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	691a      	ldr	r2, [r3, #16]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	b2d2      	uxtb	r2, r2
 8004de2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 0201 	bic.w	r2, r2, #1
 8004dfc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fe ffb4 	bl	8003d6c <HAL_I2C_AbortCpltCallback>
 8004e04:	e015      	b.n	8004e32 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e10:	2b40      	cmp	r3, #64	; 0x40
 8004e12:	d10b      	bne.n	8004e2c <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	691a      	ldr	r2, [r3, #16]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	b2d2      	uxtb	r2, r2
 8004e20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	1c5a      	adds	r2, r3, #1
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7fe ff93 	bl	8003d58 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10e      	bne.n	8004e60 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d109      	bne.n	8004e60 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d104      	bne.n	8004e60 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d007      	beq.n	8004e70 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e6e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e76:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b04      	cmp	r3, #4
 8004e82:	d113      	bne.n	8004eac <I2C_ITError+0x24c>
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
 8004e86:	2b28      	cmp	r3, #40	; 0x28
 8004e88:	d110      	bne.n	8004eac <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a0a      	ldr	r2, [pc, #40]	; (8004eb8 <I2C_ITError+0x258>)
 8004e8e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7fe ff42 	bl	8003d30 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004eac:	bf00      	nop
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	080053b1 	.word	0x080053b1
 8004eb8:	ffff0000 	.word	0xffff0000

08004ebc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b088      	sub	sp, #32
 8004ec0:	af02      	add	r7, sp, #8
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	607a      	str	r2, [r7, #4]
 8004ec6:	603b      	str	r3, [r7, #0]
 8004ec8:	460b      	mov	r3, r1
 8004eca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2b08      	cmp	r3, #8
 8004ed6:	d006      	beq.n	8004ee6 <I2C_MasterRequestWrite+0x2a>
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d003      	beq.n	8004ee6 <I2C_MasterRequestWrite+0x2a>
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ee4:	d108      	bne.n	8004ef8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ef4:	601a      	str	r2, [r3, #0]
 8004ef6:	e00b      	b.n	8004f10 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efc:	2b12      	cmp	r3, #18
 8004efe:	d107      	bne.n	8004f10 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f000 fac6 	bl	80054ae <I2C_WaitOnFlagUntilTimeout>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00c      	beq.n	8004f42 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e035      	b.n	8004fae <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f4a:	d108      	bne.n	8004f5e <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f4c:	897b      	ldrh	r3, [r7, #10]
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	461a      	mov	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f5a:	611a      	str	r2, [r3, #16]
 8004f5c:	e01b      	b.n	8004f96 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f5e:	897b      	ldrh	r3, [r7, #10]
 8004f60:	11db      	asrs	r3, r3, #7
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	f003 0306 	and.w	r3, r3, #6
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	f063 030f 	orn	r3, r3, #15
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	490f      	ldr	r1, [pc, #60]	; (8004fb8 <I2C_MasterRequestWrite+0xfc>)
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 faed 	bl	800555c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e010      	b.n	8004fae <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f8c:	897b      	ldrh	r3, [r7, #10]
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	4908      	ldr	r1, [pc, #32]	; (8004fbc <I2C_MasterRequestWrite+0x100>)
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f000 fadd 	bl	800555c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e000      	b.n	8004fae <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	00010008 	.word	0x00010008
 8004fbc:	00010002 	.word	0x00010002

08004fc0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b088      	sub	sp, #32
 8004fc4:	af02      	add	r7, sp, #8
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	4608      	mov	r0, r1
 8004fca:	4611      	mov	r1, r2
 8004fcc:	461a      	mov	r2, r3
 8004fce:	4603      	mov	r3, r0
 8004fd0:	817b      	strh	r3, [r7, #10]
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	813b      	strh	r3, [r7, #8]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fe8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ff8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	6a3b      	ldr	r3, [r7, #32]
 8005000:	2200      	movs	r2, #0
 8005002:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 fa51 	bl	80054ae <I2C_WaitOnFlagUntilTimeout>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00c      	beq.n	800502c <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005026:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e0a9      	b.n	8005180 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800502c:	897b      	ldrh	r3, [r7, #10]
 800502e:	b2db      	uxtb	r3, r3
 8005030:	461a      	mov	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800503a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	6a3a      	ldr	r2, [r7, #32]
 8005040:	4951      	ldr	r1, [pc, #324]	; (8005188 <I2C_RequestMemoryRead+0x1c8>)
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 fa8a 	bl	800555c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d001      	beq.n	8005052 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e096      	b.n	8005180 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005052:	2300      	movs	r3, #0
 8005054:	617b      	str	r3, [r7, #20]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	617b      	str	r3, [r7, #20]
 8005066:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800506a:	6a39      	ldr	r1, [r7, #32]
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 faf4 	bl	800565a <I2C_WaitOnTXEFlagUntilTimeout>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00d      	beq.n	8005094 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507c:	2b04      	cmp	r3, #4
 800507e:	d107      	bne.n	8005090 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800508e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e075      	b.n	8005180 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005094:	88fb      	ldrh	r3, [r7, #6]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d105      	bne.n	80050a6 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800509a:	893b      	ldrh	r3, [r7, #8]
 800509c:	b2da      	uxtb	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	611a      	str	r2, [r3, #16]
 80050a4:	e021      	b.n	80050ea <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80050a6:	893b      	ldrh	r3, [r7, #8]
 80050a8:	0a1b      	lsrs	r3, r3, #8
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b6:	6a39      	ldr	r1, [r7, #32]
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 face 	bl	800565a <I2C_WaitOnTXEFlagUntilTimeout>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00d      	beq.n	80050e0 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c8:	2b04      	cmp	r3, #4
 80050ca:	d107      	bne.n	80050dc <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e04f      	b.n	8005180 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050e0:	893b      	ldrh	r3, [r7, #8]
 80050e2:	b2da      	uxtb	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ec:	6a39      	ldr	r1, [r7, #32]
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 fab3 	bl	800565a <I2C_WaitOnTXEFlagUntilTimeout>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00d      	beq.n	8005116 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fe:	2b04      	cmp	r3, #4
 8005100:	d107      	bne.n	8005112 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005110:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e034      	b.n	8005180 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005124:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	6a3b      	ldr	r3, [r7, #32]
 800512c:	2200      	movs	r2, #0
 800512e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 f9bb 	bl	80054ae <I2C_WaitOnFlagUntilTimeout>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00c      	beq.n	8005158 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005148:	2b00      	cmp	r3, #0
 800514a:	d003      	beq.n	8005154 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005152:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e013      	b.n	8005180 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005158:	897b      	ldrh	r3, [r7, #10]
 800515a:	b2db      	uxtb	r3, r3
 800515c:	f043 0301 	orr.w	r3, r3, #1
 8005160:	b2da      	uxtb	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	6a3a      	ldr	r2, [r7, #32]
 800516c:	4906      	ldr	r1, [pc, #24]	; (8005188 <I2C_RequestMemoryRead+0x1c8>)
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 f9f4 	bl	800555c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e000      	b.n	8005180 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3718      	adds	r7, #24
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	00010002 	.word	0x00010002

0800518c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005198:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a0:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051a8:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80051be:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d003      	beq.n	80051d0 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051cc:	2200      	movs	r2, #0
 80051ce:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051dc:	2200      	movs	r2, #0
 80051de:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80051e0:	7cfb      	ldrb	r3, [r7, #19]
 80051e2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80051e6:	2b21      	cmp	r3, #33	; 0x21
 80051e8:	d007      	beq.n	80051fa <I2C_DMAXferCplt+0x6e>
 80051ea:	7cfb      	ldrb	r3, [r7, #19]
 80051ec:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80051f0:	2b22      	cmp	r3, #34	; 0x22
 80051f2:	d131      	bne.n	8005258 <I2C_DMAXferCplt+0xcc>
 80051f4:	7cbb      	ldrb	r3, [r7, #18]
 80051f6:	2b20      	cmp	r3, #32
 80051f8:	d12e      	bne.n	8005258 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005208:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2200      	movs	r2, #0
 800520e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005210:	7cfb      	ldrb	r3, [r7, #19]
 8005212:	2b29      	cmp	r3, #41	; 0x29
 8005214:	d10a      	bne.n	800522c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2221      	movs	r2, #33	; 0x21
 800521a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	2228      	movs	r2, #40	; 0x28
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005224:	6978      	ldr	r0, [r7, #20]
 8005226:	f7fe fd61 	bl	8003cec <HAL_I2C_SlaveTxCpltCallback>
 800522a:	e00c      	b.n	8005246 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800522c:	7cfb      	ldrb	r3, [r7, #19]
 800522e:	2b2a      	cmp	r3, #42	; 0x2a
 8005230:	d109      	bne.n	8005246 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	2222      	movs	r2, #34	; 0x22
 8005236:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	2228      	movs	r2, #40	; 0x28
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005240:	6978      	ldr	r0, [r7, #20]
 8005242:	f7fe fd5d 	bl	8003d00 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005254:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005256:	e06a      	b.n	800532e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b00      	cmp	r3, #0
 8005262:	d064      	beq.n	800532e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005268:	b29b      	uxth	r3, r3
 800526a:	2b01      	cmp	r3, #1
 800526c:	d107      	bne.n	800527e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800527c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800528c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005294:	d009      	beq.n	80052aa <I2C_DMAXferCplt+0x11e>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2b08      	cmp	r3, #8
 800529a:	d006      	beq.n	80052aa <I2C_DMAXferCplt+0x11e>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80052a2:	d002      	beq.n	80052aa <I2C_DMAXferCplt+0x11e>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2b20      	cmp	r3, #32
 80052a8:	d107      	bne.n	80052ba <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052b8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052c8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052d8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	2200      	movs	r2, #0
 80052de:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d003      	beq.n	80052f0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80052e8:	6978      	ldr	r0, [r7, #20]
 80052ea:	f7fe fd35 	bl	8003d58 <HAL_I2C_ErrorCallback>
}
 80052ee:	e01e      	b.n	800532e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b40      	cmp	r3, #64	; 0x40
 8005302:	d10a      	bne.n	800531a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	2200      	movs	r2, #0
 8005310:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005312:	6978      	ldr	r0, [r7, #20]
 8005314:	f7fc faf2 	bl	80018fc <HAL_I2C_MemRxCpltCallback>
}
 8005318:	e009      	b.n	800532e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	2212      	movs	r2, #18
 8005326:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005328:	6978      	ldr	r0, [r7, #20]
 800532a:	f7fc fb15 	bl	8001958 <HAL_I2C_MasterRxCpltCallback>
}
 800532e:	bf00      	nop
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b084      	sub	sp, #16
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005342:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005350:	2200      	movs	r2, #0
 8005352:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005358:	2b00      	cmp	r3, #0
 800535a:	d003      	beq.n	8005364 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005360:	2200      	movs	r2, #0
 8005362:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7fd fbf3 	bl	8002b50 <HAL_DMA_GetError>
 800536a:	4603      	mov	r3, r0
 800536c:	2b02      	cmp	r3, #2
 800536e:	d01b      	beq.n	80053a8 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800537e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2220      	movs	r2, #32
 800538a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	f043 0210 	orr.w	r2, r3, #16
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f7fe fcd8 	bl	8003d58 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80053a8:	bf00      	nop
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053bc:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c4:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d2:	2200      	movs	r2, #0
 80053d4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e2:	2200      	movs	r2, #0
 80053e4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053f4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005400:	2b00      	cmp	r3, #0
 8005402:	d003      	beq.n	800540c <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005408:	2200      	movs	r2, #0
 800540a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005410:	2b00      	cmp	r3, #0
 8005412:	d003      	beq.n	800541c <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005418:	2200      	movs	r2, #0
 800541a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 0201 	bic.w	r2, r2, #1
 800542a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b60      	cmp	r3, #96	; 0x60
 8005436:	d10e      	bne.n	8005456 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2220      	movs	r2, #32
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f7fe fc8c 	bl	8003d6c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005454:	e027      	b.n	80054a6 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005456:	7afb      	ldrb	r3, [r7, #11]
 8005458:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800545c:	2b28      	cmp	r3, #40	; 0x28
 800545e:	d117      	bne.n	8005490 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0201 	orr.w	r2, r2, #1
 800546e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800547e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2228      	movs	r2, #40	; 0x28
 800548a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800548e:	e007      	b.n	80054a0 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2220      	movs	r2, #32
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f7fe fc59 	bl	8003d58 <HAL_I2C_ErrorCallback>
}
 80054a6:	bf00      	nop
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b084      	sub	sp, #16
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	60f8      	str	r0, [r7, #12]
 80054b6:	60b9      	str	r1, [r7, #8]
 80054b8:	603b      	str	r3, [r7, #0]
 80054ba:	4613      	mov	r3, r2
 80054bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054be:	e025      	b.n	800550c <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c6:	d021      	beq.n	800550c <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c8:	f7fc ff42 	bl	8002350 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d302      	bcc.n	80054de <I2C_WaitOnFlagUntilTimeout+0x30>
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d116      	bne.n	800550c <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f8:	f043 0220 	orr.w	r2, r3, #32
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e023      	b.n	8005554 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	0c1b      	lsrs	r3, r3, #16
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b01      	cmp	r3, #1
 8005514:	d10d      	bne.n	8005532 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	43da      	mvns	r2, r3
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	4013      	ands	r3, r2
 8005522:	b29b      	uxth	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	bf0c      	ite	eq
 8005528:	2301      	moveq	r3, #1
 800552a:	2300      	movne	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	461a      	mov	r2, r3
 8005530:	e00c      	b.n	800554c <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	43da      	mvns	r2, r3
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	4013      	ands	r3, r2
 800553e:	b29b      	uxth	r3, r3
 8005540:	2b00      	cmp	r3, #0
 8005542:	bf0c      	ite	eq
 8005544:	2301      	moveq	r3, #1
 8005546:	2300      	movne	r3, #0
 8005548:	b2db      	uxtb	r3, r3
 800554a:	461a      	mov	r2, r3
 800554c:	79fb      	ldrb	r3, [r7, #7]
 800554e:	429a      	cmp	r2, r3
 8005550:	d0b6      	beq.n	80054c0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
 8005568:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800556a:	e051      	b.n	8005610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800557a:	d123      	bne.n	80055c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800558a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005594:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2220      	movs	r2, #32
 80055a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b0:	f043 0204 	orr.w	r2, r3, #4
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e046      	b.n	8005652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ca:	d021      	beq.n	8005610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055cc:	f7fc fec0 	bl	8002350 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d302      	bcc.n	80055e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d116      	bne.n	8005610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2220      	movs	r2, #32
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fc:	f043 0220 	orr.w	r2, r3, #32
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e020      	b.n	8005652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	0c1b      	lsrs	r3, r3, #16
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b01      	cmp	r3, #1
 8005618:	d10c      	bne.n	8005634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	43da      	mvns	r2, r3
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	4013      	ands	r3, r2
 8005626:	b29b      	uxth	r3, r3
 8005628:	2b00      	cmp	r3, #0
 800562a:	bf14      	ite	ne
 800562c:	2301      	movne	r3, #1
 800562e:	2300      	moveq	r3, #0
 8005630:	b2db      	uxtb	r3, r3
 8005632:	e00b      	b.n	800564c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	43da      	mvns	r2, r3
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	4013      	ands	r3, r2
 8005640:	b29b      	uxth	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	bf14      	ite	ne
 8005646:	2301      	movne	r3, #1
 8005648:	2300      	moveq	r3, #0
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	d18d      	bne.n	800556c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800565a:	b580      	push	{r7, lr}
 800565c:	b084      	sub	sp, #16
 800565e:	af00      	add	r7, sp, #0
 8005660:	60f8      	str	r0, [r7, #12]
 8005662:	60b9      	str	r1, [r7, #8]
 8005664:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005666:	e02d      	b.n	80056c4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f000 f878 	bl	800575e <I2C_IsAcknowledgeFailed>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e02d      	b.n	80056d4 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567e:	d021      	beq.n	80056c4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005680:	f7fc fe66 	bl	8002350 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	429a      	cmp	r2, r3
 800568e:	d302      	bcc.n	8005696 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d116      	bne.n	80056c4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2220      	movs	r2, #32
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b0:	f043 0220 	orr.w	r2, r3, #32
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e007      	b.n	80056d4 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ce:	2b80      	cmp	r3, #128	; 0x80
 80056d0:	d1ca      	bne.n	8005668 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056e8:	e02d      	b.n	8005746 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f000 f837 	bl	800575e <I2C_IsAcknowledgeFailed>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e02d      	b.n	8005756 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005700:	d021      	beq.n	8005746 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005702:	f7fc fe25 	bl	8002350 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	429a      	cmp	r2, r3
 8005710:	d302      	bcc.n	8005718 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d116      	bne.n	8005746 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2220      	movs	r2, #32
 8005722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	f043 0220 	orr.w	r2, r3, #32
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e007      	b.n	8005756 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b04      	cmp	r3, #4
 8005752:	d1ca      	bne.n	80056ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800575e:	b480      	push	{r7}
 8005760:	b083      	sub	sp, #12
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005774:	d11b      	bne.n	80057ae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800577e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2220      	movs	r2, #32
 800578a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	f043 0204 	orr.w	r2, r3, #4
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e000      	b.n	80057b0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80057cc:	d103      	bne.n	80057d6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80057d4:	e007      	b.n	80057e6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057da:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80057de:	d102      	bne.n	80057e6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2208      	movs	r2, #8
 80057e4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80057e6:	bf00      	nop
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80057f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057f4:	b08f      	sub	sp, #60	; 0x3c
 80057f6:	af0a      	add	r7, sp, #40	; 0x28
 80057f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e10f      	b.n	8005a24 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d106      	bne.n	8005824 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f006 f99c 	bl	800bb5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2203      	movs	r2, #3
 8005828:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005834:	2b00      	cmp	r3, #0
 8005836:	d102      	bne.n	800583e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4618      	mov	r0, r3
 8005844:	f003 f9d1 	bl	8008bea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	603b      	str	r3, [r7, #0]
 800584e:	687e      	ldr	r6, [r7, #4]
 8005850:	466d      	mov	r5, sp
 8005852:	f106 0410 	add.w	r4, r6, #16
 8005856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005858:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800585a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800585c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800585e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005862:	e885 0003 	stmia.w	r5, {r0, r1}
 8005866:	1d33      	adds	r3, r6, #4
 8005868:	cb0e      	ldmia	r3, {r1, r2, r3}
 800586a:	6838      	ldr	r0, [r7, #0]
 800586c:	f003 f8a8 	bl	80089c0 <USB_CoreInit>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d005      	beq.n	8005882 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2202      	movs	r2, #2
 800587a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e0d0      	b.n	8005a24 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2100      	movs	r1, #0
 8005888:	4618      	mov	r0, r3
 800588a:	f003 f9bf 	bl	8008c0c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800588e:	2300      	movs	r3, #0
 8005890:	73fb      	strb	r3, [r7, #15]
 8005892:	e04a      	b.n	800592a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005894:	7bfa      	ldrb	r2, [r7, #15]
 8005896:	6879      	ldr	r1, [r7, #4]
 8005898:	4613      	mov	r3, r2
 800589a:	00db      	lsls	r3, r3, #3
 800589c:	1a9b      	subs	r3, r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	440b      	add	r3, r1
 80058a2:	333d      	adds	r3, #61	; 0x3d
 80058a4:	2201      	movs	r2, #1
 80058a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80058a8:	7bfa      	ldrb	r2, [r7, #15]
 80058aa:	6879      	ldr	r1, [r7, #4]
 80058ac:	4613      	mov	r3, r2
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	1a9b      	subs	r3, r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	440b      	add	r3, r1
 80058b6:	333c      	adds	r3, #60	; 0x3c
 80058b8:	7bfa      	ldrb	r2, [r7, #15]
 80058ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80058bc:	7bfa      	ldrb	r2, [r7, #15]
 80058be:	7bfb      	ldrb	r3, [r7, #15]
 80058c0:	b298      	uxth	r0, r3
 80058c2:	6879      	ldr	r1, [r7, #4]
 80058c4:	4613      	mov	r3, r2
 80058c6:	00db      	lsls	r3, r3, #3
 80058c8:	1a9b      	subs	r3, r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	440b      	add	r3, r1
 80058ce:	3342      	adds	r3, #66	; 0x42
 80058d0:	4602      	mov	r2, r0
 80058d2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80058d4:	7bfa      	ldrb	r2, [r7, #15]
 80058d6:	6879      	ldr	r1, [r7, #4]
 80058d8:	4613      	mov	r3, r2
 80058da:	00db      	lsls	r3, r3, #3
 80058dc:	1a9b      	subs	r3, r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	440b      	add	r3, r1
 80058e2:	333f      	adds	r3, #63	; 0x3f
 80058e4:	2200      	movs	r2, #0
 80058e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80058e8:	7bfa      	ldrb	r2, [r7, #15]
 80058ea:	6879      	ldr	r1, [r7, #4]
 80058ec:	4613      	mov	r3, r2
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	1a9b      	subs	r3, r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	440b      	add	r3, r1
 80058f6:	3344      	adds	r3, #68	; 0x44
 80058f8:	2200      	movs	r2, #0
 80058fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80058fc:	7bfa      	ldrb	r2, [r7, #15]
 80058fe:	6879      	ldr	r1, [r7, #4]
 8005900:	4613      	mov	r3, r2
 8005902:	00db      	lsls	r3, r3, #3
 8005904:	1a9b      	subs	r3, r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	440b      	add	r3, r1
 800590a:	3348      	adds	r3, #72	; 0x48
 800590c:	2200      	movs	r2, #0
 800590e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005910:	7bfa      	ldrb	r2, [r7, #15]
 8005912:	6879      	ldr	r1, [r7, #4]
 8005914:	4613      	mov	r3, r2
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	1a9b      	subs	r3, r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	440b      	add	r3, r1
 800591e:	3350      	adds	r3, #80	; 0x50
 8005920:	2200      	movs	r2, #0
 8005922:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005924:	7bfb      	ldrb	r3, [r7, #15]
 8005926:	3301      	adds	r3, #1
 8005928:	73fb      	strb	r3, [r7, #15]
 800592a:	7bfa      	ldrb	r2, [r7, #15]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	429a      	cmp	r2, r3
 8005932:	d3af      	bcc.n	8005894 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005934:	2300      	movs	r3, #0
 8005936:	73fb      	strb	r3, [r7, #15]
 8005938:	e044      	b.n	80059c4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800593a:	7bfa      	ldrb	r2, [r7, #15]
 800593c:	6879      	ldr	r1, [r7, #4]
 800593e:	4613      	mov	r3, r2
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	1a9b      	subs	r3, r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	440b      	add	r3, r1
 8005948:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800594c:	2200      	movs	r2, #0
 800594e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005950:	7bfa      	ldrb	r2, [r7, #15]
 8005952:	6879      	ldr	r1, [r7, #4]
 8005954:	4613      	mov	r3, r2
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	1a9b      	subs	r3, r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	440b      	add	r3, r1
 800595e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005962:	7bfa      	ldrb	r2, [r7, #15]
 8005964:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005966:	7bfa      	ldrb	r2, [r7, #15]
 8005968:	6879      	ldr	r1, [r7, #4]
 800596a:	4613      	mov	r3, r2
 800596c:	00db      	lsls	r3, r3, #3
 800596e:	1a9b      	subs	r3, r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	440b      	add	r3, r1
 8005974:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005978:	2200      	movs	r2, #0
 800597a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800597c:	7bfa      	ldrb	r2, [r7, #15]
 800597e:	6879      	ldr	r1, [r7, #4]
 8005980:	4613      	mov	r3, r2
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	1a9b      	subs	r3, r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	440b      	add	r3, r1
 800598a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800598e:	2200      	movs	r2, #0
 8005990:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005992:	7bfa      	ldrb	r2, [r7, #15]
 8005994:	6879      	ldr	r1, [r7, #4]
 8005996:	4613      	mov	r3, r2
 8005998:	00db      	lsls	r3, r3, #3
 800599a:	1a9b      	subs	r3, r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	440b      	add	r3, r1
 80059a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80059a4:	2200      	movs	r2, #0
 80059a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80059a8:	7bfa      	ldrb	r2, [r7, #15]
 80059aa:	6879      	ldr	r1, [r7, #4]
 80059ac:	4613      	mov	r3, r2
 80059ae:	00db      	lsls	r3, r3, #3
 80059b0:	1a9b      	subs	r3, r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	440b      	add	r3, r1
 80059b6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80059ba:	2200      	movs	r2, #0
 80059bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059be:	7bfb      	ldrb	r3, [r7, #15]
 80059c0:	3301      	adds	r3, #1
 80059c2:	73fb      	strb	r3, [r7, #15]
 80059c4:	7bfa      	ldrb	r2, [r7, #15]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d3b5      	bcc.n	800593a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	603b      	str	r3, [r7, #0]
 80059d4:	687e      	ldr	r6, [r7, #4]
 80059d6:	466d      	mov	r5, sp
 80059d8:	f106 0410 	add.w	r4, r6, #16
 80059dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80059e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80059ec:	1d33      	adds	r3, r6, #4
 80059ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059f0:	6838      	ldr	r0, [r7, #0]
 80059f2:	f003 f935 	bl	8008c60 <USB_DevInit>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d005      	beq.n	8005a08 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2202      	movs	r2, #2
 8005a00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e00d      	b.n	8005a24 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f004 f974 	bl	8009d0a <USB_DevDisconnect>

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a2c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d101      	bne.n	8005a48 <HAL_PCD_Start+0x1c>
 8005a44:	2302      	movs	r3, #2
 8005a46:	e020      	b.n	8005a8a <HAL_PCD_Start+0x5e>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d109      	bne.n	8005a6c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d005      	beq.n	8005a6c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a64:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f004 f932 	bl	8009cda <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f003 f8a4 	bl	8008bc8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005a92:	b590      	push	{r4, r7, lr}
 8005a94:	b08d      	sub	sp, #52	; 0x34
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa0:	6a3b      	ldr	r3, [r7, #32]
 8005aa2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f004 f9d9 	bl	8009e60 <USB_GetMode>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f040 839d 	bne.w	80061f0 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f004 f93d 	bl	8009d3a <USB_ReadInterrupts>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f000 8393 	beq.w	80061ee <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f004 f934 	bl	8009d3a <USB_ReadInterrupts>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	f003 0302 	and.w	r3, r3, #2
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d107      	bne.n	8005aec <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	695a      	ldr	r2, [r3, #20]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f002 0202 	and.w	r2, r2, #2
 8005aea:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4618      	mov	r0, r3
 8005af2:	f004 f922 	bl	8009d3a <USB_ReadInterrupts>
 8005af6:	4603      	mov	r3, r0
 8005af8:	f003 0310 	and.w	r3, r3, #16
 8005afc:	2b10      	cmp	r3, #16
 8005afe:	d161      	bne.n	8005bc4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	699a      	ldr	r2, [r3, #24]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 0210 	bic.w	r2, r2, #16
 8005b0e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	6a1b      	ldr	r3, [r3, #32]
 8005b14:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	f003 020f 	and.w	r2, r3, #15
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	1a9b      	subs	r3, r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	0c5b      	lsrs	r3, r3, #17
 8005b34:	f003 030f 	and.w	r3, r3, #15
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d124      	bne.n	8005b86 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005b42:	4013      	ands	r3, r2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d035      	beq.n	8005bb4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	091b      	lsrs	r3, r3, #4
 8005b50:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005b52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	461a      	mov	r2, r3
 8005b5a:	6a38      	ldr	r0, [r7, #32]
 8005b5c:	f003 ff9a 	bl	8009a94 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	68da      	ldr	r2, [r3, #12]
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	091b      	lsrs	r3, r3, #4
 8005b68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b6c:	441a      	add	r2, r3
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	699a      	ldr	r2, [r3, #24]
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	091b      	lsrs	r3, r3, #4
 8005b7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b7e:	441a      	add	r2, r3
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	619a      	str	r2, [r3, #24]
 8005b84:	e016      	b.n	8005bb4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	0c5b      	lsrs	r3, r3, #17
 8005b8a:	f003 030f 	and.w	r3, r3, #15
 8005b8e:	2b06      	cmp	r3, #6
 8005b90:	d110      	bne.n	8005bb4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b98:	2208      	movs	r2, #8
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	6a38      	ldr	r0, [r7, #32]
 8005b9e:	f003 ff79 	bl	8009a94 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	699a      	ldr	r2, [r3, #24]
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	091b      	lsrs	r3, r3, #4
 8005baa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bae:	441a      	add	r2, r3
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	699a      	ldr	r2, [r3, #24]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f042 0210 	orr.w	r2, r2, #16
 8005bc2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f004 f8b6 	bl	8009d3a <USB_ReadInterrupts>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bd4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005bd8:	d16e      	bne.n	8005cb8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f004 f8bc 	bl	8009d60 <USB_ReadDevAllOutEpInterrupt>
 8005be8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005bea:	e062      	b.n	8005cb2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d057      	beq.n	8005ca6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bfc:	b2d2      	uxtb	r2, r2
 8005bfe:	4611      	mov	r1, r2
 8005c00:	4618      	mov	r0, r3
 8005c02:	f004 f8e1 	bl	8009dc8 <USB_ReadDevOutEPInterrupt>
 8005c06:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00c      	beq.n	8005c2c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1e:	461a      	mov	r2, r3
 8005c20:	2301      	movs	r3, #1
 8005c22:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005c24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 fdb0 	bl	800678c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	f003 0308 	and.w	r3, r3, #8
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00c      	beq.n	8005c50 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c42:	461a      	mov	r2, r3
 8005c44:	2308      	movs	r3, #8
 8005c46:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005c48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 feaa 	bl	80069a4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f003 0310 	and.w	r3, r3, #16
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d008      	beq.n	8005c6c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c66:	461a      	mov	r2, r3
 8005c68:	2310      	movs	r3, #16
 8005c6a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f003 0320 	and.w	r3, r3, #32
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d008      	beq.n	8005c88 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c82:	461a      	mov	r2, r3
 8005c84:	2320      	movs	r3, #32
 8005c86:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d009      	beq.n	8005ca6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ca4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	3301      	adds	r3, #1
 8005caa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cae:	085b      	lsrs	r3, r3, #1
 8005cb0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d199      	bne.n	8005bec <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f004 f83c 	bl	8009d3a <USB_ReadInterrupts>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cc8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ccc:	f040 80c0 	bne.w	8005e50 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f004 f85d 	bl	8009d94 <USB_ReadDevAllInEpInterrupt>
 8005cda:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005ce0:	e0b2      	b.n	8005e48 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 80a7 	beq.w	8005e3c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf4:	b2d2      	uxtb	r2, r2
 8005cf6:	4611      	mov	r1, r2
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f004 f883 	bl	8009e04 <USB_ReadDevInEPInterrupt>
 8005cfe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d057      	beq.n	8005dba <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	f003 030f 	and.w	r3, r3, #15
 8005d10:	2201      	movs	r2, #1
 8005d12:	fa02 f303 	lsl.w	r3, r2, r3
 8005d16:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	43db      	mvns	r3, r3
 8005d24:	69f9      	ldr	r1, [r7, #28]
 8005d26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d132      	bne.n	8005dae <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005d48:	6879      	ldr	r1, [r7, #4]
 8005d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	1a9b      	subs	r3, r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	440b      	add	r3, r1
 8005d56:	3348      	adds	r3, #72	; 0x48
 8005d58:	6819      	ldr	r1, [r3, #0]
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d5e:	4613      	mov	r3, r2
 8005d60:	00db      	lsls	r3, r3, #3
 8005d62:	1a9b      	subs	r3, r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4403      	add	r3, r0
 8005d68:	3344      	adds	r3, #68	; 0x44
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4419      	add	r1, r3
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d72:	4613      	mov	r3, r2
 8005d74:	00db      	lsls	r3, r3, #3
 8005d76:	1a9b      	subs	r3, r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4403      	add	r3, r0
 8005d7c:	3348      	adds	r3, #72	; 0x48
 8005d7e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d113      	bne.n	8005dae <HAL_PCD_IRQHandler+0x31c>
 8005d86:	6879      	ldr	r1, [r7, #4]
 8005d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	00db      	lsls	r3, r3, #3
 8005d8e:	1a9b      	subs	r3, r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	440b      	add	r3, r1
 8005d94:	3350      	adds	r3, #80	; 0x50
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d108      	bne.n	8005dae <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6818      	ldr	r0, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005da6:	461a      	mov	r2, r3
 8005da8:	2101      	movs	r1, #1
 8005daa:	f004 f88b 	bl	8009ec4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	4619      	mov	r1, r3
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f005 ff52 	bl	800bc5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f003 0308 	and.w	r3, r3, #8
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d008      	beq.n	8005dd6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	2308      	movs	r3, #8
 8005dd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	f003 0310 	and.w	r3, r3, #16
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d008      	beq.n	8005df2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	015a      	lsls	r2, r3, #5
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dec:	461a      	mov	r2, r3
 8005dee:	2310      	movs	r3, #16
 8005df0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d008      	beq.n	8005e0e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e08:	461a      	mov	r2, r3
 8005e0a:	2340      	movs	r3, #64	; 0x40
 8005e0c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	f003 0302 	and.w	r3, r3, #2
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d008      	beq.n	8005e2a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e24:	461a      	mov	r2, r3
 8005e26:	2302      	movs	r3, #2
 8005e28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d003      	beq.n	8005e3c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005e34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fc1b 	bl	8006672 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	3301      	adds	r3, #1
 8005e40:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e44:	085b      	lsrs	r3, r3, #1
 8005e46:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f47f af49 	bne.w	8005ce2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4618      	mov	r0, r3
 8005e56:	f003 ff70 	bl	8009d3a <USB_ReadInterrupts>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e64:	d122      	bne.n	8005eac <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	69fa      	ldr	r2, [r7, #28]
 8005e70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e74:	f023 0301 	bic.w	r3, r3, #1
 8005e78:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d108      	bne.n	8005e96 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 fe26 	bl	8006ae0 <HAL_PCDEx_LPM_Callback>
 8005e94:	e002      	b.n	8005e9c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f005 ff58 	bl	800bd4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	695a      	ldr	r2, [r3, #20]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005eaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f003 ff42 	bl	8009d3a <USB_ReadInterrupts>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ebc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ec0:	d112      	bne.n	8005ee8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d102      	bne.n	8005ed8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f005 ff14 	bl	800bd00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	695a      	ldr	r2, [r3, #20]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005ee6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f003 ff24 	bl	8009d3a <USB_ReadInterrupts>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005efc:	f040 80c7 	bne.w	800608e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	69fa      	ldr	r2, [r7, #28]
 8005f0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f0e:	f023 0301 	bic.w	r3, r3, #1
 8005f12:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2110      	movs	r1, #16
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f003 f804 	bl	8008f28 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f20:	2300      	movs	r3, #0
 8005f22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f24:	e056      	b.n	8005fd4 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f28:	015a      	lsls	r2, r3, #5
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f32:	461a      	mov	r2, r3
 8005f34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f38:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f4a:	0151      	lsls	r1, r2, #5
 8005f4c:	69fa      	ldr	r2, [r7, #28]
 8005f4e:	440a      	add	r2, r1
 8005f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f58:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f6a:	0151      	lsls	r1, r2, #5
 8005f6c:	69fa      	ldr	r2, [r7, #28]
 8005f6e:	440a      	add	r2, r1
 8005f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f78:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7c:	015a      	lsls	r2, r3, #5
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	4413      	add	r3, r2
 8005f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f86:	461a      	mov	r2, r3
 8005f88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f8c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f9e:	0151      	lsls	r1, r2, #5
 8005fa0:	69fa      	ldr	r2, [r7, #28]
 8005fa2:	440a      	add	r2, r1
 8005fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fa8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb0:	015a      	lsls	r2, r3, #5
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fbe:	0151      	lsls	r1, r2, #5
 8005fc0:	69fa      	ldr	r2, [r7, #28]
 8005fc2:	440a      	add	r2, r1
 8005fc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005fcc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d3a3      	bcc.n	8005f26 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	69fa      	ldr	r2, [r7, #28]
 8005fe8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fec:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005ff0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d016      	beq.n	8006028 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006004:	69fa      	ldr	r2, [r7, #28]
 8006006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800600a:	f043 030b 	orr.w	r3, r3, #11
 800600e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800601a:	69fa      	ldr	r2, [r7, #28]
 800601c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006020:	f043 030b 	orr.w	r3, r3, #11
 8006024:	6453      	str	r3, [r2, #68]	; 0x44
 8006026:	e015      	b.n	8006054 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	69fa      	ldr	r2, [r7, #28]
 8006032:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006036:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800603a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800603e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	69fa      	ldr	r2, [r7, #28]
 800604a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800604e:	f043 030b 	orr.w	r3, r3, #11
 8006052:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	69fa      	ldr	r2, [r7, #28]
 800605e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006062:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006066:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6818      	ldr	r0, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006078:	461a      	mov	r2, r3
 800607a:	f003 ff23 	bl	8009ec4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	695a      	ldr	r2, [r3, #20]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800608c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4618      	mov	r0, r3
 8006094:	f003 fe51 	bl	8009d3a <USB_ReadInterrupts>
 8006098:	4603      	mov	r3, r0
 800609a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800609e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060a2:	d124      	bne.n	80060ee <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f003 fee7 	bl	8009e7c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f002 ff99 	bl	8008fea <USB_GetDevSpeed>
 80060b8:	4603      	mov	r3, r0
 80060ba:	461a      	mov	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681c      	ldr	r4, [r3, #0]
 80060c4:	f001 f944 	bl	8007350 <HAL_RCC_GetHCLKFreq>
 80060c8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	461a      	mov	r2, r3
 80060d2:	4620      	mov	r0, r4
 80060d4:	f002 fcd6 	bl	8008a84 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f005 fde8 	bl	800bcae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	695a      	ldr	r2, [r3, #20]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80060ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f003 fe21 	bl	8009d3a <USB_ReadInterrupts>
 80060f8:	4603      	mov	r3, r0
 80060fa:	f003 0308 	and.w	r3, r3, #8
 80060fe:	2b08      	cmp	r3, #8
 8006100:	d10a      	bne.n	8006118 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f005 fdc5 	bl	800bc92 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	695a      	ldr	r2, [r3, #20]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f002 0208 	and.w	r2, r2, #8
 8006116:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4618      	mov	r0, r3
 800611e:	f003 fe0c 	bl	8009d3a <USB_ReadInterrupts>
 8006122:	4603      	mov	r3, r0
 8006124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006128:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800612c:	d10f      	bne.n	800614e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	b2db      	uxtb	r3, r3
 8006136:	4619      	mov	r1, r3
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f005 fe27 	bl	800bd8c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	695a      	ldr	r2, [r3, #20]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800614c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4618      	mov	r0, r3
 8006154:	f003 fdf1 	bl	8009d3a <USB_ReadInterrupts>
 8006158:	4603      	mov	r3, r0
 800615a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800615e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006162:	d10f      	bne.n	8006184 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006164:	2300      	movs	r3, #0
 8006166:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616a:	b2db      	uxtb	r3, r3
 800616c:	4619      	mov	r1, r3
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f005 fdfa 	bl	800bd68 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	695a      	ldr	r2, [r3, #20]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006182:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4618      	mov	r0, r3
 800618a:	f003 fdd6 	bl	8009d3a <USB_ReadInterrupts>
 800618e:	4603      	mov	r3, r0
 8006190:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006198:	d10a      	bne.n	80061b0 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f005 fe08 	bl	800bdb0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	695a      	ldr	r2, [r3, #20]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80061ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f003 fdc0 	bl	8009d3a <USB_ReadInterrupts>
 80061ba:	4603      	mov	r3, r0
 80061bc:	f003 0304 	and.w	r3, r3, #4
 80061c0:	2b04      	cmp	r3, #4
 80061c2:	d115      	bne.n	80061f0 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	f003 0304 	and.w	r3, r3, #4
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d002      	beq.n	80061dc <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f005 fdf8 	bl	800bdcc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6859      	ldr	r1, [r3, #4]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	605a      	str	r2, [r3, #4]
 80061ec:	e000      	b.n	80061f0 <HAL_PCD_IRQHandler+0x75e>
      return;
 80061ee:	bf00      	nop
    }
  }
}
 80061f0:	3734      	adds	r7, #52	; 0x34
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd90      	pop	{r4, r7, pc}

080061f6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b082      	sub	sp, #8
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
 80061fe:	460b      	mov	r3, r1
 8006200:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006208:	2b01      	cmp	r3, #1
 800620a:	d101      	bne.n	8006210 <HAL_PCD_SetAddress+0x1a>
 800620c:	2302      	movs	r3, #2
 800620e:	e013      	b.n	8006238 <HAL_PCD_SetAddress+0x42>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	78fa      	ldrb	r2, [r7, #3]
 800621c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	78fa      	ldrb	r2, [r7, #3]
 8006226:	4611      	mov	r1, r2
 8006228:	4618      	mov	r0, r3
 800622a:	f003 fd30 	bl	8009c8e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3708      	adds	r7, #8
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	4608      	mov	r0, r1
 800624a:	4611      	mov	r1, r2
 800624c:	461a      	mov	r2, r3
 800624e:	4603      	mov	r3, r0
 8006250:	70fb      	strb	r3, [r7, #3]
 8006252:	460b      	mov	r3, r1
 8006254:	803b      	strh	r3, [r7, #0]
 8006256:	4613      	mov	r3, r2
 8006258:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800625a:	2300      	movs	r3, #0
 800625c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800625e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006262:	2b00      	cmp	r3, #0
 8006264:	da0f      	bge.n	8006286 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006266:	78fb      	ldrb	r3, [r7, #3]
 8006268:	f003 020f 	and.w	r2, r3, #15
 800626c:	4613      	mov	r3, r2
 800626e:	00db      	lsls	r3, r3, #3
 8006270:	1a9b      	subs	r3, r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	3338      	adds	r3, #56	; 0x38
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	4413      	add	r3, r2
 800627a:	3304      	adds	r3, #4
 800627c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2201      	movs	r2, #1
 8006282:	705a      	strb	r2, [r3, #1]
 8006284:	e00f      	b.n	80062a6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006286:	78fb      	ldrb	r3, [r7, #3]
 8006288:	f003 020f 	and.w	r2, r3, #15
 800628c:	4613      	mov	r3, r2
 800628e:	00db      	lsls	r3, r3, #3
 8006290:	1a9b      	subs	r3, r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	4413      	add	r3, r2
 800629c:	3304      	adds	r3, #4
 800629e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80062a6:	78fb      	ldrb	r3, [r7, #3]
 80062a8:	f003 030f 	and.w	r3, r3, #15
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80062b2:	883a      	ldrh	r2, [r7, #0]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	78ba      	ldrb	r2, [r7, #2]
 80062bc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	785b      	ldrb	r3, [r3, #1]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d004      	beq.n	80062d0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80062d0:	78bb      	ldrb	r3, [r7, #2]
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d102      	bne.n	80062dc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d101      	bne.n	80062ea <HAL_PCD_EP_Open+0xaa>
 80062e6:	2302      	movs	r3, #2
 80062e8:	e00e      	b.n	8006308 <HAL_PCD_EP_Open+0xc8>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68f9      	ldr	r1, [r7, #12]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f002 fe9b 	bl	8009034 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006306:	7afb      	ldrb	r3, [r7, #11]
}
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	460b      	mov	r3, r1
 800631a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800631c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006320:	2b00      	cmp	r3, #0
 8006322:	da0f      	bge.n	8006344 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	f003 020f 	and.w	r2, r3, #15
 800632a:	4613      	mov	r3, r2
 800632c:	00db      	lsls	r3, r3, #3
 800632e:	1a9b      	subs	r3, r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	3338      	adds	r3, #56	; 0x38
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	4413      	add	r3, r2
 8006338:	3304      	adds	r3, #4
 800633a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2201      	movs	r2, #1
 8006340:	705a      	strb	r2, [r3, #1]
 8006342:	e00f      	b.n	8006364 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006344:	78fb      	ldrb	r3, [r7, #3]
 8006346:	f003 020f 	and.w	r2, r3, #15
 800634a:	4613      	mov	r3, r2
 800634c:	00db      	lsls	r3, r3, #3
 800634e:	1a9b      	subs	r3, r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	4413      	add	r3, r2
 800635a:	3304      	adds	r3, #4
 800635c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006364:	78fb      	ldrb	r3, [r7, #3]
 8006366:	f003 030f 	and.w	r3, r3, #15
 800636a:	b2da      	uxtb	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006376:	2b01      	cmp	r3, #1
 8006378:	d101      	bne.n	800637e <HAL_PCD_EP_Close+0x6e>
 800637a:	2302      	movs	r3, #2
 800637c:	e00e      	b.n	800639c <HAL_PCD_EP_Close+0x8c>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68f9      	ldr	r1, [r7, #12]
 800638c:	4618      	mov	r0, r3
 800638e:	f002 fed9 	bl	8009144 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	607a      	str	r2, [r7, #4]
 80063ae:	603b      	str	r3, [r7, #0]
 80063b0:	460b      	mov	r3, r1
 80063b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063b4:	7afb      	ldrb	r3, [r7, #11]
 80063b6:	f003 020f 	and.w	r2, r3, #15
 80063ba:	4613      	mov	r3, r2
 80063bc:	00db      	lsls	r3, r3, #3
 80063be:	1a9b      	subs	r3, r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	4413      	add	r3, r2
 80063ca:	3304      	adds	r3, #4
 80063cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	2200      	movs	r2, #0
 80063de:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	2200      	movs	r2, #0
 80063e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063e6:	7afb      	ldrb	r3, [r7, #11]
 80063e8:	f003 030f 	and.w	r3, r3, #15
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d102      	bne.n	8006400 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006400:	7afb      	ldrb	r3, [r7, #11]
 8006402:	f003 030f 	and.w	r3, r3, #15
 8006406:	2b00      	cmp	r3, #0
 8006408:	d109      	bne.n	800641e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6818      	ldr	r0, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	b2db      	uxtb	r3, r3
 8006414:	461a      	mov	r2, r3
 8006416:	6979      	ldr	r1, [r7, #20]
 8006418:	f003 f9b4 	bl	8009784 <USB_EP0StartXfer>
 800641c:	e008      	b.n	8006430 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6818      	ldr	r0, [r3, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	b2db      	uxtb	r3, r3
 8006428:	461a      	mov	r2, r3
 800642a:	6979      	ldr	r1, [r7, #20]
 800642c:	f002 ff66 	bl	80092fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3718      	adds	r7, #24
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800643a:	b480      	push	{r7}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	460b      	mov	r3, r1
 8006444:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006446:	78fb      	ldrb	r3, [r7, #3]
 8006448:	f003 020f 	and.w	r2, r3, #15
 800644c:	6879      	ldr	r1, [r7, #4]
 800644e:	4613      	mov	r3, r2
 8006450:	00db      	lsls	r3, r3, #3
 8006452:	1a9b      	subs	r3, r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	440b      	add	r3, r1
 8006458:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800645c:	681b      	ldr	r3, [r3, #0]
}
 800645e:	4618      	mov	r0, r3
 8006460:	370c      	adds	r7, #12
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b086      	sub	sp, #24
 800646e:	af00      	add	r7, sp, #0
 8006470:	60f8      	str	r0, [r7, #12]
 8006472:	607a      	str	r2, [r7, #4]
 8006474:	603b      	str	r3, [r7, #0]
 8006476:	460b      	mov	r3, r1
 8006478:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800647a:	7afb      	ldrb	r3, [r7, #11]
 800647c:	f003 020f 	and.w	r2, r3, #15
 8006480:	4613      	mov	r3, r2
 8006482:	00db      	lsls	r3, r3, #3
 8006484:	1a9b      	subs	r3, r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	3338      	adds	r3, #56	; 0x38
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	4413      	add	r3, r2
 800648e:	3304      	adds	r3, #4
 8006490:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	683a      	ldr	r2, [r7, #0]
 800649c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	2200      	movs	r2, #0
 80064a2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	2201      	movs	r2, #1
 80064a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064aa:	7afb      	ldrb	r3, [r7, #11]
 80064ac:	f003 030f 	and.w	r3, r3, #15
 80064b0:	b2da      	uxtb	r2, r3
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d102      	bne.n	80064c4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80064c4:	7afb      	ldrb	r3, [r7, #11]
 80064c6:	f003 030f 	and.w	r3, r3, #15
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d109      	bne.n	80064e2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6818      	ldr	r0, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	461a      	mov	r2, r3
 80064da:	6979      	ldr	r1, [r7, #20]
 80064dc:	f003 f952 	bl	8009784 <USB_EP0StartXfer>
 80064e0:	e008      	b.n	80064f4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6818      	ldr	r0, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	461a      	mov	r2, r3
 80064ee:	6979      	ldr	r1, [r7, #20]
 80064f0:	f002 ff04 	bl	80092fc <USB_EPStartXfer>
  }

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b084      	sub	sp, #16
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
 8006506:	460b      	mov	r3, r1
 8006508:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800650a:	78fb      	ldrb	r3, [r7, #3]
 800650c:	f003 020f 	and.w	r2, r3, #15
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	429a      	cmp	r2, r3
 8006516:	d901      	bls.n	800651c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e050      	b.n	80065be <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800651c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006520:	2b00      	cmp	r3, #0
 8006522:	da0f      	bge.n	8006544 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006524:	78fb      	ldrb	r3, [r7, #3]
 8006526:	f003 020f 	and.w	r2, r3, #15
 800652a:	4613      	mov	r3, r2
 800652c:	00db      	lsls	r3, r3, #3
 800652e:	1a9b      	subs	r3, r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	3338      	adds	r3, #56	; 0x38
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	4413      	add	r3, r2
 8006538:	3304      	adds	r3, #4
 800653a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2201      	movs	r2, #1
 8006540:	705a      	strb	r2, [r3, #1]
 8006542:	e00d      	b.n	8006560 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006544:	78fa      	ldrb	r2, [r7, #3]
 8006546:	4613      	mov	r3, r2
 8006548:	00db      	lsls	r3, r3, #3
 800654a:	1a9b      	subs	r3, r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	4413      	add	r3, r2
 8006556:	3304      	adds	r3, #4
 8006558:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2201      	movs	r2, #1
 8006564:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006566:	78fb      	ldrb	r3, [r7, #3]
 8006568:	f003 030f 	and.w	r3, r3, #15
 800656c:	b2da      	uxtb	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006578:	2b01      	cmp	r3, #1
 800657a:	d101      	bne.n	8006580 <HAL_PCD_EP_SetStall+0x82>
 800657c:	2302      	movs	r3, #2
 800657e:	e01e      	b.n	80065be <HAL_PCD_EP_SetStall+0xc0>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68f9      	ldr	r1, [r7, #12]
 800658e:	4618      	mov	r0, r3
 8006590:	f003 faa9 	bl	8009ae6 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006594:	78fb      	ldrb	r3, [r7, #3]
 8006596:	f003 030f 	and.w	r3, r3, #15
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10a      	bne.n	80065b4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6818      	ldr	r0, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	b2d9      	uxtb	r1, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80065ae:	461a      	mov	r2, r3
 80065b0:	f003 fc88 	bl	8009ec4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b084      	sub	sp, #16
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
 80065ce:	460b      	mov	r3, r1
 80065d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80065d2:	78fb      	ldrb	r3, [r7, #3]
 80065d4:	f003 020f 	and.w	r2, r3, #15
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d901      	bls.n	80065e4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e042      	b.n	800666a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80065e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	da0f      	bge.n	800660c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065ec:	78fb      	ldrb	r3, [r7, #3]
 80065ee:	f003 020f 	and.w	r2, r3, #15
 80065f2:	4613      	mov	r3, r2
 80065f4:	00db      	lsls	r3, r3, #3
 80065f6:	1a9b      	subs	r3, r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	3338      	adds	r3, #56	; 0x38
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	4413      	add	r3, r2
 8006600:	3304      	adds	r3, #4
 8006602:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2201      	movs	r2, #1
 8006608:	705a      	strb	r2, [r3, #1]
 800660a:	e00f      	b.n	800662c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800660c:	78fb      	ldrb	r3, [r7, #3]
 800660e:	f003 020f 	and.w	r2, r3, #15
 8006612:	4613      	mov	r3, r2
 8006614:	00db      	lsls	r3, r3, #3
 8006616:	1a9b      	subs	r3, r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	4413      	add	r3, r2
 8006622:	3304      	adds	r3, #4
 8006624:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006632:	78fb      	ldrb	r3, [r7, #3]
 8006634:	f003 030f 	and.w	r3, r3, #15
 8006638:	b2da      	uxtb	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006644:	2b01      	cmp	r3, #1
 8006646:	d101      	bne.n	800664c <HAL_PCD_EP_ClrStall+0x86>
 8006648:	2302      	movs	r3, #2
 800664a:	e00e      	b.n	800666a <HAL_PCD_EP_ClrStall+0xa4>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68f9      	ldr	r1, [r7, #12]
 800665a:	4618      	mov	r0, r3
 800665c:	f003 fab1 	bl	8009bc2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b08a      	sub	sp, #40	; 0x28
 8006676:	af02      	add	r7, sp, #8
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	4613      	mov	r3, r2
 800668a:	00db      	lsls	r3, r3, #3
 800668c:	1a9b      	subs	r3, r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	3338      	adds	r3, #56	; 0x38
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	4413      	add	r3, r2
 8006696:	3304      	adds	r3, #4
 8006698:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	699a      	ldr	r2, [r3, #24]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d901      	bls.n	80066aa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e06c      	b.n	8006784 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	695a      	ldr	r2, [r3, #20]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	69fa      	ldr	r2, [r7, #28]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d902      	bls.n	80066c6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	3303      	adds	r3, #3
 80066ca:	089b      	lsrs	r3, r3, #2
 80066cc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80066ce:	e02b      	b.n	8006728 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	695a      	ldr	r2, [r3, #20]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	69fa      	ldr	r2, [r7, #28]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d902      	bls.n	80066ec <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	3303      	adds	r3, #3
 80066f0:	089b      	lsrs	r3, r3, #2
 80066f2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	68d9      	ldr	r1, [r3, #12]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006704:	b2db      	uxtb	r3, r3
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	4603      	mov	r3, r0
 800670a:	6978      	ldr	r0, [r7, #20]
 800670c:	f003 f98d 	bl	8009a2a <USB_WritePacket>

    ep->xfer_buff  += len;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	68da      	ldr	r2, [r3, #12]
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	441a      	add	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	699a      	ldr	r2, [r3, #24]
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	441a      	add	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	4413      	add	r3, r2
 8006730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	b29b      	uxth	r3, r3
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	429a      	cmp	r2, r3
 800673c:	d809      	bhi.n	8006752 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	699a      	ldr	r2, [r3, #24]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006746:	429a      	cmp	r2, r3
 8006748:	d203      	bcs.n	8006752 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1be      	bne.n	80066d0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	695a      	ldr	r2, [r3, #20]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	429a      	cmp	r2, r3
 800675c:	d811      	bhi.n	8006782 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	f003 030f 	and.w	r3, r3, #15
 8006764:	2201      	movs	r2, #1
 8006766:	fa02 f303 	lsl.w	r3, r2, r3
 800676a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006772:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	43db      	mvns	r3, r3
 8006778:	6939      	ldr	r1, [r7, #16]
 800677a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800677e:	4013      	ands	r3, r2
 8006780:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3720      	adds	r7, #32
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	333c      	adds	r3, #60	; 0x3c
 80067a4:	3304      	adds	r3, #4
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	f040 80a0 	bne.w	8006904 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	f003 0308 	and.w	r3, r3, #8
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d015      	beq.n	80067fa <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	4a72      	ldr	r2, [pc, #456]	; (800699c <PCD_EP_OutXfrComplete_int+0x210>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	f240 80dd 	bls.w	8006992 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f000 80d7 	beq.w	8006992 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	015a      	lsls	r2, r3, #5
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	4413      	add	r3, r2
 80067ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f0:	461a      	mov	r2, r3
 80067f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067f6:	6093      	str	r3, [r2, #8]
 80067f8:	e0cb      	b.n	8006992 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	f003 0320 	and.w	r3, r3, #32
 8006800:	2b00      	cmp	r3, #0
 8006802:	d009      	beq.n	8006818 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	015a      	lsls	r2, r3, #5
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	4413      	add	r3, r2
 800680c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006810:	461a      	mov	r2, r3
 8006812:	2320      	movs	r3, #32
 8006814:	6093      	str	r3, [r2, #8]
 8006816:	e0bc      	b.n	8006992 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800681e:	2b00      	cmp	r3, #0
 8006820:	f040 80b7 	bne.w	8006992 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	4a5d      	ldr	r2, [pc, #372]	; (800699c <PCD_EP_OutXfrComplete_int+0x210>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d90f      	bls.n	800684c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00a      	beq.n	800684c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	4413      	add	r3, r2
 800683e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006842:	461a      	mov	r2, r3
 8006844:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006848:	6093      	str	r3, [r2, #8]
 800684a:	e0a2      	b.n	8006992 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800684c:	6879      	ldr	r1, [r7, #4]
 800684e:	683a      	ldr	r2, [r7, #0]
 8006850:	4613      	mov	r3, r2
 8006852:	00db      	lsls	r3, r3, #3
 8006854:	1a9b      	subs	r3, r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	440b      	add	r3, r1
 800685a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800685e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	0159      	lsls	r1, r3, #5
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	440b      	add	r3, r1
 8006868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006872:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	4613      	mov	r3, r2
 800687a:	00db      	lsls	r3, r3, #3
 800687c:	1a9b      	subs	r3, r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4403      	add	r3, r0
 8006882:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006886:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006888:	6879      	ldr	r1, [r7, #4]
 800688a:	683a      	ldr	r2, [r7, #0]
 800688c:	4613      	mov	r3, r2
 800688e:	00db      	lsls	r3, r3, #3
 8006890:	1a9b      	subs	r3, r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	440b      	add	r3, r1
 8006896:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800689a:	6819      	ldr	r1, [r3, #0]
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	4613      	mov	r3, r2
 80068a2:	00db      	lsls	r3, r3, #3
 80068a4:	1a9b      	subs	r3, r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4403      	add	r3, r0
 80068aa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4419      	add	r1, r3
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	683a      	ldr	r2, [r7, #0]
 80068b6:	4613      	mov	r3, r2
 80068b8:	00db      	lsls	r3, r3, #3
 80068ba:	1a9b      	subs	r3, r3, r2
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4403      	add	r3, r0
 80068c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80068c4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d114      	bne.n	80068f6 <PCD_EP_OutXfrComplete_int+0x16a>
 80068cc:	6879      	ldr	r1, [r7, #4]
 80068ce:	683a      	ldr	r2, [r7, #0]
 80068d0:	4613      	mov	r3, r2
 80068d2:	00db      	lsls	r3, r3, #3
 80068d4:	1a9b      	subs	r3, r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	440b      	add	r3, r1
 80068da:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d108      	bne.n	80068f6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6818      	ldr	r0, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80068ee:	461a      	mov	r2, r3
 80068f0:	2101      	movs	r1, #1
 80068f2:	f003 fae7 	bl	8009ec4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	4619      	mov	r1, r3
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f005 f993 	bl	800bc28 <HAL_PCD_DataOutStageCallback>
 8006902:	e046      	b.n	8006992 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	4a26      	ldr	r2, [pc, #152]	; (80069a0 <PCD_EP_OutXfrComplete_int+0x214>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d124      	bne.n	8006956 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00a      	beq.n	800692c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	4413      	add	r3, r2
 800691e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006922:	461a      	mov	r2, r3
 8006924:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006928:	6093      	str	r3, [r2, #8]
 800692a:	e032      	b.n	8006992 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f003 0320 	and.w	r3, r3, #32
 8006932:	2b00      	cmp	r3, #0
 8006934:	d008      	beq.n	8006948 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	015a      	lsls	r2, r3, #5
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	4413      	add	r3, r2
 800693e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006942:	461a      	mov	r2, r3
 8006944:	2320      	movs	r3, #32
 8006946:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	b2db      	uxtb	r3, r3
 800694c:	4619      	mov	r1, r3
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f005 f96a 	bl	800bc28 <HAL_PCD_DataOutStageCallback>
 8006954:	e01d      	b.n	8006992 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d114      	bne.n	8006986 <PCD_EP_OutXfrComplete_int+0x1fa>
 800695c:	6879      	ldr	r1, [r7, #4]
 800695e:	683a      	ldr	r2, [r7, #0]
 8006960:	4613      	mov	r3, r2
 8006962:	00db      	lsls	r3, r3, #3
 8006964:	1a9b      	subs	r3, r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	440b      	add	r3, r1
 800696a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d108      	bne.n	8006986 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6818      	ldr	r0, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800697e:	461a      	mov	r2, r3
 8006980:	2100      	movs	r1, #0
 8006982:	f003 fa9f 	bl	8009ec4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	b2db      	uxtb	r3, r3
 800698a:	4619      	mov	r1, r3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f005 f94b 	bl	800bc28 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3718      	adds	r7, #24
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	4f54300a 	.word	0x4f54300a
 80069a0:	4f54310a 	.word	0x4f54310a

080069a4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b086      	sub	sp, #24
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	333c      	adds	r3, #60	; 0x3c
 80069bc:	3304      	adds	r3, #4
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	015a      	lsls	r2, r3, #5
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	4413      	add	r3, r2
 80069ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	4a15      	ldr	r2, [pc, #84]	; (8006a2c <PCD_EP_OutSetupPacket_int+0x88>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d90e      	bls.n	80069f8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d009      	beq.n	80069f8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f0:	461a      	mov	r2, r3
 80069f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069f6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f005 f903 	bl	800bc04 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	4a0a      	ldr	r2, [pc, #40]	; (8006a2c <PCD_EP_OutSetupPacket_int+0x88>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d90c      	bls.n	8006a20 <PCD_EP_OutSetupPacket_int+0x7c>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d108      	bne.n	8006a20 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6818      	ldr	r0, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006a18:	461a      	mov	r2, r3
 8006a1a:	2101      	movs	r1, #1
 8006a1c:	f003 fa52 	bl	8009ec4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3718      	adds	r7, #24
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	4f54300a 	.word	0x4f54300a

08006a30 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	460b      	mov	r3, r1
 8006a3a:	70fb      	strb	r3, [r7, #3]
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a46:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006a48:	78fb      	ldrb	r3, [r7, #3]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d107      	bne.n	8006a5e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006a4e:	883b      	ldrh	r3, [r7, #0]
 8006a50:	0419      	lsls	r1, r3, #16
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	629a      	str	r2, [r3, #40]	; 0x28
 8006a5c:	e028      	b.n	8006ab0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a64:	0c1b      	lsrs	r3, r3, #16
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	4413      	add	r3, r2
 8006a6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	73fb      	strb	r3, [r7, #15]
 8006a70:	e00d      	b.n	8006a8e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	7bfb      	ldrb	r3, [r7, #15]
 8006a78:	3340      	adds	r3, #64	; 0x40
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4413      	add	r3, r2
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	0c1b      	lsrs	r3, r3, #16
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	4413      	add	r3, r2
 8006a86:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006a88:	7bfb      	ldrb	r3, [r7, #15]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	73fb      	strb	r3, [r7, #15]
 8006a8e:	7bfa      	ldrb	r2, [r7, #15]
 8006a90:	78fb      	ldrb	r3, [r7, #3]
 8006a92:	3b01      	subs	r3, #1
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d3ec      	bcc.n	8006a72 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006a98:	883b      	ldrh	r3, [r7, #0]
 8006a9a:	0418      	lsls	r0, r3, #16
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6819      	ldr	r1, [r3, #0]
 8006aa0:	78fb      	ldrb	r3, [r7, #3]
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	4302      	orrs	r2, r0
 8006aa8:	3340      	adds	r3, #64	; 0x40
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	440b      	add	r3, r1
 8006aae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3714      	adds	r7, #20
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b083      	sub	sp, #12
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	887a      	ldrh	r2, [r7, #2]
 8006ad0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	460b      	mov	r3, r1
 8006aea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006aec:	bf00      	nop
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d101      	bne.n	8006b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e25b      	b.n	8006fc2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d075      	beq.n	8006c02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b16:	4ba3      	ldr	r3, [pc, #652]	; (8006da4 <HAL_RCC_OscConfig+0x2ac>)
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f003 030c 	and.w	r3, r3, #12
 8006b1e:	2b04      	cmp	r3, #4
 8006b20:	d00c      	beq.n	8006b3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b22:	4ba0      	ldr	r3, [pc, #640]	; (8006da4 <HAL_RCC_OscConfig+0x2ac>)
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b2a:	2b08      	cmp	r3, #8
 8006b2c:	d112      	bne.n	8006b54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b2e:	4b9d      	ldr	r3, [pc, #628]	; (8006da4 <HAL_RCC_OscConfig+0x2ac>)
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b3a:	d10b      	bne.n	8006b54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b3c:	4b99      	ldr	r3, [pc, #612]	; (8006da4 <HAL_RCC_OscConfig+0x2ac>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d05b      	beq.n	8006c00 <HAL_RCC_OscConfig+0x108>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d157      	bne.n	8006c00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e236      	b.n	8006fc2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b5c:	d106      	bne.n	8006b6c <HAL_RCC_OscConfig+0x74>
 8006b5e:	4b91      	ldr	r3, [pc, #580]	; (8006da4 <HAL_RCC_OscConfig+0x2ac>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a90      	ldr	r2, [pc, #576]	; (8006da4 <HAL_RCC_OscConfig+0x2ac>)
 8006b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b68:	6013      	str	r3, [r2, #0]
 8006b6a:	e01d      	b.n	8006ba8 <HAL_RCC_OscConfig+0xb0>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b74:	d10c      	bne.n	8006b90 <HAL_RCC_OscConfig+0x98>
 8006b76:	4b8b      	ldr	r3, [pc, #556]	; (8006da4 <HAL_RCC_OscConfig+0x2ac>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a8a      	ldr	r2, [pc, #552]	; (8006da4 <HAL_RCC_OscConfig+0x2ac>)
 8006b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b80:	6013      	str	r3, [r2, #0]
 8006b82:	4b88      	ldr	r3, [pc, #544]	; (8006da4 <HAL_RCC_OscConfig+0x2ac>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a87      	ldr	r2, [pc, #540]	; (8006da4 <HAL_RCC_OscConfig+0x2ac>)
 8006b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b8c:	6013      	str	r3, [r2, #0]
 8006b8e:	e00b      	b.n	8006ba8 <HAL_RCC_OscConfig+0xb0>
 8006b90:	4b84      	ldr	r3, [pc, #528]	; (8006da4 <HAL_RCC_OscConfig+0x2ac>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a83      	ldr	r2, [pc, #524]	; (8006da4 <HAL_RCC_OscConfig+0x2ac>)
 8006b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b9a:	6013      	str	r3, [r2, #0]
 8006b9c:	4b81      	ldr	r3, [pc, #516]	; (8006da4 <HAL_RCC_OscConfig+0x2ac>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a80      	ldr	r2, [pc, #512]	; (8006da4 <HAL_RCC_OscConfig+0x2ac>)
 8006ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d013      	beq.n	8006bd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bb0:	f7fb fbce 	bl	8002350 <HAL_GetTick>
 8006bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bb6:	e008      	b.n	8006bca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bb8:	f7fb fbca 	bl	8002350 <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	2b64      	cmp	r3, #100	; 0x64
 8006bc4:	d901      	bls.n	8006bca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e1fb      	b.n	8006fc2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bca:	4b76      	ldr	r3, [pc, #472]	; (8006da4 <HAL_RCC_OscConfig+0x2ac>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d0f0      	beq.n	8006bb8 <HAL_RCC_OscConfig+0xc0>
 8006bd6:	e014      	b.n	8006c02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bd8:	f7fb fbba 	bl	8002350 <HAL_GetTick>
 8006bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bde:	e008      	b.n	8006bf2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006be0:	f7fb fbb6 	bl	8002350 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	2b64      	cmp	r3, #100	; 0x64
 8006bec:	d901      	bls.n	8006bf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e1e7      	b.n	8006fc2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bf2:	4b6c      	ldr	r3, [pc, #432]	; (8006da4 <HAL_RCC_OscConfig+0x2ac>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1f0      	bne.n	8006be0 <HAL_RCC_OscConfig+0xe8>
 8006bfe:	e000      	b.n	8006c02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d063      	beq.n	8006cd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c0e:	4b65      	ldr	r3, [pc, #404]	; (8006da4 <HAL_RCC_OscConfig+0x2ac>)
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f003 030c 	and.w	r3, r3, #12
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00b      	beq.n	8006c32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c1a:	4b62      	ldr	r3, [pc, #392]	; (8006da4 <HAL_RCC_OscConfig+0x2ac>)
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c22:	2b08      	cmp	r3, #8
 8006c24:	d11c      	bne.n	8006c60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c26:	4b5f      	ldr	r3, [pc, #380]	; (8006da4 <HAL_RCC_OscConfig+0x2ac>)
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d116      	bne.n	8006c60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c32:	4b5c      	ldr	r3, [pc, #368]	; (8006da4 <HAL_RCC_OscConfig+0x2ac>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d005      	beq.n	8006c4a <HAL_RCC_OscConfig+0x152>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d001      	beq.n	8006c4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e1bb      	b.n	8006fc2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c4a:	4b56      	ldr	r3, [pc, #344]	; (8006da4 <HAL_RCC_OscConfig+0x2ac>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	00db      	lsls	r3, r3, #3
 8006c58:	4952      	ldr	r1, [pc, #328]	; (8006da4 <HAL_RCC_OscConfig+0x2ac>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c5e:	e03a      	b.n	8006cd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d020      	beq.n	8006caa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c68:	4b4f      	ldr	r3, [pc, #316]	; (8006da8 <HAL_RCC_OscConfig+0x2b0>)
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c6e:	f7fb fb6f 	bl	8002350 <HAL_GetTick>
 8006c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c74:	e008      	b.n	8006c88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c76:	f7fb fb6b 	bl	8002350 <HAL_GetTick>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d901      	bls.n	8006c88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c84:	2303      	movs	r3, #3
 8006c86:	e19c      	b.n	8006fc2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c88:	4b46      	ldr	r3, [pc, #280]	; (8006da4 <HAL_RCC_OscConfig+0x2ac>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0302 	and.w	r3, r3, #2
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d0f0      	beq.n	8006c76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c94:	4b43      	ldr	r3, [pc, #268]	; (8006da4 <HAL_RCC_OscConfig+0x2ac>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	00db      	lsls	r3, r3, #3
 8006ca2:	4940      	ldr	r1, [pc, #256]	; (8006da4 <HAL_RCC_OscConfig+0x2ac>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	600b      	str	r3, [r1, #0]
 8006ca8:	e015      	b.n	8006cd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006caa:	4b3f      	ldr	r3, [pc, #252]	; (8006da8 <HAL_RCC_OscConfig+0x2b0>)
 8006cac:	2200      	movs	r2, #0
 8006cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb0:	f7fb fb4e 	bl	8002350 <HAL_GetTick>
 8006cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cb6:	e008      	b.n	8006cca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cb8:	f7fb fb4a 	bl	8002350 <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d901      	bls.n	8006cca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e17b      	b.n	8006fc2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cca:	4b36      	ldr	r3, [pc, #216]	; (8006da4 <HAL_RCC_OscConfig+0x2ac>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0302 	and.w	r3, r3, #2
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1f0      	bne.n	8006cb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0308 	and.w	r3, r3, #8
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d030      	beq.n	8006d44 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d016      	beq.n	8006d18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cea:	4b30      	ldr	r3, [pc, #192]	; (8006dac <HAL_RCC_OscConfig+0x2b4>)
 8006cec:	2201      	movs	r2, #1
 8006cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cf0:	f7fb fb2e 	bl	8002350 <HAL_GetTick>
 8006cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cf6:	e008      	b.n	8006d0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cf8:	f7fb fb2a 	bl	8002350 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d901      	bls.n	8006d0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e15b      	b.n	8006fc2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d0a:	4b26      	ldr	r3, [pc, #152]	; (8006da4 <HAL_RCC_OscConfig+0x2ac>)
 8006d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d0e:	f003 0302 	and.w	r3, r3, #2
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d0f0      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x200>
 8006d16:	e015      	b.n	8006d44 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d18:	4b24      	ldr	r3, [pc, #144]	; (8006dac <HAL_RCC_OscConfig+0x2b4>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d1e:	f7fb fb17 	bl	8002350 <HAL_GetTick>
 8006d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d24:	e008      	b.n	8006d38 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d26:	f7fb fb13 	bl	8002350 <HAL_GetTick>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d901      	bls.n	8006d38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e144      	b.n	8006fc2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d38:	4b1a      	ldr	r3, [pc, #104]	; (8006da4 <HAL_RCC_OscConfig+0x2ac>)
 8006d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d3c:	f003 0302 	and.w	r3, r3, #2
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1f0      	bne.n	8006d26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0304 	and.w	r3, r3, #4
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f000 80a0 	beq.w	8006e92 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d52:	2300      	movs	r3, #0
 8006d54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d56:	4b13      	ldr	r3, [pc, #76]	; (8006da4 <HAL_RCC_OscConfig+0x2ac>)
 8006d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10f      	bne.n	8006d82 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d62:	2300      	movs	r3, #0
 8006d64:	60bb      	str	r3, [r7, #8]
 8006d66:	4b0f      	ldr	r3, [pc, #60]	; (8006da4 <HAL_RCC_OscConfig+0x2ac>)
 8006d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6a:	4a0e      	ldr	r2, [pc, #56]	; (8006da4 <HAL_RCC_OscConfig+0x2ac>)
 8006d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d70:	6413      	str	r3, [r2, #64]	; 0x40
 8006d72:	4b0c      	ldr	r3, [pc, #48]	; (8006da4 <HAL_RCC_OscConfig+0x2ac>)
 8006d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d7a:	60bb      	str	r3, [r7, #8]
 8006d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d82:	4b0b      	ldr	r3, [pc, #44]	; (8006db0 <HAL_RCC_OscConfig+0x2b8>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d121      	bne.n	8006dd2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d8e:	4b08      	ldr	r3, [pc, #32]	; (8006db0 <HAL_RCC_OscConfig+0x2b8>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a07      	ldr	r2, [pc, #28]	; (8006db0 <HAL_RCC_OscConfig+0x2b8>)
 8006d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d9a:	f7fb fad9 	bl	8002350 <HAL_GetTick>
 8006d9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006da0:	e011      	b.n	8006dc6 <HAL_RCC_OscConfig+0x2ce>
 8006da2:	bf00      	nop
 8006da4:	40023800 	.word	0x40023800
 8006da8:	42470000 	.word	0x42470000
 8006dac:	42470e80 	.word	0x42470e80
 8006db0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006db4:	f7fb facc 	bl	8002350 <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d901      	bls.n	8006dc6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e0fd      	b.n	8006fc2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dc6:	4b81      	ldr	r3, [pc, #516]	; (8006fcc <HAL_RCC_OscConfig+0x4d4>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d0f0      	beq.n	8006db4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d106      	bne.n	8006de8 <HAL_RCC_OscConfig+0x2f0>
 8006dda:	4b7d      	ldr	r3, [pc, #500]	; (8006fd0 <HAL_RCC_OscConfig+0x4d8>)
 8006ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dde:	4a7c      	ldr	r2, [pc, #496]	; (8006fd0 <HAL_RCC_OscConfig+0x4d8>)
 8006de0:	f043 0301 	orr.w	r3, r3, #1
 8006de4:	6713      	str	r3, [r2, #112]	; 0x70
 8006de6:	e01c      	b.n	8006e22 <HAL_RCC_OscConfig+0x32a>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	2b05      	cmp	r3, #5
 8006dee:	d10c      	bne.n	8006e0a <HAL_RCC_OscConfig+0x312>
 8006df0:	4b77      	ldr	r3, [pc, #476]	; (8006fd0 <HAL_RCC_OscConfig+0x4d8>)
 8006df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df4:	4a76      	ldr	r2, [pc, #472]	; (8006fd0 <HAL_RCC_OscConfig+0x4d8>)
 8006df6:	f043 0304 	orr.w	r3, r3, #4
 8006dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8006dfc:	4b74      	ldr	r3, [pc, #464]	; (8006fd0 <HAL_RCC_OscConfig+0x4d8>)
 8006dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e00:	4a73      	ldr	r2, [pc, #460]	; (8006fd0 <HAL_RCC_OscConfig+0x4d8>)
 8006e02:	f043 0301 	orr.w	r3, r3, #1
 8006e06:	6713      	str	r3, [r2, #112]	; 0x70
 8006e08:	e00b      	b.n	8006e22 <HAL_RCC_OscConfig+0x32a>
 8006e0a:	4b71      	ldr	r3, [pc, #452]	; (8006fd0 <HAL_RCC_OscConfig+0x4d8>)
 8006e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e0e:	4a70      	ldr	r2, [pc, #448]	; (8006fd0 <HAL_RCC_OscConfig+0x4d8>)
 8006e10:	f023 0301 	bic.w	r3, r3, #1
 8006e14:	6713      	str	r3, [r2, #112]	; 0x70
 8006e16:	4b6e      	ldr	r3, [pc, #440]	; (8006fd0 <HAL_RCC_OscConfig+0x4d8>)
 8006e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e1a:	4a6d      	ldr	r2, [pc, #436]	; (8006fd0 <HAL_RCC_OscConfig+0x4d8>)
 8006e1c:	f023 0304 	bic.w	r3, r3, #4
 8006e20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d015      	beq.n	8006e56 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e2a:	f7fb fa91 	bl	8002350 <HAL_GetTick>
 8006e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e30:	e00a      	b.n	8006e48 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e32:	f7fb fa8d 	bl	8002350 <HAL_GetTick>
 8006e36:	4602      	mov	r2, r0
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d901      	bls.n	8006e48 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e0bc      	b.n	8006fc2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e48:	4b61      	ldr	r3, [pc, #388]	; (8006fd0 <HAL_RCC_OscConfig+0x4d8>)
 8006e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4c:	f003 0302 	and.w	r3, r3, #2
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d0ee      	beq.n	8006e32 <HAL_RCC_OscConfig+0x33a>
 8006e54:	e014      	b.n	8006e80 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e56:	f7fb fa7b 	bl	8002350 <HAL_GetTick>
 8006e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e5c:	e00a      	b.n	8006e74 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e5e:	f7fb fa77 	bl	8002350 <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d901      	bls.n	8006e74 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006e70:	2303      	movs	r3, #3
 8006e72:	e0a6      	b.n	8006fc2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e74:	4b56      	ldr	r3, [pc, #344]	; (8006fd0 <HAL_RCC_OscConfig+0x4d8>)
 8006e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e78:	f003 0302 	and.w	r3, r3, #2
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d1ee      	bne.n	8006e5e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e80:	7dfb      	ldrb	r3, [r7, #23]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d105      	bne.n	8006e92 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e86:	4b52      	ldr	r3, [pc, #328]	; (8006fd0 <HAL_RCC_OscConfig+0x4d8>)
 8006e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8a:	4a51      	ldr	r2, [pc, #324]	; (8006fd0 <HAL_RCC_OscConfig+0x4d8>)
 8006e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	699b      	ldr	r3, [r3, #24]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f000 8092 	beq.w	8006fc0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e9c:	4b4c      	ldr	r3, [pc, #304]	; (8006fd0 <HAL_RCC_OscConfig+0x4d8>)
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f003 030c 	and.w	r3, r3, #12
 8006ea4:	2b08      	cmp	r3, #8
 8006ea6:	d05c      	beq.n	8006f62 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d141      	bne.n	8006f34 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eb0:	4b48      	ldr	r3, [pc, #288]	; (8006fd4 <HAL_RCC_OscConfig+0x4dc>)
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eb6:	f7fb fa4b 	bl	8002350 <HAL_GetTick>
 8006eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ebc:	e008      	b.n	8006ed0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ebe:	f7fb fa47 	bl	8002350 <HAL_GetTick>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d901      	bls.n	8006ed0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e078      	b.n	8006fc2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ed0:	4b3f      	ldr	r3, [pc, #252]	; (8006fd0 <HAL_RCC_OscConfig+0x4d8>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1f0      	bne.n	8006ebe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	69da      	ldr	r2, [r3, #28]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a1b      	ldr	r3, [r3, #32]
 8006ee4:	431a      	orrs	r2, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eea:	019b      	lsls	r3, r3, #6
 8006eec:	431a      	orrs	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef2:	085b      	lsrs	r3, r3, #1
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	041b      	lsls	r3, r3, #16
 8006ef8:	431a      	orrs	r2, r3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efe:	061b      	lsls	r3, r3, #24
 8006f00:	4933      	ldr	r1, [pc, #204]	; (8006fd0 <HAL_RCC_OscConfig+0x4d8>)
 8006f02:	4313      	orrs	r3, r2
 8006f04:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f06:	4b33      	ldr	r3, [pc, #204]	; (8006fd4 <HAL_RCC_OscConfig+0x4dc>)
 8006f08:	2201      	movs	r2, #1
 8006f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f0c:	f7fb fa20 	bl	8002350 <HAL_GetTick>
 8006f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f12:	e008      	b.n	8006f26 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f14:	f7fb fa1c 	bl	8002350 <HAL_GetTick>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d901      	bls.n	8006f26 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e04d      	b.n	8006fc2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f26:	4b2a      	ldr	r3, [pc, #168]	; (8006fd0 <HAL_RCC_OscConfig+0x4d8>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d0f0      	beq.n	8006f14 <HAL_RCC_OscConfig+0x41c>
 8006f32:	e045      	b.n	8006fc0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f34:	4b27      	ldr	r3, [pc, #156]	; (8006fd4 <HAL_RCC_OscConfig+0x4dc>)
 8006f36:	2200      	movs	r2, #0
 8006f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f3a:	f7fb fa09 	bl	8002350 <HAL_GetTick>
 8006f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f40:	e008      	b.n	8006f54 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f42:	f7fb fa05 	bl	8002350 <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	d901      	bls.n	8006f54 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e036      	b.n	8006fc2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f54:	4b1e      	ldr	r3, [pc, #120]	; (8006fd0 <HAL_RCC_OscConfig+0x4d8>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1f0      	bne.n	8006f42 <HAL_RCC_OscConfig+0x44a>
 8006f60:	e02e      	b.n	8006fc0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	699b      	ldr	r3, [r3, #24]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d101      	bne.n	8006f6e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e029      	b.n	8006fc2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f6e:	4b18      	ldr	r3, [pc, #96]	; (8006fd0 <HAL_RCC_OscConfig+0x4d8>)
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	69db      	ldr	r3, [r3, #28]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d11c      	bne.n	8006fbc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d115      	bne.n	8006fbc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f96:	4013      	ands	r3, r2
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d10d      	bne.n	8006fbc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d106      	bne.n	8006fbc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d001      	beq.n	8006fc0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e000      	b.n	8006fc2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3718      	adds	r7, #24
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	40007000 	.word	0x40007000
 8006fd0:	40023800 	.word	0x40023800
 8006fd4:	42470060 	.word	0x42470060

08006fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d101      	bne.n	8006fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e0cc      	b.n	8007186 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fec:	4b68      	ldr	r3, [pc, #416]	; (8007190 <HAL_RCC_ClockConfig+0x1b8>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 030f 	and.w	r3, r3, #15
 8006ff4:	683a      	ldr	r2, [r7, #0]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d90c      	bls.n	8007014 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ffa:	4b65      	ldr	r3, [pc, #404]	; (8007190 <HAL_RCC_ClockConfig+0x1b8>)
 8006ffc:	683a      	ldr	r2, [r7, #0]
 8006ffe:	b2d2      	uxtb	r2, r2
 8007000:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007002:	4b63      	ldr	r3, [pc, #396]	; (8007190 <HAL_RCC_ClockConfig+0x1b8>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 030f 	and.w	r3, r3, #15
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	429a      	cmp	r2, r3
 800700e:	d001      	beq.n	8007014 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e0b8      	b.n	8007186 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0302 	and.w	r3, r3, #2
 800701c:	2b00      	cmp	r3, #0
 800701e:	d020      	beq.n	8007062 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0304 	and.w	r3, r3, #4
 8007028:	2b00      	cmp	r3, #0
 800702a:	d005      	beq.n	8007038 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800702c:	4b59      	ldr	r3, [pc, #356]	; (8007194 <HAL_RCC_ClockConfig+0x1bc>)
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	4a58      	ldr	r2, [pc, #352]	; (8007194 <HAL_RCC_ClockConfig+0x1bc>)
 8007032:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007036:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0308 	and.w	r3, r3, #8
 8007040:	2b00      	cmp	r3, #0
 8007042:	d005      	beq.n	8007050 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007044:	4b53      	ldr	r3, [pc, #332]	; (8007194 <HAL_RCC_ClockConfig+0x1bc>)
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	4a52      	ldr	r2, [pc, #328]	; (8007194 <HAL_RCC_ClockConfig+0x1bc>)
 800704a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800704e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007050:	4b50      	ldr	r3, [pc, #320]	; (8007194 <HAL_RCC_ClockConfig+0x1bc>)
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	494d      	ldr	r1, [pc, #308]	; (8007194 <HAL_RCC_ClockConfig+0x1bc>)
 800705e:	4313      	orrs	r3, r2
 8007060:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0301 	and.w	r3, r3, #1
 800706a:	2b00      	cmp	r3, #0
 800706c:	d044      	beq.n	80070f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	2b01      	cmp	r3, #1
 8007074:	d107      	bne.n	8007086 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007076:	4b47      	ldr	r3, [pc, #284]	; (8007194 <HAL_RCC_ClockConfig+0x1bc>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d119      	bne.n	80070b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e07f      	b.n	8007186 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	2b02      	cmp	r3, #2
 800708c:	d003      	beq.n	8007096 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007092:	2b03      	cmp	r3, #3
 8007094:	d107      	bne.n	80070a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007096:	4b3f      	ldr	r3, [pc, #252]	; (8007194 <HAL_RCC_ClockConfig+0x1bc>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d109      	bne.n	80070b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e06f      	b.n	8007186 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070a6:	4b3b      	ldr	r3, [pc, #236]	; (8007194 <HAL_RCC_ClockConfig+0x1bc>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0302 	and.w	r3, r3, #2
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d101      	bne.n	80070b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e067      	b.n	8007186 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070b6:	4b37      	ldr	r3, [pc, #220]	; (8007194 <HAL_RCC_ClockConfig+0x1bc>)
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f023 0203 	bic.w	r2, r3, #3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	4934      	ldr	r1, [pc, #208]	; (8007194 <HAL_RCC_ClockConfig+0x1bc>)
 80070c4:	4313      	orrs	r3, r2
 80070c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070c8:	f7fb f942 	bl	8002350 <HAL_GetTick>
 80070cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070ce:	e00a      	b.n	80070e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070d0:	f7fb f93e 	bl	8002350 <HAL_GetTick>
 80070d4:	4602      	mov	r2, r0
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	f241 3288 	movw	r2, #5000	; 0x1388
 80070de:	4293      	cmp	r3, r2
 80070e0:	d901      	bls.n	80070e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e04f      	b.n	8007186 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070e6:	4b2b      	ldr	r3, [pc, #172]	; (8007194 <HAL_RCC_ClockConfig+0x1bc>)
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f003 020c 	and.w	r2, r3, #12
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d1eb      	bne.n	80070d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070f8:	4b25      	ldr	r3, [pc, #148]	; (8007190 <HAL_RCC_ClockConfig+0x1b8>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 030f 	and.w	r3, r3, #15
 8007100:	683a      	ldr	r2, [r7, #0]
 8007102:	429a      	cmp	r2, r3
 8007104:	d20c      	bcs.n	8007120 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007106:	4b22      	ldr	r3, [pc, #136]	; (8007190 <HAL_RCC_ClockConfig+0x1b8>)
 8007108:	683a      	ldr	r2, [r7, #0]
 800710a:	b2d2      	uxtb	r2, r2
 800710c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800710e:	4b20      	ldr	r3, [pc, #128]	; (8007190 <HAL_RCC_ClockConfig+0x1b8>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 030f 	and.w	r3, r3, #15
 8007116:	683a      	ldr	r2, [r7, #0]
 8007118:	429a      	cmp	r2, r3
 800711a:	d001      	beq.n	8007120 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e032      	b.n	8007186 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 0304 	and.w	r3, r3, #4
 8007128:	2b00      	cmp	r3, #0
 800712a:	d008      	beq.n	800713e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800712c:	4b19      	ldr	r3, [pc, #100]	; (8007194 <HAL_RCC_ClockConfig+0x1bc>)
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	4916      	ldr	r1, [pc, #88]	; (8007194 <HAL_RCC_ClockConfig+0x1bc>)
 800713a:	4313      	orrs	r3, r2
 800713c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0308 	and.w	r3, r3, #8
 8007146:	2b00      	cmp	r3, #0
 8007148:	d009      	beq.n	800715e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800714a:	4b12      	ldr	r3, [pc, #72]	; (8007194 <HAL_RCC_ClockConfig+0x1bc>)
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	00db      	lsls	r3, r3, #3
 8007158:	490e      	ldr	r1, [pc, #56]	; (8007194 <HAL_RCC_ClockConfig+0x1bc>)
 800715a:	4313      	orrs	r3, r2
 800715c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800715e:	f000 f821 	bl	80071a4 <HAL_RCC_GetSysClockFreq>
 8007162:	4601      	mov	r1, r0
 8007164:	4b0b      	ldr	r3, [pc, #44]	; (8007194 <HAL_RCC_ClockConfig+0x1bc>)
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	091b      	lsrs	r3, r3, #4
 800716a:	f003 030f 	and.w	r3, r3, #15
 800716e:	4a0a      	ldr	r2, [pc, #40]	; (8007198 <HAL_RCC_ClockConfig+0x1c0>)
 8007170:	5cd3      	ldrb	r3, [r2, r3]
 8007172:	fa21 f303 	lsr.w	r3, r1, r3
 8007176:	4a09      	ldr	r2, [pc, #36]	; (800719c <HAL_RCC_ClockConfig+0x1c4>)
 8007178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800717a:	4b09      	ldr	r3, [pc, #36]	; (80071a0 <HAL_RCC_ClockConfig+0x1c8>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4618      	mov	r0, r3
 8007180:	f7fb f8a2 	bl	80022c8 <HAL_InitTick>

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	40023c00 	.word	0x40023c00
 8007194:	40023800 	.word	0x40023800
 8007198:	0800ca74 	.word	0x0800ca74
 800719c:	20000008 	.word	0x20000008
 80071a0:	2000000c 	.word	0x2000000c

080071a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80071aa:	2300      	movs	r3, #0
 80071ac:	607b      	str	r3, [r7, #4]
 80071ae:	2300      	movs	r3, #0
 80071b0:	60fb      	str	r3, [r7, #12]
 80071b2:	2300      	movs	r3, #0
 80071b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80071b6:	2300      	movs	r3, #0
 80071b8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071ba:	4b63      	ldr	r3, [pc, #396]	; (8007348 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	f003 030c 	and.w	r3, r3, #12
 80071c2:	2b04      	cmp	r3, #4
 80071c4:	d007      	beq.n	80071d6 <HAL_RCC_GetSysClockFreq+0x32>
 80071c6:	2b08      	cmp	r3, #8
 80071c8:	d008      	beq.n	80071dc <HAL_RCC_GetSysClockFreq+0x38>
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f040 80b4 	bne.w	8007338 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80071d0:	4b5e      	ldr	r3, [pc, #376]	; (800734c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80071d2:	60bb      	str	r3, [r7, #8]
       break;
 80071d4:	e0b3      	b.n	800733e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071d6:	4b5d      	ldr	r3, [pc, #372]	; (800734c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80071d8:	60bb      	str	r3, [r7, #8]
      break;
 80071da:	e0b0      	b.n	800733e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071dc:	4b5a      	ldr	r3, [pc, #360]	; (8007348 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80071e6:	4b58      	ldr	r3, [pc, #352]	; (8007348 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d04a      	beq.n	8007288 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071f2:	4b55      	ldr	r3, [pc, #340]	; (8007348 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	099b      	lsrs	r3, r3, #6
 80071f8:	f04f 0400 	mov.w	r4, #0
 80071fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007200:	f04f 0200 	mov.w	r2, #0
 8007204:	ea03 0501 	and.w	r5, r3, r1
 8007208:	ea04 0602 	and.w	r6, r4, r2
 800720c:	4629      	mov	r1, r5
 800720e:	4632      	mov	r2, r6
 8007210:	f04f 0300 	mov.w	r3, #0
 8007214:	f04f 0400 	mov.w	r4, #0
 8007218:	0154      	lsls	r4, r2, #5
 800721a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800721e:	014b      	lsls	r3, r1, #5
 8007220:	4619      	mov	r1, r3
 8007222:	4622      	mov	r2, r4
 8007224:	1b49      	subs	r1, r1, r5
 8007226:	eb62 0206 	sbc.w	r2, r2, r6
 800722a:	f04f 0300 	mov.w	r3, #0
 800722e:	f04f 0400 	mov.w	r4, #0
 8007232:	0194      	lsls	r4, r2, #6
 8007234:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007238:	018b      	lsls	r3, r1, #6
 800723a:	1a5b      	subs	r3, r3, r1
 800723c:	eb64 0402 	sbc.w	r4, r4, r2
 8007240:	f04f 0100 	mov.w	r1, #0
 8007244:	f04f 0200 	mov.w	r2, #0
 8007248:	00e2      	lsls	r2, r4, #3
 800724a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800724e:	00d9      	lsls	r1, r3, #3
 8007250:	460b      	mov	r3, r1
 8007252:	4614      	mov	r4, r2
 8007254:	195b      	adds	r3, r3, r5
 8007256:	eb44 0406 	adc.w	r4, r4, r6
 800725a:	f04f 0100 	mov.w	r1, #0
 800725e:	f04f 0200 	mov.w	r2, #0
 8007262:	02a2      	lsls	r2, r4, #10
 8007264:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007268:	0299      	lsls	r1, r3, #10
 800726a:	460b      	mov	r3, r1
 800726c:	4614      	mov	r4, r2
 800726e:	4618      	mov	r0, r3
 8007270:	4621      	mov	r1, r4
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f04f 0400 	mov.w	r4, #0
 8007278:	461a      	mov	r2, r3
 800727a:	4623      	mov	r3, r4
 800727c:	f7f9 fc1e 	bl	8000abc <__aeabi_uldivmod>
 8007280:	4603      	mov	r3, r0
 8007282:	460c      	mov	r4, r1
 8007284:	60fb      	str	r3, [r7, #12]
 8007286:	e049      	b.n	800731c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007288:	4b2f      	ldr	r3, [pc, #188]	; (8007348 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	099b      	lsrs	r3, r3, #6
 800728e:	f04f 0400 	mov.w	r4, #0
 8007292:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007296:	f04f 0200 	mov.w	r2, #0
 800729a:	ea03 0501 	and.w	r5, r3, r1
 800729e:	ea04 0602 	and.w	r6, r4, r2
 80072a2:	4629      	mov	r1, r5
 80072a4:	4632      	mov	r2, r6
 80072a6:	f04f 0300 	mov.w	r3, #0
 80072aa:	f04f 0400 	mov.w	r4, #0
 80072ae:	0154      	lsls	r4, r2, #5
 80072b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80072b4:	014b      	lsls	r3, r1, #5
 80072b6:	4619      	mov	r1, r3
 80072b8:	4622      	mov	r2, r4
 80072ba:	1b49      	subs	r1, r1, r5
 80072bc:	eb62 0206 	sbc.w	r2, r2, r6
 80072c0:	f04f 0300 	mov.w	r3, #0
 80072c4:	f04f 0400 	mov.w	r4, #0
 80072c8:	0194      	lsls	r4, r2, #6
 80072ca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80072ce:	018b      	lsls	r3, r1, #6
 80072d0:	1a5b      	subs	r3, r3, r1
 80072d2:	eb64 0402 	sbc.w	r4, r4, r2
 80072d6:	f04f 0100 	mov.w	r1, #0
 80072da:	f04f 0200 	mov.w	r2, #0
 80072de:	00e2      	lsls	r2, r4, #3
 80072e0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80072e4:	00d9      	lsls	r1, r3, #3
 80072e6:	460b      	mov	r3, r1
 80072e8:	4614      	mov	r4, r2
 80072ea:	195b      	adds	r3, r3, r5
 80072ec:	eb44 0406 	adc.w	r4, r4, r6
 80072f0:	f04f 0100 	mov.w	r1, #0
 80072f4:	f04f 0200 	mov.w	r2, #0
 80072f8:	02a2      	lsls	r2, r4, #10
 80072fa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80072fe:	0299      	lsls	r1, r3, #10
 8007300:	460b      	mov	r3, r1
 8007302:	4614      	mov	r4, r2
 8007304:	4618      	mov	r0, r3
 8007306:	4621      	mov	r1, r4
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f04f 0400 	mov.w	r4, #0
 800730e:	461a      	mov	r2, r3
 8007310:	4623      	mov	r3, r4
 8007312:	f7f9 fbd3 	bl	8000abc <__aeabi_uldivmod>
 8007316:	4603      	mov	r3, r0
 8007318:	460c      	mov	r4, r1
 800731a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800731c:	4b0a      	ldr	r3, [pc, #40]	; (8007348 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	0c1b      	lsrs	r3, r3, #16
 8007322:	f003 0303 	and.w	r3, r3, #3
 8007326:	3301      	adds	r3, #1
 8007328:	005b      	lsls	r3, r3, #1
 800732a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	fbb2 f3f3 	udiv	r3, r2, r3
 8007334:	60bb      	str	r3, [r7, #8]
      break;
 8007336:	e002      	b.n	800733e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007338:	4b04      	ldr	r3, [pc, #16]	; (800734c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800733a:	60bb      	str	r3, [r7, #8]
      break;
 800733c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800733e:	68bb      	ldr	r3, [r7, #8]
}
 8007340:	4618      	mov	r0, r3
 8007342:	3714      	adds	r7, #20
 8007344:	46bd      	mov	sp, r7
 8007346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007348:	40023800 	.word	0x40023800
 800734c:	00f42400 	.word	0x00f42400

08007350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007350:	b480      	push	{r7}
 8007352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007354:	4b03      	ldr	r3, [pc, #12]	; (8007364 <HAL_RCC_GetHCLKFreq+0x14>)
 8007356:	681b      	ldr	r3, [r3, #0]
}
 8007358:	4618      	mov	r0, r3
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	20000008 	.word	0x20000008

08007368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800736c:	f7ff fff0 	bl	8007350 <HAL_RCC_GetHCLKFreq>
 8007370:	4601      	mov	r1, r0
 8007372:	4b05      	ldr	r3, [pc, #20]	; (8007388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	0a9b      	lsrs	r3, r3, #10
 8007378:	f003 0307 	and.w	r3, r3, #7
 800737c:	4a03      	ldr	r2, [pc, #12]	; (800738c <HAL_RCC_GetPCLK1Freq+0x24>)
 800737e:	5cd3      	ldrb	r3, [r2, r3]
 8007380:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007384:	4618      	mov	r0, r3
 8007386:	bd80      	pop	{r7, pc}
 8007388:	40023800 	.word	0x40023800
 800738c:	0800ca84 	.word	0x0800ca84

08007390 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b086      	sub	sp, #24
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007398:	2300      	movs	r3, #0
 800739a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800739c:	2300      	movs	r3, #0
 800739e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d105      	bne.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d035      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80073b8:	4b62      	ldr	r3, [pc, #392]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80073ba:	2200      	movs	r2, #0
 80073bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80073be:	f7fa ffc7 	bl	8002350 <HAL_GetTick>
 80073c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073c4:	e008      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80073c6:	f7fa ffc3 	bl	8002350 <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d901      	bls.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e0b0      	b.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073d8:	4b5b      	ldr	r3, [pc, #364]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1f0      	bne.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	019a      	lsls	r2, r3, #6
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	071b      	lsls	r3, r3, #28
 80073f0:	4955      	ldr	r1, [pc, #340]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80073f8:	4b52      	ldr	r3, [pc, #328]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80073fa:	2201      	movs	r2, #1
 80073fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80073fe:	f7fa ffa7 	bl	8002350 <HAL_GetTick>
 8007402:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007404:	e008      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007406:	f7fa ffa3 	bl	8002350 <HAL_GetTick>
 800740a:	4602      	mov	r2, r0
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	2b02      	cmp	r3, #2
 8007412:	d901      	bls.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007414:	2303      	movs	r3, #3
 8007416:	e090      	b.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007418:	4b4b      	ldr	r3, [pc, #300]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d0f0      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0302 	and.w	r3, r3, #2
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 8083 	beq.w	8007538 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007432:	2300      	movs	r3, #0
 8007434:	60fb      	str	r3, [r7, #12]
 8007436:	4b44      	ldr	r3, [pc, #272]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743a:	4a43      	ldr	r2, [pc, #268]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800743c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007440:	6413      	str	r3, [r2, #64]	; 0x40
 8007442:	4b41      	ldr	r3, [pc, #260]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800744a:	60fb      	str	r3, [r7, #12]
 800744c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800744e:	4b3f      	ldr	r3, [pc, #252]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a3e      	ldr	r2, [pc, #248]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007458:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800745a:	f7fa ff79 	bl	8002350 <HAL_GetTick>
 800745e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007460:	e008      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007462:	f7fa ff75 	bl	8002350 <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	2b02      	cmp	r3, #2
 800746e:	d901      	bls.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e062      	b.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007474:	4b35      	ldr	r3, [pc, #212]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800747c:	2b00      	cmp	r3, #0
 800747e:	d0f0      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007480:	4b31      	ldr	r3, [pc, #196]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007484:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007488:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d02f      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007498:	693a      	ldr	r2, [r7, #16]
 800749a:	429a      	cmp	r2, r3
 800749c:	d028      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800749e:	4b2a      	ldr	r3, [pc, #168]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074a6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80074a8:	4b29      	ldr	r3, [pc, #164]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80074aa:	2201      	movs	r2, #1
 80074ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80074ae:	4b28      	ldr	r3, [pc, #160]	; (8007550 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80074b0:	2200      	movs	r2, #0
 80074b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80074b4:	4a24      	ldr	r2, [pc, #144]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80074ba:	4b23      	ldr	r3, [pc, #140]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d114      	bne.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80074c6:	f7fa ff43 	bl	8002350 <HAL_GetTick>
 80074ca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074cc:	e00a      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074ce:	f7fa ff3f 	bl	8002350 <HAL_GetTick>
 80074d2:	4602      	mov	r2, r0
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80074dc:	4293      	cmp	r3, r2
 80074de:	d901      	bls.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e02a      	b.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074e4:	4b18      	ldr	r3, [pc, #96]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074e8:	f003 0302 	and.w	r3, r3, #2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d0ee      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074fc:	d10d      	bne.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80074fe:	4b12      	ldr	r3, [pc, #72]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800750e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007512:	490d      	ldr	r1, [pc, #52]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007514:	4313      	orrs	r3, r2
 8007516:	608b      	str	r3, [r1, #8]
 8007518:	e005      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800751a:	4b0b      	ldr	r3, [pc, #44]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	4a0a      	ldr	r2, [pc, #40]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007520:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007524:	6093      	str	r3, [r2, #8]
 8007526:	4b08      	ldr	r3, [pc, #32]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007528:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007532:	4905      	ldr	r1, [pc, #20]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007534:	4313      	orrs	r3, r2
 8007536:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3718      	adds	r7, #24
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	42470068 	.word	0x42470068
 8007548:	40023800 	.word	0x40023800
 800754c:	40007000 	.word	0x40007000
 8007550:	42470e40 	.word	0x42470e40

08007554 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d101      	bne.n	8007566 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e083      	b.n	800766e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	7f5b      	ldrb	r3, [r3, #29]
 800756a:	b2db      	uxtb	r3, r3
 800756c:	2b00      	cmp	r3, #0
 800756e:	d105      	bne.n	800757c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f7fa fa38 	bl	80019ec <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2202      	movs	r2, #2
 8007580:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	22ca      	movs	r2, #202	; 0xca
 8007588:	625a      	str	r2, [r3, #36]	; 0x24
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2253      	movs	r2, #83	; 0x53
 8007590:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 f897 	bl	80076c6 <RTC_EnterInitMode>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d008      	beq.n	80075b0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	22ff      	movs	r2, #255	; 0xff
 80075a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2204      	movs	r2, #4
 80075aa:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e05e      	b.n	800766e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	6812      	ldr	r2, [r2, #0]
 80075ba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80075be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075c2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	6899      	ldr	r1, [r3, #8]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	685a      	ldr	r2, [r3, #4]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	431a      	orrs	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	431a      	orrs	r2, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	430a      	orrs	r2, r1
 80075e0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	68d2      	ldr	r2, [r2, #12]
 80075ea:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6919      	ldr	r1, [r3, #16]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	041a      	lsls	r2, r3, #16
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	430a      	orrs	r2, r1
 80075fe:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68da      	ldr	r2, [r3, #12]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800760e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	f003 0320 	and.w	r3, r3, #32
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10e      	bne.n	800763c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f829 	bl	8007676 <HAL_RTC_WaitForSynchro>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d008      	beq.n	800763c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	22ff      	movs	r2, #255	; 0xff
 8007630:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2204      	movs	r2, #4
 8007636:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	e018      	b.n	800766e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800764a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	699a      	ldr	r2, [r3, #24]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	430a      	orrs	r2, r1
 800765c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	22ff      	movs	r2, #255	; 0xff
 8007664:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800766c:	2300      	movs	r3, #0
  }
}
 800766e:	4618      	mov	r0, r3
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b084      	sub	sp, #16
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800767e:	2300      	movs	r3, #0
 8007680:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68da      	ldr	r2, [r3, #12]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007690:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007692:	f7fa fe5d 	bl	8002350 <HAL_GetTick>
 8007696:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007698:	e009      	b.n	80076ae <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800769a:	f7fa fe59 	bl	8002350 <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076a8:	d901      	bls.n	80076ae <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e007      	b.n	80076be <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	f003 0320 	and.w	r3, r3, #32
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d0ee      	beq.n	800769a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80076ce:	2300      	movs	r3, #0
 80076d0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d119      	bne.n	8007714 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f04f 32ff 	mov.w	r2, #4294967295
 80076e8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80076ea:	f7fa fe31 	bl	8002350 <HAL_GetTick>
 80076ee:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80076f0:	e009      	b.n	8007706 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80076f2:	f7fa fe2d 	bl	8002350 <HAL_GetTick>
 80076f6:	4602      	mov	r2, r0
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007700:	d901      	bls.n	8007706 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e007      	b.n	8007716 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007710:	2b00      	cmp	r3, #0
 8007712:	d0ee      	beq.n	80076f2 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b082      	sub	sp, #8
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d101      	bne.n	8007730 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e01d      	b.n	800776c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b00      	cmp	r3, #0
 800773a:	d106      	bne.n	800774a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f7fa fc6d 	bl	8002024 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2202      	movs	r2, #2
 800774e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	3304      	adds	r3, #4
 800775a:	4619      	mov	r1, r3
 800775c:	4610      	mov	r0, r2
 800775e:	f000 fc13 	bl	8007f88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68da      	ldr	r2, [r3, #12]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f042 0201 	orr.w	r2, r2, #1
 800778a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f003 0307 	and.w	r3, r3, #7
 8007796:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2b06      	cmp	r3, #6
 800779c:	d007      	beq.n	80077ae <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f042 0201 	orr.w	r2, r2, #1
 80077ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3714      	adds	r7, #20
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d101      	bne.n	80077ce <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e01d      	b.n	800780a <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d106      	bne.n	80077e8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7fa fbfc 	bl	8001fe0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2202      	movs	r2, #2
 80077ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	3304      	adds	r3, #4
 80077f8:	4619      	mov	r1, r3
 80077fa:	4610      	mov	r0, r2
 80077fc:	f000 fbc4 	bl	8007f88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3708      	adds	r7, #8
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b082      	sub	sp, #8
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d101      	bne.n	8007824 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	e01d      	b.n	8007860 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b00      	cmp	r3, #0
 800782e:	d106      	bne.n	800783e <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 f815 	bl	8007868 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2202      	movs	r2, #2
 8007842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	3304      	adds	r3, #4
 800784e:	4619      	mov	r1, r3
 8007850:	4610      	mov	r0, r2
 8007852:	f000 fb99 	bl	8007f88 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	2b0c      	cmp	r3, #12
 800788a:	d841      	bhi.n	8007910 <HAL_TIM_IC_Start_IT+0x94>
 800788c:	a201      	add	r2, pc, #4	; (adr r2, 8007894 <HAL_TIM_IC_Start_IT+0x18>)
 800788e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007892:	bf00      	nop
 8007894:	080078c9 	.word	0x080078c9
 8007898:	08007911 	.word	0x08007911
 800789c:	08007911 	.word	0x08007911
 80078a0:	08007911 	.word	0x08007911
 80078a4:	080078db 	.word	0x080078db
 80078a8:	08007911 	.word	0x08007911
 80078ac:	08007911 	.word	0x08007911
 80078b0:	08007911 	.word	0x08007911
 80078b4:	080078ed 	.word	0x080078ed
 80078b8:	08007911 	.word	0x08007911
 80078bc:	08007911 	.word	0x08007911
 80078c0:	08007911 	.word	0x08007911
 80078c4:	080078ff 	.word	0x080078ff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68da      	ldr	r2, [r3, #12]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f042 0202 	orr.w	r2, r2, #2
 80078d6:	60da      	str	r2, [r3, #12]
      break;
 80078d8:	e01b      	b.n	8007912 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68da      	ldr	r2, [r3, #12]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f042 0204 	orr.w	r2, r2, #4
 80078e8:	60da      	str	r2, [r3, #12]
      break;
 80078ea:	e012      	b.n	8007912 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	68da      	ldr	r2, [r3, #12]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f042 0208 	orr.w	r2, r2, #8
 80078fa:	60da      	str	r2, [r3, #12]
      break;
 80078fc:	e009      	b.n	8007912 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68da      	ldr	r2, [r3, #12]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f042 0210 	orr.w	r2, r2, #16
 800790c:	60da      	str	r2, [r3, #12]
      break;
 800790e:	e000      	b.n	8007912 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8007910:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2201      	movs	r2, #1
 8007918:	6839      	ldr	r1, [r7, #0]
 800791a:	4618      	mov	r0, r3
 800791c:	f000 ff48 	bl	80087b0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	f003 0307 	and.w	r3, r3, #7
 800792a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2b06      	cmp	r3, #6
 8007930:	d007      	beq.n	8007942 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f042 0201 	orr.w	r2, r2, #1
 8007940:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	f003 0302 	and.w	r3, r3, #2
 800795e:	2b02      	cmp	r3, #2
 8007960:	d122      	bne.n	80079a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	f003 0302 	and.w	r3, r3, #2
 800796c:	2b02      	cmp	r3, #2
 800796e:	d11b      	bne.n	80079a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f06f 0202 	mvn.w	r2, #2
 8007978:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	699b      	ldr	r3, [r3, #24]
 8007986:	f003 0303 	and.w	r3, r3, #3
 800798a:	2b00      	cmp	r3, #0
 800798c:	d003      	beq.n	8007996 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7f9 fea6 	bl	80016e0 <HAL_TIM_IC_CaptureCallback>
 8007994:	e005      	b.n	80079a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fad8 	bl	8007f4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fadf 	bl	8007f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	f003 0304 	and.w	r3, r3, #4
 80079b2:	2b04      	cmp	r3, #4
 80079b4:	d122      	bne.n	80079fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	f003 0304 	and.w	r3, r3, #4
 80079c0:	2b04      	cmp	r3, #4
 80079c2:	d11b      	bne.n	80079fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f06f 0204 	mvn.w	r2, #4
 80079cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2202      	movs	r2, #2
 80079d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d003      	beq.n	80079ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f7f9 fe7c 	bl	80016e0 <HAL_TIM_IC_CaptureCallback>
 80079e8:	e005      	b.n	80079f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 faae 	bl	8007f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 fab5 	bl	8007f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	f003 0308 	and.w	r3, r3, #8
 8007a06:	2b08      	cmp	r3, #8
 8007a08:	d122      	bne.n	8007a50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	f003 0308 	and.w	r3, r3, #8
 8007a14:	2b08      	cmp	r3, #8
 8007a16:	d11b      	bne.n	8007a50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f06f 0208 	mvn.w	r2, #8
 8007a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2204      	movs	r2, #4
 8007a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	69db      	ldr	r3, [r3, #28]
 8007a2e:	f003 0303 	and.w	r3, r3, #3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d003      	beq.n	8007a3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f7f9 fe52 	bl	80016e0 <HAL_TIM_IC_CaptureCallback>
 8007a3c:	e005      	b.n	8007a4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fa84 	bl	8007f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 fa8b 	bl	8007f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	f003 0310 	and.w	r3, r3, #16
 8007a5a:	2b10      	cmp	r3, #16
 8007a5c:	d122      	bne.n	8007aa4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	f003 0310 	and.w	r3, r3, #16
 8007a68:	2b10      	cmp	r3, #16
 8007a6a:	d11b      	bne.n	8007aa4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f06f 0210 	mvn.w	r2, #16
 8007a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2208      	movs	r2, #8
 8007a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	69db      	ldr	r3, [r3, #28]
 8007a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d003      	beq.n	8007a92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7f9 fe28 	bl	80016e0 <HAL_TIM_IC_CaptureCallback>
 8007a90:	e005      	b.n	8007a9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fa5a 	bl	8007f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 fa61 	bl	8007f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	f003 0301 	and.w	r3, r3, #1
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d10e      	bne.n	8007ad0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	f003 0301 	and.w	r3, r3, #1
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d107      	bne.n	8007ad0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f06f 0201 	mvn.w	r2, #1
 8007ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f7f9 feac 	bl	8001828 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ada:	2b80      	cmp	r3, #128	; 0x80
 8007adc:	d10e      	bne.n	8007afc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ae8:	2b80      	cmp	r3, #128	; 0x80
 8007aea:	d107      	bne.n	8007afc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 ff58 	bl	80089ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b06:	2b40      	cmp	r3, #64	; 0x40
 8007b08:	d10e      	bne.n	8007b28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b14:	2b40      	cmp	r3, #64	; 0x40
 8007b16:	d107      	bne.n	8007b28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 fa26 	bl	8007f74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	f003 0320 	and.w	r3, r3, #32
 8007b32:	2b20      	cmp	r3, #32
 8007b34:	d10e      	bne.n	8007b54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	f003 0320 	and.w	r3, r3, #32
 8007b40:	2b20      	cmp	r3, #32
 8007b42:	d107      	bne.n	8007b54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f06f 0220 	mvn.w	r2, #32
 8007b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 ff22 	bl	8008998 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b54:	bf00      	nop
 8007b56:	3708      	adds	r7, #8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d101      	bne.n	8007b76 <HAL_TIM_OC_ConfigChannel+0x1a>
 8007b72:	2302      	movs	r3, #2
 8007b74:	e04e      	b.n	8007c14 <HAL_TIM_OC_ConfigChannel+0xb8>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2202      	movs	r2, #2
 8007b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2b0c      	cmp	r3, #12
 8007b8a:	d839      	bhi.n	8007c00 <HAL_TIM_OC_ConfigChannel+0xa4>
 8007b8c:	a201      	add	r2, pc, #4	; (adr r2, 8007b94 <HAL_TIM_OC_ConfigChannel+0x38>)
 8007b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b92:	bf00      	nop
 8007b94:	08007bc9 	.word	0x08007bc9
 8007b98:	08007c01 	.word	0x08007c01
 8007b9c:	08007c01 	.word	0x08007c01
 8007ba0:	08007c01 	.word	0x08007c01
 8007ba4:	08007bd7 	.word	0x08007bd7
 8007ba8:	08007c01 	.word	0x08007c01
 8007bac:	08007c01 	.word	0x08007c01
 8007bb0:	08007c01 	.word	0x08007c01
 8007bb4:	08007be5 	.word	0x08007be5
 8007bb8:	08007c01 	.word	0x08007c01
 8007bbc:	08007c01 	.word	0x08007c01
 8007bc0:	08007c01 	.word	0x08007c01
 8007bc4:	08007bf3 	.word	0x08007bf3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68b9      	ldr	r1, [r7, #8]
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f000 fa7a 	bl	80080c8 <TIM_OC1_SetConfig>
      break;
 8007bd4:	e015      	b.n	8007c02 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68b9      	ldr	r1, [r7, #8]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f000 fae3 	bl	80081a8 <TIM_OC2_SetConfig>
      break;
 8007be2:	e00e      	b.n	8007c02 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68b9      	ldr	r1, [r7, #8]
 8007bea:	4618      	mov	r0, r3
 8007bec:	f000 fb52 	bl	8008294 <TIM_OC3_SetConfig>
      break;
 8007bf0:	e007      	b.n	8007c02 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	68b9      	ldr	r1, [r7, #8]
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f000 fbbf 	bl	800837c <TIM_OC4_SetConfig>
      break;
 8007bfe:	e000      	b.n	8007c02 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8007c00:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d101      	bne.n	8007c36 <HAL_TIM_IC_ConfigChannel+0x1a>
 8007c32:	2302      	movs	r3, #2
 8007c34:	e08a      	b.n	8007d4c <HAL_TIM_IC_ConfigChannel+0x130>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2202      	movs	r2, #2
 8007c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d11b      	bne.n	8007c84 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6818      	ldr	r0, [r3, #0]
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	6819      	ldr	r1, [r3, #0]
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	685a      	ldr	r2, [r3, #4]
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	f000 fbe4 	bl	8008428 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	699a      	ldr	r2, [r3, #24]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f022 020c 	bic.w	r2, r2, #12
 8007c6e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	6999      	ldr	r1, [r3, #24]
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	689a      	ldr	r2, [r3, #8]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	430a      	orrs	r2, r1
 8007c80:	619a      	str	r2, [r3, #24]
 8007c82:	e05a      	b.n	8007d3a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b04      	cmp	r3, #4
 8007c88:	d11c      	bne.n	8007cc4 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6818      	ldr	r0, [r3, #0]
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	6819      	ldr	r1, [r3, #0]
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	685a      	ldr	r2, [r3, #4]
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	f000 fc68 	bl	800856e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	699a      	ldr	r2, [r3, #24]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007cac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	6999      	ldr	r1, [r3, #24]
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	021a      	lsls	r2, r3, #8
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	430a      	orrs	r2, r1
 8007cc0:	619a      	str	r2, [r3, #24]
 8007cc2:	e03a      	b.n	8007d3a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b08      	cmp	r3, #8
 8007cc8:	d11b      	bne.n	8007d02 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6818      	ldr	r0, [r3, #0]
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	6819      	ldr	r1, [r3, #0]
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	685a      	ldr	r2, [r3, #4]
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	f000 fcb5 	bl	8008648 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	69da      	ldr	r2, [r3, #28]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f022 020c 	bic.w	r2, r2, #12
 8007cec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	69d9      	ldr	r1, [r3, #28]
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	689a      	ldr	r2, [r3, #8]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	430a      	orrs	r2, r1
 8007cfe:	61da      	str	r2, [r3, #28]
 8007d00:	e01b      	b.n	8007d3a <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6818      	ldr	r0, [r3, #0]
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	6819      	ldr	r1, [r3, #0]
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	685a      	ldr	r2, [r3, #4]
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	f000 fcd5 	bl	80086c0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	69da      	ldr	r2, [r3, #28]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007d24:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	69d9      	ldr	r1, [r3, #28]
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	021a      	lsls	r2, r3, #8
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	430a      	orrs	r2, r1
 8007d38:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d101      	bne.n	8007d6c <HAL_TIM_ConfigClockSource+0x18>
 8007d68:	2302      	movs	r3, #2
 8007d6a:	e0a6      	b.n	8007eba <HAL_TIM_ConfigClockSource+0x166>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2202      	movs	r2, #2
 8007d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d92:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2b40      	cmp	r3, #64	; 0x40
 8007da2:	d067      	beq.n	8007e74 <HAL_TIM_ConfigClockSource+0x120>
 8007da4:	2b40      	cmp	r3, #64	; 0x40
 8007da6:	d80b      	bhi.n	8007dc0 <HAL_TIM_ConfigClockSource+0x6c>
 8007da8:	2b10      	cmp	r3, #16
 8007daa:	d073      	beq.n	8007e94 <HAL_TIM_ConfigClockSource+0x140>
 8007dac:	2b10      	cmp	r3, #16
 8007dae:	d802      	bhi.n	8007db6 <HAL_TIM_ConfigClockSource+0x62>
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d06f      	beq.n	8007e94 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007db4:	e078      	b.n	8007ea8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007db6:	2b20      	cmp	r3, #32
 8007db8:	d06c      	beq.n	8007e94 <HAL_TIM_ConfigClockSource+0x140>
 8007dba:	2b30      	cmp	r3, #48	; 0x30
 8007dbc:	d06a      	beq.n	8007e94 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007dbe:	e073      	b.n	8007ea8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007dc0:	2b70      	cmp	r3, #112	; 0x70
 8007dc2:	d00d      	beq.n	8007de0 <HAL_TIM_ConfigClockSource+0x8c>
 8007dc4:	2b70      	cmp	r3, #112	; 0x70
 8007dc6:	d804      	bhi.n	8007dd2 <HAL_TIM_ConfigClockSource+0x7e>
 8007dc8:	2b50      	cmp	r3, #80	; 0x50
 8007dca:	d033      	beq.n	8007e34 <HAL_TIM_ConfigClockSource+0xe0>
 8007dcc:	2b60      	cmp	r3, #96	; 0x60
 8007dce:	d041      	beq.n	8007e54 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007dd0:	e06a      	b.n	8007ea8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dd6:	d066      	beq.n	8007ea6 <HAL_TIM_ConfigClockSource+0x152>
 8007dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ddc:	d017      	beq.n	8007e0e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007dde:	e063      	b.n	8007ea8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6818      	ldr	r0, [r3, #0]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	6899      	ldr	r1, [r3, #8]
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	685a      	ldr	r2, [r3, #4]
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	f000 fcbe 	bl	8008770 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007e02:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	609a      	str	r2, [r3, #8]
      break;
 8007e0c:	e04c      	b.n	8007ea8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6818      	ldr	r0, [r3, #0]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	6899      	ldr	r1, [r3, #8]
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	685a      	ldr	r2, [r3, #4]
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	f000 fca7 	bl	8008770 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	689a      	ldr	r2, [r3, #8]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e30:	609a      	str	r2, [r3, #8]
      break;
 8007e32:	e039      	b.n	8007ea8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6818      	ldr	r0, [r3, #0]
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	6859      	ldr	r1, [r3, #4]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	461a      	mov	r2, r3
 8007e42:	f000 fb65 	bl	8008510 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2150      	movs	r1, #80	; 0x50
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f000 fc74 	bl	800873a <TIM_ITRx_SetConfig>
      break;
 8007e52:	e029      	b.n	8007ea8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6818      	ldr	r0, [r3, #0]
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	6859      	ldr	r1, [r3, #4]
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	461a      	mov	r2, r3
 8007e62:	f000 fbc1 	bl	80085e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2160      	movs	r1, #96	; 0x60
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f000 fc64 	bl	800873a <TIM_ITRx_SetConfig>
      break;
 8007e72:	e019      	b.n	8007ea8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6818      	ldr	r0, [r3, #0]
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	6859      	ldr	r1, [r3, #4]
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	461a      	mov	r2, r3
 8007e82:	f000 fb45 	bl	8008510 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2140      	movs	r1, #64	; 0x40
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f000 fc54 	bl	800873a <TIM_ITRx_SetConfig>
      break;
 8007e92:	e009      	b.n	8007ea8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	4610      	mov	r0, r2
 8007ea0:	f000 fc4b 	bl	800873a <TIM_ITRx_SetConfig>
      break;
 8007ea4:	e000      	b.n	8007ea8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007ea6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
	...

08007ec4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	2b0c      	cmp	r3, #12
 8007ed6:	d831      	bhi.n	8007f3c <HAL_TIM_ReadCapturedValue+0x78>
 8007ed8:	a201      	add	r2, pc, #4	; (adr r2, 8007ee0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ede:	bf00      	nop
 8007ee0:	08007f15 	.word	0x08007f15
 8007ee4:	08007f3d 	.word	0x08007f3d
 8007ee8:	08007f3d 	.word	0x08007f3d
 8007eec:	08007f3d 	.word	0x08007f3d
 8007ef0:	08007f1f 	.word	0x08007f1f
 8007ef4:	08007f3d 	.word	0x08007f3d
 8007ef8:	08007f3d 	.word	0x08007f3d
 8007efc:	08007f3d 	.word	0x08007f3d
 8007f00:	08007f29 	.word	0x08007f29
 8007f04:	08007f3d 	.word	0x08007f3d
 8007f08:	08007f3d 	.word	0x08007f3d
 8007f0c:	08007f3d 	.word	0x08007f3d
 8007f10:	08007f33 	.word	0x08007f33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f1a:	60fb      	str	r3, [r7, #12]

      break;
 8007f1c:	e00f      	b.n	8007f3e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f24:	60fb      	str	r3, [r7, #12]

      break;
 8007f26:	e00a      	b.n	8007f3e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f2e:	60fb      	str	r3, [r7, #12]

      break;
 8007f30:	e005      	b.n	8007f3e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f38:	60fb      	str	r3, [r7, #12]

      break;
 8007f3a:	e000      	b.n	8007f3e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007f3c:	bf00      	nop
  }

  return tmpreg;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3714      	adds	r7, #20
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f7c:	bf00      	nop
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a40      	ldr	r2, [pc, #256]	; (800809c <TIM_Base_SetConfig+0x114>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d013      	beq.n	8007fc8 <TIM_Base_SetConfig+0x40>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fa6:	d00f      	beq.n	8007fc8 <TIM_Base_SetConfig+0x40>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a3d      	ldr	r2, [pc, #244]	; (80080a0 <TIM_Base_SetConfig+0x118>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d00b      	beq.n	8007fc8 <TIM_Base_SetConfig+0x40>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a3c      	ldr	r2, [pc, #240]	; (80080a4 <TIM_Base_SetConfig+0x11c>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d007      	beq.n	8007fc8 <TIM_Base_SetConfig+0x40>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a3b      	ldr	r2, [pc, #236]	; (80080a8 <TIM_Base_SetConfig+0x120>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d003      	beq.n	8007fc8 <TIM_Base_SetConfig+0x40>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a3a      	ldr	r2, [pc, #232]	; (80080ac <TIM_Base_SetConfig+0x124>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d108      	bne.n	8007fda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a2f      	ldr	r2, [pc, #188]	; (800809c <TIM_Base_SetConfig+0x114>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d02b      	beq.n	800803a <TIM_Base_SetConfig+0xb2>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fe8:	d027      	beq.n	800803a <TIM_Base_SetConfig+0xb2>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a2c      	ldr	r2, [pc, #176]	; (80080a0 <TIM_Base_SetConfig+0x118>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d023      	beq.n	800803a <TIM_Base_SetConfig+0xb2>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a2b      	ldr	r2, [pc, #172]	; (80080a4 <TIM_Base_SetConfig+0x11c>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d01f      	beq.n	800803a <TIM_Base_SetConfig+0xb2>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a2a      	ldr	r2, [pc, #168]	; (80080a8 <TIM_Base_SetConfig+0x120>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d01b      	beq.n	800803a <TIM_Base_SetConfig+0xb2>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a29      	ldr	r2, [pc, #164]	; (80080ac <TIM_Base_SetConfig+0x124>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d017      	beq.n	800803a <TIM_Base_SetConfig+0xb2>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4a28      	ldr	r2, [pc, #160]	; (80080b0 <TIM_Base_SetConfig+0x128>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d013      	beq.n	800803a <TIM_Base_SetConfig+0xb2>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a27      	ldr	r2, [pc, #156]	; (80080b4 <TIM_Base_SetConfig+0x12c>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d00f      	beq.n	800803a <TIM_Base_SetConfig+0xb2>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4a26      	ldr	r2, [pc, #152]	; (80080b8 <TIM_Base_SetConfig+0x130>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d00b      	beq.n	800803a <TIM_Base_SetConfig+0xb2>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4a25      	ldr	r2, [pc, #148]	; (80080bc <TIM_Base_SetConfig+0x134>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d007      	beq.n	800803a <TIM_Base_SetConfig+0xb2>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4a24      	ldr	r2, [pc, #144]	; (80080c0 <TIM_Base_SetConfig+0x138>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d003      	beq.n	800803a <TIM_Base_SetConfig+0xb2>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a23      	ldr	r2, [pc, #140]	; (80080c4 <TIM_Base_SetConfig+0x13c>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d108      	bne.n	800804c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	4313      	orrs	r3, r2
 800804a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	695b      	ldr	r3, [r3, #20]
 8008056:	4313      	orrs	r3, r2
 8008058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	689a      	ldr	r2, [r3, #8]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a0a      	ldr	r2, [pc, #40]	; (800809c <TIM_Base_SetConfig+0x114>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d003      	beq.n	8008080 <TIM_Base_SetConfig+0xf8>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a0c      	ldr	r2, [pc, #48]	; (80080ac <TIM_Base_SetConfig+0x124>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d103      	bne.n	8008088 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	691a      	ldr	r2, [r3, #16]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	615a      	str	r2, [r3, #20]
}
 800808e:	bf00      	nop
 8008090:	3714      	adds	r7, #20
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	40010000 	.word	0x40010000
 80080a0:	40000400 	.word	0x40000400
 80080a4:	40000800 	.word	0x40000800
 80080a8:	40000c00 	.word	0x40000c00
 80080ac:	40010400 	.word	0x40010400
 80080b0:	40014000 	.word	0x40014000
 80080b4:	40014400 	.word	0x40014400
 80080b8:	40014800 	.word	0x40014800
 80080bc:	40001800 	.word	0x40001800
 80080c0:	40001c00 	.word	0x40001c00
 80080c4:	40002000 	.word	0x40002000

080080c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b087      	sub	sp, #28
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a1b      	ldr	r3, [r3, #32]
 80080d6:	f023 0201 	bic.w	r2, r3, #1
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a1b      	ldr	r3, [r3, #32]
 80080e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f023 0303 	bic.w	r3, r3, #3
 80080fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	4313      	orrs	r3, r2
 8008108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	f023 0302 	bic.w	r3, r3, #2
 8008110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	697a      	ldr	r2, [r7, #20]
 8008118:	4313      	orrs	r3, r2
 800811a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a20      	ldr	r2, [pc, #128]	; (80081a0 <TIM_OC1_SetConfig+0xd8>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d003      	beq.n	800812c <TIM_OC1_SetConfig+0x64>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a1f      	ldr	r2, [pc, #124]	; (80081a4 <TIM_OC1_SetConfig+0xdc>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d10c      	bne.n	8008146 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	f023 0308 	bic.w	r3, r3, #8
 8008132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	697a      	ldr	r2, [r7, #20]
 800813a:	4313      	orrs	r3, r2
 800813c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	f023 0304 	bic.w	r3, r3, #4
 8008144:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a15      	ldr	r2, [pc, #84]	; (80081a0 <TIM_OC1_SetConfig+0xd8>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d003      	beq.n	8008156 <TIM_OC1_SetConfig+0x8e>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a14      	ldr	r2, [pc, #80]	; (80081a4 <TIM_OC1_SetConfig+0xdc>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d111      	bne.n	800817a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800815c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	695b      	ldr	r3, [r3, #20]
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	4313      	orrs	r3, r2
 800816e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	693a      	ldr	r2, [r7, #16]
 8008176:	4313      	orrs	r3, r2
 8008178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	693a      	ldr	r2, [r7, #16]
 800817e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	685a      	ldr	r2, [r3, #4]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	697a      	ldr	r2, [r7, #20]
 8008192:	621a      	str	r2, [r3, #32]
}
 8008194:	bf00      	nop
 8008196:	371c      	adds	r7, #28
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr
 80081a0:	40010000 	.word	0x40010000
 80081a4:	40010400 	.word	0x40010400

080081a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b087      	sub	sp, #28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a1b      	ldr	r3, [r3, #32]
 80081b6:	f023 0210 	bic.w	r2, r3, #16
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a1b      	ldr	r3, [r3, #32]
 80081c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	021b      	lsls	r3, r3, #8
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	f023 0320 	bic.w	r3, r3, #32
 80081f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	011b      	lsls	r3, r3, #4
 80081fa:	697a      	ldr	r2, [r7, #20]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a22      	ldr	r2, [pc, #136]	; (800828c <TIM_OC2_SetConfig+0xe4>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d003      	beq.n	8008210 <TIM_OC2_SetConfig+0x68>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a21      	ldr	r2, [pc, #132]	; (8008290 <TIM_OC2_SetConfig+0xe8>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d10d      	bne.n	800822c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	011b      	lsls	r3, r3, #4
 800821e:	697a      	ldr	r2, [r7, #20]
 8008220:	4313      	orrs	r3, r2
 8008222:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800822a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4a17      	ldr	r2, [pc, #92]	; (800828c <TIM_OC2_SetConfig+0xe4>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d003      	beq.n	800823c <TIM_OC2_SetConfig+0x94>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	4a16      	ldr	r2, [pc, #88]	; (8008290 <TIM_OC2_SetConfig+0xe8>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d113      	bne.n	8008264 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008242:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800824a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	695b      	ldr	r3, [r3, #20]
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	693a      	ldr	r2, [r7, #16]
 8008254:	4313      	orrs	r3, r2
 8008256:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	693a      	ldr	r2, [r7, #16]
 8008260:	4313      	orrs	r3, r2
 8008262:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	693a      	ldr	r2, [r7, #16]
 8008268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	685a      	ldr	r2, [r3, #4]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	697a      	ldr	r2, [r7, #20]
 800827c:	621a      	str	r2, [r3, #32]
}
 800827e:	bf00      	nop
 8008280:	371c      	adds	r7, #28
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	40010000 	.word	0x40010000
 8008290:	40010400 	.word	0x40010400

08008294 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008294:	b480      	push	{r7}
 8008296:	b087      	sub	sp, #28
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a1b      	ldr	r3, [r3, #32]
 80082a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a1b      	ldr	r3, [r3, #32]
 80082ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	69db      	ldr	r3, [r3, #28]
 80082ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f023 0303 	bic.w	r3, r3, #3
 80082ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80082dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	021b      	lsls	r3, r3, #8
 80082e4:	697a      	ldr	r2, [r7, #20]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4a21      	ldr	r2, [pc, #132]	; (8008374 <TIM_OC3_SetConfig+0xe0>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d003      	beq.n	80082fa <TIM_OC3_SetConfig+0x66>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a20      	ldr	r2, [pc, #128]	; (8008378 <TIM_OC3_SetConfig+0xe4>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d10d      	bne.n	8008316 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008300:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	021b      	lsls	r3, r3, #8
 8008308:	697a      	ldr	r2, [r7, #20]
 800830a:	4313      	orrs	r3, r2
 800830c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008314:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4a16      	ldr	r2, [pc, #88]	; (8008374 <TIM_OC3_SetConfig+0xe0>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d003      	beq.n	8008326 <TIM_OC3_SetConfig+0x92>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4a15      	ldr	r2, [pc, #84]	; (8008378 <TIM_OC3_SetConfig+0xe4>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d113      	bne.n	800834e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800832c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	011b      	lsls	r3, r3, #4
 800833c:	693a      	ldr	r2, [r7, #16]
 800833e:	4313      	orrs	r3, r2
 8008340:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	699b      	ldr	r3, [r3, #24]
 8008346:	011b      	lsls	r3, r3, #4
 8008348:	693a      	ldr	r2, [r7, #16]
 800834a:	4313      	orrs	r3, r2
 800834c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	693a      	ldr	r2, [r7, #16]
 8008352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	685a      	ldr	r2, [r3, #4]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	697a      	ldr	r2, [r7, #20]
 8008366:	621a      	str	r2, [r3, #32]
}
 8008368:	bf00      	nop
 800836a:	371c      	adds	r7, #28
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr
 8008374:	40010000 	.word	0x40010000
 8008378:	40010400 	.word	0x40010400

0800837c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800837c:	b480      	push	{r7}
 800837e:	b087      	sub	sp, #28
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a1b      	ldr	r3, [r3, #32]
 800838a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a1b      	ldr	r3, [r3, #32]
 8008396:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	69db      	ldr	r3, [r3, #28]
 80083a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	021b      	lsls	r3, r3, #8
 80083ba:	68fa      	ldr	r2, [r7, #12]
 80083bc:	4313      	orrs	r3, r2
 80083be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	031b      	lsls	r3, r3, #12
 80083ce:	693a      	ldr	r2, [r7, #16]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a12      	ldr	r2, [pc, #72]	; (8008420 <TIM_OC4_SetConfig+0xa4>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d003      	beq.n	80083e4 <TIM_OC4_SetConfig+0x68>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a11      	ldr	r2, [pc, #68]	; (8008424 <TIM_OC4_SetConfig+0xa8>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d109      	bne.n	80083f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	695b      	ldr	r3, [r3, #20]
 80083f0:	019b      	lsls	r3, r3, #6
 80083f2:	697a      	ldr	r2, [r7, #20]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	697a      	ldr	r2, [r7, #20]
 80083fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	685a      	ldr	r2, [r3, #4]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	693a      	ldr	r2, [r7, #16]
 8008410:	621a      	str	r2, [r3, #32]
}
 8008412:	bf00      	nop
 8008414:	371c      	adds	r7, #28
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	40010000 	.word	0x40010000
 8008424:	40010400 	.word	0x40010400

08008428 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008428:	b480      	push	{r7}
 800842a:	b087      	sub	sp, #28
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
 8008434:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6a1b      	ldr	r3, [r3, #32]
 800843a:	f023 0201 	bic.w	r2, r3, #1
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	699b      	ldr	r3, [r3, #24]
 8008446:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6a1b      	ldr	r3, [r3, #32]
 800844c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	4a28      	ldr	r2, [pc, #160]	; (80084f4 <TIM_TI1_SetConfig+0xcc>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d01b      	beq.n	800848e <TIM_TI1_SetConfig+0x66>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800845c:	d017      	beq.n	800848e <TIM_TI1_SetConfig+0x66>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	4a25      	ldr	r2, [pc, #148]	; (80084f8 <TIM_TI1_SetConfig+0xd0>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d013      	beq.n	800848e <TIM_TI1_SetConfig+0x66>
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	4a24      	ldr	r2, [pc, #144]	; (80084fc <TIM_TI1_SetConfig+0xd4>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d00f      	beq.n	800848e <TIM_TI1_SetConfig+0x66>
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	4a23      	ldr	r2, [pc, #140]	; (8008500 <TIM_TI1_SetConfig+0xd8>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d00b      	beq.n	800848e <TIM_TI1_SetConfig+0x66>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	4a22      	ldr	r2, [pc, #136]	; (8008504 <TIM_TI1_SetConfig+0xdc>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d007      	beq.n	800848e <TIM_TI1_SetConfig+0x66>
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	4a21      	ldr	r2, [pc, #132]	; (8008508 <TIM_TI1_SetConfig+0xe0>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d003      	beq.n	800848e <TIM_TI1_SetConfig+0x66>
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	4a20      	ldr	r2, [pc, #128]	; (800850c <TIM_TI1_SetConfig+0xe4>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d101      	bne.n	8008492 <TIM_TI1_SetConfig+0x6a>
 800848e:	2301      	movs	r3, #1
 8008490:	e000      	b.n	8008494 <TIM_TI1_SetConfig+0x6c>
 8008492:	2300      	movs	r3, #0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d008      	beq.n	80084aa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	f023 0303 	bic.w	r3, r3, #3
 800849e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80084a0:	697a      	ldr	r2, [r7, #20]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	4313      	orrs	r3, r2
 80084a6:	617b      	str	r3, [r7, #20]
 80084a8:	e003      	b.n	80084b2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	f043 0301 	orr.w	r3, r3, #1
 80084b0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	011b      	lsls	r3, r3, #4
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	697a      	ldr	r2, [r7, #20]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	f023 030a 	bic.w	r3, r3, #10
 80084cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	f003 030a 	and.w	r3, r3, #10
 80084d4:	693a      	ldr	r2, [r7, #16]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	697a      	ldr	r2, [r7, #20]
 80084de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	693a      	ldr	r2, [r7, #16]
 80084e4:	621a      	str	r2, [r3, #32]
}
 80084e6:	bf00      	nop
 80084e8:	371c      	adds	r7, #28
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop
 80084f4:	40010000 	.word	0x40010000
 80084f8:	40000400 	.word	0x40000400
 80084fc:	40000800 	.word	0x40000800
 8008500:	40000c00 	.word	0x40000c00
 8008504:	40010400 	.word	0x40010400
 8008508:	40014000 	.word	0x40014000
 800850c:	40001800 	.word	0x40001800

08008510 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008510:	b480      	push	{r7}
 8008512:	b087      	sub	sp, #28
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6a1b      	ldr	r3, [r3, #32]
 8008520:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	f023 0201 	bic.w	r2, r3, #1
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800853a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	011b      	lsls	r3, r3, #4
 8008540:	693a      	ldr	r2, [r7, #16]
 8008542:	4313      	orrs	r3, r2
 8008544:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	f023 030a 	bic.w	r3, r3, #10
 800854c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800854e:	697a      	ldr	r2, [r7, #20]
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	4313      	orrs	r3, r2
 8008554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	693a      	ldr	r2, [r7, #16]
 800855a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	697a      	ldr	r2, [r7, #20]
 8008560:	621a      	str	r2, [r3, #32]
}
 8008562:	bf00      	nop
 8008564:	371c      	adds	r7, #28
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr

0800856e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800856e:	b480      	push	{r7}
 8008570:	b087      	sub	sp, #28
 8008572:	af00      	add	r7, sp, #0
 8008574:	60f8      	str	r0, [r7, #12]
 8008576:	60b9      	str	r1, [r7, #8]
 8008578:	607a      	str	r2, [r7, #4]
 800857a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6a1b      	ldr	r3, [r3, #32]
 8008580:	f023 0210 	bic.w	r2, r3, #16
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	699b      	ldr	r3, [r3, #24]
 800858c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6a1b      	ldr	r3, [r3, #32]
 8008592:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800859a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	021b      	lsls	r3, r3, #8
 80085a0:	697a      	ldr	r2, [r7, #20]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	031b      	lsls	r3, r3, #12
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	697a      	ldr	r2, [r7, #20]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80085c0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	011b      	lsls	r3, r3, #4
 80085c6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80085ca:	693a      	ldr	r2, [r7, #16]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	697a      	ldr	r2, [r7, #20]
 80085d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	693a      	ldr	r2, [r7, #16]
 80085da:	621a      	str	r2, [r3, #32]
}
 80085dc:	bf00      	nop
 80085de:	371c      	adds	r7, #28
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b087      	sub	sp, #28
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6a1b      	ldr	r3, [r3, #32]
 80085f8:	f023 0210 	bic.w	r2, r3, #16
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6a1b      	ldr	r3, [r3, #32]
 800860a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008612:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	031b      	lsls	r3, r3, #12
 8008618:	697a      	ldr	r2, [r7, #20]
 800861a:	4313      	orrs	r3, r2
 800861c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008624:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	011b      	lsls	r3, r3, #4
 800862a:	693a      	ldr	r2, [r7, #16]
 800862c:	4313      	orrs	r3, r2
 800862e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	697a      	ldr	r2, [r7, #20]
 8008634:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	693a      	ldr	r2, [r7, #16]
 800863a:	621a      	str	r2, [r3, #32]
}
 800863c:	bf00      	nop
 800863e:	371c      	adds	r7, #28
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008648:	b480      	push	{r7}
 800864a:	b087      	sub	sp, #28
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
 8008654:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6a1b      	ldr	r3, [r3, #32]
 800865a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	69db      	ldr	r3, [r3, #28]
 8008666:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6a1b      	ldr	r3, [r3, #32]
 800866c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	f023 0303 	bic.w	r3, r3, #3
 8008674:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4313      	orrs	r3, r2
 800867c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008684:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	011b      	lsls	r3, r3, #4
 800868a:	b2db      	uxtb	r3, r3
 800868c:	697a      	ldr	r2, [r7, #20]
 800868e:	4313      	orrs	r3, r2
 8008690:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008698:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	021b      	lsls	r3, r3, #8
 800869e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80086a2:	693a      	ldr	r2, [r7, #16]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	697a      	ldr	r2, [r7, #20]
 80086ac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	693a      	ldr	r2, [r7, #16]
 80086b2:	621a      	str	r2, [r3, #32]
}
 80086b4:	bf00      	nop
 80086b6:	371c      	adds	r7, #28
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b087      	sub	sp, #28
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	607a      	str	r2, [r7, #4]
 80086cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6a1b      	ldr	r3, [r3, #32]
 80086d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	69db      	ldr	r3, [r3, #28]
 80086de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6a1b      	ldr	r3, [r3, #32]
 80086e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	021b      	lsls	r3, r3, #8
 80086f2:	697a      	ldr	r2, [r7, #20]
 80086f4:	4313      	orrs	r3, r2
 80086f6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086fe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	031b      	lsls	r3, r3, #12
 8008704:	b29b      	uxth	r3, r3
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	4313      	orrs	r3, r2
 800870a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008712:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	031b      	lsls	r3, r3, #12
 8008718:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800871c:	693a      	ldr	r2, [r7, #16]
 800871e:	4313      	orrs	r3, r2
 8008720:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	697a      	ldr	r2, [r7, #20]
 8008726:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	693a      	ldr	r2, [r7, #16]
 800872c:	621a      	str	r2, [r3, #32]
}
 800872e:	bf00      	nop
 8008730:	371c      	adds	r7, #28
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr

0800873a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800873a:	b480      	push	{r7}
 800873c:	b085      	sub	sp, #20
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
 8008742:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008750:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008752:	683a      	ldr	r2, [r7, #0]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	4313      	orrs	r3, r2
 8008758:	f043 0307 	orr.w	r3, r3, #7
 800875c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	68fa      	ldr	r2, [r7, #12]
 8008762:	609a      	str	r2, [r3, #8]
}
 8008764:	bf00      	nop
 8008766:	3714      	adds	r7, #20
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008770:	b480      	push	{r7}
 8008772:	b087      	sub	sp, #28
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	607a      	str	r2, [r7, #4]
 800877c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800878a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	021a      	lsls	r2, r3, #8
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	431a      	orrs	r2, r3
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	4313      	orrs	r3, r2
 8008798:	697a      	ldr	r2, [r7, #20]
 800879a:	4313      	orrs	r3, r2
 800879c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	697a      	ldr	r2, [r7, #20]
 80087a2:	609a      	str	r2, [r3, #8]
}
 80087a4:	bf00      	nop
 80087a6:	371c      	adds	r7, #28
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b087      	sub	sp, #28
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	f003 031f 	and.w	r3, r3, #31
 80087c2:	2201      	movs	r2, #1
 80087c4:	fa02 f303 	lsl.w	r3, r2, r3
 80087c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6a1a      	ldr	r2, [r3, #32]
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	43db      	mvns	r3, r3
 80087d2:	401a      	ands	r2, r3
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6a1a      	ldr	r2, [r3, #32]
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	f003 031f 	and.w	r3, r3, #31
 80087e2:	6879      	ldr	r1, [r7, #4]
 80087e4:	fa01 f303 	lsl.w	r3, r1, r3
 80087e8:	431a      	orrs	r2, r3
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	621a      	str	r2, [r3, #32]
}
 80087ee:	bf00      	nop
 80087f0:	371c      	adds	r7, #28
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
	...

080087fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800880c:	2b01      	cmp	r3, #1
 800880e:	d101      	bne.n	8008814 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008810:	2302      	movs	r3, #2
 8008812:	e05a      	b.n	80088ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2202      	movs	r2, #2
 8008820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800883a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	4313      	orrs	r3, r2
 8008844:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a21      	ldr	r2, [pc, #132]	; (80088d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d022      	beq.n	800889e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008860:	d01d      	beq.n	800889e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a1d      	ldr	r2, [pc, #116]	; (80088dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d018      	beq.n	800889e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a1b      	ldr	r2, [pc, #108]	; (80088e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d013      	beq.n	800889e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a1a      	ldr	r2, [pc, #104]	; (80088e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d00e      	beq.n	800889e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a18      	ldr	r2, [pc, #96]	; (80088e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d009      	beq.n	800889e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a17      	ldr	r2, [pc, #92]	; (80088ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d004      	beq.n	800889e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a15      	ldr	r2, [pc, #84]	; (80088f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d10c      	bne.n	80088b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	68ba      	ldr	r2, [r7, #8]
 80088b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3714      	adds	r7, #20
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop
 80088d8:	40010000 	.word	0x40010000
 80088dc:	40000400 	.word	0x40000400
 80088e0:	40000800 	.word	0x40000800
 80088e4:	40000c00 	.word	0x40000c00
 80088e8:	40010400 	.word	0x40010400
 80088ec:	40014000 	.word	0x40014000
 80088f0:	40001800 	.word	0x40001800

080088f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80088fe:	2300      	movs	r3, #0
 8008900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008908:	2b01      	cmp	r3, #1
 800890a:	d101      	bne.n	8008910 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800890c:	2302      	movs	r3, #2
 800890e:	e03d      	b.n	800898c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2201      	movs	r2, #1
 8008914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	4313      	orrs	r3, r2
 8008924:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	4313      	orrs	r3, r2
 8008932:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	4313      	orrs	r3, r2
 8008940:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4313      	orrs	r3, r2
 800894e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	4313      	orrs	r3, r2
 800895c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	695b      	ldr	r3, [r3, #20]
 8008968:	4313      	orrs	r3, r2
 800896a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	69db      	ldr	r3, [r3, #28]
 8008976:	4313      	orrs	r3, r2
 8008978:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3714      	adds	r7, #20
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80089a0:	bf00      	nop
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr

080089ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80089b4:	bf00      	nop
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80089c0:	b084      	sub	sp, #16
 80089c2:	b580      	push	{r7, lr}
 80089c4:	b084      	sub	sp, #16
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
 80089ca:	f107 001c 	add.w	r0, r7, #28
 80089ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80089d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d122      	bne.n	8008a1e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80089ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d105      	bne.n	8008a12 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f001 fab4 	bl	8009f80 <USB_CoreReset>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	73fb      	strb	r3, [r7, #15]
 8008a1c:	e01a      	b.n	8008a54 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	68db      	ldr	r3, [r3, #12]
 8008a22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f001 faa8 	bl	8009f80 <USB_CoreReset>
 8008a30:	4603      	mov	r3, r0
 8008a32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d106      	bne.n	8008a48 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	639a      	str	r2, [r3, #56]	; 0x38
 8008a46:	e005      	b.n	8008a54 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d10b      	bne.n	8008a72 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	f043 0206 	orr.w	r2, r3, #6
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	f043 0220 	orr.w	r2, r3, #32
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a7e:	b004      	add	sp, #16
 8008a80:	4770      	bx	lr
	...

08008a84 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b087      	sub	sp, #28
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008a92:	79fb      	ldrb	r3, [r7, #7]
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d165      	bne.n	8008b64 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	4a41      	ldr	r2, [pc, #260]	; (8008ba0 <USB_SetTurnaroundTime+0x11c>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d906      	bls.n	8008aae <USB_SetTurnaroundTime+0x2a>
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	4a40      	ldr	r2, [pc, #256]	; (8008ba4 <USB_SetTurnaroundTime+0x120>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d802      	bhi.n	8008aae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008aa8:	230f      	movs	r3, #15
 8008aaa:	617b      	str	r3, [r7, #20]
 8008aac:	e062      	b.n	8008b74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	4a3c      	ldr	r2, [pc, #240]	; (8008ba4 <USB_SetTurnaroundTime+0x120>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d906      	bls.n	8008ac4 <USB_SetTurnaroundTime+0x40>
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	4a3b      	ldr	r2, [pc, #236]	; (8008ba8 <USB_SetTurnaroundTime+0x124>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d802      	bhi.n	8008ac4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008abe:	230e      	movs	r3, #14
 8008ac0:	617b      	str	r3, [r7, #20]
 8008ac2:	e057      	b.n	8008b74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	4a38      	ldr	r2, [pc, #224]	; (8008ba8 <USB_SetTurnaroundTime+0x124>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d906      	bls.n	8008ada <USB_SetTurnaroundTime+0x56>
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	4a37      	ldr	r2, [pc, #220]	; (8008bac <USB_SetTurnaroundTime+0x128>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d802      	bhi.n	8008ada <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008ad4:	230d      	movs	r3, #13
 8008ad6:	617b      	str	r3, [r7, #20]
 8008ad8:	e04c      	b.n	8008b74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	4a33      	ldr	r2, [pc, #204]	; (8008bac <USB_SetTurnaroundTime+0x128>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d906      	bls.n	8008af0 <USB_SetTurnaroundTime+0x6c>
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	4a32      	ldr	r2, [pc, #200]	; (8008bb0 <USB_SetTurnaroundTime+0x12c>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d802      	bhi.n	8008af0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008aea:	230c      	movs	r3, #12
 8008aec:	617b      	str	r3, [r7, #20]
 8008aee:	e041      	b.n	8008b74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	4a2f      	ldr	r2, [pc, #188]	; (8008bb0 <USB_SetTurnaroundTime+0x12c>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d906      	bls.n	8008b06 <USB_SetTurnaroundTime+0x82>
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	4a2e      	ldr	r2, [pc, #184]	; (8008bb4 <USB_SetTurnaroundTime+0x130>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d802      	bhi.n	8008b06 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008b00:	230b      	movs	r3, #11
 8008b02:	617b      	str	r3, [r7, #20]
 8008b04:	e036      	b.n	8008b74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	4a2a      	ldr	r2, [pc, #168]	; (8008bb4 <USB_SetTurnaroundTime+0x130>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d906      	bls.n	8008b1c <USB_SetTurnaroundTime+0x98>
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	4a29      	ldr	r2, [pc, #164]	; (8008bb8 <USB_SetTurnaroundTime+0x134>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d802      	bhi.n	8008b1c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008b16:	230a      	movs	r3, #10
 8008b18:	617b      	str	r3, [r7, #20]
 8008b1a:	e02b      	b.n	8008b74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	4a26      	ldr	r2, [pc, #152]	; (8008bb8 <USB_SetTurnaroundTime+0x134>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d906      	bls.n	8008b32 <USB_SetTurnaroundTime+0xae>
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	4a25      	ldr	r2, [pc, #148]	; (8008bbc <USB_SetTurnaroundTime+0x138>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d802      	bhi.n	8008b32 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008b2c:	2309      	movs	r3, #9
 8008b2e:	617b      	str	r3, [r7, #20]
 8008b30:	e020      	b.n	8008b74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	4a21      	ldr	r2, [pc, #132]	; (8008bbc <USB_SetTurnaroundTime+0x138>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d906      	bls.n	8008b48 <USB_SetTurnaroundTime+0xc4>
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	4a20      	ldr	r2, [pc, #128]	; (8008bc0 <USB_SetTurnaroundTime+0x13c>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d802      	bhi.n	8008b48 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008b42:	2308      	movs	r3, #8
 8008b44:	617b      	str	r3, [r7, #20]
 8008b46:	e015      	b.n	8008b74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	4a1d      	ldr	r2, [pc, #116]	; (8008bc0 <USB_SetTurnaroundTime+0x13c>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d906      	bls.n	8008b5e <USB_SetTurnaroundTime+0xda>
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	4a1c      	ldr	r2, [pc, #112]	; (8008bc4 <USB_SetTurnaroundTime+0x140>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d802      	bhi.n	8008b5e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008b58:	2307      	movs	r3, #7
 8008b5a:	617b      	str	r3, [r7, #20]
 8008b5c:	e00a      	b.n	8008b74 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008b5e:	2306      	movs	r3, #6
 8008b60:	617b      	str	r3, [r7, #20]
 8008b62:	e007      	b.n	8008b74 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008b64:	79fb      	ldrb	r3, [r7, #7]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d102      	bne.n	8008b70 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008b6a:	2309      	movs	r3, #9
 8008b6c:	617b      	str	r3, [r7, #20]
 8008b6e:	e001      	b.n	8008b74 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008b70:	2309      	movs	r3, #9
 8008b72:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	68da      	ldr	r2, [r3, #12]
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	029b      	lsls	r3, r3, #10
 8008b88:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008b8c:	431a      	orrs	r2, r3
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	371c      	adds	r7, #28
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	00d8acbf 	.word	0x00d8acbf
 8008ba4:	00e4e1bf 	.word	0x00e4e1bf
 8008ba8:	00f423ff 	.word	0x00f423ff
 8008bac:	0106737f 	.word	0x0106737f
 8008bb0:	011a499f 	.word	0x011a499f
 8008bb4:	01312cff 	.word	0x01312cff
 8008bb8:	014ca43f 	.word	0x014ca43f
 8008bbc:	016e35ff 	.word	0x016e35ff
 8008bc0:	01a6ab1f 	.word	0x01a6ab1f
 8008bc4:	01e847ff 	.word	0x01e847ff

08008bc8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	f043 0201 	orr.w	r2, r3, #1
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	370c      	adds	r7, #12
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008bea:	b480      	push	{r7}
 8008bec:	b083      	sub	sp, #12
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	f023 0201 	bic.w	r2, r3, #1
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	460b      	mov	r3, r1
 8008c16:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008c24:	78fb      	ldrb	r3, [r7, #3]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d106      	bne.n	8008c38 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	60da      	str	r2, [r3, #12]
 8008c36:	e00b      	b.n	8008c50 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008c38:	78fb      	ldrb	r3, [r7, #3]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d106      	bne.n	8008c4c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	60da      	str	r2, [r3, #12]
 8008c4a:	e001      	b.n	8008c50 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e003      	b.n	8008c58 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008c50:	2032      	movs	r0, #50	; 0x32
 8008c52:	f7f9 fb89 	bl	8002368 <HAL_Delay>

  return HAL_OK;
 8008c56:	2300      	movs	r3, #0
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3708      	adds	r7, #8
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c60:	b084      	sub	sp, #16
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b086      	sub	sp, #24
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
 8008c6a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008c6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008c72:	2300      	movs	r3, #0
 8008c74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	613b      	str	r3, [r7, #16]
 8008c7e:	e009      	b.n	8008c94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	3340      	adds	r3, #64	; 0x40
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	4413      	add	r3, r2
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	3301      	adds	r3, #1
 8008c92:	613b      	str	r3, [r7, #16]
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	2b0e      	cmp	r3, #14
 8008c98:	d9f2      	bls.n	8008c80 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d11c      	bne.n	8008cda <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cae:	f043 0302 	orr.w	r3, r3, #2
 8008cb2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	639a      	str	r2, [r3, #56]	; 0x38
 8008cd8:	e00b      	b.n	8008cf2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cde:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d04:	4619      	mov	r1, r3
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	680b      	ldr	r3, [r1, #0]
 8008d10:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d10c      	bne.n	8008d32 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d104      	bne.n	8008d28 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008d1e:	2100      	movs	r1, #0
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 f949 	bl	8008fb8 <USB_SetDevSpeed>
 8008d26:	e008      	b.n	8008d3a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008d28:	2101      	movs	r1, #1
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f944 	bl	8008fb8 <USB_SetDevSpeed>
 8008d30:	e003      	b.n	8008d3a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008d32:	2103      	movs	r1, #3
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 f93f 	bl	8008fb8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008d3a:	2110      	movs	r1, #16
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 f8f3 	bl	8008f28 <USB_FlushTxFifo>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d001      	beq.n	8008d4c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 f911 	bl	8008f74 <USB_FlushRxFifo>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d001      	beq.n	8008d5c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d62:	461a      	mov	r2, r3
 8008d64:	2300      	movs	r3, #0
 8008d66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d6e:	461a      	mov	r2, r3
 8008d70:	2300      	movs	r3, #0
 8008d72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008d80:	2300      	movs	r3, #0
 8008d82:	613b      	str	r3, [r7, #16]
 8008d84:	e043      	b.n	8008e0e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	015a      	lsls	r2, r3, #5
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d9c:	d118      	bne.n	8008dd0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d10a      	bne.n	8008dba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	015a      	lsls	r2, r3, #5
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	4413      	add	r3, r2
 8008dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008db0:	461a      	mov	r2, r3
 8008db2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008db6:	6013      	str	r3, [r2, #0]
 8008db8:	e013      	b.n	8008de2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	015a      	lsls	r2, r3, #5
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008dcc:	6013      	str	r3, [r2, #0]
 8008dce:	e008      	b.n	8008de2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	015a      	lsls	r2, r3, #5
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	4413      	add	r3, r2
 8008dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ddc:	461a      	mov	r2, r3
 8008dde:	2300      	movs	r3, #0
 8008de0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	015a      	lsls	r2, r3, #5
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	4413      	add	r3, r2
 8008dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dee:	461a      	mov	r2, r3
 8008df0:	2300      	movs	r3, #0
 8008df2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	015a      	lsls	r2, r3, #5
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e00:	461a      	mov	r2, r3
 8008e02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	613b      	str	r3, [r7, #16]
 8008e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e10:	693a      	ldr	r2, [r7, #16]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d3b7      	bcc.n	8008d86 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e16:	2300      	movs	r3, #0
 8008e18:	613b      	str	r3, [r7, #16]
 8008e1a:	e043      	b.n	8008ea4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	015a      	lsls	r2, r3, #5
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	4413      	add	r3, r2
 8008e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e32:	d118      	bne.n	8008e66 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d10a      	bne.n	8008e50 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	015a      	lsls	r2, r3, #5
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	4413      	add	r3, r2
 8008e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e46:	461a      	mov	r2, r3
 8008e48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e4c:	6013      	str	r3, [r2, #0]
 8008e4e:	e013      	b.n	8008e78 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	015a      	lsls	r2, r3, #5
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	4413      	add	r3, r2
 8008e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e62:	6013      	str	r3, [r2, #0]
 8008e64:	e008      	b.n	8008e78 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	015a      	lsls	r2, r3, #5
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e72:	461a      	mov	r2, r3
 8008e74:	2300      	movs	r3, #0
 8008e76:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	015a      	lsls	r2, r3, #5
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	4413      	add	r3, r2
 8008e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e84:	461a      	mov	r2, r3
 8008e86:	2300      	movs	r3, #0
 8008e88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	015a      	lsls	r2, r3, #5
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	4413      	add	r3, r2
 8008e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e96:	461a      	mov	r2, r3
 8008e98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	613b      	str	r3, [r7, #16]
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea6:	693a      	ldr	r2, [r7, #16]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d3b7      	bcc.n	8008e1c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eb2:	691b      	ldr	r3, [r3, #16]
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008eba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ebe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008ecc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d105      	bne.n	8008ee0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	f043 0210 	orr.w	r2, r3, #16
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	699a      	ldr	r2, [r3, #24]
 8008ee4:	4b0f      	ldr	r3, [pc, #60]	; (8008f24 <USB_DevInit+0x2c4>)
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d005      	beq.n	8008efe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	699b      	ldr	r3, [r3, #24]
 8008ef6:	f043 0208 	orr.w	r2, r3, #8
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d107      	bne.n	8008f14 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	699b      	ldr	r3, [r3, #24]
 8008f08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f0c:	f043 0304 	orr.w	r3, r3, #4
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3718      	adds	r7, #24
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f20:	b004      	add	sp, #16
 8008f22:	4770      	bx	lr
 8008f24:	803c3800 	.word	0x803c3800

08008f28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008f32:	2300      	movs	r3, #0
 8008f34:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	019b      	lsls	r3, r3, #6
 8008f3a:	f043 0220 	orr.w	r2, r3, #32
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	3301      	adds	r3, #1
 8008f46:	60fb      	str	r3, [r7, #12]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	4a09      	ldr	r2, [pc, #36]	; (8008f70 <USB_FlushTxFifo+0x48>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d901      	bls.n	8008f54 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008f50:	2303      	movs	r3, #3
 8008f52:	e006      	b.n	8008f62 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	691b      	ldr	r3, [r3, #16]
 8008f58:	f003 0320 	and.w	r3, r3, #32
 8008f5c:	2b20      	cmp	r3, #32
 8008f5e:	d0f0      	beq.n	8008f42 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3714      	adds	r7, #20
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr
 8008f6e:	bf00      	nop
 8008f70:	00030d40 	.word	0x00030d40

08008f74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b085      	sub	sp, #20
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2210      	movs	r2, #16
 8008f84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	3301      	adds	r3, #1
 8008f8a:	60fb      	str	r3, [r7, #12]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	4a09      	ldr	r2, [pc, #36]	; (8008fb4 <USB_FlushRxFifo+0x40>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d901      	bls.n	8008f98 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008f94:	2303      	movs	r3, #3
 8008f96:	e006      	b.n	8008fa6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	691b      	ldr	r3, [r3, #16]
 8008f9c:	f003 0310 	and.w	r3, r3, #16
 8008fa0:	2b10      	cmp	r3, #16
 8008fa2:	d0f0      	beq.n	8008f86 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3714      	adds	r7, #20
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop
 8008fb4:	00030d40 	.word	0x00030d40

08008fb8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	78fb      	ldrb	r3, [r7, #3]
 8008fd2:	68f9      	ldr	r1, [r7, #12]
 8008fd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr

08008fea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008fea:	b480      	push	{r7}
 8008fec:	b087      	sub	sp, #28
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	f003 0306 	and.w	r3, r3, #6
 8009002:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d102      	bne.n	8009010 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800900a:	2300      	movs	r3, #0
 800900c:	75fb      	strb	r3, [r7, #23]
 800900e:	e00a      	b.n	8009026 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2b02      	cmp	r3, #2
 8009014:	d002      	beq.n	800901c <USB_GetDevSpeed+0x32>
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2b06      	cmp	r3, #6
 800901a:	d102      	bne.n	8009022 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800901c:	2302      	movs	r3, #2
 800901e:	75fb      	strb	r3, [r7, #23]
 8009020:	e001      	b.n	8009026 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009022:	230f      	movs	r3, #15
 8009024:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009026:	7dfb      	ldrb	r3, [r7, #23]
}
 8009028:	4618      	mov	r0, r3
 800902a:	371c      	adds	r7, #28
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009034:	b480      	push	{r7}
 8009036:	b085      	sub	sp, #20
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	785b      	ldrb	r3, [r3, #1]
 800904c:	2b01      	cmp	r3, #1
 800904e:	d13a      	bne.n	80090c6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009056:	69da      	ldr	r2, [r3, #28]
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	f003 030f 	and.w	r3, r3, #15
 8009060:	2101      	movs	r1, #1
 8009062:	fa01 f303 	lsl.w	r3, r1, r3
 8009066:	b29b      	uxth	r3, r3
 8009068:	68f9      	ldr	r1, [r7, #12]
 800906a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800906e:	4313      	orrs	r3, r2
 8009070:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	015a      	lsls	r2, r3, #5
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	4413      	add	r3, r2
 800907a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009084:	2b00      	cmp	r3, #0
 8009086:	d155      	bne.n	8009134 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	015a      	lsls	r2, r3, #5
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	4413      	add	r3, r2
 8009090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	78db      	ldrb	r3, [r3, #3]
 80090a2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80090a4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	059b      	lsls	r3, r3, #22
 80090aa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80090ac:	4313      	orrs	r3, r2
 80090ae:	68ba      	ldr	r2, [r7, #8]
 80090b0:	0151      	lsls	r1, r2, #5
 80090b2:	68fa      	ldr	r2, [r7, #12]
 80090b4:	440a      	add	r2, r1
 80090b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090c2:	6013      	str	r3, [r2, #0]
 80090c4:	e036      	b.n	8009134 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090cc:	69da      	ldr	r2, [r3, #28]
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	f003 030f 	and.w	r3, r3, #15
 80090d6:	2101      	movs	r1, #1
 80090d8:	fa01 f303 	lsl.w	r3, r1, r3
 80090dc:	041b      	lsls	r3, r3, #16
 80090de:	68f9      	ldr	r1, [r7, #12]
 80090e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090e4:	4313      	orrs	r3, r2
 80090e6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	015a      	lsls	r2, r3, #5
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	4413      	add	r3, r2
 80090f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d11a      	bne.n	8009134 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	015a      	lsls	r2, r3, #5
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	4413      	add	r3, r2
 8009106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	78db      	ldrb	r3, [r3, #3]
 8009118:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800911a:	430b      	orrs	r3, r1
 800911c:	4313      	orrs	r3, r2
 800911e:	68ba      	ldr	r2, [r7, #8]
 8009120:	0151      	lsls	r1, r2, #5
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	440a      	add	r2, r1
 8009126:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800912a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800912e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009132:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009134:	2300      	movs	r3, #0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3714      	adds	r7, #20
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr
	...

08009144 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	785b      	ldrb	r3, [r3, #1]
 800915c:	2b01      	cmp	r3, #1
 800915e:	d161      	bne.n	8009224 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	015a      	lsls	r2, r3, #5
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	4413      	add	r3, r2
 8009168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009172:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009176:	d11f      	bne.n	80091b8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	015a      	lsls	r2, r3, #5
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	4413      	add	r3, r2
 8009180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	0151      	lsls	r1, r2, #5
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	440a      	add	r2, r1
 800918e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009192:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009196:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	015a      	lsls	r2, r3, #5
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	4413      	add	r3, r2
 80091a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	68ba      	ldr	r2, [r7, #8]
 80091a8:	0151      	lsls	r1, r2, #5
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	440a      	add	r2, r1
 80091ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	f003 030f 	and.w	r3, r3, #15
 80091c8:	2101      	movs	r1, #1
 80091ca:	fa01 f303 	lsl.w	r3, r1, r3
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	43db      	mvns	r3, r3
 80091d2:	68f9      	ldr	r1, [r7, #12]
 80091d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091d8:	4013      	ands	r3, r2
 80091da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091e2:	69da      	ldr	r2, [r3, #28]
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	f003 030f 	and.w	r3, r3, #15
 80091ec:	2101      	movs	r1, #1
 80091ee:	fa01 f303 	lsl.w	r3, r1, r3
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	43db      	mvns	r3, r3
 80091f6:	68f9      	ldr	r1, [r7, #12]
 80091f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091fc:	4013      	ands	r3, r2
 80091fe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	015a      	lsls	r2, r3, #5
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	4413      	add	r3, r2
 8009208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	0159      	lsls	r1, r3, #5
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	440b      	add	r3, r1
 8009216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800921a:	4619      	mov	r1, r3
 800921c:	4b35      	ldr	r3, [pc, #212]	; (80092f4 <USB_DeactivateEndpoint+0x1b0>)
 800921e:	4013      	ands	r3, r2
 8009220:	600b      	str	r3, [r1, #0]
 8009222:	e060      	b.n	80092e6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	015a      	lsls	r2, r3, #5
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	4413      	add	r3, r2
 800922c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009236:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800923a:	d11f      	bne.n	800927c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	015a      	lsls	r2, r3, #5
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	4413      	add	r3, r2
 8009244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	68ba      	ldr	r2, [r7, #8]
 800924c:	0151      	lsls	r1, r2, #5
 800924e:	68fa      	ldr	r2, [r7, #12]
 8009250:	440a      	add	r2, r1
 8009252:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009256:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800925a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	015a      	lsls	r2, r3, #5
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	4413      	add	r3, r2
 8009264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	68ba      	ldr	r2, [r7, #8]
 800926c:	0151      	lsls	r1, r2, #5
 800926e:	68fa      	ldr	r2, [r7, #12]
 8009270:	440a      	add	r2, r1
 8009272:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009276:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800927a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009282:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	f003 030f 	and.w	r3, r3, #15
 800928c:	2101      	movs	r1, #1
 800928e:	fa01 f303 	lsl.w	r3, r1, r3
 8009292:	041b      	lsls	r3, r3, #16
 8009294:	43db      	mvns	r3, r3
 8009296:	68f9      	ldr	r1, [r7, #12]
 8009298:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800929c:	4013      	ands	r3, r2
 800929e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092a6:	69da      	ldr	r2, [r3, #28]
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	f003 030f 	and.w	r3, r3, #15
 80092b0:	2101      	movs	r1, #1
 80092b2:	fa01 f303 	lsl.w	r3, r1, r3
 80092b6:	041b      	lsls	r3, r3, #16
 80092b8:	43db      	mvns	r3, r3
 80092ba:	68f9      	ldr	r1, [r7, #12]
 80092bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092c0:	4013      	ands	r3, r2
 80092c2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	015a      	lsls	r2, r3, #5
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	4413      	add	r3, r2
 80092cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	0159      	lsls	r1, r3, #5
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	440b      	add	r3, r1
 80092da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092de:	4619      	mov	r1, r3
 80092e0:	4b05      	ldr	r3, [pc, #20]	; (80092f8 <USB_DeactivateEndpoint+0x1b4>)
 80092e2:	4013      	ands	r3, r2
 80092e4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80092e6:	2300      	movs	r3, #0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3714      	adds	r7, #20
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr
 80092f4:	ec337800 	.word	0xec337800
 80092f8:	eff37800 	.word	0xeff37800

080092fc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b08a      	sub	sp, #40	; 0x28
 8009300:	af02      	add	r7, sp, #8
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	4613      	mov	r3, r2
 8009308:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	785b      	ldrb	r3, [r3, #1]
 8009318:	2b01      	cmp	r3, #1
 800931a:	f040 815c 	bne.w	80095d6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	695b      	ldr	r3, [r3, #20]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d132      	bne.n	800938c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	015a      	lsls	r2, r3, #5
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	4413      	add	r3, r2
 800932e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	69ba      	ldr	r2, [r7, #24]
 8009336:	0151      	lsls	r1, r2, #5
 8009338:	69fa      	ldr	r2, [r7, #28]
 800933a:	440a      	add	r2, r1
 800933c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009340:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009344:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009348:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	015a      	lsls	r2, r3, #5
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	4413      	add	r3, r2
 8009352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	69ba      	ldr	r2, [r7, #24]
 800935a:	0151      	lsls	r1, r2, #5
 800935c:	69fa      	ldr	r2, [r7, #28]
 800935e:	440a      	add	r2, r1
 8009360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009364:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009368:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	015a      	lsls	r2, r3, #5
 800936e:	69fb      	ldr	r3, [r7, #28]
 8009370:	4413      	add	r3, r2
 8009372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	69ba      	ldr	r2, [r7, #24]
 800937a:	0151      	lsls	r1, r2, #5
 800937c:	69fa      	ldr	r2, [r7, #28]
 800937e:	440a      	add	r2, r1
 8009380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009384:	0cdb      	lsrs	r3, r3, #19
 8009386:	04db      	lsls	r3, r3, #19
 8009388:	6113      	str	r3, [r2, #16]
 800938a:	e074      	b.n	8009476 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	015a      	lsls	r2, r3, #5
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	4413      	add	r3, r2
 8009394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	69ba      	ldr	r2, [r7, #24]
 800939c:	0151      	lsls	r1, r2, #5
 800939e:	69fa      	ldr	r2, [r7, #28]
 80093a0:	440a      	add	r2, r1
 80093a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093a6:	0cdb      	lsrs	r3, r3, #19
 80093a8:	04db      	lsls	r3, r3, #19
 80093aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	015a      	lsls	r2, r3, #5
 80093b0:	69fb      	ldr	r3, [r7, #28]
 80093b2:	4413      	add	r3, r2
 80093b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	69ba      	ldr	r2, [r7, #24]
 80093bc:	0151      	lsls	r1, r2, #5
 80093be:	69fa      	ldr	r2, [r7, #28]
 80093c0:	440a      	add	r2, r1
 80093c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80093ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80093ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	015a      	lsls	r2, r3, #5
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	4413      	add	r3, r2
 80093d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093dc:	691a      	ldr	r2, [r3, #16]
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	6959      	ldr	r1, [r3, #20]
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	440b      	add	r3, r1
 80093e8:	1e59      	subs	r1, r3, #1
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80093f2:	04d9      	lsls	r1, r3, #19
 80093f4:	4b9d      	ldr	r3, [pc, #628]	; (800966c <USB_EPStartXfer+0x370>)
 80093f6:	400b      	ands	r3, r1
 80093f8:	69b9      	ldr	r1, [r7, #24]
 80093fa:	0148      	lsls	r0, r1, #5
 80093fc:	69f9      	ldr	r1, [r7, #28]
 80093fe:	4401      	add	r1, r0
 8009400:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009404:	4313      	orrs	r3, r2
 8009406:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	015a      	lsls	r2, r3, #5
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	4413      	add	r3, r2
 8009410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009414:	691a      	ldr	r2, [r3, #16]
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	695b      	ldr	r3, [r3, #20]
 800941a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800941e:	69b9      	ldr	r1, [r7, #24]
 8009420:	0148      	lsls	r0, r1, #5
 8009422:	69f9      	ldr	r1, [r7, #28]
 8009424:	4401      	add	r1, r0
 8009426:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800942a:	4313      	orrs	r3, r2
 800942c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	78db      	ldrb	r3, [r3, #3]
 8009432:	2b01      	cmp	r3, #1
 8009434:	d11f      	bne.n	8009476 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	015a      	lsls	r2, r3, #5
 800943a:	69fb      	ldr	r3, [r7, #28]
 800943c:	4413      	add	r3, r2
 800943e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009442:	691b      	ldr	r3, [r3, #16]
 8009444:	69ba      	ldr	r2, [r7, #24]
 8009446:	0151      	lsls	r1, r2, #5
 8009448:	69fa      	ldr	r2, [r7, #28]
 800944a:	440a      	add	r2, r1
 800944c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009450:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009454:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	015a      	lsls	r2, r3, #5
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	4413      	add	r3, r2
 800945e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009462:	691b      	ldr	r3, [r3, #16]
 8009464:	69ba      	ldr	r2, [r7, #24]
 8009466:	0151      	lsls	r1, r2, #5
 8009468:	69fa      	ldr	r2, [r7, #28]
 800946a:	440a      	add	r2, r1
 800946c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009470:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009474:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009476:	79fb      	ldrb	r3, [r7, #7]
 8009478:	2b01      	cmp	r3, #1
 800947a:	d14b      	bne.n	8009514 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	691b      	ldr	r3, [r3, #16]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d009      	beq.n	8009498 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009484:	69bb      	ldr	r3, [r7, #24]
 8009486:	015a      	lsls	r2, r3, #5
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	4413      	add	r3, r2
 800948c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009490:	461a      	mov	r2, r3
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	691b      	ldr	r3, [r3, #16]
 8009496:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	78db      	ldrb	r3, [r3, #3]
 800949c:	2b01      	cmp	r3, #1
 800949e:	d128      	bne.n	80094f2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d110      	bne.n	80094d2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	015a      	lsls	r2, r3, #5
 80094b4:	69fb      	ldr	r3, [r7, #28]
 80094b6:	4413      	add	r3, r2
 80094b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	69ba      	ldr	r2, [r7, #24]
 80094c0:	0151      	lsls	r1, r2, #5
 80094c2:	69fa      	ldr	r2, [r7, #28]
 80094c4:	440a      	add	r2, r1
 80094c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80094ce:	6013      	str	r3, [r2, #0]
 80094d0:	e00f      	b.n	80094f2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	015a      	lsls	r2, r3, #5
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	4413      	add	r3, r2
 80094da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	69ba      	ldr	r2, [r7, #24]
 80094e2:	0151      	lsls	r1, r2, #5
 80094e4:	69fa      	ldr	r2, [r7, #28]
 80094e6:	440a      	add	r2, r1
 80094e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094f0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	015a      	lsls	r2, r3, #5
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	4413      	add	r3, r2
 80094fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	69ba      	ldr	r2, [r7, #24]
 8009502:	0151      	lsls	r1, r2, #5
 8009504:	69fa      	ldr	r2, [r7, #28]
 8009506:	440a      	add	r2, r1
 8009508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800950c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009510:	6013      	str	r3, [r2, #0]
 8009512:	e12f      	b.n	8009774 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	015a      	lsls	r2, r3, #5
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	4413      	add	r3, r2
 800951c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	69ba      	ldr	r2, [r7, #24]
 8009524:	0151      	lsls	r1, r2, #5
 8009526:	69fa      	ldr	r2, [r7, #28]
 8009528:	440a      	add	r2, r1
 800952a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800952e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009532:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	78db      	ldrb	r3, [r3, #3]
 8009538:	2b01      	cmp	r3, #1
 800953a:	d015      	beq.n	8009568 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	695b      	ldr	r3, [r3, #20]
 8009540:	2b00      	cmp	r3, #0
 8009542:	f000 8117 	beq.w	8009774 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009546:	69fb      	ldr	r3, [r7, #28]
 8009548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800954c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	f003 030f 	and.w	r3, r3, #15
 8009556:	2101      	movs	r1, #1
 8009558:	fa01 f303 	lsl.w	r3, r1, r3
 800955c:	69f9      	ldr	r1, [r7, #28]
 800955e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009562:	4313      	orrs	r3, r2
 8009564:	634b      	str	r3, [r1, #52]	; 0x34
 8009566:	e105      	b.n	8009774 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009574:	2b00      	cmp	r3, #0
 8009576:	d110      	bne.n	800959a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	015a      	lsls	r2, r3, #5
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	4413      	add	r3, r2
 8009580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	69ba      	ldr	r2, [r7, #24]
 8009588:	0151      	lsls	r1, r2, #5
 800958a:	69fa      	ldr	r2, [r7, #28]
 800958c:	440a      	add	r2, r1
 800958e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009592:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009596:	6013      	str	r3, [r2, #0]
 8009598:	e00f      	b.n	80095ba <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	015a      	lsls	r2, r3, #5
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	4413      	add	r3, r2
 80095a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	69ba      	ldr	r2, [r7, #24]
 80095aa:	0151      	lsls	r1, r2, #5
 80095ac:	69fa      	ldr	r2, [r7, #28]
 80095ae:	440a      	add	r2, r1
 80095b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095b8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	68d9      	ldr	r1, [r3, #12]
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	781a      	ldrb	r2, [r3, #0]
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	695b      	ldr	r3, [r3, #20]
 80095c6:	b298      	uxth	r0, r3
 80095c8:	79fb      	ldrb	r3, [r7, #7]
 80095ca:	9300      	str	r3, [sp, #0]
 80095cc:	4603      	mov	r3, r0
 80095ce:	68f8      	ldr	r0, [r7, #12]
 80095d0:	f000 fa2b 	bl	8009a2a <USB_WritePacket>
 80095d4:	e0ce      	b.n	8009774 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	015a      	lsls	r2, r3, #5
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	4413      	add	r3, r2
 80095de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	69ba      	ldr	r2, [r7, #24]
 80095e6:	0151      	lsls	r1, r2, #5
 80095e8:	69fa      	ldr	r2, [r7, #28]
 80095ea:	440a      	add	r2, r1
 80095ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095f0:	0cdb      	lsrs	r3, r3, #19
 80095f2:	04db      	lsls	r3, r3, #19
 80095f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	015a      	lsls	r2, r3, #5
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	4413      	add	r3, r2
 80095fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009602:	691b      	ldr	r3, [r3, #16]
 8009604:	69ba      	ldr	r2, [r7, #24]
 8009606:	0151      	lsls	r1, r2, #5
 8009608:	69fa      	ldr	r2, [r7, #28]
 800960a:	440a      	add	r2, r1
 800960c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009610:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009614:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009618:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	695b      	ldr	r3, [r3, #20]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d126      	bne.n	8009670 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009622:	69bb      	ldr	r3, [r7, #24]
 8009624:	015a      	lsls	r2, r3, #5
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	4413      	add	r3, r2
 800962a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800962e:	691a      	ldr	r2, [r3, #16]
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009638:	69b9      	ldr	r1, [r7, #24]
 800963a:	0148      	lsls	r0, r1, #5
 800963c:	69f9      	ldr	r1, [r7, #28]
 800963e:	4401      	add	r1, r0
 8009640:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009644:	4313      	orrs	r3, r2
 8009646:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009648:	69bb      	ldr	r3, [r7, #24]
 800964a:	015a      	lsls	r2, r3, #5
 800964c:	69fb      	ldr	r3, [r7, #28]
 800964e:	4413      	add	r3, r2
 8009650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	69ba      	ldr	r2, [r7, #24]
 8009658:	0151      	lsls	r1, r2, #5
 800965a:	69fa      	ldr	r2, [r7, #28]
 800965c:	440a      	add	r2, r1
 800965e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009662:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009666:	6113      	str	r3, [r2, #16]
 8009668:	e036      	b.n	80096d8 <USB_EPStartXfer+0x3dc>
 800966a:	bf00      	nop
 800966c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	695a      	ldr	r2, [r3, #20]
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	689b      	ldr	r3, [r3, #8]
 8009678:	4413      	add	r3, r2
 800967a:	1e5a      	subs	r2, r3, #1
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	fbb2 f3f3 	udiv	r3, r2, r3
 8009684:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	015a      	lsls	r2, r3, #5
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	4413      	add	r3, r2
 800968e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009692:	691a      	ldr	r2, [r3, #16]
 8009694:	8afb      	ldrh	r3, [r7, #22]
 8009696:	04d9      	lsls	r1, r3, #19
 8009698:	4b39      	ldr	r3, [pc, #228]	; (8009780 <USB_EPStartXfer+0x484>)
 800969a:	400b      	ands	r3, r1
 800969c:	69b9      	ldr	r1, [r7, #24]
 800969e:	0148      	lsls	r0, r1, #5
 80096a0:	69f9      	ldr	r1, [r7, #28]
 80096a2:	4401      	add	r1, r0
 80096a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80096a8:	4313      	orrs	r3, r2
 80096aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	015a      	lsls	r2, r3, #5
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	4413      	add	r3, r2
 80096b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096b8:	691a      	ldr	r2, [r3, #16]
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	8af9      	ldrh	r1, [r7, #22]
 80096c0:	fb01 f303 	mul.w	r3, r1, r3
 80096c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096c8:	69b9      	ldr	r1, [r7, #24]
 80096ca:	0148      	lsls	r0, r1, #5
 80096cc:	69f9      	ldr	r1, [r7, #28]
 80096ce:	4401      	add	r1, r0
 80096d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80096d4:	4313      	orrs	r3, r2
 80096d6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80096d8:	79fb      	ldrb	r3, [r7, #7]
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d10d      	bne.n	80096fa <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d009      	beq.n	80096fa <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	68d9      	ldr	r1, [r3, #12]
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	015a      	lsls	r2, r3, #5
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	4413      	add	r3, r2
 80096f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096f6:	460a      	mov	r2, r1
 80096f8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	78db      	ldrb	r3, [r3, #3]
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d128      	bne.n	8009754 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009702:	69fb      	ldr	r3, [r7, #28]
 8009704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800970e:	2b00      	cmp	r3, #0
 8009710:	d110      	bne.n	8009734 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	015a      	lsls	r2, r3, #5
 8009716:	69fb      	ldr	r3, [r7, #28]
 8009718:	4413      	add	r3, r2
 800971a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	69ba      	ldr	r2, [r7, #24]
 8009722:	0151      	lsls	r1, r2, #5
 8009724:	69fa      	ldr	r2, [r7, #28]
 8009726:	440a      	add	r2, r1
 8009728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800972c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009730:	6013      	str	r3, [r2, #0]
 8009732:	e00f      	b.n	8009754 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009734:	69bb      	ldr	r3, [r7, #24]
 8009736:	015a      	lsls	r2, r3, #5
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	4413      	add	r3, r2
 800973c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	69ba      	ldr	r2, [r7, #24]
 8009744:	0151      	lsls	r1, r2, #5
 8009746:	69fa      	ldr	r2, [r7, #28]
 8009748:	440a      	add	r2, r1
 800974a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800974e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009752:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	015a      	lsls	r2, r3, #5
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	4413      	add	r3, r2
 800975c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	69ba      	ldr	r2, [r7, #24]
 8009764:	0151      	lsls	r1, r2, #5
 8009766:	69fa      	ldr	r2, [r7, #28]
 8009768:	440a      	add	r2, r1
 800976a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800976e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009772:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3720      	adds	r7, #32
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	1ff80000 	.word	0x1ff80000

08009784 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009784:	b480      	push	{r7}
 8009786:	b087      	sub	sp, #28
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	4613      	mov	r3, r2
 8009790:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	785b      	ldrb	r3, [r3, #1]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	f040 80cd 	bne.w	8009940 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	695b      	ldr	r3, [r3, #20]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d132      	bne.n	8009814 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	015a      	lsls	r2, r3, #5
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	4413      	add	r3, r2
 80097b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ba:	691b      	ldr	r3, [r3, #16]
 80097bc:	693a      	ldr	r2, [r7, #16]
 80097be:	0151      	lsls	r1, r2, #5
 80097c0:	697a      	ldr	r2, [r7, #20]
 80097c2:	440a      	add	r2, r1
 80097c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80097cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80097d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	015a      	lsls	r2, r3, #5
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	4413      	add	r3, r2
 80097da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	693a      	ldr	r2, [r7, #16]
 80097e2:	0151      	lsls	r1, r2, #5
 80097e4:	697a      	ldr	r2, [r7, #20]
 80097e6:	440a      	add	r2, r1
 80097e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80097f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	015a      	lsls	r2, r3, #5
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	4413      	add	r3, r2
 80097fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	693a      	ldr	r2, [r7, #16]
 8009802:	0151      	lsls	r1, r2, #5
 8009804:	697a      	ldr	r2, [r7, #20]
 8009806:	440a      	add	r2, r1
 8009808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800980c:	0cdb      	lsrs	r3, r3, #19
 800980e:	04db      	lsls	r3, r3, #19
 8009810:	6113      	str	r3, [r2, #16]
 8009812:	e04e      	b.n	80098b2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	015a      	lsls	r2, r3, #5
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	4413      	add	r3, r2
 800981c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009820:	691b      	ldr	r3, [r3, #16]
 8009822:	693a      	ldr	r2, [r7, #16]
 8009824:	0151      	lsls	r1, r2, #5
 8009826:	697a      	ldr	r2, [r7, #20]
 8009828:	440a      	add	r2, r1
 800982a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800982e:	0cdb      	lsrs	r3, r3, #19
 8009830:	04db      	lsls	r3, r3, #19
 8009832:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	015a      	lsls	r2, r3, #5
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	4413      	add	r3, r2
 800983c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009840:	691b      	ldr	r3, [r3, #16]
 8009842:	693a      	ldr	r2, [r7, #16]
 8009844:	0151      	lsls	r1, r2, #5
 8009846:	697a      	ldr	r2, [r7, #20]
 8009848:	440a      	add	r2, r1
 800984a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800984e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009852:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009856:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	695a      	ldr	r2, [r3, #20]
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	429a      	cmp	r2, r3
 8009862:	d903      	bls.n	800986c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	689a      	ldr	r2, [r3, #8]
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	015a      	lsls	r2, r3, #5
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	4413      	add	r3, r2
 8009874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009878:	691b      	ldr	r3, [r3, #16]
 800987a:	693a      	ldr	r2, [r7, #16]
 800987c:	0151      	lsls	r1, r2, #5
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	440a      	add	r2, r1
 8009882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009886:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800988a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	015a      	lsls	r2, r3, #5
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	4413      	add	r3, r2
 8009894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009898:	691a      	ldr	r2, [r3, #16]
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	695b      	ldr	r3, [r3, #20]
 800989e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098a2:	6939      	ldr	r1, [r7, #16]
 80098a4:	0148      	lsls	r0, r1, #5
 80098a6:	6979      	ldr	r1, [r7, #20]
 80098a8:	4401      	add	r1, r0
 80098aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80098ae:	4313      	orrs	r3, r2
 80098b0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80098b2:	79fb      	ldrb	r3, [r7, #7]
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d11e      	bne.n	80098f6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	691b      	ldr	r3, [r3, #16]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d009      	beq.n	80098d4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	015a      	lsls	r2, r3, #5
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	4413      	add	r3, r2
 80098c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098cc:	461a      	mov	r2, r3
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	015a      	lsls	r2, r3, #5
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	4413      	add	r3, r2
 80098dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	693a      	ldr	r2, [r7, #16]
 80098e4:	0151      	lsls	r1, r2, #5
 80098e6:	697a      	ldr	r2, [r7, #20]
 80098e8:	440a      	add	r2, r1
 80098ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80098f2:	6013      	str	r3, [r2, #0]
 80098f4:	e092      	b.n	8009a1c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	015a      	lsls	r2, r3, #5
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	4413      	add	r3, r2
 80098fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	693a      	ldr	r2, [r7, #16]
 8009906:	0151      	lsls	r1, r2, #5
 8009908:	697a      	ldr	r2, [r7, #20]
 800990a:	440a      	add	r2, r1
 800990c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009910:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009914:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d07e      	beq.n	8009a1c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009924:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	f003 030f 	and.w	r3, r3, #15
 800992e:	2101      	movs	r1, #1
 8009930:	fa01 f303 	lsl.w	r3, r1, r3
 8009934:	6979      	ldr	r1, [r7, #20]
 8009936:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800993a:	4313      	orrs	r3, r2
 800993c:	634b      	str	r3, [r1, #52]	; 0x34
 800993e:	e06d      	b.n	8009a1c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	015a      	lsls	r2, r3, #5
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	4413      	add	r3, r2
 8009948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800994c:	691b      	ldr	r3, [r3, #16]
 800994e:	693a      	ldr	r2, [r7, #16]
 8009950:	0151      	lsls	r1, r2, #5
 8009952:	697a      	ldr	r2, [r7, #20]
 8009954:	440a      	add	r2, r1
 8009956:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800995a:	0cdb      	lsrs	r3, r3, #19
 800995c:	04db      	lsls	r3, r3, #19
 800995e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	015a      	lsls	r2, r3, #5
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	4413      	add	r3, r2
 8009968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800996c:	691b      	ldr	r3, [r3, #16]
 800996e:	693a      	ldr	r2, [r7, #16]
 8009970:	0151      	lsls	r1, r2, #5
 8009972:	697a      	ldr	r2, [r7, #20]
 8009974:	440a      	add	r2, r1
 8009976:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800997a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800997e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009982:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	695b      	ldr	r3, [r3, #20]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d003      	beq.n	8009994 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	689a      	ldr	r2, [r3, #8]
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	015a      	lsls	r2, r3, #5
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	4413      	add	r3, r2
 800999c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099a0:	691b      	ldr	r3, [r3, #16]
 80099a2:	693a      	ldr	r2, [r7, #16]
 80099a4:	0151      	lsls	r1, r2, #5
 80099a6:	697a      	ldr	r2, [r7, #20]
 80099a8:	440a      	add	r2, r1
 80099aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80099b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	015a      	lsls	r2, r3, #5
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	4413      	add	r3, r2
 80099bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099c0:	691a      	ldr	r2, [r3, #16]
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	689b      	ldr	r3, [r3, #8]
 80099c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099ca:	6939      	ldr	r1, [r7, #16]
 80099cc:	0148      	lsls	r0, r1, #5
 80099ce:	6979      	ldr	r1, [r7, #20]
 80099d0:	4401      	add	r1, r0
 80099d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80099d6:	4313      	orrs	r3, r2
 80099d8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80099da:	79fb      	ldrb	r3, [r7, #7]
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d10d      	bne.n	80099fc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d009      	beq.n	80099fc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	68d9      	ldr	r1, [r3, #12]
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	015a      	lsls	r2, r3, #5
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	4413      	add	r3, r2
 80099f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099f8:	460a      	mov	r2, r1
 80099fa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	015a      	lsls	r2, r3, #5
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	4413      	add	r3, r2
 8009a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	693a      	ldr	r2, [r7, #16]
 8009a0c:	0151      	lsls	r1, r2, #5
 8009a0e:	697a      	ldr	r2, [r7, #20]
 8009a10:	440a      	add	r2, r1
 8009a12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a1c:	2300      	movs	r3, #0
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	371c      	adds	r7, #28
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr

08009a2a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009a2a:	b480      	push	{r7}
 8009a2c:	b089      	sub	sp, #36	; 0x24
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	60f8      	str	r0, [r7, #12]
 8009a32:	60b9      	str	r1, [r7, #8]
 8009a34:	4611      	mov	r1, r2
 8009a36:	461a      	mov	r2, r3
 8009a38:	460b      	mov	r3, r1
 8009a3a:	71fb      	strb	r3, [r7, #7]
 8009a3c:	4613      	mov	r3, r2
 8009a3e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009a48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d11a      	bne.n	8009a86 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009a50:	88bb      	ldrh	r3, [r7, #4]
 8009a52:	3303      	adds	r3, #3
 8009a54:	089b      	lsrs	r3, r3, #2
 8009a56:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009a58:	2300      	movs	r3, #0
 8009a5a:	61bb      	str	r3, [r7, #24]
 8009a5c:	e00f      	b.n	8009a7e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009a5e:	79fb      	ldrb	r3, [r7, #7]
 8009a60:	031a      	lsls	r2, r3, #12
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	4413      	add	r3, r2
 8009a66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	3304      	adds	r3, #4
 8009a76:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009a78:	69bb      	ldr	r3, [r7, #24]
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	61bb      	str	r3, [r7, #24]
 8009a7e:	69ba      	ldr	r2, [r7, #24]
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d3eb      	bcc.n	8009a5e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3724      	adds	r7, #36	; 0x24
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b089      	sub	sp, #36	; 0x24
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009aaa:	88fb      	ldrh	r3, [r7, #6]
 8009aac:	3303      	adds	r3, #3
 8009aae:	089b      	lsrs	r3, r3, #2
 8009ab0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	61bb      	str	r3, [r7, #24]
 8009ab6:	e00b      	b.n	8009ad0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	601a      	str	r2, [r3, #0]
    pDest++;
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	3304      	adds	r3, #4
 8009ac8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	3301      	adds	r3, #1
 8009ace:	61bb      	str	r3, [r7, #24]
 8009ad0:	69ba      	ldr	r2, [r7, #24]
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d3ef      	bcc.n	8009ab8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009ad8:	69fb      	ldr	r3, [r7, #28]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3724      	adds	r7, #36	; 0x24
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr

08009ae6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ae6:	b480      	push	{r7}
 8009ae8:	b085      	sub	sp, #20
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
 8009aee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	785b      	ldrb	r3, [r3, #1]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d12c      	bne.n	8009b5c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	015a      	lsls	r2, r3, #5
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	4413      	add	r3, r2
 8009b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	db12      	blt.n	8009b3a <USB_EPSetStall+0x54>
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00f      	beq.n	8009b3a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	015a      	lsls	r2, r3, #5
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	4413      	add	r3, r2
 8009b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	68ba      	ldr	r2, [r7, #8]
 8009b2a:	0151      	lsls	r1, r2, #5
 8009b2c:	68fa      	ldr	r2, [r7, #12]
 8009b2e:	440a      	add	r2, r1
 8009b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009b38:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	015a      	lsls	r2, r3, #5
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	4413      	add	r3, r2
 8009b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	68ba      	ldr	r2, [r7, #8]
 8009b4a:	0151      	lsls	r1, r2, #5
 8009b4c:	68fa      	ldr	r2, [r7, #12]
 8009b4e:	440a      	add	r2, r1
 8009b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b58:	6013      	str	r3, [r2, #0]
 8009b5a:	e02b      	b.n	8009bb4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	015a      	lsls	r2, r3, #5
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	4413      	add	r3, r2
 8009b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	db12      	blt.n	8009b94 <USB_EPSetStall+0xae>
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00f      	beq.n	8009b94 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	015a      	lsls	r2, r3, #5
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	68ba      	ldr	r2, [r7, #8]
 8009b84:	0151      	lsls	r1, r2, #5
 8009b86:	68fa      	ldr	r2, [r7, #12]
 8009b88:	440a      	add	r2, r1
 8009b8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009b92:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	015a      	lsls	r2, r3, #5
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	4413      	add	r3, r2
 8009b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	68ba      	ldr	r2, [r7, #8]
 8009ba4:	0151      	lsls	r1, r2, #5
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	440a      	add	r2, r1
 8009baa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009bb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009bb4:	2300      	movs	r3, #0
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3714      	adds	r7, #20
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr

08009bc2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009bc2:	b480      	push	{r7}
 8009bc4:	b085      	sub	sp, #20
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	785b      	ldrb	r3, [r3, #1]
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d128      	bne.n	8009c30 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	015a      	lsls	r2, r3, #5
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	4413      	add	r3, r2
 8009be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68ba      	ldr	r2, [r7, #8]
 8009bee:	0151      	lsls	r1, r2, #5
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	440a      	add	r2, r1
 8009bf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bf8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009bfc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	78db      	ldrb	r3, [r3, #3]
 8009c02:	2b03      	cmp	r3, #3
 8009c04:	d003      	beq.n	8009c0e <USB_EPClearStall+0x4c>
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	78db      	ldrb	r3, [r3, #3]
 8009c0a:	2b02      	cmp	r3, #2
 8009c0c:	d138      	bne.n	8009c80 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	015a      	lsls	r2, r3, #5
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	4413      	add	r3, r2
 8009c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	68ba      	ldr	r2, [r7, #8]
 8009c1e:	0151      	lsls	r1, r2, #5
 8009c20:	68fa      	ldr	r2, [r7, #12]
 8009c22:	440a      	add	r2, r1
 8009c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c2c:	6013      	str	r3, [r2, #0]
 8009c2e:	e027      	b.n	8009c80 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	015a      	lsls	r2, r3, #5
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	4413      	add	r3, r2
 8009c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	68ba      	ldr	r2, [r7, #8]
 8009c40:	0151      	lsls	r1, r2, #5
 8009c42:	68fa      	ldr	r2, [r7, #12]
 8009c44:	440a      	add	r2, r1
 8009c46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c4e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	78db      	ldrb	r3, [r3, #3]
 8009c54:	2b03      	cmp	r3, #3
 8009c56:	d003      	beq.n	8009c60 <USB_EPClearStall+0x9e>
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	78db      	ldrb	r3, [r3, #3]
 8009c5c:	2b02      	cmp	r3, #2
 8009c5e:	d10f      	bne.n	8009c80 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	015a      	lsls	r2, r3, #5
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	4413      	add	r3, r2
 8009c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	68ba      	ldr	r2, [r7, #8]
 8009c70:	0151      	lsls	r1, r2, #5
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	440a      	add	r2, r1
 8009c76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c7e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3714      	adds	r7, #20
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr

08009c8e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009c8e:	b480      	push	{r7}
 8009c90:	b085      	sub	sp, #20
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
 8009c96:	460b      	mov	r3, r1
 8009c98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68fa      	ldr	r2, [r7, #12]
 8009ca8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009cb0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	78fb      	ldrb	r3, [r7, #3]
 8009cbc:	011b      	lsls	r3, r3, #4
 8009cbe:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009cc2:	68f9      	ldr	r1, [r7, #12]
 8009cc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3714      	adds	r7, #20
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr

08009cda <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b084      	sub	sp, #16
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cf4:	f023 0302 	bic.w	r3, r3, #2
 8009cf8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009cfa:	2003      	movs	r0, #3
 8009cfc:	f7f8 fb34 	bl	8002368 <HAL_Delay>

  return HAL_OK;
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3710      	adds	r7, #16
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}

08009d0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b084      	sub	sp, #16
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	68fa      	ldr	r2, [r7, #12]
 8009d20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d24:	f043 0302 	orr.w	r3, r3, #2
 8009d28:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009d2a:	2003      	movs	r0, #3
 8009d2c:	f7f8 fb1c 	bl	8002368 <HAL_Delay>

  return HAL_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009d3a:	b480      	push	{r7}
 8009d3c:	b085      	sub	sp, #20
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	695b      	ldr	r3, [r3, #20]
 8009d46:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	699b      	ldr	r3, [r3, #24]
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	4013      	ands	r3, r2
 8009d50:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009d52:	68fb      	ldr	r3, [r7, #12]
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3714      	adds	r7, #20
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b085      	sub	sp, #20
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d72:	699b      	ldr	r3, [r3, #24]
 8009d74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d7c:	69db      	ldr	r3, [r3, #28]
 8009d7e:	68ba      	ldr	r2, [r7, #8]
 8009d80:	4013      	ands	r3, r2
 8009d82:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	0c1b      	lsrs	r3, r3, #16
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3714      	adds	r7, #20
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr

08009d94 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009da6:	699b      	ldr	r3, [r3, #24]
 8009da8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009db0:	69db      	ldr	r3, [r3, #28]
 8009db2:	68ba      	ldr	r2, [r7, #8]
 8009db4:	4013      	ands	r3, r2
 8009db6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	b29b      	uxth	r3, r3
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3714      	adds	r7, #20
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b085      	sub	sp, #20
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009dd8:	78fb      	ldrb	r3, [r7, #3]
 8009dda:	015a      	lsls	r2, r3, #5
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	4413      	add	r3, r2
 8009de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dee:	695b      	ldr	r3, [r3, #20]
 8009df0:	68ba      	ldr	r2, [r7, #8]
 8009df2:	4013      	ands	r3, r2
 8009df4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009df6:	68bb      	ldr	r3, [r7, #8]
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3714      	adds	r7, #20
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b087      	sub	sp, #28
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e1a:	691b      	ldr	r3, [r3, #16]
 8009e1c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e26:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009e28:	78fb      	ldrb	r3, [r7, #3]
 8009e2a:	f003 030f 	and.w	r3, r3, #15
 8009e2e:	68fa      	ldr	r2, [r7, #12]
 8009e30:	fa22 f303 	lsr.w	r3, r2, r3
 8009e34:	01db      	lsls	r3, r3, #7
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	693a      	ldr	r2, [r7, #16]
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009e3e:	78fb      	ldrb	r3, [r7, #3]
 8009e40:	015a      	lsls	r2, r3, #5
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	4413      	add	r3, r2
 8009e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	693a      	ldr	r2, [r7, #16]
 8009e4e:	4013      	ands	r3, r2
 8009e50:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009e52:	68bb      	ldr	r3, [r7, #8]
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	371c      	adds	r7, #28
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	695b      	ldr	r3, [r3, #20]
 8009e6c:	f003 0301 	and.w	r3, r3, #1
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b085      	sub	sp, #20
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e96:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009e9a:	f023 0307 	bic.w	r3, r3, #7
 8009e9e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009eb2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3714      	adds	r7, #20
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr
	...

08009ec4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b087      	sub	sp, #28
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	460b      	mov	r3, r1
 8009ece:	607a      	str	r2, [r7, #4]
 8009ed0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	333c      	adds	r3, #60	; 0x3c
 8009eda:	3304      	adds	r3, #4
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	4a26      	ldr	r2, [pc, #152]	; (8009f7c <USB_EP0_OutStart+0xb8>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d90a      	bls.n	8009efe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ef4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ef8:	d101      	bne.n	8009efe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009efa:	2300      	movs	r3, #0
 8009efc:	e037      	b.n	8009f6e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f04:	461a      	mov	r2, r3
 8009f06:	2300      	movs	r3, #0
 8009f08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f10:	691b      	ldr	r3, [r3, #16]
 8009f12:	697a      	ldr	r2, [r7, #20]
 8009f14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f24:	691b      	ldr	r3, [r3, #16]
 8009f26:	697a      	ldr	r2, [r7, #20]
 8009f28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f2c:	f043 0318 	orr.w	r3, r3, #24
 8009f30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	697a      	ldr	r2, [r7, #20]
 8009f3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f40:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009f44:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009f46:	7afb      	ldrb	r3, [r7, #11]
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d10f      	bne.n	8009f6c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f52:	461a      	mov	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	697a      	ldr	r2, [r7, #20]
 8009f62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f66:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009f6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009f6c:	2300      	movs	r3, #0
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	371c      	adds	r7, #28
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop
 8009f7c:	4f54300a 	.word	0x4f54300a

08009f80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	3301      	adds	r3, #1
 8009f90:	60fb      	str	r3, [r7, #12]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	4a13      	ldr	r2, [pc, #76]	; (8009fe4 <USB_CoreReset+0x64>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d901      	bls.n	8009f9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	e01b      	b.n	8009fd6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	daf2      	bge.n	8009f8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	691b      	ldr	r3, [r3, #16]
 8009fae:	f043 0201 	orr.w	r2, r3, #1
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	3301      	adds	r3, #1
 8009fba:	60fb      	str	r3, [r7, #12]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	4a09      	ldr	r2, [pc, #36]	; (8009fe4 <USB_CoreReset+0x64>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d901      	bls.n	8009fc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009fc4:	2303      	movs	r3, #3
 8009fc6:	e006      	b.n	8009fd6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	691b      	ldr	r3, [r3, #16]
 8009fcc:	f003 0301 	and.w	r3, r3, #1
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d0f0      	beq.n	8009fb6 <USB_CoreReset+0x36>

  return HAL_OK;
 8009fd4:	2300      	movs	r3, #0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3714      	adds	r7, #20
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr
 8009fe2:	bf00      	nop
 8009fe4:	00030d40 	.word	0x00030d40

08009fe8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009ff4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009ff8:	f002 f8d6 	bl	800c1a8 <malloc>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d105      	bne.n	800a012 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a00e:	2302      	movs	r3, #2
 800a010:	e066      	b.n	800a0e0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	68fa      	ldr	r2, [r7, #12]
 800a016:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	7c1b      	ldrb	r3, [r3, #16]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d119      	bne.n	800a056 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a022:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a026:	2202      	movs	r2, #2
 800a028:	2181      	movs	r1, #129	; 0x81
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f001 ff43 	bl	800beb6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2201      	movs	r2, #1
 800a034:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a036:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a03a:	2202      	movs	r2, #2
 800a03c:	2101      	movs	r1, #1
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f001 ff39 	bl	800beb6 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2201      	movs	r2, #1
 800a048:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2210      	movs	r2, #16
 800a050:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a054:	e016      	b.n	800a084 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a056:	2340      	movs	r3, #64	; 0x40
 800a058:	2202      	movs	r2, #2
 800a05a:	2181      	movs	r1, #129	; 0x81
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f001 ff2a 	bl	800beb6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2201      	movs	r2, #1
 800a066:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a068:	2340      	movs	r3, #64	; 0x40
 800a06a:	2202      	movs	r2, #2
 800a06c:	2101      	movs	r1, #1
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f001 ff21 	bl	800beb6 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2201      	movs	r2, #1
 800a078:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2210      	movs	r2, #16
 800a080:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a084:	2308      	movs	r3, #8
 800a086:	2203      	movs	r2, #3
 800a088:	2182      	movs	r1, #130	; 0x82
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f001 ff13 	bl	800beb6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2201      	movs	r2, #1
 800a094:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	7c1b      	ldrb	r3, [r3, #16]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d109      	bne.n	800a0ce <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a0c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0c4:	2101      	movs	r1, #1
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f001 ffe4 	bl	800c094 <USBD_LL_PrepareReceive>
 800a0cc:	e007      	b.n	800a0de <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a0d4:	2340      	movs	r3, #64	; 0x40
 800a0d6:	2101      	movs	r1, #1
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f001 ffdb 	bl	800c094 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a0de:	2300      	movs	r3, #0
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a0f8:	2181      	movs	r1, #129	; 0x81
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f001 ff01 	bl	800bf02 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2200      	movs	r2, #0
 800a104:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a106:	2101      	movs	r1, #1
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f001 fefa 	bl	800bf02 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a116:	2182      	movs	r1, #130	; 0x82
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f001 fef2 	bl	800bf02 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2200      	movs	r2, #0
 800a12a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a134:	2b00      	cmp	r3, #0
 800a136:	d00e      	beq.n	800a156 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a148:	4618      	mov	r0, r3
 800a14a:	f002 f835 	bl	800c1b8 <free>
    pdev->pClassData = NULL;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800a156:	7bfb      	ldrb	r3, [r7, #15]
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b086      	sub	sp, #24
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a170:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a172:	2300      	movs	r3, #0
 800a174:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a176:	2300      	movs	r3, #0
 800a178:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800a17a:	2300      	movs	r3, #0
 800a17c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a186:	2b00      	cmp	r3, #0
 800a188:	d03a      	beq.n	800a200 <USBD_CDC_Setup+0xa0>
 800a18a:	2b20      	cmp	r3, #32
 800a18c:	f040 8097 	bne.w	800a2be <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	88db      	ldrh	r3, [r3, #6]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d029      	beq.n	800a1ec <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	781b      	ldrb	r3, [r3, #0]
 800a19c:	b25b      	sxtb	r3, r3
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	da11      	bge.n	800a1c6 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	683a      	ldr	r2, [r7, #0]
 800a1ac:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800a1ae:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a1b0:	683a      	ldr	r2, [r7, #0]
 800a1b2:	88d2      	ldrh	r2, [r2, #6]
 800a1b4:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a1b6:	6939      	ldr	r1, [r7, #16]
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	88db      	ldrh	r3, [r3, #6]
 800a1bc:	461a      	mov	r2, r3
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f001 fa6d 	bl	800b69e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800a1c4:	e082      	b.n	800a2cc <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	785a      	ldrb	r2, [r3, #1]
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	88db      	ldrh	r3, [r3, #6]
 800a1d4:	b2da      	uxtb	r2, r3
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a1dc:	6939      	ldr	r1, [r7, #16]
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	88db      	ldrh	r3, [r3, #6]
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f001 fa86 	bl	800b6f6 <USBD_CtlPrepareRx>
    break;
 800a1ea:	e06f      	b.n	800a2cc <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	683a      	ldr	r2, [r7, #0]
 800a1f6:	7850      	ldrb	r0, [r2, #1]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	6839      	ldr	r1, [r7, #0]
 800a1fc:	4798      	blx	r3
    break;
 800a1fe:	e065      	b.n	800a2cc <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	785b      	ldrb	r3, [r3, #1]
 800a204:	2b0b      	cmp	r3, #11
 800a206:	d84f      	bhi.n	800a2a8 <USBD_CDC_Setup+0x148>
 800a208:	a201      	add	r2, pc, #4	; (adr r2, 800a210 <USBD_CDC_Setup+0xb0>)
 800a20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a20e:	bf00      	nop
 800a210:	0800a241 	.word	0x0800a241
 800a214:	0800a2b7 	.word	0x0800a2b7
 800a218:	0800a2a9 	.word	0x0800a2a9
 800a21c:	0800a2a9 	.word	0x0800a2a9
 800a220:	0800a2a9 	.word	0x0800a2a9
 800a224:	0800a2a9 	.word	0x0800a2a9
 800a228:	0800a2a9 	.word	0x0800a2a9
 800a22c:	0800a2a9 	.word	0x0800a2a9
 800a230:	0800a2a9 	.word	0x0800a2a9
 800a234:	0800a2a9 	.word	0x0800a2a9
 800a238:	0800a269 	.word	0x0800a269
 800a23c:	0800a291 	.word	0x0800a291
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a246:	2b03      	cmp	r3, #3
 800a248:	d107      	bne.n	800a25a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a24a:	f107 030c 	add.w	r3, r7, #12
 800a24e:	2202      	movs	r2, #2
 800a250:	4619      	mov	r1, r3
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f001 fa23 	bl	800b69e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a258:	e030      	b.n	800a2bc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800a25a:	6839      	ldr	r1, [r7, #0]
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f001 f9ad 	bl	800b5bc <USBD_CtlError>
        ret = USBD_FAIL;
 800a262:	2303      	movs	r3, #3
 800a264:	75fb      	strb	r3, [r7, #23]
      break;
 800a266:	e029      	b.n	800a2bc <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a26e:	2b03      	cmp	r3, #3
 800a270:	d107      	bne.n	800a282 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a272:	f107 030f 	add.w	r3, r7, #15
 800a276:	2201      	movs	r2, #1
 800a278:	4619      	mov	r1, r3
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f001 fa0f 	bl	800b69e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800a280:	e01c      	b.n	800a2bc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800a282:	6839      	ldr	r1, [r7, #0]
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f001 f999 	bl	800b5bc <USBD_CtlError>
        ret = USBD_FAIL;
 800a28a:	2303      	movs	r3, #3
 800a28c:	75fb      	strb	r3, [r7, #23]
      break;
 800a28e:	e015      	b.n	800a2bc <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a296:	2b03      	cmp	r3, #3
 800a298:	d00f      	beq.n	800a2ba <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800a29a:	6839      	ldr	r1, [r7, #0]
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f001 f98d 	bl	800b5bc <USBD_CtlError>
        ret = USBD_FAIL;
 800a2a2:	2303      	movs	r3, #3
 800a2a4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a2a6:	e008      	b.n	800a2ba <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800a2a8:	6839      	ldr	r1, [r7, #0]
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f001 f986 	bl	800b5bc <USBD_CtlError>
      ret = USBD_FAIL;
 800a2b0:	2303      	movs	r3, #3
 800a2b2:	75fb      	strb	r3, [r7, #23]
      break;
 800a2b4:	e002      	b.n	800a2bc <USBD_CDC_Setup+0x15c>
      break;
 800a2b6:	bf00      	nop
 800a2b8:	e008      	b.n	800a2cc <USBD_CDC_Setup+0x16c>
      break;
 800a2ba:	bf00      	nop
    }
    break;
 800a2bc:	e006      	b.n	800a2cc <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800a2be:	6839      	ldr	r1, [r7, #0]
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f001 f97b 	bl	800b5bc <USBD_CtlError>
    ret = USBD_FAIL;
 800a2c6:	2303      	movs	r3, #3
 800a2c8:	75fb      	strb	r3, [r7, #23]
    break;
 800a2ca:	bf00      	nop
  }

  return (uint8_t)ret;
 800a2cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3718      	adds	r7, #24
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop

0800a2d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a2ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d101      	bne.n	800a2fa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a2f6:	2303      	movs	r3, #3
 800a2f8:	e049      	b.n	800a38e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a300:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a302:	78fa      	ldrb	r2, [r7, #3]
 800a304:	6879      	ldr	r1, [r7, #4]
 800a306:	4613      	mov	r3, r2
 800a308:	009b      	lsls	r3, r3, #2
 800a30a:	4413      	add	r3, r2
 800a30c:	009b      	lsls	r3, r3, #2
 800a30e:	440b      	add	r3, r1
 800a310:	3318      	adds	r3, #24
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d029      	beq.n	800a36c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a318:	78fa      	ldrb	r2, [r7, #3]
 800a31a:	6879      	ldr	r1, [r7, #4]
 800a31c:	4613      	mov	r3, r2
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	4413      	add	r3, r2
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	440b      	add	r3, r1
 800a326:	3318      	adds	r3, #24
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	78f9      	ldrb	r1, [r7, #3]
 800a32c:	68f8      	ldr	r0, [r7, #12]
 800a32e:	460b      	mov	r3, r1
 800a330:	00db      	lsls	r3, r3, #3
 800a332:	1a5b      	subs	r3, r3, r1
 800a334:	009b      	lsls	r3, r3, #2
 800a336:	4403      	add	r3, r0
 800a338:	3344      	adds	r3, #68	; 0x44
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	fbb2 f1f3 	udiv	r1, r2, r3
 800a340:	fb03 f301 	mul.w	r3, r3, r1
 800a344:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a346:	2b00      	cmp	r3, #0
 800a348:	d110      	bne.n	800a36c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a34a:	78fa      	ldrb	r2, [r7, #3]
 800a34c:	6879      	ldr	r1, [r7, #4]
 800a34e:	4613      	mov	r3, r2
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	4413      	add	r3, r2
 800a354:	009b      	lsls	r3, r3, #2
 800a356:	440b      	add	r3, r1
 800a358:	3318      	adds	r3, #24
 800a35a:	2200      	movs	r2, #0
 800a35c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a35e:	78f9      	ldrb	r1, [r7, #3]
 800a360:	2300      	movs	r3, #0
 800a362:	2200      	movs	r2, #0
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f001 fe74 	bl	800c052 <USBD_LL_Transmit>
 800a36a:	e00f      	b.n	800a38c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	2200      	movs	r2, #0
 800a370:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a37a:	691b      	ldr	r3, [r3, #16]
 800a37c:	68ba      	ldr	r2, [r7, #8]
 800a37e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a382:	68ba      	ldr	r2, [r7, #8]
 800a384:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a388:	78fa      	ldrb	r2, [r7, #3]
 800a38a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3710      	adds	r7, #16
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b084      	sub	sp, #16
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
 800a39e:	460b      	mov	r3, r1
 800a3a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d101      	bne.n	800a3b8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a3b4:	2303      	movs	r3, #3
 800a3b6:	e015      	b.n	800a3e4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a3b8:	78fb      	ldrb	r3, [r7, #3]
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f001 fe8a 	bl	800c0d6 <USBD_LL_GetRxDataSize>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	68fa      	ldr	r2, [r7, #12]
 800a3d4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a3d8:	68fa      	ldr	r2, [r7, #12]
 800a3da:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a3de:	4611      	mov	r1, r2
 800a3e0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a3e2:	2300      	movs	r3, #0
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3710      	adds	r7, #16
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3fa:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d015      	beq.n	800a432 <USBD_CDC_EP0_RxReady+0x46>
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a40c:	2bff      	cmp	r3, #255	; 0xff
 800a40e:	d010      	beq.n	800a432 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	68fa      	ldr	r2, [r7, #12]
 800a41a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a41e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a420:	68fa      	ldr	r2, [r7, #12]
 800a422:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a426:	b292      	uxth	r2, r2
 800a428:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	22ff      	movs	r2, #255	; 0xff
 800a42e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800a432:	2300      	movs	r3, #0
}
 800a434:	4618      	mov	r0, r3
 800a436:	3710      	adds	r7, #16
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2243      	movs	r2, #67	; 0x43
 800a448:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a44a:	4b03      	ldr	r3, [pc, #12]	; (800a458 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	370c      	adds	r7, #12
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr
 800a458:	2000009c 	.word	0x2000009c

0800a45c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2243      	movs	r2, #67	; 0x43
 800a468:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a46a:	4b03      	ldr	r3, [pc, #12]	; (800a478 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr
 800a478:	20000058 	.word	0x20000058

0800a47c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b083      	sub	sp, #12
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2243      	movs	r2, #67	; 0x43
 800a488:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a48a:	4b03      	ldr	r3, [pc, #12]	; (800a498 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	370c      	adds	r7, #12
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr
 800a498:	200000e0 	.word	0x200000e0

0800a49c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b083      	sub	sp, #12
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	220a      	movs	r2, #10
 800a4a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a4aa:	4b03      	ldr	r3, [pc, #12]	; (800a4b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	370c      	adds	r7, #12
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr
 800a4b8:	20000014 	.word	0x20000014

0800a4bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d101      	bne.n	800a4d0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a4cc:	2303      	movs	r3, #3
 800a4ce:	e004      	b.n	800a4da <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	683a      	ldr	r2, [r7, #0]
 800a4d4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	370c      	adds	r7, #12
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr

0800a4e6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a4e6:	b480      	push	{r7}
 800a4e8:	b087      	sub	sp, #28
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	60f8      	str	r0, [r7, #12]
 800a4ee:	60b9      	str	r1, [r7, #8]
 800a4f0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4f8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	68ba      	ldr	r2, [r7, #8]
 800a4fe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a50a:	2300      	movs	r3, #0
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	371c      	adds	r7, #28
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a518:	b480      	push	{r7}
 800a51a:	b085      	sub	sp, #20
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a528:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	683a      	ldr	r2, [r7, #0]
 800a52e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a532:	2300      	movs	r3, #0
}
 800a534:	4618      	mov	r0, r3
 800a536:	3714      	adds	r7, #20
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr

0800a540 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a54e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a556:	2b00      	cmp	r3, #0
 800a558:	d101      	bne.n	800a55e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a55a:	2303      	movs	r3, #3
 800a55c:	e016      	b.n	800a58c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	7c1b      	ldrb	r3, [r3, #16]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d109      	bne.n	800a57a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a56c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a570:	2101      	movs	r1, #1
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f001 fd8e 	bl	800c094 <USBD_LL_PrepareReceive>
 800a578:	e007      	b.n	800a58a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a580:	2340      	movs	r3, #64	; 0x40
 800a582:	2101      	movs	r1, #1
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f001 fd85 	bl	800c094 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a58a:	2300      	movs	r3, #0
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3710      	adds	r7, #16
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b086      	sub	sp, #24
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	4613      	mov	r3, r2
 800a5a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d101      	bne.n	800a5ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a5a8:	2303      	movs	r3, #3
 800a5aa:	e025      	b.n	800a5f8 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d003      	beq.n	800a5be <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d003      	beq.n	800a5d0 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d003      	beq.n	800a5de <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	68ba      	ldr	r2, [r7, #8]
 800a5da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	79fa      	ldrb	r2, [r7, #7]
 800a5ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a5ec:	68f8      	ldr	r0, [r7, #12]
 800a5ee:	f001 fbfb 	bl	800bde8 <USBD_LL_Init>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a5f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3718      	adds	r7, #24
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a60a:	2300      	movs	r3, #0
 800a60c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d101      	bne.n	800a618 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a614:	2303      	movs	r3, #3
 800a616:	e010      	b.n	800a63a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	683a      	ldr	r2, [r7, #0]
 800a61c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a628:	f107 020e 	add.w	r2, r7, #14
 800a62c:	4610      	mov	r0, r2
 800a62e:	4798      	blx	r3
 800a630:	4602      	mov	r2, r0
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800a638:	2300      	movs	r3, #0
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3710      	adds	r7, #16
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b082      	sub	sp, #8
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f001 fc18 	bl	800be80 <USBD_LL_Start>
 800a650:	4603      	mov	r3, r0
}
 800a652:	4618      	mov	r0, r3
 800a654:	3708      	adds	r7, #8
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}

0800a65a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a65a:	b480      	push	{r7}
 800a65c:	b083      	sub	sp, #12
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a662:	2300      	movs	r3, #0
}
 800a664:	4618      	mov	r0, r3
 800a666:	370c      	adds	r7, #12
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	460b      	mov	r3, r1
 800a67a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a67c:	2303      	movs	r3, #3
 800a67e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a686:	2b00      	cmp	r3, #0
 800a688:	d009      	beq.n	800a69e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	78fa      	ldrb	r2, [r7, #3]
 800a694:	4611      	mov	r1, r2
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	4798      	blx	r3
 800a69a:	4603      	mov	r3, r0
 800a69c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a69e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3710      	adds	r7, #16
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b082      	sub	sp, #8
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d007      	beq.n	800a6ce <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	78fa      	ldrb	r2, [r7, #3]
 800a6c8:	4611      	mov	r1, r2
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	4798      	blx	r3
  }

  return USBD_OK;
 800a6ce:	2300      	movs	r3, #0
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3708      	adds	r7, #8
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b084      	sub	sp, #16
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a6e8:	6839      	ldr	r1, [r7, #0]
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f000 ff2c 	bl	800b548 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a6fe:	461a      	mov	r2, r3
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a70c:	f003 031f 	and.w	r3, r3, #31
 800a710:	2b01      	cmp	r3, #1
 800a712:	d00e      	beq.n	800a732 <USBD_LL_SetupStage+0x5a>
 800a714:	2b01      	cmp	r3, #1
 800a716:	d302      	bcc.n	800a71e <USBD_LL_SetupStage+0x46>
 800a718:	2b02      	cmp	r3, #2
 800a71a:	d014      	beq.n	800a746 <USBD_LL_SetupStage+0x6e>
 800a71c:	e01d      	b.n	800a75a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a724:	4619      	mov	r1, r3
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 fa18 	bl	800ab5c <USBD_StdDevReq>
 800a72c:	4603      	mov	r3, r0
 800a72e:	73fb      	strb	r3, [r7, #15]
      break;
 800a730:	e020      	b.n	800a774 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a738:	4619      	mov	r1, r3
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 fa7c 	bl	800ac38 <USBD_StdItfReq>
 800a740:	4603      	mov	r3, r0
 800a742:	73fb      	strb	r3, [r7, #15]
      break;
 800a744:	e016      	b.n	800a774 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a74c:	4619      	mov	r1, r3
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 fab8 	bl	800acc4 <USBD_StdEPReq>
 800a754:	4603      	mov	r3, r0
 800a756:	73fb      	strb	r3, [r7, #15]
      break;
 800a758:	e00c      	b.n	800a774 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a760:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a764:	b2db      	uxtb	r3, r3
 800a766:	4619      	mov	r1, r3
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f001 fbe9 	bl	800bf40 <USBD_LL_StallEP>
 800a76e:	4603      	mov	r3, r0
 800a770:	73fb      	strb	r3, [r7, #15]
      break;
 800a772:	bf00      	nop
  }

  return ret;
 800a774:	7bfb      	ldrb	r3, [r7, #15]
}
 800a776:	4618      	mov	r0, r3
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a77e:	b580      	push	{r7, lr}
 800a780:	b086      	sub	sp, #24
 800a782:	af00      	add	r7, sp, #0
 800a784:	60f8      	str	r0, [r7, #12]
 800a786:	460b      	mov	r3, r1
 800a788:	607a      	str	r2, [r7, #4]
 800a78a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a78c:	7afb      	ldrb	r3, [r7, #11]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d137      	bne.n	800a802 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a798:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a7a0:	2b03      	cmp	r3, #3
 800a7a2:	d14a      	bne.n	800a83a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	689a      	ldr	r2, [r3, #8]
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d913      	bls.n	800a7d8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	689a      	ldr	r2, [r3, #8]
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	1ad2      	subs	r2, r2, r3
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	68da      	ldr	r2, [r3, #12]
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	689b      	ldr	r3, [r3, #8]
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	bf28      	it	cs
 800a7ca:	4613      	movcs	r3, r2
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	6879      	ldr	r1, [r7, #4]
 800a7d0:	68f8      	ldr	r0, [r7, #12]
 800a7d2:	f000 ffad 	bl	800b730 <USBD_CtlContinueRx>
 800a7d6:	e030      	b.n	800a83a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7de:	691b      	ldr	r3, [r3, #16]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d00a      	beq.n	800a7fa <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a7ea:	2b03      	cmp	r3, #3
 800a7ec:	d105      	bne.n	800a7fa <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7f4:	691b      	ldr	r3, [r3, #16]
 800a7f6:	68f8      	ldr	r0, [r7, #12]
 800a7f8:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800a7fa:	68f8      	ldr	r0, [r7, #12]
 800a7fc:	f000 ffa9 	bl	800b752 <USBD_CtlSendStatus>
 800a800:	e01b      	b.n	800a83a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a808:	699b      	ldr	r3, [r3, #24]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d013      	beq.n	800a836 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a814:	2b03      	cmp	r3, #3
 800a816:	d10e      	bne.n	800a836 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a81e:	699b      	ldr	r3, [r3, #24]
 800a820:	7afa      	ldrb	r2, [r7, #11]
 800a822:	4611      	mov	r1, r2
 800a824:	68f8      	ldr	r0, [r7, #12]
 800a826:	4798      	blx	r3
 800a828:	4603      	mov	r3, r0
 800a82a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a82c:	7dfb      	ldrb	r3, [r7, #23]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d003      	beq.n	800a83a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800a832:	7dfb      	ldrb	r3, [r7, #23]
 800a834:	e002      	b.n	800a83c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a836:	2303      	movs	r3, #3
 800a838:	e000      	b.n	800a83c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3718      	adds	r7, #24
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b086      	sub	sp, #24
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	460b      	mov	r3, r1
 800a84e:	607a      	str	r2, [r7, #4]
 800a850:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a852:	7afb      	ldrb	r3, [r7, #11]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d16a      	bne.n	800a92e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	3314      	adds	r3, #20
 800a85c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a864:	2b02      	cmp	r3, #2
 800a866:	d155      	bne.n	800a914 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	689a      	ldr	r2, [r3, #8]
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	429a      	cmp	r2, r3
 800a872:	d914      	bls.n	800a89e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	689a      	ldr	r2, [r3, #8]
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	1ad2      	subs	r2, r2, r3
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	689b      	ldr	r3, [r3, #8]
 800a886:	461a      	mov	r2, r3
 800a888:	6879      	ldr	r1, [r7, #4]
 800a88a:	68f8      	ldr	r0, [r7, #12]
 800a88c:	f000 ff22 	bl	800b6d4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a890:	2300      	movs	r3, #0
 800a892:	2200      	movs	r2, #0
 800a894:	2100      	movs	r1, #0
 800a896:	68f8      	ldr	r0, [r7, #12]
 800a898:	f001 fbfc 	bl	800c094 <USBD_LL_PrepareReceive>
 800a89c:	e03a      	b.n	800a914 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	68da      	ldr	r2, [r3, #12]
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	689b      	ldr	r3, [r3, #8]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d11c      	bne.n	800a8e4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	685a      	ldr	r2, [r3, #4]
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d316      	bcc.n	800a8e4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	685a      	ldr	r2, [r3, #4]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d20f      	bcs.n	800a8e4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	2100      	movs	r1, #0
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	f000 ff03 	bl	800b6d4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	2200      	movs	r2, #0
 800a8da:	2100      	movs	r1, #0
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	f001 fbd9 	bl	800c094 <USBD_LL_PrepareReceive>
 800a8e2:	e017      	b.n	800a914 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8ea:	68db      	ldr	r3, [r3, #12]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d00a      	beq.n	800a906 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a8f6:	2b03      	cmp	r3, #3
 800a8f8:	d105      	bne.n	800a906 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a900:	68db      	ldr	r3, [r3, #12]
 800a902:	68f8      	ldr	r0, [r7, #12]
 800a904:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a906:	2180      	movs	r1, #128	; 0x80
 800a908:	68f8      	ldr	r0, [r7, #12]
 800a90a:	f001 fb19 	bl	800bf40 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a90e:	68f8      	ldr	r0, [r7, #12]
 800a910:	f000 ff32 	bl	800b778 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d123      	bne.n	800a966 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a91e:	68f8      	ldr	r0, [r7, #12]
 800a920:	f7ff fe9b 	bl	800a65a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2200      	movs	r2, #0
 800a928:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a92c:	e01b      	b.n	800a966 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a934:	695b      	ldr	r3, [r3, #20]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d013      	beq.n	800a962 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a940:	2b03      	cmp	r3, #3
 800a942:	d10e      	bne.n	800a962 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a94a:	695b      	ldr	r3, [r3, #20]
 800a94c:	7afa      	ldrb	r2, [r7, #11]
 800a94e:	4611      	mov	r1, r2
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	4798      	blx	r3
 800a954:	4603      	mov	r3, r0
 800a956:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a958:	7dfb      	ldrb	r3, [r7, #23]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d003      	beq.n	800a966 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800a95e:	7dfb      	ldrb	r3, [r7, #23]
 800a960:	e002      	b.n	800a968 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a962:	2303      	movs	r3, #3
 800a964:	e000      	b.n	800a968 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800a966:	2300      	movs	r3, #0
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3718      	adds	r7, #24
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2201      	movs	r2, #1
 800a97c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2200      	movs	r2, #0
 800a984:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2200      	movs	r2, #0
 800a992:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d009      	beq.n	800a9b4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	6852      	ldr	r2, [r2, #4]
 800a9ac:	b2d2      	uxtb	r2, r2
 800a9ae:	4611      	mov	r1, r2
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9b4:	2340      	movs	r3, #64	; 0x40
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	2100      	movs	r1, #0
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f001 fa7b 	bl	800beb6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2240      	movs	r2, #64	; 0x40
 800a9cc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9d0:	2340      	movs	r3, #64	; 0x40
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	2180      	movs	r1, #128	; 0x80
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f001 fa6d 	bl	800beb6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2240      	movs	r2, #64	; 0x40
 800a9e6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a9e8:	2300      	movs	r3, #0
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3708      	adds	r7, #8
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a9f2:	b480      	push	{r7}
 800a9f4:	b083      	sub	sp, #12
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	78fa      	ldrb	r2, [r7, #3]
 800aa02:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aa04:	2300      	movs	r3, #0
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	370c      	adds	r7, #12
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr

0800aa12 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aa12:	b480      	push	{r7}
 800aa14:	b083      	sub	sp, #12
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2204      	movs	r2, #4
 800aa2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800aa2e:	2300      	movs	r3, #0
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	370c      	adds	r7, #12
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr

0800aa3c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa4a:	2b04      	cmp	r3, #4
 800aa4c:	d105      	bne.n	800aa5a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800aa5a:	2300      	movs	r3, #0
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	370c      	adds	r7, #12
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa76:	2b03      	cmp	r3, #3
 800aa78:	d10b      	bne.n	800aa92 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa80:	69db      	ldr	r3, [r3, #28]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d005      	beq.n	800aa92 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa8c:	69db      	ldr	r3, [r3, #28]
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aa92:	2300      	movs	r3, #0
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3708      	adds	r7, #8
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800aaa8:	2300      	movs	r3, #0
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	370c      	adds	r7, #12
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr

0800aab6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800aab6:	b480      	push	{r7}
 800aab8:	b083      	sub	sp, #12
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
 800aabe:	460b      	mov	r3, r1
 800aac0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800aac2:	2300      	movs	r3, #0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	370c      	adds	r7, #12
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aad8:	2300      	movs	r3, #0
}
 800aada:	4618      	mov	r0, r3
 800aadc:	370c      	adds	r7, #12
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr

0800aae6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800aae6:	b580      	push	{r7, lr}
 800aae8:	b082      	sub	sp, #8
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d009      	beq.n	800ab14 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab06:	685b      	ldr	r3, [r3, #4]
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	6852      	ldr	r2, [r2, #4]
 800ab0c:	b2d2      	uxtb	r2, r2
 800ab0e:	4611      	mov	r1, r2
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	4798      	blx	r3
  }

  return USBD_OK;
 800ab14:	2300      	movs	r3, #0
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3708      	adds	r7, #8
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ab1e:	b480      	push	{r7}
 800ab20:	b087      	sub	sp, #28
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	3301      	adds	r3, #1
 800ab34:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ab3c:	8a3b      	ldrh	r3, [r7, #16]
 800ab3e:	021b      	lsls	r3, r3, #8
 800ab40:	b21a      	sxth	r2, r3
 800ab42:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ab46:	4313      	orrs	r3, r2
 800ab48:	b21b      	sxth	r3, r3
 800ab4a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ab4c:	89fb      	ldrh	r3, [r7, #14]
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	371c      	adds	r7, #28
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr
	...

0800ab5c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b084      	sub	sp, #16
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab66:	2300      	movs	r3, #0
 800ab68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	781b      	ldrb	r3, [r3, #0]
 800ab6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab72:	2b20      	cmp	r3, #32
 800ab74:	d004      	beq.n	800ab80 <USBD_StdDevReq+0x24>
 800ab76:	2b40      	cmp	r3, #64	; 0x40
 800ab78:	d002      	beq.n	800ab80 <USBD_StdDevReq+0x24>
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d00a      	beq.n	800ab94 <USBD_StdDevReq+0x38>
 800ab7e:	e050      	b.n	800ac22 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab86:	689b      	ldr	r3, [r3, #8]
 800ab88:	6839      	ldr	r1, [r7, #0]
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	4798      	blx	r3
 800ab8e:	4603      	mov	r3, r0
 800ab90:	73fb      	strb	r3, [r7, #15]
    break;
 800ab92:	e04b      	b.n	800ac2c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	785b      	ldrb	r3, [r3, #1]
 800ab98:	2b09      	cmp	r3, #9
 800ab9a:	d83c      	bhi.n	800ac16 <USBD_StdDevReq+0xba>
 800ab9c:	a201      	add	r2, pc, #4	; (adr r2, 800aba4 <USBD_StdDevReq+0x48>)
 800ab9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aba2:	bf00      	nop
 800aba4:	0800abf9 	.word	0x0800abf9
 800aba8:	0800ac0d 	.word	0x0800ac0d
 800abac:	0800ac17 	.word	0x0800ac17
 800abb0:	0800ac03 	.word	0x0800ac03
 800abb4:	0800ac17 	.word	0x0800ac17
 800abb8:	0800abd7 	.word	0x0800abd7
 800abbc:	0800abcd 	.word	0x0800abcd
 800abc0:	0800ac17 	.word	0x0800ac17
 800abc4:	0800abef 	.word	0x0800abef
 800abc8:	0800abe1 	.word	0x0800abe1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800abcc:	6839      	ldr	r1, [r7, #0]
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f000 f9ce 	bl	800af70 <USBD_GetDescriptor>
      break;
 800abd4:	e024      	b.n	800ac20 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800abd6:	6839      	ldr	r1, [r7, #0]
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f000 fb33 	bl	800b244 <USBD_SetAddress>
      break;
 800abde:	e01f      	b.n	800ac20 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800abe0:	6839      	ldr	r1, [r7, #0]
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 fb70 	bl	800b2c8 <USBD_SetConfig>
 800abe8:	4603      	mov	r3, r0
 800abea:	73fb      	strb	r3, [r7, #15]
      break;
 800abec:	e018      	b.n	800ac20 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800abee:	6839      	ldr	r1, [r7, #0]
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f000 fc0d 	bl	800b410 <USBD_GetConfig>
      break;
 800abf6:	e013      	b.n	800ac20 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800abf8:	6839      	ldr	r1, [r7, #0]
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 fc3c 	bl	800b478 <USBD_GetStatus>
      break;
 800ac00:	e00e      	b.n	800ac20 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800ac02:	6839      	ldr	r1, [r7, #0]
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f000 fc6a 	bl	800b4de <USBD_SetFeature>
      break;
 800ac0a:	e009      	b.n	800ac20 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800ac0c:	6839      	ldr	r1, [r7, #0]
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 fc79 	bl	800b506 <USBD_ClrFeature>
      break;
 800ac14:	e004      	b.n	800ac20 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800ac16:	6839      	ldr	r1, [r7, #0]
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 fccf 	bl	800b5bc <USBD_CtlError>
      break;
 800ac1e:	bf00      	nop
    }
    break;
 800ac20:	e004      	b.n	800ac2c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800ac22:	6839      	ldr	r1, [r7, #0]
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 fcc9 	bl	800b5bc <USBD_CtlError>
    break;
 800ac2a:	bf00      	nop
  }

  return ret;
 800ac2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3710      	adds	r7, #16
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop

0800ac38 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b084      	sub	sp, #16
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac42:	2300      	movs	r3, #0
 800ac44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	781b      	ldrb	r3, [r3, #0]
 800ac4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac4e:	2b20      	cmp	r3, #32
 800ac50:	d003      	beq.n	800ac5a <USBD_StdItfReq+0x22>
 800ac52:	2b40      	cmp	r3, #64	; 0x40
 800ac54:	d001      	beq.n	800ac5a <USBD_StdItfReq+0x22>
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d12a      	bne.n	800acb0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac60:	3b01      	subs	r3, #1
 800ac62:	2b02      	cmp	r3, #2
 800ac64:	d81d      	bhi.n	800aca2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	889b      	ldrh	r3, [r3, #4]
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	d813      	bhi.n	800ac98 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	6839      	ldr	r1, [r7, #0]
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	4798      	blx	r3
 800ac7e:	4603      	mov	r3, r0
 800ac80:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	88db      	ldrh	r3, [r3, #6]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d110      	bne.n	800acac <USBD_StdItfReq+0x74>
 800ac8a:	7bfb      	ldrb	r3, [r7, #15]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d10d      	bne.n	800acac <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 fd5e 	bl	800b752 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800ac96:	e009      	b.n	800acac <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800ac98:	6839      	ldr	r1, [r7, #0]
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 fc8e 	bl	800b5bc <USBD_CtlError>
      break;
 800aca0:	e004      	b.n	800acac <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800aca2:	6839      	ldr	r1, [r7, #0]
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f000 fc89 	bl	800b5bc <USBD_CtlError>
      break;
 800acaa:	e000      	b.n	800acae <USBD_StdItfReq+0x76>
      break;
 800acac:	bf00      	nop
    }
    break;
 800acae:	e004      	b.n	800acba <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800acb0:	6839      	ldr	r1, [r7, #0]
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 fc82 	bl	800b5bc <USBD_CtlError>
    break;
 800acb8:	bf00      	nop
  }

  return ret;
 800acba:	7bfb      	ldrb	r3, [r7, #15]
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3710      	adds	r7, #16
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b084      	sub	sp, #16
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800acce:	2300      	movs	r3, #0
 800acd0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	889b      	ldrh	r3, [r3, #4]
 800acd6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ace0:	2b20      	cmp	r3, #32
 800ace2:	d004      	beq.n	800acee <USBD_StdEPReq+0x2a>
 800ace4:	2b40      	cmp	r3, #64	; 0x40
 800ace6:	d002      	beq.n	800acee <USBD_StdEPReq+0x2a>
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d00a      	beq.n	800ad02 <USBD_StdEPReq+0x3e>
 800acec:	e135      	b.n	800af5a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acf4:	689b      	ldr	r3, [r3, #8]
 800acf6:	6839      	ldr	r1, [r7, #0]
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	4798      	blx	r3
 800acfc:	4603      	mov	r3, r0
 800acfe:	73fb      	strb	r3, [r7, #15]
    break;
 800ad00:	e130      	b.n	800af64 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	785b      	ldrb	r3, [r3, #1]
 800ad06:	2b01      	cmp	r3, #1
 800ad08:	d03e      	beq.n	800ad88 <USBD_StdEPReq+0xc4>
 800ad0a:	2b03      	cmp	r3, #3
 800ad0c:	d002      	beq.n	800ad14 <USBD_StdEPReq+0x50>
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d077      	beq.n	800ae02 <USBD_StdEPReq+0x13e>
 800ad12:	e11c      	b.n	800af4e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad1a:	2b02      	cmp	r3, #2
 800ad1c:	d002      	beq.n	800ad24 <USBD_StdEPReq+0x60>
 800ad1e:	2b03      	cmp	r3, #3
 800ad20:	d015      	beq.n	800ad4e <USBD_StdEPReq+0x8a>
 800ad22:	e02b      	b.n	800ad7c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad24:	7bbb      	ldrb	r3, [r7, #14]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d00c      	beq.n	800ad44 <USBD_StdEPReq+0x80>
 800ad2a:	7bbb      	ldrb	r3, [r7, #14]
 800ad2c:	2b80      	cmp	r3, #128	; 0x80
 800ad2e:	d009      	beq.n	800ad44 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad30:	7bbb      	ldrb	r3, [r7, #14]
 800ad32:	4619      	mov	r1, r3
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f001 f903 	bl	800bf40 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad3a:	2180      	movs	r1, #128	; 0x80
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f001 f8ff 	bl	800bf40 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ad42:	e020      	b.n	800ad86 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800ad44:	6839      	ldr	r1, [r7, #0]
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 fc38 	bl	800b5bc <USBD_CtlError>
        break;
 800ad4c:	e01b      	b.n	800ad86 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	885b      	ldrh	r3, [r3, #2]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d10e      	bne.n	800ad74 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ad56:	7bbb      	ldrb	r3, [r7, #14]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d00b      	beq.n	800ad74 <USBD_StdEPReq+0xb0>
 800ad5c:	7bbb      	ldrb	r3, [r7, #14]
 800ad5e:	2b80      	cmp	r3, #128	; 0x80
 800ad60:	d008      	beq.n	800ad74 <USBD_StdEPReq+0xb0>
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	88db      	ldrh	r3, [r3, #6]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d104      	bne.n	800ad74 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad6a:	7bbb      	ldrb	r3, [r7, #14]
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f001 f8e6 	bl	800bf40 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f000 fcec 	bl	800b752 <USBD_CtlSendStatus>

        break;
 800ad7a:	e004      	b.n	800ad86 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800ad7c:	6839      	ldr	r1, [r7, #0]
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 fc1c 	bl	800b5bc <USBD_CtlError>
        break;
 800ad84:	bf00      	nop
      }
      break;
 800ad86:	e0e7      	b.n	800af58 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad8e:	2b02      	cmp	r3, #2
 800ad90:	d002      	beq.n	800ad98 <USBD_StdEPReq+0xd4>
 800ad92:	2b03      	cmp	r3, #3
 800ad94:	d015      	beq.n	800adc2 <USBD_StdEPReq+0xfe>
 800ad96:	e02d      	b.n	800adf4 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad98:	7bbb      	ldrb	r3, [r7, #14]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d00c      	beq.n	800adb8 <USBD_StdEPReq+0xf4>
 800ad9e:	7bbb      	ldrb	r3, [r7, #14]
 800ada0:	2b80      	cmp	r3, #128	; 0x80
 800ada2:	d009      	beq.n	800adb8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ada4:	7bbb      	ldrb	r3, [r7, #14]
 800ada6:	4619      	mov	r1, r3
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f001 f8c9 	bl	800bf40 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800adae:	2180      	movs	r1, #128	; 0x80
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f001 f8c5 	bl	800bf40 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800adb6:	e023      	b.n	800ae00 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800adb8:	6839      	ldr	r1, [r7, #0]
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 fbfe 	bl	800b5bc <USBD_CtlError>
        break;
 800adc0:	e01e      	b.n	800ae00 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	885b      	ldrh	r3, [r3, #2]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d119      	bne.n	800adfe <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800adca:	7bbb      	ldrb	r3, [r7, #14]
 800adcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800add0:	2b00      	cmp	r3, #0
 800add2:	d004      	beq.n	800adde <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800add4:	7bbb      	ldrb	r3, [r7, #14]
 800add6:	4619      	mov	r1, r3
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f001 f8d0 	bl	800bf7e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 fcb7 	bl	800b752 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adea:	689b      	ldr	r3, [r3, #8]
 800adec:	6839      	ldr	r1, [r7, #0]
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	4798      	blx	r3
        }
        break;
 800adf2:	e004      	b.n	800adfe <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800adf4:	6839      	ldr	r1, [r7, #0]
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f000 fbe0 	bl	800b5bc <USBD_CtlError>
        break;
 800adfc:	e000      	b.n	800ae00 <USBD_StdEPReq+0x13c>
        break;
 800adfe:	bf00      	nop
      }
      break;
 800ae00:	e0aa      	b.n	800af58 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae08:	2b02      	cmp	r3, #2
 800ae0a:	d002      	beq.n	800ae12 <USBD_StdEPReq+0x14e>
 800ae0c:	2b03      	cmp	r3, #3
 800ae0e:	d032      	beq.n	800ae76 <USBD_StdEPReq+0x1b2>
 800ae10:	e097      	b.n	800af42 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae12:	7bbb      	ldrb	r3, [r7, #14]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d007      	beq.n	800ae28 <USBD_StdEPReq+0x164>
 800ae18:	7bbb      	ldrb	r3, [r7, #14]
 800ae1a:	2b80      	cmp	r3, #128	; 0x80
 800ae1c:	d004      	beq.n	800ae28 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800ae1e:	6839      	ldr	r1, [r7, #0]
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f000 fbcb 	bl	800b5bc <USBD_CtlError>
          break;
 800ae26:	e091      	b.n	800af4c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	da0b      	bge.n	800ae48 <USBD_StdEPReq+0x184>
 800ae30:	7bbb      	ldrb	r3, [r7, #14]
 800ae32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae36:	4613      	mov	r3, r2
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	4413      	add	r3, r2
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	3310      	adds	r3, #16
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	4413      	add	r3, r2
 800ae44:	3304      	adds	r3, #4
 800ae46:	e00b      	b.n	800ae60 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ae48:	7bbb      	ldrb	r3, [r7, #14]
 800ae4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae4e:	4613      	mov	r3, r2
 800ae50:	009b      	lsls	r3, r3, #2
 800ae52:	4413      	add	r3, r2
 800ae54:	009b      	lsls	r3, r3, #2
 800ae56:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	4413      	add	r3, r2
 800ae5e:	3304      	adds	r3, #4
 800ae60:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	2200      	movs	r2, #0
 800ae66:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	2202      	movs	r2, #2
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 fc15 	bl	800b69e <USBD_CtlSendData>
        break;
 800ae74:	e06a      	b.n	800af4c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800ae76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	da11      	bge.n	800aea2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ae7e:	7bbb      	ldrb	r3, [r7, #14]
 800ae80:	f003 020f 	and.w	r2, r3, #15
 800ae84:	6879      	ldr	r1, [r7, #4]
 800ae86:	4613      	mov	r3, r2
 800ae88:	009b      	lsls	r3, r3, #2
 800ae8a:	4413      	add	r3, r2
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	440b      	add	r3, r1
 800ae90:	3324      	adds	r3, #36	; 0x24
 800ae92:	881b      	ldrh	r3, [r3, #0]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d117      	bne.n	800aec8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800ae98:	6839      	ldr	r1, [r7, #0]
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 fb8e 	bl	800b5bc <USBD_CtlError>
            break;
 800aea0:	e054      	b.n	800af4c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aea2:	7bbb      	ldrb	r3, [r7, #14]
 800aea4:	f003 020f 	and.w	r2, r3, #15
 800aea8:	6879      	ldr	r1, [r7, #4]
 800aeaa:	4613      	mov	r3, r2
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	4413      	add	r3, r2
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	440b      	add	r3, r1
 800aeb4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aeb8:	881b      	ldrh	r3, [r3, #0]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d104      	bne.n	800aec8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800aebe:	6839      	ldr	r1, [r7, #0]
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 fb7b 	bl	800b5bc <USBD_CtlError>
            break;
 800aec6:	e041      	b.n	800af4c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aec8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	da0b      	bge.n	800aee8 <USBD_StdEPReq+0x224>
 800aed0:	7bbb      	ldrb	r3, [r7, #14]
 800aed2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aed6:	4613      	mov	r3, r2
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	4413      	add	r3, r2
 800aedc:	009b      	lsls	r3, r3, #2
 800aede:	3310      	adds	r3, #16
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	4413      	add	r3, r2
 800aee4:	3304      	adds	r3, #4
 800aee6:	e00b      	b.n	800af00 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800aee8:	7bbb      	ldrb	r3, [r7, #14]
 800aeea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aeee:	4613      	mov	r3, r2
 800aef0:	009b      	lsls	r3, r3, #2
 800aef2:	4413      	add	r3, r2
 800aef4:	009b      	lsls	r3, r3, #2
 800aef6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	4413      	add	r3, r2
 800aefe:	3304      	adds	r3, #4
 800af00:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800af02:	7bbb      	ldrb	r3, [r7, #14]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d002      	beq.n	800af0e <USBD_StdEPReq+0x24a>
 800af08:	7bbb      	ldrb	r3, [r7, #14]
 800af0a:	2b80      	cmp	r3, #128	; 0x80
 800af0c:	d103      	bne.n	800af16 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	2200      	movs	r2, #0
 800af12:	601a      	str	r2, [r3, #0]
 800af14:	e00e      	b.n	800af34 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800af16:	7bbb      	ldrb	r3, [r7, #14]
 800af18:	4619      	mov	r1, r3
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f001 f84e 	bl	800bfbc <USBD_LL_IsStallEP>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d003      	beq.n	800af2e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	2201      	movs	r2, #1
 800af2a:	601a      	str	r2, [r3, #0]
 800af2c:	e002      	b.n	800af34 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	2200      	movs	r2, #0
 800af32:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	2202      	movs	r2, #2
 800af38:	4619      	mov	r1, r3
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 fbaf 	bl	800b69e <USBD_CtlSendData>
          break;
 800af40:	e004      	b.n	800af4c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800af42:	6839      	ldr	r1, [r7, #0]
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 fb39 	bl	800b5bc <USBD_CtlError>
        break;
 800af4a:	bf00      	nop
      }
      break;
 800af4c:	e004      	b.n	800af58 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800af4e:	6839      	ldr	r1, [r7, #0]
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 fb33 	bl	800b5bc <USBD_CtlError>
      break;
 800af56:	bf00      	nop
    }
    break;
 800af58:	e004      	b.n	800af64 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800af5a:	6839      	ldr	r1, [r7, #0]
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 fb2d 	bl	800b5bc <USBD_CtlError>
    break;
 800af62:	bf00      	nop
  }

  return ret;
 800af64:	7bfb      	ldrb	r3, [r7, #15]
}
 800af66:	4618      	mov	r0, r3
 800af68:	3710      	adds	r7, #16
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
	...

0800af70 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800af7a:	2300      	movs	r3, #0
 800af7c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800af7e:	2300      	movs	r3, #0
 800af80:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800af82:	2300      	movs	r3, #0
 800af84:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	885b      	ldrh	r3, [r3, #2]
 800af8a:	0a1b      	lsrs	r3, r3, #8
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	3b01      	subs	r3, #1
 800af90:	2b06      	cmp	r3, #6
 800af92:	f200 8128 	bhi.w	800b1e6 <USBD_GetDescriptor+0x276>
 800af96:	a201      	add	r2, pc, #4	; (adr r2, 800af9c <USBD_GetDescriptor+0x2c>)
 800af98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af9c:	0800afb9 	.word	0x0800afb9
 800afa0:	0800afd1 	.word	0x0800afd1
 800afa4:	0800b011 	.word	0x0800b011
 800afa8:	0800b1e7 	.word	0x0800b1e7
 800afac:	0800b1e7 	.word	0x0800b1e7
 800afb0:	0800b187 	.word	0x0800b187
 800afb4:	0800b1b3 	.word	0x0800b1b3
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	7c12      	ldrb	r2, [r2, #16]
 800afc4:	f107 0108 	add.w	r1, r7, #8
 800afc8:	4610      	mov	r0, r2
 800afca:	4798      	blx	r3
 800afcc:	60f8      	str	r0, [r7, #12]
    break;
 800afce:	e112      	b.n	800b1f6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	7c1b      	ldrb	r3, [r3, #16]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d10d      	bne.n	800aff4 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afe0:	f107 0208 	add.w	r2, r7, #8
 800afe4:	4610      	mov	r0, r2
 800afe6:	4798      	blx	r3
 800afe8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	3301      	adds	r3, #1
 800afee:	2202      	movs	r2, #2
 800aff0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800aff2:	e100      	b.n	800b1f6 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800affa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800affc:	f107 0208 	add.w	r2, r7, #8
 800b000:	4610      	mov	r0, r2
 800b002:	4798      	blx	r3
 800b004:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	3301      	adds	r3, #1
 800b00a:	2202      	movs	r2, #2
 800b00c:	701a      	strb	r2, [r3, #0]
    break;
 800b00e:	e0f2      	b.n	800b1f6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	885b      	ldrh	r3, [r3, #2]
 800b014:	b2db      	uxtb	r3, r3
 800b016:	2b05      	cmp	r3, #5
 800b018:	f200 80ac 	bhi.w	800b174 <USBD_GetDescriptor+0x204>
 800b01c:	a201      	add	r2, pc, #4	; (adr r2, 800b024 <USBD_GetDescriptor+0xb4>)
 800b01e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b022:	bf00      	nop
 800b024:	0800b03d 	.word	0x0800b03d
 800b028:	0800b071 	.word	0x0800b071
 800b02c:	0800b0a5 	.word	0x0800b0a5
 800b030:	0800b0d9 	.word	0x0800b0d9
 800b034:	0800b10d 	.word	0x0800b10d
 800b038:	0800b141 	.word	0x0800b141
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d00b      	beq.n	800b060 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	687a      	ldr	r2, [r7, #4]
 800b052:	7c12      	ldrb	r2, [r2, #16]
 800b054:	f107 0108 	add.w	r1, r7, #8
 800b058:	4610      	mov	r0, r2
 800b05a:	4798      	blx	r3
 800b05c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b05e:	e091      	b.n	800b184 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b060:	6839      	ldr	r1, [r7, #0]
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 faaa 	bl	800b5bc <USBD_CtlError>
        err++;
 800b068:	7afb      	ldrb	r3, [r7, #11]
 800b06a:	3301      	adds	r3, #1
 800b06c:	72fb      	strb	r3, [r7, #11]
      break;
 800b06e:	e089      	b.n	800b184 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d00b      	beq.n	800b094 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b082:	689b      	ldr	r3, [r3, #8]
 800b084:	687a      	ldr	r2, [r7, #4]
 800b086:	7c12      	ldrb	r2, [r2, #16]
 800b088:	f107 0108 	add.w	r1, r7, #8
 800b08c:	4610      	mov	r0, r2
 800b08e:	4798      	blx	r3
 800b090:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b092:	e077      	b.n	800b184 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b094:	6839      	ldr	r1, [r7, #0]
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f000 fa90 	bl	800b5bc <USBD_CtlError>
        err++;
 800b09c:	7afb      	ldrb	r3, [r7, #11]
 800b09e:	3301      	adds	r3, #1
 800b0a0:	72fb      	strb	r3, [r7, #11]
      break;
 800b0a2:	e06f      	b.n	800b184 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0aa:	68db      	ldr	r3, [r3, #12]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d00b      	beq.n	800b0c8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0b6:	68db      	ldr	r3, [r3, #12]
 800b0b8:	687a      	ldr	r2, [r7, #4]
 800b0ba:	7c12      	ldrb	r2, [r2, #16]
 800b0bc:	f107 0108 	add.w	r1, r7, #8
 800b0c0:	4610      	mov	r0, r2
 800b0c2:	4798      	blx	r3
 800b0c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b0c6:	e05d      	b.n	800b184 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b0c8:	6839      	ldr	r1, [r7, #0]
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 fa76 	bl	800b5bc <USBD_CtlError>
        err++;
 800b0d0:	7afb      	ldrb	r3, [r7, #11]
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	72fb      	strb	r3, [r7, #11]
      break;
 800b0d6:	e055      	b.n	800b184 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0de:	691b      	ldr	r3, [r3, #16]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d00b      	beq.n	800b0fc <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0ea:	691b      	ldr	r3, [r3, #16]
 800b0ec:	687a      	ldr	r2, [r7, #4]
 800b0ee:	7c12      	ldrb	r2, [r2, #16]
 800b0f0:	f107 0108 	add.w	r1, r7, #8
 800b0f4:	4610      	mov	r0, r2
 800b0f6:	4798      	blx	r3
 800b0f8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b0fa:	e043      	b.n	800b184 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b0fc:	6839      	ldr	r1, [r7, #0]
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 fa5c 	bl	800b5bc <USBD_CtlError>
        err++;
 800b104:	7afb      	ldrb	r3, [r7, #11]
 800b106:	3301      	adds	r3, #1
 800b108:	72fb      	strb	r3, [r7, #11]
      break;
 800b10a:	e03b      	b.n	800b184 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b112:	695b      	ldr	r3, [r3, #20]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d00b      	beq.n	800b130 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b11e:	695b      	ldr	r3, [r3, #20]
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	7c12      	ldrb	r2, [r2, #16]
 800b124:	f107 0108 	add.w	r1, r7, #8
 800b128:	4610      	mov	r0, r2
 800b12a:	4798      	blx	r3
 800b12c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b12e:	e029      	b.n	800b184 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b130:	6839      	ldr	r1, [r7, #0]
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f000 fa42 	bl	800b5bc <USBD_CtlError>
        err++;
 800b138:	7afb      	ldrb	r3, [r7, #11]
 800b13a:	3301      	adds	r3, #1
 800b13c:	72fb      	strb	r3, [r7, #11]
      break;
 800b13e:	e021      	b.n	800b184 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b146:	699b      	ldr	r3, [r3, #24]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d00b      	beq.n	800b164 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b152:	699b      	ldr	r3, [r3, #24]
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	7c12      	ldrb	r2, [r2, #16]
 800b158:	f107 0108 	add.w	r1, r7, #8
 800b15c:	4610      	mov	r0, r2
 800b15e:	4798      	blx	r3
 800b160:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b162:	e00f      	b.n	800b184 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800b164:	6839      	ldr	r1, [r7, #0]
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f000 fa28 	bl	800b5bc <USBD_CtlError>
        err++;
 800b16c:	7afb      	ldrb	r3, [r7, #11]
 800b16e:	3301      	adds	r3, #1
 800b170:	72fb      	strb	r3, [r7, #11]
      break;
 800b172:	e007      	b.n	800b184 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800b174:	6839      	ldr	r1, [r7, #0]
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 fa20 	bl	800b5bc <USBD_CtlError>
      err++;
 800b17c:	7afb      	ldrb	r3, [r7, #11]
 800b17e:	3301      	adds	r3, #1
 800b180:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800b182:	bf00      	nop
    }
    break;
 800b184:	e037      	b.n	800b1f6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	7c1b      	ldrb	r3, [r3, #16]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d109      	bne.n	800b1a2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b196:	f107 0208 	add.w	r2, r7, #8
 800b19a:	4610      	mov	r0, r2
 800b19c:	4798      	blx	r3
 800b19e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b1a0:	e029      	b.n	800b1f6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800b1a2:	6839      	ldr	r1, [r7, #0]
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 fa09 	bl	800b5bc <USBD_CtlError>
      err++;
 800b1aa:	7afb      	ldrb	r3, [r7, #11]
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	72fb      	strb	r3, [r7, #11]
    break;
 800b1b0:	e021      	b.n	800b1f6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	7c1b      	ldrb	r3, [r3, #16]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d10d      	bne.n	800b1d6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1c2:	f107 0208 	add.w	r2, r7, #8
 800b1c6:	4610      	mov	r0, r2
 800b1c8:	4798      	blx	r3
 800b1ca:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	2207      	movs	r2, #7
 800b1d2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b1d4:	e00f      	b.n	800b1f6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800b1d6:	6839      	ldr	r1, [r7, #0]
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 f9ef 	bl	800b5bc <USBD_CtlError>
      err++;
 800b1de:	7afb      	ldrb	r3, [r7, #11]
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	72fb      	strb	r3, [r7, #11]
    break;
 800b1e4:	e007      	b.n	800b1f6 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800b1e6:	6839      	ldr	r1, [r7, #0]
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 f9e7 	bl	800b5bc <USBD_CtlError>
    err++;
 800b1ee:	7afb      	ldrb	r3, [r7, #11]
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	72fb      	strb	r3, [r7, #11]
    break;
 800b1f4:	bf00      	nop
  }

  if (err != 0U)
 800b1f6:	7afb      	ldrb	r3, [r7, #11]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d11e      	bne.n	800b23a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	88db      	ldrh	r3, [r3, #6]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d016      	beq.n	800b232 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800b204:	893b      	ldrh	r3, [r7, #8]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d00e      	beq.n	800b228 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	88da      	ldrh	r2, [r3, #6]
 800b20e:	893b      	ldrh	r3, [r7, #8]
 800b210:	4293      	cmp	r3, r2
 800b212:	bf28      	it	cs
 800b214:	4613      	movcs	r3, r2
 800b216:	b29b      	uxth	r3, r3
 800b218:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800b21a:	893b      	ldrh	r3, [r7, #8]
 800b21c:	461a      	mov	r2, r3
 800b21e:	68f9      	ldr	r1, [r7, #12]
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 fa3c 	bl	800b69e <USBD_CtlSendData>
 800b226:	e009      	b.n	800b23c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800b228:	6839      	ldr	r1, [r7, #0]
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 f9c6 	bl	800b5bc <USBD_CtlError>
 800b230:	e004      	b.n	800b23c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 fa8d 	bl	800b752 <USBD_CtlSendStatus>
 800b238:	e000      	b.n	800b23c <USBD_GetDescriptor+0x2cc>
    return;
 800b23a:	bf00      	nop
    }
  }
}
 800b23c:	3710      	adds	r7, #16
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop

0800b244 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	889b      	ldrh	r3, [r3, #4]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d130      	bne.n	800b2b8 <USBD_SetAddress+0x74>
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	88db      	ldrh	r3, [r3, #6]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d12c      	bne.n	800b2b8 <USBD_SetAddress+0x74>
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	885b      	ldrh	r3, [r3, #2]
 800b262:	2b7f      	cmp	r3, #127	; 0x7f
 800b264:	d828      	bhi.n	800b2b8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	885b      	ldrh	r3, [r3, #2]
 800b26a:	b2db      	uxtb	r3, r3
 800b26c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b270:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b278:	2b03      	cmp	r3, #3
 800b27a:	d104      	bne.n	800b286 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b27c:	6839      	ldr	r1, [r7, #0]
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 f99c 	bl	800b5bc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b284:	e01c      	b.n	800b2c0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	7bfa      	ldrb	r2, [r7, #15]
 800b28a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b28e:	7bfb      	ldrb	r3, [r7, #15]
 800b290:	4619      	mov	r1, r3
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f000 febe 	bl	800c014 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 fa5a 	bl	800b752 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b29e:	7bfb      	ldrb	r3, [r7, #15]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d004      	beq.n	800b2ae <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2202      	movs	r2, #2
 800b2a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2ac:	e008      	b.n	800b2c0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2b6:	e003      	b.n	800b2c0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b2b8:	6839      	ldr	r1, [r7, #0]
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 f97e 	bl	800b5bc <USBD_CtlError>
  }
}
 800b2c0:	bf00      	nop
 800b2c2:	3710      	adds	r7, #16
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	885b      	ldrh	r3, [r3, #2]
 800b2da:	b2da      	uxtb	r2, r3
 800b2dc:	4b4b      	ldr	r3, [pc, #300]	; (800b40c <USBD_SetConfig+0x144>)
 800b2de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b2e0:	4b4a      	ldr	r3, [pc, #296]	; (800b40c <USBD_SetConfig+0x144>)
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d905      	bls.n	800b2f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b2e8:	6839      	ldr	r1, [r7, #0]
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 f966 	bl	800b5bc <USBD_CtlError>
    return USBD_FAIL;
 800b2f0:	2303      	movs	r3, #3
 800b2f2:	e087      	b.n	800b404 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2fa:	2b02      	cmp	r3, #2
 800b2fc:	d002      	beq.n	800b304 <USBD_SetConfig+0x3c>
 800b2fe:	2b03      	cmp	r3, #3
 800b300:	d025      	beq.n	800b34e <USBD_SetConfig+0x86>
 800b302:	e071      	b.n	800b3e8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800b304:	4b41      	ldr	r3, [pc, #260]	; (800b40c <USBD_SetConfig+0x144>)
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d01c      	beq.n	800b346 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800b30c:	4b3f      	ldr	r3, [pc, #252]	; (800b40c <USBD_SetConfig+0x144>)
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	461a      	mov	r2, r3
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b316:	4b3d      	ldr	r3, [pc, #244]	; (800b40c <USBD_SetConfig+0x144>)
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	4619      	mov	r1, r3
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f7ff f9a7 	bl	800a670 <USBD_SetClassConfig>
 800b322:	4603      	mov	r3, r0
 800b324:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800b326:	7bfb      	ldrb	r3, [r7, #15]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d004      	beq.n	800b336 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800b32c:	6839      	ldr	r1, [r7, #0]
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f000 f944 	bl	800b5bc <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b334:	e065      	b.n	800b402 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 fa0b 	bl	800b752 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2203      	movs	r2, #3
 800b340:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800b344:	e05d      	b.n	800b402 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 fa03 	bl	800b752 <USBD_CtlSendStatus>
    break;
 800b34c:	e059      	b.n	800b402 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800b34e:	4b2f      	ldr	r3, [pc, #188]	; (800b40c <USBD_SetConfig+0x144>)
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d112      	bne.n	800b37c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2202      	movs	r2, #2
 800b35a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800b35e:	4b2b      	ldr	r3, [pc, #172]	; (800b40c <USBD_SetConfig+0x144>)
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	461a      	mov	r2, r3
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b368:	4b28      	ldr	r3, [pc, #160]	; (800b40c <USBD_SetConfig+0x144>)
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	4619      	mov	r1, r3
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f7ff f99a 	bl	800a6a8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 f9ec 	bl	800b752 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b37a:	e042      	b.n	800b402 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800b37c:	4b23      	ldr	r3, [pc, #140]	; (800b40c <USBD_SetConfig+0x144>)
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	461a      	mov	r2, r3
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	429a      	cmp	r2, r3
 800b388:	d02a      	beq.n	800b3e0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	4619      	mov	r1, r3
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f7ff f988 	bl	800a6a8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800b398:	4b1c      	ldr	r3, [pc, #112]	; (800b40c <USBD_SetConfig+0x144>)
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	461a      	mov	r2, r3
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b3a2:	4b1a      	ldr	r3, [pc, #104]	; (800b40c <USBD_SetConfig+0x144>)
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f7ff f961 	bl	800a670 <USBD_SetClassConfig>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800b3b2:	7bfb      	ldrb	r3, [r7, #15]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d00f      	beq.n	800b3d8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800b3b8:	6839      	ldr	r1, [r7, #0]
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 f8fe 	bl	800b5bc <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	b2db      	uxtb	r3, r3
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f7ff f96d 	bl	800a6a8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2202      	movs	r2, #2
 800b3d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800b3d6:	e014      	b.n	800b402 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f000 f9ba 	bl	800b752 <USBD_CtlSendStatus>
    break;
 800b3de:	e010      	b.n	800b402 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f000 f9b6 	bl	800b752 <USBD_CtlSendStatus>
    break;
 800b3e6:	e00c      	b.n	800b402 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800b3e8:	6839      	ldr	r1, [r7, #0]
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 f8e6 	bl	800b5bc <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b3f0:	4b06      	ldr	r3, [pc, #24]	; (800b40c <USBD_SetConfig+0x144>)
 800b3f2:	781b      	ldrb	r3, [r3, #0]
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f7ff f956 	bl	800a6a8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800b3fc:	2303      	movs	r3, #3
 800b3fe:	73fb      	strb	r3, [r7, #15]
    break;
 800b400:	bf00      	nop
  }

  return ret;
 800b402:	7bfb      	ldrb	r3, [r7, #15]
}
 800b404:	4618      	mov	r0, r3
 800b406:	3710      	adds	r7, #16
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}
 800b40c:	20000224 	.word	0x20000224

0800b410 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b082      	sub	sp, #8
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	88db      	ldrh	r3, [r3, #6]
 800b41e:	2b01      	cmp	r3, #1
 800b420:	d004      	beq.n	800b42c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b422:	6839      	ldr	r1, [r7, #0]
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 f8c9 	bl	800b5bc <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800b42a:	e021      	b.n	800b470 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b432:	2b01      	cmp	r3, #1
 800b434:	db17      	blt.n	800b466 <USBD_GetConfig+0x56>
 800b436:	2b02      	cmp	r3, #2
 800b438:	dd02      	ble.n	800b440 <USBD_GetConfig+0x30>
 800b43a:	2b03      	cmp	r3, #3
 800b43c:	d00b      	beq.n	800b456 <USBD_GetConfig+0x46>
 800b43e:	e012      	b.n	800b466 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2200      	movs	r2, #0
 800b444:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	3308      	adds	r3, #8
 800b44a:	2201      	movs	r2, #1
 800b44c:	4619      	mov	r1, r3
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f000 f925 	bl	800b69e <USBD_CtlSendData>
      break;
 800b454:	e00c      	b.n	800b470 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	3304      	adds	r3, #4
 800b45a:	2201      	movs	r2, #1
 800b45c:	4619      	mov	r1, r3
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f000 f91d 	bl	800b69e <USBD_CtlSendData>
      break;
 800b464:	e004      	b.n	800b470 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800b466:	6839      	ldr	r1, [r7, #0]
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f000 f8a7 	bl	800b5bc <USBD_CtlError>
      break;
 800b46e:	bf00      	nop
}
 800b470:	bf00      	nop
 800b472:	3708      	adds	r7, #8
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b082      	sub	sp, #8
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b488:	3b01      	subs	r3, #1
 800b48a:	2b02      	cmp	r3, #2
 800b48c:	d81e      	bhi.n	800b4cc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	88db      	ldrh	r3, [r3, #6]
 800b492:	2b02      	cmp	r3, #2
 800b494:	d004      	beq.n	800b4a0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800b496:	6839      	ldr	r1, [r7, #0]
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f000 f88f 	bl	800b5bc <USBD_CtlError>
      break;
 800b49e:	e01a      	b.n	800b4d6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d005      	beq.n	800b4bc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	68db      	ldr	r3, [r3, #12]
 800b4b4:	f043 0202 	orr.w	r2, r3, #2
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	330c      	adds	r3, #12
 800b4c0:	2202      	movs	r2, #2
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 f8ea 	bl	800b69e <USBD_CtlSendData>
    break;
 800b4ca:	e004      	b.n	800b4d6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800b4cc:	6839      	ldr	r1, [r7, #0]
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f000 f874 	bl	800b5bc <USBD_CtlError>
    break;
 800b4d4:	bf00      	nop
  }
}
 800b4d6:	bf00      	nop
 800b4d8:	3708      	adds	r7, #8
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}

0800b4de <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4de:	b580      	push	{r7, lr}
 800b4e0:	b082      	sub	sp, #8
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	6078      	str	r0, [r7, #4]
 800b4e6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	885b      	ldrh	r3, [r3, #2]
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	d106      	bne.n	800b4fe <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f000 f92a 	bl	800b752 <USBD_CtlSendStatus>
  }
}
 800b4fe:	bf00      	nop
 800b500:	3708      	adds	r7, #8
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}

0800b506 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b506:	b580      	push	{r7, lr}
 800b508:	b082      	sub	sp, #8
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]
 800b50e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b516:	3b01      	subs	r3, #1
 800b518:	2b02      	cmp	r3, #2
 800b51a:	d80b      	bhi.n	800b534 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	885b      	ldrh	r3, [r3, #2]
 800b520:	2b01      	cmp	r3, #1
 800b522:	d10c      	bne.n	800b53e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f000 f910 	bl	800b752 <USBD_CtlSendStatus>
      }
      break;
 800b532:	e004      	b.n	800b53e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b534:	6839      	ldr	r1, [r7, #0]
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 f840 	bl	800b5bc <USBD_CtlError>
      break;
 800b53c:	e000      	b.n	800b540 <USBD_ClrFeature+0x3a>
      break;
 800b53e:	bf00      	nop
  }
}
 800b540:	bf00      	nop
 800b542:	3708      	adds	r7, #8
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b084      	sub	sp, #16
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	781a      	ldrb	r2, [r3, #0]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	3301      	adds	r3, #1
 800b562:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	781a      	ldrb	r2, [r3, #0]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	3301      	adds	r3, #1
 800b570:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b572:	68f8      	ldr	r0, [r7, #12]
 800b574:	f7ff fad3 	bl	800ab1e <SWAPBYTE>
 800b578:	4603      	mov	r3, r0
 800b57a:	461a      	mov	r2, r3
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	3301      	adds	r3, #1
 800b584:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	3301      	adds	r3, #1
 800b58a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b58c:	68f8      	ldr	r0, [r7, #12]
 800b58e:	f7ff fac6 	bl	800ab1e <SWAPBYTE>
 800b592:	4603      	mov	r3, r0
 800b594:	461a      	mov	r2, r3
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	3301      	adds	r3, #1
 800b59e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b5a6:	68f8      	ldr	r0, [r7, #12]
 800b5a8:	f7ff fab9 	bl	800ab1e <SWAPBYTE>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	80da      	strh	r2, [r3, #6]
}
 800b5b4:	bf00      	nop
 800b5b6:	3710      	adds	r7, #16
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b082      	sub	sp, #8
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b5c6:	2180      	movs	r1, #128	; 0x80
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 fcb9 	bl	800bf40 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b5ce:	2100      	movs	r1, #0
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 fcb5 	bl	800bf40 <USBD_LL_StallEP>
}
 800b5d6:	bf00      	nop
 800b5d8:	3708      	adds	r7, #8
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}

0800b5de <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b5de:	b580      	push	{r7, lr}
 800b5e0:	b086      	sub	sp, #24
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	60f8      	str	r0, [r7, #12]
 800b5e6:	60b9      	str	r1, [r7, #8]
 800b5e8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d036      	beq.n	800b662 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b5f8:	6938      	ldr	r0, [r7, #16]
 800b5fa:	f000 f836 	bl	800b66a <USBD_GetLen>
 800b5fe:	4603      	mov	r3, r0
 800b600:	3301      	adds	r3, #1
 800b602:	b29b      	uxth	r3, r3
 800b604:	005b      	lsls	r3, r3, #1
 800b606:	b29a      	uxth	r2, r3
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b60c:	7dfb      	ldrb	r3, [r7, #23]
 800b60e:	68ba      	ldr	r2, [r7, #8]
 800b610:	4413      	add	r3, r2
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	7812      	ldrb	r2, [r2, #0]
 800b616:	701a      	strb	r2, [r3, #0]
  idx++;
 800b618:	7dfb      	ldrb	r3, [r7, #23]
 800b61a:	3301      	adds	r3, #1
 800b61c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b61e:	7dfb      	ldrb	r3, [r7, #23]
 800b620:	68ba      	ldr	r2, [r7, #8]
 800b622:	4413      	add	r3, r2
 800b624:	2203      	movs	r2, #3
 800b626:	701a      	strb	r2, [r3, #0]
  idx++;
 800b628:	7dfb      	ldrb	r3, [r7, #23]
 800b62a:	3301      	adds	r3, #1
 800b62c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b62e:	e013      	b.n	800b658 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b630:	7dfb      	ldrb	r3, [r7, #23]
 800b632:	68ba      	ldr	r2, [r7, #8]
 800b634:	4413      	add	r3, r2
 800b636:	693a      	ldr	r2, [r7, #16]
 800b638:	7812      	ldrb	r2, [r2, #0]
 800b63a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	3301      	adds	r3, #1
 800b640:	613b      	str	r3, [r7, #16]
    idx++;
 800b642:	7dfb      	ldrb	r3, [r7, #23]
 800b644:	3301      	adds	r3, #1
 800b646:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b648:	7dfb      	ldrb	r3, [r7, #23]
 800b64a:	68ba      	ldr	r2, [r7, #8]
 800b64c:	4413      	add	r3, r2
 800b64e:	2200      	movs	r2, #0
 800b650:	701a      	strb	r2, [r3, #0]
    idx++;
 800b652:	7dfb      	ldrb	r3, [r7, #23]
 800b654:	3301      	adds	r3, #1
 800b656:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d1e7      	bne.n	800b630 <USBD_GetString+0x52>
 800b660:	e000      	b.n	800b664 <USBD_GetString+0x86>
    return;
 800b662:	bf00      	nop
  }
}
 800b664:	3718      	adds	r7, #24
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}

0800b66a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b66a:	b480      	push	{r7}
 800b66c:	b085      	sub	sp, #20
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b672:	2300      	movs	r3, #0
 800b674:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b67a:	e005      	b.n	800b688 <USBD_GetLen+0x1e>
  {
    len++;
 800b67c:	7bfb      	ldrb	r3, [r7, #15]
 800b67e:	3301      	adds	r3, #1
 800b680:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	3301      	adds	r3, #1
 800b686:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d1f5      	bne.n	800b67c <USBD_GetLen+0x12>
  }

  return len;
 800b690:	7bfb      	ldrb	r3, [r7, #15]
}
 800b692:	4618      	mov	r0, r3
 800b694:	3714      	adds	r7, #20
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr

0800b69e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b69e:	b580      	push	{r7, lr}
 800b6a0:	b084      	sub	sp, #16
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	60f8      	str	r0, [r7, #12]
 800b6a6:	60b9      	str	r1, [r7, #8]
 800b6a8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2202      	movs	r2, #2
 800b6ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	687a      	ldr	r2, [r7, #4]
 800b6b6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	687a      	ldr	r2, [r7, #4]
 800b6bc:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	68ba      	ldr	r2, [r7, #8]
 800b6c2:	2100      	movs	r1, #0
 800b6c4:	68f8      	ldr	r0, [r7, #12]
 800b6c6:	f000 fcc4 	bl	800c052 <USBD_LL_Transmit>

  return USBD_OK;
 800b6ca:	2300      	movs	r3, #0
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3710      	adds	r7, #16
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}

0800b6d4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b084      	sub	sp, #16
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	60f8      	str	r0, [r7, #12]
 800b6dc:	60b9      	str	r1, [r7, #8]
 800b6de:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	68ba      	ldr	r2, [r7, #8]
 800b6e4:	2100      	movs	r1, #0
 800b6e6:	68f8      	ldr	r0, [r7, #12]
 800b6e8:	f000 fcb3 	bl	800c052 <USBD_LL_Transmit>

  return USBD_OK;
 800b6ec:	2300      	movs	r3, #0
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3710      	adds	r7, #16
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b6f6:	b580      	push	{r7, lr}
 800b6f8:	b084      	sub	sp, #16
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	60f8      	str	r0, [r7, #12]
 800b6fe:	60b9      	str	r1, [r7, #8]
 800b700:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2203      	movs	r2, #3
 800b706:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	687a      	ldr	r2, [r7, #4]
 800b70e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	687a      	ldr	r2, [r7, #4]
 800b716:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	68ba      	ldr	r2, [r7, #8]
 800b71e:	2100      	movs	r1, #0
 800b720:	68f8      	ldr	r0, [r7, #12]
 800b722:	f000 fcb7 	bl	800c094 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b726:	2300      	movs	r3, #0
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3710      	adds	r7, #16
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	60b9      	str	r1, [r7, #8]
 800b73a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	68ba      	ldr	r2, [r7, #8]
 800b740:	2100      	movs	r1, #0
 800b742:	68f8      	ldr	r0, [r7, #12]
 800b744:	f000 fca6 	bl	800c094 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b748:	2300      	movs	r3, #0
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3710      	adds	r7, #16
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}

0800b752 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b752:	b580      	push	{r7, lr}
 800b754:	b082      	sub	sp, #8
 800b756:	af00      	add	r7, sp, #0
 800b758:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2204      	movs	r2, #4
 800b75e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b762:	2300      	movs	r3, #0
 800b764:	2200      	movs	r2, #0
 800b766:	2100      	movs	r1, #0
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 fc72 	bl	800c052 <USBD_LL_Transmit>

  return USBD_OK;
 800b76e:	2300      	movs	r3, #0
}
 800b770:	4618      	mov	r0, r3
 800b772:	3708      	adds	r7, #8
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}

0800b778 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2205      	movs	r2, #5
 800b784:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b788:	2300      	movs	r3, #0
 800b78a:	2200      	movs	r2, #0
 800b78c:	2100      	movs	r1, #0
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 fc80 	bl	800c094 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b794:	2300      	movs	r3, #0
}
 800b796:	4618      	mov	r0, r3
 800b798:	3708      	adds	r7, #8
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
	...

0800b7a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	4912      	ldr	r1, [pc, #72]	; (800b7f0 <MX_USB_DEVICE_Init+0x50>)
 800b7a8:	4812      	ldr	r0, [pc, #72]	; (800b7f4 <MX_USB_DEVICE_Init+0x54>)
 800b7aa:	f7fe fef3 	bl	800a594 <USBD_Init>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d001      	beq.n	800b7b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b7b4:	f7f6 f8ec 	bl	8001990 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b7b8:	490f      	ldr	r1, [pc, #60]	; (800b7f8 <MX_USB_DEVICE_Init+0x58>)
 800b7ba:	480e      	ldr	r0, [pc, #56]	; (800b7f4 <MX_USB_DEVICE_Init+0x54>)
 800b7bc:	f7fe ff20 	bl	800a600 <USBD_RegisterClass>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d001      	beq.n	800b7ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b7c6:	f7f6 f8e3 	bl	8001990 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b7ca:	490c      	ldr	r1, [pc, #48]	; (800b7fc <MX_USB_DEVICE_Init+0x5c>)
 800b7cc:	4809      	ldr	r0, [pc, #36]	; (800b7f4 <MX_USB_DEVICE_Init+0x54>)
 800b7ce:	f7fe fe75 	bl	800a4bc <USBD_CDC_RegisterInterface>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d001      	beq.n	800b7dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b7d8:	f7f6 f8da 	bl	8001990 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b7dc:	4805      	ldr	r0, [pc, #20]	; (800b7f4 <MX_USB_DEVICE_Init+0x54>)
 800b7de:	f7fe ff30 	bl	800a642 <USBD_Start>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d001      	beq.n	800b7ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b7e8:	f7f6 f8d2 	bl	8001990 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b7ec:	bf00      	nop
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	20000138 	.word	0x20000138
 800b7f4:	20000640 	.word	0x20000640
 800b7f8:	20000020 	.word	0x20000020
 800b7fc:	20000124 	.word	0x20000124

0800b800 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b804:	2200      	movs	r2, #0
 800b806:	4905      	ldr	r1, [pc, #20]	; (800b81c <CDC_Init_FS+0x1c>)
 800b808:	4805      	ldr	r0, [pc, #20]	; (800b820 <CDC_Init_FS+0x20>)
 800b80a:	f7fe fe6c 	bl	800a4e6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b80e:	4905      	ldr	r1, [pc, #20]	; (800b824 <CDC_Init_FS+0x24>)
 800b810:	4803      	ldr	r0, [pc, #12]	; (800b820 <CDC_Init_FS+0x20>)
 800b812:	f7fe fe81 	bl	800a518 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b816:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b818:	4618      	mov	r0, r3
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	20001110 	.word	0x20001110
 800b820:	20000640 	.word	0x20000640
 800b824:	20000910 	.word	0x20000910

0800b828 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b828:	b480      	push	{r7}
 800b82a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b82c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b82e:	4618      	mov	r0, r3
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr

0800b838 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b838:	b480      	push	{r7}
 800b83a:	b083      	sub	sp, #12
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	4603      	mov	r3, r0
 800b840:	6039      	str	r1, [r7, #0]
 800b842:	71fb      	strb	r3, [r7, #7]
 800b844:	4613      	mov	r3, r2
 800b846:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b848:	79fb      	ldrb	r3, [r7, #7]
 800b84a:	2b23      	cmp	r3, #35	; 0x23
 800b84c:	d84a      	bhi.n	800b8e4 <CDC_Control_FS+0xac>
 800b84e:	a201      	add	r2, pc, #4	; (adr r2, 800b854 <CDC_Control_FS+0x1c>)
 800b850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b854:	0800b8e5 	.word	0x0800b8e5
 800b858:	0800b8e5 	.word	0x0800b8e5
 800b85c:	0800b8e5 	.word	0x0800b8e5
 800b860:	0800b8e5 	.word	0x0800b8e5
 800b864:	0800b8e5 	.word	0x0800b8e5
 800b868:	0800b8e5 	.word	0x0800b8e5
 800b86c:	0800b8e5 	.word	0x0800b8e5
 800b870:	0800b8e5 	.word	0x0800b8e5
 800b874:	0800b8e5 	.word	0x0800b8e5
 800b878:	0800b8e5 	.word	0x0800b8e5
 800b87c:	0800b8e5 	.word	0x0800b8e5
 800b880:	0800b8e5 	.word	0x0800b8e5
 800b884:	0800b8e5 	.word	0x0800b8e5
 800b888:	0800b8e5 	.word	0x0800b8e5
 800b88c:	0800b8e5 	.word	0x0800b8e5
 800b890:	0800b8e5 	.word	0x0800b8e5
 800b894:	0800b8e5 	.word	0x0800b8e5
 800b898:	0800b8e5 	.word	0x0800b8e5
 800b89c:	0800b8e5 	.word	0x0800b8e5
 800b8a0:	0800b8e5 	.word	0x0800b8e5
 800b8a4:	0800b8e5 	.word	0x0800b8e5
 800b8a8:	0800b8e5 	.word	0x0800b8e5
 800b8ac:	0800b8e5 	.word	0x0800b8e5
 800b8b0:	0800b8e5 	.word	0x0800b8e5
 800b8b4:	0800b8e5 	.word	0x0800b8e5
 800b8b8:	0800b8e5 	.word	0x0800b8e5
 800b8bc:	0800b8e5 	.word	0x0800b8e5
 800b8c0:	0800b8e5 	.word	0x0800b8e5
 800b8c4:	0800b8e5 	.word	0x0800b8e5
 800b8c8:	0800b8e5 	.word	0x0800b8e5
 800b8cc:	0800b8e5 	.word	0x0800b8e5
 800b8d0:	0800b8e5 	.word	0x0800b8e5
 800b8d4:	0800b8e5 	.word	0x0800b8e5
 800b8d8:	0800b8e5 	.word	0x0800b8e5
 800b8dc:	0800b8e5 	.word	0x0800b8e5
 800b8e0:	0800b8e5 	.word	0x0800b8e5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b8e4:	bf00      	nop
  }

  return (USBD_OK);
 800b8e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	370c      	adds	r7, #12
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f2:	4770      	bx	lr

0800b8f4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b8fe:	6879      	ldr	r1, [r7, #4]
 800b900:	4805      	ldr	r0, [pc, #20]	; (800b918 <CDC_Receive_FS+0x24>)
 800b902:	f7fe fe09 	bl	800a518 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b906:	4804      	ldr	r0, [pc, #16]	; (800b918 <CDC_Receive_FS+0x24>)
 800b908:	f7fe fe1a 	bl	800a540 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b90c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3708      	adds	r7, #8
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
 800b916:	bf00      	nop
 800b918:	20000640 	.word	0x20000640

0800b91c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b087      	sub	sp, #28
 800b920:	af00      	add	r7, sp, #0
 800b922:	60f8      	str	r0, [r7, #12]
 800b924:	60b9      	str	r1, [r7, #8]
 800b926:	4613      	mov	r3, r2
 800b928:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b92a:	2300      	movs	r3, #0
 800b92c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b92e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b932:	4618      	mov	r0, r3
 800b934:	371c      	adds	r7, #28
 800b936:	46bd      	mov	sp, r7
 800b938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93c:	4770      	bx	lr
	...

0800b940 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b940:	b480      	push	{r7}
 800b942:	b083      	sub	sp, #12
 800b944:	af00      	add	r7, sp, #0
 800b946:	4603      	mov	r3, r0
 800b948:	6039      	str	r1, [r7, #0]
 800b94a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	2212      	movs	r2, #18
 800b950:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b952:	4b03      	ldr	r3, [pc, #12]	; (800b960 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b954:	4618      	mov	r0, r3
 800b956:	370c      	adds	r7, #12
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr
 800b960:	20000154 	.word	0x20000154

0800b964 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b964:	b480      	push	{r7}
 800b966:	b083      	sub	sp, #12
 800b968:	af00      	add	r7, sp, #0
 800b96a:	4603      	mov	r3, r0
 800b96c:	6039      	str	r1, [r7, #0]
 800b96e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	2204      	movs	r2, #4
 800b974:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b976:	4b03      	ldr	r3, [pc, #12]	; (800b984 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b978:	4618      	mov	r0, r3
 800b97a:	370c      	adds	r7, #12
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr
 800b984:	20000168 	.word	0x20000168

0800b988 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b082      	sub	sp, #8
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	4603      	mov	r3, r0
 800b990:	6039      	str	r1, [r7, #0]
 800b992:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b994:	79fb      	ldrb	r3, [r7, #7]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d105      	bne.n	800b9a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b99a:	683a      	ldr	r2, [r7, #0]
 800b99c:	4907      	ldr	r1, [pc, #28]	; (800b9bc <USBD_FS_ProductStrDescriptor+0x34>)
 800b99e:	4808      	ldr	r0, [pc, #32]	; (800b9c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800b9a0:	f7ff fe1d 	bl	800b5de <USBD_GetString>
 800b9a4:	e004      	b.n	800b9b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b9a6:	683a      	ldr	r2, [r7, #0]
 800b9a8:	4904      	ldr	r1, [pc, #16]	; (800b9bc <USBD_FS_ProductStrDescriptor+0x34>)
 800b9aa:	4805      	ldr	r0, [pc, #20]	; (800b9c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800b9ac:	f7ff fe17 	bl	800b5de <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9b0:	4b02      	ldr	r3, [pc, #8]	; (800b9bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3708      	adds	r7, #8
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}
 800b9ba:	bf00      	nop
 800b9bc:	20001910 	.word	0x20001910
 800b9c0:	0800ca2c 	.word	0x0800ca2c

0800b9c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	6039      	str	r1, [r7, #0]
 800b9ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b9d0:	683a      	ldr	r2, [r7, #0]
 800b9d2:	4904      	ldr	r1, [pc, #16]	; (800b9e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b9d4:	4804      	ldr	r0, [pc, #16]	; (800b9e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b9d6:	f7ff fe02 	bl	800b5de <USBD_GetString>
  return USBD_StrDesc;
 800b9da:	4b02      	ldr	r3, [pc, #8]	; (800b9e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3708      	adds	r7, #8
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}
 800b9e4:	20001910 	.word	0x20001910
 800b9e8:	0800ca44 	.word	0x0800ca44

0800b9ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b082      	sub	sp, #8
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	6039      	str	r1, [r7, #0]
 800b9f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	221a      	movs	r2, #26
 800b9fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b9fe:	f000 f843 	bl	800ba88 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ba02:	4b02      	ldr	r3, [pc, #8]	; (800ba0c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3708      	adds	r7, #8
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}
 800ba0c:	2000016c 	.word	0x2000016c

0800ba10 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	4603      	mov	r3, r0
 800ba18:	6039      	str	r1, [r7, #0]
 800ba1a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ba1c:	79fb      	ldrb	r3, [r7, #7]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d105      	bne.n	800ba2e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ba22:	683a      	ldr	r2, [r7, #0]
 800ba24:	4907      	ldr	r1, [pc, #28]	; (800ba44 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ba26:	4808      	ldr	r0, [pc, #32]	; (800ba48 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ba28:	f7ff fdd9 	bl	800b5de <USBD_GetString>
 800ba2c:	e004      	b.n	800ba38 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ba2e:	683a      	ldr	r2, [r7, #0]
 800ba30:	4904      	ldr	r1, [pc, #16]	; (800ba44 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ba32:	4805      	ldr	r0, [pc, #20]	; (800ba48 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ba34:	f7ff fdd3 	bl	800b5de <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba38:	4b02      	ldr	r3, [pc, #8]	; (800ba44 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3708      	adds	r7, #8
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}
 800ba42:	bf00      	nop
 800ba44:	20001910 	.word	0x20001910
 800ba48:	0800ca58 	.word	0x0800ca58

0800ba4c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b082      	sub	sp, #8
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	4603      	mov	r3, r0
 800ba54:	6039      	str	r1, [r7, #0]
 800ba56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ba58:	79fb      	ldrb	r3, [r7, #7]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d105      	bne.n	800ba6a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ba5e:	683a      	ldr	r2, [r7, #0]
 800ba60:	4907      	ldr	r1, [pc, #28]	; (800ba80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ba62:	4808      	ldr	r0, [pc, #32]	; (800ba84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ba64:	f7ff fdbb 	bl	800b5de <USBD_GetString>
 800ba68:	e004      	b.n	800ba74 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ba6a:	683a      	ldr	r2, [r7, #0]
 800ba6c:	4904      	ldr	r1, [pc, #16]	; (800ba80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ba6e:	4805      	ldr	r0, [pc, #20]	; (800ba84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ba70:	f7ff fdb5 	bl	800b5de <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba74:	4b02      	ldr	r3, [pc, #8]	; (800ba80 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3708      	adds	r7, #8
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
 800ba7e:	bf00      	nop
 800ba80:	20001910 	.word	0x20001910
 800ba84:	0800ca64 	.word	0x0800ca64

0800ba88 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b084      	sub	sp, #16
 800ba8c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ba8e:	4b0f      	ldr	r3, [pc, #60]	; (800bacc <Get_SerialNum+0x44>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ba94:	4b0e      	ldr	r3, [pc, #56]	; (800bad0 <Get_SerialNum+0x48>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ba9a:	4b0e      	ldr	r3, [pc, #56]	; (800bad4 <Get_SerialNum+0x4c>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800baa0:	68fa      	ldr	r2, [r7, #12]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	4413      	add	r3, r2
 800baa6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d009      	beq.n	800bac2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800baae:	2208      	movs	r2, #8
 800bab0:	4909      	ldr	r1, [pc, #36]	; (800bad8 <Get_SerialNum+0x50>)
 800bab2:	68f8      	ldr	r0, [r7, #12]
 800bab4:	f000 f814 	bl	800bae0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bab8:	2204      	movs	r2, #4
 800baba:	4908      	ldr	r1, [pc, #32]	; (800badc <Get_SerialNum+0x54>)
 800babc:	68b8      	ldr	r0, [r7, #8]
 800babe:	f000 f80f 	bl	800bae0 <IntToUnicode>
  }
}
 800bac2:	bf00      	nop
 800bac4:	3710      	adds	r7, #16
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	bf00      	nop
 800bacc:	1fff7a10 	.word	0x1fff7a10
 800bad0:	1fff7a14 	.word	0x1fff7a14
 800bad4:	1fff7a18 	.word	0x1fff7a18
 800bad8:	2000016e 	.word	0x2000016e
 800badc:	2000017e 	.word	0x2000017e

0800bae0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b087      	sub	sp, #28
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	60f8      	str	r0, [r7, #12]
 800bae8:	60b9      	str	r1, [r7, #8]
 800baea:	4613      	mov	r3, r2
 800baec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800baee:	2300      	movs	r3, #0
 800baf0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800baf2:	2300      	movs	r3, #0
 800baf4:	75fb      	strb	r3, [r7, #23]
 800baf6:	e027      	b.n	800bb48 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	0f1b      	lsrs	r3, r3, #28
 800bafc:	2b09      	cmp	r3, #9
 800bafe:	d80b      	bhi.n	800bb18 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	0f1b      	lsrs	r3, r3, #28
 800bb04:	b2da      	uxtb	r2, r3
 800bb06:	7dfb      	ldrb	r3, [r7, #23]
 800bb08:	005b      	lsls	r3, r3, #1
 800bb0a:	4619      	mov	r1, r3
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	440b      	add	r3, r1
 800bb10:	3230      	adds	r2, #48	; 0x30
 800bb12:	b2d2      	uxtb	r2, r2
 800bb14:	701a      	strb	r2, [r3, #0]
 800bb16:	e00a      	b.n	800bb2e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	0f1b      	lsrs	r3, r3, #28
 800bb1c:	b2da      	uxtb	r2, r3
 800bb1e:	7dfb      	ldrb	r3, [r7, #23]
 800bb20:	005b      	lsls	r3, r3, #1
 800bb22:	4619      	mov	r1, r3
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	440b      	add	r3, r1
 800bb28:	3237      	adds	r2, #55	; 0x37
 800bb2a:	b2d2      	uxtb	r2, r2
 800bb2c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	011b      	lsls	r3, r3, #4
 800bb32:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bb34:	7dfb      	ldrb	r3, [r7, #23]
 800bb36:	005b      	lsls	r3, r3, #1
 800bb38:	3301      	adds	r3, #1
 800bb3a:	68ba      	ldr	r2, [r7, #8]
 800bb3c:	4413      	add	r3, r2
 800bb3e:	2200      	movs	r2, #0
 800bb40:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bb42:	7dfb      	ldrb	r3, [r7, #23]
 800bb44:	3301      	adds	r3, #1
 800bb46:	75fb      	strb	r3, [r7, #23]
 800bb48:	7dfa      	ldrb	r2, [r7, #23]
 800bb4a:	79fb      	ldrb	r3, [r7, #7]
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d3d3      	bcc.n	800baf8 <IntToUnicode+0x18>
  }
}
 800bb50:	bf00      	nop
 800bb52:	371c      	adds	r7, #28
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr

0800bb5c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b08a      	sub	sp, #40	; 0x28
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb64:	f107 0314 	add.w	r3, r7, #20
 800bb68:	2200      	movs	r2, #0
 800bb6a:	601a      	str	r2, [r3, #0]
 800bb6c:	605a      	str	r2, [r3, #4]
 800bb6e:	609a      	str	r2, [r3, #8]
 800bb70:	60da      	str	r2, [r3, #12]
 800bb72:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb7c:	d13a      	bne.n	800bbf4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bb7e:	2300      	movs	r3, #0
 800bb80:	613b      	str	r3, [r7, #16]
 800bb82:	4b1e      	ldr	r3, [pc, #120]	; (800bbfc <HAL_PCD_MspInit+0xa0>)
 800bb84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb86:	4a1d      	ldr	r2, [pc, #116]	; (800bbfc <HAL_PCD_MspInit+0xa0>)
 800bb88:	f043 0301 	orr.w	r3, r3, #1
 800bb8c:	6313      	str	r3, [r2, #48]	; 0x30
 800bb8e:	4b1b      	ldr	r3, [pc, #108]	; (800bbfc <HAL_PCD_MspInit+0xa0>)
 800bb90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb92:	f003 0301 	and.w	r3, r3, #1
 800bb96:	613b      	str	r3, [r7, #16]
 800bb98:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bb9a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bb9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bba0:	2302      	movs	r3, #2
 800bba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bba4:	2300      	movs	r3, #0
 800bba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bba8:	2303      	movs	r3, #3
 800bbaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bbac:	230a      	movs	r3, #10
 800bbae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bbb0:	f107 0314 	add.w	r3, r7, #20
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	4812      	ldr	r0, [pc, #72]	; (800bc00 <HAL_PCD_MspInit+0xa4>)
 800bbb8:	f7f7 f8b4 	bl	8002d24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bbbc:	4b0f      	ldr	r3, [pc, #60]	; (800bbfc <HAL_PCD_MspInit+0xa0>)
 800bbbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbc0:	4a0e      	ldr	r2, [pc, #56]	; (800bbfc <HAL_PCD_MspInit+0xa0>)
 800bbc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbc6:	6353      	str	r3, [r2, #52]	; 0x34
 800bbc8:	2300      	movs	r3, #0
 800bbca:	60fb      	str	r3, [r7, #12]
 800bbcc:	4b0b      	ldr	r3, [pc, #44]	; (800bbfc <HAL_PCD_MspInit+0xa0>)
 800bbce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbd0:	4a0a      	ldr	r2, [pc, #40]	; (800bbfc <HAL_PCD_MspInit+0xa0>)
 800bbd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bbd6:	6453      	str	r3, [r2, #68]	; 0x44
 800bbd8:	4b08      	ldr	r3, [pc, #32]	; (800bbfc <HAL_PCD_MspInit+0xa0>)
 800bbda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bbe0:	60fb      	str	r3, [r7, #12]
 800bbe2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	2100      	movs	r1, #0
 800bbe8:	2043      	movs	r0, #67	; 0x43
 800bbea:	f7f6 fcba 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bbee:	2043      	movs	r0, #67	; 0x43
 800bbf0:	f7f6 fcd3 	bl	800259a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bbf4:	bf00      	nop
 800bbf6:	3728      	adds	r7, #40	; 0x28
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	40023800 	.word	0x40023800
 800bc00:	40020000 	.word	0x40020000

0800bc04 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b082      	sub	sp, #8
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bc18:	4619      	mov	r1, r3
 800bc1a:	4610      	mov	r0, r2
 800bc1c:	f7fe fd5c 	bl	800a6d8 <USBD_LL_SetupStage>
}
 800bc20:	bf00      	nop
 800bc22:	3708      	adds	r7, #8
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	460b      	mov	r3, r1
 800bc32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bc3a:	78fa      	ldrb	r2, [r7, #3]
 800bc3c:	6879      	ldr	r1, [r7, #4]
 800bc3e:	4613      	mov	r3, r2
 800bc40:	00db      	lsls	r3, r3, #3
 800bc42:	1a9b      	subs	r3, r3, r2
 800bc44:	009b      	lsls	r3, r3, #2
 800bc46:	440b      	add	r3, r1
 800bc48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bc4c:	681a      	ldr	r2, [r3, #0]
 800bc4e:	78fb      	ldrb	r3, [r7, #3]
 800bc50:	4619      	mov	r1, r3
 800bc52:	f7fe fd94 	bl	800a77e <USBD_LL_DataOutStage>
}
 800bc56:	bf00      	nop
 800bc58:	3708      	adds	r7, #8
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}

0800bc5e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc5e:	b580      	push	{r7, lr}
 800bc60:	b082      	sub	sp, #8
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	6078      	str	r0, [r7, #4]
 800bc66:	460b      	mov	r3, r1
 800bc68:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bc70:	78fa      	ldrb	r2, [r7, #3]
 800bc72:	6879      	ldr	r1, [r7, #4]
 800bc74:	4613      	mov	r3, r2
 800bc76:	00db      	lsls	r3, r3, #3
 800bc78:	1a9b      	subs	r3, r3, r2
 800bc7a:	009b      	lsls	r3, r3, #2
 800bc7c:	440b      	add	r3, r1
 800bc7e:	3348      	adds	r3, #72	; 0x48
 800bc80:	681a      	ldr	r2, [r3, #0]
 800bc82:	78fb      	ldrb	r3, [r7, #3]
 800bc84:	4619      	mov	r1, r3
 800bc86:	f7fe fddd 	bl	800a844 <USBD_LL_DataInStage>
}
 800bc8a:	bf00      	nop
 800bc8c:	3708      	adds	r7, #8
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}

0800bc92 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc92:	b580      	push	{r7, lr}
 800bc94:	b082      	sub	sp, #8
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bca0:	4618      	mov	r0, r3
 800bca2:	f7fe fee1 	bl	800aa68 <USBD_LL_SOF>
}
 800bca6:	bf00      	nop
 800bca8:	3708      	adds	r7, #8
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}

0800bcae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcae:	b580      	push	{r7, lr}
 800bcb0:	b084      	sub	sp, #16
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	68db      	ldr	r3, [r3, #12]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d102      	bne.n	800bcc8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	73fb      	strb	r3, [r7, #15]
 800bcc6:	e008      	b.n	800bcda <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	68db      	ldr	r3, [r3, #12]
 800bccc:	2b02      	cmp	r3, #2
 800bcce:	d102      	bne.n	800bcd6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	73fb      	strb	r3, [r7, #15]
 800bcd4:	e001      	b.n	800bcda <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bcd6:	f7f5 fe5b 	bl	8001990 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bce0:	7bfa      	ldrb	r2, [r7, #15]
 800bce2:	4611      	mov	r1, r2
 800bce4:	4618      	mov	r0, r3
 800bce6:	f7fe fe84 	bl	800a9f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f7fe fe3d 	bl	800a970 <USBD_LL_Reset>
}
 800bcf6:	bf00      	nop
 800bcf8:	3710      	adds	r7, #16
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
	...

0800bd00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b082      	sub	sp, #8
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7fe fe7f 	bl	800aa12 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	6812      	ldr	r2, [r2, #0]
 800bd22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bd26:	f043 0301 	orr.w	r3, r3, #1
 800bd2a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6a1b      	ldr	r3, [r3, #32]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d005      	beq.n	800bd40 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bd34:	4b04      	ldr	r3, [pc, #16]	; (800bd48 <HAL_PCD_SuspendCallback+0x48>)
 800bd36:	691b      	ldr	r3, [r3, #16]
 800bd38:	4a03      	ldr	r2, [pc, #12]	; (800bd48 <HAL_PCD_SuspendCallback+0x48>)
 800bd3a:	f043 0306 	orr.w	r3, r3, #6
 800bd3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bd40:	bf00      	nop
 800bd42:	3708      	adds	r7, #8
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}
 800bd48:	e000ed00 	.word	0xe000ed00

0800bd4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b082      	sub	sp, #8
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f7fe fe6e 	bl	800aa3c <USBD_LL_Resume>
}
 800bd60:	bf00      	nop
 800bd62:	3708      	adds	r7, #8
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	460b      	mov	r3, r1
 800bd72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd7a:	78fa      	ldrb	r2, [r7, #3]
 800bd7c:	4611      	mov	r1, r2
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7fe fe99 	bl	800aab6 <USBD_LL_IsoOUTIncomplete>
}
 800bd84:	bf00      	nop
 800bd86:	3708      	adds	r7, #8
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b082      	sub	sp, #8
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	460b      	mov	r3, r1
 800bd96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd9e:	78fa      	ldrb	r2, [r7, #3]
 800bda0:	4611      	mov	r1, r2
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7fe fe7a 	bl	800aa9c <USBD_LL_IsoINIncomplete>
}
 800bda8:	bf00      	nop
 800bdaa:	3708      	adds	r7, #8
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7fe fe86 	bl	800aad0 <USBD_LL_DevConnected>
}
 800bdc4:	bf00      	nop
 800bdc6:	3708      	adds	r7, #8
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b082      	sub	sp, #8
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bdda:	4618      	mov	r0, r3
 800bddc:	f7fe fe83 	bl	800aae6 <USBD_LL_DevDisconnected>
}
 800bde0:	bf00      	nop
 800bde2:	3708      	adds	r7, #8
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	781b      	ldrb	r3, [r3, #0]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d13c      	bne.n	800be72 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bdf8:	4a20      	ldr	r2, [pc, #128]	; (800be7c <USBD_LL_Init+0x94>)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	4a1e      	ldr	r2, [pc, #120]	; (800be7c <USBD_LL_Init+0x94>)
 800be04:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800be08:	4b1c      	ldr	r3, [pc, #112]	; (800be7c <USBD_LL_Init+0x94>)
 800be0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800be0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800be10:	4b1a      	ldr	r3, [pc, #104]	; (800be7c <USBD_LL_Init+0x94>)
 800be12:	2204      	movs	r2, #4
 800be14:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800be16:	4b19      	ldr	r3, [pc, #100]	; (800be7c <USBD_LL_Init+0x94>)
 800be18:	2202      	movs	r2, #2
 800be1a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800be1c:	4b17      	ldr	r3, [pc, #92]	; (800be7c <USBD_LL_Init+0x94>)
 800be1e:	2200      	movs	r2, #0
 800be20:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800be22:	4b16      	ldr	r3, [pc, #88]	; (800be7c <USBD_LL_Init+0x94>)
 800be24:	2202      	movs	r2, #2
 800be26:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800be28:	4b14      	ldr	r3, [pc, #80]	; (800be7c <USBD_LL_Init+0x94>)
 800be2a:	2200      	movs	r2, #0
 800be2c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800be2e:	4b13      	ldr	r3, [pc, #76]	; (800be7c <USBD_LL_Init+0x94>)
 800be30:	2200      	movs	r2, #0
 800be32:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800be34:	4b11      	ldr	r3, [pc, #68]	; (800be7c <USBD_LL_Init+0x94>)
 800be36:	2200      	movs	r2, #0
 800be38:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800be3a:	4b10      	ldr	r3, [pc, #64]	; (800be7c <USBD_LL_Init+0x94>)
 800be3c:	2200      	movs	r2, #0
 800be3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800be40:	4b0e      	ldr	r3, [pc, #56]	; (800be7c <USBD_LL_Init+0x94>)
 800be42:	2200      	movs	r2, #0
 800be44:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800be46:	480d      	ldr	r0, [pc, #52]	; (800be7c <USBD_LL_Init+0x94>)
 800be48:	f7f9 fcd3 	bl	80057f2 <HAL_PCD_Init>
 800be4c:	4603      	mov	r3, r0
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d001      	beq.n	800be56 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800be52:	f7f5 fd9d 	bl	8001990 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800be56:	2180      	movs	r1, #128	; 0x80
 800be58:	4808      	ldr	r0, [pc, #32]	; (800be7c <USBD_LL_Init+0x94>)
 800be5a:	f7fa fe30 	bl	8006abe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800be5e:	2240      	movs	r2, #64	; 0x40
 800be60:	2100      	movs	r1, #0
 800be62:	4806      	ldr	r0, [pc, #24]	; (800be7c <USBD_LL_Init+0x94>)
 800be64:	f7fa fde4 	bl	8006a30 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800be68:	2280      	movs	r2, #128	; 0x80
 800be6a:	2101      	movs	r1, #1
 800be6c:	4803      	ldr	r0, [pc, #12]	; (800be7c <USBD_LL_Init+0x94>)
 800be6e:	f7fa fddf 	bl	8006a30 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800be72:	2300      	movs	r3, #0
}
 800be74:	4618      	mov	r0, r3
 800be76:	3708      	adds	r7, #8
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}
 800be7c:	20001b10 	.word	0x20001b10

0800be80 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b084      	sub	sp, #16
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be88:	2300      	movs	r3, #0
 800be8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be8c:	2300      	movs	r3, #0
 800be8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800be96:	4618      	mov	r0, r3
 800be98:	f7f9 fdc8 	bl	8005a2c <HAL_PCD_Start>
 800be9c:	4603      	mov	r3, r0
 800be9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bea0:	7bfb      	ldrb	r3, [r7, #15]
 800bea2:	4618      	mov	r0, r3
 800bea4:	f000 f92a 	bl	800c0fc <USBD_Get_USB_Status>
 800bea8:	4603      	mov	r3, r0
 800beaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800beac:	7bbb      	ldrb	r3, [r7, #14]
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3710      	adds	r7, #16
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}

0800beb6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800beb6:	b580      	push	{r7, lr}
 800beb8:	b084      	sub	sp, #16
 800beba:	af00      	add	r7, sp, #0
 800bebc:	6078      	str	r0, [r7, #4]
 800bebe:	4608      	mov	r0, r1
 800bec0:	4611      	mov	r1, r2
 800bec2:	461a      	mov	r2, r3
 800bec4:	4603      	mov	r3, r0
 800bec6:	70fb      	strb	r3, [r7, #3]
 800bec8:	460b      	mov	r3, r1
 800beca:	70bb      	strb	r3, [r7, #2]
 800becc:	4613      	mov	r3, r2
 800bece:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bed0:	2300      	movs	r3, #0
 800bed2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bed4:	2300      	movs	r3, #0
 800bed6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bede:	78bb      	ldrb	r3, [r7, #2]
 800bee0:	883a      	ldrh	r2, [r7, #0]
 800bee2:	78f9      	ldrb	r1, [r7, #3]
 800bee4:	f7fa f9ac 	bl	8006240 <HAL_PCD_EP_Open>
 800bee8:	4603      	mov	r3, r0
 800beea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800beec:	7bfb      	ldrb	r3, [r7, #15]
 800beee:	4618      	mov	r0, r3
 800bef0:	f000 f904 	bl	800c0fc <USBD_Get_USB_Status>
 800bef4:	4603      	mov	r3, r0
 800bef6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bef8:	7bbb      	ldrb	r3, [r7, #14]
}
 800befa:	4618      	mov	r0, r3
 800befc:	3710      	adds	r7, #16
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}

0800bf02 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf02:	b580      	push	{r7, lr}
 800bf04:	b084      	sub	sp, #16
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	6078      	str	r0, [r7, #4]
 800bf0a:	460b      	mov	r3, r1
 800bf0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf12:	2300      	movs	r3, #0
 800bf14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf1c:	78fa      	ldrb	r2, [r7, #3]
 800bf1e:	4611      	mov	r1, r2
 800bf20:	4618      	mov	r0, r3
 800bf22:	f7fa f9f5 	bl	8006310 <HAL_PCD_EP_Close>
 800bf26:	4603      	mov	r3, r0
 800bf28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf2a:	7bfb      	ldrb	r3, [r7, #15]
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f000 f8e5 	bl	800c0fc <USBD_Get_USB_Status>
 800bf32:	4603      	mov	r3, r0
 800bf34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf36:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3710      	adds	r7, #16
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b084      	sub	sp, #16
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	460b      	mov	r3, r1
 800bf4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf50:	2300      	movs	r3, #0
 800bf52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf5a:	78fa      	ldrb	r2, [r7, #3]
 800bf5c:	4611      	mov	r1, r2
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f7fa facd 	bl	80064fe <HAL_PCD_EP_SetStall>
 800bf64:	4603      	mov	r3, r0
 800bf66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf68:	7bfb      	ldrb	r3, [r7, #15]
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f000 f8c6 	bl	800c0fc <USBD_Get_USB_Status>
 800bf70:	4603      	mov	r3, r0
 800bf72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf74:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3710      	adds	r7, #16
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}

0800bf7e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf7e:	b580      	push	{r7, lr}
 800bf80:	b084      	sub	sp, #16
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	6078      	str	r0, [r7, #4]
 800bf86:	460b      	mov	r3, r1
 800bf88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf98:	78fa      	ldrb	r2, [r7, #3]
 800bf9a:	4611      	mov	r1, r2
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f7fa fb12 	bl	80065c6 <HAL_PCD_EP_ClrStall>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfa6:	7bfb      	ldrb	r3, [r7, #15]
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f000 f8a7 	bl	800c0fc <USBD_Get_USB_Status>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfb2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3710      	adds	r7, #16
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}

0800bfbc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b085      	sub	sp, #20
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	460b      	mov	r3, r1
 800bfc6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bfce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bfd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	da0b      	bge.n	800bff0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bfd8:	78fb      	ldrb	r3, [r7, #3]
 800bfda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bfde:	68f9      	ldr	r1, [r7, #12]
 800bfe0:	4613      	mov	r3, r2
 800bfe2:	00db      	lsls	r3, r3, #3
 800bfe4:	1a9b      	subs	r3, r3, r2
 800bfe6:	009b      	lsls	r3, r3, #2
 800bfe8:	440b      	add	r3, r1
 800bfea:	333e      	adds	r3, #62	; 0x3e
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	e00b      	b.n	800c008 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bff0:	78fb      	ldrb	r3, [r7, #3]
 800bff2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bff6:	68f9      	ldr	r1, [r7, #12]
 800bff8:	4613      	mov	r3, r2
 800bffa:	00db      	lsls	r3, r3, #3
 800bffc:	1a9b      	subs	r3, r3, r2
 800bffe:	009b      	lsls	r3, r3, #2
 800c000:	440b      	add	r3, r1
 800c002:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c006:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3714      	adds	r7, #20
 800c00c:	46bd      	mov	sp, r7
 800c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c012:	4770      	bx	lr

0800c014 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	460b      	mov	r3, r1
 800c01e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c020:	2300      	movs	r3, #0
 800c022:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c024:	2300      	movs	r3, #0
 800c026:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c02e:	78fa      	ldrb	r2, [r7, #3]
 800c030:	4611      	mov	r1, r2
 800c032:	4618      	mov	r0, r3
 800c034:	f7fa f8df 	bl	80061f6 <HAL_PCD_SetAddress>
 800c038:	4603      	mov	r3, r0
 800c03a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c03c:	7bfb      	ldrb	r3, [r7, #15]
 800c03e:	4618      	mov	r0, r3
 800c040:	f000 f85c 	bl	800c0fc <USBD_Get_USB_Status>
 800c044:	4603      	mov	r3, r0
 800c046:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c048:	7bbb      	ldrb	r3, [r7, #14]
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3710      	adds	r7, #16
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}

0800c052 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c052:	b580      	push	{r7, lr}
 800c054:	b086      	sub	sp, #24
 800c056:	af00      	add	r7, sp, #0
 800c058:	60f8      	str	r0, [r7, #12]
 800c05a:	607a      	str	r2, [r7, #4]
 800c05c:	603b      	str	r3, [r7, #0]
 800c05e:	460b      	mov	r3, r1
 800c060:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c062:	2300      	movs	r3, #0
 800c064:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c066:	2300      	movs	r3, #0
 800c068:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c070:	7af9      	ldrb	r1, [r7, #11]
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	687a      	ldr	r2, [r7, #4]
 800c076:	f7fa f9f8 	bl	800646a <HAL_PCD_EP_Transmit>
 800c07a:	4603      	mov	r3, r0
 800c07c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c07e:	7dfb      	ldrb	r3, [r7, #23]
 800c080:	4618      	mov	r0, r3
 800c082:	f000 f83b 	bl	800c0fc <USBD_Get_USB_Status>
 800c086:	4603      	mov	r3, r0
 800c088:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c08a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3718      	adds	r7, #24
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}

0800c094 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b086      	sub	sp, #24
 800c098:	af00      	add	r7, sp, #0
 800c09a:	60f8      	str	r0, [r7, #12]
 800c09c:	607a      	str	r2, [r7, #4]
 800c09e:	603b      	str	r3, [r7, #0]
 800c0a0:	460b      	mov	r3, r1
 800c0a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c0b2:	7af9      	ldrb	r1, [r7, #11]
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	687a      	ldr	r2, [r7, #4]
 800c0b8:	f7fa f974 	bl	80063a4 <HAL_PCD_EP_Receive>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0c0:	7dfb      	ldrb	r3, [r7, #23]
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f000 f81a 	bl	800c0fc <USBD_Get_USB_Status>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c0cc:	7dbb      	ldrb	r3, [r7, #22]
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3718      	adds	r7, #24
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}

0800c0d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b082      	sub	sp, #8
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
 800c0de:	460b      	mov	r3, r1
 800c0e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c0e8:	78fa      	ldrb	r2, [r7, #3]
 800c0ea:	4611      	mov	r1, r2
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f7fa f9a4 	bl	800643a <HAL_PCD_EP_GetRxCount>
 800c0f2:	4603      	mov	r3, r0
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3708      	adds	r7, #8
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b085      	sub	sp, #20
 800c100:	af00      	add	r7, sp, #0
 800c102:	4603      	mov	r3, r0
 800c104:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c106:	2300      	movs	r3, #0
 800c108:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c10a:	79fb      	ldrb	r3, [r7, #7]
 800c10c:	2b03      	cmp	r3, #3
 800c10e:	d817      	bhi.n	800c140 <USBD_Get_USB_Status+0x44>
 800c110:	a201      	add	r2, pc, #4	; (adr r2, 800c118 <USBD_Get_USB_Status+0x1c>)
 800c112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c116:	bf00      	nop
 800c118:	0800c129 	.word	0x0800c129
 800c11c:	0800c12f 	.word	0x0800c12f
 800c120:	0800c135 	.word	0x0800c135
 800c124:	0800c13b 	.word	0x0800c13b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c128:	2300      	movs	r3, #0
 800c12a:	73fb      	strb	r3, [r7, #15]
    break;
 800c12c:	e00b      	b.n	800c146 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c12e:	2303      	movs	r3, #3
 800c130:	73fb      	strb	r3, [r7, #15]
    break;
 800c132:	e008      	b.n	800c146 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c134:	2301      	movs	r3, #1
 800c136:	73fb      	strb	r3, [r7, #15]
    break;
 800c138:	e005      	b.n	800c146 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c13a:	2303      	movs	r3, #3
 800c13c:	73fb      	strb	r3, [r7, #15]
    break;
 800c13e:	e002      	b.n	800c146 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c140:	2303      	movs	r3, #3
 800c142:	73fb      	strb	r3, [r7, #15]
    break;
 800c144:	bf00      	nop
  }
  return usb_status;
 800c146:	7bfb      	ldrb	r3, [r7, #15]
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3714      	adds	r7, #20
 800c14c:	46bd      	mov	sp, r7
 800c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c152:	4770      	bx	lr

0800c154 <__errno>:
 800c154:	4b01      	ldr	r3, [pc, #4]	; (800c15c <__errno+0x8>)
 800c156:	6818      	ldr	r0, [r3, #0]
 800c158:	4770      	bx	lr
 800c15a:	bf00      	nop
 800c15c:	20000188 	.word	0x20000188

0800c160 <__libc_init_array>:
 800c160:	b570      	push	{r4, r5, r6, lr}
 800c162:	4e0d      	ldr	r6, [pc, #52]	; (800c198 <__libc_init_array+0x38>)
 800c164:	4c0d      	ldr	r4, [pc, #52]	; (800c19c <__libc_init_array+0x3c>)
 800c166:	1ba4      	subs	r4, r4, r6
 800c168:	10a4      	asrs	r4, r4, #2
 800c16a:	2500      	movs	r5, #0
 800c16c:	42a5      	cmp	r5, r4
 800c16e:	d109      	bne.n	800c184 <__libc_init_array+0x24>
 800c170:	4e0b      	ldr	r6, [pc, #44]	; (800c1a0 <__libc_init_array+0x40>)
 800c172:	4c0c      	ldr	r4, [pc, #48]	; (800c1a4 <__libc_init_array+0x44>)
 800c174:	f000 fc36 	bl	800c9e4 <_init>
 800c178:	1ba4      	subs	r4, r4, r6
 800c17a:	10a4      	asrs	r4, r4, #2
 800c17c:	2500      	movs	r5, #0
 800c17e:	42a5      	cmp	r5, r4
 800c180:	d105      	bne.n	800c18e <__libc_init_array+0x2e>
 800c182:	bd70      	pop	{r4, r5, r6, pc}
 800c184:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c188:	4798      	blx	r3
 800c18a:	3501      	adds	r5, #1
 800c18c:	e7ee      	b.n	800c16c <__libc_init_array+0xc>
 800c18e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c192:	4798      	blx	r3
 800c194:	3501      	adds	r5, #1
 800c196:	e7f2      	b.n	800c17e <__libc_init_array+0x1e>
 800c198:	0800cad0 	.word	0x0800cad0
 800c19c:	0800cad0 	.word	0x0800cad0
 800c1a0:	0800cad0 	.word	0x0800cad0
 800c1a4:	0800cad4 	.word	0x0800cad4

0800c1a8 <malloc>:
 800c1a8:	4b02      	ldr	r3, [pc, #8]	; (800c1b4 <malloc+0xc>)
 800c1aa:	4601      	mov	r1, r0
 800c1ac:	6818      	ldr	r0, [r3, #0]
 800c1ae:	f000 b861 	b.w	800c274 <_malloc_r>
 800c1b2:	bf00      	nop
 800c1b4:	20000188 	.word	0x20000188

0800c1b8 <free>:
 800c1b8:	4b02      	ldr	r3, [pc, #8]	; (800c1c4 <free+0xc>)
 800c1ba:	4601      	mov	r1, r0
 800c1bc:	6818      	ldr	r0, [r3, #0]
 800c1be:	f000 b80b 	b.w	800c1d8 <_free_r>
 800c1c2:	bf00      	nop
 800c1c4:	20000188 	.word	0x20000188

0800c1c8 <memset>:
 800c1c8:	4402      	add	r2, r0
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d100      	bne.n	800c1d2 <memset+0xa>
 800c1d0:	4770      	bx	lr
 800c1d2:	f803 1b01 	strb.w	r1, [r3], #1
 800c1d6:	e7f9      	b.n	800c1cc <memset+0x4>

0800c1d8 <_free_r>:
 800c1d8:	b538      	push	{r3, r4, r5, lr}
 800c1da:	4605      	mov	r5, r0
 800c1dc:	2900      	cmp	r1, #0
 800c1de:	d045      	beq.n	800c26c <_free_r+0x94>
 800c1e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1e4:	1f0c      	subs	r4, r1, #4
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	bfb8      	it	lt
 800c1ea:	18e4      	addlt	r4, r4, r3
 800c1ec:	f000 f8cc 	bl	800c388 <__malloc_lock>
 800c1f0:	4a1f      	ldr	r2, [pc, #124]	; (800c270 <_free_r+0x98>)
 800c1f2:	6813      	ldr	r3, [r2, #0]
 800c1f4:	4610      	mov	r0, r2
 800c1f6:	b933      	cbnz	r3, 800c206 <_free_r+0x2e>
 800c1f8:	6063      	str	r3, [r4, #4]
 800c1fa:	6014      	str	r4, [r2, #0]
 800c1fc:	4628      	mov	r0, r5
 800c1fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c202:	f000 b8c2 	b.w	800c38a <__malloc_unlock>
 800c206:	42a3      	cmp	r3, r4
 800c208:	d90c      	bls.n	800c224 <_free_r+0x4c>
 800c20a:	6821      	ldr	r1, [r4, #0]
 800c20c:	1862      	adds	r2, r4, r1
 800c20e:	4293      	cmp	r3, r2
 800c210:	bf04      	itt	eq
 800c212:	681a      	ldreq	r2, [r3, #0]
 800c214:	685b      	ldreq	r3, [r3, #4]
 800c216:	6063      	str	r3, [r4, #4]
 800c218:	bf04      	itt	eq
 800c21a:	1852      	addeq	r2, r2, r1
 800c21c:	6022      	streq	r2, [r4, #0]
 800c21e:	6004      	str	r4, [r0, #0]
 800c220:	e7ec      	b.n	800c1fc <_free_r+0x24>
 800c222:	4613      	mov	r3, r2
 800c224:	685a      	ldr	r2, [r3, #4]
 800c226:	b10a      	cbz	r2, 800c22c <_free_r+0x54>
 800c228:	42a2      	cmp	r2, r4
 800c22a:	d9fa      	bls.n	800c222 <_free_r+0x4a>
 800c22c:	6819      	ldr	r1, [r3, #0]
 800c22e:	1858      	adds	r0, r3, r1
 800c230:	42a0      	cmp	r0, r4
 800c232:	d10b      	bne.n	800c24c <_free_r+0x74>
 800c234:	6820      	ldr	r0, [r4, #0]
 800c236:	4401      	add	r1, r0
 800c238:	1858      	adds	r0, r3, r1
 800c23a:	4282      	cmp	r2, r0
 800c23c:	6019      	str	r1, [r3, #0]
 800c23e:	d1dd      	bne.n	800c1fc <_free_r+0x24>
 800c240:	6810      	ldr	r0, [r2, #0]
 800c242:	6852      	ldr	r2, [r2, #4]
 800c244:	605a      	str	r2, [r3, #4]
 800c246:	4401      	add	r1, r0
 800c248:	6019      	str	r1, [r3, #0]
 800c24a:	e7d7      	b.n	800c1fc <_free_r+0x24>
 800c24c:	d902      	bls.n	800c254 <_free_r+0x7c>
 800c24e:	230c      	movs	r3, #12
 800c250:	602b      	str	r3, [r5, #0]
 800c252:	e7d3      	b.n	800c1fc <_free_r+0x24>
 800c254:	6820      	ldr	r0, [r4, #0]
 800c256:	1821      	adds	r1, r4, r0
 800c258:	428a      	cmp	r2, r1
 800c25a:	bf04      	itt	eq
 800c25c:	6811      	ldreq	r1, [r2, #0]
 800c25e:	6852      	ldreq	r2, [r2, #4]
 800c260:	6062      	str	r2, [r4, #4]
 800c262:	bf04      	itt	eq
 800c264:	1809      	addeq	r1, r1, r0
 800c266:	6021      	streq	r1, [r4, #0]
 800c268:	605c      	str	r4, [r3, #4]
 800c26a:	e7c7      	b.n	800c1fc <_free_r+0x24>
 800c26c:	bd38      	pop	{r3, r4, r5, pc}
 800c26e:	bf00      	nop
 800c270:	20000228 	.word	0x20000228

0800c274 <_malloc_r>:
 800c274:	b570      	push	{r4, r5, r6, lr}
 800c276:	1ccd      	adds	r5, r1, #3
 800c278:	f025 0503 	bic.w	r5, r5, #3
 800c27c:	3508      	adds	r5, #8
 800c27e:	2d0c      	cmp	r5, #12
 800c280:	bf38      	it	cc
 800c282:	250c      	movcc	r5, #12
 800c284:	2d00      	cmp	r5, #0
 800c286:	4606      	mov	r6, r0
 800c288:	db01      	blt.n	800c28e <_malloc_r+0x1a>
 800c28a:	42a9      	cmp	r1, r5
 800c28c:	d903      	bls.n	800c296 <_malloc_r+0x22>
 800c28e:	230c      	movs	r3, #12
 800c290:	6033      	str	r3, [r6, #0]
 800c292:	2000      	movs	r0, #0
 800c294:	bd70      	pop	{r4, r5, r6, pc}
 800c296:	f000 f877 	bl	800c388 <__malloc_lock>
 800c29a:	4a21      	ldr	r2, [pc, #132]	; (800c320 <_malloc_r+0xac>)
 800c29c:	6814      	ldr	r4, [r2, #0]
 800c29e:	4621      	mov	r1, r4
 800c2a0:	b991      	cbnz	r1, 800c2c8 <_malloc_r+0x54>
 800c2a2:	4c20      	ldr	r4, [pc, #128]	; (800c324 <_malloc_r+0xb0>)
 800c2a4:	6823      	ldr	r3, [r4, #0]
 800c2a6:	b91b      	cbnz	r3, 800c2b0 <_malloc_r+0x3c>
 800c2a8:	4630      	mov	r0, r6
 800c2aa:	f000 f83d 	bl	800c328 <_sbrk_r>
 800c2ae:	6020      	str	r0, [r4, #0]
 800c2b0:	4629      	mov	r1, r5
 800c2b2:	4630      	mov	r0, r6
 800c2b4:	f000 f838 	bl	800c328 <_sbrk_r>
 800c2b8:	1c43      	adds	r3, r0, #1
 800c2ba:	d124      	bne.n	800c306 <_malloc_r+0x92>
 800c2bc:	230c      	movs	r3, #12
 800c2be:	6033      	str	r3, [r6, #0]
 800c2c0:	4630      	mov	r0, r6
 800c2c2:	f000 f862 	bl	800c38a <__malloc_unlock>
 800c2c6:	e7e4      	b.n	800c292 <_malloc_r+0x1e>
 800c2c8:	680b      	ldr	r3, [r1, #0]
 800c2ca:	1b5b      	subs	r3, r3, r5
 800c2cc:	d418      	bmi.n	800c300 <_malloc_r+0x8c>
 800c2ce:	2b0b      	cmp	r3, #11
 800c2d0:	d90f      	bls.n	800c2f2 <_malloc_r+0x7e>
 800c2d2:	600b      	str	r3, [r1, #0]
 800c2d4:	50cd      	str	r5, [r1, r3]
 800c2d6:	18cc      	adds	r4, r1, r3
 800c2d8:	4630      	mov	r0, r6
 800c2da:	f000 f856 	bl	800c38a <__malloc_unlock>
 800c2de:	f104 000b 	add.w	r0, r4, #11
 800c2e2:	1d23      	adds	r3, r4, #4
 800c2e4:	f020 0007 	bic.w	r0, r0, #7
 800c2e8:	1ac3      	subs	r3, r0, r3
 800c2ea:	d0d3      	beq.n	800c294 <_malloc_r+0x20>
 800c2ec:	425a      	negs	r2, r3
 800c2ee:	50e2      	str	r2, [r4, r3]
 800c2f0:	e7d0      	b.n	800c294 <_malloc_r+0x20>
 800c2f2:	428c      	cmp	r4, r1
 800c2f4:	684b      	ldr	r3, [r1, #4]
 800c2f6:	bf16      	itet	ne
 800c2f8:	6063      	strne	r3, [r4, #4]
 800c2fa:	6013      	streq	r3, [r2, #0]
 800c2fc:	460c      	movne	r4, r1
 800c2fe:	e7eb      	b.n	800c2d8 <_malloc_r+0x64>
 800c300:	460c      	mov	r4, r1
 800c302:	6849      	ldr	r1, [r1, #4]
 800c304:	e7cc      	b.n	800c2a0 <_malloc_r+0x2c>
 800c306:	1cc4      	adds	r4, r0, #3
 800c308:	f024 0403 	bic.w	r4, r4, #3
 800c30c:	42a0      	cmp	r0, r4
 800c30e:	d005      	beq.n	800c31c <_malloc_r+0xa8>
 800c310:	1a21      	subs	r1, r4, r0
 800c312:	4630      	mov	r0, r6
 800c314:	f000 f808 	bl	800c328 <_sbrk_r>
 800c318:	3001      	adds	r0, #1
 800c31a:	d0cf      	beq.n	800c2bc <_malloc_r+0x48>
 800c31c:	6025      	str	r5, [r4, #0]
 800c31e:	e7db      	b.n	800c2d8 <_malloc_r+0x64>
 800c320:	20000228 	.word	0x20000228
 800c324:	2000022c 	.word	0x2000022c

0800c328 <_sbrk_r>:
 800c328:	b538      	push	{r3, r4, r5, lr}
 800c32a:	4c06      	ldr	r4, [pc, #24]	; (800c344 <_sbrk_r+0x1c>)
 800c32c:	2300      	movs	r3, #0
 800c32e:	4605      	mov	r5, r0
 800c330:	4608      	mov	r0, r1
 800c332:	6023      	str	r3, [r4, #0]
 800c334:	f7f5 fc20 	bl	8001b78 <_sbrk>
 800c338:	1c43      	adds	r3, r0, #1
 800c33a:	d102      	bne.n	800c342 <_sbrk_r+0x1a>
 800c33c:	6823      	ldr	r3, [r4, #0]
 800c33e:	b103      	cbz	r3, 800c342 <_sbrk_r+0x1a>
 800c340:	602b      	str	r3, [r5, #0]
 800c342:	bd38      	pop	{r3, r4, r5, pc}
 800c344:	20001f18 	.word	0x20001f18

0800c348 <siprintf>:
 800c348:	b40e      	push	{r1, r2, r3}
 800c34a:	b500      	push	{lr}
 800c34c:	b09c      	sub	sp, #112	; 0x70
 800c34e:	ab1d      	add	r3, sp, #116	; 0x74
 800c350:	9002      	str	r0, [sp, #8]
 800c352:	9006      	str	r0, [sp, #24]
 800c354:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c358:	4809      	ldr	r0, [pc, #36]	; (800c380 <siprintf+0x38>)
 800c35a:	9107      	str	r1, [sp, #28]
 800c35c:	9104      	str	r1, [sp, #16]
 800c35e:	4909      	ldr	r1, [pc, #36]	; (800c384 <siprintf+0x3c>)
 800c360:	f853 2b04 	ldr.w	r2, [r3], #4
 800c364:	9105      	str	r1, [sp, #20]
 800c366:	6800      	ldr	r0, [r0, #0]
 800c368:	9301      	str	r3, [sp, #4]
 800c36a:	a902      	add	r1, sp, #8
 800c36c:	f000 f868 	bl	800c440 <_svfiprintf_r>
 800c370:	9b02      	ldr	r3, [sp, #8]
 800c372:	2200      	movs	r2, #0
 800c374:	701a      	strb	r2, [r3, #0]
 800c376:	b01c      	add	sp, #112	; 0x70
 800c378:	f85d eb04 	ldr.w	lr, [sp], #4
 800c37c:	b003      	add	sp, #12
 800c37e:	4770      	bx	lr
 800c380:	20000188 	.word	0x20000188
 800c384:	ffff0208 	.word	0xffff0208

0800c388 <__malloc_lock>:
 800c388:	4770      	bx	lr

0800c38a <__malloc_unlock>:
 800c38a:	4770      	bx	lr

0800c38c <__ssputs_r>:
 800c38c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c390:	688e      	ldr	r6, [r1, #8]
 800c392:	429e      	cmp	r6, r3
 800c394:	4682      	mov	sl, r0
 800c396:	460c      	mov	r4, r1
 800c398:	4690      	mov	r8, r2
 800c39a:	4699      	mov	r9, r3
 800c39c:	d837      	bhi.n	800c40e <__ssputs_r+0x82>
 800c39e:	898a      	ldrh	r2, [r1, #12]
 800c3a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c3a4:	d031      	beq.n	800c40a <__ssputs_r+0x7e>
 800c3a6:	6825      	ldr	r5, [r4, #0]
 800c3a8:	6909      	ldr	r1, [r1, #16]
 800c3aa:	1a6f      	subs	r7, r5, r1
 800c3ac:	6965      	ldr	r5, [r4, #20]
 800c3ae:	2302      	movs	r3, #2
 800c3b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c3b4:	fb95 f5f3 	sdiv	r5, r5, r3
 800c3b8:	f109 0301 	add.w	r3, r9, #1
 800c3bc:	443b      	add	r3, r7
 800c3be:	429d      	cmp	r5, r3
 800c3c0:	bf38      	it	cc
 800c3c2:	461d      	movcc	r5, r3
 800c3c4:	0553      	lsls	r3, r2, #21
 800c3c6:	d530      	bpl.n	800c42a <__ssputs_r+0x9e>
 800c3c8:	4629      	mov	r1, r5
 800c3ca:	f7ff ff53 	bl	800c274 <_malloc_r>
 800c3ce:	4606      	mov	r6, r0
 800c3d0:	b950      	cbnz	r0, 800c3e8 <__ssputs_r+0x5c>
 800c3d2:	230c      	movs	r3, #12
 800c3d4:	f8ca 3000 	str.w	r3, [sl]
 800c3d8:	89a3      	ldrh	r3, [r4, #12]
 800c3da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3de:	81a3      	strh	r3, [r4, #12]
 800c3e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3e8:	463a      	mov	r2, r7
 800c3ea:	6921      	ldr	r1, [r4, #16]
 800c3ec:	f000 faa8 	bl	800c940 <memcpy>
 800c3f0:	89a3      	ldrh	r3, [r4, #12]
 800c3f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c3f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3fa:	81a3      	strh	r3, [r4, #12]
 800c3fc:	6126      	str	r6, [r4, #16]
 800c3fe:	6165      	str	r5, [r4, #20]
 800c400:	443e      	add	r6, r7
 800c402:	1bed      	subs	r5, r5, r7
 800c404:	6026      	str	r6, [r4, #0]
 800c406:	60a5      	str	r5, [r4, #8]
 800c408:	464e      	mov	r6, r9
 800c40a:	454e      	cmp	r6, r9
 800c40c:	d900      	bls.n	800c410 <__ssputs_r+0x84>
 800c40e:	464e      	mov	r6, r9
 800c410:	4632      	mov	r2, r6
 800c412:	4641      	mov	r1, r8
 800c414:	6820      	ldr	r0, [r4, #0]
 800c416:	f000 fa9e 	bl	800c956 <memmove>
 800c41a:	68a3      	ldr	r3, [r4, #8]
 800c41c:	1b9b      	subs	r3, r3, r6
 800c41e:	60a3      	str	r3, [r4, #8]
 800c420:	6823      	ldr	r3, [r4, #0]
 800c422:	441e      	add	r6, r3
 800c424:	6026      	str	r6, [r4, #0]
 800c426:	2000      	movs	r0, #0
 800c428:	e7dc      	b.n	800c3e4 <__ssputs_r+0x58>
 800c42a:	462a      	mov	r2, r5
 800c42c:	f000 faac 	bl	800c988 <_realloc_r>
 800c430:	4606      	mov	r6, r0
 800c432:	2800      	cmp	r0, #0
 800c434:	d1e2      	bne.n	800c3fc <__ssputs_r+0x70>
 800c436:	6921      	ldr	r1, [r4, #16]
 800c438:	4650      	mov	r0, sl
 800c43a:	f7ff fecd 	bl	800c1d8 <_free_r>
 800c43e:	e7c8      	b.n	800c3d2 <__ssputs_r+0x46>

0800c440 <_svfiprintf_r>:
 800c440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c444:	461d      	mov	r5, r3
 800c446:	898b      	ldrh	r3, [r1, #12]
 800c448:	061f      	lsls	r7, r3, #24
 800c44a:	b09d      	sub	sp, #116	; 0x74
 800c44c:	4680      	mov	r8, r0
 800c44e:	460c      	mov	r4, r1
 800c450:	4616      	mov	r6, r2
 800c452:	d50f      	bpl.n	800c474 <_svfiprintf_r+0x34>
 800c454:	690b      	ldr	r3, [r1, #16]
 800c456:	b96b      	cbnz	r3, 800c474 <_svfiprintf_r+0x34>
 800c458:	2140      	movs	r1, #64	; 0x40
 800c45a:	f7ff ff0b 	bl	800c274 <_malloc_r>
 800c45e:	6020      	str	r0, [r4, #0]
 800c460:	6120      	str	r0, [r4, #16]
 800c462:	b928      	cbnz	r0, 800c470 <_svfiprintf_r+0x30>
 800c464:	230c      	movs	r3, #12
 800c466:	f8c8 3000 	str.w	r3, [r8]
 800c46a:	f04f 30ff 	mov.w	r0, #4294967295
 800c46e:	e0c8      	b.n	800c602 <_svfiprintf_r+0x1c2>
 800c470:	2340      	movs	r3, #64	; 0x40
 800c472:	6163      	str	r3, [r4, #20]
 800c474:	2300      	movs	r3, #0
 800c476:	9309      	str	r3, [sp, #36]	; 0x24
 800c478:	2320      	movs	r3, #32
 800c47a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c47e:	2330      	movs	r3, #48	; 0x30
 800c480:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c484:	9503      	str	r5, [sp, #12]
 800c486:	f04f 0b01 	mov.w	fp, #1
 800c48a:	4637      	mov	r7, r6
 800c48c:	463d      	mov	r5, r7
 800c48e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c492:	b10b      	cbz	r3, 800c498 <_svfiprintf_r+0x58>
 800c494:	2b25      	cmp	r3, #37	; 0x25
 800c496:	d13e      	bne.n	800c516 <_svfiprintf_r+0xd6>
 800c498:	ebb7 0a06 	subs.w	sl, r7, r6
 800c49c:	d00b      	beq.n	800c4b6 <_svfiprintf_r+0x76>
 800c49e:	4653      	mov	r3, sl
 800c4a0:	4632      	mov	r2, r6
 800c4a2:	4621      	mov	r1, r4
 800c4a4:	4640      	mov	r0, r8
 800c4a6:	f7ff ff71 	bl	800c38c <__ssputs_r>
 800c4aa:	3001      	adds	r0, #1
 800c4ac:	f000 80a4 	beq.w	800c5f8 <_svfiprintf_r+0x1b8>
 800c4b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4b2:	4453      	add	r3, sl
 800c4b4:	9309      	str	r3, [sp, #36]	; 0x24
 800c4b6:	783b      	ldrb	r3, [r7, #0]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	f000 809d 	beq.w	800c5f8 <_svfiprintf_r+0x1b8>
 800c4be:	2300      	movs	r3, #0
 800c4c0:	f04f 32ff 	mov.w	r2, #4294967295
 800c4c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4c8:	9304      	str	r3, [sp, #16]
 800c4ca:	9307      	str	r3, [sp, #28]
 800c4cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4d0:	931a      	str	r3, [sp, #104]	; 0x68
 800c4d2:	462f      	mov	r7, r5
 800c4d4:	2205      	movs	r2, #5
 800c4d6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c4da:	4850      	ldr	r0, [pc, #320]	; (800c61c <_svfiprintf_r+0x1dc>)
 800c4dc:	f7f3 fe80 	bl	80001e0 <memchr>
 800c4e0:	9b04      	ldr	r3, [sp, #16]
 800c4e2:	b9d0      	cbnz	r0, 800c51a <_svfiprintf_r+0xda>
 800c4e4:	06d9      	lsls	r1, r3, #27
 800c4e6:	bf44      	itt	mi
 800c4e8:	2220      	movmi	r2, #32
 800c4ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c4ee:	071a      	lsls	r2, r3, #28
 800c4f0:	bf44      	itt	mi
 800c4f2:	222b      	movmi	r2, #43	; 0x2b
 800c4f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c4f8:	782a      	ldrb	r2, [r5, #0]
 800c4fa:	2a2a      	cmp	r2, #42	; 0x2a
 800c4fc:	d015      	beq.n	800c52a <_svfiprintf_r+0xea>
 800c4fe:	9a07      	ldr	r2, [sp, #28]
 800c500:	462f      	mov	r7, r5
 800c502:	2000      	movs	r0, #0
 800c504:	250a      	movs	r5, #10
 800c506:	4639      	mov	r1, r7
 800c508:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c50c:	3b30      	subs	r3, #48	; 0x30
 800c50e:	2b09      	cmp	r3, #9
 800c510:	d94d      	bls.n	800c5ae <_svfiprintf_r+0x16e>
 800c512:	b1b8      	cbz	r0, 800c544 <_svfiprintf_r+0x104>
 800c514:	e00f      	b.n	800c536 <_svfiprintf_r+0xf6>
 800c516:	462f      	mov	r7, r5
 800c518:	e7b8      	b.n	800c48c <_svfiprintf_r+0x4c>
 800c51a:	4a40      	ldr	r2, [pc, #256]	; (800c61c <_svfiprintf_r+0x1dc>)
 800c51c:	1a80      	subs	r0, r0, r2
 800c51e:	fa0b f000 	lsl.w	r0, fp, r0
 800c522:	4318      	orrs	r0, r3
 800c524:	9004      	str	r0, [sp, #16]
 800c526:	463d      	mov	r5, r7
 800c528:	e7d3      	b.n	800c4d2 <_svfiprintf_r+0x92>
 800c52a:	9a03      	ldr	r2, [sp, #12]
 800c52c:	1d11      	adds	r1, r2, #4
 800c52e:	6812      	ldr	r2, [r2, #0]
 800c530:	9103      	str	r1, [sp, #12]
 800c532:	2a00      	cmp	r2, #0
 800c534:	db01      	blt.n	800c53a <_svfiprintf_r+0xfa>
 800c536:	9207      	str	r2, [sp, #28]
 800c538:	e004      	b.n	800c544 <_svfiprintf_r+0x104>
 800c53a:	4252      	negs	r2, r2
 800c53c:	f043 0302 	orr.w	r3, r3, #2
 800c540:	9207      	str	r2, [sp, #28]
 800c542:	9304      	str	r3, [sp, #16]
 800c544:	783b      	ldrb	r3, [r7, #0]
 800c546:	2b2e      	cmp	r3, #46	; 0x2e
 800c548:	d10c      	bne.n	800c564 <_svfiprintf_r+0x124>
 800c54a:	787b      	ldrb	r3, [r7, #1]
 800c54c:	2b2a      	cmp	r3, #42	; 0x2a
 800c54e:	d133      	bne.n	800c5b8 <_svfiprintf_r+0x178>
 800c550:	9b03      	ldr	r3, [sp, #12]
 800c552:	1d1a      	adds	r2, r3, #4
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	9203      	str	r2, [sp, #12]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	bfb8      	it	lt
 800c55c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c560:	3702      	adds	r7, #2
 800c562:	9305      	str	r3, [sp, #20]
 800c564:	4d2e      	ldr	r5, [pc, #184]	; (800c620 <_svfiprintf_r+0x1e0>)
 800c566:	7839      	ldrb	r1, [r7, #0]
 800c568:	2203      	movs	r2, #3
 800c56a:	4628      	mov	r0, r5
 800c56c:	f7f3 fe38 	bl	80001e0 <memchr>
 800c570:	b138      	cbz	r0, 800c582 <_svfiprintf_r+0x142>
 800c572:	2340      	movs	r3, #64	; 0x40
 800c574:	1b40      	subs	r0, r0, r5
 800c576:	fa03 f000 	lsl.w	r0, r3, r0
 800c57a:	9b04      	ldr	r3, [sp, #16]
 800c57c:	4303      	orrs	r3, r0
 800c57e:	3701      	adds	r7, #1
 800c580:	9304      	str	r3, [sp, #16]
 800c582:	7839      	ldrb	r1, [r7, #0]
 800c584:	4827      	ldr	r0, [pc, #156]	; (800c624 <_svfiprintf_r+0x1e4>)
 800c586:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c58a:	2206      	movs	r2, #6
 800c58c:	1c7e      	adds	r6, r7, #1
 800c58e:	f7f3 fe27 	bl	80001e0 <memchr>
 800c592:	2800      	cmp	r0, #0
 800c594:	d038      	beq.n	800c608 <_svfiprintf_r+0x1c8>
 800c596:	4b24      	ldr	r3, [pc, #144]	; (800c628 <_svfiprintf_r+0x1e8>)
 800c598:	bb13      	cbnz	r3, 800c5e0 <_svfiprintf_r+0x1a0>
 800c59a:	9b03      	ldr	r3, [sp, #12]
 800c59c:	3307      	adds	r3, #7
 800c59e:	f023 0307 	bic.w	r3, r3, #7
 800c5a2:	3308      	adds	r3, #8
 800c5a4:	9303      	str	r3, [sp, #12]
 800c5a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5a8:	444b      	add	r3, r9
 800c5aa:	9309      	str	r3, [sp, #36]	; 0x24
 800c5ac:	e76d      	b.n	800c48a <_svfiprintf_r+0x4a>
 800c5ae:	fb05 3202 	mla	r2, r5, r2, r3
 800c5b2:	2001      	movs	r0, #1
 800c5b4:	460f      	mov	r7, r1
 800c5b6:	e7a6      	b.n	800c506 <_svfiprintf_r+0xc6>
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	3701      	adds	r7, #1
 800c5bc:	9305      	str	r3, [sp, #20]
 800c5be:	4619      	mov	r1, r3
 800c5c0:	250a      	movs	r5, #10
 800c5c2:	4638      	mov	r0, r7
 800c5c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5c8:	3a30      	subs	r2, #48	; 0x30
 800c5ca:	2a09      	cmp	r2, #9
 800c5cc:	d903      	bls.n	800c5d6 <_svfiprintf_r+0x196>
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d0c8      	beq.n	800c564 <_svfiprintf_r+0x124>
 800c5d2:	9105      	str	r1, [sp, #20]
 800c5d4:	e7c6      	b.n	800c564 <_svfiprintf_r+0x124>
 800c5d6:	fb05 2101 	mla	r1, r5, r1, r2
 800c5da:	2301      	movs	r3, #1
 800c5dc:	4607      	mov	r7, r0
 800c5de:	e7f0      	b.n	800c5c2 <_svfiprintf_r+0x182>
 800c5e0:	ab03      	add	r3, sp, #12
 800c5e2:	9300      	str	r3, [sp, #0]
 800c5e4:	4622      	mov	r2, r4
 800c5e6:	4b11      	ldr	r3, [pc, #68]	; (800c62c <_svfiprintf_r+0x1ec>)
 800c5e8:	a904      	add	r1, sp, #16
 800c5ea:	4640      	mov	r0, r8
 800c5ec:	f3af 8000 	nop.w
 800c5f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c5f4:	4681      	mov	r9, r0
 800c5f6:	d1d6      	bne.n	800c5a6 <_svfiprintf_r+0x166>
 800c5f8:	89a3      	ldrh	r3, [r4, #12]
 800c5fa:	065b      	lsls	r3, r3, #25
 800c5fc:	f53f af35 	bmi.w	800c46a <_svfiprintf_r+0x2a>
 800c600:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c602:	b01d      	add	sp, #116	; 0x74
 800c604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c608:	ab03      	add	r3, sp, #12
 800c60a:	9300      	str	r3, [sp, #0]
 800c60c:	4622      	mov	r2, r4
 800c60e:	4b07      	ldr	r3, [pc, #28]	; (800c62c <_svfiprintf_r+0x1ec>)
 800c610:	a904      	add	r1, sp, #16
 800c612:	4640      	mov	r0, r8
 800c614:	f000 f882 	bl	800c71c <_printf_i>
 800c618:	e7ea      	b.n	800c5f0 <_svfiprintf_r+0x1b0>
 800c61a:	bf00      	nop
 800c61c:	0800ca94 	.word	0x0800ca94
 800c620:	0800ca9a 	.word	0x0800ca9a
 800c624:	0800ca9e 	.word	0x0800ca9e
 800c628:	00000000 	.word	0x00000000
 800c62c:	0800c38d 	.word	0x0800c38d

0800c630 <_printf_common>:
 800c630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c634:	4691      	mov	r9, r2
 800c636:	461f      	mov	r7, r3
 800c638:	688a      	ldr	r2, [r1, #8]
 800c63a:	690b      	ldr	r3, [r1, #16]
 800c63c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c640:	4293      	cmp	r3, r2
 800c642:	bfb8      	it	lt
 800c644:	4613      	movlt	r3, r2
 800c646:	f8c9 3000 	str.w	r3, [r9]
 800c64a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c64e:	4606      	mov	r6, r0
 800c650:	460c      	mov	r4, r1
 800c652:	b112      	cbz	r2, 800c65a <_printf_common+0x2a>
 800c654:	3301      	adds	r3, #1
 800c656:	f8c9 3000 	str.w	r3, [r9]
 800c65a:	6823      	ldr	r3, [r4, #0]
 800c65c:	0699      	lsls	r1, r3, #26
 800c65e:	bf42      	ittt	mi
 800c660:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c664:	3302      	addmi	r3, #2
 800c666:	f8c9 3000 	strmi.w	r3, [r9]
 800c66a:	6825      	ldr	r5, [r4, #0]
 800c66c:	f015 0506 	ands.w	r5, r5, #6
 800c670:	d107      	bne.n	800c682 <_printf_common+0x52>
 800c672:	f104 0a19 	add.w	sl, r4, #25
 800c676:	68e3      	ldr	r3, [r4, #12]
 800c678:	f8d9 2000 	ldr.w	r2, [r9]
 800c67c:	1a9b      	subs	r3, r3, r2
 800c67e:	42ab      	cmp	r3, r5
 800c680:	dc28      	bgt.n	800c6d4 <_printf_common+0xa4>
 800c682:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c686:	6822      	ldr	r2, [r4, #0]
 800c688:	3300      	adds	r3, #0
 800c68a:	bf18      	it	ne
 800c68c:	2301      	movne	r3, #1
 800c68e:	0692      	lsls	r2, r2, #26
 800c690:	d42d      	bmi.n	800c6ee <_printf_common+0xbe>
 800c692:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c696:	4639      	mov	r1, r7
 800c698:	4630      	mov	r0, r6
 800c69a:	47c0      	blx	r8
 800c69c:	3001      	adds	r0, #1
 800c69e:	d020      	beq.n	800c6e2 <_printf_common+0xb2>
 800c6a0:	6823      	ldr	r3, [r4, #0]
 800c6a2:	68e5      	ldr	r5, [r4, #12]
 800c6a4:	f8d9 2000 	ldr.w	r2, [r9]
 800c6a8:	f003 0306 	and.w	r3, r3, #6
 800c6ac:	2b04      	cmp	r3, #4
 800c6ae:	bf08      	it	eq
 800c6b0:	1aad      	subeq	r5, r5, r2
 800c6b2:	68a3      	ldr	r3, [r4, #8]
 800c6b4:	6922      	ldr	r2, [r4, #16]
 800c6b6:	bf0c      	ite	eq
 800c6b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c6bc:	2500      	movne	r5, #0
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	bfc4      	itt	gt
 800c6c2:	1a9b      	subgt	r3, r3, r2
 800c6c4:	18ed      	addgt	r5, r5, r3
 800c6c6:	f04f 0900 	mov.w	r9, #0
 800c6ca:	341a      	adds	r4, #26
 800c6cc:	454d      	cmp	r5, r9
 800c6ce:	d11a      	bne.n	800c706 <_printf_common+0xd6>
 800c6d0:	2000      	movs	r0, #0
 800c6d2:	e008      	b.n	800c6e6 <_printf_common+0xb6>
 800c6d4:	2301      	movs	r3, #1
 800c6d6:	4652      	mov	r2, sl
 800c6d8:	4639      	mov	r1, r7
 800c6da:	4630      	mov	r0, r6
 800c6dc:	47c0      	blx	r8
 800c6de:	3001      	adds	r0, #1
 800c6e0:	d103      	bne.n	800c6ea <_printf_common+0xba>
 800c6e2:	f04f 30ff 	mov.w	r0, #4294967295
 800c6e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6ea:	3501      	adds	r5, #1
 800c6ec:	e7c3      	b.n	800c676 <_printf_common+0x46>
 800c6ee:	18e1      	adds	r1, r4, r3
 800c6f0:	1c5a      	adds	r2, r3, #1
 800c6f2:	2030      	movs	r0, #48	; 0x30
 800c6f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c6f8:	4422      	add	r2, r4
 800c6fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c6fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c702:	3302      	adds	r3, #2
 800c704:	e7c5      	b.n	800c692 <_printf_common+0x62>
 800c706:	2301      	movs	r3, #1
 800c708:	4622      	mov	r2, r4
 800c70a:	4639      	mov	r1, r7
 800c70c:	4630      	mov	r0, r6
 800c70e:	47c0      	blx	r8
 800c710:	3001      	adds	r0, #1
 800c712:	d0e6      	beq.n	800c6e2 <_printf_common+0xb2>
 800c714:	f109 0901 	add.w	r9, r9, #1
 800c718:	e7d8      	b.n	800c6cc <_printf_common+0x9c>
	...

0800c71c <_printf_i>:
 800c71c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c720:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c724:	460c      	mov	r4, r1
 800c726:	7e09      	ldrb	r1, [r1, #24]
 800c728:	b085      	sub	sp, #20
 800c72a:	296e      	cmp	r1, #110	; 0x6e
 800c72c:	4617      	mov	r7, r2
 800c72e:	4606      	mov	r6, r0
 800c730:	4698      	mov	r8, r3
 800c732:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c734:	f000 80b3 	beq.w	800c89e <_printf_i+0x182>
 800c738:	d822      	bhi.n	800c780 <_printf_i+0x64>
 800c73a:	2963      	cmp	r1, #99	; 0x63
 800c73c:	d036      	beq.n	800c7ac <_printf_i+0x90>
 800c73e:	d80a      	bhi.n	800c756 <_printf_i+0x3a>
 800c740:	2900      	cmp	r1, #0
 800c742:	f000 80b9 	beq.w	800c8b8 <_printf_i+0x19c>
 800c746:	2958      	cmp	r1, #88	; 0x58
 800c748:	f000 8083 	beq.w	800c852 <_printf_i+0x136>
 800c74c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c750:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c754:	e032      	b.n	800c7bc <_printf_i+0xa0>
 800c756:	2964      	cmp	r1, #100	; 0x64
 800c758:	d001      	beq.n	800c75e <_printf_i+0x42>
 800c75a:	2969      	cmp	r1, #105	; 0x69
 800c75c:	d1f6      	bne.n	800c74c <_printf_i+0x30>
 800c75e:	6820      	ldr	r0, [r4, #0]
 800c760:	6813      	ldr	r3, [r2, #0]
 800c762:	0605      	lsls	r5, r0, #24
 800c764:	f103 0104 	add.w	r1, r3, #4
 800c768:	d52a      	bpl.n	800c7c0 <_printf_i+0xa4>
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	6011      	str	r1, [r2, #0]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	da03      	bge.n	800c77a <_printf_i+0x5e>
 800c772:	222d      	movs	r2, #45	; 0x2d
 800c774:	425b      	negs	r3, r3
 800c776:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c77a:	486f      	ldr	r0, [pc, #444]	; (800c938 <_printf_i+0x21c>)
 800c77c:	220a      	movs	r2, #10
 800c77e:	e039      	b.n	800c7f4 <_printf_i+0xd8>
 800c780:	2973      	cmp	r1, #115	; 0x73
 800c782:	f000 809d 	beq.w	800c8c0 <_printf_i+0x1a4>
 800c786:	d808      	bhi.n	800c79a <_printf_i+0x7e>
 800c788:	296f      	cmp	r1, #111	; 0x6f
 800c78a:	d020      	beq.n	800c7ce <_printf_i+0xb2>
 800c78c:	2970      	cmp	r1, #112	; 0x70
 800c78e:	d1dd      	bne.n	800c74c <_printf_i+0x30>
 800c790:	6823      	ldr	r3, [r4, #0]
 800c792:	f043 0320 	orr.w	r3, r3, #32
 800c796:	6023      	str	r3, [r4, #0]
 800c798:	e003      	b.n	800c7a2 <_printf_i+0x86>
 800c79a:	2975      	cmp	r1, #117	; 0x75
 800c79c:	d017      	beq.n	800c7ce <_printf_i+0xb2>
 800c79e:	2978      	cmp	r1, #120	; 0x78
 800c7a0:	d1d4      	bne.n	800c74c <_printf_i+0x30>
 800c7a2:	2378      	movs	r3, #120	; 0x78
 800c7a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c7a8:	4864      	ldr	r0, [pc, #400]	; (800c93c <_printf_i+0x220>)
 800c7aa:	e055      	b.n	800c858 <_printf_i+0x13c>
 800c7ac:	6813      	ldr	r3, [r2, #0]
 800c7ae:	1d19      	adds	r1, r3, #4
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	6011      	str	r1, [r2, #0]
 800c7b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c7b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c7bc:	2301      	movs	r3, #1
 800c7be:	e08c      	b.n	800c8da <_printf_i+0x1be>
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	6011      	str	r1, [r2, #0]
 800c7c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c7c8:	bf18      	it	ne
 800c7ca:	b21b      	sxthne	r3, r3
 800c7cc:	e7cf      	b.n	800c76e <_printf_i+0x52>
 800c7ce:	6813      	ldr	r3, [r2, #0]
 800c7d0:	6825      	ldr	r5, [r4, #0]
 800c7d2:	1d18      	adds	r0, r3, #4
 800c7d4:	6010      	str	r0, [r2, #0]
 800c7d6:	0628      	lsls	r0, r5, #24
 800c7d8:	d501      	bpl.n	800c7de <_printf_i+0xc2>
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	e002      	b.n	800c7e4 <_printf_i+0xc8>
 800c7de:	0668      	lsls	r0, r5, #25
 800c7e0:	d5fb      	bpl.n	800c7da <_printf_i+0xbe>
 800c7e2:	881b      	ldrh	r3, [r3, #0]
 800c7e4:	4854      	ldr	r0, [pc, #336]	; (800c938 <_printf_i+0x21c>)
 800c7e6:	296f      	cmp	r1, #111	; 0x6f
 800c7e8:	bf14      	ite	ne
 800c7ea:	220a      	movne	r2, #10
 800c7ec:	2208      	moveq	r2, #8
 800c7ee:	2100      	movs	r1, #0
 800c7f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c7f4:	6865      	ldr	r5, [r4, #4]
 800c7f6:	60a5      	str	r5, [r4, #8]
 800c7f8:	2d00      	cmp	r5, #0
 800c7fa:	f2c0 8095 	blt.w	800c928 <_printf_i+0x20c>
 800c7fe:	6821      	ldr	r1, [r4, #0]
 800c800:	f021 0104 	bic.w	r1, r1, #4
 800c804:	6021      	str	r1, [r4, #0]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d13d      	bne.n	800c886 <_printf_i+0x16a>
 800c80a:	2d00      	cmp	r5, #0
 800c80c:	f040 808e 	bne.w	800c92c <_printf_i+0x210>
 800c810:	4665      	mov	r5, ip
 800c812:	2a08      	cmp	r2, #8
 800c814:	d10b      	bne.n	800c82e <_printf_i+0x112>
 800c816:	6823      	ldr	r3, [r4, #0]
 800c818:	07db      	lsls	r3, r3, #31
 800c81a:	d508      	bpl.n	800c82e <_printf_i+0x112>
 800c81c:	6923      	ldr	r3, [r4, #16]
 800c81e:	6862      	ldr	r2, [r4, #4]
 800c820:	429a      	cmp	r2, r3
 800c822:	bfde      	ittt	le
 800c824:	2330      	movle	r3, #48	; 0x30
 800c826:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c82a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c82e:	ebac 0305 	sub.w	r3, ip, r5
 800c832:	6123      	str	r3, [r4, #16]
 800c834:	f8cd 8000 	str.w	r8, [sp]
 800c838:	463b      	mov	r3, r7
 800c83a:	aa03      	add	r2, sp, #12
 800c83c:	4621      	mov	r1, r4
 800c83e:	4630      	mov	r0, r6
 800c840:	f7ff fef6 	bl	800c630 <_printf_common>
 800c844:	3001      	adds	r0, #1
 800c846:	d14d      	bne.n	800c8e4 <_printf_i+0x1c8>
 800c848:	f04f 30ff 	mov.w	r0, #4294967295
 800c84c:	b005      	add	sp, #20
 800c84e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c852:	4839      	ldr	r0, [pc, #228]	; (800c938 <_printf_i+0x21c>)
 800c854:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c858:	6813      	ldr	r3, [r2, #0]
 800c85a:	6821      	ldr	r1, [r4, #0]
 800c85c:	1d1d      	adds	r5, r3, #4
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	6015      	str	r5, [r2, #0]
 800c862:	060a      	lsls	r2, r1, #24
 800c864:	d50b      	bpl.n	800c87e <_printf_i+0x162>
 800c866:	07ca      	lsls	r2, r1, #31
 800c868:	bf44      	itt	mi
 800c86a:	f041 0120 	orrmi.w	r1, r1, #32
 800c86e:	6021      	strmi	r1, [r4, #0]
 800c870:	b91b      	cbnz	r3, 800c87a <_printf_i+0x15e>
 800c872:	6822      	ldr	r2, [r4, #0]
 800c874:	f022 0220 	bic.w	r2, r2, #32
 800c878:	6022      	str	r2, [r4, #0]
 800c87a:	2210      	movs	r2, #16
 800c87c:	e7b7      	b.n	800c7ee <_printf_i+0xd2>
 800c87e:	064d      	lsls	r5, r1, #25
 800c880:	bf48      	it	mi
 800c882:	b29b      	uxthmi	r3, r3
 800c884:	e7ef      	b.n	800c866 <_printf_i+0x14a>
 800c886:	4665      	mov	r5, ip
 800c888:	fbb3 f1f2 	udiv	r1, r3, r2
 800c88c:	fb02 3311 	mls	r3, r2, r1, r3
 800c890:	5cc3      	ldrb	r3, [r0, r3]
 800c892:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c896:	460b      	mov	r3, r1
 800c898:	2900      	cmp	r1, #0
 800c89a:	d1f5      	bne.n	800c888 <_printf_i+0x16c>
 800c89c:	e7b9      	b.n	800c812 <_printf_i+0xf6>
 800c89e:	6813      	ldr	r3, [r2, #0]
 800c8a0:	6825      	ldr	r5, [r4, #0]
 800c8a2:	6961      	ldr	r1, [r4, #20]
 800c8a4:	1d18      	adds	r0, r3, #4
 800c8a6:	6010      	str	r0, [r2, #0]
 800c8a8:	0628      	lsls	r0, r5, #24
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	d501      	bpl.n	800c8b2 <_printf_i+0x196>
 800c8ae:	6019      	str	r1, [r3, #0]
 800c8b0:	e002      	b.n	800c8b8 <_printf_i+0x19c>
 800c8b2:	066a      	lsls	r2, r5, #25
 800c8b4:	d5fb      	bpl.n	800c8ae <_printf_i+0x192>
 800c8b6:	8019      	strh	r1, [r3, #0]
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	6123      	str	r3, [r4, #16]
 800c8bc:	4665      	mov	r5, ip
 800c8be:	e7b9      	b.n	800c834 <_printf_i+0x118>
 800c8c0:	6813      	ldr	r3, [r2, #0]
 800c8c2:	1d19      	adds	r1, r3, #4
 800c8c4:	6011      	str	r1, [r2, #0]
 800c8c6:	681d      	ldr	r5, [r3, #0]
 800c8c8:	6862      	ldr	r2, [r4, #4]
 800c8ca:	2100      	movs	r1, #0
 800c8cc:	4628      	mov	r0, r5
 800c8ce:	f7f3 fc87 	bl	80001e0 <memchr>
 800c8d2:	b108      	cbz	r0, 800c8d8 <_printf_i+0x1bc>
 800c8d4:	1b40      	subs	r0, r0, r5
 800c8d6:	6060      	str	r0, [r4, #4]
 800c8d8:	6863      	ldr	r3, [r4, #4]
 800c8da:	6123      	str	r3, [r4, #16]
 800c8dc:	2300      	movs	r3, #0
 800c8de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8e2:	e7a7      	b.n	800c834 <_printf_i+0x118>
 800c8e4:	6923      	ldr	r3, [r4, #16]
 800c8e6:	462a      	mov	r2, r5
 800c8e8:	4639      	mov	r1, r7
 800c8ea:	4630      	mov	r0, r6
 800c8ec:	47c0      	blx	r8
 800c8ee:	3001      	adds	r0, #1
 800c8f0:	d0aa      	beq.n	800c848 <_printf_i+0x12c>
 800c8f2:	6823      	ldr	r3, [r4, #0]
 800c8f4:	079b      	lsls	r3, r3, #30
 800c8f6:	d413      	bmi.n	800c920 <_printf_i+0x204>
 800c8f8:	68e0      	ldr	r0, [r4, #12]
 800c8fa:	9b03      	ldr	r3, [sp, #12]
 800c8fc:	4298      	cmp	r0, r3
 800c8fe:	bfb8      	it	lt
 800c900:	4618      	movlt	r0, r3
 800c902:	e7a3      	b.n	800c84c <_printf_i+0x130>
 800c904:	2301      	movs	r3, #1
 800c906:	464a      	mov	r2, r9
 800c908:	4639      	mov	r1, r7
 800c90a:	4630      	mov	r0, r6
 800c90c:	47c0      	blx	r8
 800c90e:	3001      	adds	r0, #1
 800c910:	d09a      	beq.n	800c848 <_printf_i+0x12c>
 800c912:	3501      	adds	r5, #1
 800c914:	68e3      	ldr	r3, [r4, #12]
 800c916:	9a03      	ldr	r2, [sp, #12]
 800c918:	1a9b      	subs	r3, r3, r2
 800c91a:	42ab      	cmp	r3, r5
 800c91c:	dcf2      	bgt.n	800c904 <_printf_i+0x1e8>
 800c91e:	e7eb      	b.n	800c8f8 <_printf_i+0x1dc>
 800c920:	2500      	movs	r5, #0
 800c922:	f104 0919 	add.w	r9, r4, #25
 800c926:	e7f5      	b.n	800c914 <_printf_i+0x1f8>
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d1ac      	bne.n	800c886 <_printf_i+0x16a>
 800c92c:	7803      	ldrb	r3, [r0, #0]
 800c92e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c932:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c936:	e76c      	b.n	800c812 <_printf_i+0xf6>
 800c938:	0800caa5 	.word	0x0800caa5
 800c93c:	0800cab6 	.word	0x0800cab6

0800c940 <memcpy>:
 800c940:	b510      	push	{r4, lr}
 800c942:	1e43      	subs	r3, r0, #1
 800c944:	440a      	add	r2, r1
 800c946:	4291      	cmp	r1, r2
 800c948:	d100      	bne.n	800c94c <memcpy+0xc>
 800c94a:	bd10      	pop	{r4, pc}
 800c94c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c950:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c954:	e7f7      	b.n	800c946 <memcpy+0x6>

0800c956 <memmove>:
 800c956:	4288      	cmp	r0, r1
 800c958:	b510      	push	{r4, lr}
 800c95a:	eb01 0302 	add.w	r3, r1, r2
 800c95e:	d807      	bhi.n	800c970 <memmove+0x1a>
 800c960:	1e42      	subs	r2, r0, #1
 800c962:	4299      	cmp	r1, r3
 800c964:	d00a      	beq.n	800c97c <memmove+0x26>
 800c966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c96a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c96e:	e7f8      	b.n	800c962 <memmove+0xc>
 800c970:	4283      	cmp	r3, r0
 800c972:	d9f5      	bls.n	800c960 <memmove+0xa>
 800c974:	1881      	adds	r1, r0, r2
 800c976:	1ad2      	subs	r2, r2, r3
 800c978:	42d3      	cmn	r3, r2
 800c97a:	d100      	bne.n	800c97e <memmove+0x28>
 800c97c:	bd10      	pop	{r4, pc}
 800c97e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c982:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c986:	e7f7      	b.n	800c978 <memmove+0x22>

0800c988 <_realloc_r>:
 800c988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c98a:	4607      	mov	r7, r0
 800c98c:	4614      	mov	r4, r2
 800c98e:	460e      	mov	r6, r1
 800c990:	b921      	cbnz	r1, 800c99c <_realloc_r+0x14>
 800c992:	4611      	mov	r1, r2
 800c994:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c998:	f7ff bc6c 	b.w	800c274 <_malloc_r>
 800c99c:	b922      	cbnz	r2, 800c9a8 <_realloc_r+0x20>
 800c99e:	f7ff fc1b 	bl	800c1d8 <_free_r>
 800c9a2:	4625      	mov	r5, r4
 800c9a4:	4628      	mov	r0, r5
 800c9a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9a8:	f000 f814 	bl	800c9d4 <_malloc_usable_size_r>
 800c9ac:	42a0      	cmp	r0, r4
 800c9ae:	d20f      	bcs.n	800c9d0 <_realloc_r+0x48>
 800c9b0:	4621      	mov	r1, r4
 800c9b2:	4638      	mov	r0, r7
 800c9b4:	f7ff fc5e 	bl	800c274 <_malloc_r>
 800c9b8:	4605      	mov	r5, r0
 800c9ba:	2800      	cmp	r0, #0
 800c9bc:	d0f2      	beq.n	800c9a4 <_realloc_r+0x1c>
 800c9be:	4631      	mov	r1, r6
 800c9c0:	4622      	mov	r2, r4
 800c9c2:	f7ff ffbd 	bl	800c940 <memcpy>
 800c9c6:	4631      	mov	r1, r6
 800c9c8:	4638      	mov	r0, r7
 800c9ca:	f7ff fc05 	bl	800c1d8 <_free_r>
 800c9ce:	e7e9      	b.n	800c9a4 <_realloc_r+0x1c>
 800c9d0:	4635      	mov	r5, r6
 800c9d2:	e7e7      	b.n	800c9a4 <_realloc_r+0x1c>

0800c9d4 <_malloc_usable_size_r>:
 800c9d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9d8:	1f18      	subs	r0, r3, #4
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	bfbc      	itt	lt
 800c9de:	580b      	ldrlt	r3, [r1, r0]
 800c9e0:	18c0      	addlt	r0, r0, r3
 800c9e2:	4770      	bx	lr

0800c9e4 <_init>:
 800c9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9e6:	bf00      	nop
 800c9e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9ea:	bc08      	pop	{r3}
 800c9ec:	469e      	mov	lr, r3
 800c9ee:	4770      	bx	lr

0800c9f0 <_fini>:
 800c9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9f2:	bf00      	nop
 800c9f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9f6:	bc08      	pop	{r3}
 800c9f8:	469e      	mov	lr, r3
 800c9fa:	4770      	bx	lr
