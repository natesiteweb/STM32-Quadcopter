
f4Quadcopter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000152cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  08015460  08015460  00025460  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015984  08015984  0003026c  2**0
                  CONTENTS
  4 .ARM          00000008  08015984  08015984  00025984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801598c  0801598c  0003026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801598c  0801598c  0002598c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015990  08015990  00025990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  08015994  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000549c  20000270  08015c00  00030270  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000570c  08015c00  0003570c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003026c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b727  00000000  00000000  0003029c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005051  00000000  00000000  0005b9c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001bc0  00000000  00000000  00060a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001978  00000000  00000000  000625d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002405c  00000000  00000000  00063f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b2ca  00000000  00000000  00087fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cdf51  00000000  00000000  000a3276  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001711c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080c8  00000000  00000000  00171244  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000270 	.word	0x20000270
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015444 	.word	0x08015444

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000274 	.word	0x20000274
 80001cc:	08015444 	.word	0x08015444

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_frsub>:
 8000c48:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c4c:	e002      	b.n	8000c54 <__addsf3>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_fsub>:
 8000c50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c54 <__addsf3>:
 8000c54:	0042      	lsls	r2, r0, #1
 8000c56:	bf1f      	itttt	ne
 8000c58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c5c:	ea92 0f03 	teqne	r2, r3
 8000c60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c68:	d06a      	beq.n	8000d40 <__addsf3+0xec>
 8000c6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c72:	bfc1      	itttt	gt
 8000c74:	18d2      	addgt	r2, r2, r3
 8000c76:	4041      	eorgt	r1, r0
 8000c78:	4048      	eorgt	r0, r1
 8000c7a:	4041      	eorgt	r1, r0
 8000c7c:	bfb8      	it	lt
 8000c7e:	425b      	neglt	r3, r3
 8000c80:	2b19      	cmp	r3, #25
 8000c82:	bf88      	it	hi
 8000c84:	4770      	bxhi	lr
 8000c86:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4240      	negne	r0, r0
 8000c96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c9a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c9e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4249      	negne	r1, r1
 8000ca6:	ea92 0f03 	teq	r2, r3
 8000caa:	d03f      	beq.n	8000d2c <__addsf3+0xd8>
 8000cac:	f1a2 0201 	sub.w	r2, r2, #1
 8000cb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cb4:	eb10 000c 	adds.w	r0, r0, ip
 8000cb8:	f1c3 0320 	rsb	r3, r3, #32
 8000cbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cc0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__addsf3+0x78>
 8000cc6:	4249      	negs	r1, r1
 8000cc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ccc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cd0:	d313      	bcc.n	8000cfa <__addsf3+0xa6>
 8000cd2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cd6:	d306      	bcc.n	8000ce6 <__addsf3+0x92>
 8000cd8:	0840      	lsrs	r0, r0, #1
 8000cda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cde:	f102 0201 	add.w	r2, r2, #1
 8000ce2:	2afe      	cmp	r2, #254	; 0xfe
 8000ce4:	d251      	bcs.n	8000d8a <__addsf3+0x136>
 8000ce6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cee:	bf08      	it	eq
 8000cf0:	f020 0001 	biceq.w	r0, r0, #1
 8000cf4:	ea40 0003 	orr.w	r0, r0, r3
 8000cf8:	4770      	bx	lr
 8000cfa:	0049      	lsls	r1, r1, #1
 8000cfc:	eb40 0000 	adc.w	r0, r0, r0
 8000d00:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000d04:	f1a2 0201 	sub.w	r2, r2, #1
 8000d08:	d1ed      	bne.n	8000ce6 <__addsf3+0x92>
 8000d0a:	fab0 fc80 	clz	ip, r0
 8000d0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d12:	ebb2 020c 	subs.w	r2, r2, ip
 8000d16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d1a:	bfaa      	itet	ge
 8000d1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d20:	4252      	neglt	r2, r2
 8000d22:	4318      	orrge	r0, r3
 8000d24:	bfbc      	itt	lt
 8000d26:	40d0      	lsrlt	r0, r2
 8000d28:	4318      	orrlt	r0, r3
 8000d2a:	4770      	bx	lr
 8000d2c:	f092 0f00 	teq	r2, #0
 8000d30:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d34:	bf06      	itte	eq
 8000d36:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d3a:	3201      	addeq	r2, #1
 8000d3c:	3b01      	subne	r3, #1
 8000d3e:	e7b5      	b.n	8000cac <__addsf3+0x58>
 8000d40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d48:	bf18      	it	ne
 8000d4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d4e:	d021      	beq.n	8000d94 <__addsf3+0x140>
 8000d50:	ea92 0f03 	teq	r2, r3
 8000d54:	d004      	beq.n	8000d60 <__addsf3+0x10c>
 8000d56:	f092 0f00 	teq	r2, #0
 8000d5a:	bf08      	it	eq
 8000d5c:	4608      	moveq	r0, r1
 8000d5e:	4770      	bx	lr
 8000d60:	ea90 0f01 	teq	r0, r1
 8000d64:	bf1c      	itt	ne
 8000d66:	2000      	movne	r0, #0
 8000d68:	4770      	bxne	lr
 8000d6a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d6e:	d104      	bne.n	8000d7a <__addsf3+0x126>
 8000d70:	0040      	lsls	r0, r0, #1
 8000d72:	bf28      	it	cs
 8000d74:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d78:	4770      	bx	lr
 8000d7a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d7e:	bf3c      	itt	cc
 8000d80:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d84:	4770      	bxcc	lr
 8000d86:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d8a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d98:	bf16      	itet	ne
 8000d9a:	4608      	movne	r0, r1
 8000d9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000da0:	4601      	movne	r1, r0
 8000da2:	0242      	lsls	r2, r0, #9
 8000da4:	bf06      	itte	eq
 8000da6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000daa:	ea90 0f01 	teqeq	r0, r1
 8000dae:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_ui2f>:
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e004      	b.n	8000dc4 <__aeabi_i2f+0x8>
 8000dba:	bf00      	nop

08000dbc <__aeabi_i2f>:
 8000dbc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dc0:	bf48      	it	mi
 8000dc2:	4240      	negmi	r0, r0
 8000dc4:	ea5f 0c00 	movs.w	ip, r0
 8000dc8:	bf08      	it	eq
 8000dca:	4770      	bxeq	lr
 8000dcc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dd0:	4601      	mov	r1, r0
 8000dd2:	f04f 0000 	mov.w	r0, #0
 8000dd6:	e01c      	b.n	8000e12 <__aeabi_l2f+0x2a>

08000dd8 <__aeabi_ul2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	e00a      	b.n	8000dfc <__aeabi_l2f+0x14>
 8000de6:	bf00      	nop

08000de8 <__aeabi_l2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000df4:	d502      	bpl.n	8000dfc <__aeabi_l2f+0x14>
 8000df6:	4240      	negs	r0, r0
 8000df8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dfc:	ea5f 0c01 	movs.w	ip, r1
 8000e00:	bf02      	ittt	eq
 8000e02:	4684      	moveq	ip, r0
 8000e04:	4601      	moveq	r1, r0
 8000e06:	2000      	moveq	r0, #0
 8000e08:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e0c:	bf08      	it	eq
 8000e0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e12:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e16:	fabc f28c 	clz	r2, ip
 8000e1a:	3a08      	subs	r2, #8
 8000e1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e20:	db10      	blt.n	8000e44 <__aeabi_l2f+0x5c>
 8000e22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e26:	4463      	add	r3, ip
 8000e28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2c:	f1c2 0220 	rsb	r2, r2, #32
 8000e30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e34:	fa20 f202 	lsr.w	r2, r0, r2
 8000e38:	eb43 0002 	adc.w	r0, r3, r2
 8000e3c:	bf08      	it	eq
 8000e3e:	f020 0001 	biceq.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	f102 0220 	add.w	r2, r2, #32
 8000e48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e4c:	f1c2 0220 	rsb	r2, r2, #32
 8000e50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e54:	fa21 f202 	lsr.w	r2, r1, r2
 8000e58:	eb43 0002 	adc.w	r0, r3, r2
 8000e5c:	bf08      	it	eq
 8000e5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e62:	4770      	bx	lr

08000e64 <__aeabi_ldivmod>:
 8000e64:	b97b      	cbnz	r3, 8000e86 <__aeabi_ldivmod+0x22>
 8000e66:	b972      	cbnz	r2, 8000e86 <__aeabi_ldivmod+0x22>
 8000e68:	2900      	cmp	r1, #0
 8000e6a:	bfbe      	ittt	lt
 8000e6c:	2000      	movlt	r0, #0
 8000e6e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000e72:	e006      	blt.n	8000e82 <__aeabi_ldivmod+0x1e>
 8000e74:	bf08      	it	eq
 8000e76:	2800      	cmpeq	r0, #0
 8000e78:	bf1c      	itt	ne
 8000e7a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000e7e:	f04f 30ff 	movne.w	r0, #4294967295
 8000e82:	f000 b9bd 	b.w	8001200 <__aeabi_idiv0>
 8000e86:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e8a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e8e:	2900      	cmp	r1, #0
 8000e90:	db09      	blt.n	8000ea6 <__aeabi_ldivmod+0x42>
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	db1a      	blt.n	8000ecc <__aeabi_ldivmod+0x68>
 8000e96:	f000 f84d 	bl	8000f34 <__udivmoddi4>
 8000e9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ea2:	b004      	add	sp, #16
 8000ea4:	4770      	bx	lr
 8000ea6:	4240      	negs	r0, r0
 8000ea8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db1b      	blt.n	8000ee8 <__aeabi_ldivmod+0x84>
 8000eb0:	f000 f840 	bl	8000f34 <__udivmoddi4>
 8000eb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ebc:	b004      	add	sp, #16
 8000ebe:	4240      	negs	r0, r0
 8000ec0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ec4:	4252      	negs	r2, r2
 8000ec6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000eca:	4770      	bx	lr
 8000ecc:	4252      	negs	r2, r2
 8000ece:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ed2:	f000 f82f 	bl	8000f34 <__udivmoddi4>
 8000ed6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ede:	b004      	add	sp, #16
 8000ee0:	4240      	negs	r0, r0
 8000ee2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ee6:	4770      	bx	lr
 8000ee8:	4252      	negs	r2, r2
 8000eea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000eee:	f000 f821 	bl	8000f34 <__udivmoddi4>
 8000ef2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ef6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000efa:	b004      	add	sp, #16
 8000efc:	4252      	negs	r2, r2
 8000efe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f02:	4770      	bx	lr

08000f04 <__aeabi_uldivmod>:
 8000f04:	b953      	cbnz	r3, 8000f1c <__aeabi_uldivmod+0x18>
 8000f06:	b94a      	cbnz	r2, 8000f1c <__aeabi_uldivmod+0x18>
 8000f08:	2900      	cmp	r1, #0
 8000f0a:	bf08      	it	eq
 8000f0c:	2800      	cmpeq	r0, #0
 8000f0e:	bf1c      	itt	ne
 8000f10:	f04f 31ff 	movne.w	r1, #4294967295
 8000f14:	f04f 30ff 	movne.w	r0, #4294967295
 8000f18:	f000 b972 	b.w	8001200 <__aeabi_idiv0>
 8000f1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f24:	f000 f806 	bl	8000f34 <__udivmoddi4>
 8000f28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f30:	b004      	add	sp, #16
 8000f32:	4770      	bx	lr

08000f34 <__udivmoddi4>:
 8000f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f38:	9e08      	ldr	r6, [sp, #32]
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	4688      	mov	r8, r1
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d14b      	bne.n	8000fda <__udivmoddi4+0xa6>
 8000f42:	428a      	cmp	r2, r1
 8000f44:	4615      	mov	r5, r2
 8000f46:	d967      	bls.n	8001018 <__udivmoddi4+0xe4>
 8000f48:	fab2 f282 	clz	r2, r2
 8000f4c:	b14a      	cbz	r2, 8000f62 <__udivmoddi4+0x2e>
 8000f4e:	f1c2 0720 	rsb	r7, r2, #32
 8000f52:	fa01 f302 	lsl.w	r3, r1, r2
 8000f56:	fa20 f707 	lsr.w	r7, r0, r7
 8000f5a:	4095      	lsls	r5, r2
 8000f5c:	ea47 0803 	orr.w	r8, r7, r3
 8000f60:	4094      	lsls	r4, r2
 8000f62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f66:	0c23      	lsrs	r3, r4, #16
 8000f68:	fbb8 f7fe 	udiv	r7, r8, lr
 8000f6c:	fa1f fc85 	uxth.w	ip, r5
 8000f70:	fb0e 8817 	mls	r8, lr, r7, r8
 8000f74:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f78:	fb07 f10c 	mul.w	r1, r7, ip
 8000f7c:	4299      	cmp	r1, r3
 8000f7e:	d909      	bls.n	8000f94 <__udivmoddi4+0x60>
 8000f80:	18eb      	adds	r3, r5, r3
 8000f82:	f107 30ff 	add.w	r0, r7, #4294967295
 8000f86:	f080 811b 	bcs.w	80011c0 <__udivmoddi4+0x28c>
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	f240 8118 	bls.w	80011c0 <__udivmoddi4+0x28c>
 8000f90:	3f02      	subs	r7, #2
 8000f92:	442b      	add	r3, r5
 8000f94:	1a5b      	subs	r3, r3, r1
 8000f96:	b2a4      	uxth	r4, r4
 8000f98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000fa8:	45a4      	cmp	ip, r4
 8000faa:	d909      	bls.n	8000fc0 <__udivmoddi4+0x8c>
 8000fac:	192c      	adds	r4, r5, r4
 8000fae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fb2:	f080 8107 	bcs.w	80011c4 <__udivmoddi4+0x290>
 8000fb6:	45a4      	cmp	ip, r4
 8000fb8:	f240 8104 	bls.w	80011c4 <__udivmoddi4+0x290>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	442c      	add	r4, r5
 8000fc0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000fc4:	eba4 040c 	sub.w	r4, r4, ip
 8000fc8:	2700      	movs	r7, #0
 8000fca:	b11e      	cbz	r6, 8000fd4 <__udivmoddi4+0xa0>
 8000fcc:	40d4      	lsrs	r4, r2
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e9c6 4300 	strd	r4, r3, [r6]
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fda:	428b      	cmp	r3, r1
 8000fdc:	d909      	bls.n	8000ff2 <__udivmoddi4+0xbe>
 8000fde:	2e00      	cmp	r6, #0
 8000fe0:	f000 80eb 	beq.w	80011ba <__udivmoddi4+0x286>
 8000fe4:	2700      	movs	r7, #0
 8000fe6:	e9c6 0100 	strd	r0, r1, [r6]
 8000fea:	4638      	mov	r0, r7
 8000fec:	4639      	mov	r1, r7
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	fab3 f783 	clz	r7, r3
 8000ff6:	2f00      	cmp	r7, #0
 8000ff8:	d147      	bne.n	800108a <__udivmoddi4+0x156>
 8000ffa:	428b      	cmp	r3, r1
 8000ffc:	d302      	bcc.n	8001004 <__udivmoddi4+0xd0>
 8000ffe:	4282      	cmp	r2, r0
 8001000:	f200 80fa 	bhi.w	80011f8 <__udivmoddi4+0x2c4>
 8001004:	1a84      	subs	r4, r0, r2
 8001006:	eb61 0303 	sbc.w	r3, r1, r3
 800100a:	2001      	movs	r0, #1
 800100c:	4698      	mov	r8, r3
 800100e:	2e00      	cmp	r6, #0
 8001010:	d0e0      	beq.n	8000fd4 <__udivmoddi4+0xa0>
 8001012:	e9c6 4800 	strd	r4, r8, [r6]
 8001016:	e7dd      	b.n	8000fd4 <__udivmoddi4+0xa0>
 8001018:	b902      	cbnz	r2, 800101c <__udivmoddi4+0xe8>
 800101a:	deff      	udf	#255	; 0xff
 800101c:	fab2 f282 	clz	r2, r2
 8001020:	2a00      	cmp	r2, #0
 8001022:	f040 808f 	bne.w	8001144 <__udivmoddi4+0x210>
 8001026:	1b49      	subs	r1, r1, r5
 8001028:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800102c:	fa1f f885 	uxth.w	r8, r5
 8001030:	2701      	movs	r7, #1
 8001032:	fbb1 fcfe 	udiv	ip, r1, lr
 8001036:	0c23      	lsrs	r3, r4, #16
 8001038:	fb0e 111c 	mls	r1, lr, ip, r1
 800103c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001040:	fb08 f10c 	mul.w	r1, r8, ip
 8001044:	4299      	cmp	r1, r3
 8001046:	d907      	bls.n	8001058 <__udivmoddi4+0x124>
 8001048:	18eb      	adds	r3, r5, r3
 800104a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800104e:	d202      	bcs.n	8001056 <__udivmoddi4+0x122>
 8001050:	4299      	cmp	r1, r3
 8001052:	f200 80cd 	bhi.w	80011f0 <__udivmoddi4+0x2bc>
 8001056:	4684      	mov	ip, r0
 8001058:	1a59      	subs	r1, r3, r1
 800105a:	b2a3      	uxth	r3, r4
 800105c:	fbb1 f0fe 	udiv	r0, r1, lr
 8001060:	fb0e 1410 	mls	r4, lr, r0, r1
 8001064:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001068:	fb08 f800 	mul.w	r8, r8, r0
 800106c:	45a0      	cmp	r8, r4
 800106e:	d907      	bls.n	8001080 <__udivmoddi4+0x14c>
 8001070:	192c      	adds	r4, r5, r4
 8001072:	f100 33ff 	add.w	r3, r0, #4294967295
 8001076:	d202      	bcs.n	800107e <__udivmoddi4+0x14a>
 8001078:	45a0      	cmp	r8, r4
 800107a:	f200 80b6 	bhi.w	80011ea <__udivmoddi4+0x2b6>
 800107e:	4618      	mov	r0, r3
 8001080:	eba4 0408 	sub.w	r4, r4, r8
 8001084:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001088:	e79f      	b.n	8000fca <__udivmoddi4+0x96>
 800108a:	f1c7 0c20 	rsb	ip, r7, #32
 800108e:	40bb      	lsls	r3, r7
 8001090:	fa22 fe0c 	lsr.w	lr, r2, ip
 8001094:	ea4e 0e03 	orr.w	lr, lr, r3
 8001098:	fa01 f407 	lsl.w	r4, r1, r7
 800109c:	fa20 f50c 	lsr.w	r5, r0, ip
 80010a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80010a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80010a8:	4325      	orrs	r5, r4
 80010aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80010ae:	0c2c      	lsrs	r4, r5, #16
 80010b0:	fb08 3319 	mls	r3, r8, r9, r3
 80010b4:	fa1f fa8e 	uxth.w	sl, lr
 80010b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80010bc:	fb09 f40a 	mul.w	r4, r9, sl
 80010c0:	429c      	cmp	r4, r3
 80010c2:	fa02 f207 	lsl.w	r2, r2, r7
 80010c6:	fa00 f107 	lsl.w	r1, r0, r7
 80010ca:	d90b      	bls.n	80010e4 <__udivmoddi4+0x1b0>
 80010cc:	eb1e 0303 	adds.w	r3, lr, r3
 80010d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80010d4:	f080 8087 	bcs.w	80011e6 <__udivmoddi4+0x2b2>
 80010d8:	429c      	cmp	r4, r3
 80010da:	f240 8084 	bls.w	80011e6 <__udivmoddi4+0x2b2>
 80010de:	f1a9 0902 	sub.w	r9, r9, #2
 80010e2:	4473      	add	r3, lr
 80010e4:	1b1b      	subs	r3, r3, r4
 80010e6:	b2ad      	uxth	r5, r5
 80010e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80010ec:	fb08 3310 	mls	r3, r8, r0, r3
 80010f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80010f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80010f8:	45a2      	cmp	sl, r4
 80010fa:	d908      	bls.n	800110e <__udivmoddi4+0x1da>
 80010fc:	eb1e 0404 	adds.w	r4, lr, r4
 8001100:	f100 33ff 	add.w	r3, r0, #4294967295
 8001104:	d26b      	bcs.n	80011de <__udivmoddi4+0x2aa>
 8001106:	45a2      	cmp	sl, r4
 8001108:	d969      	bls.n	80011de <__udivmoddi4+0x2aa>
 800110a:	3802      	subs	r0, #2
 800110c:	4474      	add	r4, lr
 800110e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001112:	fba0 8902 	umull	r8, r9, r0, r2
 8001116:	eba4 040a 	sub.w	r4, r4, sl
 800111a:	454c      	cmp	r4, r9
 800111c:	46c2      	mov	sl, r8
 800111e:	464b      	mov	r3, r9
 8001120:	d354      	bcc.n	80011cc <__udivmoddi4+0x298>
 8001122:	d051      	beq.n	80011c8 <__udivmoddi4+0x294>
 8001124:	2e00      	cmp	r6, #0
 8001126:	d069      	beq.n	80011fc <__udivmoddi4+0x2c8>
 8001128:	ebb1 050a 	subs.w	r5, r1, sl
 800112c:	eb64 0403 	sbc.w	r4, r4, r3
 8001130:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001134:	40fd      	lsrs	r5, r7
 8001136:	40fc      	lsrs	r4, r7
 8001138:	ea4c 0505 	orr.w	r5, ip, r5
 800113c:	e9c6 5400 	strd	r5, r4, [r6]
 8001140:	2700      	movs	r7, #0
 8001142:	e747      	b.n	8000fd4 <__udivmoddi4+0xa0>
 8001144:	f1c2 0320 	rsb	r3, r2, #32
 8001148:	fa20 f703 	lsr.w	r7, r0, r3
 800114c:	4095      	lsls	r5, r2
 800114e:	fa01 f002 	lsl.w	r0, r1, r2
 8001152:	fa21 f303 	lsr.w	r3, r1, r3
 8001156:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800115a:	4338      	orrs	r0, r7
 800115c:	0c01      	lsrs	r1, r0, #16
 800115e:	fbb3 f7fe 	udiv	r7, r3, lr
 8001162:	fa1f f885 	uxth.w	r8, r5
 8001166:	fb0e 3317 	mls	r3, lr, r7, r3
 800116a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800116e:	fb07 f308 	mul.w	r3, r7, r8
 8001172:	428b      	cmp	r3, r1
 8001174:	fa04 f402 	lsl.w	r4, r4, r2
 8001178:	d907      	bls.n	800118a <__udivmoddi4+0x256>
 800117a:	1869      	adds	r1, r5, r1
 800117c:	f107 3cff 	add.w	ip, r7, #4294967295
 8001180:	d22f      	bcs.n	80011e2 <__udivmoddi4+0x2ae>
 8001182:	428b      	cmp	r3, r1
 8001184:	d92d      	bls.n	80011e2 <__udivmoddi4+0x2ae>
 8001186:	3f02      	subs	r7, #2
 8001188:	4429      	add	r1, r5
 800118a:	1acb      	subs	r3, r1, r3
 800118c:	b281      	uxth	r1, r0
 800118e:	fbb3 f0fe 	udiv	r0, r3, lr
 8001192:	fb0e 3310 	mls	r3, lr, r0, r3
 8001196:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800119a:	fb00 f308 	mul.w	r3, r0, r8
 800119e:	428b      	cmp	r3, r1
 80011a0:	d907      	bls.n	80011b2 <__udivmoddi4+0x27e>
 80011a2:	1869      	adds	r1, r5, r1
 80011a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80011a8:	d217      	bcs.n	80011da <__udivmoddi4+0x2a6>
 80011aa:	428b      	cmp	r3, r1
 80011ac:	d915      	bls.n	80011da <__udivmoddi4+0x2a6>
 80011ae:	3802      	subs	r0, #2
 80011b0:	4429      	add	r1, r5
 80011b2:	1ac9      	subs	r1, r1, r3
 80011b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80011b8:	e73b      	b.n	8001032 <__udivmoddi4+0xfe>
 80011ba:	4637      	mov	r7, r6
 80011bc:	4630      	mov	r0, r6
 80011be:	e709      	b.n	8000fd4 <__udivmoddi4+0xa0>
 80011c0:	4607      	mov	r7, r0
 80011c2:	e6e7      	b.n	8000f94 <__udivmoddi4+0x60>
 80011c4:	4618      	mov	r0, r3
 80011c6:	e6fb      	b.n	8000fc0 <__udivmoddi4+0x8c>
 80011c8:	4541      	cmp	r1, r8
 80011ca:	d2ab      	bcs.n	8001124 <__udivmoddi4+0x1f0>
 80011cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80011d0:	eb69 020e 	sbc.w	r2, r9, lr
 80011d4:	3801      	subs	r0, #1
 80011d6:	4613      	mov	r3, r2
 80011d8:	e7a4      	b.n	8001124 <__udivmoddi4+0x1f0>
 80011da:	4660      	mov	r0, ip
 80011dc:	e7e9      	b.n	80011b2 <__udivmoddi4+0x27e>
 80011de:	4618      	mov	r0, r3
 80011e0:	e795      	b.n	800110e <__udivmoddi4+0x1da>
 80011e2:	4667      	mov	r7, ip
 80011e4:	e7d1      	b.n	800118a <__udivmoddi4+0x256>
 80011e6:	4681      	mov	r9, r0
 80011e8:	e77c      	b.n	80010e4 <__udivmoddi4+0x1b0>
 80011ea:	3802      	subs	r0, #2
 80011ec:	442c      	add	r4, r5
 80011ee:	e747      	b.n	8001080 <__udivmoddi4+0x14c>
 80011f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80011f4:	442b      	add	r3, r5
 80011f6:	e72f      	b.n	8001058 <__udivmoddi4+0x124>
 80011f8:	4638      	mov	r0, r7
 80011fa:	e708      	b.n	800100e <__udivmoddi4+0xda>
 80011fc:	4637      	mov	r7, r6
 80011fe:	e6e9      	b.n	8000fd4 <__udivmoddi4+0xa0>

08001200 <__aeabi_idiv0>:
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop

08001204 <Setup_BMP280>:

bmp280_calib_data _bmp280_calib;
int32_t t_fine;

void Setup_BMP280()
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af02      	add	r7, sp, #8
	uint8_t setup_data[4];
	setup_data[0] = 0xF5;
 800120a:	23f5      	movs	r3, #245	; 0xf5
 800120c:	713b      	strb	r3, [r7, #4]
	setup_data[1] = 0x10;
 800120e:	2310      	movs	r3, #16
 8001210:	717b      	strb	r3, [r7, #5]
	setup_data[2] = 0xF4;
 8001212:	23f4      	movs	r3, #244	; 0xf4
 8001214:	71bb      	strb	r3, [r7, #6]
	setup_data[3] = 0x57;
 8001216:	2357      	movs	r3, #87	; 0x57
 8001218:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, setup_data, 4, HAL_MAX_DELAY);
 800121a:	23ec      	movs	r3, #236	; 0xec
 800121c:	b299      	uxth	r1, r3
 800121e:	1d3a      	adds	r2, r7, #4
 8001220:	f04f 33ff 	mov.w	r3, #4294967295
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2304      	movs	r3, #4
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <Setup_BMP280+0x38>)
 800122a:	f007 fc9d 	bl	8008b68 <HAL_I2C_Master_Transmit>
	Read_BMP280_Calibration_Data();
 800122e:	f000 f807 	bl	8001240 <Read_BMP280_Calibration_Data>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20001ef8 	.word	0x20001ef8

08001240 <Read_BMP280_Calibration_Data>:

void Read_BMP280_Calibration_Data()
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, BMP280_ADDR, 0x88, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&_bmp280_calib, sizeof(bmp280_calib_data), HAL_MAX_DELAY);
 8001246:	23ec      	movs	r3, #236	; 0xec
 8001248:	b299      	uxth	r1, r3
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
 800124e:	9302      	str	r3, [sp, #8]
 8001250:	2318      	movs	r3, #24
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <Read_BMP280_Calibration_Data+0x28>)
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2301      	movs	r3, #1
 800125a:	2288      	movs	r2, #136	; 0x88
 800125c:	4803      	ldr	r0, [pc, #12]	; (800126c <Read_BMP280_Calibration_Data+0x2c>)
 800125e:	f007 fd81 	bl	8008d64 <HAL_I2C_Mem_Read>
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000410 	.word	0x20000410
 800126c:	20001ef8 	.word	0x20001ef8

08001270 <Read_BMP280_PressureTemperature>:

void Read_BMP280_PressureTemperature()
{
 8001270:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8001274:	b084      	sub	sp, #16
 8001276:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, BMP280_ADDR, 0xF7, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&pressure_temperature_buffer, 6, HAL_MAX_DELAY);
 8001278:	23ec      	movs	r3, #236	; 0xec
 800127a:	b299      	uxth	r1, r3
 800127c:	f04f 33ff 	mov.w	r3, #4294967295
 8001280:	9302      	str	r3, [sp, #8]
 8001282:	2306      	movs	r3, #6
 8001284:	9301      	str	r3, [sp, #4]
 8001286:	4bbb      	ldr	r3, [pc, #748]	; (8001574 <Read_BMP280_PressureTemperature+0x304>)
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	2301      	movs	r3, #1
 800128c:	22f7      	movs	r2, #247	; 0xf7
 800128e:	48ba      	ldr	r0, [pc, #744]	; (8001578 <Read_BMP280_PressureTemperature+0x308>)
 8001290:	f007 fd68 	bl	8008d64 <HAL_I2C_Mem_Read>

	adc_P = (pressure_temperature_buffer[0] << 16) | (pressure_temperature_buffer[1] << 8) | (pressure_temperature_buffer[2]);
 8001294:	4bb7      	ldr	r3, [pc, #732]	; (8001574 <Read_BMP280_PressureTemperature+0x304>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	041a      	lsls	r2, r3, #16
 800129a:	4bb6      	ldr	r3, [pc, #728]	; (8001574 <Read_BMP280_PressureTemperature+0x304>)
 800129c:	785b      	ldrb	r3, [r3, #1]
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	4313      	orrs	r3, r2
 80012a2:	4ab4      	ldr	r2, [pc, #720]	; (8001574 <Read_BMP280_PressureTemperature+0x304>)
 80012a4:	7892      	ldrb	r2, [r2, #2]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	4ab4      	ldr	r2, [pc, #720]	; (800157c <Read_BMP280_PressureTemperature+0x30c>)
 80012aa:	6013      	str	r3, [r2, #0]
	adc_P >>= 4;
 80012ac:	4bb3      	ldr	r3, [pc, #716]	; (800157c <Read_BMP280_PressureTemperature+0x30c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	111b      	asrs	r3, r3, #4
 80012b2:	4ab2      	ldr	r2, [pc, #712]	; (800157c <Read_BMP280_PressureTemperature+0x30c>)
 80012b4:	6013      	str	r3, [r2, #0]

	adc_T = (pressure_temperature_buffer[3] << 16) | (pressure_temperature_buffer[4] << 8) | (pressure_temperature_buffer[5]);
 80012b6:	4baf      	ldr	r3, [pc, #700]	; (8001574 <Read_BMP280_PressureTemperature+0x304>)
 80012b8:	78db      	ldrb	r3, [r3, #3]
 80012ba:	041a      	lsls	r2, r3, #16
 80012bc:	4bad      	ldr	r3, [pc, #692]	; (8001574 <Read_BMP280_PressureTemperature+0x304>)
 80012be:	791b      	ldrb	r3, [r3, #4]
 80012c0:	021b      	lsls	r3, r3, #8
 80012c2:	4313      	orrs	r3, r2
 80012c4:	4aab      	ldr	r2, [pc, #684]	; (8001574 <Read_BMP280_PressureTemperature+0x304>)
 80012c6:	7952      	ldrb	r2, [r2, #5]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	4aad      	ldr	r2, [pc, #692]	; (8001580 <Read_BMP280_PressureTemperature+0x310>)
 80012cc:	6013      	str	r3, [r2, #0]
	adc_T >>= 4;
 80012ce:	4bac      	ldr	r3, [pc, #688]	; (8001580 <Read_BMP280_PressureTemperature+0x310>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	111b      	asrs	r3, r3, #4
 80012d4:	4aaa      	ldr	r2, [pc, #680]	; (8001580 <Read_BMP280_PressureTemperature+0x310>)
 80012d6:	6013      	str	r3, [r2, #0]

	temperatureVar1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) * ((int32_t)_bmp280_calib.dig_T2)) >> 11;
 80012d8:	4ba9      	ldr	r3, [pc, #676]	; (8001580 <Read_BMP280_PressureTemperature+0x310>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	10da      	asrs	r2, r3, #3
 80012de:	4ba9      	ldr	r3, [pc, #676]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	4aa7      	ldr	r2, [pc, #668]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 80012e8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80012ec:	fb02 f303 	mul.w	r3, r2, r3
 80012f0:	12db      	asrs	r3, r3, #11
 80012f2:	4aa5      	ldr	r2, [pc, #660]	; (8001588 <Read_BMP280_PressureTemperature+0x318>)
 80012f4:	6013      	str	r3, [r2, #0]
	temperatureVar2 = (((((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1)) * ((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1))) >> 12) * ((int32_t)_bmp280_calib.dig_T3)) >> 14;
 80012f6:	4ba2      	ldr	r3, [pc, #648]	; (8001580 <Read_BMP280_PressureTemperature+0x310>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	111b      	asrs	r3, r3, #4
 80012fc:	4aa1      	ldr	r2, [pc, #644]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 80012fe:	8812      	ldrh	r2, [r2, #0]
 8001300:	1a9b      	subs	r3, r3, r2
 8001302:	4a9f      	ldr	r2, [pc, #636]	; (8001580 <Read_BMP280_PressureTemperature+0x310>)
 8001304:	6812      	ldr	r2, [r2, #0]
 8001306:	1112      	asrs	r2, r2, #4
 8001308:	499e      	ldr	r1, [pc, #632]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 800130a:	8809      	ldrh	r1, [r1, #0]
 800130c:	1a52      	subs	r2, r2, r1
 800130e:	fb02 f303 	mul.w	r3, r2, r3
 8001312:	131b      	asrs	r3, r3, #12
 8001314:	4a9b      	ldr	r2, [pc, #620]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 8001316:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800131a:	fb02 f303 	mul.w	r3, r2, r3
 800131e:	139b      	asrs	r3, r3, #14
 8001320:	4a9a      	ldr	r2, [pc, #616]	; (800158c <Read_BMP280_PressureTemperature+0x31c>)
 8001322:	6013      	str	r3, [r2, #0]

	t_fine = temperatureVar1 + temperatureVar2;
 8001324:	4b98      	ldr	r3, [pc, #608]	; (8001588 <Read_BMP280_PressureTemperature+0x318>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b98      	ldr	r3, [pc, #608]	; (800158c <Read_BMP280_PressureTemperature+0x31c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4413      	add	r3, r2
 800132e:	4a98      	ldr	r2, [pc, #608]	; (8001590 <Read_BMP280_PressureTemperature+0x320>)
 8001330:	6013      	str	r3, [r2, #0]

	final_temperature = (float)((t_fine * 5 + 128) >> 8) / 100;
 8001332:	4b97      	ldr	r3, [pc, #604]	; (8001590 <Read_BMP280_PressureTemperature+0x320>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	3380      	adds	r3, #128	; 0x80
 800133e:	121b      	asrs	r3, r3, #8
 8001340:	ee07 3a90 	vmov	s15, r3
 8001344:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001348:	eddf 6a92 	vldr	s13, [pc, #584]	; 8001594 <Read_BMP280_PressureTemperature+0x324>
 800134c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001350:	4b91      	ldr	r3, [pc, #580]	; (8001598 <Read_BMP280_PressureTemperature+0x328>)
 8001352:	edc3 7a00 	vstr	s15, [r3]

	pressureVar1 = ((int64_t)t_fine) - 128000;
 8001356:	4b8e      	ldr	r3, [pc, #568]	; (8001590 <Read_BMP280_PressureTemperature+0x320>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4619      	mov	r1, r3
 800135c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001360:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8001364:	f142 34ff 	adc.w	r4, r2, #4294967295
 8001368:	4a8c      	ldr	r2, [pc, #560]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 800136a:	e9c2 3400 	strd	r3, r4, [r2]
	pressureVar2 = pressureVar1 * pressureVar1 * (int64_t)_bmp280_calib.dig_P6;
 800136e:	4b8b      	ldr	r3, [pc, #556]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 8001370:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001374:	4b89      	ldr	r3, [pc, #548]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 8001376:	e9d3 3400 	ldrd	r3, r4, [r3]
 800137a:	fb03 f502 	mul.w	r5, r3, r2
 800137e:	fb01 f004 	mul.w	r0, r1, r4
 8001382:	4428      	add	r0, r5
 8001384:	fba1 3403 	umull	r3, r4, r1, r3
 8001388:	1902      	adds	r2, r0, r4
 800138a:	4614      	mov	r4, r2
 800138c:	4a7d      	ldr	r2, [pc, #500]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 800138e:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001392:	b211      	sxth	r1, r2
 8001394:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001398:	fb01 f504 	mul.w	r5, r1, r4
 800139c:	fb03 f002 	mul.w	r0, r3, r2
 80013a0:	4428      	add	r0, r5
 80013a2:	fba3 3401 	umull	r3, r4, r3, r1
 80013a6:	1902      	adds	r2, r0, r4
 80013a8:	4614      	mov	r4, r2
 80013aa:	4a7d      	ldr	r2, [pc, #500]	; (80015a0 <Read_BMP280_PressureTemperature+0x330>)
 80013ac:	e9c2 3400 	strd	r3, r4, [r2]
	pressureVar2 = pressureVar2 + ((pressureVar1 * (int64_t)_bmp280_calib.dig_P5) << 17);
 80013b0:	4b74      	ldr	r3, [pc, #464]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 80013b2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80013b6:	b219      	sxth	r1, r3
 80013b8:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80013bc:	4b77      	ldr	r3, [pc, #476]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 80013be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013c2:	fb03 f502 	mul.w	r5, r3, r2
 80013c6:	fb01 f004 	mul.w	r0, r1, r4
 80013ca:	4428      	add	r0, r5
 80013cc:	fba1 1203 	umull	r1, r2, r1, r3
 80013d0:	1883      	adds	r3, r0, r2
 80013d2:	461a      	mov	r2, r3
 80013d4:	f04f 0500 	mov.w	r5, #0
 80013d8:	f04f 0600 	mov.w	r6, #0
 80013dc:	0456      	lsls	r6, r2, #17
 80013de:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 80013e2:	044d      	lsls	r5, r1, #17
 80013e4:	4a6e      	ldr	r2, [pc, #440]	; (80015a0 <Read_BMP280_PressureTemperature+0x330>)
 80013e6:	e9d2 1200 	ldrd	r1, r2, [r2]
 80013ea:	186b      	adds	r3, r5, r1
 80013ec:	eb46 0402 	adc.w	r4, r6, r2
 80013f0:	4a6b      	ldr	r2, [pc, #428]	; (80015a0 <Read_BMP280_PressureTemperature+0x330>)
 80013f2:	e9c2 3400 	strd	r3, r4, [r2]
	pressureVar2 = pressureVar2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
 80013f6:	4b63      	ldr	r3, [pc, #396]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 80013f8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80013fc:	b219      	sxth	r1, r3
 80013fe:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001402:	f04f 0500 	mov.w	r5, #0
 8001406:	f04f 0600 	mov.w	r6, #0
 800140a:	00ce      	lsls	r6, r1, #3
 800140c:	2500      	movs	r5, #0
 800140e:	4a64      	ldr	r2, [pc, #400]	; (80015a0 <Read_BMP280_PressureTemperature+0x330>)
 8001410:	e9d2 1200 	ldrd	r1, r2, [r2]
 8001414:	186b      	adds	r3, r5, r1
 8001416:	eb46 0402 	adc.w	r4, r6, r2
 800141a:	4a61      	ldr	r2, [pc, #388]	; (80015a0 <Read_BMP280_PressureTemperature+0x330>)
 800141c:	e9c2 3400 	strd	r3, r4, [r2]
	pressureVar1 = ((pressureVar1 * pressureVar1 * (int64_t)_bmp280_calib.dig_P3) >> 8) + ((pressureVar1 * (int64_t)_bmp280_calib.dig_P2) << 12);
 8001420:	4b5e      	ldr	r3, [pc, #376]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 8001422:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001426:	4b5d      	ldr	r3, [pc, #372]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 8001428:	e9d3 3400 	ldrd	r3, r4, [r3]
 800142c:	fb03 f502 	mul.w	r5, r3, r2
 8001430:	fb01 f004 	mul.w	r0, r1, r4
 8001434:	4428      	add	r0, r5
 8001436:	fba1 3403 	umull	r3, r4, r1, r3
 800143a:	1902      	adds	r2, r0, r4
 800143c:	4614      	mov	r4, r2
 800143e:	4a51      	ldr	r2, [pc, #324]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 8001440:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001444:	b211      	sxth	r1, r2
 8001446:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800144a:	fb01 f504 	mul.w	r5, r1, r4
 800144e:	fb03 f002 	mul.w	r0, r3, r2
 8001452:	4428      	add	r0, r5
 8001454:	fba3 3401 	umull	r3, r4, r3, r1
 8001458:	1902      	adds	r2, r0, r4
 800145a:	4614      	mov	r4, r2
 800145c:	f04f 0100 	mov.w	r1, #0
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	0a19      	lsrs	r1, r3, #8
 8001466:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 800146a:	1222      	asrs	r2, r4, #8
 800146c:	4b45      	ldr	r3, [pc, #276]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 800146e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001472:	b21d      	sxth	r5, r3
 8001474:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001478:	4b48      	ldr	r3, [pc, #288]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 800147a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800147e:	fb03 fc06 	mul.w	ip, r3, r6
 8001482:	fb05 f004 	mul.w	r0, r5, r4
 8001486:	4460      	add	r0, ip
 8001488:	fba5 5603 	umull	r5, r6, r5, r3
 800148c:	1983      	adds	r3, r0, r6
 800148e:	461e      	mov	r6, r3
 8001490:	f04f 0b00 	mov.w	fp, #0
 8001494:	f04f 0c00 	mov.w	ip, #0
 8001498:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 800149c:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 80014a0:	ea4f 3b05 	mov.w	fp, r5, lsl #12
 80014a4:	eb1b 0301 	adds.w	r3, fp, r1
 80014a8:	eb4c 0402 	adc.w	r4, ip, r2
 80014ac:	4a3b      	ldr	r2, [pc, #236]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 80014ae:	e9c2 3400 	strd	r3, r4, [r2]
	pressureVar1 = (((((int64_t)1) << 47) + pressureVar1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
 80014b2:	4b3a      	ldr	r3, [pc, #232]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 80014b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80014b8:	1c19      	adds	r1, r3, #0
 80014ba:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 80014be:	4b31      	ldr	r3, [pc, #196]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 80014c0:	88db      	ldrh	r3, [r3, #6]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	f04f 0400 	mov.w	r4, #0
 80014c8:	fb03 f502 	mul.w	r5, r3, r2
 80014cc:	fb01 f004 	mul.w	r0, r1, r4
 80014d0:	4428      	add	r0, r5
 80014d2:	fba1 3403 	umull	r3, r4, r1, r3
 80014d6:	1902      	adds	r2, r0, r4
 80014d8:	4614      	mov	r4, r2
 80014da:	f04f 0100 	mov.w	r1, #0
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	1061      	asrs	r1, r4, #1
 80014e4:	17e2      	asrs	r2, r4, #31
 80014e6:	4b2d      	ldr	r3, [pc, #180]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 80014e8:	e9c3 1200 	strd	r1, r2, [r3]

	if (pressureVar1 != 0)
 80014ec:	4b2b      	ldr	r3, [pc, #172]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 80014ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80014f2:	4323      	orrs	r3, r4
 80014f4:	f000 8156 	beq.w	80017a4 <Read_BMP280_PressureTemperature+0x534>
	{
		pressureVarP = 1048576 - adc_P;
 80014f8:	4b20      	ldr	r3, [pc, #128]	; (800157c <Read_BMP280_PressureTemperature+0x30c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001500:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001504:	4a27      	ldr	r2, [pc, #156]	; (80015a4 <Read_BMP280_PressureTemperature+0x334>)
 8001506:	e9c2 3400 	strd	r3, r4, [r2]
		pressureVarP = (((pressureVarP << 31) - pressureVar2) * 3125) / pressureVar1;
 800150a:	4b26      	ldr	r3, [pc, #152]	; (80015a4 <Read_BMP280_PressureTemperature+0x334>)
 800150c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	f04f 0400 	mov.w	r4, #0
 8001518:	07d4      	lsls	r4, r2, #31
 800151a:	ea44 0451 	orr.w	r4, r4, r1, lsr #1
 800151e:	07cb      	lsls	r3, r1, #31
 8001520:	4a1f      	ldr	r2, [pc, #124]	; (80015a0 <Read_BMP280_PressureTemperature+0x330>)
 8001522:	e9d2 1200 	ldrd	r1, r2, [r2]
 8001526:	1a5b      	subs	r3, r3, r1
 8001528:	eb64 0402 	sbc.w	r4, r4, r2
 800152c:	461d      	mov	r5, r3
 800152e:	4626      	mov	r6, r4
 8001530:	46ab      	mov	fp, r5
 8001532:	46b4      	mov	ip, r6
 8001534:	eb1b 030b 	adds.w	r3, fp, fp
 8001538:	eb4c 040c 	adc.w	r4, ip, ip
 800153c:	469b      	mov	fp, r3
 800153e:	46a4      	mov	ip, r4
 8001540:	eb1b 0b05 	adds.w	fp, fp, r5
 8001544:	eb4c 0c06 	adc.w	ip, ip, r6
 8001548:	f04f 0100 	mov.w	r1, #0
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	ea4f 128c 	mov.w	r2, ip, lsl #6
 8001554:	ea42 629b 	orr.w	r2, r2, fp, lsr #26
 8001558:	ea4f 118b 	mov.w	r1, fp, lsl #6
 800155c:	eb1b 0b01 	adds.w	fp, fp, r1
 8001560:	eb4c 0c02 	adc.w	ip, ip, r2
 8001564:	f04f 0100 	mov.w	r1, #0
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8001570:	e01a      	b.n	80015a8 <Read_BMP280_PressureTemperature+0x338>
 8001572:	bf00      	nop
 8001574:	200003e0 	.word	0x200003e0
 8001578:	20001ef8 	.word	0x20001ef8
 800157c:	200003fc 	.word	0x200003fc
 8001580:	20000400 	.word	0x20000400
 8001584:	20000410 	.word	0x20000410
 8001588:	2000040c 	.word	0x2000040c
 800158c:	200003dc 	.word	0x200003dc
 8001590:	20000430 	.word	0x20000430
 8001594:	42c80000 	.word	0x42c80000
 8001598:	200003d8 	.word	0x200003d8
 800159c:	20000438 	.word	0x20000438
 80015a0:	200003f0 	.word	0x200003f0
 80015a4:	20000428 	.word	0x20000428
 80015a8:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 80015ac:	ea4f 018b 	mov.w	r1, fp, lsl #2
 80015b0:	468b      	mov	fp, r1
 80015b2:	4694      	mov	ip, r2
 80015b4:	eb1b 0b05 	adds.w	fp, fp, r5
 80015b8:	eb4c 0c06 	adc.w	ip, ip, r6
 80015bc:	f04f 0100 	mov.w	r1, #0
 80015c0:	f04f 0200 	mov.w	r2, #0
 80015c4:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80015c8:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 80015cc:	ea4f 018b 	mov.w	r1, fp, lsl #2
 80015d0:	468b      	mov	fp, r1
 80015d2:	4694      	mov	ip, r2
 80015d4:	eb1b 0005 	adds.w	r0, fp, r5
 80015d8:	eb4c 0106 	adc.w	r1, ip, r6
 80015dc:	4b78      	ldr	r3, [pc, #480]	; (80017c0 <Read_BMP280_PressureTemperature+0x550>)
 80015de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80015e2:	461a      	mov	r2, r3
 80015e4:	4623      	mov	r3, r4
 80015e6:	f7ff fc3d 	bl	8000e64 <__aeabi_ldivmod>
 80015ea:	4603      	mov	r3, r0
 80015ec:	460c      	mov	r4, r1
 80015ee:	4a75      	ldr	r2, [pc, #468]	; (80017c4 <Read_BMP280_PressureTemperature+0x554>)
 80015f0:	e9c2 3400 	strd	r3, r4, [r2]
		pressureVar1 = (((int64_t)_bmp280_calib.dig_P9) * (pressureVarP >> 13) * (pressureVarP >> 13)) >> 25;
 80015f4:	4b74      	ldr	r3, [pc, #464]	; (80017c8 <Read_BMP280_PressureTemperature+0x558>)
 80015f6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80015fa:	b219      	sxth	r1, r3
 80015fc:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001600:	4b70      	ldr	r3, [pc, #448]	; (80017c4 <Read_BMP280_PressureTemperature+0x554>)
 8001602:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001606:	f04f 0300 	mov.w	r3, #0
 800160a:	f04f 0400 	mov.w	r4, #0
 800160e:	0b6b      	lsrs	r3, r5, #13
 8001610:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001614:	1374      	asrs	r4, r6, #13
 8001616:	fb03 f502 	mul.w	r5, r3, r2
 800161a:	fb01 f004 	mul.w	r0, r1, r4
 800161e:	4428      	add	r0, r5
 8001620:	fba1 1203 	umull	r1, r2, r1, r3
 8001624:	1883      	adds	r3, r0, r2
 8001626:	461a      	mov	r2, r3
 8001628:	4b66      	ldr	r3, [pc, #408]	; (80017c4 <Read_BMP280_PressureTemperature+0x554>)
 800162a:	e9d3 5600 	ldrd	r5, r6, [r3]
 800162e:	f04f 0300 	mov.w	r3, #0
 8001632:	f04f 0400 	mov.w	r4, #0
 8001636:	0b6b      	lsrs	r3, r5, #13
 8001638:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 800163c:	1374      	asrs	r4, r6, #13
 800163e:	fb03 f502 	mul.w	r5, r3, r2
 8001642:	fb01 f004 	mul.w	r0, r1, r4
 8001646:	4428      	add	r0, r5
 8001648:	fba1 1203 	umull	r1, r2, r1, r3
 800164c:	1883      	adds	r3, r0, r2
 800164e:	461a      	mov	r2, r3
 8001650:	f04f 0300 	mov.w	r3, #0
 8001654:	f04f 0400 	mov.w	r4, #0
 8001658:	0e4b      	lsrs	r3, r1, #25
 800165a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800165e:	1654      	asrs	r4, r2, #25
 8001660:	4a57      	ldr	r2, [pc, #348]	; (80017c0 <Read_BMP280_PressureTemperature+0x550>)
 8001662:	e9c2 3400 	strd	r3, r4, [r2]
		pressureVar2 = (((int64_t)_bmp280_calib.dig_P8) * pressureVarP) >> 19;
 8001666:	4b58      	ldr	r3, [pc, #352]	; (80017c8 <Read_BMP280_PressureTemperature+0x558>)
 8001668:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800166c:	b219      	sxth	r1, r3
 800166e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001672:	4b54      	ldr	r3, [pc, #336]	; (80017c4 <Read_BMP280_PressureTemperature+0x554>)
 8001674:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001678:	fb03 f502 	mul.w	r5, r3, r2
 800167c:	fb01 f004 	mul.w	r0, r1, r4
 8001680:	4428      	add	r0, r5
 8001682:	fba1 1203 	umull	r1, r2, r1, r3
 8001686:	1883      	adds	r3, r0, r2
 8001688:	461a      	mov	r2, r3
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	f04f 0400 	mov.w	r4, #0
 8001692:	0ccb      	lsrs	r3, r1, #19
 8001694:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001698:	14d4      	asrs	r4, r2, #19
 800169a:	4a4c      	ldr	r2, [pc, #304]	; (80017cc <Read_BMP280_PressureTemperature+0x55c>)
 800169c:	e9c2 3400 	strd	r3, r4, [r2]

		pressureVarP = ((pressureVarP + pressureVar1 + pressureVar2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
 80016a0:	4b48      	ldr	r3, [pc, #288]	; (80017c4 <Read_BMP280_PressureTemperature+0x554>)
 80016a2:	e9d3 5600 	ldrd	r5, r6, [r3]
 80016a6:	4b46      	ldr	r3, [pc, #280]	; (80017c0 <Read_BMP280_PressureTemperature+0x550>)
 80016a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80016ac:	18e9      	adds	r1, r5, r3
 80016ae:	eb46 0204 	adc.w	r2, r6, r4
 80016b2:	4b46      	ldr	r3, [pc, #280]	; (80017cc <Read_BMP280_PressureTemperature+0x55c>)
 80016b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80016b8:	185d      	adds	r5, r3, r1
 80016ba:	eb44 0602 	adc.w	r6, r4, r2
 80016be:	f04f 0100 	mov.w	r1, #0
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	0a29      	lsrs	r1, r5, #8
 80016c8:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 80016cc:	1232      	asrs	r2, r6, #8
 80016ce:	4b3e      	ldr	r3, [pc, #248]	; (80017c8 <Read_BMP280_PressureTemperature+0x558>)
 80016d0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80016d4:	b21d      	sxth	r5, r3
 80016d6:	ea4f 76e5 	mov.w	r6, r5, asr #31
 80016da:	f04f 0b00 	mov.w	fp, #0
 80016de:	f04f 0c00 	mov.w	ip, #0
 80016e2:	ea4f 1c06 	mov.w	ip, r6, lsl #4
 80016e6:	ea4c 7c15 	orr.w	ip, ip, r5, lsr #28
 80016ea:	ea4f 1b05 	mov.w	fp, r5, lsl #4
 80016ee:	eb1b 0301 	adds.w	r3, fp, r1
 80016f2:	eb4c 0402 	adc.w	r4, ip, r2
 80016f6:	4a33      	ldr	r2, [pc, #204]	; (80017c4 <Read_BMP280_PressureTemperature+0x554>)
 80016f8:	e9c2 3400 	strd	r3, r4, [r2]

		final_pressure = (float)pressureVarP / 256;
 80016fc:	4b31      	ldr	r3, [pc, #196]	; (80017c4 <Read_BMP280_PressureTemperature+0x554>)
 80016fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001702:	4618      	mov	r0, r3
 8001704:	4621      	mov	r1, r4
 8001706:	f7ff fb6f 	bl	8000de8 <__aeabi_l2f>
 800170a:	ee06 0a90 	vmov	s13, r0
 800170e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80017d0 <Read_BMP280_PressureTemperature+0x560>
 8001712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001716:	4b2f      	ldr	r3, [pc, #188]	; (80017d4 <Read_BMP280_PressureTemperature+0x564>)
 8001718:	edc3 7a00 	vstr	s15, [r3]
		final_pressure /= 100;
 800171c:	4b2d      	ldr	r3, [pc, #180]	; (80017d4 <Read_BMP280_PressureTemperature+0x564>)
 800171e:	ed93 7a00 	vldr	s14, [r3]
 8001722:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80017d8 <Read_BMP280_PressureTemperature+0x568>
 8001726:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800172a:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <Read_BMP280_PressureTemperature+0x564>)
 800172c:	edc3 7a00 	vstr	s15, [r3]

		temp_altitude = (44330 * (1.0 - pow(final_pressure / seaLevelhPa, 0.1903)));
 8001730:	4b28      	ldr	r3, [pc, #160]	; (80017d4 <Read_BMP280_PressureTemperature+0x564>)
 8001732:	ed93 7a00 	vldr	s14, [r3]
 8001736:	4b29      	ldr	r3, [pc, #164]	; (80017dc <Read_BMP280_PressureTemperature+0x56c>)
 8001738:	edd3 7a00 	vldr	s15, [r3]
 800173c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001740:	ee16 0a90 	vmov	r0, s13
 8001744:	f7fe ff00 	bl	8000548 <__aeabi_f2d>
 8001748:	4603      	mov	r3, r0
 800174a:	460c      	mov	r4, r1
 800174c:	ed9f 1b18 	vldr	d1, [pc, #96]	; 80017b0 <Read_BMP280_PressureTemperature+0x540>
 8001750:	ec44 3b10 	vmov	d0, r3, r4
 8001754:	f010 fd58 	bl	8012208 <pow>
 8001758:	ec54 3b10 	vmov	r3, r4, d0
 800175c:	461a      	mov	r2, r3
 800175e:	4623      	mov	r3, r4
 8001760:	f04f 0000 	mov.w	r0, #0
 8001764:	491e      	ldr	r1, [pc, #120]	; (80017e0 <Read_BMP280_PressureTemperature+0x570>)
 8001766:	f7fe fd8f 	bl	8000288 <__aeabi_dsub>
 800176a:	4603      	mov	r3, r0
 800176c:	460c      	mov	r4, r1
 800176e:	4618      	mov	r0, r3
 8001770:	4621      	mov	r1, r4
 8001772:	a311      	add	r3, pc, #68	; (adr r3, 80017b8 <Read_BMP280_PressureTemperature+0x548>)
 8001774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001778:	f7fe ff3e 	bl	80005f8 <__aeabi_dmul>
 800177c:	4603      	mov	r3, r0
 800177e:	460c      	mov	r4, r1
 8001780:	4618      	mov	r0, r3
 8001782:	4621      	mov	r1, r4
 8001784:	f7ff fa10 	bl	8000ba8 <__aeabi_d2f>
 8001788:	4602      	mov	r2, r0
 800178a:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <Read_BMP280_PressureTemperature+0x574>)
 800178c:	601a      	str	r2, [r3, #0]
		read_bmp_altitude = temp_altitude - altitude_calibration;
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <Read_BMP280_PressureTemperature+0x574>)
 8001790:	ed93 7a00 	vldr	s14, [r3]
 8001794:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <Read_BMP280_PressureTemperature+0x578>)
 8001796:	edd3 7a00 	vldr	s15, [r3]
 800179a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800179e:	4b13      	ldr	r3, [pc, #76]	; (80017ec <Read_BMP280_PressureTemperature+0x57c>)
 80017a0:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80017ac:	f3af 8000 	nop.w
 80017b0:	1a36e2eb 	.word	0x1a36e2eb
 80017b4:	3fc85bc0 	.word	0x3fc85bc0
 80017b8:	00000000 	.word	0x00000000
 80017bc:	40e5a540 	.word	0x40e5a540
 80017c0:	20000438 	.word	0x20000438
 80017c4:	20000428 	.word	0x20000428
 80017c8:	20000410 	.word	0x20000410
 80017cc:	200003f0 	.word	0x200003f0
 80017d0:	43800000 	.word	0x43800000
 80017d4:	20000408 	.word	0x20000408
 80017d8:	42c80000 	.word	0x42c80000
 80017dc:	20000000 	.word	0x20000000
 80017e0:	3ff00000 	.word	0x3ff00000
 80017e4:	20000404 	.word	0x20000404
 80017e8:	200003e8 	.word	0x200003e8
 80017ec:	200003f8 	.word	0x200003f8

080017f0 <Calibrate_BMP280>:

void Calibrate_BMP280()
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
	altitude_calibration = 0;
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <Calibrate_BMP280+0x5c>)
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 30; i++)
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	e012      	b.n	800182a <Calibrate_BMP280+0x3a>
	{
		Read_BMP280_PressureTemperature();
 8001804:	f7ff fd34 	bl	8001270 <Read_BMP280_PressureTemperature>
		altitude_calibration += temp_altitude;
 8001808:	4b10      	ldr	r3, [pc, #64]	; (800184c <Calibrate_BMP280+0x5c>)
 800180a:	ed93 7a00 	vldr	s14, [r3]
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <Calibrate_BMP280+0x60>)
 8001810:	edd3 7a00 	vldr	s15, [r3]
 8001814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <Calibrate_BMP280+0x5c>)
 800181a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(50);
 800181e:	2032      	movs	r0, #50	; 0x32
 8001820:	f006 fa38 	bl	8007c94 <HAL_Delay>
	for(int i = 0; i < 30; i++)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3301      	adds	r3, #1
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b1d      	cmp	r3, #29
 800182e:	dde9      	ble.n	8001804 <Calibrate_BMP280+0x14>
	}

	altitude_calibration /= 30.00;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <Calibrate_BMP280+0x5c>)
 8001832:	ed93 7a00 	vldr	s14, [r3]
 8001836:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 800183a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800183e:	4b03      	ldr	r3, [pc, #12]	; (800184c <Calibrate_BMP280+0x5c>)
 8001840:	edc3 7a00 	vstr	s15, [r3]
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200003e8 	.word	0x200003e8
 8001850:	20000404 	.word	0x20000404

08001854 <Setup_Compass>:
float y_scale, z_scale;

float heading_difference_return = 0;

void Setup_Compass()
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af02      	add	r7, sp, #8
	uint8_t setup_data[4];
	setup_data[0] = 0x00;
 800185a:	2300      	movs	r3, #0
 800185c:	713b      	strb	r3, [r7, #4]
	setup_data[1] = 0x78;
 800185e:	2378      	movs	r3, #120	; 0x78
 8001860:	717b      	strb	r3, [r7, #5]
	setup_data[2] = 0x20;
 8001862:	2320      	movs	r3, #32
 8001864:	71bb      	strb	r3, [r7, #6]
	setup_data[3] = 0x00;
 8001866:	2300      	movs	r3, #0
 8001868:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Master_Transmit(&hi2c1, COMPASS_ADDR, setup_data, 4, HAL_MAX_DELAY);
 800186a:	233c      	movs	r3, #60	; 0x3c
 800186c:	b299      	uxth	r1, r3
 800186e:	1d3a      	adds	r2, r7, #4
 8001870:	f04f 33ff 	mov.w	r3, #4294967295
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	2304      	movs	r3, #4
 8001878:	4808      	ldr	r0, [pc, #32]	; (800189c <Setup_Compass+0x48>)
 800187a:	f007 f975 	bl	8008b68 <HAL_I2C_Master_Transmit>
	Calculate_Compass_Calibration();
 800187e:	f000 fbbf 	bl	8002000 <Calculate_Compass_Calibration>

	HAL_Delay(5);
 8001882:	2005      	movs	r0, #5
 8001884:	f006 fa06 	bl	8007c94 <HAL_Delay>

	Read_Compass();
 8001888:	f000 f80e 	bl	80018a8 <Read_Compass>

	gyro_z_angle = compass_heading;
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <Setup_Compass+0x4c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <Setup_Compass+0x50>)
 8001892:	6013      	str	r3, [r2, #0]
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20001ef8 	.word	0x20001ef8
 80018a0:	20000298 	.word	0x20000298
 80018a4:	20002104 	.word	0x20002104

080018a8 <Read_Compass>:

float x_angle_offset = 1.00;//2.00
float y_angle_offset = 2.00;//3.00

void Read_Compass()
{
 80018a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018ac:	b084      	sub	sp, #16
 80018ae:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, COMPASS_ADDR, 0x03, I2C_MEMADD_SIZE_8BIT,  (uint8_t *)&raw_compass_data, 6, HAL_MAX_DELAY);
 80018b0:	233c      	movs	r3, #60	; 0x3c
 80018b2:	b299      	uxth	r1, r3
 80018b4:	f04f 33ff 	mov.w	r3, #4294967295
 80018b8:	9302      	str	r3, [sp, #8]
 80018ba:	2306      	movs	r3, #6
 80018bc:	9301      	str	r3, [sp, #4]
 80018be:	4bd6      	ldr	r3, [pc, #856]	; (8001c18 <Read_Compass+0x370>)
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2301      	movs	r3, #1
 80018c4:	2203      	movs	r2, #3
 80018c6:	48d5      	ldr	r0, [pc, #852]	; (8001c1c <Read_Compass+0x374>)
 80018c8:	f007 fa4c 	bl	8008d64 <HAL_I2C_Mem_Read>

	compassY = (int16_t)((raw_compass_data[0] << 8) | raw_compass_data[1]);
 80018cc:	4bd2      	ldr	r3, [pc, #840]	; (8001c18 <Read_Compass+0x370>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	021b      	lsls	r3, r3, #8
 80018d2:	b21a      	sxth	r2, r3
 80018d4:	4bd0      	ldr	r3, [pc, #832]	; (8001c18 <Read_Compass+0x370>)
 80018d6:	785b      	ldrb	r3, [r3, #1]
 80018d8:	b21b      	sxth	r3, r3
 80018da:	4313      	orrs	r3, r2
 80018dc:	b21a      	sxth	r2, r3
 80018de:	4bd0      	ldr	r3, [pc, #832]	; (8001c20 <Read_Compass+0x378>)
 80018e0:	801a      	strh	r2, [r3, #0]
	compassZ = (int16_t)((raw_compass_data[2] << 8) | raw_compass_data[3]);
 80018e2:	4bcd      	ldr	r3, [pc, #820]	; (8001c18 <Read_Compass+0x370>)
 80018e4:	789b      	ldrb	r3, [r3, #2]
 80018e6:	021b      	lsls	r3, r3, #8
 80018e8:	b21a      	sxth	r2, r3
 80018ea:	4bcb      	ldr	r3, [pc, #812]	; (8001c18 <Read_Compass+0x370>)
 80018ec:	78db      	ldrb	r3, [r3, #3]
 80018ee:	b21b      	sxth	r3, r3
 80018f0:	4313      	orrs	r3, r2
 80018f2:	b21a      	sxth	r2, r3
 80018f4:	4bcb      	ldr	r3, [pc, #812]	; (8001c24 <Read_Compass+0x37c>)
 80018f6:	801a      	strh	r2, [r3, #0]
	compassX = (int16_t)((raw_compass_data[4] << 8) | raw_compass_data[5]);
 80018f8:	4bc7      	ldr	r3, [pc, #796]	; (8001c18 <Read_Compass+0x370>)
 80018fa:	791b      	ldrb	r3, [r3, #4]
 80018fc:	021b      	lsls	r3, r3, #8
 80018fe:	b21a      	sxth	r2, r3
 8001900:	4bc5      	ldr	r3, [pc, #788]	; (8001c18 <Read_Compass+0x370>)
 8001902:	795b      	ldrb	r3, [r3, #5]
 8001904:	b21b      	sxth	r3, r3
 8001906:	4313      	orrs	r3, r2
 8001908:	b21a      	sxth	r2, r3
 800190a:	4bc7      	ldr	r3, [pc, #796]	; (8001c28 <Read_Compass+0x380>)
 800190c:	801a      	strh	r2, [r3, #0]

	compassY += compass_offset_y;
 800190e:	4bc4      	ldr	r3, [pc, #784]	; (8001c20 <Read_Compass+0x378>)
 8001910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001914:	ee07 3a90 	vmov	s15, r3
 8001918:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800191c:	4bc3      	ldr	r3, [pc, #780]	; (8001c2c <Read_Compass+0x384>)
 800191e:	edd3 7a00 	vldr	s15, [r3]
 8001922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001926:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800192a:	ee17 3a90 	vmov	r3, s15
 800192e:	b21a      	sxth	r2, r3
 8001930:	4bbb      	ldr	r3, [pc, #748]	; (8001c20 <Read_Compass+0x378>)
 8001932:	801a      	strh	r2, [r3, #0]
	compassY *= y_scale;
 8001934:	4bba      	ldr	r3, [pc, #744]	; (8001c20 <Read_Compass+0x378>)
 8001936:	f9b3 3000 	ldrsh.w	r3, [r3]
 800193a:	ee07 3a90 	vmov	s15, r3
 800193e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001942:	4bbb      	ldr	r3, [pc, #748]	; (8001c30 <Read_Compass+0x388>)
 8001944:	edd3 7a00 	vldr	s15, [r3]
 8001948:	ee67 7a27 	vmul.f32	s15, s14, s15
 800194c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001950:	ee17 3a90 	vmov	r3, s15
 8001954:	b21a      	sxth	r2, r3
 8001956:	4bb2      	ldr	r3, [pc, #712]	; (8001c20 <Read_Compass+0x378>)
 8001958:	801a      	strh	r2, [r3, #0]

	compassZ += compass_offset_z;
 800195a:	4bb2      	ldr	r3, [pc, #712]	; (8001c24 <Read_Compass+0x37c>)
 800195c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001960:	ee07 3a90 	vmov	s15, r3
 8001964:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001968:	4bb2      	ldr	r3, [pc, #712]	; (8001c34 <Read_Compass+0x38c>)
 800196a:	edd3 7a00 	vldr	s15, [r3]
 800196e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001972:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001976:	ee17 3a90 	vmov	r3, s15
 800197a:	b21a      	sxth	r2, r3
 800197c:	4ba9      	ldr	r3, [pc, #676]	; (8001c24 <Read_Compass+0x37c>)
 800197e:	801a      	strh	r2, [r3, #0]
	compassZ *= z_scale;
 8001980:	4ba8      	ldr	r3, [pc, #672]	; (8001c24 <Read_Compass+0x37c>)
 8001982:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001986:	ee07 3a90 	vmov	s15, r3
 800198a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800198e:	4baa      	ldr	r3, [pc, #680]	; (8001c38 <Read_Compass+0x390>)
 8001990:	edd3 7a00 	vldr	s15, [r3]
 8001994:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001998:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800199c:	ee17 3a90 	vmov	r3, s15
 80019a0:	b21a      	sxth	r2, r3
 80019a2:	4ba0      	ldr	r3, [pc, #640]	; (8001c24 <Read_Compass+0x37c>)
 80019a4:	801a      	strh	r2, [r3, #0]

	compassX += compass_offset_x;
 80019a6:	4ba0      	ldr	r3, [pc, #640]	; (8001c28 <Read_Compass+0x380>)
 80019a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019b4:	4ba1      	ldr	r3, [pc, #644]	; (8001c3c <Read_Compass+0x394>)
 80019b6:	edd3 7a00 	vldr	s15, [r3]
 80019ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019c2:	ee17 3a90 	vmov	r3, s15
 80019c6:	b21a      	sxth	r2, r3
 80019c8:	4b97      	ldr	r3, [pc, #604]	; (8001c28 <Read_Compass+0x380>)
 80019ca:	801a      	strh	r2, [r3, #0]

	comX = ((float)compassX * cos((gyro_y_angle + y_angle_offset) * 0.0174533)) + ((float)compassY * sin((gyro_x_angle + x_angle_offset) * 0.0174533) * sin((gyro_y_angle + y_angle_offset) * 0.0174533)) - ((float)compassZ * cos((gyro_x_angle + x_angle_offset) * 0.0174533) * sin((gyro_y_angle + y_angle_offset) * 0.0174533));
 80019cc:	4b96      	ldr	r3, [pc, #600]	; (8001c28 <Read_Compass+0x380>)
 80019ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019d2:	ee07 3a90 	vmov	s15, r3
 80019d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019da:	ee17 0a90 	vmov	r0, s15
 80019de:	f7fe fdb3 	bl	8000548 <__aeabi_f2d>
 80019e2:	4604      	mov	r4, r0
 80019e4:	460d      	mov	r5, r1
 80019e6:	4b96      	ldr	r3, [pc, #600]	; (8001c40 <Read_Compass+0x398>)
 80019e8:	ed93 7a00 	vldr	s14, [r3]
 80019ec:	4b95      	ldr	r3, [pc, #596]	; (8001c44 <Read_Compass+0x39c>)
 80019ee:	edd3 7a00 	vldr	s15, [r3]
 80019f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f6:	ee17 0a90 	vmov	r0, s15
 80019fa:	f7fe fda5 	bl	8000548 <__aeabi_f2d>
 80019fe:	a384      	add	r3, pc, #528	; (adr r3, 8001c10 <Read_Compass+0x368>)
 8001a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a04:	f7fe fdf8 	bl	80005f8 <__aeabi_dmul>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	ec43 2b17 	vmov	d7, r2, r3
 8001a10:	eeb0 0a47 	vmov.f32	s0, s14
 8001a14:	eef0 0a67 	vmov.f32	s1, s15
 8001a18:	f010 fa12 	bl	8011e40 <cos>
 8001a1c:	ec53 2b10 	vmov	r2, r3, d0
 8001a20:	4620      	mov	r0, r4
 8001a22:	4629      	mov	r1, r5
 8001a24:	f7fe fde8 	bl	80005f8 <__aeabi_dmul>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	460c      	mov	r4, r1
 8001a2c:	4625      	mov	r5, r4
 8001a2e:	461c      	mov	r4, r3
 8001a30:	4b7b      	ldr	r3, [pc, #492]	; (8001c20 <Read_Compass+0x378>)
 8001a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a36:	ee07 3a90 	vmov	s15, r3
 8001a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a3e:	ee17 0a90 	vmov	r0, s15
 8001a42:	f7fe fd81 	bl	8000548 <__aeabi_f2d>
 8001a46:	4680      	mov	r8, r0
 8001a48:	4689      	mov	r9, r1
 8001a4a:	4b7f      	ldr	r3, [pc, #508]	; (8001c48 <Read_Compass+0x3a0>)
 8001a4c:	ed93 7a00 	vldr	s14, [r3]
 8001a50:	4b7e      	ldr	r3, [pc, #504]	; (8001c4c <Read_Compass+0x3a4>)
 8001a52:	edd3 7a00 	vldr	s15, [r3]
 8001a56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a5a:	ee17 0a90 	vmov	r0, s15
 8001a5e:	f7fe fd73 	bl	8000548 <__aeabi_f2d>
 8001a62:	a36b      	add	r3, pc, #428	; (adr r3, 8001c10 <Read_Compass+0x368>)
 8001a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a68:	f7fe fdc6 	bl	80005f8 <__aeabi_dmul>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	ec43 2b17 	vmov	d7, r2, r3
 8001a74:	eeb0 0a47 	vmov.f32	s0, s14
 8001a78:	eef0 0a67 	vmov.f32	s1, s15
 8001a7c:	f010 faf4 	bl	8012068 <sin>
 8001a80:	ec53 2b10 	vmov	r2, r3, d0
 8001a84:	4640      	mov	r0, r8
 8001a86:	4649      	mov	r1, r9
 8001a88:	f7fe fdb6 	bl	80005f8 <__aeabi_dmul>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4690      	mov	r8, r2
 8001a92:	4699      	mov	r9, r3
 8001a94:	4b6a      	ldr	r3, [pc, #424]	; (8001c40 <Read_Compass+0x398>)
 8001a96:	ed93 7a00 	vldr	s14, [r3]
 8001a9a:	4b6a      	ldr	r3, [pc, #424]	; (8001c44 <Read_Compass+0x39c>)
 8001a9c:	edd3 7a00 	vldr	s15, [r3]
 8001aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa4:	ee17 0a90 	vmov	r0, s15
 8001aa8:	f7fe fd4e 	bl	8000548 <__aeabi_f2d>
 8001aac:	a358      	add	r3, pc, #352	; (adr r3, 8001c10 <Read_Compass+0x368>)
 8001aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab2:	f7fe fda1 	bl	80005f8 <__aeabi_dmul>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	ec43 2b17 	vmov	d7, r2, r3
 8001abe:	eeb0 0a47 	vmov.f32	s0, s14
 8001ac2:	eef0 0a67 	vmov.f32	s1, s15
 8001ac6:	f010 facf 	bl	8012068 <sin>
 8001aca:	ec53 2b10 	vmov	r2, r3, d0
 8001ace:	4640      	mov	r0, r8
 8001ad0:	4649      	mov	r1, r9
 8001ad2:	f7fe fd91 	bl	80005f8 <__aeabi_dmul>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4620      	mov	r0, r4
 8001adc:	4629      	mov	r1, r5
 8001ade:	f7fe fbd5 	bl	800028c <__adddf3>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	460c      	mov	r4, r1
 8001ae6:	4625      	mov	r5, r4
 8001ae8:	461c      	mov	r4, r3
 8001aea:	4b4e      	ldr	r3, [pc, #312]	; (8001c24 <Read_Compass+0x37c>)
 8001aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af0:	ee07 3a90 	vmov	s15, r3
 8001af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001af8:	ee17 0a90 	vmov	r0, s15
 8001afc:	f7fe fd24 	bl	8000548 <__aeabi_f2d>
 8001b00:	4680      	mov	r8, r0
 8001b02:	4689      	mov	r9, r1
 8001b04:	4b50      	ldr	r3, [pc, #320]	; (8001c48 <Read_Compass+0x3a0>)
 8001b06:	ed93 7a00 	vldr	s14, [r3]
 8001b0a:	4b50      	ldr	r3, [pc, #320]	; (8001c4c <Read_Compass+0x3a4>)
 8001b0c:	edd3 7a00 	vldr	s15, [r3]
 8001b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b14:	ee17 0a90 	vmov	r0, s15
 8001b18:	f7fe fd16 	bl	8000548 <__aeabi_f2d>
 8001b1c:	a33c      	add	r3, pc, #240	; (adr r3, 8001c10 <Read_Compass+0x368>)
 8001b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b22:	f7fe fd69 	bl	80005f8 <__aeabi_dmul>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	ec43 2b17 	vmov	d7, r2, r3
 8001b2e:	eeb0 0a47 	vmov.f32	s0, s14
 8001b32:	eef0 0a67 	vmov.f32	s1, s15
 8001b36:	f010 f983 	bl	8011e40 <cos>
 8001b3a:	ec53 2b10 	vmov	r2, r3, d0
 8001b3e:	4640      	mov	r0, r8
 8001b40:	4649      	mov	r1, r9
 8001b42:	f7fe fd59 	bl	80005f8 <__aeabi_dmul>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4690      	mov	r8, r2
 8001b4c:	4699      	mov	r9, r3
 8001b4e:	4b3c      	ldr	r3, [pc, #240]	; (8001c40 <Read_Compass+0x398>)
 8001b50:	ed93 7a00 	vldr	s14, [r3]
 8001b54:	4b3b      	ldr	r3, [pc, #236]	; (8001c44 <Read_Compass+0x39c>)
 8001b56:	edd3 7a00 	vldr	s15, [r3]
 8001b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b5e:	ee17 0a90 	vmov	r0, s15
 8001b62:	f7fe fcf1 	bl	8000548 <__aeabi_f2d>
 8001b66:	a32a      	add	r3, pc, #168	; (adr r3, 8001c10 <Read_Compass+0x368>)
 8001b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6c:	f7fe fd44 	bl	80005f8 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	ec43 2b17 	vmov	d7, r2, r3
 8001b78:	eeb0 0a47 	vmov.f32	s0, s14
 8001b7c:	eef0 0a67 	vmov.f32	s1, s15
 8001b80:	f010 fa72 	bl	8012068 <sin>
 8001b84:	ec53 2b10 	vmov	r2, r3, d0
 8001b88:	4640      	mov	r0, r8
 8001b8a:	4649      	mov	r1, r9
 8001b8c:	f7fe fd34 	bl	80005f8 <__aeabi_dmul>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4620      	mov	r0, r4
 8001b96:	4629      	mov	r1, r5
 8001b98:	f7fe fb76 	bl	8000288 <__aeabi_dsub>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	460c      	mov	r4, r1
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	f7ff f800 	bl	8000ba8 <__aeabi_d2f>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	4b29      	ldr	r3, [pc, #164]	; (8001c50 <Read_Compass+0x3a8>)
 8001bac:	601a      	str	r2, [r3, #0]

	comY = ((float)compassY * cos((gyro_x_angle + x_angle_offset) * 0.0174533)) + ((float)compassZ * sin((gyro_x_angle + x_angle_offset) * 0.0174533));
 8001bae:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <Read_Compass+0x378>)
 8001bb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bb4:	ee07 3a90 	vmov	s15, r3
 8001bb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bbc:	ee17 0a90 	vmov	r0, s15
 8001bc0:	f7fe fcc2 	bl	8000548 <__aeabi_f2d>
 8001bc4:	4604      	mov	r4, r0
 8001bc6:	460d      	mov	r5, r1
 8001bc8:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <Read_Compass+0x3a0>)
 8001bca:	ed93 7a00 	vldr	s14, [r3]
 8001bce:	4b1f      	ldr	r3, [pc, #124]	; (8001c4c <Read_Compass+0x3a4>)
 8001bd0:	edd3 7a00 	vldr	s15, [r3]
 8001bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd8:	ee17 0a90 	vmov	r0, s15
 8001bdc:	f7fe fcb4 	bl	8000548 <__aeabi_f2d>
 8001be0:	a30b      	add	r3, pc, #44	; (adr r3, 8001c10 <Read_Compass+0x368>)
 8001be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be6:	f7fe fd07 	bl	80005f8 <__aeabi_dmul>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	ec43 2b17 	vmov	d7, r2, r3
 8001bf2:	eeb0 0a47 	vmov.f32	s0, s14
 8001bf6:	eef0 0a67 	vmov.f32	s1, s15
 8001bfa:	f010 f921 	bl	8011e40 <cos>
 8001bfe:	ec53 2b10 	vmov	r2, r3, d0
 8001c02:	4620      	mov	r0, r4
 8001c04:	4629      	mov	r1, r5
 8001c06:	f7fe fcf7 	bl	80005f8 <__aeabi_dmul>
 8001c0a:	e023      	b.n	8001c54 <Read_Compass+0x3ac>
 8001c0c:	f3af 8000 	nop.w
 8001c10:	22d4405f 	.word	0x22d4405f
 8001c14:	3f91df47 	.word	0x3f91df47
 8001c18:	20000440 	.word	0x20000440
 8001c1c:	20001ef8 	.word	0x20001ef8
 8001c20:	20000450 	.word	0x20000450
 8001c24:	2000047a 	.word	0x2000047a
 8001c28:	2000047c 	.word	0x2000047c
 8001c2c:	200002a8 	.word	0x200002a8
 8001c30:	2000044c 	.word	0x2000044c
 8001c34:	200002ac 	.word	0x200002ac
 8001c38:	20000448 	.word	0x20000448
 8001c3c:	200002a4 	.word	0x200002a4
 8001c40:	200020dc 	.word	0x200020dc
 8001c44:	20000008 	.word	0x20000008
 8001c48:	200020d0 	.word	0x200020d0
 8001c4c:	20000004 	.word	0x20000004
 8001c50:	2000029c 	.word	0x2000029c
 8001c54:	4603      	mov	r3, r0
 8001c56:	460c      	mov	r4, r1
 8001c58:	4625      	mov	r5, r4
 8001c5a:	461c      	mov	r4, r3
 8001c5c:	4b68      	ldr	r3, [pc, #416]	; (8001e00 <Read_Compass+0x558>)
 8001c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c62:	ee07 3a90 	vmov	s15, r3
 8001c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c6a:	ee17 0a90 	vmov	r0, s15
 8001c6e:	f7fe fc6b 	bl	8000548 <__aeabi_f2d>
 8001c72:	4680      	mov	r8, r0
 8001c74:	4689      	mov	r9, r1
 8001c76:	4b63      	ldr	r3, [pc, #396]	; (8001e04 <Read_Compass+0x55c>)
 8001c78:	ed93 7a00 	vldr	s14, [r3]
 8001c7c:	4b62      	ldr	r3, [pc, #392]	; (8001e08 <Read_Compass+0x560>)
 8001c7e:	edd3 7a00 	vldr	s15, [r3]
 8001c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c86:	ee17 0a90 	vmov	r0, s15
 8001c8a:	f7fe fc5d 	bl	8000548 <__aeabi_f2d>
 8001c8e:	a358      	add	r3, pc, #352	; (adr r3, 8001df0 <Read_Compass+0x548>)
 8001c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c94:	f7fe fcb0 	bl	80005f8 <__aeabi_dmul>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	ec43 2b17 	vmov	d7, r2, r3
 8001ca0:	eeb0 0a47 	vmov.f32	s0, s14
 8001ca4:	eef0 0a67 	vmov.f32	s1, s15
 8001ca8:	f010 f9de 	bl	8012068 <sin>
 8001cac:	ec53 2b10 	vmov	r2, r3, d0
 8001cb0:	4640      	mov	r0, r8
 8001cb2:	4649      	mov	r1, r9
 8001cb4:	f7fe fca0 	bl	80005f8 <__aeabi_dmul>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	4629      	mov	r1, r5
 8001cc0:	f7fe fae4 	bl	800028c <__adddf3>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	460c      	mov	r4, r1
 8001cc8:	4618      	mov	r0, r3
 8001cca:	4621      	mov	r1, r4
 8001ccc:	f7fe ff6c 	bl	8000ba8 <__aeabi_d2f>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	4b4e      	ldr	r3, [pc, #312]	; (8001e0c <Read_Compass+0x564>)
 8001cd4:	601a      	str	r2, [r3, #0]

	if (comY < 0)
 8001cd6:	4b4d      	ldr	r3, [pc, #308]	; (8001e0c <Read_Compass+0x564>)
 8001cd8:	edd3 7a00 	vldr	s15, [r3]
 8001cdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce4:	d531      	bpl.n	8001d4a <Read_Compass+0x4a2>
		compass_heading = 180 + (180 + ((atan2f((float)comY, (float)comX)) * 57.29577));
 8001ce6:	4b49      	ldr	r3, [pc, #292]	; (8001e0c <Read_Compass+0x564>)
 8001ce8:	edd3 7a00 	vldr	s15, [r3]
 8001cec:	4b48      	ldr	r3, [pc, #288]	; (8001e10 <Read_Compass+0x568>)
 8001cee:	ed93 7a00 	vldr	s14, [r3]
 8001cf2:	eef0 0a47 	vmov.f32	s1, s14
 8001cf6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cfa:	f010 fc4f 	bl	801259c <atan2f>
 8001cfe:	ee10 3a10 	vmov	r3, s0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fc20 	bl	8000548 <__aeabi_f2d>
 8001d08:	a33b      	add	r3, pc, #236	; (adr r3, 8001df8 <Read_Compass+0x550>)
 8001d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0e:	f7fe fc73 	bl	80005f8 <__aeabi_dmul>
 8001d12:	4603      	mov	r3, r0
 8001d14:	460c      	mov	r4, r1
 8001d16:	4618      	mov	r0, r3
 8001d18:	4621      	mov	r1, r4
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	4b3d      	ldr	r3, [pc, #244]	; (8001e14 <Read_Compass+0x56c>)
 8001d20:	f7fe fab4 	bl	800028c <__adddf3>
 8001d24:	4603      	mov	r3, r0
 8001d26:	460c      	mov	r4, r1
 8001d28:	4618      	mov	r0, r3
 8001d2a:	4621      	mov	r1, r4
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	4b38      	ldr	r3, [pc, #224]	; (8001e14 <Read_Compass+0x56c>)
 8001d32:	f7fe faab 	bl	800028c <__adddf3>
 8001d36:	4603      	mov	r3, r0
 8001d38:	460c      	mov	r4, r1
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	4621      	mov	r1, r4
 8001d3e:	f7fe ff33 	bl	8000ba8 <__aeabi_d2f>
 8001d42:	4602      	mov	r2, r0
 8001d44:	4b34      	ldr	r3, [pc, #208]	; (8001e18 <Read_Compass+0x570>)
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	e01e      	b.n	8001d88 <Read_Compass+0x4e0>
	else
		compass_heading = atan2f((float)comY, (float)comX) * 57.29577;
 8001d4a:	4b30      	ldr	r3, [pc, #192]	; (8001e0c <Read_Compass+0x564>)
 8001d4c:	edd3 7a00 	vldr	s15, [r3]
 8001d50:	4b2f      	ldr	r3, [pc, #188]	; (8001e10 <Read_Compass+0x568>)
 8001d52:	ed93 7a00 	vldr	s14, [r3]
 8001d56:	eef0 0a47 	vmov.f32	s1, s14
 8001d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d5e:	f010 fc1d 	bl	801259c <atan2f>
 8001d62:	ee10 3a10 	vmov	r3, s0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fbee 	bl	8000548 <__aeabi_f2d>
 8001d6c:	a322      	add	r3, pc, #136	; (adr r3, 8001df8 <Read_Compass+0x550>)
 8001d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d72:	f7fe fc41 	bl	80005f8 <__aeabi_dmul>
 8001d76:	4603      	mov	r3, r0
 8001d78:	460c      	mov	r4, r1
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	4621      	mov	r1, r4
 8001d7e:	f7fe ff13 	bl	8000ba8 <__aeabi_d2f>
 8001d82:	4602      	mov	r2, r0
 8001d84:	4b24      	ldr	r3, [pc, #144]	; (8001e18 <Read_Compass+0x570>)
 8001d86:	601a      	str	r2, [r3, #0]

	compass_heading = -compass_heading;
 8001d88:	4b23      	ldr	r3, [pc, #140]	; (8001e18 <Read_Compass+0x570>)
 8001d8a:	edd3 7a00 	vldr	s15, [r3]
 8001d8e:	eef1 7a67 	vneg.f32	s15, s15
 8001d92:	4b21      	ldr	r3, [pc, #132]	; (8001e18 <Read_Compass+0x570>)
 8001d94:	edc3 7a00 	vstr	s15, [r3]
	//compass_heading -= 5;

	if (compass_heading < 0)
 8001d98:	4b1f      	ldr	r3, [pc, #124]	; (8001e18 <Read_Compass+0x570>)
 8001d9a:	edd3 7a00 	vldr	s15, [r3]
 8001d9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da6:	d50a      	bpl.n	8001dbe <Read_Compass+0x516>
		compass_heading += 360;
 8001da8:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <Read_Compass+0x570>)
 8001daa:	edd3 7a00 	vldr	s15, [r3]
 8001dae:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001e1c <Read_Compass+0x574>
 8001db2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001db6:	4b18      	ldr	r3, [pc, #96]	; (8001e18 <Read_Compass+0x570>)
 8001db8:	edc3 7a00 	vstr	s15, [r3]
	else if (compass_heading >= 360)
		compass_heading -= 360;
}
 8001dbc:	e014      	b.n	8001de8 <Read_Compass+0x540>
	else if (compass_heading >= 360)
 8001dbe:	4b16      	ldr	r3, [pc, #88]	; (8001e18 <Read_Compass+0x570>)
 8001dc0:	edd3 7a00 	vldr	s15, [r3]
 8001dc4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001e1c <Read_Compass+0x574>
 8001dc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd0:	da00      	bge.n	8001dd4 <Read_Compass+0x52c>
}
 8001dd2:	e009      	b.n	8001de8 <Read_Compass+0x540>
		compass_heading -= 360;
 8001dd4:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <Read_Compass+0x570>)
 8001dd6:	edd3 7a00 	vldr	s15, [r3]
 8001dda:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001e1c <Read_Compass+0x574>
 8001dde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001de2:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <Read_Compass+0x570>)
 8001de4:	edc3 7a00 	vstr	s15, [r3]
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001df0:	22d4405f 	.word	0x22d4405f
 8001df4:	3f91df47 	.word	0x3f91df47
 8001df8:	ca9691a7 	.word	0xca9691a7
 8001dfc:	404ca5db 	.word	0x404ca5db
 8001e00:	2000047a 	.word	0x2000047a
 8001e04:	200020d0 	.word	0x200020d0
 8001e08:	20000004 	.word	0x20000004
 8001e0c:	200002a0 	.word	0x200002a0
 8001e10:	2000029c 	.word	0x2000029c
 8001e14:	40668000 	.word	0x40668000
 8001e18:	20000298 	.word	0x20000298
 8001e1c:	43b40000 	.word	0x43b40000

08001e20 <Calibrate_Compass>:

void Calibrate_Compass()
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af04      	add	r7, sp, #16
	compass_x_min = 0;
 8001e26:	4b67      	ldr	r3, [pc, #412]	; (8001fc4 <Calibrate_Compass+0x1a4>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	801a      	strh	r2, [r3, #0]
	compass_x_max = 0;
 8001e2c:	4b66      	ldr	r3, [pc, #408]	; (8001fc8 <Calibrate_Compass+0x1a8>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	801a      	strh	r2, [r3, #0]
	compass_y_min = 0;
 8001e32:	4b66      	ldr	r3, [pc, #408]	; (8001fcc <Calibrate_Compass+0x1ac>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	801a      	strh	r2, [r3, #0]
	compass_y_max = 0;
 8001e38:	4b65      	ldr	r3, [pc, #404]	; (8001fd0 <Calibrate_Compass+0x1b0>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	801a      	strh	r2, [r3, #0]
	compass_z_min = 0;
 8001e3e:	4b65      	ldr	r3, [pc, #404]	; (8001fd4 <Calibrate_Compass+0x1b4>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	801a      	strh	r2, [r3, #0]
	compass_z_max = 0;
 8001e44:	4b64      	ldr	r3, [pc, #400]	; (8001fd8 <Calibrate_Compass+0x1b8>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	801a      	strh	r2, [r3, #0]

	calibrate_compass_timer = GetMillis();
 8001e4a:	f003 fd77 	bl	800593c <GetMillis>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	4b62      	ldr	r3, [pc, #392]	; (8001fdc <Calibrate_Compass+0x1bc>)
 8001e52:	601a      	str	r2, [r3, #0]

	while(GetMillisDifference(&calibrate_compass_timer) < 10000)
 8001e54:	e082      	b.n	8001f5c <Calibrate_Compass+0x13c>
	{
		HAL_I2C_Mem_Read(&hi2c1, COMPASS_ADDR, 0x03, I2C_MEMADD_SIZE_8BIT,  (uint8_t *)&raw_compass_data, 6, HAL_MAX_DELAY);
 8001e56:	233c      	movs	r3, #60	; 0x3c
 8001e58:	b299      	uxth	r1, r3
 8001e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5e:	9302      	str	r3, [sp, #8]
 8001e60:	2306      	movs	r3, #6
 8001e62:	9301      	str	r3, [sp, #4]
 8001e64:	4b5e      	ldr	r3, [pc, #376]	; (8001fe0 <Calibrate_Compass+0x1c0>)
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	2301      	movs	r3, #1
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	485d      	ldr	r0, [pc, #372]	; (8001fe4 <Calibrate_Compass+0x1c4>)
 8001e6e:	f006 ff79 	bl	8008d64 <HAL_I2C_Mem_Read>

		compassY = (int16_t)((raw_compass_data[0] << 8) | raw_compass_data[1]);
 8001e72:	4b5b      	ldr	r3, [pc, #364]	; (8001fe0 <Calibrate_Compass+0x1c0>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	021b      	lsls	r3, r3, #8
 8001e78:	b21a      	sxth	r2, r3
 8001e7a:	4b59      	ldr	r3, [pc, #356]	; (8001fe0 <Calibrate_Compass+0x1c0>)
 8001e7c:	785b      	ldrb	r3, [r3, #1]
 8001e7e:	b21b      	sxth	r3, r3
 8001e80:	4313      	orrs	r3, r2
 8001e82:	b21a      	sxth	r2, r3
 8001e84:	4b58      	ldr	r3, [pc, #352]	; (8001fe8 <Calibrate_Compass+0x1c8>)
 8001e86:	801a      	strh	r2, [r3, #0]
		compassZ = (int16_t)((raw_compass_data[2] << 8) | raw_compass_data[3]);
 8001e88:	4b55      	ldr	r3, [pc, #340]	; (8001fe0 <Calibrate_Compass+0x1c0>)
 8001e8a:	789b      	ldrb	r3, [r3, #2]
 8001e8c:	021b      	lsls	r3, r3, #8
 8001e8e:	b21a      	sxth	r2, r3
 8001e90:	4b53      	ldr	r3, [pc, #332]	; (8001fe0 <Calibrate_Compass+0x1c0>)
 8001e92:	78db      	ldrb	r3, [r3, #3]
 8001e94:	b21b      	sxth	r3, r3
 8001e96:	4313      	orrs	r3, r2
 8001e98:	b21a      	sxth	r2, r3
 8001e9a:	4b54      	ldr	r3, [pc, #336]	; (8001fec <Calibrate_Compass+0x1cc>)
 8001e9c:	801a      	strh	r2, [r3, #0]
		compassX = (int16_t)((raw_compass_data[4] << 8) | raw_compass_data[5]);
 8001e9e:	4b50      	ldr	r3, [pc, #320]	; (8001fe0 <Calibrate_Compass+0x1c0>)
 8001ea0:	791b      	ldrb	r3, [r3, #4]
 8001ea2:	021b      	lsls	r3, r3, #8
 8001ea4:	b21a      	sxth	r2, r3
 8001ea6:	4b4e      	ldr	r3, [pc, #312]	; (8001fe0 <Calibrate_Compass+0x1c0>)
 8001ea8:	795b      	ldrb	r3, [r3, #5]
 8001eaa:	b21b      	sxth	r3, r3
 8001eac:	4313      	orrs	r3, r2
 8001eae:	b21a      	sxth	r2, r3
 8001eb0:	4b4f      	ldr	r3, [pc, #316]	; (8001ff0 <Calibrate_Compass+0x1d0>)
 8001eb2:	801a      	strh	r2, [r3, #0]

		if (compassX > compass_x_max)
 8001eb4:	4b4e      	ldr	r3, [pc, #312]	; (8001ff0 <Calibrate_Compass+0x1d0>)
 8001eb6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001eba:	4b43      	ldr	r3, [pc, #268]	; (8001fc8 <Calibrate_Compass+0x1a8>)
 8001ebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	dd05      	ble.n	8001ed0 <Calibrate_Compass+0xb0>
			compass_x_max = compassX;
 8001ec4:	4b4a      	ldr	r3, [pc, #296]	; (8001ff0 <Calibrate_Compass+0x1d0>)
 8001ec6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001eca:	4b3f      	ldr	r3, [pc, #252]	; (8001fc8 <Calibrate_Compass+0x1a8>)
 8001ecc:	801a      	strh	r2, [r3, #0]
 8001ece:	e00c      	b.n	8001eea <Calibrate_Compass+0xca>
		else if (compassX < compass_x_min)
 8001ed0:	4b47      	ldr	r3, [pc, #284]	; (8001ff0 <Calibrate_Compass+0x1d0>)
 8001ed2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ed6:	4b3b      	ldr	r3, [pc, #236]	; (8001fc4 <Calibrate_Compass+0x1a4>)
 8001ed8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	da04      	bge.n	8001eea <Calibrate_Compass+0xca>
			compass_x_min = compassX;
 8001ee0:	4b43      	ldr	r3, [pc, #268]	; (8001ff0 <Calibrate_Compass+0x1d0>)
 8001ee2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ee6:	4b37      	ldr	r3, [pc, #220]	; (8001fc4 <Calibrate_Compass+0x1a4>)
 8001ee8:	801a      	strh	r2, [r3, #0]

		if (compassZ > compass_z_max)
 8001eea:	4b40      	ldr	r3, [pc, #256]	; (8001fec <Calibrate_Compass+0x1cc>)
 8001eec:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ef0:	4b39      	ldr	r3, [pc, #228]	; (8001fd8 <Calibrate_Compass+0x1b8>)
 8001ef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	dd05      	ble.n	8001f06 <Calibrate_Compass+0xe6>
			compass_z_max = compassZ;
 8001efa:	4b3c      	ldr	r3, [pc, #240]	; (8001fec <Calibrate_Compass+0x1cc>)
 8001efc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f00:	4b35      	ldr	r3, [pc, #212]	; (8001fd8 <Calibrate_Compass+0x1b8>)
 8001f02:	801a      	strh	r2, [r3, #0]
 8001f04:	e00c      	b.n	8001f20 <Calibrate_Compass+0x100>
		else if (compassZ < compass_z_min)
 8001f06:	4b39      	ldr	r3, [pc, #228]	; (8001fec <Calibrate_Compass+0x1cc>)
 8001f08:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f0c:	4b31      	ldr	r3, [pc, #196]	; (8001fd4 <Calibrate_Compass+0x1b4>)
 8001f0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	da04      	bge.n	8001f20 <Calibrate_Compass+0x100>
			compass_z_min = compassZ;
 8001f16:	4b35      	ldr	r3, [pc, #212]	; (8001fec <Calibrate_Compass+0x1cc>)
 8001f18:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f1c:	4b2d      	ldr	r3, [pc, #180]	; (8001fd4 <Calibrate_Compass+0x1b4>)
 8001f1e:	801a      	strh	r2, [r3, #0]

		if (compassY > compass_y_max)
 8001f20:	4b31      	ldr	r3, [pc, #196]	; (8001fe8 <Calibrate_Compass+0x1c8>)
 8001f22:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f26:	4b2a      	ldr	r3, [pc, #168]	; (8001fd0 <Calibrate_Compass+0x1b0>)
 8001f28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	dd05      	ble.n	8001f3c <Calibrate_Compass+0x11c>
			compass_y_max = compassY;
 8001f30:	4b2d      	ldr	r3, [pc, #180]	; (8001fe8 <Calibrate_Compass+0x1c8>)
 8001f32:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f36:	4b26      	ldr	r3, [pc, #152]	; (8001fd0 <Calibrate_Compass+0x1b0>)
 8001f38:	801a      	strh	r2, [r3, #0]
 8001f3a:	e00c      	b.n	8001f56 <Calibrate_Compass+0x136>
		else if (compassY < compass_y_min)
 8001f3c:	4b2a      	ldr	r3, [pc, #168]	; (8001fe8 <Calibrate_Compass+0x1c8>)
 8001f3e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f42:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <Calibrate_Compass+0x1ac>)
 8001f44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	da04      	bge.n	8001f56 <Calibrate_Compass+0x136>
			compass_y_min = compassY;
 8001f4c:	4b26      	ldr	r3, [pc, #152]	; (8001fe8 <Calibrate_Compass+0x1c8>)
 8001f4e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f52:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <Calibrate_Compass+0x1ac>)
 8001f54:	801a      	strh	r2, [r3, #0]

		HAL_Delay(5);
 8001f56:	2005      	movs	r0, #5
 8001f58:	f005 fe9c 	bl	8007c94 <HAL_Delay>
	while(GetMillisDifference(&calibrate_compass_timer) < 10000)
 8001f5c:	481f      	ldr	r0, [pc, #124]	; (8001fdc <Calibrate_Compass+0x1bc>)
 8001f5e:	f003 fcff 	bl	8005960 <GetMillisDifference>
 8001f62:	4602      	mov	r2, r0
 8001f64:	f242 730f 	movw	r3, #9999	; 0x270f
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	f67f af74 	bls.w	8001e56 <Calibrate_Compass+0x36>
	}

	EEPROM_Clear_Buffer();
 8001f6e:	f002 f8ef 	bl	8004150 <EEPROM_Clear_Buffer>
	eeprom_write_buffer_width = 2;
 8001f72:	4b20      	ldr	r3, [pc, #128]	; (8001ff4 <Calibrate_Compass+0x1d4>)
 8001f74:	2202      	movs	r2, #2
 8001f76:	701a      	strb	r2, [r3, #0]
	EEPROM_Write_Buffer((uint8_t *)&compass_x_min, 2);
 8001f78:	2102      	movs	r1, #2
 8001f7a:	4812      	ldr	r0, [pc, #72]	; (8001fc4 <Calibrate_Compass+0x1a4>)
 8001f7c:	f002 f948 	bl	8004210 <EEPROM_Write_Buffer>
	EEPROM_Write_Buffer((uint8_t *)&compass_x_max, 2);
 8001f80:	2102      	movs	r1, #2
 8001f82:	4811      	ldr	r0, [pc, #68]	; (8001fc8 <Calibrate_Compass+0x1a8>)
 8001f84:	f002 f944 	bl	8004210 <EEPROM_Write_Buffer>
	EEPROM_Write_Buffer((uint8_t *)&compass_y_min, 2);
 8001f88:	2102      	movs	r1, #2
 8001f8a:	4810      	ldr	r0, [pc, #64]	; (8001fcc <Calibrate_Compass+0x1ac>)
 8001f8c:	f002 f940 	bl	8004210 <EEPROM_Write_Buffer>
	EEPROM_Write_Buffer((uint8_t *)&compass_y_max, 2);
 8001f90:	2102      	movs	r1, #2
 8001f92:	480f      	ldr	r0, [pc, #60]	; (8001fd0 <Calibrate_Compass+0x1b0>)
 8001f94:	f002 f93c 	bl	8004210 <EEPROM_Write_Buffer>
	EEPROM_Write_Buffer((uint8_t *)&compass_z_min, 2);
 8001f98:	2102      	movs	r1, #2
 8001f9a:	480e      	ldr	r0, [pc, #56]	; (8001fd4 <Calibrate_Compass+0x1b4>)
 8001f9c:	f002 f938 	bl	8004210 <EEPROM_Write_Buffer>
	EEPROM_Write_Buffer((uint8_t *)&compass_z_max, 2);
 8001fa0:	2102      	movs	r1, #2
 8001fa2:	480d      	ldr	r0, [pc, #52]	; (8001fd8 <Calibrate_Compass+0x1b8>)
 8001fa4:	f002 f934 	bl	8004210 <EEPROM_Write_Buffer>
	EEPROM_Save_Page(64);
 8001fa8:	2040      	movs	r0, #64	; 0x40
 8001faa:	f002 f8eb 	bl	8004184 <EEPROM_Save_Page>

	Calculate_Compass_Calibration();
 8001fae:	f000 f827 	bl	8002000 <Calculate_Compass_Calibration>

	Read_Compass();
 8001fb2:	f7ff fc79 	bl	80018a8 <Read_Compass>

	gyro_z_angle = compass_heading;
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <Calibrate_Compass+0x1d8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a10      	ldr	r2, [pc, #64]	; (8001ffc <Calibrate_Compass+0x1dc>)
 8001fbc:	6013      	str	r3, [r2, #0]
}
 8001fbe:	bf00      	nop
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	2000028c 	.word	0x2000028c
 8001fc8:	2000028e 	.word	0x2000028e
 8001fcc:	20000290 	.word	0x20000290
 8001fd0:	20000292 	.word	0x20000292
 8001fd4:	20000294 	.word	0x20000294
 8001fd8:	20000296 	.word	0x20000296
 8001fdc:	20000454 	.word	0x20000454
 8001fe0:	20000440 	.word	0x20000440
 8001fe4:	20001ef8 	.word	0x20001ef8
 8001fe8:	20000450 	.word	0x20000450
 8001fec:	2000047a 	.word	0x2000047a
 8001ff0:	2000047c 	.word	0x2000047c
 8001ff4:	20000066 	.word	0x20000066
 8001ff8:	20000298 	.word	0x20000298
 8001ffc:	20002104 	.word	0x20002104

08002000 <Calculate_Compass_Calibration>:

void Calculate_Compass_Calibration()
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
    y_scale = (float)(compass_x_max - compass_x_min) / (float)(compass_y_max - compass_y_min);
 8002004:	4b4e      	ldr	r3, [pc, #312]	; (8002140 <Calculate_Compass_Calibration+0x140>)
 8002006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800200a:	461a      	mov	r2, r3
 800200c:	4b4d      	ldr	r3, [pc, #308]	; (8002144 <Calculate_Compass_Calibration+0x144>)
 800200e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	ee07 3a90 	vmov	s15, r3
 8002018:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800201c:	4b4a      	ldr	r3, [pc, #296]	; (8002148 <Calculate_Compass_Calibration+0x148>)
 800201e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002022:	461a      	mov	r2, r3
 8002024:	4b49      	ldr	r3, [pc, #292]	; (800214c <Calculate_Compass_Calibration+0x14c>)
 8002026:	f9b3 3000 	ldrsh.w	r3, [r3]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	ee07 3a90 	vmov	s15, r3
 8002030:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002034:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002038:	4b45      	ldr	r3, [pc, #276]	; (8002150 <Calculate_Compass_Calibration+0x150>)
 800203a:	edc3 7a00 	vstr	s15, [r3]
    z_scale = (float)(compass_x_max - compass_x_min) / (float)(compass_z_max - compass_z_min);
 800203e:	4b40      	ldr	r3, [pc, #256]	; (8002140 <Calculate_Compass_Calibration+0x140>)
 8002040:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002044:	461a      	mov	r2, r3
 8002046:	4b3f      	ldr	r3, [pc, #252]	; (8002144 <Calculate_Compass_Calibration+0x144>)
 8002048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	ee07 3a90 	vmov	s15, r3
 8002052:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002056:	4b3f      	ldr	r3, [pc, #252]	; (8002154 <Calculate_Compass_Calibration+0x154>)
 8002058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800205c:	461a      	mov	r2, r3
 800205e:	4b3e      	ldr	r3, [pc, #248]	; (8002158 <Calculate_Compass_Calibration+0x158>)
 8002060:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	ee07 3a90 	vmov	s15, r3
 800206a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800206e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002072:	4b3a      	ldr	r3, [pc, #232]	; (800215c <Calculate_Compass_Calibration+0x15c>)
 8002074:	edc3 7a00 	vstr	s15, [r3]

    compass_offset_x = (float)(compass_x_max - compass_x_min) / 2 - compass_x_max;
 8002078:	4b31      	ldr	r3, [pc, #196]	; (8002140 <Calculate_Compass_Calibration+0x140>)
 800207a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800207e:	461a      	mov	r2, r3
 8002080:	4b30      	ldr	r3, [pc, #192]	; (8002144 <Calculate_Compass_Calibration+0x144>)
 8002082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	ee07 3a90 	vmov	s15, r3
 800208c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002090:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002094:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002098:	4b29      	ldr	r3, [pc, #164]	; (8002140 <Calculate_Compass_Calibration+0x140>)
 800209a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800209e:	ee07 3a90 	vmov	s15, r3
 80020a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020aa:	4b2d      	ldr	r3, [pc, #180]	; (8002160 <Calculate_Compass_Calibration+0x160>)
 80020ac:	edc3 7a00 	vstr	s15, [r3]
    compass_offset_y = ((float)(compass_y_max - compass_y_min) / 2 - compass_y_max) * y_scale;
 80020b0:	4b25      	ldr	r3, [pc, #148]	; (8002148 <Calculate_Compass_Calibration+0x148>)
 80020b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020b6:	461a      	mov	r2, r3
 80020b8:	4b24      	ldr	r3, [pc, #144]	; (800214c <Calculate_Compass_Calibration+0x14c>)
 80020ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	ee07 3a90 	vmov	s15, r3
 80020c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020c8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80020cc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80020d0:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <Calculate_Compass_Calibration+0x148>)
 80020d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020d6:	ee07 3a90 	vmov	s15, r3
 80020da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020e2:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <Calculate_Compass_Calibration+0x150>)
 80020e4:	edd3 7a00 	vldr	s15, [r3]
 80020e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ec:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <Calculate_Compass_Calibration+0x164>)
 80020ee:	edc3 7a00 	vstr	s15, [r3]
    compass_offset_z = ((float)(compass_z_max - compass_z_min) / 2 - compass_z_max) * z_scale;
 80020f2:	4b18      	ldr	r3, [pc, #96]	; (8002154 <Calculate_Compass_Calibration+0x154>)
 80020f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020f8:	461a      	mov	r2, r3
 80020fa:	4b17      	ldr	r3, [pc, #92]	; (8002158 <Calculate_Compass_Calibration+0x158>)
 80020fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	ee07 3a90 	vmov	s15, r3
 8002106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800210a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800210e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002112:	4b10      	ldr	r3, [pc, #64]	; (8002154 <Calculate_Compass_Calibration+0x154>)
 8002114:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002118:	ee07 3a90 	vmov	s15, r3
 800211c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002120:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002124:	4b0d      	ldr	r3, [pc, #52]	; (800215c <Calculate_Compass_Calibration+0x15c>)
 8002126:	edd3 7a00 	vldr	s15, [r3]
 800212a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800212e:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <Calculate_Compass_Calibration+0x168>)
 8002130:	edc3 7a00 	vstr	s15, [r3]
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	2000028e 	.word	0x2000028e
 8002144:	2000028c 	.word	0x2000028c
 8002148:	20000292 	.word	0x20000292
 800214c:	20000290 	.word	0x20000290
 8002150:	2000044c 	.word	0x2000044c
 8002154:	20000296 	.word	0x20000296
 8002158:	20000294 	.word	0x20000294
 800215c:	20000448 	.word	0x20000448
 8002160:	200002a4 	.word	0x200002a4
 8002164:	200002a8 	.word	0x200002a8
 8002168:	200002ac 	.word	0x200002ac

0800216c <CalculateHeadingDifference>:

void CalculateHeadingDifference(float ang1, float ang2) //ang1 is setpoint, ang2 is current
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	ed87 0a01 	vstr	s0, [r7, #4]
 8002176:	edc7 0a00 	vstr	s1, [r7]
    heading_difference_return = ang1 - ang2;
 800217a:	ed97 7a01 	vldr	s14, [r7, #4]
 800217e:	edd7 7a00 	vldr	s15, [r7]
 8002182:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002186:	4b2d      	ldr	r3, [pc, #180]	; (800223c <CalculateHeadingDifference+0xd0>)
 8002188:	edc3 7a00 	vstr	s15, [r3]

    if (heading_difference_return < -180 || heading_difference_return > 180)
 800218c:	4b2b      	ldr	r3, [pc, #172]	; (800223c <CalculateHeadingDifference+0xd0>)
 800218e:	edd3 7a00 	vldr	s15, [r3]
 8002192:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002240 <CalculateHeadingDifference+0xd4>
 8002196:	eef4 7ac7 	vcmpe.f32	s15, s14
 800219a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800219e:	d40a      	bmi.n	80021b6 <CalculateHeadingDifference+0x4a>
 80021a0:	4b26      	ldr	r3, [pc, #152]	; (800223c <CalculateHeadingDifference+0xd0>)
 80021a2:	edd3 7a00 	vldr	s15, [r3]
 80021a6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002244 <CalculateHeadingDifference+0xd8>
 80021aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b2:	dc00      	bgt.n	80021b6 <CalculateHeadingDifference+0x4a>
        else
            ang1 += 180;

        heading_difference_return = ang1 - ang2;
    }
}
 80021b4:	e03c      	b.n	8002230 <CalculateHeadingDifference+0xc4>
        if (ang2 > 180)
 80021b6:	edd7 7a00 	vldr	s15, [r7]
 80021ba:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002244 <CalculateHeadingDifference+0xd8>
 80021be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c6:	dd08      	ble.n	80021da <CalculateHeadingDifference+0x6e>
            ang2 -= 180;
 80021c8:	edd7 7a00 	vldr	s15, [r7]
 80021cc:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002244 <CalculateHeadingDifference+0xd8>
 80021d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021d4:	edc7 7a00 	vstr	s15, [r7]
 80021d8:	e007      	b.n	80021ea <CalculateHeadingDifference+0x7e>
            ang2 += 180;
 80021da:	edd7 7a00 	vldr	s15, [r7]
 80021de:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002244 <CalculateHeadingDifference+0xd8>
 80021e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80021e6:	edc7 7a00 	vstr	s15, [r7]
        if (ang1 > 180)
 80021ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80021ee:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002244 <CalculateHeadingDifference+0xd8>
 80021f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021fa:	dd08      	ble.n	800220e <CalculateHeadingDifference+0xa2>
            ang1 -= 180;
 80021fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002200:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002244 <CalculateHeadingDifference+0xd8>
 8002204:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002208:	edc7 7a01 	vstr	s15, [r7, #4]
 800220c:	e007      	b.n	800221e <CalculateHeadingDifference+0xb2>
            ang1 += 180;
 800220e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002212:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002244 <CalculateHeadingDifference+0xd8>
 8002216:	ee77 7a87 	vadd.f32	s15, s15, s14
 800221a:	edc7 7a01 	vstr	s15, [r7, #4]
        heading_difference_return = ang1 - ang2;
 800221e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002222:	edd7 7a00 	vldr	s15, [r7]
 8002226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800222a:	4b04      	ldr	r3, [pc, #16]	; (800223c <CalculateHeadingDifference+0xd0>)
 800222c:	edc3 7a00 	vstr	s15, [r3]
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	200002b0 	.word	0x200002b0
 8002240:	c3340000 	.word	0xc3340000
 8002244:	43340000 	.word	0x43340000

08002248 <Calculate_Attitude>:
float pid_error_temp;
float pid_roll_last_error, pid_pitch_last_error, pid_yaw_last_error;
int32_t max_motor_pid_output = 45;

void Calculate_Attitude()
{
 8002248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800224c:	af00      	add	r7, sp, #0
	gyro_x = (float)raw_gyro_acc_data[0] / 65.5;
 800224e:	4b68      	ldr	r3, [pc, #416]	; (80023f0 <Calculate_Attitude+0x1a8>)
 8002250:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002254:	ee07 3a90 	vmov	s15, r3
 8002258:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800225c:	eddf 6a65 	vldr	s13, [pc, #404]	; 80023f4 <Calculate_Attitude+0x1ac>
 8002260:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002264:	4b64      	ldr	r3, [pc, #400]	; (80023f8 <Calculate_Attitude+0x1b0>)
 8002266:	edc3 7a00 	vstr	s15, [r3]
	gyro_y = (float)raw_gyro_acc_data[1] / -65.5;
 800226a:	4b61      	ldr	r3, [pc, #388]	; (80023f0 <Calculate_Attitude+0x1a8>)
 800226c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002270:	ee07 3a90 	vmov	s15, r3
 8002274:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002278:	eddf 6a60 	vldr	s13, [pc, #384]	; 80023fc <Calculate_Attitude+0x1b4>
 800227c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002280:	4b5f      	ldr	r3, [pc, #380]	; (8002400 <Calculate_Attitude+0x1b8>)
 8002282:	edc3 7a00 	vstr	s15, [r3]
	gyro_z = (float)raw_gyro_acc_data[2] / -65.5;
 8002286:	4b5a      	ldr	r3, [pc, #360]	; (80023f0 <Calculate_Attitude+0x1a8>)
 8002288:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800228c:	ee07 3a90 	vmov	s15, r3
 8002290:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002294:	eddf 6a59 	vldr	s13, [pc, #356]	; 80023fc <Calculate_Attitude+0x1b4>
 8002298:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800229c:	4b59      	ldr	r3, [pc, #356]	; (8002404 <Calculate_Attitude+0x1bc>)
 800229e:	edc3 7a00 	vstr	s15, [r3]

	acc_magnitude = sqrt(((float)raw_gyro_acc_data[3] * (float)raw_gyro_acc_data[3]) + ((float)raw_gyro_acc_data[4] * (float)raw_gyro_acc_data[4]) + ((float)raw_gyro_acc_data[5] * (float)raw_gyro_acc_data[5]));
 80022a2:	4b53      	ldr	r3, [pc, #332]	; (80023f0 <Calculate_Attitude+0x1a8>)
 80022a4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80022a8:	ee07 3a90 	vmov	s15, r3
 80022ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022b0:	4b4f      	ldr	r3, [pc, #316]	; (80023f0 <Calculate_Attitude+0x1a8>)
 80022b2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80022b6:	ee07 3a90 	vmov	s15, r3
 80022ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022c2:	4b4b      	ldr	r3, [pc, #300]	; (80023f0 <Calculate_Attitude+0x1a8>)
 80022c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80022c8:	ee07 3a90 	vmov	s15, r3
 80022cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80022d0:	4b47      	ldr	r3, [pc, #284]	; (80023f0 <Calculate_Attitude+0x1a8>)
 80022d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80022d6:	ee07 3a90 	vmov	s15, r3
 80022da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022e6:	4b42      	ldr	r3, [pc, #264]	; (80023f0 <Calculate_Attitude+0x1a8>)
 80022e8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80022ec:	ee07 3a90 	vmov	s15, r3
 80022f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80022f4:	4b3e      	ldr	r3, [pc, #248]	; (80023f0 <Calculate_Attitude+0x1a8>)
 80022f6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80022fa:	ee07 3a90 	vmov	s15, r3
 80022fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002302:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002306:	ee77 7a27 	vadd.f32	s15, s14, s15
 800230a:	ee17 0a90 	vmov	r0, s15
 800230e:	f7fe f91b 	bl	8000548 <__aeabi_f2d>
 8002312:	4603      	mov	r3, r0
 8002314:	460c      	mov	r4, r1
 8002316:	ec44 3b10 	vmov	d0, r3, r4
 800231a:	f010 f8e5 	bl	80124e8 <sqrt>
 800231e:	ec54 3b10 	vmov	r3, r4, d0
 8002322:	4618      	mov	r0, r3
 8002324:	4621      	mov	r1, r4
 8002326:	f7fe fc3f 	bl	8000ba8 <__aeabi_d2f>
 800232a:	4602      	mov	r2, r0
 800232c:	4b36      	ldr	r3, [pc, #216]	; (8002408 <Calculate_Attitude+0x1c0>)
 800232e:	601a      	str	r2, [r3, #0]

	if(acc_magnitude != 0)
 8002330:	4b35      	ldr	r3, [pc, #212]	; (8002408 <Calculate_Attitude+0x1c0>)
 8002332:	edd3 7a00 	vldr	s15, [r3]
 8002336:	eef5 7a40 	vcmp.f32	s15, #0.0
 800233a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233e:	f000 809d 	beq.w	800247c <Calculate_Attitude+0x234>
	{
		if(abs(raw_gyro_acc_data[4]) < acc_magnitude)
 8002342:	4b2b      	ldr	r3, [pc, #172]	; (80023f0 <Calculate_Attitude+0x1a8>)
 8002344:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	db07      	blt.n	800235c <Calculate_Attitude+0x114>
 800234c:	4b28      	ldr	r3, [pc, #160]	; (80023f0 <Calculate_Attitude+0x1a8>)
 800234e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002352:	ee07 3a90 	vmov	s15, r3
 8002356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800235a:	e007      	b.n	800236c <Calculate_Attitude+0x124>
 800235c:	4b24      	ldr	r3, [pc, #144]	; (80023f0 <Calculate_Attitude+0x1a8>)
 800235e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002362:	425b      	negs	r3, r3
 8002364:	ee07 3a90 	vmov	s15, r3
 8002368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800236c:	4b26      	ldr	r3, [pc, #152]	; (8002408 <Calculate_Attitude+0x1c0>)
 800236e:	ed93 7a00 	vldr	s14, [r3]
 8002372:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237a:	d525      	bpl.n	80023c8 <Calculate_Attitude+0x180>
		{
			acc_x = asin((float)raw_gyro_acc_data[4] / acc_magnitude) * 57.296;
 800237c:	4b1c      	ldr	r3, [pc, #112]	; (80023f0 <Calculate_Attitude+0x1a8>)
 800237e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002382:	ee07 3a90 	vmov	s15, r3
 8002386:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800238a:	4b1f      	ldr	r3, [pc, #124]	; (8002408 <Calculate_Attitude+0x1c0>)
 800238c:	edd3 7a00 	vldr	s15, [r3]
 8002390:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002394:	ee16 0a90 	vmov	r0, s13
 8002398:	f7fe f8d6 	bl	8000548 <__aeabi_f2d>
 800239c:	4603      	mov	r3, r0
 800239e:	460c      	mov	r4, r1
 80023a0:	ec44 3b10 	vmov	d0, r3, r4
 80023a4:	f00f fed8 	bl	8012158 <asin>
 80023a8:	ec51 0b10 	vmov	r0, r1, d0
 80023ac:	a30e      	add	r3, pc, #56	; (adr r3, 80023e8 <Calculate_Attitude+0x1a0>)
 80023ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b2:	f7fe f921 	bl	80005f8 <__aeabi_dmul>
 80023b6:	4603      	mov	r3, r0
 80023b8:	460c      	mov	r4, r1
 80023ba:	4618      	mov	r0, r3
 80023bc:	4621      	mov	r1, r4
 80023be:	f7fe fbf3 	bl	8000ba8 <__aeabi_d2f>
 80023c2:	4602      	mov	r2, r0
 80023c4:	4b11      	ldr	r3, [pc, #68]	; (800240c <Calculate_Attitude+0x1c4>)
 80023c6:	601a      	str	r2, [r3, #0]
		}

		if(abs(raw_gyro_acc_data[3]) < acc_magnitude)
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <Calculate_Attitude+0x1a8>)
 80023ca:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	db1e      	blt.n	8002410 <Calculate_Attitude+0x1c8>
 80023d2:	4b07      	ldr	r3, [pc, #28]	; (80023f0 <Calculate_Attitude+0x1a8>)
 80023d4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80023d8:	ee07 3a90 	vmov	s15, r3
 80023dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023e0:	e01e      	b.n	8002420 <Calculate_Attitude+0x1d8>
 80023e2:	bf00      	nop
 80023e4:	f3af 8000 	nop.w
 80023e8:	53f7ced9 	.word	0x53f7ced9
 80023ec:	404ca5e3 	.word	0x404ca5e3
 80023f0:	200020f0 	.word	0x200020f0
 80023f4:	42830000 	.word	0x42830000
 80023f8:	200020fc 	.word	0x200020fc
 80023fc:	c2830000 	.word	0xc2830000
 8002400:	200020d4 	.word	0x200020d4
 8002404:	20002130 	.word	0x20002130
 8002408:	20002108 	.word	0x20002108
 800240c:	2000210c 	.word	0x2000210c
 8002410:	4bd1      	ldr	r3, [pc, #836]	; (8002758 <Calculate_Attitude+0x510>)
 8002412:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002416:	425b      	negs	r3, r3
 8002418:	ee07 3a90 	vmov	s15, r3
 800241c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002420:	4bce      	ldr	r3, [pc, #824]	; (800275c <Calculate_Attitude+0x514>)
 8002422:	ed93 7a00 	vldr	s14, [r3]
 8002426:	eef4 7ac7 	vcmpe.f32	s15, s14
 800242a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800242e:	d525      	bpl.n	800247c <Calculate_Attitude+0x234>
		{
			acc_y = asin((float)raw_gyro_acc_data[3] / acc_magnitude) * 57.296;
 8002430:	4bc9      	ldr	r3, [pc, #804]	; (8002758 <Calculate_Attitude+0x510>)
 8002432:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002436:	ee07 3a90 	vmov	s15, r3
 800243a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800243e:	4bc7      	ldr	r3, [pc, #796]	; (800275c <Calculate_Attitude+0x514>)
 8002440:	edd3 7a00 	vldr	s15, [r3]
 8002444:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002448:	ee16 0a90 	vmov	r0, s13
 800244c:	f7fe f87c 	bl	8000548 <__aeabi_f2d>
 8002450:	4603      	mov	r3, r0
 8002452:	460c      	mov	r4, r1
 8002454:	ec44 3b10 	vmov	d0, r3, r4
 8002458:	f00f fe7e 	bl	8012158 <asin>
 800245c:	ec51 0b10 	vmov	r0, r1, d0
 8002460:	a3b5      	add	r3, pc, #724	; (adr r3, 8002738 <Calculate_Attitude+0x4f0>)
 8002462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002466:	f7fe f8c7 	bl	80005f8 <__aeabi_dmul>
 800246a:	4603      	mov	r3, r0
 800246c:	460c      	mov	r4, r1
 800246e:	4618      	mov	r0, r3
 8002470:	4621      	mov	r1, r4
 8002472:	f7fe fb99 	bl	8000ba8 <__aeabi_d2f>
 8002476:	4602      	mov	r2, r0
 8002478:	4bb9      	ldr	r3, [pc, #740]	; (8002760 <Calculate_Attitude+0x518>)
 800247a:	601a      	str	r2, [r3, #0]
		}
	}

	gyro_x_angle += (gyro_x) * ((float)how_long_to_loop_main / 1000000);
 800247c:	4bb9      	ldr	r3, [pc, #740]	; (8002764 <Calculate_Attitude+0x51c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	ee07 3a90 	vmov	s15, r3
 8002484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002488:	eddf 6ab7 	vldr	s13, [pc, #732]	; 8002768 <Calculate_Attitude+0x520>
 800248c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002490:	4bb6      	ldr	r3, [pc, #728]	; (800276c <Calculate_Attitude+0x524>)
 8002492:	edd3 7a00 	vldr	s15, [r3]
 8002496:	ee27 7a27 	vmul.f32	s14, s14, s15
 800249a:	4bb5      	ldr	r3, [pc, #724]	; (8002770 <Calculate_Attitude+0x528>)
 800249c:	edd3 7a00 	vldr	s15, [r3]
 80024a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024a4:	4bb2      	ldr	r3, [pc, #712]	; (8002770 <Calculate_Attitude+0x528>)
 80024a6:	edc3 7a00 	vstr	s15, [r3]
	gyro_y_angle += (gyro_y) * ((float)how_long_to_loop_main / 1000000);
 80024aa:	4bae      	ldr	r3, [pc, #696]	; (8002764 <Calculate_Attitude+0x51c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	ee07 3a90 	vmov	s15, r3
 80024b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024b6:	eddf 6aac 	vldr	s13, [pc, #688]	; 8002768 <Calculate_Attitude+0x520>
 80024ba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024be:	4bad      	ldr	r3, [pc, #692]	; (8002774 <Calculate_Attitude+0x52c>)
 80024c0:	edd3 7a00 	vldr	s15, [r3]
 80024c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024c8:	4bab      	ldr	r3, [pc, #684]	; (8002778 <Calculate_Attitude+0x530>)
 80024ca:	edd3 7a00 	vldr	s15, [r3]
 80024ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d2:	4ba9      	ldr	r3, [pc, #676]	; (8002778 <Calculate_Attitude+0x530>)
 80024d4:	edc3 7a00 	vstr	s15, [r3]
	gyro_z_angle += (gyro_z) * ((float)how_long_to_loop_main / 1000000);
 80024d8:	4ba2      	ldr	r3, [pc, #648]	; (8002764 <Calculate_Attitude+0x51c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	ee07 3a90 	vmov	s15, r3
 80024e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024e4:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8002768 <Calculate_Attitude+0x520>
 80024e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024ec:	4ba3      	ldr	r3, [pc, #652]	; (800277c <Calculate_Attitude+0x534>)
 80024ee:	edd3 7a00 	vldr	s15, [r3]
 80024f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024f6:	4ba2      	ldr	r3, [pc, #648]	; (8002780 <Calculate_Attitude+0x538>)
 80024f8:	edd3 7a00 	vldr	s15, [r3]
 80024fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002500:	4b9f      	ldr	r3, [pc, #636]	; (8002780 <Calculate_Attitude+0x538>)
 8002502:	edc3 7a00 	vstr	s15, [r3]

	gyro_x_angle += (gyro_y_angle * sin(gyro_z * 0.01745 * ((float)how_long_to_loop_main / 1000000)));
 8002506:	4b9a      	ldr	r3, [pc, #616]	; (8002770 <Calculate_Attitude+0x528>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe f81c 	bl	8000548 <__aeabi_f2d>
 8002510:	4604      	mov	r4, r0
 8002512:	460d      	mov	r5, r1
 8002514:	4b98      	ldr	r3, [pc, #608]	; (8002778 <Calculate_Attitude+0x530>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe f815 	bl	8000548 <__aeabi_f2d>
 800251e:	4680      	mov	r8, r0
 8002520:	4689      	mov	r9, r1
 8002522:	4b96      	ldr	r3, [pc, #600]	; (800277c <Calculate_Attitude+0x534>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f7fe f80e 	bl	8000548 <__aeabi_f2d>
 800252c:	a384      	add	r3, pc, #528	; (adr r3, 8002740 <Calculate_Attitude+0x4f8>)
 800252e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002532:	f7fe f861 	bl	80005f8 <__aeabi_dmul>
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	4692      	mov	sl, r2
 800253c:	469b      	mov	fp, r3
 800253e:	4b89      	ldr	r3, [pc, #548]	; (8002764 <Calculate_Attitude+0x51c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	ee07 3a90 	vmov	s15, r3
 8002546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800254a:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8002768 <Calculate_Attitude+0x520>
 800254e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002552:	ee16 0a90 	vmov	r0, s13
 8002556:	f7fd fff7 	bl	8000548 <__aeabi_f2d>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4650      	mov	r0, sl
 8002560:	4659      	mov	r1, fp
 8002562:	f7fe f849 	bl	80005f8 <__aeabi_dmul>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	ec43 2b17 	vmov	d7, r2, r3
 800256e:	eeb0 0a47 	vmov.f32	s0, s14
 8002572:	eef0 0a67 	vmov.f32	s1, s15
 8002576:	f00f fd77 	bl	8012068 <sin>
 800257a:	ec53 2b10 	vmov	r2, r3, d0
 800257e:	4640      	mov	r0, r8
 8002580:	4649      	mov	r1, r9
 8002582:	f7fe f839 	bl	80005f8 <__aeabi_dmul>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4620      	mov	r0, r4
 800258c:	4629      	mov	r1, r5
 800258e:	f7fd fe7d 	bl	800028c <__adddf3>
 8002592:	4603      	mov	r3, r0
 8002594:	460c      	mov	r4, r1
 8002596:	4618      	mov	r0, r3
 8002598:	4621      	mov	r1, r4
 800259a:	f7fe fb05 	bl	8000ba8 <__aeabi_d2f>
 800259e:	4602      	mov	r2, r0
 80025a0:	4b73      	ldr	r3, [pc, #460]	; (8002770 <Calculate_Attitude+0x528>)
 80025a2:	601a      	str	r2, [r3, #0]
	gyro_y_angle -= (gyro_x_angle * sin(gyro_z * 0.01745 * ((float)how_long_to_loop_main / 1000000)));
 80025a4:	4b74      	ldr	r3, [pc, #464]	; (8002778 <Calculate_Attitude+0x530>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fd ffcd 	bl	8000548 <__aeabi_f2d>
 80025ae:	4604      	mov	r4, r0
 80025b0:	460d      	mov	r5, r1
 80025b2:	4b6f      	ldr	r3, [pc, #444]	; (8002770 <Calculate_Attitude+0x528>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fd ffc6 	bl	8000548 <__aeabi_f2d>
 80025bc:	4680      	mov	r8, r0
 80025be:	4689      	mov	r9, r1
 80025c0:	4b6e      	ldr	r3, [pc, #440]	; (800277c <Calculate_Attitude+0x534>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fd ffbf 	bl	8000548 <__aeabi_f2d>
 80025ca:	a35d      	add	r3, pc, #372	; (adr r3, 8002740 <Calculate_Attitude+0x4f8>)
 80025cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d0:	f7fe f812 	bl	80005f8 <__aeabi_dmul>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4692      	mov	sl, r2
 80025da:	469b      	mov	fp, r3
 80025dc:	4b61      	ldr	r3, [pc, #388]	; (8002764 <Calculate_Attitude+0x51c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	ee07 3a90 	vmov	s15, r3
 80025e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025e8:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8002768 <Calculate_Attitude+0x520>
 80025ec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80025f0:	ee16 0a90 	vmov	r0, s13
 80025f4:	f7fd ffa8 	bl	8000548 <__aeabi_f2d>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	4650      	mov	r0, sl
 80025fe:	4659      	mov	r1, fp
 8002600:	f7fd fffa 	bl	80005f8 <__aeabi_dmul>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	ec43 2b17 	vmov	d7, r2, r3
 800260c:	eeb0 0a47 	vmov.f32	s0, s14
 8002610:	eef0 0a67 	vmov.f32	s1, s15
 8002614:	f00f fd28 	bl	8012068 <sin>
 8002618:	ec53 2b10 	vmov	r2, r3, d0
 800261c:	4640      	mov	r0, r8
 800261e:	4649      	mov	r1, r9
 8002620:	f7fd ffea 	bl	80005f8 <__aeabi_dmul>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4620      	mov	r0, r4
 800262a:	4629      	mov	r1, r5
 800262c:	f7fd fe2c 	bl	8000288 <__aeabi_dsub>
 8002630:	4603      	mov	r3, r0
 8002632:	460c      	mov	r4, r1
 8002634:	4618      	mov	r0, r3
 8002636:	4621      	mov	r1, r4
 8002638:	f7fe fab6 	bl	8000ba8 <__aeabi_d2f>
 800263c:	4602      	mov	r2, r0
 800263e:	4b4e      	ldr	r3, [pc, #312]	; (8002778 <Calculate_Attitude+0x530>)
 8002640:	601a      	str	r2, [r3, #0]

	gyro_x_angle = (gyro_x_angle * 0.9975) + (acc_x * (1.0000 - 0.9975));
 8002642:	4b4b      	ldr	r3, [pc, #300]	; (8002770 <Calculate_Attitude+0x528>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f7fd ff7e 	bl	8000548 <__aeabi_f2d>
 800264c:	a33e      	add	r3, pc, #248	; (adr r3, 8002748 <Calculate_Attitude+0x500>)
 800264e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002652:	f7fd ffd1 	bl	80005f8 <__aeabi_dmul>
 8002656:	4603      	mov	r3, r0
 8002658:	460c      	mov	r4, r1
 800265a:	4625      	mov	r5, r4
 800265c:	461c      	mov	r4, r3
 800265e:	4b49      	ldr	r3, [pc, #292]	; (8002784 <Calculate_Attitude+0x53c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7fd ff70 	bl	8000548 <__aeabi_f2d>
 8002668:	a339      	add	r3, pc, #228	; (adr r3, 8002750 <Calculate_Attitude+0x508>)
 800266a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266e:	f7fd ffc3 	bl	80005f8 <__aeabi_dmul>
 8002672:	4602      	mov	r2, r0
 8002674:	460b      	mov	r3, r1
 8002676:	4620      	mov	r0, r4
 8002678:	4629      	mov	r1, r5
 800267a:	f7fd fe07 	bl	800028c <__adddf3>
 800267e:	4603      	mov	r3, r0
 8002680:	460c      	mov	r4, r1
 8002682:	4618      	mov	r0, r3
 8002684:	4621      	mov	r1, r4
 8002686:	f7fe fa8f 	bl	8000ba8 <__aeabi_d2f>
 800268a:	4602      	mov	r2, r0
 800268c:	4b38      	ldr	r3, [pc, #224]	; (8002770 <Calculate_Attitude+0x528>)
 800268e:	601a      	str	r2, [r3, #0]
	gyro_y_angle = (gyro_y_angle * 0.9975) + (acc_y * (1.0000 - 0.9975));
 8002690:	4b39      	ldr	r3, [pc, #228]	; (8002778 <Calculate_Attitude+0x530>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7fd ff57 	bl	8000548 <__aeabi_f2d>
 800269a:	a32b      	add	r3, pc, #172	; (adr r3, 8002748 <Calculate_Attitude+0x500>)
 800269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a0:	f7fd ffaa 	bl	80005f8 <__aeabi_dmul>
 80026a4:	4603      	mov	r3, r0
 80026a6:	460c      	mov	r4, r1
 80026a8:	4625      	mov	r5, r4
 80026aa:	461c      	mov	r4, r3
 80026ac:	4b2c      	ldr	r3, [pc, #176]	; (8002760 <Calculate_Attitude+0x518>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fd ff49 	bl	8000548 <__aeabi_f2d>
 80026b6:	a326      	add	r3, pc, #152	; (adr r3, 8002750 <Calculate_Attitude+0x508>)
 80026b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026bc:	f7fd ff9c 	bl	80005f8 <__aeabi_dmul>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4620      	mov	r0, r4
 80026c6:	4629      	mov	r1, r5
 80026c8:	f7fd fde0 	bl	800028c <__adddf3>
 80026cc:	4603      	mov	r3, r0
 80026ce:	460c      	mov	r4, r1
 80026d0:	4618      	mov	r0, r3
 80026d2:	4621      	mov	r1, r4
 80026d4:	f7fe fa68 	bl	8000ba8 <__aeabi_d2f>
 80026d8:	4602      	mov	r2, r0
 80026da:	4b27      	ldr	r3, [pc, #156]	; (8002778 <Calculate_Attitude+0x530>)
 80026dc:	601a      	str	r2, [r3, #0]

	if(gyro_z_angle < 0)
 80026de:	4b28      	ldr	r3, [pc, #160]	; (8002780 <Calculate_Attitude+0x538>)
 80026e0:	edd3 7a00 	vldr	s15, [r3]
 80026e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ec:	d509      	bpl.n	8002702 <Calculate_Attitude+0x4ba>
		gyro_z_angle += 360;
 80026ee:	4b24      	ldr	r3, [pc, #144]	; (8002780 <Calculate_Attitude+0x538>)
 80026f0:	edd3 7a00 	vldr	s15, [r3]
 80026f4:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002788 <Calculate_Attitude+0x540>
 80026f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026fc:	4b20      	ldr	r3, [pc, #128]	; (8002780 <Calculate_Attitude+0x538>)
 80026fe:	edc3 7a00 	vstr	s15, [r3]
	if(gyro_z_angle >= 360)
 8002702:	4b1f      	ldr	r3, [pc, #124]	; (8002780 <Calculate_Attitude+0x538>)
 8002704:	edd3 7a00 	vldr	s15, [r3]
 8002708:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002788 <Calculate_Attitude+0x540>
 800270c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002714:	db09      	blt.n	800272a <Calculate_Attitude+0x4e2>
		gyro_z_angle -= 360;
 8002716:	4b1a      	ldr	r3, [pc, #104]	; (8002780 <Calculate_Attitude+0x538>)
 8002718:	edd3 7a00 	vldr	s15, [r3]
 800271c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002788 <Calculate_Attitude+0x540>
 8002720:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002724:	4b16      	ldr	r3, [pc, #88]	; (8002780 <Calculate_Attitude+0x538>)
 8002726:	edc3 7a00 	vstr	s15, [r3]

	CalculateHeadingDifference(gyro_z_angle, compass_heading);
 800272a:	4b15      	ldr	r3, [pc, #84]	; (8002780 <Calculate_Attitude+0x538>)
 800272c:	edd3 7a00 	vldr	s15, [r3]
 8002730:	4b16      	ldr	r3, [pc, #88]	; (800278c <Calculate_Attitude+0x544>)
 8002732:	ed93 7a00 	vldr	s14, [r3]
 8002736:	e02b      	b.n	8002790 <Calculate_Attitude+0x548>
 8002738:	53f7ced9 	.word	0x53f7ced9
 800273c:	404ca5e3 	.word	0x404ca5e3
 8002740:	ad42c3ca 	.word	0xad42c3ca
 8002744:	3f91de69 	.word	0x3f91de69
 8002748:	1eb851ec 	.word	0x1eb851ec
 800274c:	3fefeb85 	.word	0x3fefeb85
 8002750:	47ae1400 	.word	0x47ae1400
 8002754:	3f647ae1 	.word	0x3f647ae1
 8002758:	200020f0 	.word	0x200020f0
 800275c:	20002108 	.word	0x20002108
 8002760:	200020c4 	.word	0x200020c4
 8002764:	20002198 	.word	0x20002198
 8002768:	49742400 	.word	0x49742400
 800276c:	200020fc 	.word	0x200020fc
 8002770:	200020d0 	.word	0x200020d0
 8002774:	200020d4 	.word	0x200020d4
 8002778:	200020dc 	.word	0x200020dc
 800277c:	20002130 	.word	0x20002130
 8002780:	20002104 	.word	0x20002104
 8002784:	2000210c 	.word	0x2000210c
 8002788:	43b40000 	.word	0x43b40000
 800278c:	20000298 	.word	0x20000298
 8002790:	eef0 0a47 	vmov.f32	s1, s14
 8002794:	eeb0 0a67 	vmov.f32	s0, s15
 8002798:	f7ff fce8 	bl	800216c <CalculateHeadingDifference>

	if (heading_difference_return > 5 || heading_difference_return < -5)
 800279c:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <Calculate_Attitude+0x58c>)
 800279e:	edd3 7a00 	vldr	s15, [r3]
 80027a2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80027a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ae:	dc0a      	bgt.n	80027c6 <Calculate_Attitude+0x57e>
 80027b0:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <Calculate_Attitude+0x58c>)
 80027b2:	edd3 7a00 	vldr	s15, [r3]
 80027b6:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 80027ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c2:	d400      	bmi.n	80027c6 <Calculate_Attitude+0x57e>
		gyro_z_angle = compass_heading;
}
 80027c4:	e003      	b.n	80027ce <Calculate_Attitude+0x586>
		gyro_z_angle = compass_heading;
 80027c6:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <Calculate_Attitude+0x590>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a04      	ldr	r2, [pc, #16]	; (80027dc <Calculate_Attitude+0x594>)
 80027cc:	6013      	str	r3, [r2, #0]
}
 80027ce:	bf00      	nop
 80027d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027d4:	200002b0 	.word	0x200002b0
 80027d8:	20000298 	.word	0x20000298
 80027dc:	20002104 	.word	0x20002104

080027e0 <Motor_PID>:

void Motor_PID()
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
	pid_roll_setpoint = 0;
 80027e4:	4bbb      	ldr	r3, [pc, #748]	; (8002ad4 <Motor_PID+0x2f4>)
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
	pid_pitch_setpoint = 0;
 80027ec:	4bba      	ldr	r3, [pc, #744]	; (8002ad8 <Motor_PID+0x2f8>)
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
	pid_yaw_setpoint = 0;
 80027f4:	4bb9      	ldr	r3, [pc, #740]	; (8002adc <Motor_PID+0x2fc>)
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]

	//Temp motor control
	if(ppm_channels[0] > 1505)
 80027fc:	4bb8      	ldr	r3, [pc, #736]	; (8002ae0 <Motor_PID+0x300>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f240 52e1 	movw	r2, #1505	; 0x5e1
 8002804:	4293      	cmp	r3, r2
 8002806:	dd0b      	ble.n	8002820 <Motor_PID+0x40>
		pid_roll_setpoint = ppm_channels[0] - 1505;
 8002808:	4bb5      	ldr	r3, [pc, #724]	; (8002ae0 <Motor_PID+0x300>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f2a3 53e1 	subw	r3, r3, #1505	; 0x5e1
 8002810:	ee07 3a90 	vmov	s15, r3
 8002814:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002818:	4bae      	ldr	r3, [pc, #696]	; (8002ad4 <Motor_PID+0x2f4>)
 800281a:	edc3 7a00 	vstr	s15, [r3]
 800281e:	e010      	b.n	8002842 <Motor_PID+0x62>
	else if(ppm_channels[0] < 1495)
 8002820:	4baf      	ldr	r3, [pc, #700]	; (8002ae0 <Motor_PID+0x300>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f240 52d6 	movw	r2, #1494	; 0x5d6
 8002828:	4293      	cmp	r3, r2
 800282a:	dc0a      	bgt.n	8002842 <Motor_PID+0x62>
		pid_roll_setpoint = ppm_channels[0] - 1495;
 800282c:	4bac      	ldr	r3, [pc, #688]	; (8002ae0 <Motor_PID+0x300>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f2a3 53d7 	subw	r3, r3, #1495	; 0x5d7
 8002834:	ee07 3a90 	vmov	s15, r3
 8002838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800283c:	4ba5      	ldr	r3, [pc, #660]	; (8002ad4 <Motor_PID+0x2f4>)
 800283e:	edc3 7a00 	vstr	s15, [r3]

	if(ppm_channels[1] > 1505)
 8002842:	4ba7      	ldr	r3, [pc, #668]	; (8002ae0 <Motor_PID+0x300>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f240 52e1 	movw	r2, #1505	; 0x5e1
 800284a:	4293      	cmp	r3, r2
 800284c:	dd0b      	ble.n	8002866 <Motor_PID+0x86>
		pid_pitch_setpoint = ppm_channels[1] - 1505;
 800284e:	4ba4      	ldr	r3, [pc, #656]	; (8002ae0 <Motor_PID+0x300>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f2a3 53e1 	subw	r3, r3, #1505	; 0x5e1
 8002856:	ee07 3a90 	vmov	s15, r3
 800285a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800285e:	4b9e      	ldr	r3, [pc, #632]	; (8002ad8 <Motor_PID+0x2f8>)
 8002860:	edc3 7a00 	vstr	s15, [r3]
 8002864:	e010      	b.n	8002888 <Motor_PID+0xa8>
	else if(ppm_channels[1] < 1495)
 8002866:	4b9e      	ldr	r3, [pc, #632]	; (8002ae0 <Motor_PID+0x300>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f240 52d6 	movw	r2, #1494	; 0x5d6
 800286e:	4293      	cmp	r3, r2
 8002870:	dc0a      	bgt.n	8002888 <Motor_PID+0xa8>
		pid_pitch_setpoint = ppm_channels[1] - 1495;
 8002872:	4b9b      	ldr	r3, [pc, #620]	; (8002ae0 <Motor_PID+0x300>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f2a3 53d7 	subw	r3, r3, #1495	; 0x5d7
 800287a:	ee07 3a90 	vmov	s15, r3
 800287e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002882:	4b95      	ldr	r3, [pc, #596]	; (8002ad8 <Motor_PID+0x2f8>)
 8002884:	edc3 7a00 	vstr	s15, [r3]

	if(ppm_channels[3] > 1505)
 8002888:	4b95      	ldr	r3, [pc, #596]	; (8002ae0 <Motor_PID+0x300>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	f240 52e1 	movw	r2, #1505	; 0x5e1
 8002890:	4293      	cmp	r3, r2
 8002892:	dd0b      	ble.n	80028ac <Motor_PID+0xcc>
		pid_yaw_setpoint = ppm_channels[3] - 1505;
 8002894:	4b92      	ldr	r3, [pc, #584]	; (8002ae0 <Motor_PID+0x300>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f2a3 53e1 	subw	r3, r3, #1505	; 0x5e1
 800289c:	ee07 3a90 	vmov	s15, r3
 80028a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028a4:	4b8d      	ldr	r3, [pc, #564]	; (8002adc <Motor_PID+0x2fc>)
 80028a6:	edc3 7a00 	vstr	s15, [r3]
 80028aa:	e010      	b.n	80028ce <Motor_PID+0xee>
	else if(ppm_channels[3] < 1495)
 80028ac:	4b8c      	ldr	r3, [pc, #560]	; (8002ae0 <Motor_PID+0x300>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f240 52d6 	movw	r2, #1494	; 0x5d6
 80028b4:	4293      	cmp	r3, r2
 80028b6:	dc0a      	bgt.n	80028ce <Motor_PID+0xee>
		pid_yaw_setpoint = ppm_channels[3] - 1495;
 80028b8:	4b89      	ldr	r3, [pc, #548]	; (8002ae0 <Motor_PID+0x300>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f2a3 53d7 	subw	r3, r3, #1495	; 0x5d7
 80028c0:	ee07 3a90 	vmov	s15, r3
 80028c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028c8:	4b84      	ldr	r3, [pc, #528]	; (8002adc <Motor_PID+0x2fc>)
 80028ca:	edc3 7a00 	vstr	s15, [r3]

	if(gps_hold_flag)
 80028ce:	4b85      	ldr	r3, [pc, #532]	; (8002ae4 <Motor_PID+0x304>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d01b      	beq.n	800290e <Motor_PID+0x12e>
	{
		pid_roll_setpoint += gps_roll_modifier;
 80028d6:	4b84      	ldr	r3, [pc, #528]	; (8002ae8 <Motor_PID+0x308>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	ee07 3a90 	vmov	s15, r3
 80028de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028e2:	4b7c      	ldr	r3, [pc, #496]	; (8002ad4 <Motor_PID+0x2f4>)
 80028e4:	edd3 7a00 	vldr	s15, [r3]
 80028e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ec:	4b79      	ldr	r3, [pc, #484]	; (8002ad4 <Motor_PID+0x2f4>)
 80028ee:	edc3 7a00 	vstr	s15, [r3]
		pid_pitch_setpoint += gps_pitch_modifier;
 80028f2:	4b7e      	ldr	r3, [pc, #504]	; (8002aec <Motor_PID+0x30c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	ee07 3a90 	vmov	s15, r3
 80028fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028fe:	4b76      	ldr	r3, [pc, #472]	; (8002ad8 <Motor_PID+0x2f8>)
 8002900:	edd3 7a00 	vldr	s15, [r3]
 8002904:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002908:	4b73      	ldr	r3, [pc, #460]	; (8002ad8 <Motor_PID+0x2f8>)
 800290a:	edc3 7a00 	vstr	s15, [r3]
	}

	if(optical_flow_flag)
 800290e:	4b78      	ldr	r3, [pc, #480]	; (8002af0 <Motor_PID+0x310>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d015      	beq.n	8002942 <Motor_PID+0x162>
	{
		pid_roll_setpoint += camera_roll_modifier;
 8002916:	4b6f      	ldr	r3, [pc, #444]	; (8002ad4 <Motor_PID+0x2f4>)
 8002918:	ed93 7a00 	vldr	s14, [r3]
 800291c:	4b75      	ldr	r3, [pc, #468]	; (8002af4 <Motor_PID+0x314>)
 800291e:	edd3 7a00 	vldr	s15, [r3]
 8002922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002926:	4b6b      	ldr	r3, [pc, #428]	; (8002ad4 <Motor_PID+0x2f4>)
 8002928:	edc3 7a00 	vstr	s15, [r3]
		pid_pitch_setpoint += camera_pitch_modifier;
 800292c:	4b6a      	ldr	r3, [pc, #424]	; (8002ad8 <Motor_PID+0x2f8>)
 800292e:	ed93 7a00 	vldr	s14, [r3]
 8002932:	4b71      	ldr	r3, [pc, #452]	; (8002af8 <Motor_PID+0x318>)
 8002934:	edd3 7a00 	vldr	s15, [r3]
 8002938:	ee77 7a27 	vadd.f32	s15, s14, s15
 800293c:	4b66      	ldr	r3, [pc, #408]	; (8002ad8 <Motor_PID+0x2f8>)
 800293e:	edc3 7a00 	vstr	s15, [r3]
	}

	pid_roll_setpoint -= ((gyro_x_angle) * 15);
 8002942:	4b64      	ldr	r3, [pc, #400]	; (8002ad4 <Motor_PID+0x2f4>)
 8002944:	ed93 7a00 	vldr	s14, [r3]
 8002948:	4b6c      	ldr	r3, [pc, #432]	; (8002afc <Motor_PID+0x31c>)
 800294a:	edd3 7a00 	vldr	s15, [r3]
 800294e:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8002952:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002956:	ee77 7a67 	vsub.f32	s15, s14, s15
 800295a:	4b5e      	ldr	r3, [pc, #376]	; (8002ad4 <Motor_PID+0x2f4>)
 800295c:	edc3 7a00 	vstr	s15, [r3]
	pid_pitch_setpoint -= ((gyro_y_angle) * 15);
 8002960:	4b5d      	ldr	r3, [pc, #372]	; (8002ad8 <Motor_PID+0x2f8>)
 8002962:	ed93 7a00 	vldr	s14, [r3]
 8002966:	4b66      	ldr	r3, [pc, #408]	; (8002b00 <Motor_PID+0x320>)
 8002968:	edd3 7a00 	vldr	s15, [r3]
 800296c:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8002970:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002974:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002978:	4b57      	ldr	r3, [pc, #348]	; (8002ad8 <Motor_PID+0x2f8>)
 800297a:	edc3 7a00 	vstr	s15, [r3]

	pid_roll_setpoint /= 3.0;
 800297e:	4b55      	ldr	r3, [pc, #340]	; (8002ad4 <Motor_PID+0x2f4>)
 8002980:	ed93 7a00 	vldr	s14, [r3]
 8002984:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002988:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800298c:	4b51      	ldr	r3, [pc, #324]	; (8002ad4 <Motor_PID+0x2f4>)
 800298e:	edc3 7a00 	vstr	s15, [r3]
	pid_pitch_setpoint /= 3.0;
 8002992:	4b51      	ldr	r3, [pc, #324]	; (8002ad8 <Motor_PID+0x2f8>)
 8002994:	ed93 7a00 	vldr	s14, [r3]
 8002998:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800299c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029a0:	4b4d      	ldr	r3, [pc, #308]	; (8002ad8 <Motor_PID+0x2f8>)
 80029a2:	edc3 7a00 	vstr	s15, [r3]
	pid_yaw_setpoint /= 3.0;
 80029a6:	4b4d      	ldr	r3, [pc, #308]	; (8002adc <Motor_PID+0x2fc>)
 80029a8:	ed93 7a00 	vldr	s14, [r3]
 80029ac:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80029b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029b4:	4b49      	ldr	r3, [pc, #292]	; (8002adc <Motor_PID+0x2fc>)
 80029b6:	edc3 7a00 	vstr	s15, [r3]

	pid_error_temp = pid_roll_setpoint - gyro_x;
 80029ba:	4b46      	ldr	r3, [pc, #280]	; (8002ad4 <Motor_PID+0x2f4>)
 80029bc:	ed93 7a00 	vldr	s14, [r3]
 80029c0:	4b50      	ldr	r3, [pc, #320]	; (8002b04 <Motor_PID+0x324>)
 80029c2:	edd3 7a00 	vldr	s15, [r3]
 80029c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029ca:	4b4f      	ldr	r3, [pc, #316]	; (8002b08 <Motor_PID+0x328>)
 80029cc:	edc3 7a00 	vstr	s15, [r3]
	pid_roll_i += (pid_error_temp * ki_roll * how_long_to_loop_modifier);
 80029d0:	4b4d      	ldr	r3, [pc, #308]	; (8002b08 <Motor_PID+0x328>)
 80029d2:	ed93 7a00 	vldr	s14, [r3]
 80029d6:	4b4d      	ldr	r3, [pc, #308]	; (8002b0c <Motor_PID+0x32c>)
 80029d8:	edd3 7a00 	vldr	s15, [r3]
 80029dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029e0:	4b4b      	ldr	r3, [pc, #300]	; (8002b10 <Motor_PID+0x330>)
 80029e2:	edd3 7a00 	vldr	s15, [r3]
 80029e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029ea:	4b4a      	ldr	r3, [pc, #296]	; (8002b14 <Motor_PID+0x334>)
 80029ec:	edd3 7a00 	vldr	s15, [r3]
 80029f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f4:	4b47      	ldr	r3, [pc, #284]	; (8002b14 <Motor_PID+0x334>)
 80029f6:	edc3 7a00 	vstr	s15, [r3]

	if(pid_roll_i > max_motor_pid_output)
 80029fa:	4b47      	ldr	r3, [pc, #284]	; (8002b18 <Motor_PID+0x338>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	ee07 3a90 	vmov	s15, r3
 8002a02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a06:	4b43      	ldr	r3, [pc, #268]	; (8002b14 <Motor_PID+0x334>)
 8002a08:	edd3 7a00 	vldr	s15, [r3]
 8002a0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a14:	d509      	bpl.n	8002a2a <Motor_PID+0x24a>
		pid_roll_i = max_motor_pid_output;
 8002a16:	4b40      	ldr	r3, [pc, #256]	; (8002b18 <Motor_PID+0x338>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	ee07 3a90 	vmov	s15, r3
 8002a1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a22:	4b3c      	ldr	r3, [pc, #240]	; (8002b14 <Motor_PID+0x334>)
 8002a24:	edc3 7a00 	vstr	s15, [r3]
 8002a28:	e018      	b.n	8002a5c <Motor_PID+0x27c>
	else if(pid_roll_i < (max_motor_pid_output * -1))
 8002a2a:	4b3b      	ldr	r3, [pc, #236]	; (8002b18 <Motor_PID+0x338>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	425b      	negs	r3, r3
 8002a30:	ee07 3a90 	vmov	s15, r3
 8002a34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a38:	4b36      	ldr	r3, [pc, #216]	; (8002b14 <Motor_PID+0x334>)
 8002a3a:	edd3 7a00 	vldr	s15, [r3]
 8002a3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a46:	dd09      	ble.n	8002a5c <Motor_PID+0x27c>
		pid_roll_i = (max_motor_pid_output * -1);
 8002a48:	4b33      	ldr	r3, [pc, #204]	; (8002b18 <Motor_PID+0x338>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	425b      	negs	r3, r3
 8002a4e:	ee07 3a90 	vmov	s15, r3
 8002a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a56:	4b2f      	ldr	r3, [pc, #188]	; (8002b14 <Motor_PID+0x334>)
 8002a58:	edc3 7a00 	vstr	s15, [r3]

	pid_roll_output = (pid_error_temp * kp_roll * how_long_to_loop_modifier) + pid_roll_i + ((pid_error_temp - pid_roll_last_error) * kd_roll * how_long_to_loop_modifier);
 8002a5c:	4b2a      	ldr	r3, [pc, #168]	; (8002b08 <Motor_PID+0x328>)
 8002a5e:	ed93 7a00 	vldr	s14, [r3]
 8002a62:	4b2e      	ldr	r3, [pc, #184]	; (8002b1c <Motor_PID+0x33c>)
 8002a64:	edd3 7a00 	vldr	s15, [r3]
 8002a68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a6c:	4b28      	ldr	r3, [pc, #160]	; (8002b10 <Motor_PID+0x330>)
 8002a6e:	edd3 7a00 	vldr	s15, [r3]
 8002a72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a76:	4b27      	ldr	r3, [pc, #156]	; (8002b14 <Motor_PID+0x334>)
 8002a78:	edd3 7a00 	vldr	s15, [r3]
 8002a7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a80:	4b21      	ldr	r3, [pc, #132]	; (8002b08 <Motor_PID+0x328>)
 8002a82:	edd3 6a00 	vldr	s13, [r3]
 8002a86:	4b26      	ldr	r3, [pc, #152]	; (8002b20 <Motor_PID+0x340>)
 8002a88:	edd3 7a00 	vldr	s15, [r3]
 8002a8c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002a90:	4b24      	ldr	r3, [pc, #144]	; (8002b24 <Motor_PID+0x344>)
 8002a92:	edd3 7a00 	vldr	s15, [r3]
 8002a96:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a9a:	4b1d      	ldr	r3, [pc, #116]	; (8002b10 <Motor_PID+0x330>)
 8002a9c:	edd3 7a00 	vldr	s15, [r3]
 8002aa0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002aac:	ee17 2a90 	vmov	r2, s15
 8002ab0:	4b1d      	ldr	r3, [pc, #116]	; (8002b28 <Motor_PID+0x348>)
 8002ab2:	601a      	str	r2, [r3, #0]

	pid_roll_last_error = pid_error_temp;
 8002ab4:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <Motor_PID+0x328>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a19      	ldr	r2, [pc, #100]	; (8002b20 <Motor_PID+0x340>)
 8002aba:	6013      	str	r3, [r2, #0]

	if(pid_roll_output > max_motor_pid_output)
 8002abc:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <Motor_PID+0x348>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <Motor_PID+0x338>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	dd31      	ble.n	8002b2c <Motor_PID+0x34c>
		pid_roll_output = max_motor_pid_output;
 8002ac8:	4b13      	ldr	r3, [pc, #76]	; (8002b18 <Motor_PID+0x338>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a16      	ldr	r2, [pc, #88]	; (8002b28 <Motor_PID+0x348>)
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	e038      	b.n	8002b44 <Motor_PID+0x364>
 8002ad2:	bf00      	nop
 8002ad4:	2000106c 	.word	0x2000106c
 8002ad8:	20001070 	.word	0x20001070
 8002adc:	20001064 	.word	0x20001064
 8002ae0:	200021c8 	.word	0x200021c8
 8002ae4:	20000382 	.word	0x20000382
 8002ae8:	2000089c 	.word	0x2000089c
 8002aec:	20001234 	.word	0x20001234
 8002af0:	20000385 	.word	0x20000385
 8002af4:	20000898 	.word	0x20000898
 8002af8:	20001230 	.word	0x20001230
 8002afc:	200020d0 	.word	0x200020d0
 8002b00:	200020dc 	.word	0x200020dc
 8002b04:	200020fc 	.word	0x200020fc
 8002b08:	2000124c 	.word	0x2000124c
 8002b0c:	200002bc 	.word	0x200002bc
 8002b10:	2000006c 	.word	0x2000006c
 8002b14:	2000052c 	.word	0x2000052c
 8002b18:	2000001c 	.word	0x2000001c
 8002b1c:	200002b4 	.word	0x200002b4
 8002b20:	20000894 	.word	0x20000894
 8002b24:	200002c4 	.word	0x200002c4
 8002b28:	20000c18 	.word	0x20000c18
	else if(pid_roll_output < (max_motor_pid_output * -1))
 8002b2c:	4ba0      	ldr	r3, [pc, #640]	; (8002db0 <Motor_PID+0x5d0>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	425a      	negs	r2, r3
 8002b32:	4ba0      	ldr	r3, [pc, #640]	; (8002db4 <Motor_PID+0x5d4>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	dd04      	ble.n	8002b44 <Motor_PID+0x364>
		pid_roll_output = (max_motor_pid_output * -1);
 8002b3a:	4b9d      	ldr	r3, [pc, #628]	; (8002db0 <Motor_PID+0x5d0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	425b      	negs	r3, r3
 8002b40:	4a9c      	ldr	r2, [pc, #624]	; (8002db4 <Motor_PID+0x5d4>)
 8002b42:	6013      	str	r3, [r2, #0]

	pid_error_temp = pid_pitch_setpoint - gyro_y;
 8002b44:	4b9c      	ldr	r3, [pc, #624]	; (8002db8 <Motor_PID+0x5d8>)
 8002b46:	ed93 7a00 	vldr	s14, [r3]
 8002b4a:	4b9c      	ldr	r3, [pc, #624]	; (8002dbc <Motor_PID+0x5dc>)
 8002b4c:	edd3 7a00 	vldr	s15, [r3]
 8002b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b54:	4b9a      	ldr	r3, [pc, #616]	; (8002dc0 <Motor_PID+0x5e0>)
 8002b56:	edc3 7a00 	vstr	s15, [r3]
	pid_pitch_i += (pid_error_temp * ki_roll * how_long_to_loop_modifier);
 8002b5a:	4b99      	ldr	r3, [pc, #612]	; (8002dc0 <Motor_PID+0x5e0>)
 8002b5c:	ed93 7a00 	vldr	s14, [r3]
 8002b60:	4b98      	ldr	r3, [pc, #608]	; (8002dc4 <Motor_PID+0x5e4>)
 8002b62:	edd3 7a00 	vldr	s15, [r3]
 8002b66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b6a:	4b97      	ldr	r3, [pc, #604]	; (8002dc8 <Motor_PID+0x5e8>)
 8002b6c:	edd3 7a00 	vldr	s15, [r3]
 8002b70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b74:	4b95      	ldr	r3, [pc, #596]	; (8002dcc <Motor_PID+0x5ec>)
 8002b76:	edd3 7a00 	vldr	s15, [r3]
 8002b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b7e:	4b93      	ldr	r3, [pc, #588]	; (8002dcc <Motor_PID+0x5ec>)
 8002b80:	edc3 7a00 	vstr	s15, [r3]

	if(pid_pitch_i > max_motor_pid_output)
 8002b84:	4b8a      	ldr	r3, [pc, #552]	; (8002db0 <Motor_PID+0x5d0>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	ee07 3a90 	vmov	s15, r3
 8002b8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b90:	4b8e      	ldr	r3, [pc, #568]	; (8002dcc <Motor_PID+0x5ec>)
 8002b92:	edd3 7a00 	vldr	s15, [r3]
 8002b96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9e:	d509      	bpl.n	8002bb4 <Motor_PID+0x3d4>
		pid_pitch_i = max_motor_pid_output;
 8002ba0:	4b83      	ldr	r3, [pc, #524]	; (8002db0 <Motor_PID+0x5d0>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	ee07 3a90 	vmov	s15, r3
 8002ba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bac:	4b87      	ldr	r3, [pc, #540]	; (8002dcc <Motor_PID+0x5ec>)
 8002bae:	edc3 7a00 	vstr	s15, [r3]
 8002bb2:	e018      	b.n	8002be6 <Motor_PID+0x406>
	else if(pid_pitch_i < (max_motor_pid_output * -1))
 8002bb4:	4b7e      	ldr	r3, [pc, #504]	; (8002db0 <Motor_PID+0x5d0>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	425b      	negs	r3, r3
 8002bba:	ee07 3a90 	vmov	s15, r3
 8002bbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bc2:	4b82      	ldr	r3, [pc, #520]	; (8002dcc <Motor_PID+0x5ec>)
 8002bc4:	edd3 7a00 	vldr	s15, [r3]
 8002bc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd0:	dd09      	ble.n	8002be6 <Motor_PID+0x406>
		pid_pitch_i = (max_motor_pid_output * -1);
 8002bd2:	4b77      	ldr	r3, [pc, #476]	; (8002db0 <Motor_PID+0x5d0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	425b      	negs	r3, r3
 8002bd8:	ee07 3a90 	vmov	s15, r3
 8002bdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002be0:	4b7a      	ldr	r3, [pc, #488]	; (8002dcc <Motor_PID+0x5ec>)
 8002be2:	edc3 7a00 	vstr	s15, [r3]

	pid_pitch_output = (pid_error_temp * kp_roll * how_long_to_loop_modifier) + pid_pitch_i + ((pid_error_temp - pid_pitch_last_error) * kd_roll * how_long_to_loop_modifier);
 8002be6:	4b76      	ldr	r3, [pc, #472]	; (8002dc0 <Motor_PID+0x5e0>)
 8002be8:	ed93 7a00 	vldr	s14, [r3]
 8002bec:	4b78      	ldr	r3, [pc, #480]	; (8002dd0 <Motor_PID+0x5f0>)
 8002bee:	edd3 7a00 	vldr	s15, [r3]
 8002bf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bf6:	4b74      	ldr	r3, [pc, #464]	; (8002dc8 <Motor_PID+0x5e8>)
 8002bf8:	edd3 7a00 	vldr	s15, [r3]
 8002bfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c00:	4b72      	ldr	r3, [pc, #456]	; (8002dcc <Motor_PID+0x5ec>)
 8002c02:	edd3 7a00 	vldr	s15, [r3]
 8002c06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c0a:	4b6d      	ldr	r3, [pc, #436]	; (8002dc0 <Motor_PID+0x5e0>)
 8002c0c:	edd3 6a00 	vldr	s13, [r3]
 8002c10:	4b70      	ldr	r3, [pc, #448]	; (8002dd4 <Motor_PID+0x5f4>)
 8002c12:	edd3 7a00 	vldr	s15, [r3]
 8002c16:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c1a:	4b6f      	ldr	r3, [pc, #444]	; (8002dd8 <Motor_PID+0x5f8>)
 8002c1c:	edd3 7a00 	vldr	s15, [r3]
 8002c20:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c24:	4b68      	ldr	r3, [pc, #416]	; (8002dc8 <Motor_PID+0x5e8>)
 8002c26:	edd3 7a00 	vldr	s15, [r3]
 8002c2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c36:	ee17 2a90 	vmov	r2, s15
 8002c3a:	4b68      	ldr	r3, [pc, #416]	; (8002ddc <Motor_PID+0x5fc>)
 8002c3c:	601a      	str	r2, [r3, #0]

	pid_pitch_last_error = pid_error_temp;
 8002c3e:	4b60      	ldr	r3, [pc, #384]	; (8002dc0 <Motor_PID+0x5e0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a64      	ldr	r2, [pc, #400]	; (8002dd4 <Motor_PID+0x5f4>)
 8002c44:	6013      	str	r3, [r2, #0]

	if(pid_pitch_output > max_motor_pid_output)
 8002c46:	4b65      	ldr	r3, [pc, #404]	; (8002ddc <Motor_PID+0x5fc>)
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	4b59      	ldr	r3, [pc, #356]	; (8002db0 <Motor_PID+0x5d0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	dd04      	ble.n	8002c5c <Motor_PID+0x47c>
		pid_pitch_output = max_motor_pid_output;
 8002c52:	4b57      	ldr	r3, [pc, #348]	; (8002db0 <Motor_PID+0x5d0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a61      	ldr	r2, [pc, #388]	; (8002ddc <Motor_PID+0x5fc>)
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	e00b      	b.n	8002c74 <Motor_PID+0x494>
	else if(pid_pitch_output < (max_motor_pid_output * -1))
 8002c5c:	4b54      	ldr	r3, [pc, #336]	; (8002db0 <Motor_PID+0x5d0>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	425a      	negs	r2, r3
 8002c62:	4b5e      	ldr	r3, [pc, #376]	; (8002ddc <Motor_PID+0x5fc>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	dd04      	ble.n	8002c74 <Motor_PID+0x494>
		pid_pitch_output = (max_motor_pid_output * -1);
 8002c6a:	4b51      	ldr	r3, [pc, #324]	; (8002db0 <Motor_PID+0x5d0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	425b      	negs	r3, r3
 8002c70:	4a5a      	ldr	r2, [pc, #360]	; (8002ddc <Motor_PID+0x5fc>)
 8002c72:	6013      	str	r3, [r2, #0]

	pid_error_temp = pid_yaw_setpoint - gyro_z;
 8002c74:	4b5a      	ldr	r3, [pc, #360]	; (8002de0 <Motor_PID+0x600>)
 8002c76:	ed93 7a00 	vldr	s14, [r3]
 8002c7a:	4b5a      	ldr	r3, [pc, #360]	; (8002de4 <Motor_PID+0x604>)
 8002c7c:	edd3 7a00 	vldr	s15, [r3]
 8002c80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c84:	4b4e      	ldr	r3, [pc, #312]	; (8002dc0 <Motor_PID+0x5e0>)
 8002c86:	edc3 7a00 	vstr	s15, [r3]
	pid_yaw_i += (pid_error_temp * ki_yaw * how_long_to_loop_modifier);
 8002c8a:	4b4d      	ldr	r3, [pc, #308]	; (8002dc0 <Motor_PID+0x5e0>)
 8002c8c:	ed93 7a00 	vldr	s14, [r3]
 8002c90:	4b55      	ldr	r3, [pc, #340]	; (8002de8 <Motor_PID+0x608>)
 8002c92:	edd3 7a00 	vldr	s15, [r3]
 8002c96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c9a:	4b4b      	ldr	r3, [pc, #300]	; (8002dc8 <Motor_PID+0x5e8>)
 8002c9c:	edd3 7a00 	vldr	s15, [r3]
 8002ca0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ca4:	4b51      	ldr	r3, [pc, #324]	; (8002dec <Motor_PID+0x60c>)
 8002ca6:	edd3 7a00 	vldr	s15, [r3]
 8002caa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cae:	4b4f      	ldr	r3, [pc, #316]	; (8002dec <Motor_PID+0x60c>)
 8002cb0:	edc3 7a00 	vstr	s15, [r3]

	if(pid_yaw_i > max_motor_pid_output)
 8002cb4:	4b3e      	ldr	r3, [pc, #248]	; (8002db0 <Motor_PID+0x5d0>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	ee07 3a90 	vmov	s15, r3
 8002cbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cc0:	4b4a      	ldr	r3, [pc, #296]	; (8002dec <Motor_PID+0x60c>)
 8002cc2:	edd3 7a00 	vldr	s15, [r3]
 8002cc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cce:	d509      	bpl.n	8002ce4 <Motor_PID+0x504>
		pid_yaw_i = max_motor_pid_output;
 8002cd0:	4b37      	ldr	r3, [pc, #220]	; (8002db0 <Motor_PID+0x5d0>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	ee07 3a90 	vmov	s15, r3
 8002cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cdc:	4b43      	ldr	r3, [pc, #268]	; (8002dec <Motor_PID+0x60c>)
 8002cde:	edc3 7a00 	vstr	s15, [r3]
 8002ce2:	e018      	b.n	8002d16 <Motor_PID+0x536>
	else if(pid_yaw_i < (max_motor_pid_output * -1))
 8002ce4:	4b32      	ldr	r3, [pc, #200]	; (8002db0 <Motor_PID+0x5d0>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	425b      	negs	r3, r3
 8002cea:	ee07 3a90 	vmov	s15, r3
 8002cee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cf2:	4b3e      	ldr	r3, [pc, #248]	; (8002dec <Motor_PID+0x60c>)
 8002cf4:	edd3 7a00 	vldr	s15, [r3]
 8002cf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d00:	dd09      	ble.n	8002d16 <Motor_PID+0x536>
		pid_yaw_i = (max_motor_pid_output * -1);
 8002d02:	4b2b      	ldr	r3, [pc, #172]	; (8002db0 <Motor_PID+0x5d0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	425b      	negs	r3, r3
 8002d08:	ee07 3a90 	vmov	s15, r3
 8002d0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d10:	4b36      	ldr	r3, [pc, #216]	; (8002dec <Motor_PID+0x60c>)
 8002d12:	edc3 7a00 	vstr	s15, [r3]

	pid_yaw_output = (pid_error_temp * kp_yaw * how_long_to_loop_modifier) + pid_yaw_i + ((pid_error_temp - pid_yaw_last_error) * kd_yaw * how_long_to_loop_modifier);
 8002d16:	4b2a      	ldr	r3, [pc, #168]	; (8002dc0 <Motor_PID+0x5e0>)
 8002d18:	ed93 7a00 	vldr	s14, [r3]
 8002d1c:	4b34      	ldr	r3, [pc, #208]	; (8002df0 <Motor_PID+0x610>)
 8002d1e:	edd3 7a00 	vldr	s15, [r3]
 8002d22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d26:	4b28      	ldr	r3, [pc, #160]	; (8002dc8 <Motor_PID+0x5e8>)
 8002d28:	edd3 7a00 	vldr	s15, [r3]
 8002d2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d30:	4b2e      	ldr	r3, [pc, #184]	; (8002dec <Motor_PID+0x60c>)
 8002d32:	edd3 7a00 	vldr	s15, [r3]
 8002d36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d3a:	4b21      	ldr	r3, [pc, #132]	; (8002dc0 <Motor_PID+0x5e0>)
 8002d3c:	edd3 6a00 	vldr	s13, [r3]
 8002d40:	4b2c      	ldr	r3, [pc, #176]	; (8002df4 <Motor_PID+0x614>)
 8002d42:	edd3 7a00 	vldr	s15, [r3]
 8002d46:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002d4a:	4b2b      	ldr	r3, [pc, #172]	; (8002df8 <Motor_PID+0x618>)
 8002d4c:	edd3 7a00 	vldr	s15, [r3]
 8002d50:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d54:	4b1c      	ldr	r3, [pc, #112]	; (8002dc8 <Motor_PID+0x5e8>)
 8002d56:	edd3 7a00 	vldr	s15, [r3]
 8002d5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d66:	ee17 2a90 	vmov	r2, s15
 8002d6a:	4b24      	ldr	r3, [pc, #144]	; (8002dfc <Motor_PID+0x61c>)
 8002d6c:	601a      	str	r2, [r3, #0]

	pid_yaw_last_error = pid_error_temp;
 8002d6e:	4b14      	ldr	r3, [pc, #80]	; (8002dc0 <Motor_PID+0x5e0>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a20      	ldr	r2, [pc, #128]	; (8002df4 <Motor_PID+0x614>)
 8002d74:	6013      	str	r3, [r2, #0]

	if(pid_yaw_output > max_motor_pid_output)
 8002d76:	4b21      	ldr	r3, [pc, #132]	; (8002dfc <Motor_PID+0x61c>)
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	4b0d      	ldr	r3, [pc, #52]	; (8002db0 <Motor_PID+0x5d0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	dd04      	ble.n	8002d8c <Motor_PID+0x5ac>
		pid_yaw_output = max_motor_pid_output;
 8002d82:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <Motor_PID+0x5d0>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a1d      	ldr	r2, [pc, #116]	; (8002dfc <Motor_PID+0x61c>)
 8002d88:	6013      	str	r3, [r2, #0]
	else if(pid_yaw_output < (max_motor_pid_output * -1))
		pid_yaw_output = (max_motor_pid_output * -1);
}
 8002d8a:	e00b      	b.n	8002da4 <Motor_PID+0x5c4>
	else if(pid_yaw_output < (max_motor_pid_output * -1))
 8002d8c:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <Motor_PID+0x5d0>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	425a      	negs	r2, r3
 8002d92:	4b1a      	ldr	r3, [pc, #104]	; (8002dfc <Motor_PID+0x61c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	dd04      	ble.n	8002da4 <Motor_PID+0x5c4>
		pid_yaw_output = (max_motor_pid_output * -1);
 8002d9a:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <Motor_PID+0x5d0>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	425b      	negs	r3, r3
 8002da0:	4a16      	ldr	r2, [pc, #88]	; (8002dfc <Motor_PID+0x61c>)
 8002da2:	6013      	str	r3, [r2, #0]
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	2000001c 	.word	0x2000001c
 8002db4:	20000c18 	.word	0x20000c18
 8002db8:	20001070 	.word	0x20001070
 8002dbc:	200020d4 	.word	0x200020d4
 8002dc0:	2000124c 	.word	0x2000124c
 8002dc4:	200002bc 	.word	0x200002bc
 8002dc8:	2000006c 	.word	0x2000006c
 8002dcc:	200008f0 	.word	0x200008f0
 8002dd0:	200002b4 	.word	0x200002b4
 8002dd4:	20001068 	.word	0x20001068
 8002dd8:	200002c4 	.word	0x200002c4
 8002ddc:	20000c28 	.word	0x20000c28
 8002de0:	20001064 	.word	0x20001064
 8002de4:	20002130 	.word	0x20002130
 8002de8:	200002c0 	.word	0x200002c0
 8002dec:	200008f4 	.word	0x200008f4
 8002df0:	200002b8 	.word	0x200002b8
 8002df4:	20000c2c 	.word	0x20000c2c
 8002df8:	200002c8 	.word	0x200002c8
 8002dfc:	20000528 	.word	0x20000528

08002e00 <Calculate_Motor_Outputs>:

int32_t manual_throttle;
int32_t throttle_output;

void Calculate_Motor_Outputs()
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
	if(ppm_channels[2] < 1008)
 8002e04:	4b68      	ldr	r3, [pc, #416]	; (8002fa8 <Calculate_Motor_Outputs+0x1a8>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 8002e0c:	da03      	bge.n	8002e16 <Calculate_Motor_Outputs+0x16>
		manual_throttle = 125;
 8002e0e:	4b67      	ldr	r3, [pc, #412]	; (8002fac <Calculate_Motor_Outputs+0x1ac>)
 8002e10:	227d      	movs	r2, #125	; 0x7d
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	e008      	b.n	8002e28 <Calculate_Motor_Outputs+0x28>
	else
		manual_throttle = (ppm_channels[2] / 8);
 8002e16:	4b64      	ldr	r3, [pc, #400]	; (8002fa8 <Calculate_Motor_Outputs+0x1a8>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	da00      	bge.n	8002e20 <Calculate_Motor_Outputs+0x20>
 8002e1e:	3307      	adds	r3, #7
 8002e20:	10db      	asrs	r3, r3, #3
 8002e22:	461a      	mov	r2, r3
 8002e24:	4b61      	ldr	r3, [pc, #388]	; (8002fac <Calculate_Motor_Outputs+0x1ac>)
 8002e26:	601a      	str	r2, [r3, #0]

	throttle_output = idle_throttle;
 8002e28:	4b61      	ldr	r3, [pc, #388]	; (8002fb0 <Calculate_Motor_Outputs+0x1b0>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a61      	ldr	r2, [pc, #388]	; (8002fb4 <Calculate_Motor_Outputs+0x1b4>)
 8002e2e:	6013      	str	r3, [r2, #0]

	if(altitude_hold_flag)
 8002e30:	4b61      	ldr	r3, [pc, #388]	; (8002fb8 <Calculate_Motor_Outputs+0x1b8>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d006      	beq.n	8002e46 <Calculate_Motor_Outputs+0x46>
		throttle_output += altitude_pid_output;
 8002e38:	4b5e      	ldr	r3, [pc, #376]	; (8002fb4 <Calculate_Motor_Outputs+0x1b4>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	4b5f      	ldr	r3, [pc, #380]	; (8002fbc <Calculate_Motor_Outputs+0x1bc>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4413      	add	r3, r2
 8002e42:	4a5c      	ldr	r2, [pc, #368]	; (8002fb4 <Calculate_Motor_Outputs+0x1b4>)
 8002e44:	6013      	str	r3, [r2, #0]

	if(manual_mode)
 8002e46:	4b5e      	ldr	r3, [pc, #376]	; (8002fc0 <Calculate_Motor_Outputs+0x1c0>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <Calculate_Motor_Outputs+0x56>
	{
		throttle_output = manual_throttle;
 8002e4e:	4b57      	ldr	r3, [pc, #348]	; (8002fac <Calculate_Motor_Outputs+0x1ac>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a58      	ldr	r2, [pc, #352]	; (8002fb4 <Calculate_Motor_Outputs+0x1b4>)
 8002e54:	6013      	str	r3, [r2, #0]
	}

	if(ppm_channels[5] > 1300)
 8002e56:	4b54      	ldr	r3, [pc, #336]	; (8002fa8 <Calculate_Motor_Outputs+0x1a8>)
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	f240 5214 	movw	r2, #1300	; 0x514
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	dd70      	ble.n	8002f44 <Calculate_Motor_Outputs+0x144>
	{
		esc1_output = throttle_output + pid_roll_output + pid_pitch_output - pid_yaw_output;
 8002e62:	4b54      	ldr	r3, [pc, #336]	; (8002fb4 <Calculate_Motor_Outputs+0x1b4>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	4b57      	ldr	r3, [pc, #348]	; (8002fc4 <Calculate_Motor_Outputs+0x1c4>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	441a      	add	r2, r3
 8002e6c:	4b56      	ldr	r3, [pc, #344]	; (8002fc8 <Calculate_Motor_Outputs+0x1c8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	441a      	add	r2, r3
 8002e72:	4b56      	ldr	r3, [pc, #344]	; (8002fcc <Calculate_Motor_Outputs+0x1cc>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	4a55      	ldr	r2, [pc, #340]	; (8002fd0 <Calculate_Motor_Outputs+0x1d0>)
 8002e7a:	6013      	str	r3, [r2, #0]
		esc2_output = throttle_output - pid_roll_output + pid_pitch_output + pid_yaw_output;
 8002e7c:	4b4d      	ldr	r3, [pc, #308]	; (8002fb4 <Calculate_Motor_Outputs+0x1b4>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	4b50      	ldr	r3, [pc, #320]	; (8002fc4 <Calculate_Motor_Outputs+0x1c4>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	1ad2      	subs	r2, r2, r3
 8002e86:	4b50      	ldr	r3, [pc, #320]	; (8002fc8 <Calculate_Motor_Outputs+0x1c8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	441a      	add	r2, r3
 8002e8c:	4b4f      	ldr	r3, [pc, #316]	; (8002fcc <Calculate_Motor_Outputs+0x1cc>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4413      	add	r3, r2
 8002e92:	4a50      	ldr	r2, [pc, #320]	; (8002fd4 <Calculate_Motor_Outputs+0x1d4>)
 8002e94:	6013      	str	r3, [r2, #0]
		esc3_output = throttle_output - pid_roll_output - pid_pitch_output - pid_yaw_output;
 8002e96:	4b47      	ldr	r3, [pc, #284]	; (8002fb4 <Calculate_Motor_Outputs+0x1b4>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	4b4a      	ldr	r3, [pc, #296]	; (8002fc4 <Calculate_Motor_Outputs+0x1c4>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	1ad2      	subs	r2, r2, r3
 8002ea0:	4b49      	ldr	r3, [pc, #292]	; (8002fc8 <Calculate_Motor_Outputs+0x1c8>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	1ad2      	subs	r2, r2, r3
 8002ea6:	4b49      	ldr	r3, [pc, #292]	; (8002fcc <Calculate_Motor_Outputs+0x1cc>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	4a4a      	ldr	r2, [pc, #296]	; (8002fd8 <Calculate_Motor_Outputs+0x1d8>)
 8002eae:	6013      	str	r3, [r2, #0]
		esc4_output = throttle_output + pid_roll_output - pid_pitch_output + pid_yaw_output;
 8002eb0:	4b40      	ldr	r3, [pc, #256]	; (8002fb4 <Calculate_Motor_Outputs+0x1b4>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	4b43      	ldr	r3, [pc, #268]	; (8002fc4 <Calculate_Motor_Outputs+0x1c4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	441a      	add	r2, r3
 8002eba:	4b43      	ldr	r3, [pc, #268]	; (8002fc8 <Calculate_Motor_Outputs+0x1c8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	1ad2      	subs	r2, r2, r3
 8002ec0:	4b42      	ldr	r3, [pc, #264]	; (8002fcc <Calculate_Motor_Outputs+0x1cc>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	4a45      	ldr	r2, [pc, #276]	; (8002fdc <Calculate_Motor_Outputs+0x1dc>)
 8002ec8:	6013      	str	r3, [r2, #0]

		if(esc1_output > 250)
 8002eca:	4b41      	ldr	r3, [pc, #260]	; (8002fd0 <Calculate_Motor_Outputs+0x1d0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2bfa      	cmp	r3, #250	; 0xfa
 8002ed0:	dd03      	ble.n	8002eda <Calculate_Motor_Outputs+0xda>
			esc1_output = 250;
 8002ed2:	4b3f      	ldr	r3, [pc, #252]	; (8002fd0 <Calculate_Motor_Outputs+0x1d0>)
 8002ed4:	22fa      	movs	r2, #250	; 0xfa
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	e006      	b.n	8002ee8 <Calculate_Motor_Outputs+0xe8>
		else if(esc1_output < 125)
 8002eda:	4b3d      	ldr	r3, [pc, #244]	; (8002fd0 <Calculate_Motor_Outputs+0x1d0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b7c      	cmp	r3, #124	; 0x7c
 8002ee0:	dc02      	bgt.n	8002ee8 <Calculate_Motor_Outputs+0xe8>
			esc1_output = 125;
 8002ee2:	4b3b      	ldr	r3, [pc, #236]	; (8002fd0 <Calculate_Motor_Outputs+0x1d0>)
 8002ee4:	227d      	movs	r2, #125	; 0x7d
 8002ee6:	601a      	str	r2, [r3, #0]

		if(esc2_output > 250)
 8002ee8:	4b3a      	ldr	r3, [pc, #232]	; (8002fd4 <Calculate_Motor_Outputs+0x1d4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2bfa      	cmp	r3, #250	; 0xfa
 8002eee:	dd03      	ble.n	8002ef8 <Calculate_Motor_Outputs+0xf8>
			esc2_output = 250;
 8002ef0:	4b38      	ldr	r3, [pc, #224]	; (8002fd4 <Calculate_Motor_Outputs+0x1d4>)
 8002ef2:	22fa      	movs	r2, #250	; 0xfa
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	e006      	b.n	8002f06 <Calculate_Motor_Outputs+0x106>
		else if(esc2_output < 125)
 8002ef8:	4b36      	ldr	r3, [pc, #216]	; (8002fd4 <Calculate_Motor_Outputs+0x1d4>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b7c      	cmp	r3, #124	; 0x7c
 8002efe:	dc02      	bgt.n	8002f06 <Calculate_Motor_Outputs+0x106>
			esc2_output = 125;
 8002f00:	4b34      	ldr	r3, [pc, #208]	; (8002fd4 <Calculate_Motor_Outputs+0x1d4>)
 8002f02:	227d      	movs	r2, #125	; 0x7d
 8002f04:	601a      	str	r2, [r3, #0]

		if(esc3_output > 250)
 8002f06:	4b34      	ldr	r3, [pc, #208]	; (8002fd8 <Calculate_Motor_Outputs+0x1d8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2bfa      	cmp	r3, #250	; 0xfa
 8002f0c:	dd03      	ble.n	8002f16 <Calculate_Motor_Outputs+0x116>
			esc3_output = 250;
 8002f0e:	4b32      	ldr	r3, [pc, #200]	; (8002fd8 <Calculate_Motor_Outputs+0x1d8>)
 8002f10:	22fa      	movs	r2, #250	; 0xfa
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	e006      	b.n	8002f24 <Calculate_Motor_Outputs+0x124>
		else if(esc3_output < 125)
 8002f16:	4b30      	ldr	r3, [pc, #192]	; (8002fd8 <Calculate_Motor_Outputs+0x1d8>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b7c      	cmp	r3, #124	; 0x7c
 8002f1c:	dc02      	bgt.n	8002f24 <Calculate_Motor_Outputs+0x124>
			esc3_output = 125;
 8002f1e:	4b2e      	ldr	r3, [pc, #184]	; (8002fd8 <Calculate_Motor_Outputs+0x1d8>)
 8002f20:	227d      	movs	r2, #125	; 0x7d
 8002f22:	601a      	str	r2, [r3, #0]

		if(esc4_output > 250)
 8002f24:	4b2d      	ldr	r3, [pc, #180]	; (8002fdc <Calculate_Motor_Outputs+0x1dc>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2bfa      	cmp	r3, #250	; 0xfa
 8002f2a:	dd03      	ble.n	8002f34 <Calculate_Motor_Outputs+0x134>
			esc4_output = 250;
 8002f2c:	4b2b      	ldr	r3, [pc, #172]	; (8002fdc <Calculate_Motor_Outputs+0x1dc>)
 8002f2e:	22fa      	movs	r2, #250	; 0xfa
 8002f30:	601a      	str	r2, [r3, #0]
		esc1_output = 125;
		esc2_output = 125;
		esc3_output = 125;
		esc4_output = 125;
	}
}
 8002f32:	e034      	b.n	8002f9e <Calculate_Motor_Outputs+0x19e>
		else if(esc4_output < 125)
 8002f34:	4b29      	ldr	r3, [pc, #164]	; (8002fdc <Calculate_Motor_Outputs+0x1dc>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b7c      	cmp	r3, #124	; 0x7c
 8002f3a:	dc30      	bgt.n	8002f9e <Calculate_Motor_Outputs+0x19e>
			esc4_output = 125;
 8002f3c:	4b27      	ldr	r3, [pc, #156]	; (8002fdc <Calculate_Motor_Outputs+0x1dc>)
 8002f3e:	227d      	movs	r2, #125	; 0x7d
 8002f40:	601a      	str	r2, [r3, #0]
}
 8002f42:	e02c      	b.n	8002f9e <Calculate_Motor_Outputs+0x19e>
		pid_roll_setpoint = 0;
 8002f44:	4b26      	ldr	r3, [pc, #152]	; (8002fe0 <Calculate_Motor_Outputs+0x1e0>)
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
		pid_pitch_setpoint = 0;
 8002f4c:	4b25      	ldr	r3, [pc, #148]	; (8002fe4 <Calculate_Motor_Outputs+0x1e4>)
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
		pid_yaw_setpoint = 0;
 8002f54:	4b24      	ldr	r3, [pc, #144]	; (8002fe8 <Calculate_Motor_Outputs+0x1e8>)
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
		pid_roll_output = 0;
 8002f5c:	4b19      	ldr	r3, [pc, #100]	; (8002fc4 <Calculate_Motor_Outputs+0x1c4>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]
		pid_pitch_output = 0;
 8002f62:	4b19      	ldr	r3, [pc, #100]	; (8002fc8 <Calculate_Motor_Outputs+0x1c8>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
		pid_yaw_output = 0;
 8002f68:	4b18      	ldr	r3, [pc, #96]	; (8002fcc <Calculate_Motor_Outputs+0x1cc>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
		pid_roll_i = 0;
 8002f6e:	4b1f      	ldr	r3, [pc, #124]	; (8002fec <Calculate_Motor_Outputs+0x1ec>)
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
		pid_pitch_i = 0;
 8002f76:	4b1e      	ldr	r3, [pc, #120]	; (8002ff0 <Calculate_Motor_Outputs+0x1f0>)
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
		pid_yaw_i = 0;
 8002f7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ff4 <Calculate_Motor_Outputs+0x1f4>)
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
		esc1_output = 125;
 8002f86:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <Calculate_Motor_Outputs+0x1d0>)
 8002f88:	227d      	movs	r2, #125	; 0x7d
 8002f8a:	601a      	str	r2, [r3, #0]
		esc2_output = 125;
 8002f8c:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <Calculate_Motor_Outputs+0x1d4>)
 8002f8e:	227d      	movs	r2, #125	; 0x7d
 8002f90:	601a      	str	r2, [r3, #0]
		esc3_output = 125;
 8002f92:	4b11      	ldr	r3, [pc, #68]	; (8002fd8 <Calculate_Motor_Outputs+0x1d8>)
 8002f94:	227d      	movs	r2, #125	; 0x7d
 8002f96:	601a      	str	r2, [r3, #0]
		esc4_output = 125;
 8002f98:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <Calculate_Motor_Outputs+0x1dc>)
 8002f9a:	227d      	movs	r2, #125	; 0x7d
 8002f9c:	601a      	str	r2, [r3, #0]
}
 8002f9e:	bf00      	nop
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	200021c8 	.word	0x200021c8
 8002fac:	20000484 	.word	0x20000484
 8002fb0:	20000060 	.word	0x20000060
 8002fb4:	20000cb8 	.word	0x20000cb8
 8002fb8:	20000381 	.word	0x20000381
 8002fbc:	200002e0 	.word	0x200002e0
 8002fc0:	20000363 	.word	0x20000363
 8002fc4:	20000c18 	.word	0x20000c18
 8002fc8:	20000c28 	.word	0x20000c28
 8002fcc:	20000528 	.word	0x20000528
 8002fd0:	2000000c 	.word	0x2000000c
 8002fd4:	20000010 	.word	0x20000010
 8002fd8:	20000014 	.word	0x20000014
 8002fdc:	20000018 	.word	0x20000018
 8002fe0:	2000106c 	.word	0x2000106c
 8002fe4:	20001070 	.word	0x20001070
 8002fe8:	20001064 	.word	0x20001064
 8002fec:	2000052c 	.word	0x2000052c
 8002ff0:	200008f0 	.word	0x200008f0
 8002ff4:	200008f4 	.word	0x200008f4

08002ff8 <Init_Altitude_Kalman>:
matrix kalman_gain_matrix;
matrix predicted_process_covariance, last_predicted_process_covariance;
matrix r_matrix, q_matrix;*/

void Init_Altitude_Kalman()
{
 8002ff8:	b490      	push	{r4, r7}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
	for(int i = 0; i < 2*2; i++)
 8002ffe:	2300      	movs	r3, #0
 8003000:	607b      	str	r3, [r7, #4]
 8003002:	e015      	b.n	8003030 <Init_Altitude_Kalman+0x38>
	{
		g[i] = 0;
 8003004:	4a16      	ldr	r2, [pc, #88]	; (8003060 <Init_Altitude_Kalman+0x68>)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	441a      	add	r2, r3
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	f04f 0400 	mov.w	r4, #0
 8003014:	e9c2 3400 	strd	r3, r4, [r2]
		predicted_process_covariance[i] = 0.1;
 8003018:	4a12      	ldr	r2, [pc, #72]	; (8003064 <Init_Altitude_Kalman+0x6c>)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	441a      	add	r2, r3
 8003020:	a40d      	add	r4, pc, #52	; (adr r4, 8003058 <Init_Altitude_Kalman+0x60>)
 8003022:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003026:	e9c2 3400 	strd	r3, r4, [r2]
	for(int i = 0; i < 2*2; i++)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	3301      	adds	r3, #1
 800302e:	607b      	str	r3, [r7, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b03      	cmp	r3, #3
 8003034:	dde6      	ble.n	8003004 <Init_Altitude_Kalman+0xc>
	}

	predicted_process_covariance[0] = 0.1;
 8003036:	4a0b      	ldr	r2, [pc, #44]	; (8003064 <Init_Altitude_Kalman+0x6c>)
 8003038:	a407      	add	r4, pc, #28	; (adr r4, 8003058 <Init_Altitude_Kalman+0x60>)
 800303a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800303e:	e9c2 3400 	strd	r3, r4, [r2]
	predicted_process_covariance[3] = 0.1;
 8003042:	4a08      	ldr	r2, [pc, #32]	; (8003064 <Init_Altitude_Kalman+0x6c>)
 8003044:	a404      	add	r4, pc, #16	; (adr r4, 8003058 <Init_Altitude_Kalman+0x60>)
 8003046:	e9d4 3400 	ldrd	r3, r4, [r4]
 800304a:	e9c2 3406 	strd	r3, r4, [r2, #24]

	for(int i = 0; i < 4*4; i++)
	{
		current_state.data[i] = 0;
	}*/
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bc90      	pop	{r4, r7}
 8003056:	4770      	bx	lr
 8003058:	9999999a 	.word	0x9999999a
 800305c:	3fb99999 	.word	0x3fb99999
 8003060:	200008a8 	.word	0x200008a8
 8003064:	20000038 	.word	0x20000038

08003068 <Calculate_Altitude_Filter>:

void Calculate_Altitude_Filter()
{
 8003068:	b5b0      	push	{r4, r5, r7, lr}
 800306a:	af00      	add	r7, sp, #0
	//ACC upward is positive
	//Predict
	deltaT = (float)((float)GetMicrosDifference(&altitude_timer) * 0.00000100);
 800306c:	489c      	ldr	r0, [pc, #624]	; (80032e0 <Calculate_Altitude_Filter+0x278>)
 800306e:	f002 fc85 	bl	800597c <GetMicrosDifference>
 8003072:	ee07 0a90 	vmov	s15, r0
 8003076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800307a:	ee17 0a90 	vmov	r0, s15
 800307e:	f7fd fa63 	bl	8000548 <__aeabi_f2d>
 8003082:	a387      	add	r3, pc, #540	; (adr r3, 80032a0 <Calculate_Altitude_Filter+0x238>)
 8003084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003088:	f7fd fab6 	bl	80005f8 <__aeabi_dmul>
 800308c:	4603      	mov	r3, r0
 800308e:	460c      	mov	r4, r1
 8003090:	4618      	mov	r0, r3
 8003092:	4621      	mov	r1, r4
 8003094:	f7fd fd88 	bl	8000ba8 <__aeabi_d2f>
 8003098:	4602      	mov	r2, r0
 800309a:	4b92      	ldr	r3, [pc, #584]	; (80032e4 <Calculate_Altitude_Filter+0x27c>)
 800309c:	601a      	str	r2, [r3, #0]
	//deltaT = 0.02;
	//SendDynamicVariable("Delta T", 3, (uint8_t *)&deltaT);
	if(deltaT > 0.2)
 800309e:	4b91      	ldr	r3, [pc, #580]	; (80032e4 <Calculate_Altitude_Filter+0x27c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fd fa50 	bl	8000548 <__aeabi_f2d>
 80030a8:	a37f      	add	r3, pc, #508	; (adr r3, 80032a8 <Calculate_Altitude_Filter+0x240>)
 80030aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ae:	f7fd fd33 	bl	8000b18 <__aeabi_dcmpgt>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <Calculate_Altitude_Filter+0x56>
		deltaT = 0.2;
 80030b8:	4b8a      	ldr	r3, [pc, #552]	; (80032e4 <Calculate_Altitude_Filter+0x27c>)
 80030ba:	4a8b      	ldr	r2, [pc, #556]	; (80032e8 <Calculate_Altitude_Filter+0x280>)
 80030bc:	601a      	str	r2, [r3, #0]

	altitude_timer = GetMicros();
 80030be:	f002 fc31 	bl	8005924 <GetMicros>
 80030c2:	4602      	mov	r2, r0
 80030c4:	4b86      	ldr	r3, [pc, #536]	; (80032e0 <Calculate_Altitude_Filter+0x278>)
 80030c6:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 2*2; i++)
	{
		predicted_process_covariance[i] += q_matrix[i];
	}*/

	if((main_cycle_counter + 1) % 10 == 0)
 80030c8:	4b88      	ldr	r3, [pc, #544]	; (80032ec <Calculate_Altitude_Filter+0x284>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	1c59      	adds	r1, r3, #1
 80030ce:	4b88      	ldr	r3, [pc, #544]	; (80032f0 <Calculate_Altitude_Filter+0x288>)
 80030d0:	fba3 2301 	umull	r2, r3, r3, r1
 80030d4:	08da      	lsrs	r2, r3, #3
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	1aca      	subs	r2, r1, r3
 80030e0:	2a00      	cmp	r2, #0
 80030e2:	f040 80cc 	bne.w	800327e <Calculate_Altitude_Filter+0x216>
		kalman_xa_err = (1 - kalman_gain_a) * (kalman_xa_err);

		kalman_last_x = kalman_x;
		kalman_last_measured_x = read_bmp_altitude;*/

		total_bmp_altitude -= bmp_over_time[bmp_reading_index];
 80030e6:	4b83      	ldr	r3, [pc, #524]	; (80032f4 <Calculate_Altitude_Filter+0x28c>)
 80030e8:	ed93 7a00 	vldr	s14, [r3]
 80030ec:	4b82      	ldr	r3, [pc, #520]	; (80032f8 <Calculate_Altitude_Filter+0x290>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	4a82      	ldr	r2, [pc, #520]	; (80032fc <Calculate_Altitude_Filter+0x294>)
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	edd3 7a00 	vldr	s15, [r3]
 80030fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030fe:	4b7d      	ldr	r3, [pc, #500]	; (80032f4 <Calculate_Altitude_Filter+0x28c>)
 8003100:	edc3 7a00 	vstr	s15, [r3]
		bmp_over_time[bmp_reading_index] = read_bmp_altitude;
 8003104:	4b7c      	ldr	r3, [pc, #496]	; (80032f8 <Calculate_Altitude_Filter+0x290>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	4b7d      	ldr	r3, [pc, #500]	; (8003300 <Calculate_Altitude_Filter+0x298>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	497b      	ldr	r1, [pc, #492]	; (80032fc <Calculate_Altitude_Filter+0x294>)
 8003110:	0083      	lsls	r3, r0, #2
 8003112:	440b      	add	r3, r1
 8003114:	601a      	str	r2, [r3, #0]
		total_bmp_altitude += bmp_over_time[bmp_reading_index];
 8003116:	4b78      	ldr	r3, [pc, #480]	; (80032f8 <Calculate_Altitude_Filter+0x290>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	4a78      	ldr	r2, [pc, #480]	; (80032fc <Calculate_Altitude_Filter+0x294>)
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	ed93 7a00 	vldr	s14, [r3]
 8003124:	4b73      	ldr	r3, [pc, #460]	; (80032f4 <Calculate_Altitude_Filter+0x28c>)
 8003126:	edd3 7a00 	vldr	s15, [r3]
 800312a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800312e:	4b71      	ldr	r3, [pc, #452]	; (80032f4 <Calculate_Altitude_Filter+0x28c>)
 8003130:	edc3 7a00 	vstr	s15, [r3]

		fast_bmp_altitude = (total_bmp_altitude / 4.00);
 8003134:	4b6f      	ldr	r3, [pc, #444]	; (80032f4 <Calculate_Altitude_Filter+0x28c>)
 8003136:	ed93 7a00 	vldr	s14, [r3]
 800313a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800313e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003142:	4b70      	ldr	r3, [pc, #448]	; (8003304 <Calculate_Altitude_Filter+0x29c>)
 8003144:	edc3 7a00 	vstr	s15, [r3]
		slow_bmp_altitude = (slow_bmp_altitude * 0.900) + (fast_bmp_altitude * 0.100);
 8003148:	4b6f      	ldr	r3, [pc, #444]	; (8003308 <Calculate_Altitude_Filter+0x2a0>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f7fd f9fb 	bl	8000548 <__aeabi_f2d>
 8003152:	a357      	add	r3, pc, #348	; (adr r3, 80032b0 <Calculate_Altitude_Filter+0x248>)
 8003154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003158:	f7fd fa4e 	bl	80005f8 <__aeabi_dmul>
 800315c:	4603      	mov	r3, r0
 800315e:	460c      	mov	r4, r1
 8003160:	4625      	mov	r5, r4
 8003162:	461c      	mov	r4, r3
 8003164:	4b67      	ldr	r3, [pc, #412]	; (8003304 <Calculate_Altitude_Filter+0x29c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f7fd f9ed 	bl	8000548 <__aeabi_f2d>
 800316e:	a352      	add	r3, pc, #328	; (adr r3, 80032b8 <Calculate_Altitude_Filter+0x250>)
 8003170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003174:	f7fd fa40 	bl	80005f8 <__aeabi_dmul>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4620      	mov	r0, r4
 800317e:	4629      	mov	r1, r5
 8003180:	f7fd f884 	bl	800028c <__adddf3>
 8003184:	4603      	mov	r3, r0
 8003186:	460c      	mov	r4, r1
 8003188:	4618      	mov	r0, r3
 800318a:	4621      	mov	r1, r4
 800318c:	f7fd fd0c 	bl	8000ba8 <__aeabi_d2f>
 8003190:	4602      	mov	r2, r0
 8003192:	4b5d      	ldr	r3, [pc, #372]	; (8003308 <Calculate_Altitude_Filter+0x2a0>)
 8003194:	601a      	str	r2, [r3, #0]

		pressure_difference = slow_bmp_altitude - fast_bmp_altitude;
 8003196:	4b5c      	ldr	r3, [pc, #368]	; (8003308 <Calculate_Altitude_Filter+0x2a0>)
 8003198:	ed93 7a00 	vldr	s14, [r3]
 800319c:	4b59      	ldr	r3, [pc, #356]	; (8003304 <Calculate_Altitude_Filter+0x29c>)
 800319e:	edd3 7a00 	vldr	s15, [r3]
 80031a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031a6:	4b59      	ldr	r3, [pc, #356]	; (800330c <Calculate_Altitude_Filter+0x2a4>)
 80031a8:	edc3 7a00 	vstr	s15, [r3]

		if(pressure_difference > 0.400)
 80031ac:	4b57      	ldr	r3, [pc, #348]	; (800330c <Calculate_Altitude_Filter+0x2a4>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fd f9c9 	bl	8000548 <__aeabi_f2d>
 80031b6:	a342      	add	r3, pc, #264	; (adr r3, 80032c0 <Calculate_Altitude_Filter+0x258>)
 80031b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031bc:	f7fd fcac 	bl	8000b18 <__aeabi_dcmpgt>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <Calculate_Altitude_Filter+0x166>
			pressure_difference = 0.400;
 80031c6:	4b51      	ldr	r3, [pc, #324]	; (800330c <Calculate_Altitude_Filter+0x2a4>)
 80031c8:	4a51      	ldr	r2, [pc, #324]	; (8003310 <Calculate_Altitude_Filter+0x2a8>)
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	e00f      	b.n	80031ee <Calculate_Altitude_Filter+0x186>
		else if(pressure_difference < -0.400)
 80031ce:	4b4f      	ldr	r3, [pc, #316]	; (800330c <Calculate_Altitude_Filter+0x2a4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd f9b8 	bl	8000548 <__aeabi_f2d>
 80031d8:	a33b      	add	r3, pc, #236	; (adr r3, 80032c8 <Calculate_Altitude_Filter+0x260>)
 80031da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031de:	f7fd fc7d 	bl	8000adc <__aeabi_dcmplt>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <Calculate_Altitude_Filter+0x186>
			pressure_difference = -0.400;
 80031e8:	4b48      	ldr	r3, [pc, #288]	; (800330c <Calculate_Altitude_Filter+0x2a4>)
 80031ea:	4a4a      	ldr	r2, [pc, #296]	; (8003314 <Calculate_Altitude_Filter+0x2ac>)
 80031ec:	601a      	str	r2, [r3, #0]

		if(pressure_difference > 0.120 || pressure_difference < -0.120)
 80031ee:	4b47      	ldr	r3, [pc, #284]	; (800330c <Calculate_Altitude_Filter+0x2a4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fd f9a8 	bl	8000548 <__aeabi_f2d>
 80031f8:	a335      	add	r3, pc, #212	; (adr r3, 80032d0 <Calculate_Altitude_Filter+0x268>)
 80031fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fe:	f7fd fc8b 	bl	8000b18 <__aeabi_dcmpgt>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10c      	bne.n	8003222 <Calculate_Altitude_Filter+0x1ba>
 8003208:	4b40      	ldr	r3, [pc, #256]	; (800330c <Calculate_Altitude_Filter+0x2a4>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f7fd f99b 	bl	8000548 <__aeabi_f2d>
 8003212:	a331      	add	r3, pc, #196	; (adr r3, 80032d8 <Calculate_Altitude_Filter+0x270>)
 8003214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003218:	f7fd fc60 	bl	8000adc <__aeabi_dcmplt>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d020      	beq.n	8003264 <Calculate_Altitude_Filter+0x1fc>
			slow_bmp_altitude -= pressure_difference / 2.00;
 8003222:	4b39      	ldr	r3, [pc, #228]	; (8003308 <Calculate_Altitude_Filter+0x2a0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f7fd f98e 	bl	8000548 <__aeabi_f2d>
 800322c:	4604      	mov	r4, r0
 800322e:	460d      	mov	r5, r1
 8003230:	4b36      	ldr	r3, [pc, #216]	; (800330c <Calculate_Altitude_Filter+0x2a4>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f7fd f987 	bl	8000548 <__aeabi_f2d>
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003242:	f7fd fb03 	bl	800084c <__aeabi_ddiv>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4620      	mov	r0, r4
 800324c:	4629      	mov	r1, r5
 800324e:	f7fd f81b 	bl	8000288 <__aeabi_dsub>
 8003252:	4603      	mov	r3, r0
 8003254:	460c      	mov	r4, r1
 8003256:	4618      	mov	r0, r3
 8003258:	4621      	mov	r1, r4
 800325a:	f7fd fca5 	bl	8000ba8 <__aeabi_d2f>
 800325e:	4602      	mov	r2, r0
 8003260:	4b29      	ldr	r3, [pc, #164]	; (8003308 <Calculate_Altitude_Filter+0x2a0>)
 8003262:	601a      	str	r2, [r3, #0]

		bmp_reading_index++;
 8003264:	4b24      	ldr	r3, [pc, #144]	; (80032f8 <Calculate_Altitude_Filter+0x290>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	3301      	adds	r3, #1
 800326a:	b2da      	uxtb	r2, r3
 800326c:	4b22      	ldr	r3, [pc, #136]	; (80032f8 <Calculate_Altitude_Filter+0x290>)
 800326e:	701a      	strb	r2, [r3, #0]

		if(bmp_reading_index == 4)
 8003270:	4b21      	ldr	r3, [pc, #132]	; (80032f8 <Calculate_Altitude_Filter+0x290>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b04      	cmp	r3, #4
 8003276:	d102      	bne.n	800327e <Calculate_Altitude_Filter+0x216>
			bmp_reading_index = 0;
 8003278:	4b1f      	ldr	r3, [pc, #124]	; (80032f8 <Calculate_Altitude_Filter+0x290>)
 800327a:	2200      	movs	r2, #0
 800327c:	701a      	strb	r2, [r3, #0]
	//current_state_double = round(current_state[0] * 100.00) / 100.00;
	//kalman_gain_double = round(kalman_gain_matrix[0] * 100.00) / 100.00;
	//current_state_float = (float)current_state_double;
	//kalman_gain_float = (float)kalman_gain_double;

	last_state[0] = current_state[0];
 800327e:	4b26      	ldr	r3, [pc, #152]	; (8003318 <Calculate_Altitude_Filter+0x2b0>)
 8003280:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003284:	4a25      	ldr	r2, [pc, #148]	; (800331c <Calculate_Altitude_Filter+0x2b4>)
 8003286:	e9c2 3400 	strd	r3, r4, [r2]
	last_state[1] = current_state[1];
 800328a:	4b23      	ldr	r3, [pc, #140]	; (8003318 <Calculate_Altitude_Filter+0x2b0>)
 800328c:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003290:	4a22      	ldr	r2, [pc, #136]	; (800331c <Calculate_Altitude_Filter+0x2b4>)
 8003292:	e9c2 3402 	strd	r3, r4, [r2, #8]
}
 8003296:	bf00      	nop
 8003298:	bdb0      	pop	{r4, r5, r7, pc}
 800329a:	bf00      	nop
 800329c:	f3af 8000 	nop.w
 80032a0:	a0b5ed8d 	.word	0xa0b5ed8d
 80032a4:	3eb0c6f7 	.word	0x3eb0c6f7
 80032a8:	9999999a 	.word	0x9999999a
 80032ac:	3fc99999 	.word	0x3fc99999
 80032b0:	cccccccd 	.word	0xcccccccd
 80032b4:	3feccccc 	.word	0x3feccccc
 80032b8:	9999999a 	.word	0x9999999a
 80032bc:	3fb99999 	.word	0x3fb99999
 80032c0:	9999999a 	.word	0x9999999a
 80032c4:	3fd99999 	.word	0x3fd99999
 80032c8:	9999999a 	.word	0x9999999a
 80032cc:	bfd99999 	.word	0xbfd99999
 80032d0:	eb851eb8 	.word	0xeb851eb8
 80032d4:	3fbeb851 	.word	0x3fbeb851
 80032d8:	eb851eb8 	.word	0xeb851eb8
 80032dc:	bfbeb851 	.word	0xbfbeb851
 80032e0:	20000300 	.word	0x20000300
 80032e4:	20000304 	.word	0x20000304
 80032e8:	3e4ccccd 	.word	0x3e4ccccd
 80032ec:	20000378 	.word	0x20000378
 80032f0:	cccccccd 	.word	0xcccccccd
 80032f4:	20001078 	.word	0x20001078
 80032f8:	200002cc 	.word	0x200002cc
 80032fc:	200004d8 	.word	0x200004d8
 8003300:	200003f8 	.word	0x200003f8
 8003304:	200002d4 	.word	0x200002d4
 8003308:	200002d8 	.word	0x200002d8
 800330c:	200002d0 	.word	0x200002d0
 8003310:	3ecccccd 	.word	0x3ecccccd
 8003314:	becccccd 	.word	0xbecccccd
 8003318:	20000308 	.word	0x20000308
 800331c:	20000318 	.word	0x20000318

08003320 <Calculate_Altitude_PID>:

	return mat;
}

void Calculate_Altitude_PID()
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
	pid_error_temp = pid_current_altitude_setpoint - slow_bmp_altitude;
 8003324:	4b6a      	ldr	r3, [pc, #424]	; (80034d0 <Calculate_Altitude_PID+0x1b0>)
 8003326:	ed93 7a00 	vldr	s14, [r3]
 800332a:	4b6a      	ldr	r3, [pc, #424]	; (80034d4 <Calculate_Altitude_PID+0x1b4>)
 800332c:	edd3 7a00 	vldr	s15, [r3]
 8003330:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003334:	4b68      	ldr	r3, [pc, #416]	; (80034d8 <Calculate_Altitude_PID+0x1b8>)
 8003336:	edc3 7a00 	vstr	s15, [r3]
	pid_alt_i += ki_alt * pid_error_temp;
 800333a:	4b68      	ldr	r3, [pc, #416]	; (80034dc <Calculate_Altitude_PID+0x1bc>)
 800333c:	ed93 7a00 	vldr	s14, [r3]
 8003340:	4b65      	ldr	r3, [pc, #404]	; (80034d8 <Calculate_Altitude_PID+0x1b8>)
 8003342:	edd3 7a00 	vldr	s15, [r3]
 8003346:	ee27 7a27 	vmul.f32	s14, s14, s15
 800334a:	4b65      	ldr	r3, [pc, #404]	; (80034e0 <Calculate_Altitude_PID+0x1c0>)
 800334c:	edd3 7a00 	vldr	s15, [r3]
 8003350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003354:	4b62      	ldr	r3, [pc, #392]	; (80034e0 <Calculate_Altitude_PID+0x1c0>)
 8003356:	edc3 7a00 	vstr	s15, [r3]

	kp_alt_actual = kp_alt;
 800335a:	4b62      	ldr	r3, [pc, #392]	; (80034e4 <Calculate_Altitude_PID+0x1c4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a62      	ldr	r2, [pc, #392]	; (80034e8 <Calculate_Altitude_PID+0x1c8>)
 8003360:	6013      	str	r3, [r2, #0]

	if (pid_error_temp > 1.60 || pid_error_temp < -1.60)
 8003362:	4b5d      	ldr	r3, [pc, #372]	; (80034d8 <Calculate_Altitude_PID+0x1b8>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f7fd f8ee 	bl	8000548 <__aeabi_f2d>
 800336c:	a354      	add	r3, pc, #336	; (adr r3, 80034c0 <Calculate_Altitude_PID+0x1a0>)
 800336e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003372:	f7fd fbd1 	bl	8000b18 <__aeabi_dcmpgt>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10c      	bne.n	8003396 <Calculate_Altitude_PID+0x76>
 800337c:	4b56      	ldr	r3, [pc, #344]	; (80034d8 <Calculate_Altitude_PID+0x1b8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7fd f8e1 	bl	8000548 <__aeabi_f2d>
 8003386:	a350      	add	r3, pc, #320	; (adr r3, 80034c8 <Calculate_Altitude_PID+0x1a8>)
 8003388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338c:	f7fd fba6 	bl	8000adc <__aeabi_dcmplt>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d009      	beq.n	80033aa <Calculate_Altitude_PID+0x8a>
	{
		kp_alt_actual = kp_alt * 2.5;
 8003396:	4b53      	ldr	r3, [pc, #332]	; (80034e4 <Calculate_Altitude_PID+0x1c4>)
 8003398:	edd3 7a00 	vldr	s15, [r3]
 800339c:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80033a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033a4:	4b50      	ldr	r3, [pc, #320]	; (80034e8 <Calculate_Altitude_PID+0x1c8>)
 80033a6:	edc3 7a00 	vstr	s15, [r3]
	}

	pid_altitude_over_time_total -= pid_altitude_over_time[pid_altitude_over_time_reading_index];
 80033aa:	4b50      	ldr	r3, [pc, #320]	; (80034ec <Calculate_Altitude_PID+0x1cc>)
 80033ac:	ed93 7a00 	vldr	s14, [r3]
 80033b0:	4b4f      	ldr	r3, [pc, #316]	; (80034f0 <Calculate_Altitude_PID+0x1d0>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	4a4f      	ldr	r2, [pc, #316]	; (80034f4 <Calculate_Altitude_PID+0x1d4>)
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	edd3 7a00 	vldr	s15, [r3]
 80033be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033c2:	4b4a      	ldr	r3, [pc, #296]	; (80034ec <Calculate_Altitude_PID+0x1cc>)
 80033c4:	edc3 7a00 	vstr	s15, [r3]
	pid_altitude_over_time[pid_altitude_over_time_reading_index] = (pid_error_temp - pid_alt_last_error) * kd_alt;
 80033c8:	4b43      	ldr	r3, [pc, #268]	; (80034d8 <Calculate_Altitude_PID+0x1b8>)
 80033ca:	ed93 7a00 	vldr	s14, [r3]
 80033ce:	4b4a      	ldr	r3, [pc, #296]	; (80034f8 <Calculate_Altitude_PID+0x1d8>)
 80033d0:	edd3 7a00 	vldr	s15, [r3]
 80033d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033d8:	4b48      	ldr	r3, [pc, #288]	; (80034fc <Calculate_Altitude_PID+0x1dc>)
 80033da:	edd3 7a00 	vldr	s15, [r3]
 80033de:	4b44      	ldr	r3, [pc, #272]	; (80034f0 <Calculate_Altitude_PID+0x1d0>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e6:	4a43      	ldr	r2, [pc, #268]	; (80034f4 <Calculate_Altitude_PID+0x1d4>)
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	edc3 7a00 	vstr	s15, [r3]
	pid_altitude_over_time_total += pid_altitude_over_time[pid_altitude_over_time_reading_index];
 80033f0:	4b3f      	ldr	r3, [pc, #252]	; (80034f0 <Calculate_Altitude_PID+0x1d0>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	4a3f      	ldr	r2, [pc, #252]	; (80034f4 <Calculate_Altitude_PID+0x1d4>)
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	ed93 7a00 	vldr	s14, [r3]
 80033fe:	4b3b      	ldr	r3, [pc, #236]	; (80034ec <Calculate_Altitude_PID+0x1cc>)
 8003400:	edd3 7a00 	vldr	s15, [r3]
 8003404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003408:	4b38      	ldr	r3, [pc, #224]	; (80034ec <Calculate_Altitude_PID+0x1cc>)
 800340a:	edc3 7a00 	vstr	s15, [r3]

	pid_altitude_over_time_reading_index++;
 800340e:	4b38      	ldr	r3, [pc, #224]	; (80034f0 <Calculate_Altitude_PID+0x1d0>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	3301      	adds	r3, #1
 8003414:	b2da      	uxtb	r2, r3
 8003416:	4b36      	ldr	r3, [pc, #216]	; (80034f0 <Calculate_Altitude_PID+0x1d0>)
 8003418:	701a      	strb	r2, [r3, #0]

	if(pid_altitude_over_time_reading_index == 20)
 800341a:	4b35      	ldr	r3, [pc, #212]	; (80034f0 <Calculate_Altitude_PID+0x1d0>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	2b14      	cmp	r3, #20
 8003420:	d102      	bne.n	8003428 <Calculate_Altitude_PID+0x108>
		pid_altitude_over_time_reading_index = 0;
 8003422:	4b33      	ldr	r3, [pc, #204]	; (80034f0 <Calculate_Altitude_PID+0x1d0>)
 8003424:	2200      	movs	r2, #0
 8003426:	701a      	strb	r2, [r3, #0]

	if(pid_alt_i > 50)
 8003428:	4b2d      	ldr	r3, [pc, #180]	; (80034e0 <Calculate_Altitude_PID+0x1c0>)
 800342a:	edd3 7a00 	vldr	s15, [r3]
 800342e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8003500 <Calculate_Altitude_PID+0x1e0>
 8003432:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800343a:	dd03      	ble.n	8003444 <Calculate_Altitude_PID+0x124>
		pid_alt_i = 50;
 800343c:	4b28      	ldr	r3, [pc, #160]	; (80034e0 <Calculate_Altitude_PID+0x1c0>)
 800343e:	4a31      	ldr	r2, [pc, #196]	; (8003504 <Calculate_Altitude_PID+0x1e4>)
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	e00c      	b.n	800345e <Calculate_Altitude_PID+0x13e>
	else if(pid_alt_i < -50)
 8003444:	4b26      	ldr	r3, [pc, #152]	; (80034e0 <Calculate_Altitude_PID+0x1c0>)
 8003446:	edd3 7a00 	vldr	s15, [r3]
 800344a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003508 <Calculate_Altitude_PID+0x1e8>
 800344e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003456:	d502      	bpl.n	800345e <Calculate_Altitude_PID+0x13e>
		pid_alt_i = -50;
 8003458:	4b21      	ldr	r3, [pc, #132]	; (80034e0 <Calculate_Altitude_PID+0x1c0>)
 800345a:	4a2c      	ldr	r2, [pc, #176]	; (800350c <Calculate_Altitude_PID+0x1ec>)
 800345c:	601a      	str	r2, [r3, #0]

	altitude_pid_output = (int32_t)((pid_error_temp * kp_alt_actual) + pid_alt_i + pid_altitude_over_time_total);
 800345e:	4b1e      	ldr	r3, [pc, #120]	; (80034d8 <Calculate_Altitude_PID+0x1b8>)
 8003460:	ed93 7a00 	vldr	s14, [r3]
 8003464:	4b20      	ldr	r3, [pc, #128]	; (80034e8 <Calculate_Altitude_PID+0x1c8>)
 8003466:	edd3 7a00 	vldr	s15, [r3]
 800346a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800346e:	4b1c      	ldr	r3, [pc, #112]	; (80034e0 <Calculate_Altitude_PID+0x1c0>)
 8003470:	edd3 7a00 	vldr	s15, [r3]
 8003474:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003478:	4b1c      	ldr	r3, [pc, #112]	; (80034ec <Calculate_Altitude_PID+0x1cc>)
 800347a:	edd3 7a00 	vldr	s15, [r3]
 800347e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003482:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003486:	ee17 2a90 	vmov	r2, s15
 800348a:	4b21      	ldr	r3, [pc, #132]	; (8003510 <Calculate_Altitude_PID+0x1f0>)
 800348c:	601a      	str	r2, [r3, #0]

	pid_alt_last_error = pid_error_temp;
 800348e:	4b12      	ldr	r3, [pc, #72]	; (80034d8 <Calculate_Altitude_PID+0x1b8>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a19      	ldr	r2, [pc, #100]	; (80034f8 <Calculate_Altitude_PID+0x1d8>)
 8003494:	6013      	str	r3, [r2, #0]

	if(altitude_pid_output > 110)
 8003496:	4b1e      	ldr	r3, [pc, #120]	; (8003510 <Calculate_Altitude_PID+0x1f0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b6e      	cmp	r3, #110	; 0x6e
 800349c:	dd03      	ble.n	80034a6 <Calculate_Altitude_PID+0x186>
		altitude_pid_output = 110;
 800349e:	4b1c      	ldr	r3, [pc, #112]	; (8003510 <Calculate_Altitude_PID+0x1f0>)
 80034a0:	226e      	movs	r2, #110	; 0x6e
 80034a2:	601a      	str	r2, [r3, #0]
	else if(altitude_pid_output < -110)
		altitude_pid_output = -110;
}
 80034a4:	e008      	b.n	80034b8 <Calculate_Altitude_PID+0x198>
	else if(altitude_pid_output < -110)
 80034a6:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <Calculate_Altitude_PID+0x1f0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f113 0f6e 	cmn.w	r3, #110	; 0x6e
 80034ae:	da03      	bge.n	80034b8 <Calculate_Altitude_PID+0x198>
		altitude_pid_output = -110;
 80034b0:	4b17      	ldr	r3, [pc, #92]	; (8003510 <Calculate_Altitude_PID+0x1f0>)
 80034b2:	f06f 026d 	mvn.w	r2, #109	; 0x6d
 80034b6:	601a      	str	r2, [r3, #0]
}
 80034b8:	bf00      	nop
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	f3af 8000 	nop.w
 80034c0:	9999999a 	.word	0x9999999a
 80034c4:	3ff99999 	.word	0x3ff99999
 80034c8:	9999999a 	.word	0x9999999a
 80034cc:	bff99999 	.word	0xbff99999
 80034d0:	20000020 	.word	0x20000020
 80034d4:	200002d8 	.word	0x200002d8
 80034d8:	2000124c 	.word	0x2000124c
 80034dc:	200002ec 	.word	0x200002ec
 80034e0:	200002f4 	.word	0x200002f4
 80034e4:	200002e4 	.word	0x200002e4
 80034e8:	200002e8 	.word	0x200002e8
 80034ec:	200002f8 	.word	0x200002f8
 80034f0:	200002fc 	.word	0x200002fc
 80034f4:	20000488 	.word	0x20000488
 80034f8:	200002dc 	.word	0x200002dc
 80034fc:	200002f0 	.word	0x200002f0
 8003500:	42480000 	.word	0x42480000
 8003504:	42480000 	.word	0x42480000
 8003508:	c2480000 	.word	0xc2480000
 800350c:	c2480000 	.word	0xc2480000
 8003510:	200002e0 	.word	0x200002e0
 8003514:	00000000 	.word	0x00000000

08003518 <GPS_PID>:

int32_t gps_roll_modifier, gps_pitch_modifier;
float gps_roll_modifier_north, gps_pitch_modifier_north;

void GPS_PID()
{
 8003518:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800351c:	af00      	add	r7, sp, #0
	lat_error_over_time_total -= lat_error_over_time[gps_error_over_time_reading_index];
 800351e:	4bbe      	ldr	r3, [pc, #760]	; (8003818 <GPS_PID+0x300>)
 8003520:	ed93 7a00 	vldr	s14, [r3]
 8003524:	4bbd      	ldr	r3, [pc, #756]	; (800381c <GPS_PID+0x304>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	4abd      	ldr	r2, [pc, #756]	; (8003820 <GPS_PID+0x308>)
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4413      	add	r3, r2
 800352e:	edd3 7a00 	vldr	s15, [r3]
 8003532:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003536:	4bb8      	ldr	r3, [pc, #736]	; (8003818 <GPS_PID+0x300>)
 8003538:	edc3 7a00 	vstr	s15, [r3]
	lat_error_over_time[gps_error_over_time_reading_index] = (calculated_lat_error - last_calculated_lat_error);
 800353c:	4bb9      	ldr	r3, [pc, #740]	; (8003824 <GPS_PID+0x30c>)
 800353e:	ed93 7a00 	vldr	s14, [r3]
 8003542:	4bb9      	ldr	r3, [pc, #740]	; (8003828 <GPS_PID+0x310>)
 8003544:	edd3 7a00 	vldr	s15, [r3]
 8003548:	4bb4      	ldr	r3, [pc, #720]	; (800381c <GPS_PID+0x304>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003550:	4ab3      	ldr	r2, [pc, #716]	; (8003820 <GPS_PID+0x308>)
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	edc3 7a00 	vstr	s15, [r3]
	lat_error_over_time_total += lat_error_over_time[gps_error_over_time_reading_index];
 800355a:	4bb0      	ldr	r3, [pc, #704]	; (800381c <GPS_PID+0x304>)
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	4ab0      	ldr	r2, [pc, #704]	; (8003820 <GPS_PID+0x308>)
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	ed93 7a00 	vldr	s14, [r3]
 8003568:	4bab      	ldr	r3, [pc, #684]	; (8003818 <GPS_PID+0x300>)
 800356a:	edd3 7a00 	vldr	s15, [r3]
 800356e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003572:	4ba9      	ldr	r3, [pc, #676]	; (8003818 <GPS_PID+0x300>)
 8003574:	edc3 7a00 	vstr	s15, [r3]

	lon_error_over_time_total -= lon_error_over_time[gps_error_over_time_reading_index];
 8003578:	4bac      	ldr	r3, [pc, #688]	; (800382c <GPS_PID+0x314>)
 800357a:	ed93 7a00 	vldr	s14, [r3]
 800357e:	4ba7      	ldr	r3, [pc, #668]	; (800381c <GPS_PID+0x304>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	4aab      	ldr	r2, [pc, #684]	; (8003830 <GPS_PID+0x318>)
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	edd3 7a00 	vldr	s15, [r3]
 800358c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003590:	4ba6      	ldr	r3, [pc, #664]	; (800382c <GPS_PID+0x314>)
 8003592:	edc3 7a00 	vstr	s15, [r3]
	lon_error_over_time[gps_error_over_time_reading_index] = (calculated_lon_error - last_calculated_lon_error);
 8003596:	4ba7      	ldr	r3, [pc, #668]	; (8003834 <GPS_PID+0x31c>)
 8003598:	ed93 7a00 	vldr	s14, [r3]
 800359c:	4ba6      	ldr	r3, [pc, #664]	; (8003838 <GPS_PID+0x320>)
 800359e:	edd3 7a00 	vldr	s15, [r3]
 80035a2:	4b9e      	ldr	r3, [pc, #632]	; (800381c <GPS_PID+0x304>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035aa:	4aa1      	ldr	r2, [pc, #644]	; (8003830 <GPS_PID+0x318>)
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	edc3 7a00 	vstr	s15, [r3]
	lon_error_over_time_total += lon_error_over_time[gps_error_over_time_reading_index];
 80035b4:	4b99      	ldr	r3, [pc, #612]	; (800381c <GPS_PID+0x304>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	4a9d      	ldr	r2, [pc, #628]	; (8003830 <GPS_PID+0x318>)
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	ed93 7a00 	vldr	s14, [r3]
 80035c2:	4b9a      	ldr	r3, [pc, #616]	; (800382c <GPS_PID+0x314>)
 80035c4:	edd3 7a00 	vldr	s15, [r3]
 80035c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035cc:	4b97      	ldr	r3, [pc, #604]	; (800382c <GPS_PID+0x314>)
 80035ce:	edc3 7a00 	vstr	s15, [r3]

	last_calculated_lat_error = calculated_lat_error;
 80035d2:	4b94      	ldr	r3, [pc, #592]	; (8003824 <GPS_PID+0x30c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a94      	ldr	r2, [pc, #592]	; (8003828 <GPS_PID+0x310>)
 80035d8:	6013      	str	r3, [r2, #0]
	last_calculated_lon_error = calculated_lon_error;
 80035da:	4b96      	ldr	r3, [pc, #600]	; (8003834 <GPS_PID+0x31c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a96      	ldr	r2, [pc, #600]	; (8003838 <GPS_PID+0x320>)
 80035e0:	6013      	str	r3, [r2, #0]

	gps_error_over_time_reading_index++;
 80035e2:	4b8e      	ldr	r3, [pc, #568]	; (800381c <GPS_PID+0x304>)
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	3301      	adds	r3, #1
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	4b8c      	ldr	r3, [pc, #560]	; (800381c <GPS_PID+0x304>)
 80035ec:	701a      	strb	r2, [r3, #0]

	if(gps_error_over_time_reading_index == 40)
 80035ee:	4b8b      	ldr	r3, [pc, #556]	; (800381c <GPS_PID+0x304>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b28      	cmp	r3, #40	; 0x28
 80035f4:	d102      	bne.n	80035fc <GPS_PID+0xe4>
		gps_error_over_time_reading_index = 0;
 80035f6:	4b89      	ldr	r3, [pc, #548]	; (800381c <GPS_PID+0x304>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	701a      	strb	r2, [r3, #0]

	pid_error_temp = calculated_lon_error;
 80035fc:	4b8d      	ldr	r3, [pc, #564]	; (8003834 <GPS_PID+0x31c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a8e      	ldr	r2, [pc, #568]	; (800383c <GPS_PID+0x324>)
 8003602:	6013      	str	r3, [r2, #0]
	gps_roll_modifier_north = ((pid_error_temp * kp_gps_actual) + (lon_error_over_time_total * kd_gps));
 8003604:	4b8d      	ldr	r3, [pc, #564]	; (800383c <GPS_PID+0x324>)
 8003606:	ed93 7a00 	vldr	s14, [r3]
 800360a:	4b8d      	ldr	r3, [pc, #564]	; (8003840 <GPS_PID+0x328>)
 800360c:	edd3 7a00 	vldr	s15, [r3]
 8003610:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003614:	4b85      	ldr	r3, [pc, #532]	; (800382c <GPS_PID+0x314>)
 8003616:	edd3 6a00 	vldr	s13, [r3]
 800361a:	4b8a      	ldr	r3, [pc, #552]	; (8003844 <GPS_PID+0x32c>)
 800361c:	edd3 7a00 	vldr	s15, [r3]
 8003620:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003628:	4b87      	ldr	r3, [pc, #540]	; (8003848 <GPS_PID+0x330>)
 800362a:	edc3 7a00 	vstr	s15, [r3]

	pid_error_temp = calculated_lat_error;
 800362e:	4b7d      	ldr	r3, [pc, #500]	; (8003824 <GPS_PID+0x30c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a82      	ldr	r2, [pc, #520]	; (800383c <GPS_PID+0x324>)
 8003634:	6013      	str	r3, [r2, #0]
	gps_pitch_modifier_north = ((pid_error_temp * kp_gps_actual) + (lat_error_over_time_total * kd_gps));
 8003636:	4b81      	ldr	r3, [pc, #516]	; (800383c <GPS_PID+0x324>)
 8003638:	ed93 7a00 	vldr	s14, [r3]
 800363c:	4b80      	ldr	r3, [pc, #512]	; (8003840 <GPS_PID+0x328>)
 800363e:	edd3 7a00 	vldr	s15, [r3]
 8003642:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003646:	4b74      	ldr	r3, [pc, #464]	; (8003818 <GPS_PID+0x300>)
 8003648:	edd3 6a00 	vldr	s13, [r3]
 800364c:	4b7d      	ldr	r3, [pc, #500]	; (8003844 <GPS_PID+0x32c>)
 800364e:	edd3 7a00 	vldr	s15, [r3]
 8003652:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003656:	ee77 7a27 	vadd.f32	s15, s14, s15
 800365a:	4b7c      	ldr	r3, [pc, #496]	; (800384c <GPS_PID+0x334>)
 800365c:	edc3 7a00 	vstr	s15, [r3]

	gps_roll_modifier = (int32_t)((gps_roll_modifier_north * cos(gyro_z_angle * 0.017453)) + (gps_pitch_modifier_north * sin(gyro_z_angle * 0.017453)));
 8003660:	4b79      	ldr	r3, [pc, #484]	; (8003848 <GPS_PID+0x330>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f7fc ff6f 	bl	8000548 <__aeabi_f2d>
 800366a:	4604      	mov	r4, r0
 800366c:	460d      	mov	r5, r1
 800366e:	4b78      	ldr	r3, [pc, #480]	; (8003850 <GPS_PID+0x338>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f7fc ff68 	bl	8000548 <__aeabi_f2d>
 8003678:	a363      	add	r3, pc, #396	; (adr r3, 8003808 <GPS_PID+0x2f0>)
 800367a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367e:	f7fc ffbb 	bl	80005f8 <__aeabi_dmul>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	ec43 2b17 	vmov	d7, r2, r3
 800368a:	eeb0 0a47 	vmov.f32	s0, s14
 800368e:	eef0 0a67 	vmov.f32	s1, s15
 8003692:	f00e fbd5 	bl	8011e40 <cos>
 8003696:	ec53 2b10 	vmov	r2, r3, d0
 800369a:	4620      	mov	r0, r4
 800369c:	4629      	mov	r1, r5
 800369e:	f7fc ffab 	bl	80005f8 <__aeabi_dmul>
 80036a2:	4603      	mov	r3, r0
 80036a4:	460c      	mov	r4, r1
 80036a6:	4625      	mov	r5, r4
 80036a8:	461c      	mov	r4, r3
 80036aa:	4b68      	ldr	r3, [pc, #416]	; (800384c <GPS_PID+0x334>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fc ff4a 	bl	8000548 <__aeabi_f2d>
 80036b4:	4680      	mov	r8, r0
 80036b6:	4689      	mov	r9, r1
 80036b8:	4b65      	ldr	r3, [pc, #404]	; (8003850 <GPS_PID+0x338>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f7fc ff43 	bl	8000548 <__aeabi_f2d>
 80036c2:	a351      	add	r3, pc, #324	; (adr r3, 8003808 <GPS_PID+0x2f0>)
 80036c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c8:	f7fc ff96 	bl	80005f8 <__aeabi_dmul>
 80036cc:	4602      	mov	r2, r0
 80036ce:	460b      	mov	r3, r1
 80036d0:	ec43 2b17 	vmov	d7, r2, r3
 80036d4:	eeb0 0a47 	vmov.f32	s0, s14
 80036d8:	eef0 0a67 	vmov.f32	s1, s15
 80036dc:	f00e fcc4 	bl	8012068 <sin>
 80036e0:	ec53 2b10 	vmov	r2, r3, d0
 80036e4:	4640      	mov	r0, r8
 80036e6:	4649      	mov	r1, r9
 80036e8:	f7fc ff86 	bl	80005f8 <__aeabi_dmul>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4620      	mov	r0, r4
 80036f2:	4629      	mov	r1, r5
 80036f4:	f7fc fdca 	bl	800028c <__adddf3>
 80036f8:	4603      	mov	r3, r0
 80036fa:	460c      	mov	r4, r1
 80036fc:	4618      	mov	r0, r3
 80036fe:	4621      	mov	r1, r4
 8003700:	f7fd fa2a 	bl	8000b58 <__aeabi_d2iz>
 8003704:	4602      	mov	r2, r0
 8003706:	4b53      	ldr	r3, [pc, #332]	; (8003854 <GPS_PID+0x33c>)
 8003708:	601a      	str	r2, [r3, #0]
	gps_pitch_modifier = (int32_t)((gps_pitch_modifier_north * cos(gyro_z_angle * 0.017453)) + (gps_roll_modifier_north * sin(gyro_z_angle * -0.017453)));
 800370a:	4b50      	ldr	r3, [pc, #320]	; (800384c <GPS_PID+0x334>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f7fc ff1a 	bl	8000548 <__aeabi_f2d>
 8003714:	4604      	mov	r4, r0
 8003716:	460d      	mov	r5, r1
 8003718:	4b4d      	ldr	r3, [pc, #308]	; (8003850 <GPS_PID+0x338>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f7fc ff13 	bl	8000548 <__aeabi_f2d>
 8003722:	a339      	add	r3, pc, #228	; (adr r3, 8003808 <GPS_PID+0x2f0>)
 8003724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003728:	f7fc ff66 	bl	80005f8 <__aeabi_dmul>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	ec43 2b17 	vmov	d7, r2, r3
 8003734:	eeb0 0a47 	vmov.f32	s0, s14
 8003738:	eef0 0a67 	vmov.f32	s1, s15
 800373c:	f00e fb80 	bl	8011e40 <cos>
 8003740:	ec53 2b10 	vmov	r2, r3, d0
 8003744:	4620      	mov	r0, r4
 8003746:	4629      	mov	r1, r5
 8003748:	f7fc ff56 	bl	80005f8 <__aeabi_dmul>
 800374c:	4603      	mov	r3, r0
 800374e:	460c      	mov	r4, r1
 8003750:	4625      	mov	r5, r4
 8003752:	461c      	mov	r4, r3
 8003754:	4b3c      	ldr	r3, [pc, #240]	; (8003848 <GPS_PID+0x330>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f7fc fef5 	bl	8000548 <__aeabi_f2d>
 800375e:	4680      	mov	r8, r0
 8003760:	4689      	mov	r9, r1
 8003762:	4b3b      	ldr	r3, [pc, #236]	; (8003850 <GPS_PID+0x338>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7fc feee 	bl	8000548 <__aeabi_f2d>
 800376c:	a328      	add	r3, pc, #160	; (adr r3, 8003810 <GPS_PID+0x2f8>)
 800376e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003772:	f7fc ff41 	bl	80005f8 <__aeabi_dmul>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	ec43 2b17 	vmov	d7, r2, r3
 800377e:	eeb0 0a47 	vmov.f32	s0, s14
 8003782:	eef0 0a67 	vmov.f32	s1, s15
 8003786:	f00e fc6f 	bl	8012068 <sin>
 800378a:	ec53 2b10 	vmov	r2, r3, d0
 800378e:	4640      	mov	r0, r8
 8003790:	4649      	mov	r1, r9
 8003792:	f7fc ff31 	bl	80005f8 <__aeabi_dmul>
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	4620      	mov	r0, r4
 800379c:	4629      	mov	r1, r5
 800379e:	f7fc fd75 	bl	800028c <__adddf3>
 80037a2:	4603      	mov	r3, r0
 80037a4:	460c      	mov	r4, r1
 80037a6:	4618      	mov	r0, r3
 80037a8:	4621      	mov	r1, r4
 80037aa:	f7fd f9d5 	bl	8000b58 <__aeabi_d2iz>
 80037ae:	4602      	mov	r2, r0
 80037b0:	4b29      	ldr	r3, [pc, #164]	; (8003858 <GPS_PID+0x340>)
 80037b2:	601a      	str	r2, [r3, #0]

	if(gps_roll_modifier > 400)
 80037b4:	4b27      	ldr	r3, [pc, #156]	; (8003854 <GPS_PID+0x33c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80037bc:	dd04      	ble.n	80037c8 <GPS_PID+0x2b0>
		gps_roll_modifier = 400;
 80037be:	4b25      	ldr	r3, [pc, #148]	; (8003854 <GPS_PID+0x33c>)
 80037c0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	e007      	b.n	80037d8 <GPS_PID+0x2c0>
	else if(gps_roll_modifier < -400)
 80037c8:	4b22      	ldr	r3, [pc, #136]	; (8003854 <GPS_PID+0x33c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 80037d0:	da02      	bge.n	80037d8 <GPS_PID+0x2c0>
		gps_roll_modifier = -400;
 80037d2:	4b20      	ldr	r3, [pc, #128]	; (8003854 <GPS_PID+0x33c>)
 80037d4:	4a21      	ldr	r2, [pc, #132]	; (800385c <GPS_PID+0x344>)
 80037d6:	601a      	str	r2, [r3, #0]

	if(gps_pitch_modifier > 400)
 80037d8:	4b1f      	ldr	r3, [pc, #124]	; (8003858 <GPS_PID+0x340>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80037e0:	dd04      	ble.n	80037ec <GPS_PID+0x2d4>
		gps_pitch_modifier = 400;
 80037e2:	4b1d      	ldr	r3, [pc, #116]	; (8003858 <GPS_PID+0x340>)
 80037e4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80037e8:	601a      	str	r2, [r3, #0]
	else if(gps_pitch_modifier < -400)
		gps_pitch_modifier = -400;
}
 80037ea:	e007      	b.n	80037fc <GPS_PID+0x2e4>
	else if(gps_pitch_modifier < -400)
 80037ec:	4b1a      	ldr	r3, [pc, #104]	; (8003858 <GPS_PID+0x340>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 80037f4:	da02      	bge.n	80037fc <GPS_PID+0x2e4>
		gps_pitch_modifier = -400;
 80037f6:	4b18      	ldr	r3, [pc, #96]	; (8003858 <GPS_PID+0x340>)
 80037f8:	4a18      	ldr	r2, [pc, #96]	; (800385c <GPS_PID+0x344>)
 80037fa:	601a      	str	r2, [r3, #0]
}
 80037fc:	bf00      	nop
 80037fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003802:	bf00      	nop
 8003804:	f3af 8000 	nop.w
 8003808:	00de4c51 	.word	0x00de4c51
 800380c:	3f91df33 	.word	0x3f91df33
 8003810:	00de4c51 	.word	0x00de4c51
 8003814:	bf91df33 	.word	0xbf91df33
 8003818:	200008e8 	.word	0x200008e8
 800381c:	2000032a 	.word	0x2000032a
 8003820:	20001144 	.word	0x20001144
 8003824:	200008a0 	.word	0x200008a0
 8003828:	2000105c 	.word	0x2000105c
 800382c:	20000c20 	.word	0x20000c20
 8003830:	2000107c 	.word	0x2000107c
 8003834:	20000cb4 	.word	0x20000cb4
 8003838:	20000ca8 	.word	0x20000ca8
 800383c:	2000124c 	.word	0x2000124c
 8003840:	20000330 	.word	0x20000330
 8003844:	20000338 	.word	0x20000338
 8003848:	20001250 	.word	0x20001250
 800384c:	20000480 	.word	0x20000480
 8003850:	20002104 	.word	0x20002104
 8003854:	2000089c 	.word	0x2000089c
 8003858:	20001234 	.word	0x20001234
 800385c:	fffffe70 	.word	0xfffffe70

08003860 <OpticalFlow_PID>:
float pid_camera_x_i = 0, pid_camera_y_i;

float last_camera_roll_error = 0, last_camera_pitch_error = 0;

void OpticalFlow_PID()
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
	//Roll
	pid_error_temp = 0 - camera_velocity_y;
 8003864:	4b27      	ldr	r3, [pc, #156]	; (8003904 <OpticalFlow_PID+0xa4>)
 8003866:	edd3 7a00 	vldr	s15, [r3]
 800386a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003908 <OpticalFlow_PID+0xa8>
 800386e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003872:	4b26      	ldr	r3, [pc, #152]	; (800390c <OpticalFlow_PID+0xac>)
 8003874:	edc3 7a00 	vstr	s15, [r3]

	camera_roll_modifier = (pid_error_temp * kp_camera) + ((pid_error_temp - last_camera_roll_error) * kd_camera);
 8003878:	4b24      	ldr	r3, [pc, #144]	; (800390c <OpticalFlow_PID+0xac>)
 800387a:	ed93 7a00 	vldr	s14, [r3]
 800387e:	4b24      	ldr	r3, [pc, #144]	; (8003910 <OpticalFlow_PID+0xb0>)
 8003880:	edd3 7a00 	vldr	s15, [r3]
 8003884:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003888:	4b20      	ldr	r3, [pc, #128]	; (800390c <OpticalFlow_PID+0xac>)
 800388a:	edd3 6a00 	vldr	s13, [r3]
 800388e:	4b21      	ldr	r3, [pc, #132]	; (8003914 <OpticalFlow_PID+0xb4>)
 8003890:	edd3 7a00 	vldr	s15, [r3]
 8003894:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003898:	4b1f      	ldr	r3, [pc, #124]	; (8003918 <OpticalFlow_PID+0xb8>)
 800389a:	edd3 7a00 	vldr	s15, [r3]
 800389e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038a6:	4b1d      	ldr	r3, [pc, #116]	; (800391c <OpticalFlow_PID+0xbc>)
 80038a8:	edc3 7a00 	vstr	s15, [r3]

	last_camera_roll_error = pid_error_temp;
 80038ac:	4b17      	ldr	r3, [pc, #92]	; (800390c <OpticalFlow_PID+0xac>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a18      	ldr	r2, [pc, #96]	; (8003914 <OpticalFlow_PID+0xb4>)
 80038b2:	6013      	str	r3, [r2, #0]

	//Pitch
	pid_error_temp = camera_velocity_x - 0;
 80038b4:	4b1a      	ldr	r3, [pc, #104]	; (8003920 <OpticalFlow_PID+0xc0>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a14      	ldr	r2, [pc, #80]	; (800390c <OpticalFlow_PID+0xac>)
 80038ba:	6013      	str	r3, [r2, #0]

	camera_pitch_modifier = (pid_error_temp * kp_camera) + ((pid_error_temp - last_camera_pitch_error) * kd_camera);
 80038bc:	4b13      	ldr	r3, [pc, #76]	; (800390c <OpticalFlow_PID+0xac>)
 80038be:	ed93 7a00 	vldr	s14, [r3]
 80038c2:	4b13      	ldr	r3, [pc, #76]	; (8003910 <OpticalFlow_PID+0xb0>)
 80038c4:	edd3 7a00 	vldr	s15, [r3]
 80038c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038cc:	4b0f      	ldr	r3, [pc, #60]	; (800390c <OpticalFlow_PID+0xac>)
 80038ce:	edd3 6a00 	vldr	s13, [r3]
 80038d2:	4b14      	ldr	r3, [pc, #80]	; (8003924 <OpticalFlow_PID+0xc4>)
 80038d4:	edd3 7a00 	vldr	s15, [r3]
 80038d8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80038dc:	4b0e      	ldr	r3, [pc, #56]	; (8003918 <OpticalFlow_PID+0xb8>)
 80038de:	edd3 7a00 	vldr	s15, [r3]
 80038e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038ea:	4b0f      	ldr	r3, [pc, #60]	; (8003928 <OpticalFlow_PID+0xc8>)
 80038ec:	edc3 7a00 	vstr	s15, [r3]

	last_camera_pitch_error = pid_error_temp;
 80038f0:	4b06      	ldr	r3, [pc, #24]	; (800390c <OpticalFlow_PID+0xac>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a0b      	ldr	r2, [pc, #44]	; (8003924 <OpticalFlow_PID+0xc4>)
 80038f6:	6013      	str	r3, [r2, #0]
}
 80038f8:	bf00      	nop
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	20000394 	.word	0x20000394
 8003908:	00000000 	.word	0x00000000
 800390c:	2000124c 	.word	0x2000124c
 8003910:	20000058 	.word	0x20000058
 8003914:	20000344 	.word	0x20000344
 8003918:	2000033c 	.word	0x2000033c
 800391c:	20000898 	.word	0x20000898
 8003920:	20000390 	.word	0x20000390
 8003924:	20000348 	.word	0x20000348
 8003928:	20001230 	.word	0x20001230
 800392c:	00000000 	.word	0x00000000

08003930 <Launch_Behavior>:
int32_t idle_throttle = 125;
uint8_t z_acc_fast_reading_index = 0, z_acc_slow_reading_index = 0;
uint32_t launch_timer;

void Launch_Behavior()
{
 8003930:	b590      	push	{r4, r7, lr}
 8003932:	b083      	sub	sp, #12
 8003934:	af02      	add	r7, sp, #8
	z_acc_fast_total -= z_acc_fast[z_acc_fast_reading_index];
 8003936:	4b5a      	ldr	r3, [pc, #360]	; (8003aa0 <Launch_Behavior+0x170>)
 8003938:	ed93 7a00 	vldr	s14, [r3]
 800393c:	4b59      	ldr	r3, [pc, #356]	; (8003aa4 <Launch_Behavior+0x174>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	4a59      	ldr	r2, [pc, #356]	; (8003aa8 <Launch_Behavior+0x178>)
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	edd3 7a00 	vldr	s15, [r3]
 800394a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800394e:	4b54      	ldr	r3, [pc, #336]	; (8003aa0 <Launch_Behavior+0x170>)
 8003950:	edc3 7a00 	vstr	s15, [r3]
	z_acc_fast[z_acc_fast_reading_index] = acc_magnitude;
 8003954:	4b53      	ldr	r3, [pc, #332]	; (8003aa4 <Launch_Behavior+0x174>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	4b54      	ldr	r3, [pc, #336]	; (8003aac <Launch_Behavior+0x17c>)
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	4952      	ldr	r1, [pc, #328]	; (8003aa8 <Launch_Behavior+0x178>)
 8003960:	0083      	lsls	r3, r0, #2
 8003962:	440b      	add	r3, r1
 8003964:	601a      	str	r2, [r3, #0]
	z_acc_fast_total += z_acc_fast[z_acc_fast_reading_index];
 8003966:	4b4f      	ldr	r3, [pc, #316]	; (8003aa4 <Launch_Behavior+0x174>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	4a4f      	ldr	r2, [pc, #316]	; (8003aa8 <Launch_Behavior+0x178>)
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	ed93 7a00 	vldr	s14, [r3]
 8003974:	4b4a      	ldr	r3, [pc, #296]	; (8003aa0 <Launch_Behavior+0x170>)
 8003976:	edd3 7a00 	vldr	s15, [r3]
 800397a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800397e:	4b48      	ldr	r3, [pc, #288]	; (8003aa0 <Launch_Behavior+0x170>)
 8003980:	edc3 7a00 	vstr	s15, [r3]

	z_acc_fast_reading_index++;
 8003984:	4b47      	ldr	r3, [pc, #284]	; (8003aa4 <Launch_Behavior+0x174>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	3301      	adds	r3, #1
 800398a:	b2da      	uxtb	r2, r3
 800398c:	4b45      	ldr	r3, [pc, #276]	; (8003aa4 <Launch_Behavior+0x174>)
 800398e:	701a      	strb	r2, [r3, #0]

	if(z_acc_fast_reading_index == 25)
 8003990:	4b44      	ldr	r3, [pc, #272]	; (8003aa4 <Launch_Behavior+0x174>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b19      	cmp	r3, #25
 8003996:	d102      	bne.n	800399e <Launch_Behavior+0x6e>
	{
		z_acc_fast_reading_index = 0;
 8003998:	4b42      	ldr	r3, [pc, #264]	; (8003aa4 <Launch_Behavior+0x174>)
 800399a:	2200      	movs	r2, #0
 800399c:	701a      	strb	r2, [r3, #0]
	}

	if(GetMillisDifference(&launch_timer) >= 1000)
 800399e:	4844      	ldr	r0, [pc, #272]	; (8003ab0 <Launch_Behavior+0x180>)
 80039a0:	f001 ffde 	bl	8005960 <GetMillisDifference>
 80039a4:	4603      	mov	r3, r0
 80039a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039aa:	d371      	bcc.n	8003a90 <Launch_Behavior+0x160>
	{
		hover_throttle += 0.08;
 80039ac:	4b41      	ldr	r3, [pc, #260]	; (8003ab4 <Launch_Behavior+0x184>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fc fdc9 	bl	8000548 <__aeabi_f2d>
 80039b6:	a338      	add	r3, pc, #224	; (adr r3, 8003a98 <Launch_Behavior+0x168>)
 80039b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039bc:	f7fc fc66 	bl	800028c <__adddf3>
 80039c0:	4603      	mov	r3, r0
 80039c2:	460c      	mov	r4, r1
 80039c4:	4618      	mov	r0, r3
 80039c6:	4621      	mov	r1, r4
 80039c8:	f7fd f8ee 	bl	8000ba8 <__aeabi_d2f>
 80039cc:	4602      	mov	r2, r0
 80039ce:	4b39      	ldr	r3, [pc, #228]	; (8003ab4 <Launch_Behavior+0x184>)
 80039d0:	601a      	str	r2, [r3, #0]
		idle_throttle = (int32_t)hover_throttle;
 80039d2:	4b38      	ldr	r3, [pc, #224]	; (8003ab4 <Launch_Behavior+0x184>)
 80039d4:	edd3 7a00 	vldr	s15, [r3]
 80039d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039dc:	ee17 2a90 	vmov	r2, s15
 80039e0:	4b35      	ldr	r3, [pc, #212]	; (8003ab8 <Launch_Behavior+0x188>)
 80039e2:	601a      	str	r2, [r3, #0]

		if((z_acc_fast_total / 25) - acc_magnitude_at_start > 1500)
 80039e4:	4b2e      	ldr	r3, [pc, #184]	; (8003aa0 <Launch_Behavior+0x170>)
 80039e6:	edd3 7a00 	vldr	s15, [r3]
 80039ea:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80039ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80039f2:	4b32      	ldr	r3, [pc, #200]	; (8003abc <Launch_Behavior+0x18c>)
 80039f4:	edd3 7a00 	vldr	s15, [r3]
 80039f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039fc:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003ac0 <Launch_Behavior+0x190>
 8003a00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a08:	dc00      	bgt.n	8003a0c <Launch_Behavior+0xdc>
			ClearPrintBuffer();
			sprintf((char *)print_text_buffer, "%s%ld%s", "Launched: ", idle_throttle, "\n");
			PrintManualPacket();
		}
	}
}
 8003a0a:	e041      	b.n	8003a90 <Launch_Behavior+0x160>
			launched = 1;
 8003a0c:	4b2d      	ldr	r3, [pc, #180]	; (8003ac4 <Launch_Behavior+0x194>)
 8003a0e:	2201      	movs	r2, #1
 8003a10:	701a      	strb	r2, [r3, #0]
			launching = 0;
 8003a12:	4b2d      	ldr	r3, [pc, #180]	; (8003ac8 <Launch_Behavior+0x198>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	701a      	strb	r2, [r3, #0]
			landing = 0;
 8003a18:	4b2c      	ldr	r3, [pc, #176]	; (8003acc <Launch_Behavior+0x19c>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	701a      	strb	r2, [r3, #0]
			pid_current_altitude_setpoint = 3;
 8003a1e:	4b2c      	ldr	r3, [pc, #176]	; (8003ad0 <Launch_Behavior+0x1a0>)
 8003a20:	4a2c      	ldr	r2, [pc, #176]	; (8003ad4 <Launch_Behavior+0x1a4>)
 8003a22:	601a      	str	r2, [r3, #0]
			pid_altitude_setpoint = 3;
 8003a24:	4b2c      	ldr	r3, [pc, #176]	; (8003ad8 <Launch_Behavior+0x1a8>)
 8003a26:	4a2b      	ldr	r2, [pc, #172]	; (8003ad4 <Launch_Behavior+0x1a4>)
 8003a28:	601a      	str	r2, [r3, #0]
			lat_mem[0] = raw_gps_lat;
 8003a2a:	4b2c      	ldr	r3, [pc, #176]	; (8003adc <Launch_Behavior+0x1ac>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a2c      	ldr	r2, [pc, #176]	; (8003ae0 <Launch_Behavior+0x1b0>)
 8003a30:	6013      	str	r3, [r2, #0]
			lon_mem[0] = raw_gps_lon;
 8003a32:	4b2c      	ldr	r3, [pc, #176]	; (8003ae4 <Launch_Behavior+0x1b4>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a2c      	ldr	r2, [pc, #176]	; (8003ae8 <Launch_Behavior+0x1b8>)
 8003a38:	6013      	str	r3, [r2, #0]
			gps_setpoint = 0;
 8003a3a:	4b2c      	ldr	r3, [pc, #176]	; (8003aec <Launch_Behavior+0x1bc>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	701a      	strb	r2, [r3, #0]
			current_lat_setpoint = lat_mem[0];
 8003a40:	4b27      	ldr	r3, [pc, #156]	; (8003ae0 <Launch_Behavior+0x1b0>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a2a      	ldr	r2, [pc, #168]	; (8003af0 <Launch_Behavior+0x1c0>)
 8003a46:	6013      	str	r3, [r2, #0]
			current_lon_setpoint = lon_mem[0];
 8003a48:	4b27      	ldr	r3, [pc, #156]	; (8003ae8 <Launch_Behavior+0x1b8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a29      	ldr	r2, [pc, #164]	; (8003af4 <Launch_Behavior+0x1c4>)
 8003a4e:	6013      	str	r3, [r2, #0]
			ready_for_next_command = 1;
 8003a50:	4b29      	ldr	r3, [pc, #164]	; (8003af8 <Launch_Behavior+0x1c8>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	701a      	strb	r2, [r3, #0]
			ready_for_next_command_high_priority = 1;
 8003a56:	4b29      	ldr	r3, [pc, #164]	; (8003afc <Launch_Behavior+0x1cc>)
 8003a58:	2201      	movs	r2, #1
 8003a5a:	701a      	strb	r2, [r3, #0]
			altitude_hold_flag = 1;
 8003a5c:	4b28      	ldr	r3, [pc, #160]	; (8003b00 <Launch_Behavior+0x1d0>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	701a      	strb	r2, [r3, #0]
			gps_hold_flag = 1;
 8003a62:	4b28      	ldr	r3, [pc, #160]	; (8003b04 <Launch_Behavior+0x1d4>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	701a      	strb	r2, [r3, #0]
			last_gps_hold_flag = 0;
 8003a68:	4b27      	ldr	r3, [pc, #156]	; (8003b08 <Launch_Behavior+0x1d8>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	701a      	strb	r2, [r3, #0]
			gps_waypoint_flag = 0;
 8003a6e:	4b27      	ldr	r3, [pc, #156]	; (8003b0c <Launch_Behavior+0x1dc>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	701a      	strb	r2, [r3, #0]
			ClearPrintBuffer();
 8003a74:	f003 fbe2 	bl	800723c <ClearPrintBuffer>
			sprintf((char *)print_text_buffer, "%s%ld%s", "Launched: ", idle_throttle, "\n");
 8003a78:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <Launch_Behavior+0x188>)
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	4b24      	ldr	r3, [pc, #144]	; (8003b10 <Launch_Behavior+0x1e0>)
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	4613      	mov	r3, r2
 8003a82:	4a24      	ldr	r2, [pc, #144]	; (8003b14 <Launch_Behavior+0x1e4>)
 8003a84:	4924      	ldr	r1, [pc, #144]	; (8003b18 <Launch_Behavior+0x1e8>)
 8003a86:	4825      	ldr	r0, [pc, #148]	; (8003b1c <Launch_Behavior+0x1ec>)
 8003a88:	f011 fb18 	bl	80150bc <siprintf>
			PrintManualPacket();
 8003a8c:	f003 fbf0 	bl	8007270 <PrintManualPacket>
}
 8003a90:	bf00      	nop
 8003a92:	3704      	adds	r7, #4
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd90      	pop	{r4, r7, pc}
 8003a98:	47ae147b 	.word	0x47ae147b
 8003a9c:	3fb47ae1 	.word	0x3fb47ae1
 8003aa0:	20001074 	.word	0x20001074
 8003aa4:	2000034c 	.word	0x2000034c
 8003aa8:	20000c30 	.word	0x20000c30
 8003aac:	20002108 	.word	0x20002108
 8003ab0:	20001060 	.word	0x20001060
 8003ab4:	2000005c 	.word	0x2000005c
 8003ab8:	20000060 	.word	0x20000060
 8003abc:	200020e8 	.word	0x200020e8
 8003ac0:	44bb8000 	.word	0x44bb8000
 8003ac4:	20000360 	.word	0x20000360
 8003ac8:	20000361 	.word	0x20000361
 8003acc:	20000362 	.word	0x20000362
 8003ad0:	20000020 	.word	0x20000020
 8003ad4:	40400000 	.word	0x40400000
 8003ad8:	20000024 	.word	0x20000024
 8003adc:	20000fdc 	.word	0x20000fdc
 8003ae0:	20000cbc 	.word	0x20000cbc
 8003ae4:	20000fe0 	.word	0x20000fe0
 8003ae8:	20000530 	.word	0x20000530
 8003aec:	20000329 	.word	0x20000329
 8003af0:	20000c24 	.word	0x20000c24
 8003af4:	200008ec 	.word	0x200008ec
 8003af8:	20000064 	.word	0x20000064
 8003afc:	20000065 	.word	0x20000065
 8003b00:	20000381 	.word	0x20000381
 8003b04:	20000382 	.word	0x20000382
 8003b08:	20000383 	.word	0x20000383
 8003b0c:	20000384 	.word	0x20000384
 8003b10:	080155b8 	.word	0x080155b8
 8003b14:	080155a4 	.word	0x080155a4
 8003b18:	080155b0 	.word	0x080155b0
 8003b1c:	20002234 	.word	0x20002234

08003b20 <Land_Behavior>:

float temp_max_acc = 0;

void Land_Behavior()
{
 8003b20:	b598      	push	{r3, r4, r7, lr}
 8003b22:	af00      	add	r7, sp, #0
	z_acc_fast_total -= z_acc_fast[z_acc_fast_reading_index];
 8003b24:	4b7e      	ldr	r3, [pc, #504]	; (8003d20 <Land_Behavior+0x200>)
 8003b26:	ed93 7a00 	vldr	s14, [r3]
 8003b2a:	4b7e      	ldr	r3, [pc, #504]	; (8003d24 <Land_Behavior+0x204>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	4a7e      	ldr	r2, [pc, #504]	; (8003d28 <Land_Behavior+0x208>)
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4413      	add	r3, r2
 8003b34:	edd3 7a00 	vldr	s15, [r3]
 8003b38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b3c:	4b78      	ldr	r3, [pc, #480]	; (8003d20 <Land_Behavior+0x200>)
 8003b3e:	edc3 7a00 	vstr	s15, [r3]
	z_acc_fast[z_acc_fast_reading_index] = acc_magnitude;
 8003b42:	4b78      	ldr	r3, [pc, #480]	; (8003d24 <Land_Behavior+0x204>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	4b78      	ldr	r3, [pc, #480]	; (8003d2c <Land_Behavior+0x20c>)
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	4976      	ldr	r1, [pc, #472]	; (8003d28 <Land_Behavior+0x208>)
 8003b4e:	0083      	lsls	r3, r0, #2
 8003b50:	440b      	add	r3, r1
 8003b52:	601a      	str	r2, [r3, #0]
	z_acc_fast_total += z_acc_fast[z_acc_fast_reading_index];
 8003b54:	4b73      	ldr	r3, [pc, #460]	; (8003d24 <Land_Behavior+0x204>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	4a73      	ldr	r2, [pc, #460]	; (8003d28 <Land_Behavior+0x208>)
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	ed93 7a00 	vldr	s14, [r3]
 8003b62:	4b6f      	ldr	r3, [pc, #444]	; (8003d20 <Land_Behavior+0x200>)
 8003b64:	edd3 7a00 	vldr	s15, [r3]
 8003b68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b6c:	4b6c      	ldr	r3, [pc, #432]	; (8003d20 <Land_Behavior+0x200>)
 8003b6e:	edc3 7a00 	vstr	s15, [r3]

	z_acc_fast_reading_index++;
 8003b72:	4b6c      	ldr	r3, [pc, #432]	; (8003d24 <Land_Behavior+0x204>)
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	3301      	adds	r3, #1
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	4b6a      	ldr	r3, [pc, #424]	; (8003d24 <Land_Behavior+0x204>)
 8003b7c:	701a      	strb	r2, [r3, #0]

	if(z_acc_fast_reading_index == 25)
 8003b7e:	4b69      	ldr	r3, [pc, #420]	; (8003d24 <Land_Behavior+0x204>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	2b19      	cmp	r3, #25
 8003b84:	d102      	bne.n	8003b8c <Land_Behavior+0x6c>
	{
		z_acc_fast_reading_index = 0;
 8003b86:	4b67      	ldr	r3, [pc, #412]	; (8003d24 <Land_Behavior+0x204>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	701a      	strb	r2, [r3, #0]
	}

	if(GetMillisDifference(&launch_timer) >= 1000)
 8003b8c:	4868      	ldr	r0, [pc, #416]	; (8003d30 <Land_Behavior+0x210>)
 8003b8e:	f001 fee7 	bl	8005960 <GetMillisDifference>
 8003b92:	4603      	mov	r3, r0
 8003b94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b98:	f0c0 80bc 	bcc.w	8003d14 <Land_Behavior+0x1f4>
	{
		pid_altitude_setpoint -= 0.002;
 8003b9c:	4b65      	ldr	r3, [pc, #404]	; (8003d34 <Land_Behavior+0x214>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fc fcd1 	bl	8000548 <__aeabi_f2d>
 8003ba6:	a35c      	add	r3, pc, #368	; (adr r3, 8003d18 <Land_Behavior+0x1f8>)
 8003ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bac:	f7fc fb6c 	bl	8000288 <__aeabi_dsub>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	460c      	mov	r4, r1
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	4621      	mov	r1, r4
 8003bb8:	f7fc fff6 	bl	8000ba8 <__aeabi_d2f>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4b5d      	ldr	r3, [pc, #372]	; (8003d34 <Land_Behavior+0x214>)
 8003bc0:	601a      	str	r2, [r3, #0]

		if(abs((z_acc_fast_total / 25) - acc_magnitude_at_start) > temp_max_acc)
 8003bc2:	4b57      	ldr	r3, [pc, #348]	; (8003d20 <Land_Behavior+0x200>)
 8003bc4:	edd3 7a00 	vldr	s15, [r3]
 8003bc8:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003bcc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003bd0:	4b59      	ldr	r3, [pc, #356]	; (8003d38 <Land_Behavior+0x218>)
 8003bd2:	edd3 7a00 	vldr	s15, [r3]
 8003bd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be2:	db0c      	blt.n	8003bfe <Land_Behavior+0xde>
 8003be4:	4b4e      	ldr	r3, [pc, #312]	; (8003d20 <Land_Behavior+0x200>)
 8003be6:	edd3 7a00 	vldr	s15, [r3]
 8003bea:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003bee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003bf2:	4b51      	ldr	r3, [pc, #324]	; (8003d38 <Land_Behavior+0x218>)
 8003bf4:	edd3 7a00 	vldr	s15, [r3]
 8003bf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bfc:	e00d      	b.n	8003c1a <Land_Behavior+0xfa>
 8003bfe:	4b48      	ldr	r3, [pc, #288]	; (8003d20 <Land_Behavior+0x200>)
 8003c00:	edd3 7a00 	vldr	s15, [r3]
 8003c04:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003c08:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003c0c:	4b4a      	ldr	r3, [pc, #296]	; (8003d38 <Land_Behavior+0x218>)
 8003c0e:	edd3 7a00 	vldr	s15, [r3]
 8003c12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c16:	eef1 7a67 	vneg.f32	s15, s15
 8003c1a:	4b48      	ldr	r3, [pc, #288]	; (8003d3c <Land_Behavior+0x21c>)
 8003c1c:	ed93 7a00 	vldr	s14, [r3]
 8003c20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c28:	dd2e      	ble.n	8003c88 <Land_Behavior+0x168>
		{
			temp_max_acc = abs((z_acc_fast_total / 25) - acc_magnitude_at_start);
 8003c2a:	4b3d      	ldr	r3, [pc, #244]	; (8003d20 <Land_Behavior+0x200>)
 8003c2c:	edd3 7a00 	vldr	s15, [r3]
 8003c30:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003c34:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003c38:	4b3f      	ldr	r3, [pc, #252]	; (8003d38 <Land_Behavior+0x218>)
 8003c3a:	edd3 7a00 	vldr	s15, [r3]
 8003c3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c4a:	db0c      	blt.n	8003c66 <Land_Behavior+0x146>
 8003c4c:	4b34      	ldr	r3, [pc, #208]	; (8003d20 <Land_Behavior+0x200>)
 8003c4e:	edd3 7a00 	vldr	s15, [r3]
 8003c52:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003c56:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003c5a:	4b37      	ldr	r3, [pc, #220]	; (8003d38 <Land_Behavior+0x218>)
 8003c5c:	edd3 7a00 	vldr	s15, [r3]
 8003c60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c64:	e00d      	b.n	8003c82 <Land_Behavior+0x162>
 8003c66:	4b2e      	ldr	r3, [pc, #184]	; (8003d20 <Land_Behavior+0x200>)
 8003c68:	edd3 7a00 	vldr	s15, [r3]
 8003c6c:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003c70:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003c74:	4b30      	ldr	r3, [pc, #192]	; (8003d38 <Land_Behavior+0x218>)
 8003c76:	edd3 7a00 	vldr	s15, [r3]
 8003c7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c7e:	eef1 7a67 	vneg.f32	s15, s15
 8003c82:	4b2e      	ldr	r3, [pc, #184]	; (8003d3c <Land_Behavior+0x21c>)
 8003c84:	edc3 7a00 	vstr	s15, [r3]
		}

		if((z_acc_fast_total / 25) - acc_magnitude_at_start > 4000)
 8003c88:	4b25      	ldr	r3, [pc, #148]	; (8003d20 <Land_Behavior+0x200>)
 8003c8a:	edd3 7a00 	vldr	s15, [r3]
 8003c8e:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003c92:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003c96:	4b28      	ldr	r3, [pc, #160]	; (8003d38 <Land_Behavior+0x218>)
 8003c98:	edd3 7a00 	vldr	s15, [r3]
 8003c9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ca0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003d40 <Land_Behavior+0x220>
 8003ca4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cac:	dc00      	bgt.n	8003cb0 <Land_Behavior+0x190>
			//sprintf((char *)print_text_buffer, "%s%ld%s", "Landed: ", (int32_t)temp_max_acc, "\n");
			sprintf((char *)print_text_buffer, "%s", "Landed.\n");
			PrintManualPacket();
		}
	}
}
 8003cae:	e031      	b.n	8003d14 <Land_Behavior+0x1f4>
			launched = 0;
 8003cb0:	4b24      	ldr	r3, [pc, #144]	; (8003d44 <Land_Behavior+0x224>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	701a      	strb	r2, [r3, #0]
			launching = 0;
 8003cb6:	4b24      	ldr	r3, [pc, #144]	; (8003d48 <Land_Behavior+0x228>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	701a      	strb	r2, [r3, #0]
			landing = 0;
 8003cbc:	4b23      	ldr	r3, [pc, #140]	; (8003d4c <Land_Behavior+0x22c>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	701a      	strb	r2, [r3, #0]
			pid_current_altitude_setpoint = 3;
 8003cc2:	4b23      	ldr	r3, [pc, #140]	; (8003d50 <Land_Behavior+0x230>)
 8003cc4:	4a23      	ldr	r2, [pc, #140]	; (8003d54 <Land_Behavior+0x234>)
 8003cc6:	601a      	str	r2, [r3, #0]
			pid_altitude_setpoint = 3;
 8003cc8:	4b1a      	ldr	r3, [pc, #104]	; (8003d34 <Land_Behavior+0x214>)
 8003cca:	4a22      	ldr	r2, [pc, #136]	; (8003d54 <Land_Behavior+0x234>)
 8003ccc:	601a      	str	r2, [r3, #0]
			hover_throttle = 125;
 8003cce:	4b22      	ldr	r3, [pc, #136]	; (8003d58 <Land_Behavior+0x238>)
 8003cd0:	4a22      	ldr	r2, [pc, #136]	; (8003d5c <Land_Behavior+0x23c>)
 8003cd2:	601a      	str	r2, [r3, #0]
			idle_throttle = 125;
 8003cd4:	4b22      	ldr	r3, [pc, #136]	; (8003d60 <Land_Behavior+0x240>)
 8003cd6:	227d      	movs	r2, #125	; 0x7d
 8003cd8:	601a      	str	r2, [r3, #0]
			altitude_hold_flag = 0;
 8003cda:	4b22      	ldr	r3, [pc, #136]	; (8003d64 <Land_Behavior+0x244>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	701a      	strb	r2, [r3, #0]
			gps_hold_flag = 0;
 8003ce0:	4b21      	ldr	r3, [pc, #132]	; (8003d68 <Land_Behavior+0x248>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	701a      	strb	r2, [r3, #0]
			last_gps_hold_flag = 0;
 8003ce6:	4b21      	ldr	r3, [pc, #132]	; (8003d6c <Land_Behavior+0x24c>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	701a      	strb	r2, [r3, #0]
			gps_waypoint_flag = 0;
 8003cec:	4b20      	ldr	r3, [pc, #128]	; (8003d70 <Land_Behavior+0x250>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	701a      	strb	r2, [r3, #0]
			ready_for_next_command = 1;
 8003cf2:	4b20      	ldr	r3, [pc, #128]	; (8003d74 <Land_Behavior+0x254>)
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	701a      	strb	r2, [r3, #0]
			ready_for_next_command_high_priority = 1;
 8003cf8:	4b1f      	ldr	r3, [pc, #124]	; (8003d78 <Land_Behavior+0x258>)
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	701a      	strb	r2, [r3, #0]
			ClearPrintBuffer();
 8003cfe:	f003 fa9d 	bl	800723c <ClearPrintBuffer>
			sprintf((char *)print_text_buffer, "%s", "Landed.\n");
 8003d02:	4a1e      	ldr	r2, [pc, #120]	; (8003d7c <Land_Behavior+0x25c>)
 8003d04:	4b1e      	ldr	r3, [pc, #120]	; (8003d80 <Land_Behavior+0x260>)
 8003d06:	cb03      	ldmia	r3!, {r0, r1}
 8003d08:	6010      	str	r0, [r2, #0]
 8003d0a:	6051      	str	r1, [r2, #4]
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	7213      	strb	r3, [r2, #8]
			PrintManualPacket();
 8003d10:	f003 faae 	bl	8007270 <PrintManualPacket>
}
 8003d14:	bf00      	nop
 8003d16:	bd98      	pop	{r3, r4, r7, pc}
 8003d18:	d2f1a9fc 	.word	0xd2f1a9fc
 8003d1c:	3f60624d 	.word	0x3f60624d
 8003d20:	20001074 	.word	0x20001074
 8003d24:	2000034c 	.word	0x2000034c
 8003d28:	20000c30 	.word	0x20000c30
 8003d2c:	20002108 	.word	0x20002108
 8003d30:	20001060 	.word	0x20001060
 8003d34:	20000024 	.word	0x20000024
 8003d38:	200020e8 	.word	0x200020e8
 8003d3c:	20000350 	.word	0x20000350
 8003d40:	457a0000 	.word	0x457a0000
 8003d44:	20000360 	.word	0x20000360
 8003d48:	20000361 	.word	0x20000361
 8003d4c:	20000362 	.word	0x20000362
 8003d50:	20000020 	.word	0x20000020
 8003d54:	40400000 	.word	0x40400000
 8003d58:	2000005c 	.word	0x2000005c
 8003d5c:	42fa0000 	.word	0x42fa0000
 8003d60:	20000060 	.word	0x20000060
 8003d64:	20000381 	.word	0x20000381
 8003d68:	20000382 	.word	0x20000382
 8003d6c:	20000383 	.word	0x20000383
 8003d70:	20000384 	.word	0x20000384
 8003d74:	20000064 	.word	0x20000064
 8003d78:	20000065 	.word	0x20000065
 8003d7c:	20002234 	.word	0x20002234
 8003d80:	080155bc 	.word	0x080155bc

08003d84 <Control_Loop>:
uint8_t launched = 0, launching = 0, landing = 0;
uint8_t ready_for_next_command = 1, ready_for_next_command_high_priority = 1;
uint8_t manual_mode = 0;

void Control_Loop()
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
	if(high_priority_program_width > 0 && ready_for_next_command_high_priority)
 8003d8a:	4b28      	ldr	r3, [pc, #160]	; (8003e2c <Control_Loop+0xa8>)
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d026      	beq.n	8003de0 <Control_Loop+0x5c>
 8003d92:	4b27      	ldr	r3, [pc, #156]	; (8003e30 <Control_Loop+0xac>)
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d022      	beq.n	8003de0 <Control_Loop+0x5c>
	{
		if(GetMillisDifference(&high_priority_control_loop_wait_timer) >= high_priority_control_loop_wait_time)
 8003d9a:	4826      	ldr	r0, [pc, #152]	; (8003e34 <Control_Loop+0xb0>)
 8003d9c:	f001 fde0 	bl	8005960 <GetMillisDifference>
 8003da0:	4602      	mov	r2, r0
 8003da2:	4b25      	ldr	r3, [pc, #148]	; (8003e38 <Control_Loop+0xb4>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d33c      	bcc.n	8003e24 <Control_Loop+0xa0>
		{
			uint16_t increment_index = Parse_Command((uint8_t *)&high_priority_program_buffer, high_priority_program_counter, 1);
 8003daa:	4b24      	ldr	r3, [pc, #144]	; (8003e3c <Control_Loop+0xb8>)
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	2201      	movs	r2, #1
 8003db2:	4619      	mov	r1, r3
 8003db4:	4822      	ldr	r0, [pc, #136]	; (8003e40 <Control_Loop+0xbc>)
 8003db6:	f000 f84f 	bl	8003e58 <Parse_Command>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	80fb      	strh	r3, [r7, #6]
			high_priority_program_width -= increment_index;
 8003dbe:	4b1b      	ldr	r3, [pc, #108]	; (8003e2c <Control_Loop+0xa8>)
 8003dc0:	781a      	ldrb	r2, [r3, #0]
 8003dc2:	88fb      	ldrh	r3, [r7, #6]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	4b18      	ldr	r3, [pc, #96]	; (8003e2c <Control_Loop+0xa8>)
 8003dcc:	701a      	strb	r2, [r3, #0]
			high_priority_program_counter += increment_index;
 8003dce:	88fb      	ldrh	r3, [r7, #6]
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	4b1a      	ldr	r3, [pc, #104]	; (8003e3c <Control_Loop+0xb8>)
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	4b18      	ldr	r3, [pc, #96]	; (8003e3c <Control_Loop+0xb8>)
 8003ddc:	701a      	strb	r2, [r3, #0]
		if(GetMillisDifference(&high_priority_control_loop_wait_timer) >= high_priority_control_loop_wait_time)
 8003dde:	e021      	b.n	8003e24 <Control_Loop+0xa0>
		}
	}
	else if(program_counter < 512 && ready_for_next_command)
 8003de0:	4b18      	ldr	r3, [pc, #96]	; (8003e44 <Control_Loop+0xc0>)
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003de8:	d21c      	bcs.n	8003e24 <Control_Loop+0xa0>
 8003dea:	4b17      	ldr	r3, [pc, #92]	; (8003e48 <Control_Loop+0xc4>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d018      	beq.n	8003e24 <Control_Loop+0xa0>
	{
		if(GetMillisDifference(&control_loop_wait_timer) >= control_loop_wait_time)
 8003df2:	4816      	ldr	r0, [pc, #88]	; (8003e4c <Control_Loop+0xc8>)
 8003df4:	f001 fdb4 	bl	8005960 <GetMillisDifference>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	4b15      	ldr	r3, [pc, #84]	; (8003e50 <Control_Loop+0xcc>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d310      	bcc.n	8003e24 <Control_Loop+0xa0>
		{
			uint16_t increment_index = Parse_Command((uint8_t *)&program_buffer, program_counter, 0);
 8003e02:	4b10      	ldr	r3, [pc, #64]	; (8003e44 <Control_Loop+0xc0>)
 8003e04:	881b      	ldrh	r3, [r3, #0]
 8003e06:	2200      	movs	r2, #0
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4812      	ldr	r0, [pc, #72]	; (8003e54 <Control_Loop+0xd0>)
 8003e0c:	f000 f824 	bl	8003e58 <Parse_Command>
 8003e10:	4603      	mov	r3, r0
 8003e12:	80bb      	strh	r3, [r7, #4]
			program_counter += increment_index;
 8003e14:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <Control_Loop+0xc0>)
 8003e16:	881a      	ldrh	r2, [r3, #0]
 8003e18:	88bb      	ldrh	r3, [r7, #4]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <Control_Loop+0xc0>)
 8003e20:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8003e22:	e7ff      	b.n	8003e24 <Control_Loop+0xa0>
 8003e24:	bf00      	nop
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	20000357 	.word	0x20000357
 8003e30:	20000065 	.word	0x20000065
 8003e34:	20001480 	.word	0x20001480
 8003e38:	2000035c 	.word	0x2000035c
 8003e3c:	20000356 	.word	0x20000356
 8003e40:	20001460 	.word	0x20001460
 8003e44:	20000354 	.word	0x20000354
 8003e48:	20000064 	.word	0x20000064
 8003e4c:	20001494 	.word	0x20001494
 8003e50:	20000358 	.word	0x20000358
 8003e54:	20001260 	.word	0x20001260

08003e58 <Parse_Command>:

uint16_t Parse_Command(uint8_t *cmd_array, uint16_t cmd_index, uint8_t high_priority)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	460b      	mov	r3, r1
 8003e62:	807b      	strh	r3, [r7, #2]
 8003e64:	4613      	mov	r3, r2
 8003e66:	707b      	strb	r3, [r7, #1]
	uint16_t output_index = 0;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	81fb      	strh	r3, [r7, #14]

	switch(cmd_array[cmd_index])
 8003e6c:	887b      	ldrh	r3, [r7, #2]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	4413      	add	r3, r2
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d87f      	bhi.n	8003f78 <Parse_Command+0x120>
 8003e78:	a201      	add	r2, pc, #4	; (adr r2, 8003e80 <Parse_Command+0x28>)
 8003e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7e:	bf00      	nop
 8003e80:	08003ea5 	.word	0x08003ea5
 8003e84:	08003ead 	.word	0x08003ead
 8003e88:	08003ee3 	.word	0x08003ee3
 8003e8c:	08003f23 	.word	0x08003f23
 8003e90:	08003f29 	.word	0x08003f29
 8003e94:	08003f37 	.word	0x08003f37
 8003e98:	08003f45 	.word	0x08003f45
 8003e9c:	08003f79 	.word	0x08003f79
 8003ea0:	08003f79 	.word	0x08003f79
	{
	case 0x00:	//No OP
		output_index++;
 8003ea4:	89fb      	ldrh	r3, [r7, #14]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	81fb      	strh	r3, [r7, #14]
		break;
 8003eaa:	e065      	b.n	8003f78 <Parse_Command+0x120>
	case 0x01:	//Toggle LED: uint8_t
		if(cmd_array[cmd_index + 1] == 0x01)
 8003eac:	887b      	ldrh	r3, [r7, #2]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d104      	bne.n	8003ec4 <Parse_Command+0x6c>
		{
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8003eba:	2102      	movs	r1, #2
 8003ebc:	4831      	ldr	r0, [pc, #196]	; (8003f84 <Parse_Command+0x12c>)
 8003ebe:	f004 fd00 	bl	80088c2 <HAL_GPIO_TogglePin>
 8003ec2:	e00a      	b.n	8003eda <Parse_Command+0x82>
		}
		else if(cmd_array[cmd_index + 1] == 0x02)
 8003ec4:	887b      	ldrh	r3, [r7, #2]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	4413      	add	r3, r2
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d103      	bne.n	8003eda <Parse_Command+0x82>
		{
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8003ed2:	2104      	movs	r1, #4
 8003ed4:	482b      	ldr	r0, [pc, #172]	; (8003f84 <Parse_Command+0x12c>)
 8003ed6:	f004 fcf4 	bl	80088c2 <HAL_GPIO_TogglePin>
		}

		output_index += 2;
 8003eda:	89fb      	ldrh	r3, [r7, #14]
 8003edc:	3302      	adds	r3, #2
 8003ede:	81fb      	strh	r3, [r7, #14]
		break;
 8003ee0:	e04a      	b.n	8003f78 <Parse_Command+0x120>
	case 0x02:	//Wait millis: uint32_t
		if(high_priority)
 8003ee2:	787b      	ldrb	r3, [r7, #1]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00c      	beq.n	8003f02 <Parse_Command+0xaa>
		{
			high_priority_control_loop_wait_timer = GetMillis();
 8003ee8:	f001 fd28 	bl	800593c <GetMillis>
 8003eec:	4602      	mov	r2, r0
 8003eee:	4b26      	ldr	r3, [pc, #152]	; (8003f88 <Parse_Command+0x130>)
 8003ef0:	601a      	str	r2, [r3, #0]
			high_priority_control_loop_wait_time = *((uint32_t *)&cmd_array[cmd_index + 1]);
 8003ef2:	887b      	ldrh	r3, [r7, #2]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	4413      	add	r3, r2
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a23      	ldr	r2, [pc, #140]	; (8003f8c <Parse_Command+0x134>)
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	e00b      	b.n	8003f1a <Parse_Command+0xc2>
		}
		else
		{
			control_loop_wait_timer = GetMillis();
 8003f02:	f001 fd1b 	bl	800593c <GetMillis>
 8003f06:	4602      	mov	r2, r0
 8003f08:	4b21      	ldr	r3, [pc, #132]	; (8003f90 <Parse_Command+0x138>)
 8003f0a:	601a      	str	r2, [r3, #0]
			control_loop_wait_time = *((uint32_t *)&cmd_array[cmd_index + 1]);
 8003f0c:	887b      	ldrh	r3, [r7, #2]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	4413      	add	r3, r2
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a1f      	ldr	r2, [pc, #124]	; (8003f94 <Parse_Command+0x13c>)
 8003f18:	6013      	str	r3, [r2, #0]
		}
		output_index += 5;
 8003f1a:	89fb      	ldrh	r3, [r7, #14]
 8003f1c:	3305      	adds	r3, #5
 8003f1e:	81fb      	strh	r3, [r7, #14]
		break;
 8003f20:	e02a      	b.n	8003f78 <Parse_Command+0x120>
	case 0x03:	//Restart program
		output_index = 0;
 8003f22:	2300      	movs	r3, #0
 8003f24:	81fb      	strh	r3, [r7, #14]
		break;
 8003f26:	e027      	b.n	8003f78 <Parse_Command+0x120>
	case 0x04:	//Launch
		Parse_Requested_State(LAUNCHED);
 8003f28:	2001      	movs	r0, #1
 8003f2a:	f000 f83d 	bl	8003fa8 <Parse_Requested_State>
		output_index++;
 8003f2e:	89fb      	ldrh	r3, [r7, #14]
 8003f30:	3301      	adds	r3, #1
 8003f32:	81fb      	strh	r3, [r7, #14]
		break;
 8003f34:	e020      	b.n	8003f78 <Parse_Command+0x120>
	case 0x05:	//Land
		Parse_Requested_State(LANDED);
 8003f36:	2000      	movs	r0, #0
 8003f38:	f000 f836 	bl	8003fa8 <Parse_Requested_State>
		output_index++;
 8003f3c:	89fb      	ldrh	r3, [r7, #14]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	81fb      	strh	r3, [r7, #14]
		break;
 8003f42:	e019      	b.n	8003f78 <Parse_Command+0x120>
	case 0x06:	//Fly to single waypoint (not continuous)
		if(!launched)
 8003f44:	4b14      	ldr	r3, [pc, #80]	; (8003f98 <Parse_Command+0x140>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d104      	bne.n	8003f56 <Parse_Command+0xfe>
		{
			TryToLaunchDependency(high_priority);
 8003f4c:	787b      	ldrb	r3, [r7, #1]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 f89c 	bl	800408c <TryToLaunchDependency>
			gps_hold_flag = 1;
			gps_waypoint_flag = 0;
			output_index += 2;
		}

		break;
 8003f54:	e00f      	b.n	8003f76 <Parse_Command+0x11e>
			gps_setpoint = &cmd_array[cmd_index + 1];
 8003f56:	887b      	ldrh	r3, [r7, #2]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	4b0e      	ldr	r3, [pc, #56]	; (8003f9c <Parse_Command+0x144>)
 8003f62:	701a      	strb	r2, [r3, #0]
			gps_hold_flag = 1;
 8003f64:	4b0e      	ldr	r3, [pc, #56]	; (8003fa0 <Parse_Command+0x148>)
 8003f66:	2201      	movs	r2, #1
 8003f68:	701a      	strb	r2, [r3, #0]
			gps_waypoint_flag = 0;
 8003f6a:	4b0e      	ldr	r3, [pc, #56]	; (8003fa4 <Parse_Command+0x14c>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	701a      	strb	r2, [r3, #0]
			output_index += 2;
 8003f70:	89fb      	ldrh	r3, [r7, #14]
 8003f72:	3302      	adds	r3, #2
 8003f74:	81fb      	strh	r3, [r7, #14]
		break;
 8003f76:	bf00      	nop
		break;
	case 0x08:	//Return to home
		break;
	}

	return output_index;
 8003f78:	89fb      	ldrh	r3, [r7, #14]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	40020800 	.word	0x40020800
 8003f88:	20001480 	.word	0x20001480
 8003f8c:	2000035c 	.word	0x2000035c
 8003f90:	20001494 	.word	0x20001494
 8003f94:	20000358 	.word	0x20000358
 8003f98:	20000360 	.word	0x20000360
 8003f9c:	20000329 	.word	0x20000329
 8003fa0:	20000382 	.word	0x20000382
 8003fa4:	20000384 	.word	0x20000384

08003fa8 <Parse_Requested_State>:

void Parse_Requested_State(int32_t requested_state)
{
 8003fa8:	b590      	push	{r4, r7, lr}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
	switch(requested_state)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d002      	beq.n	8003fbc <Parse_Requested_State+0x14>
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d022      	beq.n	8004000 <Parse_Requested_State+0x58>
			sprintf((char *)print_text_buffer, "%s", "Launching...\n");
			PrintManualPacket();
		}
		break;
	}
}
 8003fba:	e04c      	b.n	8004056 <Parse_Requested_State+0xae>
		if(launched && !landing)
 8003fbc:	4b28      	ldr	r3, [pc, #160]	; (8004060 <Parse_Requested_State+0xb8>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d045      	beq.n	8004050 <Parse_Requested_State+0xa8>
 8003fc4:	4b27      	ldr	r3, [pc, #156]	; (8004064 <Parse_Requested_State+0xbc>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d141      	bne.n	8004050 <Parse_Requested_State+0xa8>
			landing = 1;
 8003fcc:	4b25      	ldr	r3, [pc, #148]	; (8004064 <Parse_Requested_State+0xbc>)
 8003fce:	2201      	movs	r2, #1
 8003fd0:	701a      	strb	r2, [r3, #0]
			ready_for_next_command = 0;
 8003fd2:	4b25      	ldr	r3, [pc, #148]	; (8004068 <Parse_Requested_State+0xc0>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	701a      	strb	r2, [r3, #0]
			ready_for_next_command_high_priority = 0;
 8003fd8:	4b24      	ldr	r3, [pc, #144]	; (800406c <Parse_Requested_State+0xc4>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	701a      	strb	r2, [r3, #0]
			launch_timer = GetMillis();
 8003fde:	f001 fcad 	bl	800593c <GetMillis>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	4b22      	ldr	r3, [pc, #136]	; (8004070 <Parse_Requested_State+0xc8>)
 8003fe6:	601a      	str	r2, [r3, #0]
			ClearPrintBuffer();
 8003fe8:	f003 f928 	bl	800723c <ClearPrintBuffer>
			sprintf((char *)print_text_buffer, "%s", "Landing...\n");
 8003fec:	4a21      	ldr	r2, [pc, #132]	; (8004074 <Parse_Requested_State+0xcc>)
 8003fee:	4b22      	ldr	r3, [pc, #136]	; (8004078 <Parse_Requested_State+0xd0>)
 8003ff0:	4614      	mov	r4, r2
 8003ff2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003ff4:	6020      	str	r0, [r4, #0]
 8003ff6:	6061      	str	r1, [r4, #4]
 8003ff8:	60a2      	str	r2, [r4, #8]
			PrintManualPacket();
 8003ffa:	f003 f939 	bl	8007270 <PrintManualPacket>
		break;
 8003ffe:	e027      	b.n	8004050 <Parse_Requested_State+0xa8>
		if(!launched && !launching)
 8004000:	4b17      	ldr	r3, [pc, #92]	; (8004060 <Parse_Requested_State+0xb8>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d125      	bne.n	8004054 <Parse_Requested_State+0xac>
 8004008:	4b1c      	ldr	r3, [pc, #112]	; (800407c <Parse_Requested_State+0xd4>)
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d121      	bne.n	8004054 <Parse_Requested_State+0xac>
			launching = 1;
 8004010:	4b1a      	ldr	r3, [pc, #104]	; (800407c <Parse_Requested_State+0xd4>)
 8004012:	2201      	movs	r2, #1
 8004014:	701a      	strb	r2, [r3, #0]
			acc_magnitude_at_start = acc_magnitude;
 8004016:	4b1a      	ldr	r3, [pc, #104]	; (8004080 <Parse_Requested_State+0xd8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a1a      	ldr	r2, [pc, #104]	; (8004084 <Parse_Requested_State+0xdc>)
 800401c:	6013      	str	r3, [r2, #0]
			ready_for_next_command = 0;
 800401e:	4b12      	ldr	r3, [pc, #72]	; (8004068 <Parse_Requested_State+0xc0>)
 8004020:	2200      	movs	r2, #0
 8004022:	701a      	strb	r2, [r3, #0]
			ready_for_next_command_high_priority = 0;
 8004024:	4b11      	ldr	r3, [pc, #68]	; (800406c <Parse_Requested_State+0xc4>)
 8004026:	2200      	movs	r2, #0
 8004028:	701a      	strb	r2, [r3, #0]
			launch_timer = GetMillis();
 800402a:	f001 fc87 	bl	800593c <GetMillis>
 800402e:	4602      	mov	r2, r0
 8004030:	4b0f      	ldr	r3, [pc, #60]	; (8004070 <Parse_Requested_State+0xc8>)
 8004032:	601a      	str	r2, [r3, #0]
			ClearPrintBuffer();
 8004034:	f003 f902 	bl	800723c <ClearPrintBuffer>
			sprintf((char *)print_text_buffer, "%s", "Launching...\n");
 8004038:	4a0e      	ldr	r2, [pc, #56]	; (8004074 <Parse_Requested_State+0xcc>)
 800403a:	4b13      	ldr	r3, [pc, #76]	; (8004088 <Parse_Requested_State+0xe0>)
 800403c:	4614      	mov	r4, r2
 800403e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004040:	6020      	str	r0, [r4, #0]
 8004042:	6061      	str	r1, [r4, #4]
 8004044:	60a2      	str	r2, [r4, #8]
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	81a3      	strh	r3, [r4, #12]
			PrintManualPacket();
 800404a:	f003 f911 	bl	8007270 <PrintManualPacket>
		break;
 800404e:	e001      	b.n	8004054 <Parse_Requested_State+0xac>
		break;
 8004050:	bf00      	nop
 8004052:	e000      	b.n	8004056 <Parse_Requested_State+0xae>
		break;
 8004054:	bf00      	nop
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	bd90      	pop	{r4, r7, pc}
 800405e:	bf00      	nop
 8004060:	20000360 	.word	0x20000360
 8004064:	20000362 	.word	0x20000362
 8004068:	20000064 	.word	0x20000064
 800406c:	20000065 	.word	0x20000065
 8004070:	20001060 	.word	0x20001060
 8004074:	20002234 	.word	0x20002234
 8004078:	080155c8 	.word	0x080155c8
 800407c:	20000361 	.word	0x20000361
 8004080:	20002108 	.word	0x20002108
 8004084:	200020e8 	.word	0x200020e8
 8004088:	080155d4 	.word	0x080155d4

0800408c <TryToLaunchDependency>:

void TryToLaunchDependency(uint8_t high_priority)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	4603      	mov	r3, r0
 8004094:	71fb      	strb	r3, [r7, #7]
	Parse_Requested_State(LAUNCHED);
 8004096:	2001      	movs	r0, #1
 8004098:	f7ff ff86 	bl	8003fa8 <Parse_Requested_State>

	if(high_priority)
 800409c:	79fb      	ldrb	r3, [r7, #7]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d009      	beq.n	80040b6 <TryToLaunchDependency+0x2a>
	{
		high_priority_control_loop_wait_timer = GetMillis();
 80040a2:	f001 fc4b 	bl	800593c <GetMillis>
 80040a6:	4602      	mov	r2, r0
 80040a8:	4b09      	ldr	r3, [pc, #36]	; (80040d0 <TryToLaunchDependency+0x44>)
 80040aa:	601a      	str	r2, [r3, #0]
		high_priority_control_loop_wait_time = 1000;
 80040ac:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <TryToLaunchDependency+0x48>)
 80040ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040b2:	601a      	str	r2, [r3, #0]
	else
	{
		control_loop_wait_timer = GetMillis();
		control_loop_wait_time = 1000;
	}
}
 80040b4:	e008      	b.n	80040c8 <TryToLaunchDependency+0x3c>
		control_loop_wait_timer = GetMillis();
 80040b6:	f001 fc41 	bl	800593c <GetMillis>
 80040ba:	4602      	mov	r2, r0
 80040bc:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <TryToLaunchDependency+0x4c>)
 80040be:	601a      	str	r2, [r3, #0]
		control_loop_wait_time = 1000;
 80040c0:	4b06      	ldr	r3, [pc, #24]	; (80040dc <TryToLaunchDependency+0x50>)
 80040c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040c6:	601a      	str	r2, [r3, #0]
}
 80040c8:	bf00      	nop
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	20001480 	.word	0x20001480
 80040d4:	2000035c 	.word	0x2000035c
 80040d8:	20001494 	.word	0x20001494
 80040dc:	20000358 	.word	0x20000358

080040e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80040e6:	2300      	movs	r3, #0
 80040e8:	607b      	str	r3, [r7, #4]
 80040ea:	4b18      	ldr	r3, [pc, #96]	; (800414c <MX_DMA_Init+0x6c>)
 80040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ee:	4a17      	ldr	r2, [pc, #92]	; (800414c <MX_DMA_Init+0x6c>)
 80040f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040f4:	6313      	str	r3, [r2, #48]	; 0x30
 80040f6:	4b15      	ldr	r3, [pc, #84]	; (800414c <MX_DMA_Init+0x6c>)
 80040f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040fe:	607b      	str	r3, [r7, #4]
 8004100:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8004102:	2200      	movs	r2, #0
 8004104:	2100      	movs	r1, #0
 8004106:	200b      	movs	r0, #11
 8004108:	f003 fec1 	bl	8007e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800410c:	200b      	movs	r0, #11
 800410e:	f003 feda 	bl	8007ec6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8004112:	2200      	movs	r2, #0
 8004114:	2100      	movs	r1, #0
 8004116:	200e      	movs	r0, #14
 8004118:	f003 feb9 	bl	8007e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800411c:	200e      	movs	r0, #14
 800411e:	f003 fed2 	bl	8007ec6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8004122:	2200      	movs	r2, #0
 8004124:	2100      	movs	r1, #0
 8004126:	2011      	movs	r0, #17
 8004128:	f003 feb1 	bl	8007e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800412c:	2011      	movs	r0, #17
 800412e:	f003 feca 	bl	8007ec6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8004132:	2200      	movs	r2, #0
 8004134:	2100      	movs	r1, #0
 8004136:	202f      	movs	r0, #47	; 0x2f
 8004138:	f003 fea9 	bl	8007e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800413c:	202f      	movs	r0, #47	; 0x2f
 800413e:	f003 fec2 	bl	8007ec6 <HAL_NVIC_EnableIRQ>

}
 8004142:	bf00      	nop
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	40023800 	.word	0x40023800

08004150 <EEPROM_Clear_Buffer>:
uint8_t eeprom_write_buffer_width = 2;
uint8_t eeprom_read_write_buffer[34];
uint8_t eeprom_read_buffer_index = 0;

void EEPROM_Clear_Buffer()
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
	for(int i = 0; i < 34; i++)
 8004156:	2300      	movs	r3, #0
 8004158:	607b      	str	r3, [r7, #4]
 800415a:	e007      	b.n	800416c <EEPROM_Clear_Buffer+0x1c>
	{
		eeprom_read_write_buffer[i] = 0x00;
 800415c:	4a08      	ldr	r2, [pc, #32]	; (8004180 <EEPROM_Clear_Buffer+0x30>)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4413      	add	r3, r2
 8004162:	2200      	movs	r2, #0
 8004164:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 34; i++)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	3301      	adds	r3, #1
 800416a:	607b      	str	r3, [r7, #4]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b21      	cmp	r3, #33	; 0x21
 8004170:	ddf4      	ble.n	800415c <EEPROM_Clear_Buffer+0xc>
	}
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	20000458 	.word	0x20000458

08004184 <EEPROM_Save_Page>:

//This also works with single bytes
void EEPROM_Save_Page(uint16_t address)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af02      	add	r7, sp, #8
 800418a:	4603      	mov	r3, r0
 800418c:	80fb      	strh	r3, [r7, #6]
	eeprom_read_write_buffer[0] = (uint8_t)((address >> 8) & 0xFF);
 800418e:	88fb      	ldrh	r3, [r7, #6]
 8004190:	0a1b      	lsrs	r3, r3, #8
 8004192:	b29b      	uxth	r3, r3
 8004194:	b2da      	uxtb	r2, r3
 8004196:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <EEPROM_Save_Page+0x40>)
 8004198:	701a      	strb	r2, [r3, #0]
	eeprom_read_write_buffer[1] = (uint8_t)(address & 0xFF);
 800419a:	88fb      	ldrh	r3, [r7, #6]
 800419c:	b2da      	uxtb	r2, r3
 800419e:	4b09      	ldr	r3, [pc, #36]	; (80041c4 <EEPROM_Save_Page+0x40>)
 80041a0:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, EEPROM_ADDR, (uint8_t *)eeprom_read_write_buffer, eeprom_write_buffer_width, 50);
 80041a2:	23a0      	movs	r3, #160	; 0xa0
 80041a4:	b299      	uxth	r1, r3
 80041a6:	4b08      	ldr	r3, [pc, #32]	; (80041c8 <EEPROM_Save_Page+0x44>)
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	2332      	movs	r3, #50	; 0x32
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	4613      	mov	r3, r2
 80041b2:	4a04      	ldr	r2, [pc, #16]	; (80041c4 <EEPROM_Save_Page+0x40>)
 80041b4:	4805      	ldr	r0, [pc, #20]	; (80041cc <EEPROM_Save_Page+0x48>)
 80041b6:	f004 fcd7 	bl	8008b68 <HAL_I2C_Master_Transmit>
}
 80041ba:	bf00      	nop
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20000458 	.word	0x20000458
 80041c8:	20000066 	.word	0x20000066
 80041cc:	20001ef8 	.word	0x20001ef8

080041d0 <EEPROM_Read_Page>:

//This also works with single bytes(set size to 1)
void EEPROM_Read_Page(uint16_t address, uint8_t size)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af04      	add	r7, sp, #16
 80041d6:	4603      	mov	r3, r0
 80041d8:	460a      	mov	r2, r1
 80041da:	80fb      	strh	r3, [r7, #6]
 80041dc:	4613      	mov	r3, r2
 80041de:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *)eeprom_read_write_buffer, size, 50);
 80041e0:	23a0      	movs	r3, #160	; 0xa0
 80041e2:	b299      	uxth	r1, r3
 80041e4:	797b      	ldrb	r3, [r7, #5]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	88f8      	ldrh	r0, [r7, #6]
 80041ea:	2232      	movs	r2, #50	; 0x32
 80041ec:	9202      	str	r2, [sp, #8]
 80041ee:	9301      	str	r3, [sp, #4]
 80041f0:	4b05      	ldr	r3, [pc, #20]	; (8004208 <EEPROM_Read_Page+0x38>)
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	2310      	movs	r3, #16
 80041f6:	4602      	mov	r2, r0
 80041f8:	4804      	ldr	r0, [pc, #16]	; (800420c <EEPROM_Read_Page+0x3c>)
 80041fa:	f004 fdb3 	bl	8008d64 <HAL_I2C_Mem_Read>
}
 80041fe:	bf00      	nop
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	20000458 	.word	0x20000458
 800420c:	20001ef8 	.word	0x20001ef8

08004210 <EEPROM_Write_Buffer>:

void EEPROM_Write_Buffer(uint8_t *num, uint8_t size)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	460b      	mov	r3, r1
 800421a:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < size; i++)
 800421c:	2300      	movs	r3, #0
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	e00d      	b.n	800423e <EEPROM_Write_Buffer+0x2e>
	{
		eeprom_read_write_buffer[eeprom_write_buffer_width + i] = *((uint8_t *)num + i);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	441a      	add	r2, r3
 8004228:	4b0d      	ldr	r3, [pc, #52]	; (8004260 <EEPROM_Write_Buffer+0x50>)
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	4619      	mov	r1, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	440b      	add	r3, r1
 8004232:	7811      	ldrb	r1, [r2, #0]
 8004234:	4a0b      	ldr	r2, [pc, #44]	; (8004264 <EEPROM_Write_Buffer+0x54>)
 8004236:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < size; i++)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	3301      	adds	r3, #1
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	78fb      	ldrb	r3, [r7, #3]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	429a      	cmp	r2, r3
 8004244:	dbed      	blt.n	8004222 <EEPROM_Write_Buffer+0x12>
	}

	eeprom_write_buffer_width += size;
 8004246:	4b06      	ldr	r3, [pc, #24]	; (8004260 <EEPROM_Write_Buffer+0x50>)
 8004248:	781a      	ldrb	r2, [r3, #0]
 800424a:	78fb      	ldrb	r3, [r7, #3]
 800424c:	4413      	add	r3, r2
 800424e:	b2da      	uxtb	r2, r3
 8004250:	4b03      	ldr	r3, [pc, #12]	; (8004260 <EEPROM_Write_Buffer+0x50>)
 8004252:	701a      	strb	r2, [r3, #0]
}
 8004254:	bf00      	nop
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	20000066 	.word	0x20000066
 8004264:	20000458 	.word	0x20000458

08004268 <EEPROM_Read_Buffer>:

void EEPROM_Read_Buffer(uint8_t *output, uint8_t size)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	460b      	mov	r3, r1
 8004272:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < size; i++)
 8004274:	2300      	movs	r3, #0
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	e00d      	b.n	8004296 <EEPROM_Read_Buffer+0x2e>
	{
		*(((uint8_t *)output) + i) = eeprom_read_write_buffer[eeprom_read_buffer_index + i];
 800427a:	4b0f      	ldr	r3, [pc, #60]	; (80042b8 <EEPROM_Read_Buffer+0x50>)
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	461a      	mov	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	441a      	add	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	440b      	add	r3, r1
 800428a:	490c      	ldr	r1, [pc, #48]	; (80042bc <EEPROM_Read_Buffer+0x54>)
 800428c:	5c8a      	ldrb	r2, [r1, r2]
 800428e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < size; i++)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	3301      	adds	r3, #1
 8004294:	60fb      	str	r3, [r7, #12]
 8004296:	78fb      	ldrb	r3, [r7, #3]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	429a      	cmp	r2, r3
 800429c:	dbed      	blt.n	800427a <EEPROM_Read_Buffer+0x12>
	}

	eeprom_read_buffer_index += size;
 800429e:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <EEPROM_Read_Buffer+0x50>)
 80042a0:	781a      	ldrb	r2, [r3, #0]
 80042a2:	78fb      	ldrb	r3, [r7, #3]
 80042a4:	4413      	add	r3, r2
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	4b03      	ldr	r3, [pc, #12]	; (80042b8 <EEPROM_Read_Buffer+0x50>)
 80042aa:	701a      	strb	r2, [r3, #0]
}
 80042ac:	bf00      	nop
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	20000364 	.word	0x20000364
 80042bc:	20000458 	.word	0x20000458

080042c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b08a      	sub	sp, #40	; 0x28
 80042c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042c6:	f107 0314 	add.w	r3, r7, #20
 80042ca:	2200      	movs	r2, #0
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	605a      	str	r2, [r3, #4]
 80042d0:	609a      	str	r2, [r3, #8]
 80042d2:	60da      	str	r2, [r3, #12]
 80042d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80042d6:	2300      	movs	r3, #0
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	4b31      	ldr	r3, [pc, #196]	; (80043a0 <MX_GPIO_Init+0xe0>)
 80042dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042de:	4a30      	ldr	r2, [pc, #192]	; (80043a0 <MX_GPIO_Init+0xe0>)
 80042e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e4:	6313      	str	r3, [r2, #48]	; 0x30
 80042e6:	4b2e      	ldr	r3, [pc, #184]	; (80043a0 <MX_GPIO_Init+0xe0>)
 80042e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ee:	613b      	str	r3, [r7, #16]
 80042f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042f2:	2300      	movs	r3, #0
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	4b2a      	ldr	r3, [pc, #168]	; (80043a0 <MX_GPIO_Init+0xe0>)
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	4a29      	ldr	r2, [pc, #164]	; (80043a0 <MX_GPIO_Init+0xe0>)
 80042fc:	f043 0304 	orr.w	r3, r3, #4
 8004300:	6313      	str	r3, [r2, #48]	; 0x30
 8004302:	4b27      	ldr	r3, [pc, #156]	; (80043a0 <MX_GPIO_Init+0xe0>)
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	f003 0304 	and.w	r3, r3, #4
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800430e:	2300      	movs	r3, #0
 8004310:	60bb      	str	r3, [r7, #8]
 8004312:	4b23      	ldr	r3, [pc, #140]	; (80043a0 <MX_GPIO_Init+0xe0>)
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	4a22      	ldr	r2, [pc, #136]	; (80043a0 <MX_GPIO_Init+0xe0>)
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	6313      	str	r3, [r2, #48]	; 0x30
 800431e:	4b20      	ldr	r3, [pc, #128]	; (80043a0 <MX_GPIO_Init+0xe0>)
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	60bb      	str	r3, [r7, #8]
 8004328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800432a:	2300      	movs	r3, #0
 800432c:	607b      	str	r3, [r7, #4]
 800432e:	4b1c      	ldr	r3, [pc, #112]	; (80043a0 <MX_GPIO_Init+0xe0>)
 8004330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004332:	4a1b      	ldr	r2, [pc, #108]	; (80043a0 <MX_GPIO_Init+0xe0>)
 8004334:	f043 0302 	orr.w	r3, r3, #2
 8004338:	6313      	str	r3, [r2, #48]	; 0x30
 800433a:	4b19      	ldr	r3, [pc, #100]	; (80043a0 <MX_GPIO_Init+0xe0>)
 800433c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	607b      	str	r3, [r7, #4]
 8004344:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8004346:	2200      	movs	r2, #0
 8004348:	2106      	movs	r1, #6
 800434a:	4816      	ldr	r0, [pc, #88]	; (80043a4 <MX_GPIO_Init+0xe4>)
 800434c:	f004 faa0 	bl	8008890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8004350:	2200      	movs	r2, #0
 8004352:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8004356:	4814      	ldr	r0, [pc, #80]	; (80043a8 <MX_GPIO_Init+0xe8>)
 8004358:	f004 fa9a 	bl	8008890 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 800435c:	2306      	movs	r3, #6
 800435e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004360:	2301      	movs	r3, #1
 8004362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004364:	2300      	movs	r3, #0
 8004366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004368:	2300      	movs	r3, #0
 800436a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800436c:	f107 0314 	add.w	r3, r7, #20
 8004370:	4619      	mov	r1, r3
 8004372:	480c      	ldr	r0, [pc, #48]	; (80043a4 <MX_GPIO_Init+0xe4>)
 8004374:	f004 f8da 	bl	800852c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8004378:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800437c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800437e:	2301      	movs	r3, #1
 8004380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004382:	2300      	movs	r3, #0
 8004384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004386:	2300      	movs	r3, #0
 8004388:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800438a:	f107 0314 	add.w	r3, r7, #20
 800438e:	4619      	mov	r1, r3
 8004390:	4805      	ldr	r0, [pc, #20]	; (80043a8 <MX_GPIO_Init+0xe8>)
 8004392:	f004 f8cb 	bl	800852c <HAL_GPIO_Init>

}
 8004396:	bf00      	nop
 8004398:	3728      	adds	r7, #40	; 0x28
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	40023800 	.word	0x40023800
 80043a4:	40020800 	.word	0x40020800
 80043a8:	40020400 	.word	0x40020400

080043ac <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_tx;
DMA_HandleTypeDef hdma_i2c2_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80043b0:	4b12      	ldr	r3, [pc, #72]	; (80043fc <MX_I2C1_Init+0x50>)
 80043b2:	4a13      	ldr	r2, [pc, #76]	; (8004400 <MX_I2C1_Init+0x54>)
 80043b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80043b6:	4b11      	ldr	r3, [pc, #68]	; (80043fc <MX_I2C1_Init+0x50>)
 80043b8:	4a12      	ldr	r2, [pc, #72]	; (8004404 <MX_I2C1_Init+0x58>)
 80043ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80043bc:	4b0f      	ldr	r3, [pc, #60]	; (80043fc <MX_I2C1_Init+0x50>)
 80043be:	2200      	movs	r2, #0
 80043c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80043c2:	4b0e      	ldr	r3, [pc, #56]	; (80043fc <MX_I2C1_Init+0x50>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80043c8:	4b0c      	ldr	r3, [pc, #48]	; (80043fc <MX_I2C1_Init+0x50>)
 80043ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80043ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80043d0:	4b0a      	ldr	r3, [pc, #40]	; (80043fc <MX_I2C1_Init+0x50>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80043d6:	4b09      	ldr	r3, [pc, #36]	; (80043fc <MX_I2C1_Init+0x50>)
 80043d8:	2200      	movs	r2, #0
 80043da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80043dc:	4b07      	ldr	r3, [pc, #28]	; (80043fc <MX_I2C1_Init+0x50>)
 80043de:	2200      	movs	r2, #0
 80043e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80043e2:	4b06      	ldr	r3, [pc, #24]	; (80043fc <MX_I2C1_Init+0x50>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80043e8:	4804      	ldr	r0, [pc, #16]	; (80043fc <MX_I2C1_Init+0x50>)
 80043ea:	f004 fa85 	bl	80088f8 <HAL_I2C_Init>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80043f4:	f001 fb4e 	bl	8005a94 <Error_Handler>
  }

}
 80043f8:	bf00      	nop
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	20001ef8 	.word	0x20001ef8
 8004400:	40005400 	.word	0x40005400
 8004404:	00061a80 	.word	0x00061a80

08004408 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 800440c:	4b12      	ldr	r3, [pc, #72]	; (8004458 <MX_I2C2_Init+0x50>)
 800440e:	4a13      	ldr	r2, [pc, #76]	; (800445c <MX_I2C2_Init+0x54>)
 8004410:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8004412:	4b11      	ldr	r3, [pc, #68]	; (8004458 <MX_I2C2_Init+0x50>)
 8004414:	4a12      	ldr	r2, [pc, #72]	; (8004460 <MX_I2C2_Init+0x58>)
 8004416:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004418:	4b0f      	ldr	r3, [pc, #60]	; (8004458 <MX_I2C2_Init+0x50>)
 800441a:	2200      	movs	r2, #0
 800441c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800441e:	4b0e      	ldr	r3, [pc, #56]	; (8004458 <MX_I2C2_Init+0x50>)
 8004420:	2200      	movs	r2, #0
 8004422:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004424:	4b0c      	ldr	r3, [pc, #48]	; (8004458 <MX_I2C2_Init+0x50>)
 8004426:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800442a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800442c:	4b0a      	ldr	r3, [pc, #40]	; (8004458 <MX_I2C2_Init+0x50>)
 800442e:	2200      	movs	r2, #0
 8004430:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004432:	4b09      	ldr	r3, [pc, #36]	; (8004458 <MX_I2C2_Init+0x50>)
 8004434:	2200      	movs	r2, #0
 8004436:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004438:	4b07      	ldr	r3, [pc, #28]	; (8004458 <MX_I2C2_Init+0x50>)
 800443a:	2200      	movs	r2, #0
 800443c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800443e:	4b06      	ldr	r3, [pc, #24]	; (8004458 <MX_I2C2_Init+0x50>)
 8004440:	2200      	movs	r2, #0
 8004442:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004444:	4804      	ldr	r0, [pc, #16]	; (8004458 <MX_I2C2_Init+0x50>)
 8004446:	f004 fa57 	bl	80088f8 <HAL_I2C_Init>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004450:	f001 fb20 	bl	8005a94 <Error_Handler>
  }

}
 8004454:	bf00      	nop
 8004456:	bd80      	pop	{r7, pc}
 8004458:	20001f4c 	.word	0x20001f4c
 800445c:	40005800 	.word	0x40005800
 8004460:	00061a80 	.word	0x00061a80

08004464 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08c      	sub	sp, #48	; 0x30
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800446c:	f107 031c 	add.w	r3, r7, #28
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	605a      	str	r2, [r3, #4]
 8004476:	609a      	str	r2, [r3, #8]
 8004478:	60da      	str	r2, [r3, #12]
 800447a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4aa1      	ldr	r2, [pc, #644]	; (8004708 <HAL_I2C_MspInit+0x2a4>)
 8004482:	4293      	cmp	r3, r2
 8004484:	f040 809b 	bne.w	80045be <HAL_I2C_MspInit+0x15a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004488:	2300      	movs	r3, #0
 800448a:	61bb      	str	r3, [r7, #24]
 800448c:	4b9f      	ldr	r3, [pc, #636]	; (800470c <HAL_I2C_MspInit+0x2a8>)
 800448e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004490:	4a9e      	ldr	r2, [pc, #632]	; (800470c <HAL_I2C_MspInit+0x2a8>)
 8004492:	f043 0302 	orr.w	r3, r3, #2
 8004496:	6313      	str	r3, [r2, #48]	; 0x30
 8004498:	4b9c      	ldr	r3, [pc, #624]	; (800470c <HAL_I2C_MspInit+0x2a8>)
 800449a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	61bb      	str	r3, [r7, #24]
 80044a2:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80044a4:	23c0      	movs	r3, #192	; 0xc0
 80044a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044a8:	2312      	movs	r3, #18
 80044aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044ac:	2301      	movs	r3, #1
 80044ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044b0:	2303      	movs	r3, #3
 80044b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80044b4:	2304      	movs	r3, #4
 80044b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044b8:	f107 031c 	add.w	r3, r7, #28
 80044bc:	4619      	mov	r1, r3
 80044be:	4894      	ldr	r0, [pc, #592]	; (8004710 <HAL_I2C_MspInit+0x2ac>)
 80044c0:	f004 f834 	bl	800852c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80044c4:	2300      	movs	r3, #0
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	4b90      	ldr	r3, [pc, #576]	; (800470c <HAL_I2C_MspInit+0x2a8>)
 80044ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044cc:	4a8f      	ldr	r2, [pc, #572]	; (800470c <HAL_I2C_MspInit+0x2a8>)
 80044ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044d2:	6413      	str	r3, [r2, #64]	; 0x40
 80044d4:	4b8d      	ldr	r3, [pc, #564]	; (800470c <HAL_I2C_MspInit+0x2a8>)
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80044e0:	4b8c      	ldr	r3, [pc, #560]	; (8004714 <HAL_I2C_MspInit+0x2b0>)
 80044e2:	4a8d      	ldr	r2, [pc, #564]	; (8004718 <HAL_I2C_MspInit+0x2b4>)
 80044e4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80044e6:	4b8b      	ldr	r3, [pc, #556]	; (8004714 <HAL_I2C_MspInit+0x2b0>)
 80044e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044ec:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044ee:	4b89      	ldr	r3, [pc, #548]	; (8004714 <HAL_I2C_MspInit+0x2b0>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044f4:	4b87      	ldr	r3, [pc, #540]	; (8004714 <HAL_I2C_MspInit+0x2b0>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80044fa:	4b86      	ldr	r3, [pc, #536]	; (8004714 <HAL_I2C_MspInit+0x2b0>)
 80044fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004500:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004502:	4b84      	ldr	r3, [pc, #528]	; (8004714 <HAL_I2C_MspInit+0x2b0>)
 8004504:	2200      	movs	r2, #0
 8004506:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004508:	4b82      	ldr	r3, [pc, #520]	; (8004714 <HAL_I2C_MspInit+0x2b0>)
 800450a:	2200      	movs	r2, #0
 800450c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800450e:	4b81      	ldr	r3, [pc, #516]	; (8004714 <HAL_I2C_MspInit+0x2b0>)
 8004510:	2200      	movs	r2, #0
 8004512:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004514:	4b7f      	ldr	r3, [pc, #508]	; (8004714 <HAL_I2C_MspInit+0x2b0>)
 8004516:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800451a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800451c:	4b7d      	ldr	r3, [pc, #500]	; (8004714 <HAL_I2C_MspInit+0x2b0>)
 800451e:	2200      	movs	r2, #0
 8004520:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004522:	487c      	ldr	r0, [pc, #496]	; (8004714 <HAL_I2C_MspInit+0x2b0>)
 8004524:	f003 fcea 	bl	8007efc <HAL_DMA_Init>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800452e:	f001 fab1 	bl	8005a94 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a77      	ldr	r2, [pc, #476]	; (8004714 <HAL_I2C_MspInit+0x2b0>)
 8004536:	639a      	str	r2, [r3, #56]	; 0x38
 8004538:	4a76      	ldr	r2, [pc, #472]	; (8004714 <HAL_I2C_MspInit+0x2b0>)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800453e:	4b77      	ldr	r3, [pc, #476]	; (800471c <HAL_I2C_MspInit+0x2b8>)
 8004540:	4a77      	ldr	r2, [pc, #476]	; (8004720 <HAL_I2C_MspInit+0x2bc>)
 8004542:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8004544:	4b75      	ldr	r3, [pc, #468]	; (800471c <HAL_I2C_MspInit+0x2b8>)
 8004546:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800454a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800454c:	4b73      	ldr	r3, [pc, #460]	; (800471c <HAL_I2C_MspInit+0x2b8>)
 800454e:	2240      	movs	r2, #64	; 0x40
 8004550:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004552:	4b72      	ldr	r3, [pc, #456]	; (800471c <HAL_I2C_MspInit+0x2b8>)
 8004554:	2200      	movs	r2, #0
 8004556:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004558:	4b70      	ldr	r3, [pc, #448]	; (800471c <HAL_I2C_MspInit+0x2b8>)
 800455a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800455e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004560:	4b6e      	ldr	r3, [pc, #440]	; (800471c <HAL_I2C_MspInit+0x2b8>)
 8004562:	2200      	movs	r2, #0
 8004564:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004566:	4b6d      	ldr	r3, [pc, #436]	; (800471c <HAL_I2C_MspInit+0x2b8>)
 8004568:	2200      	movs	r2, #0
 800456a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800456c:	4b6b      	ldr	r3, [pc, #428]	; (800471c <HAL_I2C_MspInit+0x2b8>)
 800456e:	2200      	movs	r2, #0
 8004570:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004572:	4b6a      	ldr	r3, [pc, #424]	; (800471c <HAL_I2C_MspInit+0x2b8>)
 8004574:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004578:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800457a:	4b68      	ldr	r3, [pc, #416]	; (800471c <HAL_I2C_MspInit+0x2b8>)
 800457c:	2200      	movs	r2, #0
 800457e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004580:	4866      	ldr	r0, [pc, #408]	; (800471c <HAL_I2C_MspInit+0x2b8>)
 8004582:	f003 fcbb 	bl	8007efc <HAL_DMA_Init>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 800458c:	f001 fa82 	bl	8005a94 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a62      	ldr	r2, [pc, #392]	; (800471c <HAL_I2C_MspInit+0x2b8>)
 8004594:	635a      	str	r2, [r3, #52]	; 0x34
 8004596:	4a61      	ldr	r2, [pc, #388]	; (800471c <HAL_I2C_MspInit+0x2b8>)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800459c:	2200      	movs	r2, #0
 800459e:	2100      	movs	r1, #0
 80045a0:	201f      	movs	r0, #31
 80045a2:	f003 fc74 	bl	8007e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80045a6:	201f      	movs	r0, #31
 80045a8:	f003 fc8d 	bl	8007ec6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80045ac:	2200      	movs	r2, #0
 80045ae:	2100      	movs	r1, #0
 80045b0:	2020      	movs	r0, #32
 80045b2:	f003 fc6c 	bl	8007e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80045b6:	2020      	movs	r0, #32
 80045b8:	f003 fc85 	bl	8007ec6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80045bc:	e0a0      	b.n	8004700 <HAL_I2C_MspInit+0x29c>
  else if(i2cHandle->Instance==I2C2)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a58      	ldr	r2, [pc, #352]	; (8004724 <HAL_I2C_MspInit+0x2c0>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	f040 809b 	bne.w	8004700 <HAL_I2C_MspInit+0x29c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045ca:	2300      	movs	r3, #0
 80045cc:	613b      	str	r3, [r7, #16]
 80045ce:	4b4f      	ldr	r3, [pc, #316]	; (800470c <HAL_I2C_MspInit+0x2a8>)
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	4a4e      	ldr	r2, [pc, #312]	; (800470c <HAL_I2C_MspInit+0x2a8>)
 80045d4:	f043 0302 	orr.w	r3, r3, #2
 80045d8:	6313      	str	r3, [r2, #48]	; 0x30
 80045da:	4b4c      	ldr	r3, [pc, #304]	; (800470c <HAL_I2C_MspInit+0x2a8>)
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	613b      	str	r3, [r7, #16]
 80045e4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80045e6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80045ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045ec:	2312      	movs	r3, #18
 80045ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045f0:	2301      	movs	r3, #1
 80045f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045f4:	2303      	movs	r3, #3
 80045f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80045f8:	2304      	movs	r3, #4
 80045fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045fc:	f107 031c 	add.w	r3, r7, #28
 8004600:	4619      	mov	r1, r3
 8004602:	4843      	ldr	r0, [pc, #268]	; (8004710 <HAL_I2C_MspInit+0x2ac>)
 8004604:	f003 ff92 	bl	800852c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004608:	2300      	movs	r3, #0
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	4b3f      	ldr	r3, [pc, #252]	; (800470c <HAL_I2C_MspInit+0x2a8>)
 800460e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004610:	4a3e      	ldr	r2, [pc, #248]	; (800470c <HAL_I2C_MspInit+0x2a8>)
 8004612:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004616:	6413      	str	r3, [r2, #64]	; 0x40
 8004618:	4b3c      	ldr	r3, [pc, #240]	; (800470c <HAL_I2C_MspInit+0x2a8>)
 800461a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8004624:	4b40      	ldr	r3, [pc, #256]	; (8004728 <HAL_I2C_MspInit+0x2c4>)
 8004626:	4a41      	ldr	r2, [pc, #260]	; (800472c <HAL_I2C_MspInit+0x2c8>)
 8004628:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 800462a:	4b3f      	ldr	r3, [pc, #252]	; (8004728 <HAL_I2C_MspInit+0x2c4>)
 800462c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8004630:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004632:	4b3d      	ldr	r3, [pc, #244]	; (8004728 <HAL_I2C_MspInit+0x2c4>)
 8004634:	2240      	movs	r2, #64	; 0x40
 8004636:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004638:	4b3b      	ldr	r3, [pc, #236]	; (8004728 <HAL_I2C_MspInit+0x2c4>)
 800463a:	2200      	movs	r2, #0
 800463c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800463e:	4b3a      	ldr	r3, [pc, #232]	; (8004728 <HAL_I2C_MspInit+0x2c4>)
 8004640:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004644:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004646:	4b38      	ldr	r3, [pc, #224]	; (8004728 <HAL_I2C_MspInit+0x2c4>)
 8004648:	2200      	movs	r2, #0
 800464a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800464c:	4b36      	ldr	r3, [pc, #216]	; (8004728 <HAL_I2C_MspInit+0x2c4>)
 800464e:	2200      	movs	r2, #0
 8004650:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8004652:	4b35      	ldr	r3, [pc, #212]	; (8004728 <HAL_I2C_MspInit+0x2c4>)
 8004654:	2200      	movs	r2, #0
 8004656:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004658:	4b33      	ldr	r3, [pc, #204]	; (8004728 <HAL_I2C_MspInit+0x2c4>)
 800465a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800465e:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004660:	4b31      	ldr	r3, [pc, #196]	; (8004728 <HAL_I2C_MspInit+0x2c4>)
 8004662:	2200      	movs	r2, #0
 8004664:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8004666:	4830      	ldr	r0, [pc, #192]	; (8004728 <HAL_I2C_MspInit+0x2c4>)
 8004668:	f003 fc48 	bl	8007efc <HAL_DMA_Init>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_I2C_MspInit+0x212>
      Error_Handler();
 8004672:	f001 fa0f 	bl	8005a94 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a2b      	ldr	r2, [pc, #172]	; (8004728 <HAL_I2C_MspInit+0x2c4>)
 800467a:	635a      	str	r2, [r3, #52]	; 0x34
 800467c:	4a2a      	ldr	r2, [pc, #168]	; (8004728 <HAL_I2C_MspInit+0x2c4>)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 8004682:	4b2b      	ldr	r3, [pc, #172]	; (8004730 <HAL_I2C_MspInit+0x2cc>)
 8004684:	4a2b      	ldr	r2, [pc, #172]	; (8004734 <HAL_I2C_MspInit+0x2d0>)
 8004686:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8004688:	4b29      	ldr	r3, [pc, #164]	; (8004730 <HAL_I2C_MspInit+0x2cc>)
 800468a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800468e:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004690:	4b27      	ldr	r3, [pc, #156]	; (8004730 <HAL_I2C_MspInit+0x2cc>)
 8004692:	2200      	movs	r2, #0
 8004694:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004696:	4b26      	ldr	r3, [pc, #152]	; (8004730 <HAL_I2C_MspInit+0x2cc>)
 8004698:	2200      	movs	r2, #0
 800469a:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800469c:	4b24      	ldr	r3, [pc, #144]	; (8004730 <HAL_I2C_MspInit+0x2cc>)
 800469e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046a2:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046a4:	4b22      	ldr	r3, [pc, #136]	; (8004730 <HAL_I2C_MspInit+0x2cc>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046aa:	4b21      	ldr	r3, [pc, #132]	; (8004730 <HAL_I2C_MspInit+0x2cc>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80046b0:	4b1f      	ldr	r3, [pc, #124]	; (8004730 <HAL_I2C_MspInit+0x2cc>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80046b6:	4b1e      	ldr	r3, [pc, #120]	; (8004730 <HAL_I2C_MspInit+0x2cc>)
 80046b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046bc:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046be:	4b1c      	ldr	r3, [pc, #112]	; (8004730 <HAL_I2C_MspInit+0x2cc>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80046c4:	481a      	ldr	r0, [pc, #104]	; (8004730 <HAL_I2C_MspInit+0x2cc>)
 80046c6:	f003 fc19 	bl	8007efc <HAL_DMA_Init>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <HAL_I2C_MspInit+0x270>
      Error_Handler();
 80046d0:	f001 f9e0 	bl	8005a94 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a16      	ldr	r2, [pc, #88]	; (8004730 <HAL_I2C_MspInit+0x2cc>)
 80046d8:	639a      	str	r2, [r3, #56]	; 0x38
 80046da:	4a15      	ldr	r2, [pc, #84]	; (8004730 <HAL_I2C_MspInit+0x2cc>)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80046e0:	2200      	movs	r2, #0
 80046e2:	2100      	movs	r1, #0
 80046e4:	2021      	movs	r0, #33	; 0x21
 80046e6:	f003 fbd2 	bl	8007e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80046ea:	2021      	movs	r0, #33	; 0x21
 80046ec:	f003 fbeb 	bl	8007ec6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80046f0:	2200      	movs	r2, #0
 80046f2:	2100      	movs	r1, #0
 80046f4:	2022      	movs	r0, #34	; 0x22
 80046f6:	f003 fbca 	bl	8007e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80046fa:	2022      	movs	r0, #34	; 0x22
 80046fc:	f003 fbe3 	bl	8007ec6 <HAL_NVIC_EnableIRQ>
}
 8004700:	bf00      	nop
 8004702:	3730      	adds	r7, #48	; 0x30
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40005400 	.word	0x40005400
 800470c:	40023800 	.word	0x40023800
 8004710:	40020400 	.word	0x40020400
 8004714:	20002060 	.word	0x20002060
 8004718:	40026010 	.word	0x40026010
 800471c:	20001e98 	.word	0x20001e98
 8004720:	400260a0 	.word	0x400260a0
 8004724:	40005800 	.word	0x40005800
 8004728:	20002000 	.word	0x20002000
 800472c:	400260b8 	.word	0x400260b8
 8004730:	20001fa0 	.word	0x20001fa0
 8004734:	40026058 	.word	0x40026058

08004738 <Setup_IMU>:
float gyro_x_angle, gyro_y_angle, gyro_z_angle;
float gyro_x_calibration, gyro_y_calibration, gyro_z_calibration;
float acc_x_g, acc_y_g, acc_z_g, acc_z_start;

void Setup_IMU()
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af02      	add	r7, sp, #8
	imu_setup_buffer[0] = 0x6B;
 800473e:	4b22      	ldr	r3, [pc, #136]	; (80047c8 <Setup_IMU+0x90>)
 8004740:	226b      	movs	r2, #107	; 0x6b
 8004742:	701a      	strb	r2, [r3, #0]
	imu_setup_buffer[1] = 0x00;
 8004744:	4b20      	ldr	r3, [pc, #128]	; (80047c8 <Setup_IMU+0x90>)
 8004746:	2200      	movs	r2, #0
 8004748:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, imu_setup_buffer, 2, HAL_MAX_DELAY);
 800474a:	23d0      	movs	r3, #208	; 0xd0
 800474c:	b299      	uxth	r1, r3
 800474e:	f04f 33ff 	mov.w	r3, #4294967295
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	2302      	movs	r3, #2
 8004756:	4a1c      	ldr	r2, [pc, #112]	; (80047c8 <Setup_IMU+0x90>)
 8004758:	481c      	ldr	r0, [pc, #112]	; (80047cc <Setup_IMU+0x94>)
 800475a:	f004 fa05 	bl	8008b68 <HAL_I2C_Master_Transmit>
 800475e:	4603      	mov	r3, r0
 8004760:	461a      	mov	r2, r3
 8004762:	4b1b      	ldr	r3, [pc, #108]	; (80047d0 <Setup_IMU+0x98>)
 8004764:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK)
	{
		//strcpy((char*)buf, "Error Tx\r\n");
	}

	HAL_Delay(10);
 8004766:	200a      	movs	r0, #10
 8004768:	f003 fa94 	bl	8007c94 <HAL_Delay>

	imu_setup_buffer[0] = 0x1B;
 800476c:	4b16      	ldr	r3, [pc, #88]	; (80047c8 <Setup_IMU+0x90>)
 800476e:	221b      	movs	r2, #27
 8004770:	701a      	strb	r2, [r3, #0]
	imu_setup_buffer[1] = 0x08;
 8004772:	4b15      	ldr	r3, [pc, #84]	; (80047c8 <Setup_IMU+0x90>)
 8004774:	2208      	movs	r2, #8
 8004776:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, imu_setup_buffer, 2, HAL_MAX_DELAY);
 8004778:	23d0      	movs	r3, #208	; 0xd0
 800477a:	b299      	uxth	r1, r3
 800477c:	f04f 33ff 	mov.w	r3, #4294967295
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	2302      	movs	r3, #2
 8004784:	4a10      	ldr	r2, [pc, #64]	; (80047c8 <Setup_IMU+0x90>)
 8004786:	4811      	ldr	r0, [pc, #68]	; (80047cc <Setup_IMU+0x94>)
 8004788:	f004 f9ee 	bl	8008b68 <HAL_I2C_Master_Transmit>
 800478c:	4603      	mov	r3, r0
 800478e:	461a      	mov	r2, r3
 8004790:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <Setup_IMU+0x98>)
 8004792:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK)
	{
		//strcpy((char*)buf, "Error Tx\r\n");
	}

	HAL_Delay(10);
 8004794:	200a      	movs	r0, #10
 8004796:	f003 fa7d 	bl	8007c94 <HAL_Delay>

	imu_setup_buffer[0] = 0x1A;
 800479a:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <Setup_IMU+0x90>)
 800479c:	221a      	movs	r2, #26
 800479e:	701a      	strb	r2, [r3, #0]
	imu_setup_buffer[1] = 0x03;
 80047a0:	4b09      	ldr	r3, [pc, #36]	; (80047c8 <Setup_IMU+0x90>)
 80047a2:	2203      	movs	r2, #3
 80047a4:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, imu_setup_buffer, 2, HAL_MAX_DELAY);
 80047a6:	23d0      	movs	r3, #208	; 0xd0
 80047a8:	b299      	uxth	r1, r3
 80047aa:	f04f 33ff 	mov.w	r3, #4294967295
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	2302      	movs	r3, #2
 80047b2:	4a05      	ldr	r2, [pc, #20]	; (80047c8 <Setup_IMU+0x90>)
 80047b4:	4805      	ldr	r0, [pc, #20]	; (80047cc <Setup_IMU+0x94>)
 80047b6:	f004 f9d7 	bl	8008b68 <HAL_I2C_Master_Transmit>
 80047ba:	4603      	mov	r3, r0
 80047bc:	461a      	mov	r2, r3
 80047be:	4b04      	ldr	r3, [pc, #16]	; (80047d0 <Setup_IMU+0x98>)
 80047c0:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK)
	{
		//strcpy((char*)buf, "Error Tx\r\n");
	}
}
 80047c2:	bf00      	nop
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	20002110 	.word	0x20002110
 80047cc:	20001ef8 	.word	0x20001ef8
 80047d0:	2000212e 	.word	0x2000212e

080047d4 <Calibrate_IMU>:

void Calibrate_IMU()
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
	for(int i = 0; i < 2000; i++)
 80047da:	2300      	movs	r3, #0
 80047dc:	607b      	str	r3, [r7, #4]
 80047de:	e044      	b.n	800486a <Calibrate_IMU+0x96>
	{
		Read_IMU(1);
 80047e0:	2001      	movs	r0, #1
 80047e2:	f000 f891 	bl	8004908 <Read_IMU>
		gyro_x_calibration += raw_gyro_acc_data[0];
 80047e6:	4b3f      	ldr	r3, [pc, #252]	; (80048e4 <Calibrate_IMU+0x110>)
 80047e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047ec:	ee07 3a90 	vmov	s15, r3
 80047f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047f4:	4b3c      	ldr	r3, [pc, #240]	; (80048e8 <Calibrate_IMU+0x114>)
 80047f6:	edd3 7a00 	vldr	s15, [r3]
 80047fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047fe:	4b3a      	ldr	r3, [pc, #232]	; (80048e8 <Calibrate_IMU+0x114>)
 8004800:	edc3 7a00 	vstr	s15, [r3]
		gyro_y_calibration += raw_gyro_acc_data[1];
 8004804:	4b37      	ldr	r3, [pc, #220]	; (80048e4 <Calibrate_IMU+0x110>)
 8004806:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800480a:	ee07 3a90 	vmov	s15, r3
 800480e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004812:	4b36      	ldr	r3, [pc, #216]	; (80048ec <Calibrate_IMU+0x118>)
 8004814:	edd3 7a00 	vldr	s15, [r3]
 8004818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800481c:	4b33      	ldr	r3, [pc, #204]	; (80048ec <Calibrate_IMU+0x118>)
 800481e:	edc3 7a00 	vstr	s15, [r3]
		gyro_z_calibration += raw_gyro_acc_data[2];
 8004822:	4b30      	ldr	r3, [pc, #192]	; (80048e4 <Calibrate_IMU+0x110>)
 8004824:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004828:	ee07 3a90 	vmov	s15, r3
 800482c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004830:	4b2f      	ldr	r3, [pc, #188]	; (80048f0 <Calibrate_IMU+0x11c>)
 8004832:	edd3 7a00 	vldr	s15, [r3]
 8004836:	ee77 7a27 	vadd.f32	s15, s14, s15
 800483a:	4b2d      	ldr	r3, [pc, #180]	; (80048f0 <Calibrate_IMU+0x11c>)
 800483c:	edc3 7a00 	vstr	s15, [r3]
		acc_z_start += raw_gyro_acc_data[5];
 8004840:	4b28      	ldr	r3, [pc, #160]	; (80048e4 <Calibrate_IMU+0x110>)
 8004842:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004846:	ee07 3a90 	vmov	s15, r3
 800484a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800484e:	4b29      	ldr	r3, [pc, #164]	; (80048f4 <Calibrate_IMU+0x120>)
 8004850:	edd3 7a00 	vldr	s15, [r3]
 8004854:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004858:	4b26      	ldr	r3, [pc, #152]	; (80048f4 <Calibrate_IMU+0x120>)
 800485a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 800485e:	2002      	movs	r0, #2
 8004860:	f003 fa18 	bl	8007c94 <HAL_Delay>
	for(int i = 0; i < 2000; i++)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3301      	adds	r3, #1
 8004868:	607b      	str	r3, [r7, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004870:	dbb6      	blt.n	80047e0 <Calibrate_IMU+0xc>
	}

	gyro_x_angle = 0;
 8004872:	4b21      	ldr	r3, [pc, #132]	; (80048f8 <Calibrate_IMU+0x124>)
 8004874:	f04f 0200 	mov.w	r2, #0
 8004878:	601a      	str	r2, [r3, #0]
	gyro_y_angle = 0;
 800487a:	4b20      	ldr	r3, [pc, #128]	; (80048fc <Calibrate_IMU+0x128>)
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	601a      	str	r2, [r3, #0]
	gyro_z_angle = 0;
 8004882:	4b1f      	ldr	r3, [pc, #124]	; (8004900 <Calibrate_IMU+0x12c>)
 8004884:	f04f 0200 	mov.w	r2, #0
 8004888:	601a      	str	r2, [r3, #0]

	gyro_x_calibration /= 2000;
 800488a:	4b17      	ldr	r3, [pc, #92]	; (80048e8 <Calibrate_IMU+0x114>)
 800488c:	ed93 7a00 	vldr	s14, [r3]
 8004890:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8004904 <Calibrate_IMU+0x130>
 8004894:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004898:	4b13      	ldr	r3, [pc, #76]	; (80048e8 <Calibrate_IMU+0x114>)
 800489a:	edc3 7a00 	vstr	s15, [r3]
	gyro_y_calibration /= 2000;
 800489e:	4b13      	ldr	r3, [pc, #76]	; (80048ec <Calibrate_IMU+0x118>)
 80048a0:	ed93 7a00 	vldr	s14, [r3]
 80048a4:	eddf 6a17 	vldr	s13, [pc, #92]	; 8004904 <Calibrate_IMU+0x130>
 80048a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048ac:	4b0f      	ldr	r3, [pc, #60]	; (80048ec <Calibrate_IMU+0x118>)
 80048ae:	edc3 7a00 	vstr	s15, [r3]
	gyro_z_calibration /= 2000;
 80048b2:	4b0f      	ldr	r3, [pc, #60]	; (80048f0 <Calibrate_IMU+0x11c>)
 80048b4:	ed93 7a00 	vldr	s14, [r3]
 80048b8:	eddf 6a12 	vldr	s13, [pc, #72]	; 8004904 <Calibrate_IMU+0x130>
 80048bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048c0:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <Calibrate_IMU+0x11c>)
 80048c2:	edc3 7a00 	vstr	s15, [r3]
	acc_z_start /= 2000;
 80048c6:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <Calibrate_IMU+0x120>)
 80048c8:	ed93 7a00 	vldr	s14, [r3]
 80048cc:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8004904 <Calibrate_IMU+0x130>
 80048d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048d4:	4b07      	ldr	r3, [pc, #28]	; (80048f4 <Calibrate_IMU+0x120>)
 80048d6:	edc3 7a00 	vstr	s15, [r3]
}
 80048da:	bf00      	nop
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	200020f0 	.word	0x200020f0
 80048e8:	200020d8 	.word	0x200020d8
 80048ec:	200020ec 	.word	0x200020ec
 80048f0:	200020e4 	.word	0x200020e4
 80048f4:	200020e0 	.word	0x200020e0
 80048f8:	200020d0 	.word	0x200020d0
 80048fc:	200020dc 	.word	0x200020dc
 8004900:	20002104 	.word	0x20002104
 8004904:	44fa0000 	.word	0x44fa0000

08004908 <Read_IMU>:

void Read_IMU(uint8_t is_calibrating)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af04      	add	r7, sp, #16
 800490e:	4603      	mov	r3, r0
 8004910:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, GYRO_ADDR, 0x3B, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&raw_gyro_acc_buffer, 14, HAL_MAX_DELAY);//Implement failure logic later
 8004912:	23d0      	movs	r3, #208	; 0xd0
 8004914:	b299      	uxth	r1, r3
 8004916:	f04f 33ff 	mov.w	r3, #4294967295
 800491a:	9302      	str	r3, [sp, #8]
 800491c:	230e      	movs	r3, #14
 800491e:	9301      	str	r3, [sp, #4]
 8004920:	4b53      	ldr	r3, [pc, #332]	; (8004a70 <Read_IMU+0x168>)
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	2301      	movs	r3, #1
 8004926:	223b      	movs	r2, #59	; 0x3b
 8004928:	4852      	ldr	r0, [pc, #328]	; (8004a74 <Read_IMU+0x16c>)
 800492a:	f004 fa1b 	bl	8008d64 <HAL_I2C_Mem_Read>
	raw_gyro_acc_data[3] = (int16_t)((raw_gyro_acc_buffer[0] << 8) | (raw_gyro_acc_buffer[1]));	//Acc X
 800492e:	4b50      	ldr	r3, [pc, #320]	; (8004a70 <Read_IMU+0x168>)
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	021b      	lsls	r3, r3, #8
 8004934:	b21a      	sxth	r2, r3
 8004936:	4b4e      	ldr	r3, [pc, #312]	; (8004a70 <Read_IMU+0x168>)
 8004938:	785b      	ldrb	r3, [r3, #1]
 800493a:	b21b      	sxth	r3, r3
 800493c:	4313      	orrs	r3, r2
 800493e:	b21a      	sxth	r2, r3
 8004940:	4b4d      	ldr	r3, [pc, #308]	; (8004a78 <Read_IMU+0x170>)
 8004942:	80da      	strh	r2, [r3, #6]
	raw_gyro_acc_data[4] = (int16_t)((raw_gyro_acc_buffer[2] << 8) | (raw_gyro_acc_buffer[3]));	//Acc Y
 8004944:	4b4a      	ldr	r3, [pc, #296]	; (8004a70 <Read_IMU+0x168>)
 8004946:	789b      	ldrb	r3, [r3, #2]
 8004948:	021b      	lsls	r3, r3, #8
 800494a:	b21a      	sxth	r2, r3
 800494c:	4b48      	ldr	r3, [pc, #288]	; (8004a70 <Read_IMU+0x168>)
 800494e:	78db      	ldrb	r3, [r3, #3]
 8004950:	b21b      	sxth	r3, r3
 8004952:	4313      	orrs	r3, r2
 8004954:	b21a      	sxth	r2, r3
 8004956:	4b48      	ldr	r3, [pc, #288]	; (8004a78 <Read_IMU+0x170>)
 8004958:	811a      	strh	r2, [r3, #8]
	raw_gyro_acc_data[5] = (int16_t)((raw_gyro_acc_buffer[4] << 8) | (raw_gyro_acc_buffer[5]));	//Acc Z
 800495a:	4b45      	ldr	r3, [pc, #276]	; (8004a70 <Read_IMU+0x168>)
 800495c:	791b      	ldrb	r3, [r3, #4]
 800495e:	021b      	lsls	r3, r3, #8
 8004960:	b21a      	sxth	r2, r3
 8004962:	4b43      	ldr	r3, [pc, #268]	; (8004a70 <Read_IMU+0x168>)
 8004964:	795b      	ldrb	r3, [r3, #5]
 8004966:	b21b      	sxth	r3, r3
 8004968:	4313      	orrs	r3, r2
 800496a:	b21a      	sxth	r2, r3
 800496c:	4b42      	ldr	r3, [pc, #264]	; (8004a78 <Read_IMU+0x170>)
 800496e:	815a      	strh	r2, [r3, #10]
	raw_imu_temp = (int16_t)((raw_gyro_acc_buffer[6] << 8) | (raw_gyro_acc_buffer[7]));
 8004970:	4b3f      	ldr	r3, [pc, #252]	; (8004a70 <Read_IMU+0x168>)
 8004972:	799b      	ldrb	r3, [r3, #6]
 8004974:	021b      	lsls	r3, r3, #8
 8004976:	b21a      	sxth	r2, r3
 8004978:	4b3d      	ldr	r3, [pc, #244]	; (8004a70 <Read_IMU+0x168>)
 800497a:	79db      	ldrb	r3, [r3, #7]
 800497c:	b21b      	sxth	r3, r3
 800497e:	4313      	orrs	r3, r2
 8004980:	b21a      	sxth	r2, r3
 8004982:	4b3e      	ldr	r3, [pc, #248]	; (8004a7c <Read_IMU+0x174>)
 8004984:	801a      	strh	r2, [r3, #0]
	raw_gyro_acc_data[0] = (int16_t)((raw_gyro_acc_buffer[8] << 8) | (raw_gyro_acc_buffer[9]));	//Gyro X
 8004986:	4b3a      	ldr	r3, [pc, #232]	; (8004a70 <Read_IMU+0x168>)
 8004988:	7a1b      	ldrb	r3, [r3, #8]
 800498a:	021b      	lsls	r3, r3, #8
 800498c:	b21a      	sxth	r2, r3
 800498e:	4b38      	ldr	r3, [pc, #224]	; (8004a70 <Read_IMU+0x168>)
 8004990:	7a5b      	ldrb	r3, [r3, #9]
 8004992:	b21b      	sxth	r3, r3
 8004994:	4313      	orrs	r3, r2
 8004996:	b21a      	sxth	r2, r3
 8004998:	4b37      	ldr	r3, [pc, #220]	; (8004a78 <Read_IMU+0x170>)
 800499a:	801a      	strh	r2, [r3, #0]
	raw_gyro_acc_data[1] = (int16_t)((raw_gyro_acc_buffer[10] << 8) | (raw_gyro_acc_buffer[11]));	//Gyro Y
 800499c:	4b34      	ldr	r3, [pc, #208]	; (8004a70 <Read_IMU+0x168>)
 800499e:	7a9b      	ldrb	r3, [r3, #10]
 80049a0:	021b      	lsls	r3, r3, #8
 80049a2:	b21a      	sxth	r2, r3
 80049a4:	4b32      	ldr	r3, [pc, #200]	; (8004a70 <Read_IMU+0x168>)
 80049a6:	7adb      	ldrb	r3, [r3, #11]
 80049a8:	b21b      	sxth	r3, r3
 80049aa:	4313      	orrs	r3, r2
 80049ac:	b21a      	sxth	r2, r3
 80049ae:	4b32      	ldr	r3, [pc, #200]	; (8004a78 <Read_IMU+0x170>)
 80049b0:	805a      	strh	r2, [r3, #2]
	raw_gyro_acc_data[2] = (int16_t)((raw_gyro_acc_buffer[12] << 8) | (raw_gyro_acc_buffer[13]));	//Gyro Z
 80049b2:	4b2f      	ldr	r3, [pc, #188]	; (8004a70 <Read_IMU+0x168>)
 80049b4:	7b1b      	ldrb	r3, [r3, #12]
 80049b6:	021b      	lsls	r3, r3, #8
 80049b8:	b21a      	sxth	r2, r3
 80049ba:	4b2d      	ldr	r3, [pc, #180]	; (8004a70 <Read_IMU+0x168>)
 80049bc:	7b5b      	ldrb	r3, [r3, #13]
 80049be:	b21b      	sxth	r3, r3
 80049c0:	4313      	orrs	r3, r2
 80049c2:	b21a      	sxth	r2, r3
 80049c4:	4b2c      	ldr	r3, [pc, #176]	; (8004a78 <Read_IMU+0x170>)
 80049c6:	809a      	strh	r2, [r3, #4]

	if(!is_calibrating)
 80049c8:	79fb      	ldrb	r3, [r7, #7]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d14b      	bne.n	8004a66 <Read_IMU+0x15e>
	{
		raw_gyro_acc_data[0] -= gyro_x_calibration;
 80049ce:	4b2a      	ldr	r3, [pc, #168]	; (8004a78 <Read_IMU+0x170>)
 80049d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049d4:	ee07 3a90 	vmov	s15, r3
 80049d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049dc:	4b28      	ldr	r3, [pc, #160]	; (8004a80 <Read_IMU+0x178>)
 80049de:	edd3 7a00 	vldr	s15, [r3]
 80049e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049ea:	ee17 3a90 	vmov	r3, s15
 80049ee:	b21a      	sxth	r2, r3
 80049f0:	4b21      	ldr	r3, [pc, #132]	; (8004a78 <Read_IMU+0x170>)
 80049f2:	801a      	strh	r2, [r3, #0]
		raw_gyro_acc_data[1] -= gyro_y_calibration;
 80049f4:	4b20      	ldr	r3, [pc, #128]	; (8004a78 <Read_IMU+0x170>)
 80049f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a02:	4b20      	ldr	r3, [pc, #128]	; (8004a84 <Read_IMU+0x17c>)
 8004a04:	edd3 7a00 	vldr	s15, [r3]
 8004a08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a10:	ee17 3a90 	vmov	r3, s15
 8004a14:	b21a      	sxth	r2, r3
 8004a16:	4b18      	ldr	r3, [pc, #96]	; (8004a78 <Read_IMU+0x170>)
 8004a18:	805a      	strh	r2, [r3, #2]
		raw_gyro_acc_data[2] -= gyro_z_calibration;
 8004a1a:	4b17      	ldr	r3, [pc, #92]	; (8004a78 <Read_IMU+0x170>)
 8004a1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004a20:	ee07 3a90 	vmov	s15, r3
 8004a24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a28:	4b17      	ldr	r3, [pc, #92]	; (8004a88 <Read_IMU+0x180>)
 8004a2a:	edd3 7a00 	vldr	s15, [r3]
 8004a2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a36:	ee17 3a90 	vmov	r3, s15
 8004a3a:	b21a      	sxth	r2, r3
 8004a3c:	4b0e      	ldr	r3, [pc, #56]	; (8004a78 <Read_IMU+0x170>)
 8004a3e:	809a      	strh	r2, [r3, #4]

		acc_z_g = (float)(raw_gyro_acc_data[5] - acc_z_start) / 16384.0f;
 8004a40:	4b0d      	ldr	r3, [pc, #52]	; (8004a78 <Read_IMU+0x170>)
 8004a42:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004a46:	ee07 3a90 	vmov	s15, r3
 8004a4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a4e:	4b0f      	ldr	r3, [pc, #60]	; (8004a8c <Read_IMU+0x184>)
 8004a50:	edd3 7a00 	vldr	s15, [r3]
 8004a54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004a58:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8004a90 <Read_IMU+0x188>
 8004a5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a60:	4b0c      	ldr	r3, [pc, #48]	; (8004a94 <Read_IMU+0x18c>)
 8004a62:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8004a66:	bf00      	nop
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	20002138 	.word	0x20002138
 8004a74:	20001ef8 	.word	0x20001ef8
 8004a78:	200020f0 	.word	0x200020f0
 8004a7c:	200020cc 	.word	0x200020cc
 8004a80:	200020d8 	.word	0x200020d8
 8004a84:	200020ec 	.word	0x200020ec
 8004a88:	200020e4 	.word	0x200020e4
 8004a8c:	200020e0 	.word	0x200020e0
 8004a90:	46800000 	.word	0x46800000
 8004a94:	20002100 	.word	0x20002100

08004a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004a98:	b5b0      	push	{r4, r5, r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004a9e:	f003 f887 	bl	8007bb0 <HAL_Init>

  /* USER CODE BEGIN Init */

  HAL_Delay(500);
 8004aa2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004aa6:	f003 f8f5 	bl	8007c94 <HAL_Delay>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004aaa:	f000 fdef 	bl	800568c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004aae:	f7ff fc07 	bl	80042c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8004ab2:	f7ff fb15 	bl	80040e0 <MX_DMA_Init>
  MX_I2C1_Init();
 8004ab6:	f7ff fc79 	bl	80043ac <MX_I2C1_Init>
  MX_I2C2_Init();
 8004aba:	f7ff fca5 	bl	8004408 <MX_I2C2_Init>
  MX_RTC_Init();
 8004abe:	f000 fff1 	bl	8005aa4 <MX_RTC_Init>
  MX_TIM3_Init();
 8004ac2:	f002 fd39 	bl	8007538 <MX_TIM3_Init>
  MX_TIM5_Init();
 8004ac6:	f002 fdb3 	bl	8007630 <MX_TIM5_Init>
  MX_TIM8_Init();
 8004aca:	f002 fe21 	bl	8007710 <MX_TIM8_Init>
  MX_USB_DEVICE_Init();
 8004ace:	f00c fcc7 	bl	8011460 <MX_USB_DEVICE_Init>
  MX_TIM9_Init();
 8004ad2:	f002 fee1 	bl	8007898 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  direct_access_variables[0].var = (uint8_t *)&pid_altitude_setpoint;
 8004ad6:	4b8a      	ldr	r3, [pc, #552]	; (8004d00 <main+0x268>)
 8004ad8:	4a8a      	ldr	r2, [pc, #552]	; (8004d04 <main+0x26c>)
 8004ada:	601a      	str	r2, [r3, #0]
  direct_access_variables[0].protected = 0;
 8004adc:	4b88      	ldr	r3, [pc, #544]	; (8004d00 <main+0x268>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	719a      	strb	r2, [r3, #6]
  direct_access_variables[0].width = 4;
 8004ae2:	4b87      	ldr	r3, [pc, #540]	; (8004d00 <main+0x268>)
 8004ae4:	2204      	movs	r2, #4
 8004ae6:	711a      	strb	r2, [r3, #4]
  direct_access_variables[0].var_index = 0;
 8004ae8:	4b85      	ldr	r3, [pc, #532]	; (8004d00 <main+0x268>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	715a      	strb	r2, [r3, #5]

  direct_access_variables[1].var = (uint8_t *)&pid_current_altitude_setpoint;
 8004aee:	4b84      	ldr	r3, [pc, #528]	; (8004d00 <main+0x268>)
 8004af0:	4a85      	ldr	r2, [pc, #532]	; (8004d08 <main+0x270>)
 8004af2:	609a      	str	r2, [r3, #8]
  direct_access_variables[1].protected = 1;
 8004af4:	4b82      	ldr	r3, [pc, #520]	; (8004d00 <main+0x268>)
 8004af6:	2201      	movs	r2, #1
 8004af8:	739a      	strb	r2, [r3, #14]
  direct_access_variables[1].width = 4;
 8004afa:	4b81      	ldr	r3, [pc, #516]	; (8004d00 <main+0x268>)
 8004afc:	2204      	movs	r2, #4
 8004afe:	731a      	strb	r2, [r3, #12]
  direct_access_variables[1].var_index = 1;
 8004b00:	4b7f      	ldr	r3, [pc, #508]	; (8004d00 <main+0x268>)
 8004b02:	2201      	movs	r2, #1
 8004b04:	735a      	strb	r2, [r3, #13]

  direct_access_variables[2].var = (uint8_t *)&slow_bmp_altitude;
 8004b06:	4b7e      	ldr	r3, [pc, #504]	; (8004d00 <main+0x268>)
 8004b08:	4a80      	ldr	r2, [pc, #512]	; (8004d0c <main+0x274>)
 8004b0a:	611a      	str	r2, [r3, #16]
  direct_access_variables[2].protected = 1;
 8004b0c:	4b7c      	ldr	r3, [pc, #496]	; (8004d00 <main+0x268>)
 8004b0e:	2201      	movs	r2, #1
 8004b10:	759a      	strb	r2, [r3, #22]
  direct_access_variables[2].width = 4;
 8004b12:	4b7b      	ldr	r3, [pc, #492]	; (8004d00 <main+0x268>)
 8004b14:	2204      	movs	r2, #4
 8004b16:	751a      	strb	r2, [r3, #20]
  direct_access_variables[2].var_index = 2;
 8004b18:	4b79      	ldr	r3, [pc, #484]	; (8004d00 <main+0x268>)
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	755a      	strb	r2, [r3, #21]

  direct_access_variables[3].var = (uint8_t *)&sat_count;
 8004b1e:	4b78      	ldr	r3, [pc, #480]	; (8004d00 <main+0x268>)
 8004b20:	4a7b      	ldr	r2, [pc, #492]	; (8004d10 <main+0x278>)
 8004b22:	619a      	str	r2, [r3, #24]
  direct_access_variables[3].protected = 1;
 8004b24:	4b76      	ldr	r3, [pc, #472]	; (8004d00 <main+0x268>)
 8004b26:	2201      	movs	r2, #1
 8004b28:	779a      	strb	r2, [r3, #30]
  direct_access_variables[3].width = 1;
 8004b2a:	4b75      	ldr	r3, [pc, #468]	; (8004d00 <main+0x268>)
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	771a      	strb	r2, [r3, #28]
  direct_access_variables[3].var_index = 3;
 8004b30:	4b73      	ldr	r3, [pc, #460]	; (8004d00 <main+0x268>)
 8004b32:	2203      	movs	r2, #3
 8004b34:	775a      	strb	r2, [r3, #29]

  direct_access_variables[4].var = (uint8_t *)&raw_gps_lat;
 8004b36:	4b72      	ldr	r3, [pc, #456]	; (8004d00 <main+0x268>)
 8004b38:	4a76      	ldr	r2, [pc, #472]	; (8004d14 <main+0x27c>)
 8004b3a:	621a      	str	r2, [r3, #32]
  direct_access_variables[4].protected = 1;
 8004b3c:	4b70      	ldr	r3, [pc, #448]	; (8004d00 <main+0x268>)
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  direct_access_variables[4].width = 4;
 8004b44:	4b6e      	ldr	r3, [pc, #440]	; (8004d00 <main+0x268>)
 8004b46:	2204      	movs	r2, #4
 8004b48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  direct_access_variables[4].var_index = 4;
 8004b4c:	4b6c      	ldr	r3, [pc, #432]	; (8004d00 <main+0x268>)
 8004b4e:	2204      	movs	r2, #4
 8004b50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  direct_access_variables[5].var = (uint8_t *)&raw_gps_lon;
 8004b54:	4b6a      	ldr	r3, [pc, #424]	; (8004d00 <main+0x268>)
 8004b56:	4a70      	ldr	r2, [pc, #448]	; (8004d18 <main+0x280>)
 8004b58:	629a      	str	r2, [r3, #40]	; 0x28
  direct_access_variables[5].protected = 1;
 8004b5a:	4b69      	ldr	r3, [pc, #420]	; (8004d00 <main+0x268>)
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  direct_access_variables[5].width = 4;
 8004b62:	4b67      	ldr	r3, [pc, #412]	; (8004d00 <main+0x268>)
 8004b64:	2204      	movs	r2, #4
 8004b66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  direct_access_variables[5].var_index = 5;
 8004b6a:	4b65      	ldr	r3, [pc, #404]	; (8004d00 <main+0x268>)
 8004b6c:	2205      	movs	r2, #5
 8004b6e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8004b72:	2100      	movs	r1, #0
 8004b74:	4869      	ldr	r0, [pc, #420]	; (8004d1c <main+0x284>)
 8004b76:	f008 fc85 	bl	800d484 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim9);
 8004b7a:	4869      	ldr	r0, [pc, #420]	; (8004d20 <main+0x288>)
 8004b7c:	f008 fbbe 	bl	800d2fc <HAL_TIM_Base_Start_IT>
  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);//Motor 1 - FL
 8004b80:	210c      	movs	r1, #12
 8004b82:	4868      	ldr	r0, [pc, #416]	; (8004d24 <main+0x28c>)
 8004b84:	f008 fc0a 	bl	800d39c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);//Motor 2 - FR
 8004b88:	2108      	movs	r1, #8
 8004b8a:	4866      	ldr	r0, [pc, #408]	; (8004d24 <main+0x28c>)
 8004b8c:	f008 fc06 	bl	800d39c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);//Motor 3 - BR
 8004b90:	2104      	movs	r1, #4
 8004b92:	4864      	ldr	r0, [pc, #400]	; (8004d24 <main+0x28c>)
 8004b94:	f008 fc02 	bl	800d39c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);//Motor 4 - BL
 8004b98:	2100      	movs	r1, #0
 8004b9a:	4862      	ldr	r0, [pc, #392]	; (8004d24 <main+0x28c>)
 8004b9c:	f008 fbfe 	bl	800d39c <HAL_TIM_PWM_Start>

  auto_packet_buffer[0].total_width = 0;
 8004ba0:	4b61      	ldr	r3, [pc, #388]	; (8004d28 <main+0x290>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
  auto_packet_buffer[0].var_count = 0;
 8004ba8:	4b5f      	ldr	r3, [pc, #380]	; (8004d28 <main+0x290>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
  auto_packet_buffer[0].id = GYRO_PACKET;
 8004bb0:	4b5d      	ldr	r3, [pc, #372]	; (8004d28 <main+0x290>)
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	701a      	strb	r2, [r3, #0]
  auto_packet_buffer[0].send_rate = 1;
 8004bb6:	4b5c      	ldr	r3, [pc, #368]	; (8004d28 <main+0x290>)
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
  AddToAutoBuffer(0, (uint8_t *)&(raw_gyro_acc_data[0]), 2);
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	495a      	ldr	r1, [pc, #360]	; (8004d2c <main+0x294>)
 8004bc2:	2000      	movs	r0, #0
 8004bc4:	f002 fbba 	bl	800733c <AddToAutoBuffer>
  AddToAutoBuffer(0, (uint8_t *)&(raw_gyro_acc_data[1]), 2);
 8004bc8:	2202      	movs	r2, #2
 8004bca:	4959      	ldr	r1, [pc, #356]	; (8004d30 <main+0x298>)
 8004bcc:	2000      	movs	r0, #0
 8004bce:	f002 fbb5 	bl	800733c <AddToAutoBuffer>
  AddToAutoBuffer(0, (uint8_t *)&(raw_gyro_acc_data[2]), 2);
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	4957      	ldr	r1, [pc, #348]	; (8004d34 <main+0x29c>)
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	f002 fbb0 	bl	800733c <AddToAutoBuffer>
  AddToAutoBuffer(0, (uint8_t *)&gyro_x_angle, 4);
 8004bdc:	2204      	movs	r2, #4
 8004bde:	4956      	ldr	r1, [pc, #344]	; (8004d38 <main+0x2a0>)
 8004be0:	2000      	movs	r0, #0
 8004be2:	f002 fbab 	bl	800733c <AddToAutoBuffer>
  AddToAutoBuffer(0, (uint8_t *)&gyro_y_angle, 4);
 8004be6:	2204      	movs	r2, #4
 8004be8:	4954      	ldr	r1, [pc, #336]	; (8004d3c <main+0x2a4>)
 8004bea:	2000      	movs	r0, #0
 8004bec:	f002 fba6 	bl	800733c <AddToAutoBuffer>
  AddToAutoBuffer(0, (uint8_t *)&compass_heading, 4);
 8004bf0:	2204      	movs	r2, #4
 8004bf2:	4953      	ldr	r1, [pc, #332]	; (8004d40 <main+0x2a8>)
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	f002 fba1 	bl	800733c <AddToAutoBuffer>
  AddToAutoBuffer(0, (uint8_t *)&how_long_to_loop_main, 4);
 8004bfa:	2204      	movs	r2, #4
 8004bfc:	4951      	ldr	r1, [pc, #324]	; (8004d44 <main+0x2ac>)
 8004bfe:	2000      	movs	r0, #0
 8004c00:	f002 fb9c 	bl	800733c <AddToAutoBuffer>
  AddToAutoBuffer(0, (uint8_t *)&(ppm_channels[2]), 4);
 8004c04:	2204      	movs	r2, #4
 8004c06:	4950      	ldr	r1, [pc, #320]	; (8004d48 <main+0x2b0>)
 8004c08:	2000      	movs	r0, #0
 8004c0a:	f002 fb97 	bl	800733c <AddToAutoBuffer>
  AddToAutoBuffer(0, &status_first, 1);
 8004c0e:	2201      	movs	r2, #1
 8004c10:	494e      	ldr	r1, [pc, #312]	; (8004d4c <main+0x2b4>)
 8004c12:	2000      	movs	r0, #0
 8004c14:	f002 fb92 	bl	800733c <AddToAutoBuffer>
  auto_packet_count++;
 8004c18:	4b4d      	ldr	r3, [pc, #308]	; (8004d50 <main+0x2b8>)
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	4b4b      	ldr	r3, [pc, #300]	; (8004d50 <main+0x2b8>)
 8004c22:	701a      	strb	r2, [r3, #0]

  auto_packet_buffer[1].total_width = 0;
 8004c24:	4b40      	ldr	r3, [pc, #256]	; (8004d28 <main+0x290>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
  auto_packet_buffer[1].var_count = 0;
 8004c2c:	4b3e      	ldr	r3, [pc, #248]	; (8004d28 <main+0x290>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
  auto_packet_buffer[1].id = PID_OUTPUT_PACKET;
 8004c34:	4b3c      	ldr	r3, [pc, #240]	; (8004d28 <main+0x290>)
 8004c36:	2202      	movs	r2, #2
 8004c38:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
  auto_packet_buffer[1].send_rate = 1;
 8004c3c:	4b3a      	ldr	r3, [pc, #232]	; (8004d28 <main+0x290>)
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
  AddToAutoBuffer(1, (uint8_t *)&gps_roll_modifier_north, 4);	//pid_roll_output
 8004c44:	2204      	movs	r2, #4
 8004c46:	4943      	ldr	r1, [pc, #268]	; (8004d54 <main+0x2bc>)
 8004c48:	2001      	movs	r0, #1
 8004c4a:	f002 fb77 	bl	800733c <AddToAutoBuffer>
  AddToAutoBuffer(1, (uint8_t *)&camera_roll_modifier, 4);	//pid_pitch_output
 8004c4e:	2204      	movs	r2, #4
 8004c50:	4941      	ldr	r1, [pc, #260]	; (8004d58 <main+0x2c0>)
 8004c52:	2001      	movs	r0, #1
 8004c54:	f002 fb72 	bl	800733c <AddToAutoBuffer>
  AddToAutoBuffer(1, (uint8_t *)&camera_pitch_modifier, 4);
 8004c58:	2204      	movs	r2, #4
 8004c5a:	4940      	ldr	r1, [pc, #256]	; (8004d5c <main+0x2c4>)
 8004c5c:	2001      	movs	r0, #1
 8004c5e:	f002 fb6d 	bl	800733c <AddToAutoBuffer>
  //AddToAutoBuffer(1, &pid_pitch_output, 4);
  auto_packet_count++;
 8004c62:	4b3b      	ldr	r3, [pc, #236]	; (8004d50 <main+0x2b8>)
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	3301      	adds	r3, #1
 8004c68:	b2da      	uxtb	r2, r3
 8004c6a:	4b39      	ldr	r3, [pc, #228]	; (8004d50 <main+0x2b8>)
 8004c6c:	701a      	strb	r2, [r3, #0]

  auto_packet_buffer[2].total_width = 0;
 8004c6e:	4b2e      	ldr	r3, [pc, #184]	; (8004d28 <main+0x290>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
  auto_packet_buffer[2].var_count = 0;
 8004c76:	4b2c      	ldr	r3, [pc, #176]	; (8004d28 <main+0x290>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  auto_packet_buffer[2].id = ALTITUDE_PACKET;
 8004c7e:	4b2a      	ldr	r3, [pc, #168]	; (8004d28 <main+0x290>)
 8004c80:	2206      	movs	r2, #6
 8004c82:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
  auto_packet_buffer[2].send_rate = 5;
 8004c86:	4b28      	ldr	r3, [pc, #160]	; (8004d28 <main+0x290>)
 8004c88:	2205      	movs	r2, #5
 8004c8a:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
  AddToAutoBuffer(2, (uint8_t *)&slow_bmp_altitude, 4);
 8004c8e:	2204      	movs	r2, #4
 8004c90:	491e      	ldr	r1, [pc, #120]	; (8004d0c <main+0x274>)
 8004c92:	2002      	movs	r0, #2
 8004c94:	f002 fb52 	bl	800733c <AddToAutoBuffer>
  AddToAutoBuffer(2, (uint8_t *)&(current_state[0]), 8);
 8004c98:	2208      	movs	r2, #8
 8004c9a:	4931      	ldr	r1, [pc, #196]	; (8004d60 <main+0x2c8>)
 8004c9c:	2002      	movs	r0, #2
 8004c9e:	f002 fb4d 	bl	800733c <AddToAutoBuffer>
  AddToAutoBuffer(2, (uint8_t *)&(kalman_gain_matrix[0]), 8);
 8004ca2:	2208      	movs	r2, #8
 8004ca4:	492f      	ldr	r1, [pc, #188]	; (8004d64 <main+0x2cc>)
 8004ca6:	2002      	movs	r0, #2
 8004ca8:	f002 fb48 	bl	800733c <AddToAutoBuffer>
  auto_packet_count++;
 8004cac:	4b28      	ldr	r3, [pc, #160]	; (8004d50 <main+0x2b8>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	4b26      	ldr	r3, [pc, #152]	; (8004d50 <main+0x2b8>)
 8004cb6:	701a      	strb	r2, [r3, #0]

  for(int i = 0; i < 6; i++)
 8004cb8:	2300      	movs	r3, #0
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	e008      	b.n	8004cd0 <main+0x238>
  {
	  ppm_channels[i] = 1000;
 8004cbe:	4a2a      	ldr	r2, [pc, #168]	; (8004d68 <main+0x2d0>)
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004cc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i = 0; i < 6; i++)
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	2b05      	cmp	r3, #5
 8004cd4:	ddf3      	ble.n	8004cbe <main+0x226>
  }

  ppm_channels[4] = 2000;
 8004cd6:	4b24      	ldr	r3, [pc, #144]	; (8004d68 <main+0x2d0>)
 8004cd8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004cdc:	611a      	str	r2, [r3, #16]

  for(int i = 0; i < 35; i++)
 8004cde:	2300      	movs	r3, #0
 8004ce0:	613b      	str	r3, [r7, #16]
 8004ce2:	e007      	b.n	8004cf4 <main+0x25c>
  {
	  empty_data_packet.payload[i] = '\0';
 8004ce4:	4a21      	ldr	r2, [pc, #132]	; (8004d6c <main+0x2d4>)
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	4413      	add	r3, r2
 8004cea:	2200      	movs	r2, #0
 8004cec:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 35; i++)
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	613b      	str	r3, [r7, #16]
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	2b22      	cmp	r3, #34	; 0x22
 8004cf8:	ddf4      	ble.n	8004ce4 <main+0x24c>
  }

  for(int i = 0; i < 32; i++)
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60fb      	str	r3, [r7, #12]
 8004cfe:	e044      	b.n	8004d8a <main+0x2f2>
 8004d00:	20001498 	.word	0x20001498
 8004d04:	20000024 	.word	0x20000024
 8004d08:	20000020 	.word	0x20000020
 8004d0c:	200002d8 	.word	0x200002d8
 8004d10:	20001248 	.word	0x20001248
 8004d14:	20000fdc 	.word	0x20000fdc
 8004d18:	20000fe0 	.word	0x20000fe0
 8004d1c:	20003d6c 	.word	0x20003d6c
 8004d20:	20003dec 	.word	0x20003dec
 8004d24:	20003d2c 	.word	0x20003d2c
 8004d28:	20002724 	.word	0x20002724
 8004d2c:	200020f0 	.word	0x200020f0
 8004d30:	200020f2 	.word	0x200020f2
 8004d34:	200020f4 	.word	0x200020f4
 8004d38:	200020d0 	.word	0x200020d0
 8004d3c:	200020dc 	.word	0x200020dc
 8004d40:	20000298 	.word	0x20000298
 8004d44:	20002198 	.word	0x20002198
 8004d48:	200021d0 	.word	0x200021d0
 8004d4c:	20000380 	.word	0x20000380
 8004d50:	200003b1 	.word	0x200003b1
 8004d54:	20001250 	.word	0x20001250
 8004d58:	20000898 	.word	0x20000898
 8004d5c:	20001230 	.word	0x20001230
 8004d60:	20000308 	.word	0x20000308
 8004d64:	20000028 	.word	0x20000028
 8004d68:	200021c8 	.word	0x200021c8
 8004d6c:	20003cd8 	.word	0x20003cd8
  {
	  camera_receive_buf[i] = 0;
 8004d70:	4aa8      	ldr	r2, [pc, #672]	; (8005014 <main+0x57c>)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	4413      	add	r3, r2
 8004d76:	2200      	movs	r2, #0
 8004d78:	701a      	strb	r2, [r3, #0]
	  camera_send_buf[i] = 0;
 8004d7a:	4aa7      	ldr	r2, [pc, #668]	; (8005018 <main+0x580>)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4413      	add	r3, r2
 8004d80:	2200      	movs	r2, #0
 8004d82:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 32; i++)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	3301      	adds	r3, #1
 8004d88:	60fb      	str	r3, [r7, #12]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2b1f      	cmp	r3, #31
 8004d8e:	ddef      	ble.n	8004d70 <main+0x2d8>
  }

  Setup_IMU();
 8004d90:	f7ff fcd2 	bl	8004738 <Setup_IMU>
  Setup_BMP280();
 8004d94:	f7fc fa36 	bl	8001204 <Setup_BMP280>

  //Motor PID Gains
  EEPROM_Clear_Buffer();
 8004d98:	f7ff f9da 	bl	8004150 <EEPROM_Clear_Buffer>
  EEPROM_Read_Page(0, 24);
 8004d9c:	2118      	movs	r1, #24
 8004d9e:	2000      	movs	r0, #0
 8004da0:	f7ff fa16 	bl	80041d0 <EEPROM_Read_Page>
  eeprom_read_buffer_index = 0;
 8004da4:	4b9d      	ldr	r3, [pc, #628]	; (800501c <main+0x584>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	701a      	strb	r2, [r3, #0]
  EEPROM_Read_Buffer((uint8_t *)&kp_roll, 4);
 8004daa:	2104      	movs	r1, #4
 8004dac:	489c      	ldr	r0, [pc, #624]	; (8005020 <main+0x588>)
 8004dae:	f7ff fa5b 	bl	8004268 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&ki_roll, 4);
 8004db2:	2104      	movs	r1, #4
 8004db4:	489b      	ldr	r0, [pc, #620]	; (8005024 <main+0x58c>)
 8004db6:	f7ff fa57 	bl	8004268 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&kd_roll, 4);
 8004dba:	2104      	movs	r1, #4
 8004dbc:	489a      	ldr	r0, [pc, #616]	; (8005028 <main+0x590>)
 8004dbe:	f7ff fa53 	bl	8004268 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&kp_yaw, 4);
 8004dc2:	2104      	movs	r1, #4
 8004dc4:	4899      	ldr	r0, [pc, #612]	; (800502c <main+0x594>)
 8004dc6:	f7ff fa4f 	bl	8004268 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&ki_yaw, 4);
 8004dca:	2104      	movs	r1, #4
 8004dcc:	4898      	ldr	r0, [pc, #608]	; (8005030 <main+0x598>)
 8004dce:	f7ff fa4b 	bl	8004268 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&kd_yaw, 4);
 8004dd2:	2104      	movs	r1, #4
 8004dd4:	4897      	ldr	r0, [pc, #604]	; (8005034 <main+0x59c>)
 8004dd6:	f7ff fa47 	bl	8004268 <EEPROM_Read_Buffer>

  //Altitude and GPS PID Gains
  EEPROM_Clear_Buffer();
 8004dda:	f7ff f9b9 	bl	8004150 <EEPROM_Clear_Buffer>
  EEPROM_Read_Page(32, 24);
 8004dde:	2118      	movs	r1, #24
 8004de0:	2020      	movs	r0, #32
 8004de2:	f7ff f9f5 	bl	80041d0 <EEPROM_Read_Page>
  eeprom_read_buffer_index = 0;
 8004de6:	4b8d      	ldr	r3, [pc, #564]	; (800501c <main+0x584>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	701a      	strb	r2, [r3, #0]
  EEPROM_Read_Buffer((uint8_t *)&kp_alt, 4);
 8004dec:	2104      	movs	r1, #4
 8004dee:	4892      	ldr	r0, [pc, #584]	; (8005038 <main+0x5a0>)
 8004df0:	f7ff fa3a 	bl	8004268 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&ki_alt, 4);
 8004df4:	2104      	movs	r1, #4
 8004df6:	4891      	ldr	r0, [pc, #580]	; (800503c <main+0x5a4>)
 8004df8:	f7ff fa36 	bl	8004268 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&kd_alt, 4);
 8004dfc:	2104      	movs	r1, #4
 8004dfe:	4890      	ldr	r0, [pc, #576]	; (8005040 <main+0x5a8>)
 8004e00:	f7ff fa32 	bl	8004268 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&kp_gps, 4);
 8004e04:	2104      	movs	r1, #4
 8004e06:	488f      	ldr	r0, [pc, #572]	; (8005044 <main+0x5ac>)
 8004e08:	f7ff fa2e 	bl	8004268 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&ki_gps, 4);
 8004e0c:	2104      	movs	r1, #4
 8004e0e:	488e      	ldr	r0, [pc, #568]	; (8005048 <main+0x5b0>)
 8004e10:	f7ff fa2a 	bl	8004268 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&kd_gps, 4);
 8004e14:	2104      	movs	r1, #4
 8004e16:	488d      	ldr	r0, [pc, #564]	; (800504c <main+0x5b4>)
 8004e18:	f7ff fa26 	bl	8004268 <EEPROM_Read_Buffer>

  //Compass Calibration Values
  EEPROM_Clear_Buffer();
 8004e1c:	f7ff f998 	bl	8004150 <EEPROM_Clear_Buffer>
  EEPROM_Read_Page(64, 12);
 8004e20:	210c      	movs	r1, #12
 8004e22:	2040      	movs	r0, #64	; 0x40
 8004e24:	f7ff f9d4 	bl	80041d0 <EEPROM_Read_Page>
  eeprom_read_buffer_index = 0;
 8004e28:	4b7c      	ldr	r3, [pc, #496]	; (800501c <main+0x584>)
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	701a      	strb	r2, [r3, #0]
  EEPROM_Read_Buffer((uint8_t *)&compass_x_min, 2);
 8004e2e:	2102      	movs	r1, #2
 8004e30:	4887      	ldr	r0, [pc, #540]	; (8005050 <main+0x5b8>)
 8004e32:	f7ff fa19 	bl	8004268 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&compass_x_max, 2);
 8004e36:	2102      	movs	r1, #2
 8004e38:	4886      	ldr	r0, [pc, #536]	; (8005054 <main+0x5bc>)
 8004e3a:	f7ff fa15 	bl	8004268 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&compass_y_min, 2);
 8004e3e:	2102      	movs	r1, #2
 8004e40:	4885      	ldr	r0, [pc, #532]	; (8005058 <main+0x5c0>)
 8004e42:	f7ff fa11 	bl	8004268 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&compass_y_max, 2);
 8004e46:	2102      	movs	r1, #2
 8004e48:	4884      	ldr	r0, [pc, #528]	; (800505c <main+0x5c4>)
 8004e4a:	f7ff fa0d 	bl	8004268 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&compass_z_min, 2);
 8004e4e:	2102      	movs	r1, #2
 8004e50:	4883      	ldr	r0, [pc, #524]	; (8005060 <main+0x5c8>)
 8004e52:	f7ff fa09 	bl	8004268 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&compass_z_max, 2);
 8004e56:	2102      	movs	r1, #2
 8004e58:	4882      	ldr	r0, [pc, #520]	; (8005064 <main+0x5cc>)
 8004e5a:	f7ff fa05 	bl	8004268 <EEPROM_Read_Buffer>

  Setup_Compass();
 8004e5e:	f7fc fcf9 	bl	8001854 <Setup_Compass>
  }

  //program_buffer[14] = 0x03;//Restart Program
  program_buffer[14] = 0x04;*/

  HAL_Delay(2000);
 8004e62:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004e66:	f002 ff15 	bl	8007c94 <HAL_Delay>

  while(abs(x_deviation_sum) > 20 || abs(y_deviation_sum) > 20 || abs(z_deviation_sum) > 20)
 8004e6a:	e07a      	b.n	8004f62 <main+0x4ca>
  {
	  for(int i = 0; i < 200; i++)
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60bb      	str	r3, [r7, #8]
 8004e70:	e056      	b.n	8004f20 <main+0x488>
	  {
		  if(i == 0)
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d108      	bne.n	8004e8a <main+0x3f2>
		  {
			  x_deviation_sum = 0;
 8004e78:	4b7b      	ldr	r3, [pc, #492]	; (8005068 <main+0x5d0>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]
			  y_deviation_sum = 0;
 8004e7e:	4b7b      	ldr	r3, [pc, #492]	; (800506c <main+0x5d4>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]
			  z_deviation_sum = 0;
 8004e84:	4b7a      	ldr	r3, [pc, #488]	; (8005070 <main+0x5d8>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	601a      	str	r2, [r3, #0]
		  }

		  Read_IMU(0);
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	f7ff fd3c 	bl	8004908 <Read_IMU>

		  x_deviation_sum += abs(raw_gyro_acc_data[0] - last_x_value);
 8004e90:	4b78      	ldr	r3, [pc, #480]	; (8005074 <main+0x5dc>)
 8004e92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e96:	461a      	mov	r2, r3
 8004e98:	4b77      	ldr	r3, [pc, #476]	; (8005078 <main+0x5e0>)
 8004e9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004ea4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004ea8:	4b6f      	ldr	r3, [pc, #444]	; (8005068 <main+0x5d0>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4413      	add	r3, r2
 8004eae:	4a6e      	ldr	r2, [pc, #440]	; (8005068 <main+0x5d0>)
 8004eb0:	6013      	str	r3, [r2, #0]
		  y_deviation_sum += abs(raw_gyro_acc_data[1] - last_y_value);
 8004eb2:	4b70      	ldr	r3, [pc, #448]	; (8005074 <main+0x5dc>)
 8004eb4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004eb8:	461a      	mov	r2, r3
 8004eba:	4b70      	ldr	r3, [pc, #448]	; (800507c <main+0x5e4>)
 8004ebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004ec6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004eca:	4b68      	ldr	r3, [pc, #416]	; (800506c <main+0x5d4>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4413      	add	r3, r2
 8004ed0:	4a66      	ldr	r2, [pc, #408]	; (800506c <main+0x5d4>)
 8004ed2:	6013      	str	r3, [r2, #0]
		  z_deviation_sum += abs(raw_gyro_acc_data[2] - last_z_value);
 8004ed4:	4b67      	ldr	r3, [pc, #412]	; (8005074 <main+0x5dc>)
 8004ed6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004eda:	461a      	mov	r2, r3
 8004edc:	4b68      	ldr	r3, [pc, #416]	; (8005080 <main+0x5e8>)
 8004ede:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004ee8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004eec:	4b60      	ldr	r3, [pc, #384]	; (8005070 <main+0x5d8>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	4a5f      	ldr	r2, [pc, #380]	; (8005070 <main+0x5d8>)
 8004ef4:	6013      	str	r3, [r2, #0]

		  last_x_value = raw_gyro_acc_data[0];
 8004ef6:	4b5f      	ldr	r3, [pc, #380]	; (8005074 <main+0x5dc>)
 8004ef8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004efc:	4b5e      	ldr	r3, [pc, #376]	; (8005078 <main+0x5e0>)
 8004efe:	801a      	strh	r2, [r3, #0]
		  last_y_value = raw_gyro_acc_data[1];
 8004f00:	4b5c      	ldr	r3, [pc, #368]	; (8005074 <main+0x5dc>)
 8004f02:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8004f06:	4b5d      	ldr	r3, [pc, #372]	; (800507c <main+0x5e4>)
 8004f08:	801a      	strh	r2, [r3, #0]
		  last_z_value = raw_gyro_acc_data[2];
 8004f0a:	4b5a      	ldr	r3, [pc, #360]	; (8005074 <main+0x5dc>)
 8004f0c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8004f10:	4b5b      	ldr	r3, [pc, #364]	; (8005080 <main+0x5e8>)
 8004f12:	801a      	strh	r2, [r3, #0]
		  HAL_Delay(5);
 8004f14:	2005      	movs	r0, #5
 8004f16:	f002 febd 	bl	8007c94 <HAL_Delay>
	  for(int i = 0; i < 200; i++)
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	60bb      	str	r3, [r7, #8]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	2bc7      	cmp	r3, #199	; 0xc7
 8004f24:	dda5      	ble.n	8004e72 <main+0x3da>
	  }

	  x_deviation_sum /= 200;
 8004f26:	4b50      	ldr	r3, [pc, #320]	; (8005068 <main+0x5d0>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a56      	ldr	r2, [pc, #344]	; (8005084 <main+0x5ec>)
 8004f2c:	fb82 1203 	smull	r1, r2, r2, r3
 8004f30:	1192      	asrs	r2, r2, #6
 8004f32:	17db      	asrs	r3, r3, #31
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	4a4c      	ldr	r2, [pc, #304]	; (8005068 <main+0x5d0>)
 8004f38:	6013      	str	r3, [r2, #0]
	  y_deviation_sum /= 200;
 8004f3a:	4b4c      	ldr	r3, [pc, #304]	; (800506c <main+0x5d4>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a51      	ldr	r2, [pc, #324]	; (8005084 <main+0x5ec>)
 8004f40:	fb82 1203 	smull	r1, r2, r2, r3
 8004f44:	1192      	asrs	r2, r2, #6
 8004f46:	17db      	asrs	r3, r3, #31
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	4a48      	ldr	r2, [pc, #288]	; (800506c <main+0x5d4>)
 8004f4c:	6013      	str	r3, [r2, #0]
	  z_deviation_sum /= 200;
 8004f4e:	4b48      	ldr	r3, [pc, #288]	; (8005070 <main+0x5d8>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a4c      	ldr	r2, [pc, #304]	; (8005084 <main+0x5ec>)
 8004f54:	fb82 1203 	smull	r1, r2, r2, r3
 8004f58:	1192      	asrs	r2, r2, #6
 8004f5a:	17db      	asrs	r3, r3, #31
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	4a44      	ldr	r2, [pc, #272]	; (8005070 <main+0x5d8>)
 8004f60:	6013      	str	r3, [r2, #0]
  while(abs(x_deviation_sum) > 20 || abs(y_deviation_sum) > 20 || abs(z_deviation_sum) > 20)
 8004f62:	4b41      	ldr	r3, [pc, #260]	; (8005068 <main+0x5d0>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	bfb8      	it	lt
 8004f6a:	425b      	neglt	r3, r3
 8004f6c:	2b14      	cmp	r3, #20
 8004f6e:	f73f af7d 	bgt.w	8004e6c <main+0x3d4>
 8004f72:	4b3e      	ldr	r3, [pc, #248]	; (800506c <main+0x5d4>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	bfb8      	it	lt
 8004f7a:	425b      	neglt	r3, r3
 8004f7c:	2b14      	cmp	r3, #20
 8004f7e:	f73f af75 	bgt.w	8004e6c <main+0x3d4>
 8004f82:	4b3b      	ldr	r3, [pc, #236]	; (8005070 <main+0x5d8>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	bfb8      	it	lt
 8004f8a:	425b      	neglt	r3, r3
 8004f8c:	2b14      	cmp	r3, #20
 8004f8e:	f73f af6d 	bgt.w	8004e6c <main+0x3d4>
  }

  Calibrate_BMP280();
 8004f92:	f7fc fc2d 	bl	80017f0 <Calibrate_BMP280>
  Calibrate_IMU();
 8004f96:	f7ff fc1d 	bl	80047d4 <Calibrate_IMU>
  Init_Altitude_Kalman();
 8004f9a:	f7fe f82d 	bl	8002ff8 <Init_Altitude_Kalman>
  ClearPrintBuffer();
 8004f9e:	f002 f94d 	bl	800723c <ClearPrintBuffer>
  sprintf((char *)print_text_buffer, "%s", "Gyro Calibrated.\n");
 8004fa2:	4a39      	ldr	r2, [pc, #228]	; (8005088 <main+0x5f0>)
 8004fa4:	4b39      	ldr	r3, [pc, #228]	; (800508c <main+0x5f4>)
 8004fa6:	4615      	mov	r5, r2
 8004fa8:	461c      	mov	r4, r3
 8004faa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fac:	6028      	str	r0, [r5, #0]
 8004fae:	6069      	str	r1, [r5, #4]
 8004fb0:	60aa      	str	r2, [r5, #8]
 8004fb2:	60eb      	str	r3, [r5, #12]
 8004fb4:	8823      	ldrh	r3, [r4, #0]
 8004fb6:	822b      	strh	r3, [r5, #16]
  PrintManualPacket();
 8004fb8:	f002 f95a 	bl	8007270 <PrintManualPacket>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ppm_channels[4] < 1600)
 8004fbc:	4b34      	ldr	r3, [pc, #208]	; (8005090 <main+0x5f8>)
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004fc4:	da7e      	bge.n	80050c4 <main+0x62c>
	  {
		  manual_mode = 1;
 8004fc6:	4b33      	ldr	r3, [pc, #204]	; (8005094 <main+0x5fc>)
 8004fc8:	2201      	movs	r2, #1
 8004fca:	701a      	strb	r2, [r3, #0]
		  status_first |= 1 << 1;
 8004fcc:	4b32      	ldr	r3, [pc, #200]	; (8005098 <main+0x600>)
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	f043 0302 	orr.w	r3, r3, #2
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	4b30      	ldr	r3, [pc, #192]	; (8005098 <main+0x600>)
 8004fd8:	701a      	strb	r2, [r3, #0]

		  launched = 0;
 8004fda:	4b30      	ldr	r3, [pc, #192]	; (800509c <main+0x604>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	701a      	strb	r2, [r3, #0]
		  landing = 0;
 8004fe0:	4b2f      	ldr	r3, [pc, #188]	; (80050a0 <main+0x608>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	701a      	strb	r2, [r3, #0]
		  launching = 0;
 8004fe6:	4b2f      	ldr	r3, [pc, #188]	; (80050a4 <main+0x60c>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	701a      	strb	r2, [r3, #0]
		  altitude_hold_flag = 0;
 8004fec:	4b2e      	ldr	r3, [pc, #184]	; (80050a8 <main+0x610>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	701a      	strb	r2, [r3, #0]
		  gps_hold_flag = 0;
 8004ff2:	4b2e      	ldr	r3, [pc, #184]	; (80050ac <main+0x614>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	701a      	strb	r2, [r3, #0]
		  last_gps_hold_flag = 0;
 8004ff8:	4b2d      	ldr	r3, [pc, #180]	; (80050b0 <main+0x618>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	701a      	strb	r2, [r3, #0]
		  gps_waypoint_flag = 0;
 8004ffe:	4b2d      	ldr	r3, [pc, #180]	; (80050b4 <main+0x61c>)
 8005000:	2200      	movs	r2, #0
 8005002:	701a      	strb	r2, [r3, #0]

		  hover_throttle = 125;
 8005004:	4b2c      	ldr	r3, [pc, #176]	; (80050b8 <main+0x620>)
 8005006:	4a2d      	ldr	r2, [pc, #180]	; (80050bc <main+0x624>)
 8005008:	601a      	str	r2, [r3, #0]
		  idle_throttle = 125;
 800500a:	4b2d      	ldr	r3, [pc, #180]	; (80050c0 <main+0x628>)
 800500c:	227d      	movs	r2, #125	; 0x7d
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	e064      	b.n	80050dc <main+0x644>
 8005012:	bf00      	nop
 8005014:	2000216c 	.word	0x2000216c
 8005018:	200021ec 	.word	0x200021ec
 800501c:	20000364 	.word	0x20000364
 8005020:	200002b4 	.word	0x200002b4
 8005024:	200002bc 	.word	0x200002bc
 8005028:	200002c4 	.word	0x200002c4
 800502c:	200002b8 	.word	0x200002b8
 8005030:	200002c0 	.word	0x200002c0
 8005034:	200002c8 	.word	0x200002c8
 8005038:	200002e4 	.word	0x200002e4
 800503c:	200002ec 	.word	0x200002ec
 8005040:	200002f0 	.word	0x200002f0
 8005044:	2000032c 	.word	0x2000032c
 8005048:	20000334 	.word	0x20000334
 800504c:	20000338 	.word	0x20000338
 8005050:	2000028c 	.word	0x2000028c
 8005054:	2000028e 	.word	0x2000028e
 8005058:	20000290 	.word	0x20000290
 800505c:	20000292 	.word	0x20000292
 8005060:	20000294 	.word	0x20000294
 8005064:	20000296 	.word	0x20000296
 8005068:	20000070 	.word	0x20000070
 800506c:	20000074 	.word	0x20000074
 8005070:	20000078 	.word	0x20000078
 8005074:	200020f0 	.word	0x200020f0
 8005078:	20002210 	.word	0x20002210
 800507c:	20002194 	.word	0x20002194
 8005080:	200021e8 	.word	0x200021e8
 8005084:	51eb851f 	.word	0x51eb851f
 8005088:	20002234 	.word	0x20002234
 800508c:	080155e4 	.word	0x080155e4
 8005090:	200021c8 	.word	0x200021c8
 8005094:	20000363 	.word	0x20000363
 8005098:	20000380 	.word	0x20000380
 800509c:	20000360 	.word	0x20000360
 80050a0:	20000362 	.word	0x20000362
 80050a4:	20000361 	.word	0x20000361
 80050a8:	20000381 	.word	0x20000381
 80050ac:	20000382 	.word	0x20000382
 80050b0:	20000383 	.word	0x20000383
 80050b4:	20000384 	.word	0x20000384
 80050b8:	2000005c 	.word	0x2000005c
 80050bc:	42fa0000 	.word	0x42fa0000
 80050c0:	20000060 	.word	0x20000060
	  }
	  else
	  {
		  manual_mode = 0;
 80050c4:	4b97      	ldr	r3, [pc, #604]	; (8005324 <main+0x88c>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	701a      	strb	r2, [r3, #0]
		  status_first &= ~(1 << 1);
 80050ca:	4b97      	ldr	r3, [pc, #604]	; (8005328 <main+0x890>)
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	f023 0302 	bic.w	r3, r3, #2
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	4b94      	ldr	r3, [pc, #592]	; (8005328 <main+0x890>)
 80050d6:	701a      	strb	r2, [r3, #0]

		  Control_Loop();
 80050d8:	f7fe fe54 	bl	8003d84 <Control_Loop>
	  }

	  status_first = ((status_first | 0x01) * launched) + ((status_first & ~(0x01)) * (launched ^ 0x01));
 80050dc:	4b92      	ldr	r3, [pc, #584]	; (8005328 <main+0x890>)
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	f043 0301 	orr.w	r3, r3, #1
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	4b91      	ldr	r3, [pc, #580]	; (800532c <main+0x894>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	fb12 f303 	smulbb	r3, r2, r3
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	4b8d      	ldr	r3, [pc, #564]	; (8005328 <main+0x890>)
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	f023 0301 	bic.w	r3, r3, #1
 80050f8:	b2d9      	uxtb	r1, r3
 80050fa:	4b8c      	ldr	r3, [pc, #560]	; (800532c <main+0x894>)
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	f083 0301 	eor.w	r3, r3, #1
 8005102:	b2db      	uxtb	r3, r3
 8005104:	fb11 f303 	smulbb	r3, r1, r3
 8005108:	b2db      	uxtb	r3, r3
 800510a:	4413      	add	r3, r2
 800510c:	b2da      	uxtb	r2, r3
 800510e:	4b86      	ldr	r3, [pc, #536]	; (8005328 <main+0x890>)
 8005110:	701a      	strb	r2, [r3, #0]

	  if(ppm_channels[5] > 1600)
 8005112:	4b87      	ldr	r3, [pc, #540]	; (8005330 <main+0x898>)
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800511a:	dd06      	ble.n	800512a <main+0x692>
	  {
		  optical_flow_flag = 1;
 800511c:	4b85      	ldr	r3, [pc, #532]	; (8005334 <main+0x89c>)
 800511e:	2201      	movs	r2, #1
 8005120:	701a      	strb	r2, [r3, #0]
		  gps_hold_flag = 0;
 8005122:	4b85      	ldr	r3, [pc, #532]	; (8005338 <main+0x8a0>)
 8005124:	2200      	movs	r2, #0
 8005126:	701a      	strb	r2, [r3, #0]
 8005128:	e030      	b.n	800518c <main+0x6f4>
	  }
	  else
	  {
		  optical_flow_flag = 0;
 800512a:	4b82      	ldr	r3, [pc, #520]	; (8005334 <main+0x89c>)
 800512c:	2200      	movs	r2, #0
 800512e:	701a      	strb	r2, [r3, #0]

		  camera_displacement_x = 0;
 8005130:	4b82      	ldr	r3, [pc, #520]	; (800533c <main+0x8a4>)
 8005132:	f04f 0200 	mov.w	r2, #0
 8005136:	601a      	str	r2, [r3, #0]
		  camera_displacement_y = 0;
 8005138:	4b81      	ldr	r3, [pc, #516]	; (8005340 <main+0x8a8>)
 800513a:	f04f 0200 	mov.w	r2, #0
 800513e:	601a      	str	r2, [r3, #0]
		  camera_roll_modifier = 0;
 8005140:	4b80      	ldr	r3, [pc, #512]	; (8005344 <main+0x8ac>)
 8005142:	f04f 0200 	mov.w	r2, #0
 8005146:	601a      	str	r2, [r3, #0]
		  camera_pitch_modifier = 0;
 8005148:	4b7f      	ldr	r3, [pc, #508]	; (8005348 <main+0x8b0>)
 800514a:	f04f 0200 	mov.w	r2, #0
 800514e:	601a      	str	r2, [r3, #0]
		  last_camera_roll_error = 0;
 8005150:	4b7e      	ldr	r3, [pc, #504]	; (800534c <main+0x8b4>)
 8005152:	f04f 0200 	mov.w	r2, #0
 8005156:	601a      	str	r2, [r3, #0]
		  last_camera_pitch_error = 0;
 8005158:	4b7d      	ldr	r3, [pc, #500]	; (8005350 <main+0x8b8>)
 800515a:	f04f 0200 	mov.w	r2, #0
 800515e:	601a      	str	r2, [r3, #0]
		  camera_velocity_x = 0;
 8005160:	4b7c      	ldr	r3, [pc, #496]	; (8005354 <main+0x8bc>)
 8005162:	f04f 0200 	mov.w	r2, #0
 8005166:	601a      	str	r2, [r3, #0]
		  camera_velocity_y = 0;
 8005168:	4b7b      	ldr	r3, [pc, #492]	; (8005358 <main+0x8c0>)
 800516a:	f04f 0200 	mov.w	r2, #0
 800516e:	601a      	str	r2, [r3, #0]
		  last_camera_x_velocity = 0;
 8005170:	4b7a      	ldr	r3, [pc, #488]	; (800535c <main+0x8c4>)
 8005172:	2200      	movs	r2, #0
 8005174:	601a      	str	r2, [r3, #0]
		  last_camera_y_velocity = 0;
 8005176:	4b7a      	ldr	r3, [pc, #488]	; (8005360 <main+0x8c8>)
 8005178:	2200      	movs	r2, #0
 800517a:	601a      	str	r2, [r3, #0]
		  pid_camera_x_i = 0;
 800517c:	4b79      	ldr	r3, [pc, #484]	; (8005364 <main+0x8cc>)
 800517e:	f04f 0200 	mov.w	r2, #0
 8005182:	601a      	str	r2, [r3, #0]
		  pid_camera_y_i = 0;
 8005184:	4b78      	ldr	r3, [pc, #480]	; (8005368 <main+0x8d0>)
 8005186:	f04f 0200 	mov.w	r2, #0
 800518a:	601a      	str	r2, [r3, #0]
	  }

	  if(GetMillisDifference(&temp_led_timer) > 500)
 800518c:	4877      	ldr	r0, [pc, #476]	; (800536c <main+0x8d4>)
 800518e:	f000 fbe7 	bl	8005960 <GetMillisDifference>
 8005192:	4603      	mov	r3, r0
 8005194:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005198:	d904      	bls.n	80051a4 <main+0x70c>
	  {
		  temp_led_timer = GetMillis();
 800519a:	f000 fbcf 	bl	800593c <GetMillis>
 800519e:	4602      	mov	r2, r0
 80051a0:	4b72      	ldr	r3, [pc, #456]	; (800536c <main+0x8d4>)
 80051a2:	601a      	str	r2, [r3, #0]

		  //HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	  }

	  if(GetMicrosDifference(&pwm_output_timer) >= 4000)
 80051a4:	4872      	ldr	r0, [pc, #456]	; (8005370 <main+0x8d8>)
 80051a6:	f000 fbe9 	bl	800597c <GetMicrosDifference>
 80051aa:	4603      	mov	r3, r0
 80051ac:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80051b0:	d304      	bcc.n	80051bc <main+0x724>
	  {
		  pwm_output_timer = GetMicros();
 80051b2:	f000 fbb7 	bl	8005924 <GetMicros>
 80051b6:	4602      	mov	r2, r0
 80051b8:	4b6d      	ldr	r3, [pc, #436]	; (8005370 <main+0x8d8>)
 80051ba:	601a      	str	r2, [r3, #0]
		  //__HAL_TIM_SET_COUNTER(&htim8, 4999); //Reset motor PWN counter for fast response time(probably makes esc refresh rate faster)
	  }

	  if(GetMicrosDifference(&main_loop_timer) >= 2000)
 80051bc:	486d      	ldr	r0, [pc, #436]	; (8005374 <main+0x8dc>)
 80051be:	f000 fbdd 	bl	800597c <GetMicrosDifference>
 80051c2:	4603      	mov	r3, r0
 80051c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80051c8:	f0c0 821c 	bcc.w	8005604 <main+0xb6c>
	  {
		  if(main_cycle_counter > 399)
 80051cc:	4b6a      	ldr	r3, [pc, #424]	; (8005378 <main+0x8e0>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80051d4:	d302      	bcc.n	80051dc <main+0x744>
			  main_cycle_counter = 0;
 80051d6:	4b68      	ldr	r3, [pc, #416]	; (8005378 <main+0x8e0>)
 80051d8:	2200      	movs	r2, #0
 80051da:	601a      	str	r2, [r3, #0]
		  /*if((main_cycle_counter + 1) % 4 == 0)//Every 4 clock cycles(500uS * 4 = 2000uS) NOT IN USE RIGHT NOW
		  {

		  }*/

		  how_long_to_loop_main = GetMicrosDifference(&main_loop_timer);
 80051dc:	4865      	ldr	r0, [pc, #404]	; (8005374 <main+0x8dc>)
 80051de:	f000 fbcd 	bl	800597c <GetMicrosDifference>
 80051e2:	4602      	mov	r2, r0
 80051e4:	4b65      	ldr	r3, [pc, #404]	; (800537c <main+0x8e4>)
 80051e6:	601a      	str	r2, [r3, #0]
		  if(how_long_to_loop_main > 4000)
 80051e8:	4b64      	ldr	r3, [pc, #400]	; (800537c <main+0x8e4>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80051f0:	d903      	bls.n	80051fa <main+0x762>
			  how_long_to_loop_main = 3000;
 80051f2:	4b62      	ldr	r3, [pc, #392]	; (800537c <main+0x8e4>)
 80051f4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80051f8:	601a      	str	r2, [r3, #0]
		  how_long_to_loop_modifier = (float)(round(((float)((float)how_long_to_loop_main / 2000)) * 100.0) / 100.0);
 80051fa:	4b60      	ldr	r3, [pc, #384]	; (800537c <main+0x8e4>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	ee07 3a90 	vmov	s15, r3
 8005202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005206:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8005380 <main+0x8e8>
 800520a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800520e:	ee16 0a90 	vmov	r0, s13
 8005212:	f7fb f999 	bl	8000548 <__aeabi_f2d>
 8005216:	f04f 0200 	mov.w	r2, #0
 800521a:	4b5a      	ldr	r3, [pc, #360]	; (8005384 <main+0x8ec>)
 800521c:	f7fb f9ec 	bl	80005f8 <__aeabi_dmul>
 8005220:	4603      	mov	r3, r0
 8005222:	460c      	mov	r4, r1
 8005224:	ec44 3b17 	vmov	d7, r3, r4
 8005228:	eeb0 0a47 	vmov.f32	s0, s14
 800522c:	eef0 0a67 	vmov.f32	s1, s15
 8005230:	f00c fece 	bl	8011fd0 <round>
 8005234:	ec51 0b10 	vmov	r0, r1, d0
 8005238:	f04f 0200 	mov.w	r2, #0
 800523c:	4b51      	ldr	r3, [pc, #324]	; (8005384 <main+0x8ec>)
 800523e:	f7fb fb05 	bl	800084c <__aeabi_ddiv>
 8005242:	4603      	mov	r3, r0
 8005244:	460c      	mov	r4, r1
 8005246:	4618      	mov	r0, r3
 8005248:	4621      	mov	r1, r4
 800524a:	f7fb fcad 	bl	8000ba8 <__aeabi_d2f>
 800524e:	4602      	mov	r2, r0
 8005250:	4b4d      	ldr	r3, [pc, #308]	; (8005388 <main+0x8f0>)
 8005252:	601a      	str	r2, [r3, #0]
		  main_loop_timer = GetMicros();
 8005254:	f000 fb66 	bl	8005924 <GetMicros>
 8005258:	4602      	mov	r2, r0
 800525a:	4b46      	ldr	r3, [pc, #280]	; (8005374 <main+0x8dc>)
 800525c:	601a      	str	r2, [r3, #0]

		  if(launching && !launched)
 800525e:	4b4b      	ldr	r3, [pc, #300]	; (800538c <main+0x8f4>)
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d005      	beq.n	8005272 <main+0x7da>
 8005266:	4b31      	ldr	r3, [pc, #196]	; (800532c <main+0x894>)
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <main+0x7da>
		  {
			  //Launch logic here
			  Launch_Behavior();
 800526e:	f7fe fb5f 	bl	8003930 <Launch_Behavior>
		  }

		  if(landing && launched)
 8005272:	4b47      	ldr	r3, [pc, #284]	; (8005390 <main+0x8f8>)
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d005      	beq.n	8005286 <main+0x7ee>
 800527a:	4b2c      	ldr	r3, [pc, #176]	; (800532c <main+0x894>)
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <main+0x7ee>
		  {
			  //Landing logic here
			  Land_Behavior();
 8005282:	f7fe fc4d 	bl	8003b20 <Land_Behavior>
		  }

		  if(new_camera_data)
 8005286:	4b43      	ldr	r3, [pc, #268]	; (8005394 <main+0x8fc>)
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d008      	beq.n	80052a0 <main+0x808>
		  {
			  new_camera_data = 0;
 800528e:	4b41      	ldr	r3, [pc, #260]	; (8005394 <main+0x8fc>)
 8005290:	2200      	movs	r2, #0
 8005292:	701a      	strb	r2, [r3, #0]

			  if(optical_flow_flag)
 8005294:	4b27      	ldr	r3, [pc, #156]	; (8005334 <main+0x89c>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <main+0x808>
				  OpticalFlow_PID();
 800529c:	f7fe fae0 	bl	8003860 <OpticalFlow_PID>
		  }

		  if(gps_hold_flag)
 80052a0:	4b25      	ldr	r3, [pc, #148]	; (8005338 <main+0x8a0>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 80e8 	beq.w	800547a <main+0x9e2>
		  {
			  kp_gps_actual = kp_gps;
 80052aa:	4b3b      	ldr	r3, [pc, #236]	; (8005398 <main+0x900>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a3b      	ldr	r2, [pc, #236]	; (800539c <main+0x904>)
 80052b0:	6013      	str	r3, [r2, #0]

			  if(!last_gps_hold_flag)
 80052b2:	4b3b      	ldr	r3, [pc, #236]	; (80053a0 <main+0x908>)
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f040 80a2 	bne.w	8005400 <main+0x968>
			  {
				  calculated_lat_error = 0;
 80052bc:	4b39      	ldr	r3, [pc, #228]	; (80053a4 <main+0x90c>)
 80052be:	f04f 0200 	mov.w	r2, #0
 80052c2:	601a      	str	r2, [r3, #0]
				  calculated_lon_error = 0;
 80052c4:	4b38      	ldr	r3, [pc, #224]	; (80053a8 <main+0x910>)
 80052c6:	f04f 0200 	mov.w	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]
				  lat_add = 0;
 80052cc:	4b37      	ldr	r3, [pc, #220]	; (80053ac <main+0x914>)
 80052ce:	f04f 0200 	mov.w	r2, #0
 80052d2:	601a      	str	r2, [r3, #0]
				  lon_add = 0;
 80052d4:	4b36      	ldr	r3, [pc, #216]	; (80053b0 <main+0x918>)
 80052d6:	f04f 0200 	mov.w	r2, #0
 80052da:	601a      	str	r2, [r3, #0]

				  lat_error_over_time_total = 0;
 80052dc:	4b35      	ldr	r3, [pc, #212]	; (80053b4 <main+0x91c>)
 80052de:	f04f 0200 	mov.w	r2, #0
 80052e2:	601a      	str	r2, [r3, #0]
				  lon_error_over_time_total = 0;
 80052e4:	4b34      	ldr	r3, [pc, #208]	; (80053b8 <main+0x920>)
 80052e6:	f04f 0200 	mov.w	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]
				  gps_error_over_time_reading_index = 0;
 80052ec:	4b33      	ldr	r3, [pc, #204]	; (80053bc <main+0x924>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	701a      	strb	r2, [r3, #0]

				  last_calculated_lat_error = 0;
 80052f2:	4b33      	ldr	r3, [pc, #204]	; (80053c0 <main+0x928>)
 80052f4:	f04f 0200 	mov.w	r2, #0
 80052f8:	601a      	str	r2, [r3, #0]
				  last_calculated_lon_error = 0;
 80052fa:	4b32      	ldr	r3, [pc, #200]	; (80053c4 <main+0x92c>)
 80052fc:	f04f 0200 	mov.w	r2, #0
 8005300:	601a      	str	r2, [r3, #0]

				  gps_roll_modifier = 0;
 8005302:	4b31      	ldr	r3, [pc, #196]	; (80053c8 <main+0x930>)
 8005304:	2200      	movs	r2, #0
 8005306:	601a      	str	r2, [r3, #0]
				  gps_pitch_modifier = 0;
 8005308:	4b30      	ldr	r3, [pc, #192]	; (80053cc <main+0x934>)
 800530a:	2200      	movs	r2, #0
 800530c:	601a      	str	r2, [r3, #0]
				  gps_roll_modifier_north = 0;
 800530e:	4b30      	ldr	r3, [pc, #192]	; (80053d0 <main+0x938>)
 8005310:	f04f 0200 	mov.w	r2, #0
 8005314:	601a      	str	r2, [r3, #0]
				  gps_pitch_modifier_north = 0;
 8005316:	4b2f      	ldr	r3, [pc, #188]	; (80053d4 <main+0x93c>)
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	601a      	str	r2, [r3, #0]

				  for(int i = 0; i < 40; i++)
 800531e:	2300      	movs	r3, #0
 8005320:	607b      	str	r3, [r7, #4]
 8005322:	e06a      	b.n	80053fa <main+0x962>
 8005324:	20000363 	.word	0x20000363
 8005328:	20000380 	.word	0x20000380
 800532c:	20000360 	.word	0x20000360
 8005330:	200021c8 	.word	0x200021c8
 8005334:	20000385 	.word	0x20000385
 8005338:	20000382 	.word	0x20000382
 800533c:	20000388 	.word	0x20000388
 8005340:	2000038c 	.word	0x2000038c
 8005344:	20000898 	.word	0x20000898
 8005348:	20001230 	.word	0x20001230
 800534c:	20000344 	.word	0x20000344
 8005350:	20000348 	.word	0x20000348
 8005354:	20000390 	.word	0x20000390
 8005358:	20000394 	.word	0x20000394
 800535c:	200003a4 	.word	0x200003a4
 8005360:	200003a8 	.word	0x200003a8
 8005364:	20000340 	.word	0x20000340
 8005368:	20000cb0 	.word	0x20000cb0
 800536c:	200021c4 	.word	0x200021c4
 8005370:	20002190 	.word	0x20002190
 8005374:	2000220c 	.word	0x2000220c
 8005378:	20000378 	.word	0x20000378
 800537c:	20002198 	.word	0x20002198
 8005380:	44fa0000 	.word	0x44fa0000
 8005384:	40590000 	.word	0x40590000
 8005388:	2000006c 	.word	0x2000006c
 800538c:	20000361 	.word	0x20000361
 8005390:	20000362 	.word	0x20000362
 8005394:	20000386 	.word	0x20000386
 8005398:	2000032c 	.word	0x2000032c
 800539c:	20000330 	.word	0x20000330
 80053a0:	20000383 	.word	0x20000383
 80053a4:	200008a0 	.word	0x200008a0
 80053a8:	20000cb4 	.word	0x20000cb4
 80053ac:	20001254 	.word	0x20001254
 80053b0:	20000cac 	.word	0x20000cac
 80053b4:	200008e8 	.word	0x200008e8
 80053b8:	20000c20 	.word	0x20000c20
 80053bc:	2000032a 	.word	0x2000032a
 80053c0:	2000105c 	.word	0x2000105c
 80053c4:	20000ca8 	.word	0x20000ca8
 80053c8:	2000089c 	.word	0x2000089c
 80053cc:	20001234 	.word	0x20001234
 80053d0:	20001250 	.word	0x20001250
 80053d4:	20000480 	.word	0x20000480
				  {
					  lat_error_over_time[i] = 0;
 80053d8:	4a91      	ldr	r2, [pc, #580]	; (8005620 <main+0xb88>)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4413      	add	r3, r2
 80053e0:	f04f 0200 	mov.w	r2, #0
 80053e4:	601a      	str	r2, [r3, #0]
					  lon_error_over_time[i] = 0;
 80053e6:	4a8f      	ldr	r2, [pc, #572]	; (8005624 <main+0xb8c>)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	4413      	add	r3, r2
 80053ee:	f04f 0200 	mov.w	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]
				  for(int i = 0; i < 40; i++)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3301      	adds	r3, #1
 80053f8:	607b      	str	r3, [r7, #4]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b27      	cmp	r3, #39	; 0x27
 80053fe:	ddeb      	ble.n	80053d8 <main+0x940>
				  }
			  }

			  if((GetMicrosDifference(&gps_pid_timer) >= 10000 && gps_pid_counter < 19) || new_gps_data)
 8005400:	4889      	ldr	r0, [pc, #548]	; (8005628 <main+0xb90>)
 8005402:	f000 fabb 	bl	800597c <GetMicrosDifference>
 8005406:	4602      	mov	r2, r0
 8005408:	f242 730f 	movw	r3, #9999	; 0x270f
 800540c:	429a      	cmp	r2, r3
 800540e:	d903      	bls.n	8005418 <main+0x980>
 8005410:	4b86      	ldr	r3, [pc, #536]	; (800562c <main+0xb94>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b12      	cmp	r3, #18
 8005416:	d903      	bls.n	8005420 <main+0x988>
 8005418:	4b85      	ldr	r3, [pc, #532]	; (8005630 <main+0xb98>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d02c      	beq.n	800547a <main+0x9e2>
			  {
				  gps_pid_timer = GetMicros();
 8005420:	f000 fa80 	bl	8005924 <GetMicros>
 8005424:	4602      	mov	r2, r0
 8005426:	4b80      	ldr	r3, [pc, #512]	; (8005628 <main+0xb90>)
 8005428:	601a      	str	r2, [r3, #0]

				  if(!new_gps_data)
 800542a:	4b81      	ldr	r3, [pc, #516]	; (8005630 <main+0xb98>)
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d11b      	bne.n	800546a <main+0x9d2>
				  {
					  gps_pid_counter++;
 8005432:	4b7e      	ldr	r3, [pc, #504]	; (800562c <main+0xb94>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	3301      	adds	r3, #1
 8005438:	4a7c      	ldr	r2, [pc, #496]	; (800562c <main+0xb94>)
 800543a:	6013      	str	r3, [r2, #0]

					  calculated_lat_error += lat_add;
 800543c:	4b7d      	ldr	r3, [pc, #500]	; (8005634 <main+0xb9c>)
 800543e:	ed93 7a00 	vldr	s14, [r3]
 8005442:	4b7d      	ldr	r3, [pc, #500]	; (8005638 <main+0xba0>)
 8005444:	edd3 7a00 	vldr	s15, [r3]
 8005448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800544c:	4b79      	ldr	r3, [pc, #484]	; (8005634 <main+0xb9c>)
 800544e:	edc3 7a00 	vstr	s15, [r3]
					  calculated_lon_error -= lon_add;
 8005452:	4b7a      	ldr	r3, [pc, #488]	; (800563c <main+0xba4>)
 8005454:	ed93 7a00 	vldr	s14, [r3]
 8005458:	4b79      	ldr	r3, [pc, #484]	; (8005640 <main+0xba8>)
 800545a:	edd3 7a00 	vldr	s15, [r3]
 800545e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005462:	4b76      	ldr	r3, [pc, #472]	; (800563c <main+0xba4>)
 8005464:	edc3 7a00 	vstr	s15, [r3]
 8005468:	e005      	b.n	8005476 <main+0x9de>
				  }
				  else
				  {
					  gps_pid_counter = 0;
 800546a:	4b70      	ldr	r3, [pc, #448]	; (800562c <main+0xb94>)
 800546c:	2200      	movs	r2, #0
 800546e:	601a      	str	r2, [r3, #0]
					  new_gps_data = 0;
 8005470:	4b6f      	ldr	r3, [pc, #444]	; (8005630 <main+0xb98>)
 8005472:	2200      	movs	r2, #0
 8005474:	701a      	strb	r2, [r3, #0]
				  }

				  GPS_PID();
 8005476:	f7fe f84f 	bl	8003518 <GPS_PID>
			  }
		  }

		  last_gps_hold_flag = gps_hold_flag;
 800547a:	4b72      	ldr	r3, [pc, #456]	; (8005644 <main+0xbac>)
 800547c:	781a      	ldrb	r2, [r3, #0]
 800547e:	4b72      	ldr	r3, [pc, #456]	; (8005648 <main+0xbb0>)
 8005480:	701a      	strb	r2, [r3, #0]

		  Calculate_Altitude_Filter();
 8005482:	f7fd fdf1 	bl	8003068 <Calculate_Altitude_Filter>

		  if((main_cycle_counter + 1) % 10 == 0)
 8005486:	4b71      	ldr	r3, [pc, #452]	; (800564c <main+0xbb4>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	1c59      	adds	r1, r3, #1
 800548c:	4b70      	ldr	r3, [pc, #448]	; (8005650 <main+0xbb8>)
 800548e:	fba3 2301 	umull	r2, r3, r3, r1
 8005492:	08da      	lsrs	r2, r3, #3
 8005494:	4613      	mov	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	1aca      	subs	r2, r1, r3
 800549e:	2a00      	cmp	r2, #0
 80054a0:	f040 8089 	bne.w	80055b6 <main+0xb1e>
		  {
			  Read_Compass();
 80054a4:	f7fc fa00 	bl	80018a8 <Read_Compass>
			  Read_BMP280_PressureTemperature();
 80054a8:	f7fb fee2 	bl	8001270 <Read_BMP280_PressureTemperature>

			  if(altitude_hold_flag)
 80054ac:	4b69      	ldr	r3, [pc, #420]	; (8005654 <main+0xbbc>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d05d      	beq.n	8005570 <main+0xad8>
			  {
				  if(pid_current_altitude_setpoint > pid_altitude_setpoint + 0.06)
 80054b4:	4b68      	ldr	r3, [pc, #416]	; (8005658 <main+0xbc0>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7fb f845 	bl	8000548 <__aeabi_f2d>
 80054be:	4604      	mov	r4, r0
 80054c0:	460d      	mov	r5, r1
 80054c2:	4b66      	ldr	r3, [pc, #408]	; (800565c <main+0xbc4>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fb f83e 	bl	8000548 <__aeabi_f2d>
 80054cc:	a350      	add	r3, pc, #320	; (adr r3, 8005610 <main+0xb78>)
 80054ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d2:	f7fa fedb 	bl	800028c <__adddf3>
 80054d6:	4602      	mov	r2, r0
 80054d8:	460b      	mov	r3, r1
 80054da:	4620      	mov	r0, r4
 80054dc:	4629      	mov	r1, r5
 80054de:	f7fb fb1b 	bl	8000b18 <__aeabi_dcmpgt>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d013      	beq.n	8005510 <main+0xa78>
				  {
					  pid_current_altitude_setpoint -= 0.01;	//1 m/s
 80054e8:	4b5b      	ldr	r3, [pc, #364]	; (8005658 <main+0xbc0>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7fb f82b 	bl	8000548 <__aeabi_f2d>
 80054f2:	a349      	add	r3, pc, #292	; (adr r3, 8005618 <main+0xb80>)
 80054f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f8:	f7fa fec6 	bl	8000288 <__aeabi_dsub>
 80054fc:	4603      	mov	r3, r0
 80054fe:	460c      	mov	r4, r1
 8005500:	4618      	mov	r0, r3
 8005502:	4621      	mov	r1, r4
 8005504:	f7fb fb50 	bl	8000ba8 <__aeabi_d2f>
 8005508:	4602      	mov	r2, r0
 800550a:	4b53      	ldr	r3, [pc, #332]	; (8005658 <main+0xbc0>)
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	e02c      	b.n	800556a <main+0xad2>
				  }
				  else if(pid_current_altitude_setpoint < pid_altitude_setpoint - 0.06)
 8005510:	4b51      	ldr	r3, [pc, #324]	; (8005658 <main+0xbc0>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4618      	mov	r0, r3
 8005516:	f7fb f817 	bl	8000548 <__aeabi_f2d>
 800551a:	4604      	mov	r4, r0
 800551c:	460d      	mov	r5, r1
 800551e:	4b4f      	ldr	r3, [pc, #316]	; (800565c <main+0xbc4>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4618      	mov	r0, r3
 8005524:	f7fb f810 	bl	8000548 <__aeabi_f2d>
 8005528:	a339      	add	r3, pc, #228	; (adr r3, 8005610 <main+0xb78>)
 800552a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552e:	f7fa feab 	bl	8000288 <__aeabi_dsub>
 8005532:	4602      	mov	r2, r0
 8005534:	460b      	mov	r3, r1
 8005536:	4620      	mov	r0, r4
 8005538:	4629      	mov	r1, r5
 800553a:	f7fb facf 	bl	8000adc <__aeabi_dcmplt>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d012      	beq.n	800556a <main+0xad2>
				  {
					  pid_current_altitude_setpoint += 0.01;	//1 m/s
 8005544:	4b44      	ldr	r3, [pc, #272]	; (8005658 <main+0xbc0>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4618      	mov	r0, r3
 800554a:	f7fa fffd 	bl	8000548 <__aeabi_f2d>
 800554e:	a332      	add	r3, pc, #200	; (adr r3, 8005618 <main+0xb80>)
 8005550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005554:	f7fa fe9a 	bl	800028c <__adddf3>
 8005558:	4603      	mov	r3, r0
 800555a:	460c      	mov	r4, r1
 800555c:	4618      	mov	r0, r3
 800555e:	4621      	mov	r1, r4
 8005560:	f7fb fb22 	bl	8000ba8 <__aeabi_d2f>
 8005564:	4602      	mov	r2, r0
 8005566:	4b3c      	ldr	r3, [pc, #240]	; (8005658 <main+0xbc0>)
 8005568:	601a      	str	r2, [r3, #0]
				  }
				  //else
					//  pid_current_altitude_setpoint = pid_altitude_setpoint;

				  Calculate_Altitude_PID();
 800556a:	f7fd fed9 	bl	8003320 <Calculate_Altitude_PID>
 800556e:	e022      	b.n	80055b6 <main+0xb1e>
			  }
			  else
			  {
				  for(int i = 0; i < 20; i++)
 8005570:	2300      	movs	r3, #0
 8005572:	603b      	str	r3, [r7, #0]
 8005574:	e00a      	b.n	800558c <main+0xaf4>
				  {
					  pid_altitude_over_time[pid_altitude_over_time_reading_index] = 0;
 8005576:	4b3a      	ldr	r3, [pc, #232]	; (8005660 <main+0xbc8>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	4a3a      	ldr	r2, [pc, #232]	; (8005664 <main+0xbcc>)
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4413      	add	r3, r2
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	601a      	str	r2, [r3, #0]
				  for(int i = 0; i < 20; i++)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	3301      	adds	r3, #1
 800558a:	603b      	str	r3, [r7, #0]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	2b13      	cmp	r3, #19
 8005590:	ddf1      	ble.n	8005576 <main+0xade>
				  }

				  pid_altitude_over_time_reading_index = 0;
 8005592:	4b33      	ldr	r3, [pc, #204]	; (8005660 <main+0xbc8>)
 8005594:	2200      	movs	r2, #0
 8005596:	701a      	strb	r2, [r3, #0]
				  pid_altitude_over_time_total = 0;
 8005598:	4b33      	ldr	r3, [pc, #204]	; (8005668 <main+0xbd0>)
 800559a:	f04f 0200 	mov.w	r2, #0
 800559e:	601a      	str	r2, [r3, #0]
				  altitude_pid_output = 0;
 80055a0:	4b32      	ldr	r3, [pc, #200]	; (800566c <main+0xbd4>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	601a      	str	r2, [r3, #0]
				  pid_alt_last_error = 0;
 80055a6:	4b32      	ldr	r3, [pc, #200]	; (8005670 <main+0xbd8>)
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	601a      	str	r2, [r3, #0]
				  pid_alt_i = 0;
 80055ae:	4b31      	ldr	r3, [pc, #196]	; (8005674 <main+0xbdc>)
 80055b0:	f04f 0200 	mov.w	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
			  }
		  }

		  Read_IMU(0);
 80055b6:	2000      	movs	r0, #0
 80055b8:	f7ff f9a6 	bl	8004908 <Read_IMU>
		  Calculate_Attitude();
 80055bc:	f7fc fe44 	bl	8002248 <Calculate_Attitude>
		  //uint8_t test_temp_buf[32];
		  //sprintf((char *)test_temp_buf, "%hd%s", raw_gyro_acc_data[0], "\n");
		  //CDC_Transmit_FS(test_temp_buf, strlen((char *)test_temp_buf));
		  //Calculate all motors values, then immediately output them using oneshot125
		  Motor_PID();
 80055c0:	f7fd f90e 	bl	80027e0 <Motor_PID>
		  Calculate_Motor_Outputs();
 80055c4:	f7fd fc1c 	bl	8002e00 <Calculate_Motor_Outputs>

		  __HAL_TIM_SET_COUNTER(&htim8, 3999);
 80055c8:	4b2b      	ldr	r3, [pc, #172]	; (8005678 <main+0xbe0>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f640 729f 	movw	r2, #3999	; 0xf9f
 80055d0:	625a      	str	r2, [r3, #36]	; 0x24

		  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, esc1_output);
 80055d2:	4b2a      	ldr	r3, [pc, #168]	; (800567c <main+0xbe4>)
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	4b28      	ldr	r3, [pc, #160]	; (8005678 <main+0xbe0>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	641a      	str	r2, [r3, #64]	; 0x40
		  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, esc2_output);
 80055dc:	4b28      	ldr	r3, [pc, #160]	; (8005680 <main+0xbe8>)
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	4b25      	ldr	r3, [pc, #148]	; (8005678 <main+0xbe0>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, esc3_output);
 80055e6:	4b27      	ldr	r3, [pc, #156]	; (8005684 <main+0xbec>)
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	4b23      	ldr	r3, [pc, #140]	; (8005678 <main+0xbe0>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, esc4_output);
 80055f0:	4b25      	ldr	r3, [pc, #148]	; (8005688 <main+0xbf0>)
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	4b20      	ldr	r3, [pc, #128]	; (8005678 <main+0xbe0>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	635a      	str	r2, [r3, #52]	; 0x34

		  main_cycle_counter++;
 80055fa:	4b14      	ldr	r3, [pc, #80]	; (800564c <main+0xbb4>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3301      	adds	r3, #1
 8005600:	4a12      	ldr	r2, [pc, #72]	; (800564c <main+0xbb4>)
 8005602:	6013      	str	r3, [r2, #0]
	  }

	  telem_loop();
 8005604:	f000 fb9c 	bl	8005d40 <telem_loop>
	  if(ppm_channels[4] < 1600)
 8005608:	e4d8      	b.n	8004fbc <main+0x524>
 800560a:	bf00      	nop
 800560c:	f3af 8000 	nop.w
 8005610:	eb851eb8 	.word	0xeb851eb8
 8005614:	3faeb851 	.word	0x3faeb851
 8005618:	47ae147b 	.word	0x47ae147b
 800561c:	3f847ae1 	.word	0x3f847ae1
 8005620:	20001144 	.word	0x20001144
 8005624:	2000107c 	.word	0x2000107c
 8005628:	2000218c 	.word	0x2000218c
 800562c:	2000037c 	.word	0x2000037c
 8005630:	20000328 	.word	0x20000328
 8005634:	200008a0 	.word	0x200008a0
 8005638:	20001254 	.word	0x20001254
 800563c:	20000cb4 	.word	0x20000cb4
 8005640:	20000cac 	.word	0x20000cac
 8005644:	20000382 	.word	0x20000382
 8005648:	20000383 	.word	0x20000383
 800564c:	20000378 	.word	0x20000378
 8005650:	cccccccd 	.word	0xcccccccd
 8005654:	20000381 	.word	0x20000381
 8005658:	20000020 	.word	0x20000020
 800565c:	20000024 	.word	0x20000024
 8005660:	200002fc 	.word	0x200002fc
 8005664:	20000488 	.word	0x20000488
 8005668:	200002f8 	.word	0x200002f8
 800566c:	200002e0 	.word	0x200002e0
 8005670:	200002dc 	.word	0x200002dc
 8005674:	200002f4 	.word	0x200002f4
 8005678:	20003d2c 	.word	0x20003d2c
 800567c:	2000000c 	.word	0x2000000c
 8005680:	20000010 	.word	0x20000010
 8005684:	20000014 	.word	0x20000014
 8005688:	20000018 	.word	0x20000018

0800568c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b098      	sub	sp, #96	; 0x60
 8005690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005692:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005696:	2230      	movs	r2, #48	; 0x30
 8005698:	2100      	movs	r1, #0
 800569a:	4618      	mov	r0, r3
 800569c:	f00f fac5 	bl	8014c2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80056a0:	f107 031c 	add.w	r3, r7, #28
 80056a4:	2200      	movs	r2, #0
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	605a      	str	r2, [r3, #4]
 80056aa:	609a      	str	r2, [r3, #8]
 80056ac:	60da      	str	r2, [r3, #12]
 80056ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80056b0:	f107 030c 	add.w	r3, r7, #12
 80056b4:	2200      	movs	r2, #0
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	605a      	str	r2, [r3, #4]
 80056ba:	609a      	str	r2, [r3, #8]
 80056bc:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80056be:	2300      	movs	r3, #0
 80056c0:	60bb      	str	r3, [r7, #8]
 80056c2:	4b31      	ldr	r3, [pc, #196]	; (8005788 <SystemClock_Config+0xfc>)
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	4a30      	ldr	r2, [pc, #192]	; (8005788 <SystemClock_Config+0xfc>)
 80056c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056cc:	6413      	str	r3, [r2, #64]	; 0x40
 80056ce:	4b2e      	ldr	r3, [pc, #184]	; (8005788 <SystemClock_Config+0xfc>)
 80056d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056d6:	60bb      	str	r3, [r7, #8]
 80056d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80056da:	2300      	movs	r3, #0
 80056dc:	607b      	str	r3, [r7, #4]
 80056de:	4b2b      	ldr	r3, [pc, #172]	; (800578c <SystemClock_Config+0x100>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a2a      	ldr	r2, [pc, #168]	; (800578c <SystemClock_Config+0x100>)
 80056e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	4b28      	ldr	r3, [pc, #160]	; (800578c <SystemClock_Config+0x100>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056f2:	607b      	str	r3, [r7, #4]
 80056f4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80056f6:	2309      	movs	r3, #9
 80056f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80056fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80056fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8005700:	2301      	movs	r3, #1
 8005702:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005704:	2302      	movs	r3, #2
 8005706:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005708:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800570c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800570e:	2310      	movs	r3, #16
 8005710:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8005712:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8005716:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005718:	2302      	movs	r3, #2
 800571a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800571c:	2307      	movs	r3, #7
 800571e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005720:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005724:	4618      	mov	r0, r3
 8005726:	f006 ffab 	bl	800c680 <HAL_RCC_OscConfig>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d001      	beq.n	8005734 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8005730:	f000 f9b0 	bl	8005a94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005734:	230f      	movs	r3, #15
 8005736:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005738:	2302      	movs	r3, #2
 800573a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800573c:	2300      	movs	r3, #0
 800573e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005740:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005744:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800574a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800574c:	f107 031c 	add.w	r3, r7, #28
 8005750:	2105      	movs	r1, #5
 8005752:	4618      	mov	r0, r3
 8005754:	f007 fa04 	bl	800cb60 <HAL_RCC_ClockConfig>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d001      	beq.n	8005762 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800575e:	f000 f999 	bl	8005a94 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005762:	2302      	movs	r3, #2
 8005764:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8005766:	f44f 7300 	mov.w	r3, #512	; 0x200
 800576a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800576c:	f107 030c 	add.w	r3, r7, #12
 8005770:	4618      	mov	r0, r3
 8005772:	f007 fbd1 	bl	800cf18 <HAL_RCCEx_PeriphCLKConfig>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800577c:	f000 f98a 	bl	8005a94 <Error_Handler>
  }
}
 8005780:	bf00      	nop
 8005782:	3760      	adds	r7, #96	; 0x60
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	40023800 	.word	0x40023800
 800578c:	40007000 	.word	0x40007000

08005790 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a4e      	ldr	r2, [pc, #312]	; (80058d4 <HAL_TIM_IC_CaptureCallback+0x144>)
 800579c:	4293      	cmp	r3, r2
 800579e:	f040 8095 	bne.w	80058cc <HAL_TIM_IC_CaptureCallback+0x13c>
	{
		current_ppm_capture = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1);
 80057a2:	2100      	movs	r1, #0
 80057a4:	484b      	ldr	r0, [pc, #300]	; (80058d4 <HAL_TIM_IC_CaptureCallback+0x144>)
 80057a6:	f008 f9f7 	bl	800db98 <HAL_TIM_ReadCapturedValue>
 80057aa:	4602      	mov	r2, r0
 80057ac:	4b4a      	ldr	r3, [pc, #296]	; (80058d8 <HAL_TIM_IC_CaptureCallback+0x148>)
 80057ae:	601a      	str	r2, [r3, #0]

		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 80057b0:	2101      	movs	r1, #1
 80057b2:	484a      	ldr	r0, [pc, #296]	; (80058dc <HAL_TIM_IC_CaptureCallback+0x14c>)
 80057b4:	f003 f854 	bl	8008860 <HAL_GPIO_ReadPin>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d014      	beq.n	80057e8 <HAL_TIM_IC_CaptureCallback+0x58>
		{
			last_ppm_capture = current_ppm_capture;
 80057be:	4b46      	ldr	r3, [pc, #280]	; (80058d8 <HAL_TIM_IC_CaptureCallback+0x148>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a47      	ldr	r2, [pc, #284]	; (80058e0 <HAL_TIM_IC_CaptureCallback+0x150>)
 80057c4:	6013      	str	r3, [r2, #0]

			//&htim3->Instance->CCER |= TIM_CCER_CC1P;
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80057c6:	4b43      	ldr	r3, [pc, #268]	; (80058d4 <HAL_TIM_IC_CaptureCallback+0x144>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6a1a      	ldr	r2, [r3, #32]
 80057cc:	4b41      	ldr	r3, [pc, #260]	; (80058d4 <HAL_TIM_IC_CaptureCallback+0x144>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 020a 	bic.w	r2, r2, #10
 80057d4:	621a      	str	r2, [r3, #32]
 80057d6:	4b3f      	ldr	r3, [pc, #252]	; (80058d4 <HAL_TIM_IC_CaptureCallback+0x144>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6a1a      	ldr	r2, [r3, #32]
 80057dc:	4b3d      	ldr	r3, [pc, #244]	; (80058d4 <HAL_TIM_IC_CaptureCallback+0x144>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f042 0202 	orr.w	r2, r2, #2
 80057e4:	621a      	str	r2, [r3, #32]
			}

			__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
		}
	}
}
 80057e6:	e071      	b.n	80058cc <HAL_TIM_IC_CaptureCallback+0x13c>
			if (current_ppm_capture > last_ppm_capture)
 80057e8:	4b3b      	ldr	r3, [pc, #236]	; (80058d8 <HAL_TIM_IC_CaptureCallback+0x148>)
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	4b3c      	ldr	r3, [pc, #240]	; (80058e0 <HAL_TIM_IC_CaptureCallback+0x150>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d907      	bls.n	8005804 <HAL_TIM_IC_CaptureCallback+0x74>
				frequency_read = current_ppm_capture - last_ppm_capture;
 80057f4:	4b38      	ldr	r3, [pc, #224]	; (80058d8 <HAL_TIM_IC_CaptureCallback+0x148>)
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	4b39      	ldr	r3, [pc, #228]	; (80058e0 <HAL_TIM_IC_CaptureCallback+0x150>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	4a39      	ldr	r2, [pc, #228]	; (80058e4 <HAL_TIM_IC_CaptureCallback+0x154>)
 8005800:	6013      	str	r3, [r2, #0]
 8005802:	e00d      	b.n	8005820 <HAL_TIM_IC_CaptureCallback+0x90>
			else if (current_ppm_capture <= last_ppm_capture)
 8005804:	4b34      	ldr	r3, [pc, #208]	; (80058d8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	4b35      	ldr	r3, [pc, #212]	; (80058e0 <HAL_TIM_IC_CaptureCallback+0x150>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	429a      	cmp	r2, r3
 800580e:	d807      	bhi.n	8005820 <HAL_TIM_IC_CaptureCallback+0x90>
				frequency_read = 0xFFFFFFFF + current_ppm_capture - last_ppm_capture;
 8005810:	4b31      	ldr	r3, [pc, #196]	; (80058d8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	4b32      	ldr	r3, [pc, #200]	; (80058e0 <HAL_TIM_IC_CaptureCallback+0x150>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	3b01      	subs	r3, #1
 800581c:	4a31      	ldr	r2, [pc, #196]	; (80058e4 <HAL_TIM_IC_CaptureCallback+0x154>)
 800581e:	6013      	str	r3, [r2, #0]
			if(frequency_read > 3000)
 8005820:	4b30      	ldr	r3, [pc, #192]	; (80058e4 <HAL_TIM_IC_CaptureCallback+0x154>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8005828:	4293      	cmp	r3, r2
 800582a:	d903      	bls.n	8005834 <HAL_TIM_IC_CaptureCallback+0xa4>
				current_ppm_channel = 0;
 800582c:	4b2e      	ldr	r3, [pc, #184]	; (80058e8 <HAL_TIM_IC_CaptureCallback+0x158>)
 800582e:	2200      	movs	r2, #0
 8005830:	701a      	strb	r2, [r3, #0]
 8005832:	e006      	b.n	8005842 <HAL_TIM_IC_CaptureCallback+0xb2>
				current_ppm_channel++;
 8005834:	4b2c      	ldr	r3, [pc, #176]	; (80058e8 <HAL_TIM_IC_CaptureCallback+0x158>)
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	b2db      	uxtb	r3, r3
 800583a:	3301      	adds	r3, #1
 800583c:	b2da      	uxtb	r2, r3
 800583e:	4b2a      	ldr	r3, [pc, #168]	; (80058e8 <HAL_TIM_IC_CaptureCallback+0x158>)
 8005840:	701a      	strb	r2, [r3, #0]
			if(frequency_read > test_max_frequency)
 8005842:	4b28      	ldr	r3, [pc, #160]	; (80058e4 <HAL_TIM_IC_CaptureCallback+0x154>)
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	4b29      	ldr	r3, [pc, #164]	; (80058ec <HAL_TIM_IC_CaptureCallback+0x15c>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	429a      	cmp	r2, r3
 800584c:	d903      	bls.n	8005856 <HAL_TIM_IC_CaptureCallback+0xc6>
				test_max_frequency = frequency_read;
 800584e:	4b25      	ldr	r3, [pc, #148]	; (80058e4 <HAL_TIM_IC_CaptureCallback+0x154>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a26      	ldr	r2, [pc, #152]	; (80058ec <HAL_TIM_IC_CaptureCallback+0x15c>)
 8005854:	6013      	str	r3, [r2, #0]
			frequency_read += 400;
 8005856:	4b23      	ldr	r3, [pc, #140]	; (80058e4 <HAL_TIM_IC_CaptureCallback+0x154>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800585e:	4a21      	ldr	r2, [pc, #132]	; (80058e4 <HAL_TIM_IC_CaptureCallback+0x154>)
 8005860:	6013      	str	r3, [r2, #0]
			if(frequency_read < 1000)
 8005862:	4b20      	ldr	r3, [pc, #128]	; (80058e4 <HAL_TIM_IC_CaptureCallback+0x154>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800586a:	d204      	bcs.n	8005876 <HAL_TIM_IC_CaptureCallback+0xe6>
				frequency_read = 1000;
 800586c:	4b1d      	ldr	r3, [pc, #116]	; (80058e4 <HAL_TIM_IC_CaptureCallback+0x154>)
 800586e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	e008      	b.n	8005888 <HAL_TIM_IC_CaptureCallback+0xf8>
			else if(frequency_read > 2000)
 8005876:	4b1b      	ldr	r3, [pc, #108]	; (80058e4 <HAL_TIM_IC_CaptureCallback+0x154>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800587e:	d903      	bls.n	8005888 <HAL_TIM_IC_CaptureCallback+0xf8>
				frequency_read = 2000;
 8005880:	4b18      	ldr	r3, [pc, #96]	; (80058e4 <HAL_TIM_IC_CaptureCallback+0x154>)
 8005882:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005886:	601a      	str	r2, [r3, #0]
			if(current_ppm_channel >= 1 && current_ppm_channel <= 6)
 8005888:	4b17      	ldr	r3, [pc, #92]	; (80058e8 <HAL_TIM_IC_CaptureCallback+0x158>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00e      	beq.n	80058b0 <HAL_TIM_IC_CaptureCallback+0x120>
 8005892:	4b15      	ldr	r3, [pc, #84]	; (80058e8 <HAL_TIM_IC_CaptureCallback+0x158>)
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b06      	cmp	r3, #6
 800589a:	d809      	bhi.n	80058b0 <HAL_TIM_IC_CaptureCallback+0x120>
				ppm_channels[current_ppm_channel - 1] = frequency_read;
 800589c:	4b11      	ldr	r3, [pc, #68]	; (80058e4 <HAL_TIM_IC_CaptureCallback+0x154>)
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	4b11      	ldr	r3, [pc, #68]	; (80058e8 <HAL_TIM_IC_CaptureCallback+0x158>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	3b01      	subs	r3, #1
 80058a8:	4611      	mov	r1, r2
 80058aa:	4a11      	ldr	r2, [pc, #68]	; (80058f0 <HAL_TIM_IC_CaptureCallback+0x160>)
 80058ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80058b0:	4b08      	ldr	r3, [pc, #32]	; (80058d4 <HAL_TIM_IC_CaptureCallback+0x144>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6a1a      	ldr	r2, [r3, #32]
 80058b6:	4b07      	ldr	r3, [pc, #28]	; (80058d4 <HAL_TIM_IC_CaptureCallback+0x144>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 020a 	bic.w	r2, r2, #10
 80058be:	621a      	str	r2, [r3, #32]
 80058c0:	4b04      	ldr	r3, [pc, #16]	; (80058d4 <HAL_TIM_IC_CaptureCallback+0x144>)
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	4b03      	ldr	r3, [pc, #12]	; (80058d4 <HAL_TIM_IC_CaptureCallback+0x144>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6a12      	ldr	r2, [r2, #32]
 80058ca:	621a      	str	r2, [r3, #32]
}
 80058cc:	bf00      	nop
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	20003d6c 	.word	0x20003d6c
 80058d8:	20000368 	.word	0x20000368
 80058dc:	40020000 	.word	0x40020000
 80058e0:	2000036c 	.word	0x2000036c
 80058e4:	20000068 	.word	0x20000068
 80058e8:	20000370 	.word	0x20000370
 80058ec:	20000374 	.word	0x20000374
 80058f0:	200021c8 	.word	0x200021c8

080058f4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
	if(htim == &htim9)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a07      	ldr	r2, [pc, #28]	; (800591c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d104      	bne.n	800590e <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		//micros_timer_base += 65000;//65536;
		millis_timer_base += 65;//Overflow doesn't matter unless board is running for more than 49 days
 8005904:	4b06      	ldr	r3, [pc, #24]	; (8005920 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	3341      	adds	r3, #65	; 0x41
 800590a:	4a05      	ldr	r2, [pc, #20]	; (8005920 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800590c:	6013      	str	r3, [r2, #0]
	}
}
 800590e:	bf00      	nop
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	20003dec 	.word	0x20003dec
 8005920:	200021e4 	.word	0x200021e4

08005924 <GetMicros>:

uint32_t GetMicros()
{
 8005924:	b480      	push	{r7}
 8005926:	af00      	add	r7, sp, #0
	//return micros_timer_base + __HAL_TIM_GET_COUNTER(&htim4);
	return __HAL_TIM_GET_COUNTER(&htim9);
 8005928:	4b03      	ldr	r3, [pc, #12]	; (8005938 <GetMicros+0x14>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800592e:	4618      	mov	r0, r3
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	20003dec 	.word	0x20003dec

0800593c <GetMillis>:

uint32_t GetMillis()
{
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0
	return millis_timer_base + (GetMicros() / 1000);
 8005940:	f7ff fff0 	bl	8005924 <GetMicros>
 8005944:	4602      	mov	r2, r0
 8005946:	4b04      	ldr	r3, [pc, #16]	; (8005958 <GetMillis+0x1c>)
 8005948:	fba3 2302 	umull	r2, r3, r3, r2
 800594c:	099a      	lsrs	r2, r3, #6
 800594e:	4b03      	ldr	r3, [pc, #12]	; (800595c <GetMillis+0x20>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4413      	add	r3, r2
}
 8005954:	4618      	mov	r0, r3
 8005956:	bd80      	pop	{r7, pc}
 8005958:	10624dd3 	.word	0x10624dd3
 800595c:	200021e4 	.word	0x200021e4

08005960 <GetMillisDifference>:

uint32_t GetMillisDifference(uint32_t *timer_counter_to_use)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
	return GetMillis() - *timer_counter_to_use;
 8005968:	f7ff ffe8 	bl	800593c <GetMillis>
 800596c:	4602      	mov	r2, r0
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	1ad3      	subs	r3, r2, r3
}
 8005974:	4618      	mov	r0, r3
 8005976:	3708      	adds	r7, #8
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <GetMicrosDifference>:

uint32_t GetMicrosDifference(uint32_t *timer_counter_to_use)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
	uint32_t current_micros = GetMicros();
 8005984:	f7ff ffce 	bl	8005924 <GetMicros>
 8005988:	60b8      	str	r0, [r7, #8]
	uint32_t micros_difference = 0;
 800598a:	2300      	movs	r3, #0
 800598c:	60fb      	str	r3, [r7, #12]

	if(current_micros > *timer_counter_to_use)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	429a      	cmp	r2, r3
 8005996:	d905      	bls.n	80059a4 <GetMicrosDifference+0x28>
	{
		micros_difference = current_micros - *timer_counter_to_use;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	60fb      	str	r3, [r7, #12]
 80059a2:	e00c      	b.n	80059be <GetMicrosDifference+0x42>
	}
	else if(current_micros < *timer_counter_to_use)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d207      	bcs.n	80059be <GetMicrosDifference+0x42>
	{
		micros_difference = 65000 + current_micros - *timer_counter_to_use;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	f503 437d 	add.w	r3, r3, #64768	; 0xfd00
 80059ba:	33e8      	adds	r3, #232	; 0xe8
 80059bc:	60fb      	str	r3, [r7, #12]
	}

	return micros_difference;
 80059be:	68fb      	ldr	r3, [r7, #12]
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c2)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a06      	ldr	r2, [pc, #24]	; (8005a00 <HAL_I2C_MasterTxCpltCallback+0x24>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d102      	bne.n	80059f2 <HAL_I2C_MasterTxCpltCallback+0x16>
	{
		tx_done = 1;
 80059ec:	4b05      	ldr	r3, [pc, #20]	; (8005a04 <HAL_I2C_MasterTxCpltCallback+0x28>)
 80059ee:	2201      	movs	r2, #1
 80059f0:	701a      	strb	r2, [r3, #0]
	}
	else if(hi2c == &hi2c1)
	{

	}
}
 80059f2:	bf00      	nop
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	20001f4c 	.word	0x20001f4c
 8005a04:	200003b8 	.word	0x200003b8

08005a08 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c2)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a0c      	ldr	r2, [pc, #48]	; (8005a44 <HAL_I2C_MasterRxCpltCallback+0x3c>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d108      	bne.n	8005a2a <HAL_I2C_MasterRxCpltCallback+0x22>
	{
		rx_done = 1;
 8005a18:	4b0b      	ldr	r3, [pc, #44]	; (8005a48 <HAL_I2C_MasterRxCpltCallback+0x40>)
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	701a      	strb	r2, [r3, #0]
		acks_counted++;
 8005a1e:	4b0b      	ldr	r3, [pc, #44]	; (8005a4c <HAL_I2C_MasterRxCpltCallback+0x44>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	3301      	adds	r3, #1
 8005a24:	4a09      	ldr	r2, [pc, #36]	; (8005a4c <HAL_I2C_MasterRxCpltCallback+0x44>)
 8005a26:	6013      	str	r3, [r2, #0]
	}
	else if(hi2c == &hi2c1)
	{
		camera_receive_flag = 1;
	}
}
 8005a28:	e006      	b.n	8005a38 <HAL_I2C_MasterRxCpltCallback+0x30>
	else if(hi2c == &hi2c1)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a08      	ldr	r2, [pc, #32]	; (8005a50 <HAL_I2C_MasterRxCpltCallback+0x48>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d102      	bne.n	8005a38 <HAL_I2C_MasterRxCpltCallback+0x30>
		camera_receive_flag = 1;
 8005a32:	4b08      	ldr	r3, [pc, #32]	; (8005a54 <HAL_I2C_MasterRxCpltCallback+0x4c>)
 8005a34:	2201      	movs	r2, #1
 8005a36:	701a      	strb	r2, [r3, #0]
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	20001f4c 	.word	0x20001f4c
 8005a48:	200003b7 	.word	0x200003b7
 8005a4c:	20002254 	.word	0x20002254
 8005a50:	20001ef8 	.word	0x20001ef8
 8005a54:	20000387 	.word	0x20000387

08005a58 <HAL_I2C_AbortCpltCallback>:

void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c2)
	{
	}
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <HAL_I2C_ErrorCallback>:



void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
		else if((I2C1->SR1 & I2C_SR1_AF) != 0)//Ack fail
		{
			I2C1->SR1 &= ~(I2C_SR1_AF);
		}*/
	}
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_TIM_PWM_PulseFinishedCallback>:
    I2C1->CR1 |= I2C_CR1_STOP;
    //uint8_t data = I2C1->DR;
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]

}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005a94:	b480      	push	{r7}
 8005a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005a98:	bf00      	nop
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
	...

08005aa4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005aa8:	4b0f      	ldr	r3, [pc, #60]	; (8005ae8 <MX_RTC_Init+0x44>)
 8005aaa:	4a10      	ldr	r2, [pc, #64]	; (8005aec <MX_RTC_Init+0x48>)
 8005aac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005aae:	4b0e      	ldr	r3, [pc, #56]	; (8005ae8 <MX_RTC_Init+0x44>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8005ab4:	4b0c      	ldr	r3, [pc, #48]	; (8005ae8 <MX_RTC_Init+0x44>)
 8005ab6:	227f      	movs	r2, #127	; 0x7f
 8005ab8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8005aba:	4b0b      	ldr	r3, [pc, #44]	; (8005ae8 <MX_RTC_Init+0x44>)
 8005abc:	22ff      	movs	r2, #255	; 0xff
 8005abe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005ac0:	4b09      	ldr	r3, [pc, #36]	; (8005ae8 <MX_RTC_Init+0x44>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005ac6:	4b08      	ldr	r3, [pc, #32]	; (8005ae8 <MX_RTC_Init+0x44>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005acc:	4b06      	ldr	r3, [pc, #24]	; (8005ae8 <MX_RTC_Init+0x44>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005ad2:	4805      	ldr	r0, [pc, #20]	; (8005ae8 <MX_RTC_Init+0x44>)
 8005ad4:	f007 fb02 	bl	800d0dc <HAL_RTC_Init>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8005ade:	f7ff ffd9 	bl	8005a94 <Error_Handler>
  }

}
 8005ae2:	bf00      	nop
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	20002214 	.word	0x20002214
 8005aec:	40002800 	.word	0x40002800

08005af0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a05      	ldr	r2, [pc, #20]	; (8005b14 <HAL_RTC_MspInit+0x24>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d102      	bne.n	8005b08 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005b02:	4b05      	ldr	r3, [pc, #20]	; (8005b18 <HAL_RTC_MspInit+0x28>)
 8005b04:	2201      	movs	r2, #1
 8005b06:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr
 8005b14:	40002800 	.word	0x40002800
 8005b18:	42470e3c 	.word	0x42470e3c

08005b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b22:	2300      	movs	r3, #0
 8005b24:	607b      	str	r3, [r7, #4]
 8005b26:	4b10      	ldr	r3, [pc, #64]	; (8005b68 <HAL_MspInit+0x4c>)
 8005b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b2a:	4a0f      	ldr	r2, [pc, #60]	; (8005b68 <HAL_MspInit+0x4c>)
 8005b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b30:	6453      	str	r3, [r2, #68]	; 0x44
 8005b32:	4b0d      	ldr	r3, [pc, #52]	; (8005b68 <HAL_MspInit+0x4c>)
 8005b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b3a:	607b      	str	r3, [r7, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b3e:	2300      	movs	r3, #0
 8005b40:	603b      	str	r3, [r7, #0]
 8005b42:	4b09      	ldr	r3, [pc, #36]	; (8005b68 <HAL_MspInit+0x4c>)
 8005b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b46:	4a08      	ldr	r2, [pc, #32]	; (8005b68 <HAL_MspInit+0x4c>)
 8005b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8005b4e:	4b06      	ldr	r3, [pc, #24]	; (8005b68 <HAL_MspInit+0x4c>)
 8005b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b56:	603b      	str	r3, [r7, #0]
 8005b58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b5a:	bf00      	nop
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	40023800 	.word	0x40023800

08005b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005b70:	bf00      	nop
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b7e:	e7fe      	b.n	8005b7e <HardFault_Handler+0x4>

08005b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b80:	b480      	push	{r7}
 8005b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b84:	e7fe      	b.n	8005b84 <MemManage_Handler+0x4>

08005b86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b86:	b480      	push	{r7}
 8005b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b8a:	e7fe      	b.n	8005b8a <BusFault_Handler+0x4>

08005b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b90:	e7fe      	b.n	8005b90 <UsageFault_Handler+0x4>

08005b92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005b92:	b480      	push	{r7}
 8005b94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005b96:	bf00      	nop
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005ba4:	bf00      	nop
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005bb2:	bf00      	nop
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005bc0:	f002 f848 	bl	8007c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005bc4:	bf00      	nop
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005bcc:	4802      	ldr	r0, [pc, #8]	; (8005bd8 <DMA1_Stream0_IRQHandler+0x10>)
 8005bce:	f002 fa65 	bl	800809c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005bd2:	bf00      	nop
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	20002060 	.word	0x20002060

08005bdc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8005be0:	4802      	ldr	r0, [pc, #8]	; (8005bec <DMA1_Stream3_IRQHandler+0x10>)
 8005be2:	f002 fa5b 	bl	800809c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005be6:	bf00      	nop
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	20001fa0 	.word	0x20001fa0

08005bf0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8005bf4:	4802      	ldr	r0, [pc, #8]	; (8005c00 <DMA1_Stream6_IRQHandler+0x10>)
 8005bf6:	f002 fa51 	bl	800809c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005bfa:	bf00      	nop
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	20001e98 	.word	0x20001e98

08005c04 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8005c08:	4802      	ldr	r0, [pc, #8]	; (8005c14 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8005c0a:	f007 fca3 	bl	800d554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8005c0e:	bf00      	nop
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	20003dec 	.word	0x20003dec

08005c18 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005c1c:	4802      	ldr	r0, [pc, #8]	; (8005c28 <I2C1_EV_IRQHandler+0x10>)
 8005c1e:	f003 fc7b 	bl	8009518 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005c22:	bf00      	nop
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	20001ef8 	.word	0x20001ef8

08005c2c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005c30:	4802      	ldr	r0, [pc, #8]	; (8005c3c <I2C1_ER_IRQHandler+0x10>)
 8005c32:	f003 fdd7 	bl	80097e4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8005c36:	bf00      	nop
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20001ef8 	.word	0x20001ef8

08005c40 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8005c44:	4802      	ldr	r0, [pc, #8]	; (8005c50 <I2C2_EV_IRQHandler+0x10>)
 8005c46:	f003 fc67 	bl	8009518 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8005c4a:	bf00      	nop
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	20001f4c 	.word	0x20001f4c

08005c54 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8005c58:	4802      	ldr	r0, [pc, #8]	; (8005c64 <I2C2_ER_IRQHandler+0x10>)
 8005c5a:	f003 fdc3 	bl	80097e4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8005c5e:	bf00      	nop
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	20001f4c 	.word	0x20001f4c

08005c68 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8005c6c:	4802      	ldr	r0, [pc, #8]	; (8005c78 <DMA1_Stream7_IRQHandler+0x10>)
 8005c6e:	f002 fa15 	bl	800809c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8005c72:	bf00      	nop
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	20002000 	.word	0x20002000

08005c7c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005c80:	4802      	ldr	r0, [pc, #8]	; (8005c8c <TIM5_IRQHandler+0x10>)
 8005c82:	f007 fc67 	bl	800d554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8005c86:	bf00      	nop
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	20003d6c 	.word	0x20003d6c

08005c90 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005c94:	4802      	ldr	r0, [pc, #8]	; (8005ca0 <OTG_FS_IRQHandler+0x10>)
 8005c96:	f005 fcc0 	bl	800b61a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005c9a:	bf00      	nop
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	20005300 	.word	0x20005300

08005ca4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005cac:	4a14      	ldr	r2, [pc, #80]	; (8005d00 <_sbrk+0x5c>)
 8005cae:	4b15      	ldr	r3, [pc, #84]	; (8005d04 <_sbrk+0x60>)
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005cb8:	4b13      	ldr	r3, [pc, #76]	; (8005d08 <_sbrk+0x64>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d102      	bne.n	8005cc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005cc0:	4b11      	ldr	r3, [pc, #68]	; (8005d08 <_sbrk+0x64>)
 8005cc2:	4a12      	ldr	r2, [pc, #72]	; (8005d0c <_sbrk+0x68>)
 8005cc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005cc6:	4b10      	ldr	r3, [pc, #64]	; (8005d08 <_sbrk+0x64>)
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4413      	add	r3, r2
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d207      	bcs.n	8005ce4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005cd4:	f00e ff64 	bl	8014ba0 <__errno>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	230c      	movs	r3, #12
 8005cdc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8005cde:	f04f 33ff 	mov.w	r3, #4294967295
 8005ce2:	e009      	b.n	8005cf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005ce4:	4b08      	ldr	r3, [pc, #32]	; (8005d08 <_sbrk+0x64>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005cea:	4b07      	ldr	r3, [pc, #28]	; (8005d08 <_sbrk+0x64>)
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	4a05      	ldr	r2, [pc, #20]	; (8005d08 <_sbrk+0x64>)
 8005cf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3718      	adds	r7, #24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	20020000 	.word	0x20020000
 8005d04:	00000400 	.word	0x00000400
 8005d08:	200003ac 	.word	0x200003ac
 8005d0c:	20005710 	.word	0x20005710

08005d10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005d10:	b480      	push	{r7}
 8005d12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005d14:	4b08      	ldr	r3, [pc, #32]	; (8005d38 <SystemInit+0x28>)
 8005d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d1a:	4a07      	ldr	r2, [pc, #28]	; (8005d38 <SystemInit+0x28>)
 8005d1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005d24:	4b04      	ldr	r3, [pc, #16]	; (8005d38 <SystemInit+0x28>)
 8005d26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005d2a:	609a      	str	r2, [r3, #8]
#endif
}
 8005d2c:	bf00      	nop
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	e000ed00 	.word	0xe000ed00
 8005d3c:	00000000 	.word	0x00000000

08005d40 <telem_loop>:

float coefficient_x = 0;
float coefficient_y = 0;

void telem_loop()
{
 8005d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d42:	b093      	sub	sp, #76	; 0x4c
 8005d44:	af02      	add	r7, sp, #8
	if(GetMillisDifference(&acks_per_second_timer) >= 1000)
 8005d46:	48cc      	ldr	r0, [pc, #816]	; (8006078 <telem_loop+0x338>)
 8005d48:	f7ff fe0a 	bl	8005960 <GetMillisDifference>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d52:	d30b      	bcc.n	8005d6c <telem_loop+0x2c>
	{
		acks_per_second_timer = GetMillis();
 8005d54:	f7ff fdf2 	bl	800593c <GetMillis>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	4bc7      	ldr	r3, [pc, #796]	; (8006078 <telem_loop+0x338>)
 8005d5c:	601a      	str	r2, [r3, #0]
		acks_per_second = acks_counted;
 8005d5e:	4bc7      	ldr	r3, [pc, #796]	; (800607c <telem_loop+0x33c>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4ac7      	ldr	r2, [pc, #796]	; (8006080 <telem_loop+0x340>)
 8005d64:	6013      	str	r3, [r2, #0]
		acks_counted = 0;
 8005d66:	4bc5      	ldr	r3, [pc, #788]	; (800607c <telem_loop+0x33c>)
 8005d68:	2200      	movs	r2, #0
 8005d6a:	601a      	str	r2, [r3, #0]
	}

	if(camera_telem && GetMicrosDifference(&camera_telem_timeout_timer) >= 4000)
 8005d6c:	4bc5      	ldr	r3, [pc, #788]	; (8006084 <telem_loop+0x344>)
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d009      	beq.n	8005d88 <telem_loop+0x48>
 8005d74:	48c4      	ldr	r0, [pc, #784]	; (8006088 <telem_loop+0x348>)
 8005d76:	f7ff fe01 	bl	800597c <GetMicrosDifference>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8005d80:	d302      	bcc.n	8005d88 <telem_loop+0x48>
	{
		camera_telem = 0;
 8005d82:	4bc0      	ldr	r3, [pc, #768]	; (8006084 <telem_loop+0x344>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	701a      	strb	r2, [r3, #0]
	}

	if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY)
 8005d88:	48c0      	ldr	r0, [pc, #768]	; (800608c <telem_loop+0x34c>)
 8005d8a:	f003 fe08 	bl	800999e <HAL_I2C_GetState>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b20      	cmp	r3, #32
 8005d92:	f041 8130 	bne.w	8006ff6 <telem_loop+0x12b6>
	{
		if(rx_done)
 8005d96:	4bbe      	ldr	r3, [pc, #760]	; (8006090 <telem_loop+0x350>)
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 8752 	beq.w	8006c46 <telem_loop+0xf06>
		{
			rx_done = 0;
 8005da2:	4bbb      	ldr	r3, [pc, #748]	; (8006090 <telem_loop+0x350>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	701a      	strb	r2, [r3, #0]
			ack_rate_counter = 0;
 8005da8:	4bba      	ldr	r3, [pc, #744]	; (8006094 <telem_loop+0x354>)
 8005daa:	2200      	movs	r2, #0
 8005dac:	701a      	strb	r2, [r3, #0]

			if(camera_telem)
 8005dae:	4bb5      	ldr	r3, [pc, #724]	; (8006084 <telem_loop+0x344>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f000 8263 	beq.w	800627e <telem_loop+0x53e>
			{
				camera_telem = 0;
 8005db8:	4bb2      	ldr	r3, [pc, #712]	; (8006084 <telem_loop+0x344>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	701a      	strb	r2, [r3, #0]

				if(optical_flow_flag)
 8005dbe:	4bb6      	ldr	r3, [pc, #728]	; (8006098 <telem_loop+0x358>)
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f000 873f 	beq.w	8006c46 <telem_loop+0xf06>
				{
					last_camera_x_velocity = raw_camera_x_velocity;
 8005dc8:	4bb4      	ldr	r3, [pc, #720]	; (800609c <telem_loop+0x35c>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4ab4      	ldr	r2, [pc, #720]	; (80060a0 <telem_loop+0x360>)
 8005dce:	6013      	str	r3, [r2, #0]
					last_camera_y_velocity = raw_camera_y_velocity;
 8005dd0:	4bb4      	ldr	r3, [pc, #720]	; (80060a4 <telem_loop+0x364>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4ab4      	ldr	r2, [pc, #720]	; (80060a8 <telem_loop+0x368>)
 8005dd6:	6013      	str	r3, [r2, #0]

					raw_camera_x_velocity = *(int32_t *)(((uint8_t *)camera_receive_buf) + 1);
 8005dd8:	4bb4      	ldr	r3, [pc, #720]	; (80060ac <telem_loop+0x36c>)
 8005dda:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8005dde:	461a      	mov	r2, r3
 8005de0:	4bae      	ldr	r3, [pc, #696]	; (800609c <telem_loop+0x35c>)
 8005de2:	601a      	str	r2, [r3, #0]
					raw_camera_y_velocity = *(int32_t *)(((uint8_t *)camera_receive_buf) + 5);
 8005de4:	4bb1      	ldr	r3, [pc, #708]	; (80060ac <telem_loop+0x36c>)
 8005de6:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8005dea:	461a      	mov	r2, r3
 8005dec:	4bad      	ldr	r3, [pc, #692]	; (80060a4 <telem_loop+0x364>)
 8005dee:	601a      	str	r2, [r3, #0]
					camera_framerate = *(int32_t *)(((uint8_t *)camera_receive_buf) + 9);
 8005df0:	4bae      	ldr	r3, [pc, #696]	; (80060ac <telem_loop+0x36c>)
 8005df2:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8005df6:	461a      	mov	r2, r3
 8005df8:	4bad      	ldr	r3, [pc, #692]	; (80060b0 <telem_loop+0x370>)
 8005dfa:	601a      	str	r2, [r3, #0]
					//	raw_camera_x_velocity = last_camera_x_velocity;

					//if(abs(raw_camera_y_velocity - last_camera_y_velocity) > 6)
					//	raw_camera_y_velocity = last_camera_y_velocity;

					float x_from_angle = 0;
 8005dfc:	f04f 0300 	mov.w	r3, #0
 8005e00:	63fb      	str	r3, [r7, #60]	; 0x3c
					float y_from_angle = 0;
 8005e02:	f04f 0300 	mov.w	r3, #0
 8005e06:	63bb      	str	r3, [r7, #56]	; 0x38

					if(cos(((float)gyro_y * 0.016023) * 0.033) != 0 && abs(raw_camera_x_velocity) < 2)
 8005e08:	4baa      	ldr	r3, [pc, #680]	; (80060b4 <telem_loop+0x374>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7fa fb9b 	bl	8000548 <__aeabi_f2d>
 8005e12:	a38f      	add	r3, pc, #572	; (adr r3, 8006050 <telem_loop+0x310>)
 8005e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e18:	f7fa fbee 	bl	80005f8 <__aeabi_dmul>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	460c      	mov	r4, r1
 8005e20:	4618      	mov	r0, r3
 8005e22:	4621      	mov	r1, r4
 8005e24:	a38c      	add	r3, pc, #560	; (adr r3, 8006058 <telem_loop+0x318>)
 8005e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2a:	f7fa fbe5 	bl	80005f8 <__aeabi_dmul>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	460c      	mov	r4, r1
 8005e32:	ec44 3b17 	vmov	d7, r3, r4
 8005e36:	eeb0 0a47 	vmov.f32	s0, s14
 8005e3a:	eef0 0a67 	vmov.f32	s1, s15
 8005e3e:	f00b ffff 	bl	8011e40 <cos>
 8005e42:	ec51 0b10 	vmov	r0, r1, d0
 8005e46:	f04f 0200 	mov.w	r2, #0
 8005e4a:	f04f 0300 	mov.w	r3, #0
 8005e4e:	f7fa fe3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d12d      	bne.n	8005eb4 <telem_loop+0x174>
 8005e58:	4b90      	ldr	r3, [pc, #576]	; (800609c <telem_loop+0x35c>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e60:	db28      	blt.n	8005eb4 <telem_loop+0x174>
 8005e62:	4b8e      	ldr	r3, [pc, #568]	; (800609c <telem_loop+0x35c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	dc24      	bgt.n	8005eb4 <telem_loop+0x174>
						x_from_angle = tan(((float)gyro_y * 0.016023) * 0.033);
 8005e6a:	4b92      	ldr	r3, [pc, #584]	; (80060b4 <telem_loop+0x374>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7fa fb6a 	bl	8000548 <__aeabi_f2d>
 8005e74:	a376      	add	r3, pc, #472	; (adr r3, 8006050 <telem_loop+0x310>)
 8005e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7a:	f7fa fbbd 	bl	80005f8 <__aeabi_dmul>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	460c      	mov	r4, r1
 8005e82:	4618      	mov	r0, r3
 8005e84:	4621      	mov	r1, r4
 8005e86:	a374      	add	r3, pc, #464	; (adr r3, 8006058 <telem_loop+0x318>)
 8005e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8c:	f7fa fbb4 	bl	80005f8 <__aeabi_dmul>
 8005e90:	4603      	mov	r3, r0
 8005e92:	460c      	mov	r4, r1
 8005e94:	ec44 3b17 	vmov	d7, r3, r4
 8005e98:	eeb0 0a47 	vmov.f32	s0, s14
 8005e9c:	eef0 0a67 	vmov.f32	s1, s15
 8005ea0:	f00c f92a 	bl	80120f8 <tan>
 8005ea4:	ec54 3b10 	vmov	r3, r4, d0
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	4621      	mov	r1, r4
 8005eac:	f7fa fe7c 	bl	8000ba8 <__aeabi_d2f>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	63fb      	str	r3, [r7, #60]	; 0x3c

					if(cos(((float)gyro_x * 0.003237) * 0.033) != 0 && abs(raw_camera_y_velocity) < 2)
 8005eb4:	4b80      	ldr	r3, [pc, #512]	; (80060b8 <telem_loop+0x378>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7fa fb45 	bl	8000548 <__aeabi_f2d>
 8005ebe:	a368      	add	r3, pc, #416	; (adr r3, 8006060 <telem_loop+0x320>)
 8005ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec4:	f7fa fb98 	bl	80005f8 <__aeabi_dmul>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	460c      	mov	r4, r1
 8005ecc:	4618      	mov	r0, r3
 8005ece:	4621      	mov	r1, r4
 8005ed0:	a361      	add	r3, pc, #388	; (adr r3, 8006058 <telem_loop+0x318>)
 8005ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed6:	f7fa fb8f 	bl	80005f8 <__aeabi_dmul>
 8005eda:	4603      	mov	r3, r0
 8005edc:	460c      	mov	r4, r1
 8005ede:	ec44 3b17 	vmov	d7, r3, r4
 8005ee2:	eeb0 0a47 	vmov.f32	s0, s14
 8005ee6:	eef0 0a67 	vmov.f32	s1, s15
 8005eea:	f00b ffa9 	bl	8011e40 <cos>
 8005eee:	ec51 0b10 	vmov	r0, r1, d0
 8005ef2:	f04f 0200 	mov.w	r2, #0
 8005ef6:	f04f 0300 	mov.w	r3, #0
 8005efa:	f7fa fde5 	bl	8000ac8 <__aeabi_dcmpeq>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d12d      	bne.n	8005f60 <telem_loop+0x220>
 8005f04:	4b67      	ldr	r3, [pc, #412]	; (80060a4 <telem_loop+0x364>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0c:	db28      	blt.n	8005f60 <telem_loop+0x220>
 8005f0e:	4b65      	ldr	r3, [pc, #404]	; (80060a4 <telem_loop+0x364>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	dc24      	bgt.n	8005f60 <telem_loop+0x220>
						y_from_angle = tan(((float)gyro_x * 0.003237) * 0.033);
 8005f16:	4b68      	ldr	r3, [pc, #416]	; (80060b8 <telem_loop+0x378>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7fa fb14 	bl	8000548 <__aeabi_f2d>
 8005f20:	a34f      	add	r3, pc, #316	; (adr r3, 8006060 <telem_loop+0x320>)
 8005f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f26:	f7fa fb67 	bl	80005f8 <__aeabi_dmul>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	460c      	mov	r4, r1
 8005f2e:	4618      	mov	r0, r3
 8005f30:	4621      	mov	r1, r4
 8005f32:	a349      	add	r3, pc, #292	; (adr r3, 8006058 <telem_loop+0x318>)
 8005f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f38:	f7fa fb5e 	bl	80005f8 <__aeabi_dmul>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	460c      	mov	r4, r1
 8005f40:	ec44 3b17 	vmov	d7, r3, r4
 8005f44:	eeb0 0a47 	vmov.f32	s0, s14
 8005f48:	eef0 0a67 	vmov.f32	s1, s15
 8005f4c:	f00c f8d4 	bl	80120f8 <tan>
 8005f50:	ec54 3b10 	vmov	r3, r4, d0
 8005f54:	4618      	mov	r0, r3
 8005f56:	4621      	mov	r1, r4
 8005f58:	f7fa fe26 	bl	8000ba8 <__aeabi_d2f>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	63bb      	str	r3, [r7, #56]	; 0x38

					float camera_distance = slow_bmp_altitude;
 8005f60:	4b56      	ldr	r3, [pc, #344]	; (80060bc <telem_loop+0x37c>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	637b      	str	r3, [r7, #52]	; 0x34

					if(camera_distance < 0)
 8005f66:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005f6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f72:	d505      	bpl.n	8005f80 <telem_loop+0x240>
						camera_distance *= -1;
 8005f74:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005f78:	eef1 7a67 	vneg.f32	s15, s15
 8005f7c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

					camera_velocity_x = (tan((float)(raw_camera_x_velocity) * 0.004013) - x_from_angle) * (camera_distance * 100);
 8005f80:	4b46      	ldr	r3, [pc, #280]	; (800609c <telem_loop+0x35c>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	ee07 3a90 	vmov	s15, r3
 8005f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f8c:	ee17 0a90 	vmov	r0, s15
 8005f90:	f7fa fada 	bl	8000548 <__aeabi_f2d>
 8005f94:	a334      	add	r3, pc, #208	; (adr r3, 8006068 <telem_loop+0x328>)
 8005f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9a:	f7fa fb2d 	bl	80005f8 <__aeabi_dmul>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	460c      	mov	r4, r1
 8005fa2:	ec44 3b17 	vmov	d7, r3, r4
 8005fa6:	eeb0 0a47 	vmov.f32	s0, s14
 8005faa:	eef0 0a67 	vmov.f32	s1, s15
 8005fae:	f00c f8a3 	bl	80120f8 <tan>
 8005fb2:	ec56 5b10 	vmov	r5, r6, d0
 8005fb6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005fb8:	f7fa fac6 	bl	8000548 <__aeabi_f2d>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	460c      	mov	r4, r1
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	4623      	mov	r3, r4
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	4631      	mov	r1, r6
 8005fc8:	f7fa f95e 	bl	8000288 <__aeabi_dsub>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	460c      	mov	r4, r1
 8005fd0:	4625      	mov	r5, r4
 8005fd2:	461c      	mov	r4, r3
 8005fd4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005fd8:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80060c4 <telem_loop+0x384>
 8005fdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005fe0:	ee17 0a90 	vmov	r0, s15
 8005fe4:	f7fa fab0 	bl	8000548 <__aeabi_f2d>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	460b      	mov	r3, r1
 8005fec:	4620      	mov	r0, r4
 8005fee:	4629      	mov	r1, r5
 8005ff0:	f7fa fb02 	bl	80005f8 <__aeabi_dmul>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	460c      	mov	r4, r1
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	4621      	mov	r1, r4
 8005ffc:	f7fa fdd4 	bl	8000ba8 <__aeabi_d2f>
 8006000:	4602      	mov	r2, r0
 8006002:	4b2f      	ldr	r3, [pc, #188]	; (80060c0 <telem_loop+0x380>)
 8006004:	601a      	str	r2, [r3, #0]
					camera_velocity_y = (tan((float)(raw_camera_y_velocity) * 0.005662) + y_from_angle) * (camera_distance * 100);
 8006006:	4b27      	ldr	r3, [pc, #156]	; (80060a4 <telem_loop+0x364>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	ee07 3a90 	vmov	s15, r3
 800600e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006012:	ee17 0a90 	vmov	r0, s15
 8006016:	f7fa fa97 	bl	8000548 <__aeabi_f2d>
 800601a:	a315      	add	r3, pc, #84	; (adr r3, 8006070 <telem_loop+0x330>)
 800601c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006020:	f7fa faea 	bl	80005f8 <__aeabi_dmul>
 8006024:	4603      	mov	r3, r0
 8006026:	460c      	mov	r4, r1
 8006028:	ec44 3b17 	vmov	d7, r3, r4
 800602c:	eeb0 0a47 	vmov.f32	s0, s14
 8006030:	eef0 0a67 	vmov.f32	s1, s15
 8006034:	f00c f860 	bl	80120f8 <tan>
 8006038:	ec56 5b10 	vmov	r5, r6, d0
 800603c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800603e:	f7fa fa83 	bl	8000548 <__aeabi_f2d>
 8006042:	4603      	mov	r3, r0
 8006044:	460c      	mov	r4, r1
 8006046:	461a      	mov	r2, r3
 8006048:	4623      	mov	r3, r4
 800604a:	4628      	mov	r0, r5
 800604c:	4631      	mov	r1, r6
 800604e:	e03b      	b.n	80060c8 <telem_loop+0x388>
 8006050:	53ef6b5d 	.word	0x53ef6b5d
 8006054:	3f906855 	.word	0x3f906855
 8006058:	4189374c 	.word	0x4189374c
 800605c:	3fa0e560 	.word	0x3fa0e560
 8006060:	24638c97 	.word	0x24638c97
 8006064:	3f6a847b 	.word	0x3f6a847b
 8006068:	7c243dcd 	.word	0x7c243dcd
 800606c:	3f706fef 	.word	0x3f706fef
 8006070:	8d477bc0 	.word	0x8d477bc0
 8006074:	3f773109 	.word	0x3f773109
 8006078:	20003d28 	.word	0x20003d28
 800607c:	20002254 	.word	0x20002254
 8006080:	20003cd0 	.word	0x20003cd0
 8006084:	200003b9 	.word	0x200003b9
 8006088:	20003cc8 	.word	0x20003cc8
 800608c:	20001f4c 	.word	0x20001f4c
 8006090:	200003b7 	.word	0x200003b7
 8006094:	200003b4 	.word	0x200003b4
 8006098:	20000385 	.word	0x20000385
 800609c:	2000039c 	.word	0x2000039c
 80060a0:	200003a4 	.word	0x200003a4
 80060a4:	200003a0 	.word	0x200003a0
 80060a8:	200003a8 	.word	0x200003a8
 80060ac:	2000216c 	.word	0x2000216c
 80060b0:	20000398 	.word	0x20000398
 80060b4:	200020d4 	.word	0x200020d4
 80060b8:	200020fc 	.word	0x200020fc
 80060bc:	200002d8 	.word	0x200002d8
 80060c0:	20000390 	.word	0x20000390
 80060c4:	42c80000 	.word	0x42c80000
 80060c8:	f7fa f8e0 	bl	800028c <__adddf3>
 80060cc:	4603      	mov	r3, r0
 80060ce:	460c      	mov	r4, r1
 80060d0:	4625      	mov	r5, r4
 80060d2:	461c      	mov	r4, r3
 80060d4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80060d8:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80060c4 <telem_loop+0x384>
 80060dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060e0:	ee17 0a90 	vmov	r0, s15
 80060e4:	f7fa fa30 	bl	8000548 <__aeabi_f2d>
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	4620      	mov	r0, r4
 80060ee:	4629      	mov	r1, r5
 80060f0:	f7fa fa82 	bl	80005f8 <__aeabi_dmul>
 80060f4:	4603      	mov	r3, r0
 80060f6:	460c      	mov	r4, r1
 80060f8:	4618      	mov	r0, r3
 80060fa:	4621      	mov	r1, r4
 80060fc:	f7fa fd54 	bl	8000ba8 <__aeabi_d2f>
 8006100:	4602      	mov	r2, r0
 8006102:	4bb1      	ldr	r3, [pc, #708]	; (80063c8 <telem_loop+0x688>)
 8006104:	601a      	str	r2, [r3, #0]

					camera_displacement_x += camera_velocity_x;
 8006106:	4bb1      	ldr	r3, [pc, #708]	; (80063cc <telem_loop+0x68c>)
 8006108:	ed93 7a00 	vldr	s14, [r3]
 800610c:	4bb0      	ldr	r3, [pc, #704]	; (80063d0 <telem_loop+0x690>)
 800610e:	edd3 7a00 	vldr	s15, [r3]
 8006112:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006116:	4bad      	ldr	r3, [pc, #692]	; (80063cc <telem_loop+0x68c>)
 8006118:	edc3 7a00 	vstr	s15, [r3]
					camera_displacement_y += camera_velocity_y;
 800611c:	4bad      	ldr	r3, [pc, #692]	; (80063d4 <telem_loop+0x694>)
 800611e:	ed93 7a00 	vldr	s14, [r3]
 8006122:	4ba9      	ldr	r3, [pc, #676]	; (80063c8 <telem_loop+0x688>)
 8006124:	edd3 7a00 	vldr	s15, [r3]
 8006128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800612c:	4ba9      	ldr	r3, [pc, #676]	; (80063d4 <telem_loop+0x694>)
 800612e:	edc3 7a00 	vstr	s15, [r3]

					if(gyro_y > temp_max_gyro_y)
 8006132:	4ba9      	ldr	r3, [pc, #676]	; (80063d8 <telem_loop+0x698>)
 8006134:	ed93 7a00 	vldr	s14, [r3]
 8006138:	4ba8      	ldr	r3, [pc, #672]	; (80063dc <telem_loop+0x69c>)
 800613a:	edd3 7a00 	vldr	s15, [r3]
 800613e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006146:	dd3d      	ble.n	80061c4 <telem_loop+0x484>
					{
						temp_max_gyro_y = gyro_y;
 8006148:	4ba3      	ldr	r3, [pc, #652]	; (80063d8 <telem_loop+0x698>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4aa3      	ldr	r2, [pc, #652]	; (80063dc <telem_loop+0x69c>)
 800614e:	6013      	str	r3, [r2, #0]

						coefficient_x = ((((float)raw_camera_x_velocity) * 0.004013) / (gyro_y * 0.033)) * 1000;
 8006150:	4ba3      	ldr	r3, [pc, #652]	; (80063e0 <telem_loop+0x6a0>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	ee07 3a90 	vmov	s15, r3
 8006158:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800615c:	ee17 0a90 	vmov	r0, s15
 8006160:	f7fa f9f2 	bl	8000548 <__aeabi_f2d>
 8006164:	a390      	add	r3, pc, #576	; (adr r3, 80063a8 <telem_loop+0x668>)
 8006166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616a:	f7fa fa45 	bl	80005f8 <__aeabi_dmul>
 800616e:	4603      	mov	r3, r0
 8006170:	460c      	mov	r4, r1
 8006172:	4625      	mov	r5, r4
 8006174:	461c      	mov	r4, r3
 8006176:	4b98      	ldr	r3, [pc, #608]	; (80063d8 <telem_loop+0x698>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4618      	mov	r0, r3
 800617c:	f7fa f9e4 	bl	8000548 <__aeabi_f2d>
 8006180:	a38b      	add	r3, pc, #556	; (adr r3, 80063b0 <telem_loop+0x670>)
 8006182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006186:	f7fa fa37 	bl	80005f8 <__aeabi_dmul>
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	4620      	mov	r0, r4
 8006190:	4629      	mov	r1, r5
 8006192:	f7fa fb5b 	bl	800084c <__aeabi_ddiv>
 8006196:	4603      	mov	r3, r0
 8006198:	460c      	mov	r4, r1
 800619a:	4618      	mov	r0, r3
 800619c:	4621      	mov	r1, r4
 800619e:	f04f 0200 	mov.w	r2, #0
 80061a2:	4b90      	ldr	r3, [pc, #576]	; (80063e4 <telem_loop+0x6a4>)
 80061a4:	f7fa fa28 	bl	80005f8 <__aeabi_dmul>
 80061a8:	4603      	mov	r3, r0
 80061aa:	460c      	mov	r4, r1
 80061ac:	4618      	mov	r0, r3
 80061ae:	4621      	mov	r1, r4
 80061b0:	f7fa fcfa 	bl	8000ba8 <__aeabi_d2f>
 80061b4:	4602      	mov	r2, r0
 80061b6:	4b8c      	ldr	r3, [pc, #560]	; (80063e8 <telem_loop+0x6a8>)
 80061b8:	601a      	str	r2, [r3, #0]
						/*EEPROM_Clear_Buffer();
						eeprom_write_buffer_width = 2;
						EEPROM_Write_Buffer((uint8_t *)&coefficient_x, 4);
						EEPROM_Write_Buffer((uint8_t *)&coefficient_y, 4);
						EEPROM_Save_Page(96);*/
						SendDynamicVariable("Coef X", 3, (uint8_t *)&coefficient_x);
 80061ba:	4a8b      	ldr	r2, [pc, #556]	; (80063e8 <telem_loop+0x6a8>)
 80061bc:	2103      	movs	r1, #3
 80061be:	488b      	ldr	r0, [pc, #556]	; (80063ec <telem_loop+0x6ac>)
 80061c0:	f000 ff40 	bl	8007044 <SendDynamicVariable>
					}

					if(gyro_x > temp_max_gyro_x)
 80061c4:	4b8a      	ldr	r3, [pc, #552]	; (80063f0 <telem_loop+0x6b0>)
 80061c6:	ed93 7a00 	vldr	s14, [r3]
 80061ca:	4b8a      	ldr	r3, [pc, #552]	; (80063f4 <telem_loop+0x6b4>)
 80061cc:	edd3 7a00 	vldr	s15, [r3]
 80061d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80061d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061d8:	dd3d      	ble.n	8006256 <telem_loop+0x516>
					{
						temp_max_gyro_x = gyro_x;
 80061da:	4b85      	ldr	r3, [pc, #532]	; (80063f0 <telem_loop+0x6b0>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a85      	ldr	r2, [pc, #532]	; (80063f4 <telem_loop+0x6b4>)
 80061e0:	6013      	str	r3, [r2, #0]

						coefficient_y = ((((float)raw_camera_y_velocity) * 0.005662) / (gyro_x * -0.033)) * 1000;
 80061e2:	4b85      	ldr	r3, [pc, #532]	; (80063f8 <telem_loop+0x6b8>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	ee07 3a90 	vmov	s15, r3
 80061ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061ee:	ee17 0a90 	vmov	r0, s15
 80061f2:	f7fa f9a9 	bl	8000548 <__aeabi_f2d>
 80061f6:	a370      	add	r3, pc, #448	; (adr r3, 80063b8 <telem_loop+0x678>)
 80061f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fc:	f7fa f9fc 	bl	80005f8 <__aeabi_dmul>
 8006200:	4603      	mov	r3, r0
 8006202:	460c      	mov	r4, r1
 8006204:	4625      	mov	r5, r4
 8006206:	461c      	mov	r4, r3
 8006208:	4b79      	ldr	r3, [pc, #484]	; (80063f0 <telem_loop+0x6b0>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4618      	mov	r0, r3
 800620e:	f7fa f99b 	bl	8000548 <__aeabi_f2d>
 8006212:	a36b      	add	r3, pc, #428	; (adr r3, 80063c0 <telem_loop+0x680>)
 8006214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006218:	f7fa f9ee 	bl	80005f8 <__aeabi_dmul>
 800621c:	4602      	mov	r2, r0
 800621e:	460b      	mov	r3, r1
 8006220:	4620      	mov	r0, r4
 8006222:	4629      	mov	r1, r5
 8006224:	f7fa fb12 	bl	800084c <__aeabi_ddiv>
 8006228:	4603      	mov	r3, r0
 800622a:	460c      	mov	r4, r1
 800622c:	4618      	mov	r0, r3
 800622e:	4621      	mov	r1, r4
 8006230:	f04f 0200 	mov.w	r2, #0
 8006234:	4b6b      	ldr	r3, [pc, #428]	; (80063e4 <telem_loop+0x6a4>)
 8006236:	f7fa f9df 	bl	80005f8 <__aeabi_dmul>
 800623a:	4603      	mov	r3, r0
 800623c:	460c      	mov	r4, r1
 800623e:	4618      	mov	r0, r3
 8006240:	4621      	mov	r1, r4
 8006242:	f7fa fcb1 	bl	8000ba8 <__aeabi_d2f>
 8006246:	4602      	mov	r2, r0
 8006248:	4b6c      	ldr	r3, [pc, #432]	; (80063fc <telem_loop+0x6bc>)
 800624a:	601a      	str	r2, [r3, #0]
						/*EEPROM_Clear_Buffer();
						eeprom_write_buffer_width = 2;
						EEPROM_Write_Buffer((uint8_t *)&coefficient_x, 4);
						EEPROM_Write_Buffer((uint8_t *)&coefficient_y, 4);
						EEPROM_Save_Page(96);*/
						SendDynamicVariable("Coef Y", 3, (uint8_t *)&coefficient_y);
 800624c:	4a6b      	ldr	r2, [pc, #428]	; (80063fc <telem_loop+0x6bc>)
 800624e:	2103      	movs	r1, #3
 8006250:	486b      	ldr	r0, [pc, #428]	; (8006400 <telem_loop+0x6c0>)
 8006252:	f000 fef7 	bl	8007044 <SendDynamicVariable>
					}

					new_camera_data = 1;
 8006256:	4b6b      	ldr	r3, [pc, #428]	; (8006404 <telem_loop+0x6c4>)
 8006258:	2201      	movs	r2, #1
 800625a:	701a      	strb	r2, [r3, #0]
					//	camera_displacement_x = last_camera_displacement_x;

					//if(abs(camera_displacement_y) > 20)
					//	camera_displacement_y = last_camera_displacement_y;

					SendDynamicVariable("Cam X", 3, (uint8_t *)&camera_displacement_x);
 800625c:	4a5b      	ldr	r2, [pc, #364]	; (80063cc <telem_loop+0x68c>)
 800625e:	2103      	movs	r1, #3
 8006260:	4869      	ldr	r0, [pc, #420]	; (8006408 <telem_loop+0x6c8>)
 8006262:	f000 feef 	bl	8007044 <SendDynamicVariable>
					SendDynamicVariable("Cam Y", 3, (uint8_t *)&camera_displacement_y);
 8006266:	4a5b      	ldr	r2, [pc, #364]	; (80063d4 <telem_loop+0x694>)
 8006268:	2103      	movs	r1, #3
 800626a:	4868      	ldr	r0, [pc, #416]	; (800640c <telem_loop+0x6cc>)
 800626c:	f000 feea 	bl	8007044 <SendDynamicVariable>
					SendDynamicVariable("FPS", 2, (uint8_t *)&camera_framerate);
 8006270:	4a67      	ldr	r2, [pc, #412]	; (8006410 <telem_loop+0x6d0>)
 8006272:	2102      	movs	r1, #2
 8006274:	4867      	ldr	r0, [pc, #412]	; (8006414 <telem_loop+0x6d4>)
 8006276:	f000 fee5 	bl	8007044 <SendDynamicVariable>
 800627a:	f000 bce4 	b.w	8006c46 <telem_loop+0xf06>
				}
			}
			else
			{
				switch(telem_receive_buffer[0])
 800627e:	4b66      	ldr	r3, [pc, #408]	; (8006418 <telem_loop+0x6d8>)
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2bf3      	cmp	r3, #243	; 0xf3
 8006286:	d049      	beq.n	800631c <telem_loop+0x5dc>
 8006288:	2bf3      	cmp	r3, #243	; 0xf3
 800628a:	dc17      	bgt.n	80062bc <telem_loop+0x57c>
 800628c:	2be1      	cmp	r3, #225	; 0xe1
 800628e:	f000 84c3 	beq.w	8006c18 <telem_loop+0xed8>
 8006292:	2be1      	cmp	r3, #225	; 0xe1
 8006294:	dc07      	bgt.n	80062a6 <telem_loop+0x566>
 8006296:	2b00      	cmp	r3, #0
 8006298:	f000 84c0 	beq.w	8006c1c <telem_loop+0xedc>
 800629c:	2be0      	cmp	r3, #224	; 0xe0
 800629e:	f000 8392 	beq.w	80069c6 <telem_loop+0xc86>
 80062a2:	f000 bcd0 	b.w	8006c46 <telem_loop+0xf06>
 80062a6:	2be3      	cmp	r3, #227	; 0xe3
 80062a8:	f000 8221 	beq.w	80066ee <telem_loop+0x9ae>
 80062ac:	2be3      	cmp	r3, #227	; 0xe3
 80062ae:	f2c0 820d 	blt.w	80066cc <telem_loop+0x98c>
 80062b2:	2be4      	cmp	r3, #228	; 0xe4
 80062b4:	f000 82c3 	beq.w	800683e <telem_loop+0xafe>
 80062b8:	f000 bcc5 	b.w	8006c46 <telem_loop+0xf06>
 80062bc:	2bf7      	cmp	r3, #247	; 0xf7
 80062be:	d013      	beq.n	80062e8 <telem_loop+0x5a8>
 80062c0:	2bf7      	cmp	r3, #247	; 0xf7
 80062c2:	dc06      	bgt.n	80062d2 <telem_loop+0x592>
 80062c4:	2bf5      	cmp	r3, #245	; 0xf5
 80062c6:	f000 8102 	beq.w	80064ce <telem_loop+0x78e>
 80062ca:	2bf5      	cmp	r3, #245	; 0xf5
 80062cc:	f300 817d 	bgt.w	80065ca <telem_loop+0x88a>
 80062d0:	e0ba      	b.n	8006448 <telem_loop+0x708>
 80062d2:	2bfd      	cmp	r3, #253	; 0xfd
 80062d4:	f000 8312 	beq.w	80068fc <telem_loop+0xbbc>
 80062d8:	2bfe      	cmp	r3, #254	; 0xfe
 80062da:	f000 8430 	beq.w	8006b3e <telem_loop+0xdfe>
 80062de:	2bfa      	cmp	r3, #250	; 0xfa
 80062e0:	f000 81f1 	beq.w	80066c6 <telem_loop+0x986>
 80062e4:	f000 bcaf 	b.w	8006c46 <telem_loop+0xf06>
				{
				case 0x00:
					break;
				case CALIBRATE_GYRO_REQUEST:
					if(!launched)
 80062e8:	4b4c      	ldr	r3, [pc, #304]	; (800641c <telem_loop+0x6dc>)
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f040 8497 	bne.w	8006c20 <telem_loop+0xee0>
					{
						Calibrate_BMP280();
 80062f2:	f7fb fa7d 	bl	80017f0 <Calibrate_BMP280>
						Calibrate_IMU();
 80062f6:	f7fe fa6d 	bl	80047d4 <Calibrate_IMU>
						ClearPrintBuffer();
 80062fa:	f000 ff9f 	bl	800723c <ClearPrintBuffer>
						sprintf((char *)print_text_buffer, "%s", "Gyro Calibrated.\n");
 80062fe:	4a48      	ldr	r2, [pc, #288]	; (8006420 <telem_loop+0x6e0>)
 8006300:	4b48      	ldr	r3, [pc, #288]	; (8006424 <telem_loop+0x6e4>)
 8006302:	4615      	mov	r5, r2
 8006304:	461c      	mov	r4, r3
 8006306:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006308:	6028      	str	r0, [r5, #0]
 800630a:	6069      	str	r1, [r5, #4]
 800630c:	60aa      	str	r2, [r5, #8]
 800630e:	60eb      	str	r3, [r5, #12]
 8006310:	8823      	ldrh	r3, [r4, #0]
 8006312:	822b      	strh	r3, [r5, #16]
						PrintManualPacket();
 8006314:	f000 ffac 	bl	8007270 <PrintManualPacket>
					}
					break;
 8006318:	f000 bc82 	b.w	8006c20 <telem_loop+0xee0>
				case PID_GAIN_FIRST_REQUEST:
					ClearManualBuffer();
 800631c:	f000 ff5c 	bl	80071d8 <ClearManualBuffer>
					manual_packet_buffer[manual_packet_count].width = 1;
 8006320:	4b41      	ldr	r3, [pc, #260]	; (8006428 <telem_loop+0x6e8>)
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	461a      	mov	r2, r3
 8006326:	4941      	ldr	r1, [pc, #260]	; (800642c <telem_loop+0x6ec>)
 8006328:	4613      	mov	r3, r2
 800632a:	00db      	lsls	r3, r3, #3
 800632c:	4413      	add	r3, r2
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4413      	add	r3, r2
 8006332:	440b      	add	r3, r1
 8006334:	3323      	adds	r3, #35	; 0x23
 8006336:	2201      	movs	r2, #1
 8006338:	701a      	strb	r2, [r3, #0]
					manual_packet_buffer[manual_packet_count].reliable = 1;
 800633a:	4b3b      	ldr	r3, [pc, #236]	; (8006428 <telem_loop+0x6e8>)
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	461a      	mov	r2, r3
 8006340:	493a      	ldr	r1, [pc, #232]	; (800642c <telem_loop+0x6ec>)
 8006342:	4613      	mov	r3, r2
 8006344:	00db      	lsls	r3, r3, #3
 8006346:	4413      	add	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	440b      	add	r3, r1
 800634e:	3324      	adds	r3, #36	; 0x24
 8006350:	2201      	movs	r2, #1
 8006352:	701a      	strb	r2, [r3, #0]
					AddIDToManualBuffer(PID_GAIN_FIRST_PACKET);
 8006354:	2003      	movs	r0, #3
 8006356:	f001 f84f 	bl	80073f8 <AddIDToManualBuffer>
					AddToManualBuffer((uint8_t *)&kp_roll, 4);
 800635a:	2104      	movs	r1, #4
 800635c:	4834      	ldr	r0, [pc, #208]	; (8006430 <telem_loop+0x6f0>)
 800635e:	f001 f867 	bl	8007430 <AddToManualBuffer>
					AddToManualBuffer((uint8_t *)&ki_roll, 4);
 8006362:	2104      	movs	r1, #4
 8006364:	4833      	ldr	r0, [pc, #204]	; (8006434 <telem_loop+0x6f4>)
 8006366:	f001 f863 	bl	8007430 <AddToManualBuffer>
					AddToManualBuffer((uint8_t *)&kd_roll, 4);
 800636a:	2104      	movs	r1, #4
 800636c:	4832      	ldr	r0, [pc, #200]	; (8006438 <telem_loop+0x6f8>)
 800636e:	f001 f85f 	bl	8007430 <AddToManualBuffer>
					AddToManualBuffer((uint8_t *)&kp_yaw, 4);
 8006372:	2104      	movs	r1, #4
 8006374:	4831      	ldr	r0, [pc, #196]	; (800643c <telem_loop+0x6fc>)
 8006376:	f001 f85b 	bl	8007430 <AddToManualBuffer>
					AddToManualBuffer((uint8_t *)&ki_yaw, 4);
 800637a:	2104      	movs	r1, #4
 800637c:	4830      	ldr	r0, [pc, #192]	; (8006440 <telem_loop+0x700>)
 800637e:	f001 f857 	bl	8007430 <AddToManualBuffer>
					AddToManualBuffer((uint8_t *)&kd_yaw, 4);
 8006382:	2104      	movs	r1, #4
 8006384:	482f      	ldr	r0, [pc, #188]	; (8006444 <telem_loop+0x704>)
 8006386:	f001 f853 	bl	8007430 <AddToManualBuffer>

					if(manual_packet_count < 31)
 800638a:	4b27      	ldr	r3, [pc, #156]	; (8006428 <telem_loop+0x6e8>)
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	2b1e      	cmp	r3, #30
 8006390:	f200 8448 	bhi.w	8006c24 <telem_loop+0xee4>
						manual_packet_count++;
 8006394:	4b24      	ldr	r3, [pc, #144]	; (8006428 <telem_loop+0x6e8>)
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	3301      	adds	r3, #1
 800639a:	b2da      	uxtb	r2, r3
 800639c:	4b22      	ldr	r3, [pc, #136]	; (8006428 <telem_loop+0x6e8>)
 800639e:	701a      	strb	r2, [r3, #0]
					break;
 80063a0:	f000 bc40 	b.w	8006c24 <telem_loop+0xee4>
 80063a4:	f3af 8000 	nop.w
 80063a8:	7c243dcd 	.word	0x7c243dcd
 80063ac:	3f706fef 	.word	0x3f706fef
 80063b0:	4189374c 	.word	0x4189374c
 80063b4:	3fa0e560 	.word	0x3fa0e560
 80063b8:	8d477bc0 	.word	0x8d477bc0
 80063bc:	3f773109 	.word	0x3f773109
 80063c0:	4189374c 	.word	0x4189374c
 80063c4:	bfa0e560 	.word	0xbfa0e560
 80063c8:	20000394 	.word	0x20000394
 80063cc:	20000388 	.word	0x20000388
 80063d0:	20000390 	.word	0x20000390
 80063d4:	2000038c 	.word	0x2000038c
 80063d8:	200020d4 	.word	0x200020d4
 80063dc:	200003c0 	.word	0x200003c0
 80063e0:	2000039c 	.word	0x2000039c
 80063e4:	408f4000 	.word	0x408f4000
 80063e8:	200003c4 	.word	0x200003c4
 80063ec:	080155f8 	.word	0x080155f8
 80063f0:	200020fc 	.word	0x200020fc
 80063f4:	200003bc 	.word	0x200003bc
 80063f8:	200003a0 	.word	0x200003a0
 80063fc:	200003c8 	.word	0x200003c8
 8006400:	08015600 	.word	0x08015600
 8006404:	20000386 	.word	0x20000386
 8006408:	08015608 	.word	0x08015608
 800640c:	08015610 	.word	0x08015610
 8006410:	20000398 	.word	0x20000398
 8006414:	08015618 	.word	0x08015618
 8006418:	20003d04 	.word	0x20003d04
 800641c:	20000360 	.word	0x20000360
 8006420:	20002234 	.word	0x20002234
 8006424:	0801561c 	.word	0x0801561c
 8006428:	200003b0 	.word	0x200003b0
 800642c:	20002258 	.word	0x20002258
 8006430:	200002b4 	.word	0x200002b4
 8006434:	200002bc 	.word	0x200002bc
 8006438:	200002c4 	.word	0x200002c4
 800643c:	200002b8 	.word	0x200002b8
 8006440:	200002c0 	.word	0x200002c0
 8006444:	200002c8 	.word	0x200002c8
				case PID_GAIN_SECOND_REQUEST:
					ClearManualBuffer();
 8006448:	f000 fec6 	bl	80071d8 <ClearManualBuffer>
					manual_packet_buffer[manual_packet_count].width = 1;
 800644c:	4bbe      	ldr	r3, [pc, #760]	; (8006748 <telem_loop+0xa08>)
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	461a      	mov	r2, r3
 8006452:	49be      	ldr	r1, [pc, #760]	; (800674c <telem_loop+0xa0c>)
 8006454:	4613      	mov	r3, r2
 8006456:	00db      	lsls	r3, r3, #3
 8006458:	4413      	add	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	4413      	add	r3, r2
 800645e:	440b      	add	r3, r1
 8006460:	3323      	adds	r3, #35	; 0x23
 8006462:	2201      	movs	r2, #1
 8006464:	701a      	strb	r2, [r3, #0]
					manual_packet_buffer[manual_packet_count].reliable = 1;
 8006466:	4bb8      	ldr	r3, [pc, #736]	; (8006748 <telem_loop+0xa08>)
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	461a      	mov	r2, r3
 800646c:	49b7      	ldr	r1, [pc, #732]	; (800674c <telem_loop+0xa0c>)
 800646e:	4613      	mov	r3, r2
 8006470:	00db      	lsls	r3, r3, #3
 8006472:	4413      	add	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	440b      	add	r3, r1
 800647a:	3324      	adds	r3, #36	; 0x24
 800647c:	2201      	movs	r2, #1
 800647e:	701a      	strb	r2, [r3, #0]
					AddIDToManualBuffer(PID_GAIN_SECOND_PACKET);
 8006480:	2004      	movs	r0, #4
 8006482:	f000 ffb9 	bl	80073f8 <AddIDToManualBuffer>
					AddToManualBuffer((uint8_t *)&kp_alt, 4);
 8006486:	2104      	movs	r1, #4
 8006488:	48b1      	ldr	r0, [pc, #708]	; (8006750 <telem_loop+0xa10>)
 800648a:	f000 ffd1 	bl	8007430 <AddToManualBuffer>
					AddToManualBuffer((uint8_t *)&ki_alt, 4);
 800648e:	2104      	movs	r1, #4
 8006490:	48b0      	ldr	r0, [pc, #704]	; (8006754 <telem_loop+0xa14>)
 8006492:	f000 ffcd 	bl	8007430 <AddToManualBuffer>
					AddToManualBuffer((uint8_t *)&kd_alt, 4);
 8006496:	2104      	movs	r1, #4
 8006498:	48af      	ldr	r0, [pc, #700]	; (8006758 <telem_loop+0xa18>)
 800649a:	f000 ffc9 	bl	8007430 <AddToManualBuffer>
					AddToManualBuffer((uint8_t *)&kp_gps, 4);
 800649e:	2104      	movs	r1, #4
 80064a0:	48ae      	ldr	r0, [pc, #696]	; (800675c <telem_loop+0xa1c>)
 80064a2:	f000 ffc5 	bl	8007430 <AddToManualBuffer>
					AddToManualBuffer((uint8_t *)&ki_gps, 4);
 80064a6:	2104      	movs	r1, #4
 80064a8:	48ad      	ldr	r0, [pc, #692]	; (8006760 <telem_loop+0xa20>)
 80064aa:	f000 ffc1 	bl	8007430 <AddToManualBuffer>
					AddToManualBuffer((uint8_t *)&kd_gps, 4);
 80064ae:	2104      	movs	r1, #4
 80064b0:	48ac      	ldr	r0, [pc, #688]	; (8006764 <telem_loop+0xa24>)
 80064b2:	f000 ffbd 	bl	8007430 <AddToManualBuffer>

					if(manual_packet_count < 31)
 80064b6:	4ba4      	ldr	r3, [pc, #656]	; (8006748 <telem_loop+0xa08>)
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	2b1e      	cmp	r3, #30
 80064bc:	f200 83b4 	bhi.w	8006c28 <telem_loop+0xee8>
						manual_packet_count++;
 80064c0:	4ba1      	ldr	r3, [pc, #644]	; (8006748 <telem_loop+0xa08>)
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	3301      	adds	r3, #1
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	4b9f      	ldr	r3, [pc, #636]	; (8006748 <telem_loop+0xa08>)
 80064ca:	701a      	strb	r2, [r3, #0]
					break;
 80064cc:	e3ac      	b.n	8006c28 <telem_loop+0xee8>
				case PID_GAIN_FIRST_UPDATE_REQUEST:
					telem_receive_read_index = 1;
 80064ce:	4ba6      	ldr	r3, [pc, #664]	; (8006768 <telem_loop+0xa28>)
 80064d0:	2201      	movs	r2, #1
 80064d2:	701a      	strb	r2, [r3, #0]
					ReadReceiveBuffer((uint8_t *)&kp_roll, 4);
 80064d4:	2104      	movs	r1, #4
 80064d6:	48a5      	ldr	r0, [pc, #660]	; (800676c <telem_loop+0xa2c>)
 80064d8:	f001 f800 	bl	80074dc <ReadReceiveBuffer>
					ReadReceiveBuffer((uint8_t *)&ki_roll, 4);
 80064dc:	2104      	movs	r1, #4
 80064de:	48a4      	ldr	r0, [pc, #656]	; (8006770 <telem_loop+0xa30>)
 80064e0:	f000 fffc 	bl	80074dc <ReadReceiveBuffer>
					ReadReceiveBuffer((uint8_t *)&kd_roll, 4);
 80064e4:	2104      	movs	r1, #4
 80064e6:	48a3      	ldr	r0, [pc, #652]	; (8006774 <telem_loop+0xa34>)
 80064e8:	f000 fff8 	bl	80074dc <ReadReceiveBuffer>
					ReadReceiveBuffer((uint8_t *)&kp_yaw, 4);
 80064ec:	2104      	movs	r1, #4
 80064ee:	48a2      	ldr	r0, [pc, #648]	; (8006778 <telem_loop+0xa38>)
 80064f0:	f000 fff4 	bl	80074dc <ReadReceiveBuffer>
					ReadReceiveBuffer((uint8_t *)&ki_yaw, 4);
 80064f4:	2104      	movs	r1, #4
 80064f6:	48a1      	ldr	r0, [pc, #644]	; (800677c <telem_loop+0xa3c>)
 80064f8:	f000 fff0 	bl	80074dc <ReadReceiveBuffer>
					ReadReceiveBuffer((uint8_t *)&kd_yaw, 4);
 80064fc:	2104      	movs	r1, #4
 80064fe:	48a0      	ldr	r0, [pc, #640]	; (8006780 <telem_loop+0xa40>)
 8006500:	f000 ffec 	bl	80074dc <ReadReceiveBuffer>

					EEPROM_Clear_Buffer();
 8006504:	f7fd fe24 	bl	8004150 <EEPROM_Clear_Buffer>
					eeprom_write_buffer_width = 2;
 8006508:	4b9e      	ldr	r3, [pc, #632]	; (8006784 <telem_loop+0xa44>)
 800650a:	2202      	movs	r2, #2
 800650c:	701a      	strb	r2, [r3, #0]
					EEPROM_Write_Buffer((uint8_t *)&kp_roll, 4);
 800650e:	2104      	movs	r1, #4
 8006510:	4896      	ldr	r0, [pc, #600]	; (800676c <telem_loop+0xa2c>)
 8006512:	f7fd fe7d 	bl	8004210 <EEPROM_Write_Buffer>
					EEPROM_Write_Buffer((uint8_t *)&ki_roll, 4);
 8006516:	2104      	movs	r1, #4
 8006518:	4895      	ldr	r0, [pc, #596]	; (8006770 <telem_loop+0xa30>)
 800651a:	f7fd fe79 	bl	8004210 <EEPROM_Write_Buffer>
					EEPROM_Write_Buffer((uint8_t *)&kd_roll, 4);
 800651e:	2104      	movs	r1, #4
 8006520:	4894      	ldr	r0, [pc, #592]	; (8006774 <telem_loop+0xa34>)
 8006522:	f7fd fe75 	bl	8004210 <EEPROM_Write_Buffer>
					EEPROM_Write_Buffer((uint8_t *)&kp_yaw, 4);
 8006526:	2104      	movs	r1, #4
 8006528:	4893      	ldr	r0, [pc, #588]	; (8006778 <telem_loop+0xa38>)
 800652a:	f7fd fe71 	bl	8004210 <EEPROM_Write_Buffer>
					EEPROM_Write_Buffer((uint8_t *)&ki_yaw, 4);
 800652e:	2104      	movs	r1, #4
 8006530:	4892      	ldr	r0, [pc, #584]	; (800677c <telem_loop+0xa3c>)
 8006532:	f7fd fe6d 	bl	8004210 <EEPROM_Write_Buffer>
					EEPROM_Write_Buffer((uint8_t *)&kd_yaw, 4);
 8006536:	2104      	movs	r1, #4
 8006538:	4891      	ldr	r0, [pc, #580]	; (8006780 <telem_loop+0xa40>)
 800653a:	f7fd fe69 	bl	8004210 <EEPROM_Write_Buffer>
					EEPROM_Save_Page(0);
 800653e:	2000      	movs	r0, #0
 8006540:	f7fd fe20 	bl	8004184 <EEPROM_Save_Page>

					ClearManualBuffer();
 8006544:	f000 fe48 	bl	80071d8 <ClearManualBuffer>
					manual_packet_buffer[manual_packet_count].width = 1;
 8006548:	4b7f      	ldr	r3, [pc, #508]	; (8006748 <telem_loop+0xa08>)
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	461a      	mov	r2, r3
 800654e:	497f      	ldr	r1, [pc, #508]	; (800674c <telem_loop+0xa0c>)
 8006550:	4613      	mov	r3, r2
 8006552:	00db      	lsls	r3, r3, #3
 8006554:	4413      	add	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	440b      	add	r3, r1
 800655c:	3323      	adds	r3, #35	; 0x23
 800655e:	2201      	movs	r2, #1
 8006560:	701a      	strb	r2, [r3, #0]
					manual_packet_buffer[manual_packet_count].reliable = 1;
 8006562:	4b79      	ldr	r3, [pc, #484]	; (8006748 <telem_loop+0xa08>)
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	461a      	mov	r2, r3
 8006568:	4978      	ldr	r1, [pc, #480]	; (800674c <telem_loop+0xa0c>)
 800656a:	4613      	mov	r3, r2
 800656c:	00db      	lsls	r3, r3, #3
 800656e:	4413      	add	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	440b      	add	r3, r1
 8006576:	3324      	adds	r3, #36	; 0x24
 8006578:	2201      	movs	r2, #1
 800657a:	701a      	strb	r2, [r3, #0]
					AddIDToManualBuffer(PID_GAIN_FIRST_PACKET);
 800657c:	2003      	movs	r0, #3
 800657e:	f000 ff3b 	bl	80073f8 <AddIDToManualBuffer>
					AddToManualBuffer((uint8_t *)&kp_roll, 4);
 8006582:	2104      	movs	r1, #4
 8006584:	4879      	ldr	r0, [pc, #484]	; (800676c <telem_loop+0xa2c>)
 8006586:	f000 ff53 	bl	8007430 <AddToManualBuffer>
					AddToManualBuffer((uint8_t *)&ki_roll, 4);
 800658a:	2104      	movs	r1, #4
 800658c:	4878      	ldr	r0, [pc, #480]	; (8006770 <telem_loop+0xa30>)
 800658e:	f000 ff4f 	bl	8007430 <AddToManualBuffer>
					AddToManualBuffer((uint8_t *)&kd_roll, 4);
 8006592:	2104      	movs	r1, #4
 8006594:	4877      	ldr	r0, [pc, #476]	; (8006774 <telem_loop+0xa34>)
 8006596:	f000 ff4b 	bl	8007430 <AddToManualBuffer>
					AddToManualBuffer((uint8_t *)&kp_yaw, 4);
 800659a:	2104      	movs	r1, #4
 800659c:	4876      	ldr	r0, [pc, #472]	; (8006778 <telem_loop+0xa38>)
 800659e:	f000 ff47 	bl	8007430 <AddToManualBuffer>
					AddToManualBuffer((uint8_t *)&ki_yaw, 4);
 80065a2:	2104      	movs	r1, #4
 80065a4:	4875      	ldr	r0, [pc, #468]	; (800677c <telem_loop+0xa3c>)
 80065a6:	f000 ff43 	bl	8007430 <AddToManualBuffer>
					AddToManualBuffer((uint8_t *)&kd_yaw, 4);
 80065aa:	2104      	movs	r1, #4
 80065ac:	4874      	ldr	r0, [pc, #464]	; (8006780 <telem_loop+0xa40>)
 80065ae:	f000 ff3f 	bl	8007430 <AddToManualBuffer>

					if(manual_packet_count < 31)
 80065b2:	4b65      	ldr	r3, [pc, #404]	; (8006748 <telem_loop+0xa08>)
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	2b1e      	cmp	r3, #30
 80065b8:	f200 8338 	bhi.w	8006c2c <telem_loop+0xeec>
						manual_packet_count++;
 80065bc:	4b62      	ldr	r3, [pc, #392]	; (8006748 <telem_loop+0xa08>)
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	3301      	adds	r3, #1
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	4b60      	ldr	r3, [pc, #384]	; (8006748 <telem_loop+0xa08>)
 80065c6:	701a      	strb	r2, [r3, #0]
					break;
 80065c8:	e330      	b.n	8006c2c <telem_loop+0xeec>
				case PID_GAIN_SECOND_UPDATE_REQUEST:
					telem_receive_read_index = 1;
 80065ca:	4b67      	ldr	r3, [pc, #412]	; (8006768 <telem_loop+0xa28>)
 80065cc:	2201      	movs	r2, #1
 80065ce:	701a      	strb	r2, [r3, #0]
					ReadReceiveBuffer((uint8_t *)&kp_alt, 4);
 80065d0:	2104      	movs	r1, #4
 80065d2:	485f      	ldr	r0, [pc, #380]	; (8006750 <telem_loop+0xa10>)
 80065d4:	f000 ff82 	bl	80074dc <ReadReceiveBuffer>
					ReadReceiveBuffer((uint8_t *)&ki_alt, 4);
 80065d8:	2104      	movs	r1, #4
 80065da:	485e      	ldr	r0, [pc, #376]	; (8006754 <telem_loop+0xa14>)
 80065dc:	f000 ff7e 	bl	80074dc <ReadReceiveBuffer>
					ReadReceiveBuffer((uint8_t *)&kd_alt, 4);
 80065e0:	2104      	movs	r1, #4
 80065e2:	485d      	ldr	r0, [pc, #372]	; (8006758 <telem_loop+0xa18>)
 80065e4:	f000 ff7a 	bl	80074dc <ReadReceiveBuffer>
					ReadReceiveBuffer((uint8_t *)&kp_gps, 4);
 80065e8:	2104      	movs	r1, #4
 80065ea:	485c      	ldr	r0, [pc, #368]	; (800675c <telem_loop+0xa1c>)
 80065ec:	f000 ff76 	bl	80074dc <ReadReceiveBuffer>
					ReadReceiveBuffer((uint8_t *)&ki_gps, 4);
 80065f0:	2104      	movs	r1, #4
 80065f2:	485b      	ldr	r0, [pc, #364]	; (8006760 <telem_loop+0xa20>)
 80065f4:	f000 ff72 	bl	80074dc <ReadReceiveBuffer>
					ReadReceiveBuffer((uint8_t *)&kd_gps, 4);
 80065f8:	2104      	movs	r1, #4
 80065fa:	485a      	ldr	r0, [pc, #360]	; (8006764 <telem_loop+0xa24>)
 80065fc:	f000 ff6e 	bl	80074dc <ReadReceiveBuffer>

					EEPROM_Clear_Buffer();
 8006600:	f7fd fda6 	bl	8004150 <EEPROM_Clear_Buffer>
					eeprom_write_buffer_width = 2;
 8006604:	4b5f      	ldr	r3, [pc, #380]	; (8006784 <telem_loop+0xa44>)
 8006606:	2202      	movs	r2, #2
 8006608:	701a      	strb	r2, [r3, #0]
					EEPROM_Write_Buffer((uint8_t *)&kp_alt, 4);
 800660a:	2104      	movs	r1, #4
 800660c:	4850      	ldr	r0, [pc, #320]	; (8006750 <telem_loop+0xa10>)
 800660e:	f7fd fdff 	bl	8004210 <EEPROM_Write_Buffer>
					EEPROM_Write_Buffer((uint8_t *)&ki_alt, 4);
 8006612:	2104      	movs	r1, #4
 8006614:	484f      	ldr	r0, [pc, #316]	; (8006754 <telem_loop+0xa14>)
 8006616:	f7fd fdfb 	bl	8004210 <EEPROM_Write_Buffer>
					EEPROM_Write_Buffer((uint8_t *)&kd_alt, 4);
 800661a:	2104      	movs	r1, #4
 800661c:	484e      	ldr	r0, [pc, #312]	; (8006758 <telem_loop+0xa18>)
 800661e:	f7fd fdf7 	bl	8004210 <EEPROM_Write_Buffer>
					EEPROM_Write_Buffer((uint8_t *)&kp_gps, 4);
 8006622:	2104      	movs	r1, #4
 8006624:	484d      	ldr	r0, [pc, #308]	; (800675c <telem_loop+0xa1c>)
 8006626:	f7fd fdf3 	bl	8004210 <EEPROM_Write_Buffer>
					EEPROM_Write_Buffer((uint8_t *)&ki_gps, 4);
 800662a:	2104      	movs	r1, #4
 800662c:	484c      	ldr	r0, [pc, #304]	; (8006760 <telem_loop+0xa20>)
 800662e:	f7fd fdef 	bl	8004210 <EEPROM_Write_Buffer>
					EEPROM_Write_Buffer((uint8_t *)&kd_gps, 4);
 8006632:	2104      	movs	r1, #4
 8006634:	484b      	ldr	r0, [pc, #300]	; (8006764 <telem_loop+0xa24>)
 8006636:	f7fd fdeb 	bl	8004210 <EEPROM_Write_Buffer>
					EEPROM_Save_Page(32);
 800663a:	2020      	movs	r0, #32
 800663c:	f7fd fda2 	bl	8004184 <EEPROM_Save_Page>

					ClearManualBuffer();
 8006640:	f000 fdca 	bl	80071d8 <ClearManualBuffer>
					manual_packet_buffer[manual_packet_count].width = 1;
 8006644:	4b40      	ldr	r3, [pc, #256]	; (8006748 <telem_loop+0xa08>)
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	461a      	mov	r2, r3
 800664a:	4940      	ldr	r1, [pc, #256]	; (800674c <telem_loop+0xa0c>)
 800664c:	4613      	mov	r3, r2
 800664e:	00db      	lsls	r3, r3, #3
 8006650:	4413      	add	r3, r2
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	440b      	add	r3, r1
 8006658:	3323      	adds	r3, #35	; 0x23
 800665a:	2201      	movs	r2, #1
 800665c:	701a      	strb	r2, [r3, #0]
					manual_packet_buffer[manual_packet_count].reliable = 1;
 800665e:	4b3a      	ldr	r3, [pc, #232]	; (8006748 <telem_loop+0xa08>)
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	461a      	mov	r2, r3
 8006664:	4939      	ldr	r1, [pc, #228]	; (800674c <telem_loop+0xa0c>)
 8006666:	4613      	mov	r3, r2
 8006668:	00db      	lsls	r3, r3, #3
 800666a:	4413      	add	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	440b      	add	r3, r1
 8006672:	3324      	adds	r3, #36	; 0x24
 8006674:	2201      	movs	r2, #1
 8006676:	701a      	strb	r2, [r3, #0]
					AddIDToManualBuffer(PID_GAIN_SECOND_PACKET);
 8006678:	2004      	movs	r0, #4
 800667a:	f000 febd 	bl	80073f8 <AddIDToManualBuffer>
					AddToManualBuffer((uint8_t *)&kp_alt, 4);
 800667e:	2104      	movs	r1, #4
 8006680:	4833      	ldr	r0, [pc, #204]	; (8006750 <telem_loop+0xa10>)
 8006682:	f000 fed5 	bl	8007430 <AddToManualBuffer>
					AddToManualBuffer((uint8_t *)&ki_alt, 4);
 8006686:	2104      	movs	r1, #4
 8006688:	4832      	ldr	r0, [pc, #200]	; (8006754 <telem_loop+0xa14>)
 800668a:	f000 fed1 	bl	8007430 <AddToManualBuffer>
					AddToManualBuffer((uint8_t *)&kd_alt, 4);
 800668e:	2104      	movs	r1, #4
 8006690:	4831      	ldr	r0, [pc, #196]	; (8006758 <telem_loop+0xa18>)
 8006692:	f000 fecd 	bl	8007430 <AddToManualBuffer>
					AddToManualBuffer((uint8_t *)&kp_gps, 4);
 8006696:	2104      	movs	r1, #4
 8006698:	4830      	ldr	r0, [pc, #192]	; (800675c <telem_loop+0xa1c>)
 800669a:	f000 fec9 	bl	8007430 <AddToManualBuffer>
					AddToManualBuffer((uint8_t *)&ki_gps, 4);
 800669e:	2104      	movs	r1, #4
 80066a0:	482f      	ldr	r0, [pc, #188]	; (8006760 <telem_loop+0xa20>)
 80066a2:	f000 fec5 	bl	8007430 <AddToManualBuffer>
					AddToManualBuffer((uint8_t *)&kd_gps, 4);
 80066a6:	2104      	movs	r1, #4
 80066a8:	482e      	ldr	r0, [pc, #184]	; (8006764 <telem_loop+0xa24>)
 80066aa:	f000 fec1 	bl	8007430 <AddToManualBuffer>

					if(manual_packet_count < 31)
 80066ae:	4b26      	ldr	r3, [pc, #152]	; (8006748 <telem_loop+0xa08>)
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	2b1e      	cmp	r3, #30
 80066b4:	f200 82bc 	bhi.w	8006c30 <telem_loop+0xef0>
						manual_packet_count++;
 80066b8:	4b23      	ldr	r3, [pc, #140]	; (8006748 <telem_loop+0xa08>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	3301      	adds	r3, #1
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	4b21      	ldr	r3, [pc, #132]	; (8006748 <telem_loop+0xa08>)
 80066c2:	701a      	strb	r2, [r3, #0]
					break;
 80066c4:	e2b4      	b.n	8006c30 <telem_loop+0xef0>
				case CALIBRATE_COMPASS_REQUEST:
					Calibrate_Compass();
 80066c6:	f7fb fbab 	bl	8001e20 <Calibrate_Compass>
					break;
 80066ca:	e2bc      	b.n	8006c46 <telem_loop+0xf06>
				case DO_CMD_REQUEST:
					telem_receive_read_index = 1;
 80066cc:	4b26      	ldr	r3, [pc, #152]	; (8006768 <telem_loop+0xa28>)
 80066ce:	2201      	movs	r2, #1
 80066d0:	701a      	strb	r2, [r3, #0]
					ReadReceiveBuffer(&high_priority_program_width, 1);
 80066d2:	2101      	movs	r1, #1
 80066d4:	482c      	ldr	r0, [pc, #176]	; (8006788 <telem_loop+0xa48>)
 80066d6:	f000 ff01 	bl	80074dc <ReadReceiveBuffer>
					ReadReceiveBuffer((uint8_t *)&high_priority_program_buffer, high_priority_program_width);
 80066da:	4b2b      	ldr	r3, [pc, #172]	; (8006788 <telem_loop+0xa48>)
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	4619      	mov	r1, r3
 80066e0:	482a      	ldr	r0, [pc, #168]	; (800678c <telem_loop+0xa4c>)
 80066e2:	f000 fefb 	bl	80074dc <ReadReceiveBuffer>
					high_priority_program_counter = 0;
 80066e6:	4b2a      	ldr	r3, [pc, #168]	; (8006790 <telem_loop+0xa50>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	701a      	strb	r2, [r3, #0]
					break;
 80066ec:	e2ab      	b.n	8006c46 <telem_loop+0xf06>
				case UPLOAD_CMD_REQUEST:
					break;
				case MODIFY_VARIABLE_REQUEST:
					telem_receive_read_index = 1;
 80066ee:	4b1e      	ldr	r3, [pc, #120]	; (8006768 <telem_loop+0xa28>)
 80066f0:	2201      	movs	r2, #1
 80066f2:	701a      	strb	r2, [r3, #0]
					ReadReceiveBuffer(&modify_var_varcount, 1);
 80066f4:	2101      	movs	r1, #1
 80066f6:	4827      	ldr	r0, [pc, #156]	; (8006794 <telem_loop+0xa54>)
 80066f8:	f000 fef0 	bl	80074dc <ReadReceiveBuffer>

					ClearManualBuffer();
 80066fc:	f000 fd6c 	bl	80071d8 <ClearManualBuffer>
					manual_packet_buffer[manual_packet_count].width = 1;
 8006700:	4b11      	ldr	r3, [pc, #68]	; (8006748 <telem_loop+0xa08>)
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	461a      	mov	r2, r3
 8006706:	4911      	ldr	r1, [pc, #68]	; (800674c <telem_loop+0xa0c>)
 8006708:	4613      	mov	r3, r2
 800670a:	00db      	lsls	r3, r3, #3
 800670c:	4413      	add	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	440b      	add	r3, r1
 8006714:	3323      	adds	r3, #35	; 0x23
 8006716:	2201      	movs	r2, #1
 8006718:	701a      	strb	r2, [r3, #0]
					manual_packet_buffer[manual_packet_count].reliable = 1;
 800671a:	4b0b      	ldr	r3, [pc, #44]	; (8006748 <telem_loop+0xa08>)
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	461a      	mov	r2, r3
 8006720:	490a      	ldr	r1, [pc, #40]	; (800674c <telem_loop+0xa0c>)
 8006722:	4613      	mov	r3, r2
 8006724:	00db      	lsls	r3, r3, #3
 8006726:	4413      	add	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4413      	add	r3, r2
 800672c:	440b      	add	r3, r1
 800672e:	3324      	adds	r3, #36	; 0x24
 8006730:	2201      	movs	r2, #1
 8006732:	701a      	strb	r2, [r3, #0]
					AddIDToManualBuffer(READ_VARIABLE_PACKET);
 8006734:	200b      	movs	r0, #11
 8006736:	f000 fe5f 	bl	80073f8 <AddIDToManualBuffer>
					AddToManualBuffer(&modify_var_varcount, 1);
 800673a:	2101      	movs	r1, #1
 800673c:	4815      	ldr	r0, [pc, #84]	; (8006794 <telem_loop+0xa54>)
 800673e:	f000 fe77 	bl	8007430 <AddToManualBuffer>

					for(int i = 0; i < modify_var_varcount; i++)
 8006742:	2300      	movs	r3, #0
 8006744:	633b      	str	r3, [r7, #48]	; 0x30
 8006746:	e068      	b.n	800681a <telem_loop+0xada>
 8006748:	200003b0 	.word	0x200003b0
 800674c:	20002258 	.word	0x20002258
 8006750:	200002e4 	.word	0x200002e4
 8006754:	200002ec 	.word	0x200002ec
 8006758:	200002f0 	.word	0x200002f0
 800675c:	2000032c 	.word	0x2000032c
 8006760:	20000334 	.word	0x20000334
 8006764:	20000338 	.word	0x20000338
 8006768:	200003b3 	.word	0x200003b3
 800676c:	200002b4 	.word	0x200002b4
 8006770:	200002bc 	.word	0x200002bc
 8006774:	200002c4 	.word	0x200002c4
 8006778:	200002b8 	.word	0x200002b8
 800677c:	200002c0 	.word	0x200002c0
 8006780:	200002c8 	.word	0x200002c8
 8006784:	20000066 	.word	0x20000066
 8006788:	20000357 	.word	0x20000357
 800678c:	20001460 	.word	0x20001460
 8006790:	20000356 	.word	0x20000356
 8006794:	20003ccc 	.word	0x20003ccc
					{
						ReadReceiveBuffer(&current_var, 1);
 8006798:	2101      	movs	r1, #1
 800679a:	48a5      	ldr	r0, [pc, #660]	; (8006a30 <telem_loop+0xcf0>)
 800679c:	f000 fe9e 	bl	80074dc <ReadReceiveBuffer>
						ReadReceiveBuffer(&current_var_width, 1);
 80067a0:	2101      	movs	r1, #1
 80067a2:	48a4      	ldr	r0, [pc, #656]	; (8006a34 <telem_loop+0xcf4>)
 80067a4:	f000 fe9a 	bl	80074dc <ReadReceiveBuffer>

						if(!direct_access_variables[current_var].protected)
 80067a8:	4ba1      	ldr	r3, [pc, #644]	; (8006a30 <telem_loop+0xcf0>)
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	4aa2      	ldr	r2, [pc, #648]	; (8006a38 <telem_loop+0xcf8>)
 80067ae:	00db      	lsls	r3, r3, #3
 80067b0:	4413      	add	r3, r2
 80067b2:	799b      	ldrb	r3, [r3, #6]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10c      	bne.n	80067d2 <telem_loop+0xa92>
							ReadReceiveBuffer(direct_access_variables[current_var].var, current_var_width);
 80067b8:	4b9d      	ldr	r3, [pc, #628]	; (8006a30 <telem_loop+0xcf0>)
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	461a      	mov	r2, r3
 80067be:	4b9e      	ldr	r3, [pc, #632]	; (8006a38 <telem_loop+0xcf8>)
 80067c0:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 80067c4:	4b9b      	ldr	r3, [pc, #620]	; (8006a34 <telem_loop+0xcf4>)
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	4619      	mov	r1, r3
 80067ca:	4610      	mov	r0, r2
 80067cc:	f000 fe86 	bl	80074dc <ReadReceiveBuffer>
 80067d0:	e007      	b.n	80067e2 <telem_loop+0xaa2>
						else
							telem_receive_read_index += current_var_width;
 80067d2:	4b9a      	ldr	r3, [pc, #616]	; (8006a3c <telem_loop+0xcfc>)
 80067d4:	781a      	ldrb	r2, [r3, #0]
 80067d6:	4b97      	ldr	r3, [pc, #604]	; (8006a34 <telem_loop+0xcf4>)
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	4413      	add	r3, r2
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	4b97      	ldr	r3, [pc, #604]	; (8006a3c <telem_loop+0xcfc>)
 80067e0:	701a      	strb	r2, [r3, #0]

						AddToManualBuffer(&direct_access_variables[current_var].var_index, 1);
 80067e2:	4b93      	ldr	r3, [pc, #588]	; (8006a30 <telem_loop+0xcf0>)
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	00db      	lsls	r3, r3, #3
 80067e8:	4a93      	ldr	r2, [pc, #588]	; (8006a38 <telem_loop+0xcf8>)
 80067ea:	4413      	add	r3, r2
 80067ec:	3305      	adds	r3, #5
 80067ee:	2101      	movs	r1, #1
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 fe1d 	bl	8007430 <AddToManualBuffer>
						AddToManualBuffer(direct_access_variables[current_var].var, direct_access_variables[current_var].width);
 80067f6:	4b8e      	ldr	r3, [pc, #568]	; (8006a30 <telem_loop+0xcf0>)
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	461a      	mov	r2, r3
 80067fc:	4b8e      	ldr	r3, [pc, #568]	; (8006a38 <telem_loop+0xcf8>)
 80067fe:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8006802:	4b8b      	ldr	r3, [pc, #556]	; (8006a30 <telem_loop+0xcf0>)
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	4a8c      	ldr	r2, [pc, #560]	; (8006a38 <telem_loop+0xcf8>)
 8006808:	00db      	lsls	r3, r3, #3
 800680a:	4413      	add	r3, r2
 800680c:	791b      	ldrb	r3, [r3, #4]
 800680e:	4619      	mov	r1, r3
 8006810:	f000 fe0e 	bl	8007430 <AddToManualBuffer>
					for(int i = 0; i < modify_var_varcount; i++)
 8006814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006816:	3301      	adds	r3, #1
 8006818:	633b      	str	r3, [r7, #48]	; 0x30
 800681a:	4b89      	ldr	r3, [pc, #548]	; (8006a40 <telem_loop+0xd00>)
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	461a      	mov	r2, r3
 8006820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006822:	4293      	cmp	r3, r2
 8006824:	dbb8      	blt.n	8006798 <telem_loop+0xa58>
					}

					if(manual_packet_count < 31)
 8006826:	4b87      	ldr	r3, [pc, #540]	; (8006a44 <telem_loop+0xd04>)
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	2b1e      	cmp	r3, #30
 800682c:	f200 8202 	bhi.w	8006c34 <telem_loop+0xef4>
						manual_packet_count++;
 8006830:	4b84      	ldr	r3, [pc, #528]	; (8006a44 <telem_loop+0xd04>)
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	3301      	adds	r3, #1
 8006836:	b2da      	uxtb	r2, r3
 8006838:	4b82      	ldr	r3, [pc, #520]	; (8006a44 <telem_loop+0xd04>)
 800683a:	701a      	strb	r2, [r3, #0]

					break;
 800683c:	e1fa      	b.n	8006c34 <telem_loop+0xef4>
				case READ_VARIABLE_REQUEST:
					ClearManualBuffer();
 800683e:	f000 fccb 	bl	80071d8 <ClearManualBuffer>
					manual_packet_buffer[manual_packet_count].width = 1;
 8006842:	4b80      	ldr	r3, [pc, #512]	; (8006a44 <telem_loop+0xd04>)
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	461a      	mov	r2, r3
 8006848:	497f      	ldr	r1, [pc, #508]	; (8006a48 <telem_loop+0xd08>)
 800684a:	4613      	mov	r3, r2
 800684c:	00db      	lsls	r3, r3, #3
 800684e:	4413      	add	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	440b      	add	r3, r1
 8006856:	3323      	adds	r3, #35	; 0x23
 8006858:	2201      	movs	r2, #1
 800685a:	701a      	strb	r2, [r3, #0]
					manual_packet_buffer[manual_packet_count].reliable = 1;
 800685c:	4b79      	ldr	r3, [pc, #484]	; (8006a44 <telem_loop+0xd04>)
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	461a      	mov	r2, r3
 8006862:	4979      	ldr	r1, [pc, #484]	; (8006a48 <telem_loop+0xd08>)
 8006864:	4613      	mov	r3, r2
 8006866:	00db      	lsls	r3, r3, #3
 8006868:	4413      	add	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	440b      	add	r3, r1
 8006870:	3324      	adds	r3, #36	; 0x24
 8006872:	2201      	movs	r2, #1
 8006874:	701a      	strb	r2, [r3, #0]
					AddIDToManualBuffer(READ_VARIABLE_PACKET);
 8006876:	200b      	movs	r0, #11
 8006878:	f000 fdbe 	bl	80073f8 <AddIDToManualBuffer>

					telem_receive_read_index = 1;
 800687c:	4b6f      	ldr	r3, [pc, #444]	; (8006a3c <telem_loop+0xcfc>)
 800687e:	2201      	movs	r2, #1
 8006880:	701a      	strb	r2, [r3, #0]
					ReadReceiveBuffer(&read_var_varcount, 1);
 8006882:	2101      	movs	r1, #1
 8006884:	4871      	ldr	r0, [pc, #452]	; (8006a4c <telem_loop+0xd0c>)
 8006886:	f000 fe29 	bl	80074dc <ReadReceiveBuffer>

					AddToManualBuffer(&read_var_varcount, 1);
 800688a:	2101      	movs	r1, #1
 800688c:	486f      	ldr	r0, [pc, #444]	; (8006a4c <telem_loop+0xd0c>)
 800688e:	f000 fdcf 	bl	8007430 <AddToManualBuffer>

					for(int i = 0; i < read_var_varcount; i++)
 8006892:	2300      	movs	r3, #0
 8006894:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006896:	e01f      	b.n	80068d8 <telem_loop+0xb98>
					{
						ReadReceiveBuffer(&current_var, 1);
 8006898:	2101      	movs	r1, #1
 800689a:	4865      	ldr	r0, [pc, #404]	; (8006a30 <telem_loop+0xcf0>)
 800689c:	f000 fe1e 	bl	80074dc <ReadReceiveBuffer>
						//AddToManualBuffer(&direct_access_variables[current_var].width, 1);
						AddToManualBuffer(&direct_access_variables[current_var].var_index, 1);
 80068a0:	4b63      	ldr	r3, [pc, #396]	; (8006a30 <telem_loop+0xcf0>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	00db      	lsls	r3, r3, #3
 80068a6:	4a64      	ldr	r2, [pc, #400]	; (8006a38 <telem_loop+0xcf8>)
 80068a8:	4413      	add	r3, r2
 80068aa:	3305      	adds	r3, #5
 80068ac:	2101      	movs	r1, #1
 80068ae:	4618      	mov	r0, r3
 80068b0:	f000 fdbe 	bl	8007430 <AddToManualBuffer>
						AddToManualBuffer(direct_access_variables[current_var].var, direct_access_variables[current_var].width);
 80068b4:	4b5e      	ldr	r3, [pc, #376]	; (8006a30 <telem_loop+0xcf0>)
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	461a      	mov	r2, r3
 80068ba:	4b5f      	ldr	r3, [pc, #380]	; (8006a38 <telem_loop+0xcf8>)
 80068bc:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 80068c0:	4b5b      	ldr	r3, [pc, #364]	; (8006a30 <telem_loop+0xcf0>)
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	4a5c      	ldr	r2, [pc, #368]	; (8006a38 <telem_loop+0xcf8>)
 80068c6:	00db      	lsls	r3, r3, #3
 80068c8:	4413      	add	r3, r2
 80068ca:	791b      	ldrb	r3, [r3, #4]
 80068cc:	4619      	mov	r1, r3
 80068ce:	f000 fdaf 	bl	8007430 <AddToManualBuffer>
					for(int i = 0; i < read_var_varcount; i++)
 80068d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d4:	3301      	adds	r3, #1
 80068d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068d8:	4b5c      	ldr	r3, [pc, #368]	; (8006a4c <telem_loop+0xd0c>)
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	461a      	mov	r2, r3
 80068de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e0:	4293      	cmp	r3, r2
 80068e2:	dbd9      	blt.n	8006898 <telem_loop+0xb58>
					}

					if(manual_packet_count < 31)
 80068e4:	4b57      	ldr	r3, [pc, #348]	; (8006a44 <telem_loop+0xd04>)
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	2b1e      	cmp	r3, #30
 80068ea:	f200 81a5 	bhi.w	8006c38 <telem_loop+0xef8>
						manual_packet_count++;
 80068ee:	4b55      	ldr	r3, [pc, #340]	; (8006a44 <telem_loop+0xd04>)
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	3301      	adds	r3, #1
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	4b53      	ldr	r3, [pc, #332]	; (8006a44 <telem_loop+0xd04>)
 80068f8:	701a      	strb	r2, [r3, #0]

					break;
 80068fa:	e19d      	b.n	8006c38 <telem_loop+0xef8>
				case GPS_PACKET_UPDATE:
					telem_receive_read_index = 1;
 80068fc:	4b4f      	ldr	r3, [pc, #316]	; (8006a3c <telem_loop+0xcfc>)
 80068fe:	2201      	movs	r2, #1
 8006900:	701a      	strb	r2, [r3, #0]
					ReadReceiveBuffer(&sat_count, 1);
 8006902:	2101      	movs	r1, #1
 8006904:	4852      	ldr	r0, [pc, #328]	; (8006a50 <telem_loop+0xd10>)
 8006906:	f000 fde9 	bl	80074dc <ReadReceiveBuffer>

					if(sat_count > 2)
 800690a:	4b51      	ldr	r3, [pc, #324]	; (8006a50 <telem_loop+0xd10>)
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	2b02      	cmp	r3, #2
 8006910:	f240 8194 	bls.w	8006c3c <telem_loop+0xefc>
					{
						last_raw_gps_lat = raw_gps_lat;
 8006914:	4b4f      	ldr	r3, [pc, #316]	; (8006a54 <telem_loop+0xd14>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a4f      	ldr	r2, [pc, #316]	; (8006a58 <telem_loop+0xd18>)
 800691a:	6013      	str	r3, [r2, #0]
						last_raw_gps_lon = raw_gps_lon;
 800691c:	4b4f      	ldr	r3, [pc, #316]	; (8006a5c <telem_loop+0xd1c>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a4f      	ldr	r2, [pc, #316]	; (8006a60 <telem_loop+0xd20>)
 8006922:	6013      	str	r3, [r2, #0]

						ReadReceiveBuffer((uint8_t *)&raw_gps_lat, 4);
 8006924:	2104      	movs	r1, #4
 8006926:	484b      	ldr	r0, [pc, #300]	; (8006a54 <telem_loop+0xd14>)
 8006928:	f000 fdd8 	bl	80074dc <ReadReceiveBuffer>
						ReadReceiveBuffer((uint8_t *)&raw_gps_lon, 4);
 800692c:	2104      	movs	r1, #4
 800692e:	484b      	ldr	r0, [pc, #300]	; (8006a5c <telem_loop+0xd1c>)
 8006930:	f000 fdd4 	bl	80074dc <ReadReceiveBuffer>

						calculated_lat_error = (float)(raw_gps_lat - current_lat_setpoint);
 8006934:	4b47      	ldr	r3, [pc, #284]	; (8006a54 <telem_loop+0xd14>)
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	4b4a      	ldr	r3, [pc, #296]	; (8006a64 <telem_loop+0xd24>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	ee07 3a90 	vmov	s15, r3
 8006942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006946:	4b48      	ldr	r3, [pc, #288]	; (8006a68 <telem_loop+0xd28>)
 8006948:	edc3 7a00 	vstr	s15, [r3]
						calculated_lon_error = (float)(current_lon_setpoint - raw_gps_lon);
 800694c:	4b47      	ldr	r3, [pc, #284]	; (8006a6c <telem_loop+0xd2c>)
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	4b42      	ldr	r3, [pc, #264]	; (8006a5c <telem_loop+0xd1c>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	ee07 3a90 	vmov	s15, r3
 800695a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800695e:	4b44      	ldr	r3, [pc, #272]	; (8006a70 <telem_loop+0xd30>)
 8006960:	edc3 7a00 	vstr	s15, [r3]

						lat_add = (float)(raw_gps_lat - last_raw_gps_lat) / (float)20.000;
 8006964:	4b3b      	ldr	r3, [pc, #236]	; (8006a54 <telem_loop+0xd14>)
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	4b3b      	ldr	r3, [pc, #236]	; (8006a58 <telem_loop+0xd18>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	ee07 3a90 	vmov	s15, r3
 8006972:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006976:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800697a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800697e:	4b3d      	ldr	r3, [pc, #244]	; (8006a74 <telem_loop+0xd34>)
 8006980:	edc3 7a00 	vstr	s15, [r3]
						lon_add = (float)(raw_gps_lon - last_raw_gps_lon) / (float)20.000;
 8006984:	4b35      	ldr	r3, [pc, #212]	; (8006a5c <telem_loop+0xd1c>)
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	4b35      	ldr	r3, [pc, #212]	; (8006a60 <telem_loop+0xd20>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	ee07 3a90 	vmov	s15, r3
 8006992:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006996:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800699a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800699e:	4b36      	ldr	r3, [pc, #216]	; (8006a78 <telem_loop+0xd38>)
 80069a0:	edc3 7a00 	vstr	s15, [r3]

						new_gps_data = 1;
 80069a4:	4b35      	ldr	r3, [pc, #212]	; (8006a7c <telem_loop+0xd3c>)
 80069a6:	2201      	movs	r2, #1
 80069a8:	701a      	strb	r2, [r3, #0]

						uint8_t var_indexes[3] = {3, 4, 5};
 80069aa:	4a35      	ldr	r2, [pc, #212]	; (8006a80 <telem_loop+0xd40>)
 80069ac:	1d3b      	adds	r3, r7, #4
 80069ae:	6812      	ldr	r2, [r2, #0]
 80069b0:	4611      	mov	r1, r2
 80069b2:	8019      	strh	r1, [r3, #0]
 80069b4:	3302      	adds	r3, #2
 80069b6:	0c12      	lsrs	r2, r2, #16
 80069b8:	701a      	strb	r2, [r3, #0]

						SendDirectVariablePacket(3, var_indexes);
 80069ba:	1d3b      	adds	r3, r7, #4
 80069bc:	4619      	mov	r1, r3
 80069be:	2003      	movs	r0, #3
 80069c0:	f000 fb9c 	bl	80070fc <SendDirectVariablePacket>
					}

					break;
 80069c4:	e13a      	b.n	8006c3c <telem_loop+0xefc>
				case GPS_MEM_PACKET_UPDATE:
					ClearManualBuffer();
 80069c6:	f000 fc07 	bl	80071d8 <ClearManualBuffer>
					manual_packet_buffer[manual_packet_count].width = 1;
 80069ca:	4b1e      	ldr	r3, [pc, #120]	; (8006a44 <telem_loop+0xd04>)
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	461a      	mov	r2, r3
 80069d0:	491d      	ldr	r1, [pc, #116]	; (8006a48 <telem_loop+0xd08>)
 80069d2:	4613      	mov	r3, r2
 80069d4:	00db      	lsls	r3, r3, #3
 80069d6:	4413      	add	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	440b      	add	r3, r1
 80069de:	3323      	adds	r3, #35	; 0x23
 80069e0:	2201      	movs	r2, #1
 80069e2:	701a      	strb	r2, [r3, #0]
					manual_packet_buffer[manual_packet_count].reliable = 1;
 80069e4:	4b17      	ldr	r3, [pc, #92]	; (8006a44 <telem_loop+0xd04>)
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	461a      	mov	r2, r3
 80069ea:	4917      	ldr	r1, [pc, #92]	; (8006a48 <telem_loop+0xd08>)
 80069ec:	4613      	mov	r3, r2
 80069ee:	00db      	lsls	r3, r3, #3
 80069f0:	4413      	add	r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	440b      	add	r3, r1
 80069f8:	3324      	adds	r3, #36	; 0x24
 80069fa:	2201      	movs	r2, #1
 80069fc:	701a      	strb	r2, [r3, #0]
					AddIDToManualBuffer(GPS_PACKET);
 80069fe:	2008      	movs	r0, #8
 8006a00:	f000 fcfa 	bl	80073f8 <AddIDToManualBuffer>

					telem_receive_read_index = 1;
 8006a04:	4b0d      	ldr	r3, [pc, #52]	; (8006a3c <telem_loop+0xcfc>)
 8006a06:	2201      	movs	r2, #1
 8006a08:	701a      	strb	r2, [r3, #0]
					ReadReceiveBuffer(&modify_var_varcount, 1);	//First index
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	480c      	ldr	r0, [pc, #48]	; (8006a40 <telem_loop+0xd00>)
 8006a0e:	f000 fd65 	bl	80074dc <ReadReceiveBuffer>
					ReadReceiveBuffer(&current_var_width, 1);	//Count
 8006a12:	2101      	movs	r1, #1
 8006a14:	4807      	ldr	r0, [pc, #28]	; (8006a34 <telem_loop+0xcf4>)
 8006a16:	f000 fd61 	bl	80074dc <ReadReceiveBuffer>

					AddToManualBuffer(&modify_var_varcount, 1);
 8006a1a:	2101      	movs	r1, #1
 8006a1c:	4808      	ldr	r0, [pc, #32]	; (8006a40 <telem_loop+0xd00>)
 8006a1e:	f000 fd07 	bl	8007430 <AddToManualBuffer>
					AddToManualBuffer(&current_var_width, 1);
 8006a22:	2101      	movs	r1, #1
 8006a24:	4803      	ldr	r0, [pc, #12]	; (8006a34 <telem_loop+0xcf4>)
 8006a26:	f000 fd03 	bl	8007430 <AddToManualBuffer>

					for(int i = 0; i < current_var_width; i++)
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a2e:	e074      	b.n	8006b1a <telem_loop+0xdda>
 8006a30:	20003cd4 	.word	0x20003cd4
 8006a34:	20003cfd 	.word	0x20003cfd
 8006a38:	20001498 	.word	0x20001498
 8006a3c:	200003b3 	.word	0x200003b3
 8006a40:	20003ccc 	.word	0x20003ccc
 8006a44:	200003b0 	.word	0x200003b0
 8006a48:	20002258 	.word	0x20002258
 8006a4c:	20003cc4 	.word	0x20003cc4
 8006a50:	20001248 	.word	0x20001248
 8006a54:	20000fdc 	.word	0x20000fdc
 8006a58:	20000c1c 	.word	0x20000c1c
 8006a5c:	20000fe0 	.word	0x20000fe0
 8006a60:	200008a4 	.word	0x200008a4
 8006a64:	20000c24 	.word	0x20000c24
 8006a68:	200008a0 	.word	0x200008a0
 8006a6c:	200008ec 	.word	0x200008ec
 8006a70:	20000cb4 	.word	0x20000cb4
 8006a74:	20001254 	.word	0x20001254
 8006a78:	20000cac 	.word	0x20000cac
 8006a7c:	20000328 	.word	0x20000328
 8006a80:	08015630 	.word	0x08015630
					{
						//ReadReceiveBuffer(&current_var, 1);
						ReadReceiveBuffer((uint8_t *)&lat_mem[modify_var_varcount + i], 4);
 8006a84:	4baf      	ldr	r3, [pc, #700]	; (8006d44 <telem_loop+0x1004>)
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8c:	4413      	add	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4aad      	ldr	r2, [pc, #692]	; (8006d48 <telem_loop+0x1008>)
 8006a92:	4413      	add	r3, r2
 8006a94:	2104      	movs	r1, #4
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 fd20 	bl	80074dc <ReadReceiveBuffer>
						ReadReceiveBuffer((uint8_t *)&lon_mem[modify_var_varcount + i], 4);
 8006a9c:	4ba9      	ldr	r3, [pc, #676]	; (8006d44 <telem_loop+0x1004>)
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa4:	4413      	add	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4aa8      	ldr	r2, [pc, #672]	; (8006d4c <telem_loop+0x100c>)
 8006aaa:	4413      	add	r3, r2
 8006aac:	2104      	movs	r1, #4
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 fd14 	bl	80074dc <ReadReceiveBuffer>
						ReadReceiveBuffer((uint8_t *)&alt_mem[modify_var_varcount + i], 4);
 8006ab4:	4ba3      	ldr	r3, [pc, #652]	; (8006d44 <telem_loop+0x1004>)
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	461a      	mov	r2, r3
 8006aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abc:	4413      	add	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4aa3      	ldr	r2, [pc, #652]	; (8006d50 <telem_loop+0x1010>)
 8006ac2:	4413      	add	r3, r2
 8006ac4:	2104      	movs	r1, #4
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 fd08 	bl	80074dc <ReadReceiveBuffer>

						AddToManualBuffer((uint8_t *)&lat_mem[modify_var_varcount + i], 4);
 8006acc:	4b9d      	ldr	r3, [pc, #628]	; (8006d44 <telem_loop+0x1004>)
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad4:	4413      	add	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4a9b      	ldr	r2, [pc, #620]	; (8006d48 <telem_loop+0x1008>)
 8006ada:	4413      	add	r3, r2
 8006adc:	2104      	movs	r1, #4
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f000 fca6 	bl	8007430 <AddToManualBuffer>
						AddToManualBuffer((uint8_t *)&lon_mem[modify_var_varcount + i], 4);
 8006ae4:	4b97      	ldr	r3, [pc, #604]	; (8006d44 <telem_loop+0x1004>)
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	461a      	mov	r2, r3
 8006aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aec:	4413      	add	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4a96      	ldr	r2, [pc, #600]	; (8006d4c <telem_loop+0x100c>)
 8006af2:	4413      	add	r3, r2
 8006af4:	2104      	movs	r1, #4
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 fc9a 	bl	8007430 <AddToManualBuffer>
						AddToManualBuffer((uint8_t *)&alt_mem[modify_var_varcount + i], 4);
 8006afc:	4b91      	ldr	r3, [pc, #580]	; (8006d44 <telem_loop+0x1004>)
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	461a      	mov	r2, r3
 8006b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b04:	4413      	add	r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	4a91      	ldr	r2, [pc, #580]	; (8006d50 <telem_loop+0x1010>)
 8006b0a:	4413      	add	r3, r2
 8006b0c:	2104      	movs	r1, #4
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 fc8e 	bl	8007430 <AddToManualBuffer>
					for(int i = 0; i < current_var_width; i++)
 8006b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b16:	3301      	adds	r3, #1
 8006b18:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b1a:	4b8e      	ldr	r3, [pc, #568]	; (8006d54 <telem_loop+0x1014>)
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b22:	4293      	cmp	r3, r2
 8006b24:	dbae      	blt.n	8006a84 <telem_loop+0xd44>
					}

					if(manual_packet_count < 31)
 8006b26:	4b8c      	ldr	r3, [pc, #560]	; (8006d58 <telem_loop+0x1018>)
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	2b1e      	cmp	r3, #30
 8006b2c:	f200 8088 	bhi.w	8006c40 <telem_loop+0xf00>
						manual_packet_count++;
 8006b30:	4b89      	ldr	r3, [pc, #548]	; (8006d58 <telem_loop+0x1018>)
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	3301      	adds	r3, #1
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	4b87      	ldr	r3, [pc, #540]	; (8006d58 <telem_loop+0x1018>)
 8006b3a:	701a      	strb	r2, [r3, #0]

					break;
 8006b3c:	e080      	b.n	8006c40 <telem_loop+0xf00>
				case GPS_PACKET_REQUEST:	//Send packets to GCS
					ClearManualBuffer();
 8006b3e:	f000 fb4b 	bl	80071d8 <ClearManualBuffer>
					manual_packet_buffer[manual_packet_count].width = 1;
 8006b42:	4b85      	ldr	r3, [pc, #532]	; (8006d58 <telem_loop+0x1018>)
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	461a      	mov	r2, r3
 8006b48:	4984      	ldr	r1, [pc, #528]	; (8006d5c <telem_loop+0x101c>)
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	00db      	lsls	r3, r3, #3
 8006b4e:	4413      	add	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	440b      	add	r3, r1
 8006b56:	3323      	adds	r3, #35	; 0x23
 8006b58:	2201      	movs	r2, #1
 8006b5a:	701a      	strb	r2, [r3, #0]
					manual_packet_buffer[manual_packet_count].reliable = 1;
 8006b5c:	4b7e      	ldr	r3, [pc, #504]	; (8006d58 <telem_loop+0x1018>)
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	461a      	mov	r2, r3
 8006b62:	497e      	ldr	r1, [pc, #504]	; (8006d5c <telem_loop+0x101c>)
 8006b64:	4613      	mov	r3, r2
 8006b66:	00db      	lsls	r3, r3, #3
 8006b68:	4413      	add	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	440b      	add	r3, r1
 8006b70:	3324      	adds	r3, #36	; 0x24
 8006b72:	2201      	movs	r2, #1
 8006b74:	701a      	strb	r2, [r3, #0]
					AddIDToManualBuffer(GPS_PACKET);
 8006b76:	2008      	movs	r0, #8
 8006b78:	f000 fc3e 	bl	80073f8 <AddIDToManualBuffer>

					telem_receive_read_index = 1;
 8006b7c:	4b78      	ldr	r3, [pc, #480]	; (8006d60 <telem_loop+0x1020>)
 8006b7e:	2201      	movs	r2, #1
 8006b80:	701a      	strb	r2, [r3, #0]
					ReadReceiveBuffer(&read_var_varcount, 1);//Using this as first index to send
 8006b82:	2101      	movs	r1, #1
 8006b84:	4877      	ldr	r0, [pc, #476]	; (8006d64 <telem_loop+0x1024>)
 8006b86:	f000 fca9 	bl	80074dc <ReadReceiveBuffer>
					ReadReceiveBuffer(&current_var_width, 1);//Using this as index count
 8006b8a:	2101      	movs	r1, #1
 8006b8c:	4871      	ldr	r0, [pc, #452]	; (8006d54 <telem_loop+0x1014>)
 8006b8e:	f000 fca5 	bl	80074dc <ReadReceiveBuffer>

					AddToManualBuffer(&read_var_varcount, 1);
 8006b92:	2101      	movs	r1, #1
 8006b94:	4873      	ldr	r0, [pc, #460]	; (8006d64 <telem_loop+0x1024>)
 8006b96:	f000 fc4b 	bl	8007430 <AddToManualBuffer>
					AddToManualBuffer(&current_var_width, 1);
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	486d      	ldr	r0, [pc, #436]	; (8006d54 <telem_loop+0x1014>)
 8006b9e:	f000 fc47 	bl	8007430 <AddToManualBuffer>

					for(int i = 0; i < current_var_width; i++)
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba6:	e026      	b.n	8006bf6 <telem_loop+0xeb6>
					{
						//AddToManualBuffer(&direct_access_variables[current_var].width, 1);
						AddToManualBuffer((uint8_t *)&lat_mem[read_var_varcount + i], 4);
 8006ba8:	4b6e      	ldr	r3, [pc, #440]	; (8006d64 <telem_loop+0x1024>)
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	461a      	mov	r2, r3
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	4413      	add	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4a64      	ldr	r2, [pc, #400]	; (8006d48 <telem_loop+0x1008>)
 8006bb6:	4413      	add	r3, r2
 8006bb8:	2104      	movs	r1, #4
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 fc38 	bl	8007430 <AddToManualBuffer>
						AddToManualBuffer((uint8_t *)&lon_mem[read_var_varcount + i], 4);
 8006bc0:	4b68      	ldr	r3, [pc, #416]	; (8006d64 <telem_loop+0x1024>)
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	4413      	add	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4a5f      	ldr	r2, [pc, #380]	; (8006d4c <telem_loop+0x100c>)
 8006bce:	4413      	add	r3, r2
 8006bd0:	2104      	movs	r1, #4
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 fc2c 	bl	8007430 <AddToManualBuffer>
						AddToManualBuffer((uint8_t *)&alt_mem[read_var_varcount + i], 4);
 8006bd8:	4b62      	ldr	r3, [pc, #392]	; (8006d64 <telem_loop+0x1024>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	461a      	mov	r2, r3
 8006bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be0:	4413      	add	r3, r2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	4a5a      	ldr	r2, [pc, #360]	; (8006d50 <telem_loop+0x1010>)
 8006be6:	4413      	add	r3, r2
 8006be8:	2104      	movs	r1, #4
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 fc20 	bl	8007430 <AddToManualBuffer>
					for(int i = 0; i < current_var_width; i++)
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8006bf6:	4b57      	ldr	r3, [pc, #348]	; (8006d54 <telem_loop+0x1014>)
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	dbd2      	blt.n	8006ba8 <telem_loop+0xe68>
					}

					if(manual_packet_count < 31)
 8006c02:	4b55      	ldr	r3, [pc, #340]	; (8006d58 <telem_loop+0x1018>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	2b1e      	cmp	r3, #30
 8006c08:	d81c      	bhi.n	8006c44 <telem_loop+0xf04>
						manual_packet_count++;
 8006c0a:	4b53      	ldr	r3, [pc, #332]	; (8006d58 <telem_loop+0x1018>)
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	4b51      	ldr	r3, [pc, #324]	; (8006d58 <telem_loop+0x1018>)
 8006c14:	701a      	strb	r2, [r3, #0]

					break;
 8006c16:	e015      	b.n	8006c44 <telem_loop+0xf04>
					break;
 8006c18:	bf00      	nop
 8006c1a:	e014      	b.n	8006c46 <telem_loop+0xf06>
					break;
 8006c1c:	bf00      	nop
 8006c1e:	e012      	b.n	8006c46 <telem_loop+0xf06>
					break;
 8006c20:	bf00      	nop
 8006c22:	e010      	b.n	8006c46 <telem_loop+0xf06>
					break;
 8006c24:	bf00      	nop
 8006c26:	e00e      	b.n	8006c46 <telem_loop+0xf06>
					break;
 8006c28:	bf00      	nop
 8006c2a:	e00c      	b.n	8006c46 <telem_loop+0xf06>
					break;
 8006c2c:	bf00      	nop
 8006c2e:	e00a      	b.n	8006c46 <telem_loop+0xf06>
					break;
 8006c30:	bf00      	nop
 8006c32:	e008      	b.n	8006c46 <telem_loop+0xf06>
					break;
 8006c34:	bf00      	nop
 8006c36:	e006      	b.n	8006c46 <telem_loop+0xf06>
					break;
 8006c38:	bf00      	nop
 8006c3a:	e004      	b.n	8006c46 <telem_loop+0xf06>
					break;
 8006c3c:	bf00      	nop
 8006c3e:	e002      	b.n	8006c46 <telem_loop+0xf06>
					break;
 8006c40:	bf00      	nop
 8006c42:	e000      	b.n	8006c46 <telem_loop+0xf06>
					break;
 8006c44:	bf00      	nop
				}
			}
		}

		if(tx_done)
 8006c46:	4b48      	ldr	r3, [pc, #288]	; (8006d68 <telem_loop+0x1028>)
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d041      	beq.n	8006cd4 <telem_loop+0xf94>
		{
			tx_done = 0;
 8006c50:	4b45      	ldr	r3, [pc, #276]	; (8006d68 <telem_loop+0x1028>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	701a      	strb	r2, [r3, #0]
			if(!camera_telem)
 8006c56:	4b45      	ldr	r3, [pc, #276]	; (8006d6c <telem_loop+0x102c>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d13a      	bne.n	8006cd4 <telem_loop+0xf94>
			{
				if(last_tx_type == 2 && manual_packet_count > 0)
 8006c5e:	4b44      	ldr	r3, [pc, #272]	; (8006d70 <telem_loop+0x1030>)
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d136      	bne.n	8006cd4 <telem_loop+0xf94>
 8006c66:	4b3c      	ldr	r3, [pc, #240]	; (8006d58 <telem_loop+0x1018>)
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d032      	beq.n	8006cd4 <telem_loop+0xf94>
				{
					for(int i = 0; i < manual_packet_count - 1; i++)
 8006c6e:	2300      	movs	r3, #0
 8006c70:	623b      	str	r3, [r7, #32]
 8006c72:	e023      	b.n	8006cbc <telem_loop+0xf7c>
					{
						for(int j = 0; j < 35; j++)
 8006c74:	2300      	movs	r3, #0
 8006c76:	61fb      	str	r3, [r7, #28]
 8006c78:	e01a      	b.n	8006cb0 <telem_loop+0xf70>
						{
							manual_packet_buffer[i].payload[j] = manual_packet_buffer[i + 1].payload[j];
 8006c7a:	6a3b      	ldr	r3, [r7, #32]
 8006c7c:	1c5a      	adds	r2, r3, #1
 8006c7e:	4937      	ldr	r1, [pc, #220]	; (8006d5c <telem_loop+0x101c>)
 8006c80:	4613      	mov	r3, r2
 8006c82:	00db      	lsls	r3, r3, #3
 8006c84:	4413      	add	r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	18ca      	adds	r2, r1, r3
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	4413      	add	r3, r2
 8006c90:	7818      	ldrb	r0, [r3, #0]
 8006c92:	4932      	ldr	r1, [pc, #200]	; (8006d5c <telem_loop+0x101c>)
 8006c94:	6a3a      	ldr	r2, [r7, #32]
 8006c96:	4613      	mov	r3, r2
 8006c98:	00db      	lsls	r3, r3, #3
 8006c9a:	4413      	add	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	18ca      	adds	r2, r1, r3
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	701a      	strb	r2, [r3, #0]
						for(int j = 0; j < 35; j++)
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	3301      	adds	r3, #1
 8006cae:	61fb      	str	r3, [r7, #28]
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	2b22      	cmp	r3, #34	; 0x22
 8006cb4:	dde1      	ble.n	8006c7a <telem_loop+0xf3a>
					for(int i = 0; i < manual_packet_count - 1; i++)
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	623b      	str	r3, [r7, #32]
 8006cbc:	4b26      	ldr	r3, [pc, #152]	; (8006d58 <telem_loop+0x1018>)
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	6a3a      	ldr	r2, [r7, #32]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	dbd5      	blt.n	8006c74 <telem_loop+0xf34>
						}
					}

					manual_packet_count--;
 8006cc8:	4b23      	ldr	r3, [pc, #140]	; (8006d58 <telem_loop+0x1018>)
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	b2da      	uxtb	r2, r3
 8006cd0:	4b21      	ldr	r3, [pc, #132]	; (8006d58 <telem_loop+0x1018>)
 8006cd2:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		if(waiting_to_rx)
 8006cd4:	4b27      	ldr	r3, [pc, #156]	; (8006d74 <telem_loop+0x1034>)
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d059      	beq.n	8006d92 <telem_loop+0x1052>
		{
			if(!camera_telem)
 8006cde:	4b23      	ldr	r3, [pc, #140]	; (8006d6c <telem_loop+0x102c>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d118      	bne.n	8006d18 <telem_loop+0xfd8>
			{
				if(HAL_I2C_Master_Seq_Receive_IT(&hi2c2, (uint8_t)(0x04 << 1), (uint8_t *)telem_receive_buffer, 34, I2C_LAST_FRAME) != HAL_OK)
 8006ce6:	2320      	movs	r3, #32
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	2322      	movs	r3, #34	; 0x22
 8006cec:	4a22      	ldr	r2, [pc, #136]	; (8006d78 <telem_loop+0x1038>)
 8006cee:	2108      	movs	r1, #8
 8006cf0:	4822      	ldr	r0, [pc, #136]	; (8006d7c <telem_loop+0x103c>)
 8006cf2:	f002 fb1b 	bl	800932c <HAL_I2C_Master_Seq_Receive_IT>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d009      	beq.n	8006d10 <telem_loop+0xfd0>
				{
					transmit_fail_flag = 1;
 8006cfc:	4b20      	ldr	r3, [pc, #128]	; (8006d80 <telem_loop+0x1040>)
 8006cfe:	2201      	movs	r2, #1
 8006d00:	701a      	strb	r2, [r3, #0]
					ack_rate_counter = 0;
 8006d02:	4b20      	ldr	r3, [pc, #128]	; (8006d84 <telem_loop+0x1044>)
 8006d04:	2200      	movs	r2, #0
 8006d06:	701a      	strb	r2, [r3, #0]
					waiting_to_rx = 0;
 8006d08:	4b1a      	ldr	r3, [pc, #104]	; (8006d74 <telem_loop+0x1034>)
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	701a      	strb	r2, [r3, #0]
 8006d0e:	e040      	b.n	8006d92 <telem_loop+0x1052>
				}
				else
				{
					waiting_to_rx = 0;
 8006d10:	4b18      	ldr	r3, [pc, #96]	; (8006d74 <telem_loop+0x1034>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	701a      	strb	r2, [r3, #0]
 8006d16:	e03c      	b.n	8006d92 <telem_loop+0x1052>
					//ack_rate_counter = 0;
				}
			}
			else
			{
				if(HAL_I2C_Master_Seq_Receive_IT(&hi2c2, (uint8_t)(0x58 << 1), (uint8_t *)camera_receive_buf, 32, I2C_LAST_FRAME) != HAL_OK)
 8006d18:	2320      	movs	r3, #32
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	2320      	movs	r3, #32
 8006d1e:	4a1a      	ldr	r2, [pc, #104]	; (8006d88 <telem_loop+0x1048>)
 8006d20:	21b0      	movs	r1, #176	; 0xb0
 8006d22:	4816      	ldr	r0, [pc, #88]	; (8006d7c <telem_loop+0x103c>)
 8006d24:	f002 fb02 	bl	800932c <HAL_I2C_Master_Seq_Receive_IT>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d02e      	beq.n	8006d8c <telem_loop+0x104c>
				{
					transmit_fail_flag = 1;
 8006d2e:	4b14      	ldr	r3, [pc, #80]	; (8006d80 <telem_loop+0x1040>)
 8006d30:	2201      	movs	r2, #1
 8006d32:	701a      	strb	r2, [r3, #0]
					ack_rate_counter = 0;
 8006d34:	4b13      	ldr	r3, [pc, #76]	; (8006d84 <telem_loop+0x1044>)
 8006d36:	2200      	movs	r2, #0
 8006d38:	701a      	strb	r2, [r3, #0]
					waiting_to_rx = 0;
 8006d3a:	4b0e      	ldr	r3, [pc, #56]	; (8006d74 <telem_loop+0x1034>)
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	701a      	strb	r2, [r3, #0]
 8006d40:	e027      	b.n	8006d92 <telem_loop+0x1052>
 8006d42:	bf00      	nop
 8006d44:	20003ccc 	.word	0x20003ccc
 8006d48:	20000cbc 	.word	0x20000cbc
 8006d4c:	20000530 	.word	0x20000530
 8006d50:	200008f8 	.word	0x200008f8
 8006d54:	20003cfd 	.word	0x20003cfd
 8006d58:	200003b0 	.word	0x200003b0
 8006d5c:	20002258 	.word	0x20002258
 8006d60:	200003b3 	.word	0x200003b3
 8006d64:	20003cc4 	.word	0x20003cc4
 8006d68:	200003b8 	.word	0x200003b8
 8006d6c:	200003b9 	.word	0x200003b9
 8006d70:	200003bb 	.word	0x200003bb
 8006d74:	200003b6 	.word	0x200003b6
 8006d78:	20003d04 	.word	0x20003d04
 8006d7c:	20001f4c 	.word	0x20001f4c
 8006d80:	200003b5 	.word	0x200003b5
 8006d84:	200003b4 	.word	0x200003b4
 8006d88:	2000216c 	.word	0x2000216c
				}
				else
				{
					waiting_to_rx = 0;
 8006d8c:	4b9c      	ldr	r3, [pc, #624]	; (8007000 <telem_loop+0x12c0>)
 8006d8e:	2200      	movs	r2, #0
 8006d90:	701a      	strb	r2, [r3, #0]
					//ack_rate_counter = 0;
				}
			}
		}

		if(!waiting_to_rx && GetMicrosDifference(&telem_min_transmit_timer) >= 2500)
 8006d92:	4b9b      	ldr	r3, [pc, #620]	; (8007000 <telem_loop+0x12c0>)
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f040 812c 	bne.w	8006ff6 <telem_loop+0x12b6>
 8006d9e:	4899      	ldr	r0, [pc, #612]	; (8007004 <telem_loop+0x12c4>)
 8006da0:	f7fe fdec 	bl	800597c <GetMicrosDifference>
 8006da4:	4602      	mov	r2, r0
 8006da6:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8006daa:	429a      	cmp	r2, r3
 8006dac:	f240 8123 	bls.w	8006ff6 <telem_loop+0x12b6>
		{
			if(!camera_telem)
 8006db0:	4b95      	ldr	r3, [pc, #596]	; (8007008 <telem_loop+0x12c8>)
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f040 80bb 	bne.w	8006f30 <telem_loop+0x11f0>
			{
				for(int i = 0; i < 35; i++)
 8006dba:	2300      	movs	r3, #0
 8006dbc:	61bb      	str	r3, [r7, #24]
 8006dbe:	e007      	b.n	8006dd0 <telem_loop+0x1090>
				{
					telem_send_buffer[i] = '\0';
 8006dc0:	4a92      	ldr	r2, [pc, #584]	; (800700c <telem_loop+0x12cc>)
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 35; i++)
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	61bb      	str	r3, [r7, #24]
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	2b22      	cmp	r3, #34	; 0x22
 8006dd4:	ddf4      	ble.n	8006dc0 <telem_loop+0x1080>
				}

				if(manual_packet_count > 0)
 8006dd6:	4b8e      	ldr	r3, [pc, #568]	; (8007010 <telem_loop+0x12d0>)
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d029      	beq.n	8006e32 <telem_loop+0x10f2>
				{
					last_tx_type = 2;
 8006dde:	4b8d      	ldr	r3, [pc, #564]	; (8007014 <telem_loop+0x12d4>)
 8006de0:	2202      	movs	r2, #2
 8006de2:	701a      	strb	r2, [r3, #0]

					for(int i = 0; i < manual_packet_buffer[0].width; i++)
 8006de4:	2300      	movs	r3, #0
 8006de6:	617b      	str	r3, [r7, #20]
 8006de8:	e00b      	b.n	8006e02 <telem_loop+0x10c2>
					{
						telem_send_buffer[i] = manual_packet_buffer[0].payload[i];
 8006dea:	4a8b      	ldr	r2, [pc, #556]	; (8007018 <telem_loop+0x12d8>)
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	4413      	add	r3, r2
 8006df0:	7819      	ldrb	r1, [r3, #0]
 8006df2:	4a86      	ldr	r2, [pc, #536]	; (800700c <telem_loop+0x12cc>)
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	4413      	add	r3, r2
 8006df8:	460a      	mov	r2, r1
 8006dfa:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < manual_packet_buffer[0].width; i++)
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	617b      	str	r3, [r7, #20]
 8006e02:	4b85      	ldr	r3, [pc, #532]	; (8007018 <telem_loop+0x12d8>)
 8006e04:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006e08:	461a      	mov	r2, r3
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	dbec      	blt.n	8006dea <telem_loop+0x10aa>
					}

					telem_send_buffer[32] = manual_packet_buffer[0].width;
 8006e10:	4b81      	ldr	r3, [pc, #516]	; (8007018 <telem_loop+0x12d8>)
 8006e12:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8006e16:	4b7d      	ldr	r3, [pc, #500]	; (800700c <telem_loop+0x12cc>)
 8006e18:	f883 2020 	strb.w	r2, [r3, #32]
					telem_send_buffer[33] = manual_packet_buffer[0].reliable;//Unreliable
 8006e1c:	4b7e      	ldr	r3, [pc, #504]	; (8007018 <telem_loop+0x12d8>)
 8006e1e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8006e22:	4b7a      	ldr	r3, [pc, #488]	; (800700c <telem_loop+0x12cc>)
 8006e24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					telem_send_buffer[34] = 0;//No data
 8006e28:	4b78      	ldr	r3, [pc, #480]	; (800700c <telem_loop+0x12cc>)
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8006e30:	e06e      	b.n	8006f10 <telem_loop+0x11d0>
				}
				else
				{
					last_tx_type = 1;
 8006e32:	4b78      	ldr	r3, [pc, #480]	; (8007014 <telem_loop+0x12d4>)
 8006e34:	2201      	movs	r2, #1
 8006e36:	701a      	strb	r2, [r3, #0]

					telem_send_buffer[0] = auto_packet_buffer[auto_packet_counter].id;
 8006e38:	4b78      	ldr	r3, [pc, #480]	; (800701c <telem_loop+0x12dc>)
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	4a78      	ldr	r2, [pc, #480]	; (8007020 <telem_loop+0x12e0>)
 8006e40:	23ac      	movs	r3, #172	; 0xac
 8006e42:	fb03 f301 	mul.w	r3, r3, r1
 8006e46:	4413      	add	r3, r2
 8006e48:	781a      	ldrb	r2, [r3, #0]
 8006e4a:	4b70      	ldr	r3, [pc, #448]	; (800700c <telem_loop+0x12cc>)
 8006e4c:	701a      	strb	r2, [r3, #0]
					uint8_t var_index = 1;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	74fb      	strb	r3, [r7, #19]

					for(int i = 0; i < auto_packet_buffer[auto_packet_counter].var_count; i++)
 8006e52:	2300      	movs	r3, #0
 8006e54:	60fb      	str	r3, [r7, #12]
 8006e56:	e02d      	b.n	8006eb4 <telem_loop+0x1174>
					{
						for(int j = 0; j < auto_packet_buffer[auto_packet_counter].width[i]; j++)
 8006e58:	2300      	movs	r3, #0
 8006e5a:	60bb      	str	r3, [r7, #8]
 8006e5c:	e017      	b.n	8006e8e <telem_loop+0x114e>
						{
							telem_send_buffer[var_index] = *((uint8_t *)(auto_packet_buffer[auto_packet_counter].payload[i]) + j);
 8006e5e:	4b6f      	ldr	r3, [pc, #444]	; (800701c <telem_loop+0x12dc>)
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	461a      	mov	r2, r3
 8006e64:	496e      	ldr	r1, [pc, #440]	; (8007020 <telem_loop+0x12e0>)
 8006e66:	232b      	movs	r3, #43	; 0x2b
 8006e68:	fb03 f202 	mul.w	r2, r3, r2
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	4413      	add	r3, r2
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	440b      	add	r3, r1
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	441a      	add	r2, r3
 8006e7a:	7cfb      	ldrb	r3, [r7, #19]
 8006e7c:	7811      	ldrb	r1, [r2, #0]
 8006e7e:	4a63      	ldr	r2, [pc, #396]	; (800700c <telem_loop+0x12cc>)
 8006e80:	54d1      	strb	r1, [r2, r3]

							var_index++;
 8006e82:	7cfb      	ldrb	r3, [r7, #19]
 8006e84:	3301      	adds	r3, #1
 8006e86:	74fb      	strb	r3, [r7, #19]
						for(int j = 0; j < auto_packet_buffer[auto_packet_counter].width[i]; j++)
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	60bb      	str	r3, [r7, #8]
 8006e8e:	4b63      	ldr	r3, [pc, #396]	; (800701c <telem_loop+0x12dc>)
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	4619      	mov	r1, r3
 8006e94:	4a62      	ldr	r2, [pc, #392]	; (8007020 <telem_loop+0x12e0>)
 8006e96:	23ac      	movs	r3, #172	; 0xac
 8006e98:	fb03 f301 	mul.w	r3, r3, r1
 8006e9c:	441a      	add	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	3384      	adds	r3, #132	; 0x84
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	dbd7      	blt.n	8006e5e <telem_loop+0x111e>
					for(int i = 0; i < auto_packet_buffer[auto_packet_counter].var_count; i++)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	60fb      	str	r3, [r7, #12]
 8006eb4:	4b59      	ldr	r3, [pc, #356]	; (800701c <telem_loop+0x12dc>)
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	4619      	mov	r1, r3
 8006eba:	4a59      	ldr	r2, [pc, #356]	; (8007020 <telem_loop+0x12e0>)
 8006ebc:	23ac      	movs	r3, #172	; 0xac
 8006ebe:	fb03 f301 	mul.w	r3, r3, r1
 8006ec2:	4413      	add	r3, r2
 8006ec4:	33a5      	adds	r3, #165	; 0xa5
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	dbc3      	blt.n	8006e58 <telem_loop+0x1118>
						}
					}

					telem_send_buffer[32] = var_index;
 8006ed0:	4a4e      	ldr	r2, [pc, #312]	; (800700c <telem_loop+0x12cc>)
 8006ed2:	7cfb      	ldrb	r3, [r7, #19]
 8006ed4:	f882 3020 	strb.w	r3, [r2, #32]
					telem_send_buffer[33] = auto_packet_buffer[auto_packet_counter].reliable;
 8006ed8:	4b50      	ldr	r3, [pc, #320]	; (800701c <telem_loop+0x12dc>)
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	4619      	mov	r1, r3
 8006ede:	4a50      	ldr	r2, [pc, #320]	; (8007020 <telem_loop+0x12e0>)
 8006ee0:	23ac      	movs	r3, #172	; 0xac
 8006ee2:	fb03 f301 	mul.w	r3, r3, r1
 8006ee6:	4413      	add	r3, r2
 8006ee8:	33a4      	adds	r3, #164	; 0xa4
 8006eea:	781a      	ldrb	r2, [r3, #0]
 8006eec:	4b47      	ldr	r3, [pc, #284]	; (800700c <telem_loop+0x12cc>)
 8006eee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

					auto_packet_counter++;
 8006ef2:	4b4a      	ldr	r3, [pc, #296]	; (800701c <telem_loop+0x12dc>)
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	b2da      	uxtb	r2, r3
 8006efa:	4b48      	ldr	r3, [pc, #288]	; (800701c <telem_loop+0x12dc>)
 8006efc:	701a      	strb	r2, [r3, #0]

					if(auto_packet_counter >= auto_packet_count)
 8006efe:	4b47      	ldr	r3, [pc, #284]	; (800701c <telem_loop+0x12dc>)
 8006f00:	781a      	ldrb	r2, [r3, #0]
 8006f02:	4b48      	ldr	r3, [pc, #288]	; (8007024 <telem_loop+0x12e4>)
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d302      	bcc.n	8006f10 <telem_loop+0x11d0>
						auto_packet_counter = 0;
 8006f0a:	4b44      	ldr	r3, [pc, #272]	; (800701c <telem_loop+0x12dc>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	701a      	strb	r2, [r3, #0]
				}

				camera_telem_counter++;
 8006f10:	4b45      	ldr	r3, [pc, #276]	; (8007028 <telem_loop+0x12e8>)
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	3301      	adds	r3, #1
 8006f16:	b2da      	uxtb	r2, r3
 8006f18:	4b43      	ldr	r3, [pc, #268]	; (8007028 <telem_loop+0x12e8>)
 8006f1a:	701a      	strb	r2, [r3, #0]

				if(camera_telem_counter >= 12)
 8006f1c:	4b42      	ldr	r3, [pc, #264]	; (8007028 <telem_loop+0x12e8>)
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	2b0b      	cmp	r3, #11
 8006f22:	d905      	bls.n	8006f30 <telem_loop+0x11f0>
				{
					camera_telem_counter = 0;
 8006f24:	4b40      	ldr	r3, [pc, #256]	; (8007028 <telem_loop+0x12e8>)
 8006f26:	2200      	movs	r2, #0
 8006f28:	701a      	strb	r2, [r3, #0]
					camera_telem = 1;
 8006f2a:	4b37      	ldr	r3, [pc, #220]	; (8007008 <telem_loop+0x12c8>)
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	701a      	strb	r2, [r3, #0]
			//sprintf((char*)send_buffer, "%c%c%lu%s%hd%s", 0x09 , strlen((char*)send_buffer), GetMicrosDifference(&test_millis_timer)/*ppm_channels[2]*/, ":", test_gyro_x, "\r\n");//uint32_t

			//sprintf((char*)telem_send_buffer, "%lu%s%ld%lu%s", how_long_to_loop/*ppm_channels[2]*/, ":", ((int32_t)gyro_x), (uint32_t)abs((gyro_x - ((int32_t)gyro_x)) * 10), "\r\n");//uint32_t
			//sprintf((char*)telem_send_buffer, "%c%c%lu%s%ld%lu%s", 0x09 , strlen((char*)telem_send_buffer), how_long_to_loop/*ppm_channels[2]*/, ":", ((int32_t)gyro_x), (uint32_t)abs((gyro_x - ((int32_t)gyro_x)) * 10), "\r\n");//uint32_t

			telem_send_buffer[33] = 0;//Unreliable
 8006f30:	4b36      	ldr	r3, [pc, #216]	; (800700c <telem_loop+0x12cc>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			telem_send_buffer[34] = 0;//No data
 8006f38:	4b34      	ldr	r3, [pc, #208]	; (800700c <telem_loop+0x12cc>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			//ack_rate_counter = 0;
			if(!camera_telem)
 8006f40:	4b31      	ldr	r3, [pc, #196]	; (8007008 <telem_loop+0x12c8>)
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d13a      	bne.n	8006fbe <telem_loop+0x127e>
			{
				if(ack_rate_counter < 0xFF)
 8006f48:	4b38      	ldr	r3, [pc, #224]	; (800702c <telem_loop+0x12ec>)
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2bff      	cmp	r3, #255	; 0xff
 8006f50:	d006      	beq.n	8006f60 <telem_loop+0x1220>
					ack_rate_counter++;
 8006f52:	4b36      	ldr	r3, [pc, #216]	; (800702c <telem_loop+0x12ec>)
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	3301      	adds	r3, #1
 8006f5a:	b2da      	uxtb	r2, r3
 8006f5c:	4b33      	ldr	r3, [pc, #204]	; (800702c <telem_loop+0x12ec>)
 8006f5e:	701a      	strb	r2, [r3, #0]

				if(ack_rate_counter == ack_rate)
 8006f60:	4b32      	ldr	r3, [pc, #200]	; (800702c <telem_loop+0x12ec>)
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	4b32      	ldr	r3, [pc, #200]	; (8007030 <telem_loop+0x12f0>)
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d115      	bne.n	8006f9a <telem_loop+0x125a>
				{
					//telem_send_buffer[34] = 1;

					if(HAL_I2C_Master_Seq_Transmit_IT(&hi2c2, (uint8_t)(0x04 << 1), (uint8_t *)telem_send_buffer, 35, I2C_FIRST_FRAME) != HAL_OK)
 8006f6e:	2301      	movs	r3, #1
 8006f70:	9300      	str	r3, [sp, #0]
 8006f72:	2323      	movs	r3, #35	; 0x23
 8006f74:	4a25      	ldr	r2, [pc, #148]	; (800700c <telem_loop+0x12cc>)
 8006f76:	2108      	movs	r1, #8
 8006f78:	482e      	ldr	r0, [pc, #184]	; (8007034 <telem_loop+0x12f4>)
 8006f7a:	f002 f919 	bl	80091b0 <HAL_I2C_Master_Seq_Transmit_IT>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d006      	beq.n	8006f92 <telem_loop+0x1252>
					{
						transmit_fail_flag = 1;
 8006f84:	4b2c      	ldr	r3, [pc, #176]	; (8007038 <telem_loop+0x12f8>)
 8006f86:	2201      	movs	r2, #1
 8006f88:	701a      	strb	r2, [r3, #0]
						ack_rate_counter = 0;
 8006f8a:	4b28      	ldr	r3, [pc, #160]	; (800702c <telem_loop+0x12ec>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	701a      	strb	r2, [r3, #0]
 8006f90:	e02c      	b.n	8006fec <telem_loop+0x12ac>
					}
					else
					{
						waiting_to_rx = 1;
 8006f92:	4b1b      	ldr	r3, [pc, #108]	; (8007000 <telem_loop+0x12c0>)
 8006f94:	2201      	movs	r2, #1
 8006f96:	701a      	strb	r2, [r3, #0]
 8006f98:	e028      	b.n	8006fec <telem_loop+0x12ac>
				}
				else
				{
					//telem_send_buffer[34] = 0;

					if(HAL_I2C_Master_Seq_Transmit_IT(&hi2c2, (uint8_t)(0x04 << 1), (uint8_t *)telem_send_buffer, 35, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 8006f9a:	2308      	movs	r3, #8
 8006f9c:	9300      	str	r3, [sp, #0]
 8006f9e:	2323      	movs	r3, #35	; 0x23
 8006fa0:	4a1a      	ldr	r2, [pc, #104]	; (800700c <telem_loop+0x12cc>)
 8006fa2:	2108      	movs	r1, #8
 8006fa4:	4823      	ldr	r0, [pc, #140]	; (8007034 <telem_loop+0x12f4>)
 8006fa6:	f002 f903 	bl	80091b0 <HAL_I2C_Master_Seq_Transmit_IT>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d01d      	beq.n	8006fec <telem_loop+0x12ac>
					{
						transmit_fail_flag = 1;
 8006fb0:	4b21      	ldr	r3, [pc, #132]	; (8007038 <telem_loop+0x12f8>)
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	701a      	strb	r2, [r3, #0]
						ack_rate_counter = 0;
 8006fb6:	4b1d      	ldr	r3, [pc, #116]	; (800702c <telem_loop+0x12ec>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	701a      	strb	r2, [r3, #0]
 8006fbc:	e016      	b.n	8006fec <telem_loop+0x12ac>
					}
				}
			}
			else
			{
				if(HAL_I2C_Master_Seq_Transmit_IT(&hi2c2, (uint8_t)(0x58 << 1), (uint8_t *)camera_send_buf, 32, I2C_FIRST_FRAME) != HAL_OK)
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	2320      	movs	r3, #32
 8006fc4:	4a1d      	ldr	r2, [pc, #116]	; (800703c <telem_loop+0x12fc>)
 8006fc6:	21b0      	movs	r1, #176	; 0xb0
 8006fc8:	481a      	ldr	r0, [pc, #104]	; (8007034 <telem_loop+0x12f4>)
 8006fca:	f002 f8f1 	bl	80091b0 <HAL_I2C_Master_Seq_Transmit_IT>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d003      	beq.n	8006fdc <telem_loop+0x129c>
				{
					transmit_fail_flag = 1;
 8006fd4:	4b18      	ldr	r3, [pc, #96]	; (8007038 <telem_loop+0x12f8>)
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	701a      	strb	r2, [r3, #0]
 8006fda:	e007      	b.n	8006fec <telem_loop+0x12ac>
					//ack_rate_counter = 0;
				}
				else
				{
					waiting_to_rx = 1;
 8006fdc:	4b08      	ldr	r3, [pc, #32]	; (8007000 <telem_loop+0x12c0>)
 8006fde:	2201      	movs	r2, #1
 8006fe0:	701a      	strb	r2, [r3, #0]
					camera_telem_timeout_timer = GetMicros();
 8006fe2:	f7fe fc9f 	bl	8005924 <GetMicros>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	4b15      	ldr	r3, [pc, #84]	; (8007040 <telem_loop+0x1300>)
 8006fea:	601a      	str	r2, [r3, #0]
				}
			}

			telem_min_transmit_timer = GetMicros();
 8006fec:	f7fe fc9a 	bl	8005924 <GetMicros>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	4b04      	ldr	r3, [pc, #16]	; (8007004 <telem_loop+0x12c4>)
 8006ff4:	601a      	str	r2, [r3, #0]

			//HAL_I2C_Master_Transmit_DMA(&hi2c2, (uint8_t)(0x04 << 1), (uint8_t *)telem_send_buffer, 35);
		}
	}
}
 8006ff6:	bf00      	nop
 8006ff8:	3744      	adds	r7, #68	; 0x44
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ffe:	bf00      	nop
 8007000:	200003b6 	.word	0x200003b6
 8007004:	200026f8 	.word	0x200026f8
 8007008:	200003b9 	.word	0x200003b9
 800700c:	200026fc 	.word	0x200026fc
 8007010:	200003b0 	.word	0x200003b0
 8007014:	200003bb 	.word	0x200003bb
 8007018:	20002258 	.word	0x20002258
 800701c:	200003b2 	.word	0x200003b2
 8007020:	20002724 	.word	0x20002724
 8007024:	200003b1 	.word	0x200003b1
 8007028:	200003ba 	.word	0x200003ba
 800702c:	200003b4 	.word	0x200003b4
 8007030:	20000080 	.word	0x20000080
 8007034:	20001f4c 	.word	0x20001f4c
 8007038:	200003b5 	.word	0x200003b5
 800703c:	200021ec 	.word	0x200021ec
 8007040:	20003cc8 	.word	0x20003cc8

08007044 <SendDynamicVariable>:

void SendDynamicVariable(const char *varName, uint8_t varType, uint8_t *num)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	460b      	mov	r3, r1
 800704e:	607a      	str	r2, [r7, #4]
 8007050:	72fb      	strb	r3, [r7, #11]
	//ClearManualBuffer();
	//sprintf((char*)(manual_packet_buffer[manual_packet_count].payload), "%c%c%c%s", DYNAMIC_VARIABLE_PACKET, varType, strlen((char*)(dynamic_variable_buffer)), dynamic_variable_buffer);
	//manual_packet_buffer[manual_packet_count].width = strlen((char *)(manual_packet_buffer[manual_packet_count].payload));
	//manual_packet_buffer[manual_packet_count].reliable = 1;
	if(manual_packet_count < 31)
 8007052:	4b28      	ldr	r3, [pc, #160]	; (80070f4 <SendDynamicVariable+0xb0>)
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	2b1e      	cmp	r3, #30
 8007058:	d847      	bhi.n	80070ea <SendDynamicVariable+0xa6>
	{
		ClearManualBuffer();
 800705a:	f000 f8bd 	bl	80071d8 <ClearManualBuffer>
		manual_packet_buffer[manual_packet_count].width = 1;
 800705e:	4b25      	ldr	r3, [pc, #148]	; (80070f4 <SendDynamicVariable+0xb0>)
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	461a      	mov	r2, r3
 8007064:	4924      	ldr	r1, [pc, #144]	; (80070f8 <SendDynamicVariable+0xb4>)
 8007066:	4613      	mov	r3, r2
 8007068:	00db      	lsls	r3, r3, #3
 800706a:	4413      	add	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	440b      	add	r3, r1
 8007072:	3323      	adds	r3, #35	; 0x23
 8007074:	2201      	movs	r2, #1
 8007076:	701a      	strb	r2, [r3, #0]
		manual_packet_buffer[manual_packet_count].reliable = 1;
 8007078:	4b1e      	ldr	r3, [pc, #120]	; (80070f4 <SendDynamicVariable+0xb0>)
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	461a      	mov	r2, r3
 800707e:	491e      	ldr	r1, [pc, #120]	; (80070f8 <SendDynamicVariable+0xb4>)
 8007080:	4613      	mov	r3, r2
 8007082:	00db      	lsls	r3, r3, #3
 8007084:	4413      	add	r3, r2
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	440b      	add	r3, r1
 800708c:	3324      	adds	r3, #36	; 0x24
 800708e:	2201      	movs	r2, #1
 8007090:	701a      	strb	r2, [r3, #0]
		AddIDToManualBuffer(DYNAMIC_VARIABLE_PACKET);
 8007092:	200c      	movs	r0, #12
 8007094:	f000 f9b0 	bl	80073f8 <AddIDToManualBuffer>

		uint8_t nameLen = (uint8_t)strlen((char *)varName);
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f7f9 f899 	bl	80001d0 <strlen>
 800709e:	4603      	mov	r3, r0
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	75fb      	strb	r3, [r7, #23]

		AddToManualBuffer(&varType, 1);
 80070a4:	f107 030b 	add.w	r3, r7, #11
 80070a8:	2101      	movs	r1, #1
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 f9c0 	bl	8007430 <AddToManualBuffer>
		AddToManualBuffer(&nameLen, 1);
 80070b0:	f107 0317 	add.w	r3, r7, #23
 80070b4:	2101      	movs	r1, #1
 80070b6:	4618      	mov	r0, r3
 80070b8:	f000 f9ba 	bl	8007430 <AddToManualBuffer>
		if(varType == 0)
 80070bc:	7afb      	ldrb	r3, [r7, #11]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d104      	bne.n	80070cc <SendDynamicVariable+0x88>
			AddToManualBuffer(num, 1);
 80070c2:	2101      	movs	r1, #1
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 f9b3 	bl	8007430 <AddToManualBuffer>
 80070ca:	e003      	b.n	80070d4 <SendDynamicVariable+0x90>
		else
			AddToManualBuffer(num, 4);
 80070cc:	2104      	movs	r1, #4
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f9ae 	bl	8007430 <AddToManualBuffer>

		AddToManualBuffer((uint8_t *)varName, nameLen);
 80070d4:	7dfb      	ldrb	r3, [r7, #23]
 80070d6:	4619      	mov	r1, r3
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f000 f9a9 	bl	8007430 <AddToManualBuffer>

		//if(manual_packet_count < 31)
		manual_packet_count++;
 80070de:	4b05      	ldr	r3, [pc, #20]	; (80070f4 <SendDynamicVariable+0xb0>)
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	3301      	adds	r3, #1
 80070e4:	b2da      	uxtb	r2, r3
 80070e6:	4b03      	ldr	r3, [pc, #12]	; (80070f4 <SendDynamicVariable+0xb0>)
 80070e8:	701a      	strb	r2, [r3, #0]
	}
}
 80070ea:	bf00      	nop
 80070ec:	3718      	adds	r7, #24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	200003b0 	.word	0x200003b0
 80070f8:	20002258 	.word	0x20002258

080070fc <SendDirectVariablePacket>:

void SendDirectVariablePacket(uint8_t varcount, uint8_t *index)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	4603      	mov	r3, r0
 8007104:	6039      	str	r1, [r7, #0]
 8007106:	71fb      	strb	r3, [r7, #7]
	ClearManualBuffer();
 8007108:	f000 f866 	bl	80071d8 <ClearManualBuffer>
	manual_packet_buffer[manual_packet_count].width = 1;
 800710c:	4b2f      	ldr	r3, [pc, #188]	; (80071cc <SendDirectVariablePacket+0xd0>)
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	461a      	mov	r2, r3
 8007112:	492f      	ldr	r1, [pc, #188]	; (80071d0 <SendDirectVariablePacket+0xd4>)
 8007114:	4613      	mov	r3, r2
 8007116:	00db      	lsls	r3, r3, #3
 8007118:	4413      	add	r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4413      	add	r3, r2
 800711e:	440b      	add	r3, r1
 8007120:	3323      	adds	r3, #35	; 0x23
 8007122:	2201      	movs	r2, #1
 8007124:	701a      	strb	r2, [r3, #0]
	manual_packet_buffer[manual_packet_count].reliable = 1;
 8007126:	4b29      	ldr	r3, [pc, #164]	; (80071cc <SendDirectVariablePacket+0xd0>)
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	4928      	ldr	r1, [pc, #160]	; (80071d0 <SendDirectVariablePacket+0xd4>)
 800712e:	4613      	mov	r3, r2
 8007130:	00db      	lsls	r3, r3, #3
 8007132:	4413      	add	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4413      	add	r3, r2
 8007138:	440b      	add	r3, r1
 800713a:	3324      	adds	r3, #36	; 0x24
 800713c:	2201      	movs	r2, #1
 800713e:	701a      	strb	r2, [r3, #0]
	AddIDToManualBuffer(READ_VARIABLE_PACKET);
 8007140:	200b      	movs	r0, #11
 8007142:	f000 f959 	bl	80073f8 <AddIDToManualBuffer>

	AddToManualBuffer(&varcount, 1);
 8007146:	1dfb      	adds	r3, r7, #7
 8007148:	2101      	movs	r1, #1
 800714a:	4618      	mov	r0, r3
 800714c:	f000 f970 	bl	8007430 <AddToManualBuffer>

	for(int i = 0; i < varcount; i++)
 8007150:	2300      	movs	r3, #0
 8007152:	60fb      	str	r3, [r7, #12]
 8007154:	e027      	b.n	80071a6 <SendDirectVariablePacket+0xaa>
	{
		AddToManualBuffer(&direct_access_variables[*(index + (uint8_t)i)].var_index, 1);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	b2db      	uxtb	r3, r3
 800715a:	461a      	mov	r2, r3
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	4413      	add	r3, r2
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	00db      	lsls	r3, r3, #3
 8007164:	4a1b      	ldr	r2, [pc, #108]	; (80071d4 <SendDirectVariablePacket+0xd8>)
 8007166:	4413      	add	r3, r2
 8007168:	3305      	adds	r3, #5
 800716a:	2101      	movs	r1, #1
 800716c:	4618      	mov	r0, r3
 800716e:	f000 f95f 	bl	8007430 <AddToManualBuffer>
		AddToManualBuffer(direct_access_variables[*(index + (uint8_t)i)].var, direct_access_variables[*(index + (uint8_t)i)].width);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	b2db      	uxtb	r3, r3
 8007176:	461a      	mov	r2, r3
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	4413      	add	r3, r2
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	461a      	mov	r2, r3
 8007180:	4b14      	ldr	r3, [pc, #80]	; (80071d4 <SendDirectVariablePacket+0xd8>)
 8007182:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	b2db      	uxtb	r3, r3
 800718a:	461a      	mov	r2, r3
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	4413      	add	r3, r2
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	4a10      	ldr	r2, [pc, #64]	; (80071d4 <SendDirectVariablePacket+0xd8>)
 8007194:	00db      	lsls	r3, r3, #3
 8007196:	4413      	add	r3, r2
 8007198:	791b      	ldrb	r3, [r3, #4]
 800719a:	4619      	mov	r1, r3
 800719c:	f000 f948 	bl	8007430 <AddToManualBuffer>
	for(int i = 0; i < varcount; i++)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	3301      	adds	r3, #1
 80071a4:	60fb      	str	r3, [r7, #12]
 80071a6:	79fb      	ldrb	r3, [r7, #7]
 80071a8:	461a      	mov	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	4293      	cmp	r3, r2
 80071ae:	dbd2      	blt.n	8007156 <SendDirectVariablePacket+0x5a>
	}

	if(manual_packet_count < 31)
 80071b0:	4b06      	ldr	r3, [pc, #24]	; (80071cc <SendDirectVariablePacket+0xd0>)
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	2b1e      	cmp	r3, #30
 80071b6:	d805      	bhi.n	80071c4 <SendDirectVariablePacket+0xc8>
		manual_packet_count++;
 80071b8:	4b04      	ldr	r3, [pc, #16]	; (80071cc <SendDirectVariablePacket+0xd0>)
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	3301      	adds	r3, #1
 80071be:	b2da      	uxtb	r2, r3
 80071c0:	4b02      	ldr	r3, [pc, #8]	; (80071cc <SendDirectVariablePacket+0xd0>)
 80071c2:	701a      	strb	r2, [r3, #0]
}
 80071c4:	bf00      	nop
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	200003b0 	.word	0x200003b0
 80071d0:	20002258 	.word	0x20002258
 80071d4:	20001498 	.word	0x20001498

080071d8 <ClearManualBuffer>:

void ClearManualBuffer()
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
	manual_packet_buffer[manual_packet_count].reliable = 0;
 80071de:	4b15      	ldr	r3, [pc, #84]	; (8007234 <ClearManualBuffer+0x5c>)
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	461a      	mov	r2, r3
 80071e4:	4914      	ldr	r1, [pc, #80]	; (8007238 <ClearManualBuffer+0x60>)
 80071e6:	4613      	mov	r3, r2
 80071e8:	00db      	lsls	r3, r3, #3
 80071ea:	4413      	add	r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4413      	add	r3, r2
 80071f0:	440b      	add	r3, r1
 80071f2:	3324      	adds	r3, #36	; 0x24
 80071f4:	2200      	movs	r2, #0
 80071f6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 35; i++)
 80071f8:	2300      	movs	r3, #0
 80071fa:	607b      	str	r3, [r7, #4]
 80071fc:	e010      	b.n	8007220 <ClearManualBuffer+0x48>
	{
		manual_packet_buffer[manual_packet_count].payload[i] = '\0';
 80071fe:	4b0d      	ldr	r3, [pc, #52]	; (8007234 <ClearManualBuffer+0x5c>)
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	461a      	mov	r2, r3
 8007204:	490c      	ldr	r1, [pc, #48]	; (8007238 <ClearManualBuffer+0x60>)
 8007206:	4613      	mov	r3, r2
 8007208:	00db      	lsls	r3, r3, #3
 800720a:	4413      	add	r3, r2
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	4413      	add	r3, r2
 8007210:	18ca      	adds	r2, r1, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4413      	add	r3, r2
 8007216:	2200      	movs	r2, #0
 8007218:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 35; i++)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	3301      	adds	r3, #1
 800721e:	607b      	str	r3, [r7, #4]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2b22      	cmp	r3, #34	; 0x22
 8007224:	ddeb      	ble.n	80071fe <ClearManualBuffer+0x26>
	}
}
 8007226:	bf00      	nop
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	200003b0 	.word	0x200003b0
 8007238:	20002258 	.word	0x20002258

0800723c <ClearPrintBuffer>:

void ClearPrintBuffer()
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
	for(int i = 0; i < 32; i++)
 8007242:	2300      	movs	r3, #0
 8007244:	607b      	str	r3, [r7, #4]
 8007246:	e007      	b.n	8007258 <ClearPrintBuffer+0x1c>
	{
		print_text_buffer[i] = '\0';
 8007248:	4a08      	ldr	r2, [pc, #32]	; (800726c <ClearPrintBuffer+0x30>)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4413      	add	r3, r2
 800724e:	2200      	movs	r2, #0
 8007250:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 32; i++)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	3301      	adds	r3, #1
 8007256:	607b      	str	r3, [r7, #4]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b1f      	cmp	r3, #31
 800725c:	ddf4      	ble.n	8007248 <ClearPrintBuffer+0xc>
	}
}
 800725e:	bf00      	nop
 8007260:	370c      	adds	r7, #12
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	20002234 	.word	0x20002234

08007270 <PrintManualPacket>:
	}
}

//Used to write text to console
void PrintManualPacket()
{
 8007270:	b590      	push	{r4, r7, lr}
 8007272:	b083      	sub	sp, #12
 8007274:	af02      	add	r7, sp, #8
	ClearManualBuffer();
 8007276:	f7ff ffaf 	bl	80071d8 <ClearManualBuffer>

	sprintf((char*)(manual_packet_buffer[manual_packet_count].payload), "%s", print_text_buffer);//uint32_t
 800727a:	4b2c      	ldr	r3, [pc, #176]	; (800732c <PrintManualPacket+0xbc>)
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	461a      	mov	r2, r3
 8007280:	4613      	mov	r3, r2
 8007282:	00db      	lsls	r3, r3, #3
 8007284:	4413      	add	r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	4413      	add	r3, r2
 800728a:	4a29      	ldr	r2, [pc, #164]	; (8007330 <PrintManualPacket+0xc0>)
 800728c:	4413      	add	r3, r2
 800728e:	4929      	ldr	r1, [pc, #164]	; (8007334 <PrintManualPacket+0xc4>)
 8007290:	4618      	mov	r0, r3
 8007292:	f00d ff33 	bl	80150fc <strcpy>
	sprintf((char*)(manual_packet_buffer[manual_packet_count].payload), "%c%c%s", 0x09 , strlen((char*)(manual_packet_buffer[manual_packet_count].payload)), print_text_buffer);
 8007296:	4b25      	ldr	r3, [pc, #148]	; (800732c <PrintManualPacket+0xbc>)
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	461a      	mov	r2, r3
 800729c:	4613      	mov	r3, r2
 800729e:	00db      	lsls	r3, r3, #3
 80072a0:	4413      	add	r3, r2
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	4413      	add	r3, r2
 80072a6:	4a22      	ldr	r2, [pc, #136]	; (8007330 <PrintManualPacket+0xc0>)
 80072a8:	189c      	adds	r4, r3, r2
 80072aa:	4b20      	ldr	r3, [pc, #128]	; (800732c <PrintManualPacket+0xbc>)
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	461a      	mov	r2, r3
 80072b0:	4613      	mov	r3, r2
 80072b2:	00db      	lsls	r3, r3, #3
 80072b4:	4413      	add	r3, r2
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	4413      	add	r3, r2
 80072ba:	4a1d      	ldr	r2, [pc, #116]	; (8007330 <PrintManualPacket+0xc0>)
 80072bc:	4413      	add	r3, r2
 80072be:	4618      	mov	r0, r3
 80072c0:	f7f8 ff86 	bl	80001d0 <strlen>
 80072c4:	4602      	mov	r2, r0
 80072c6:	4b1b      	ldr	r3, [pc, #108]	; (8007334 <PrintManualPacket+0xc4>)
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	4613      	mov	r3, r2
 80072cc:	2209      	movs	r2, #9
 80072ce:	491a      	ldr	r1, [pc, #104]	; (8007338 <PrintManualPacket+0xc8>)
 80072d0:	4620      	mov	r0, r4
 80072d2:	f00d fef3 	bl	80150bc <siprintf>

	manual_packet_buffer[manual_packet_count].width = strlen((char *)(manual_packet_buffer[manual_packet_count].payload));
 80072d6:	4b15      	ldr	r3, [pc, #84]	; (800732c <PrintManualPacket+0xbc>)
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	461a      	mov	r2, r3
 80072dc:	4613      	mov	r3, r2
 80072de:	00db      	lsls	r3, r3, #3
 80072e0:	4413      	add	r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4413      	add	r3, r2
 80072e6:	4a12      	ldr	r2, [pc, #72]	; (8007330 <PrintManualPacket+0xc0>)
 80072e8:	4413      	add	r3, r2
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7f8 ff70 	bl	80001d0 <strlen>
 80072f0:	4601      	mov	r1, r0
 80072f2:	4b0e      	ldr	r3, [pc, #56]	; (800732c <PrintManualPacket+0xbc>)
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	461a      	mov	r2, r3
 80072f8:	b2c8      	uxtb	r0, r1
 80072fa:	490d      	ldr	r1, [pc, #52]	; (8007330 <PrintManualPacket+0xc0>)
 80072fc:	4613      	mov	r3, r2
 80072fe:	00db      	lsls	r3, r3, #3
 8007300:	4413      	add	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	440b      	add	r3, r1
 8007308:	3323      	adds	r3, #35	; 0x23
 800730a:	4602      	mov	r2, r0
 800730c:	701a      	strb	r2, [r3, #0]

	if(manual_packet_count < 31)
 800730e:	4b07      	ldr	r3, [pc, #28]	; (800732c <PrintManualPacket+0xbc>)
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	2b1e      	cmp	r3, #30
 8007314:	d805      	bhi.n	8007322 <PrintManualPacket+0xb2>
		manual_packet_count++;
 8007316:	4b05      	ldr	r3, [pc, #20]	; (800732c <PrintManualPacket+0xbc>)
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	3301      	adds	r3, #1
 800731c:	b2da      	uxtb	r2, r3
 800731e:	4b03      	ldr	r3, [pc, #12]	; (800732c <PrintManualPacket+0xbc>)
 8007320:	701a      	strb	r2, [r3, #0]
}
 8007322:	bf00      	nop
 8007324:	3704      	adds	r7, #4
 8007326:	46bd      	mov	sp, r7
 8007328:	bd90      	pop	{r4, r7, pc}
 800732a:	bf00      	nop
 800732c:	200003b0 	.word	0x200003b0
 8007330:	20002258 	.word	0x20002258
 8007334:	20002234 	.word	0x20002234
 8007338:	08015634 	.word	0x08015634

0800733c <AddToAutoBuffer>:

void AddToAutoBuffer(uint8_t buf_index, uint8_t *num, uint8_t size)
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	4603      	mov	r3, r0
 8007344:	6039      	str	r1, [r7, #0]
 8007346:	71fb      	strb	r3, [r7, #7]
 8007348:	4613      	mov	r3, r2
 800734a:	71bb      	strb	r3, [r7, #6]
	auto_packet_buffer[buf_index].payload[auto_packet_buffer[buf_index].var_count] = (uint8_t *)num;
 800734c:	79fb      	ldrb	r3, [r7, #7]
 800734e:	79fa      	ldrb	r2, [r7, #7]
 8007350:	4928      	ldr	r1, [pc, #160]	; (80073f4 <AddToAutoBuffer+0xb8>)
 8007352:	20ac      	movs	r0, #172	; 0xac
 8007354:	fb00 f202 	mul.w	r2, r0, r2
 8007358:	440a      	add	r2, r1
 800735a:	32a5      	adds	r2, #165	; 0xa5
 800735c:	7812      	ldrb	r2, [r2, #0]
 800735e:	4610      	mov	r0, r2
 8007360:	4a24      	ldr	r2, [pc, #144]	; (80073f4 <AddToAutoBuffer+0xb8>)
 8007362:	212b      	movs	r1, #43	; 0x2b
 8007364:	fb01 f303 	mul.w	r3, r1, r3
 8007368:	4403      	add	r3, r0
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	4413      	add	r3, r2
 800736e:	683a      	ldr	r2, [r7, #0]
 8007370:	605a      	str	r2, [r3, #4]
	auto_packet_buffer[buf_index].width[auto_packet_buffer[buf_index].var_count] = size;
 8007372:	79fb      	ldrb	r3, [r7, #7]
 8007374:	79fa      	ldrb	r2, [r7, #7]
 8007376:	491f      	ldr	r1, [pc, #124]	; (80073f4 <AddToAutoBuffer+0xb8>)
 8007378:	20ac      	movs	r0, #172	; 0xac
 800737a:	fb00 f202 	mul.w	r2, r0, r2
 800737e:	440a      	add	r2, r1
 8007380:	32a5      	adds	r2, #165	; 0xa5
 8007382:	7812      	ldrb	r2, [r2, #0]
 8007384:	4610      	mov	r0, r2
 8007386:	4a1b      	ldr	r2, [pc, #108]	; (80073f4 <AddToAutoBuffer+0xb8>)
 8007388:	21ac      	movs	r1, #172	; 0xac
 800738a:	fb01 f303 	mul.w	r3, r1, r3
 800738e:	4413      	add	r3, r2
 8007390:	4403      	add	r3, r0
 8007392:	3384      	adds	r3, #132	; 0x84
 8007394:	79ba      	ldrb	r2, [r7, #6]
 8007396:	701a      	strb	r2, [r3, #0]
	auto_packet_buffer[buf_index].total_width += size;
 8007398:	79fb      	ldrb	r3, [r7, #7]
 800739a:	4a16      	ldr	r2, [pc, #88]	; (80073f4 <AddToAutoBuffer+0xb8>)
 800739c:	21ac      	movs	r1, #172	; 0xac
 800739e:	fb01 f303 	mul.w	r3, r1, r3
 80073a2:	4413      	add	r3, r2
 80073a4:	33a6      	adds	r3, #166	; 0xa6
 80073a6:	7819      	ldrb	r1, [r3, #0]
 80073a8:	79fb      	ldrb	r3, [r7, #7]
 80073aa:	79ba      	ldrb	r2, [r7, #6]
 80073ac:	440a      	add	r2, r1
 80073ae:	b2d0      	uxtb	r0, r2
 80073b0:	4a10      	ldr	r2, [pc, #64]	; (80073f4 <AddToAutoBuffer+0xb8>)
 80073b2:	21ac      	movs	r1, #172	; 0xac
 80073b4:	fb01 f303 	mul.w	r3, r1, r3
 80073b8:	4413      	add	r3, r2
 80073ba:	33a6      	adds	r3, #166	; 0xa6
 80073bc:	4602      	mov	r2, r0
 80073be:	701a      	strb	r2, [r3, #0]
	auto_packet_buffer[buf_index].var_count += 1;
 80073c0:	79fb      	ldrb	r3, [r7, #7]
 80073c2:	4a0c      	ldr	r2, [pc, #48]	; (80073f4 <AddToAutoBuffer+0xb8>)
 80073c4:	21ac      	movs	r1, #172	; 0xac
 80073c6:	fb01 f303 	mul.w	r3, r1, r3
 80073ca:	4413      	add	r3, r2
 80073cc:	33a5      	adds	r3, #165	; 0xa5
 80073ce:	781a      	ldrb	r2, [r3, #0]
 80073d0:	79fb      	ldrb	r3, [r7, #7]
 80073d2:	3201      	adds	r2, #1
 80073d4:	b2d0      	uxtb	r0, r2
 80073d6:	4a07      	ldr	r2, [pc, #28]	; (80073f4 <AddToAutoBuffer+0xb8>)
 80073d8:	21ac      	movs	r1, #172	; 0xac
 80073da:	fb01 f303 	mul.w	r3, r1, r3
 80073de:	4413      	add	r3, r2
 80073e0:	33a5      	adds	r3, #165	; 0xa5
 80073e2:	4602      	mov	r2, r0
 80073e4:	701a      	strb	r2, [r3, #0]
}
 80073e6:	bf00      	nop
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	20002724 	.word	0x20002724

080073f8 <AddIDToManualBuffer>:

void AddIDToManualBuffer(uint8_t packet_id)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	4603      	mov	r3, r0
 8007400:	71fb      	strb	r3, [r7, #7]
	manual_packet_buffer[manual_packet_count].payload[0] = packet_id;
 8007402:	4b09      	ldr	r3, [pc, #36]	; (8007428 <AddIDToManualBuffer+0x30>)
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	461a      	mov	r2, r3
 8007408:	4908      	ldr	r1, [pc, #32]	; (800742c <AddIDToManualBuffer+0x34>)
 800740a:	4613      	mov	r3, r2
 800740c:	00db      	lsls	r3, r3, #3
 800740e:	4413      	add	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4413      	add	r3, r2
 8007414:	440b      	add	r3, r1
 8007416:	79fa      	ldrb	r2, [r7, #7]
 8007418:	701a      	strb	r2, [r3, #0]
}
 800741a:	bf00      	nop
 800741c:	370c      	adds	r7, #12
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	200003b0 	.word	0x200003b0
 800742c:	20002258 	.word	0x20002258

08007430 <AddToManualBuffer>:

void AddToManualBuffer(uint8_t *num, uint8_t size)
{
 8007430:	b490      	push	{r4, r7}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	460b      	mov	r3, r1
 800743a:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < size; i++)
 800743c:	2300      	movs	r3, #0
 800743e:	60fb      	str	r3, [r7, #12]
 8007440:	e022      	b.n	8007488 <AddToManualBuffer+0x58>
	{
		manual_packet_buffer[manual_packet_count].payload[manual_packet_buffer[manual_packet_count].width + i] = *(((uint8_t *)num) + i);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	18d0      	adds	r0, r2, r3
 8007448:	4b22      	ldr	r3, [pc, #136]	; (80074d4 <AddToManualBuffer+0xa4>)
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	461a      	mov	r2, r3
 800744e:	4b21      	ldr	r3, [pc, #132]	; (80074d4 <AddToManualBuffer+0xa4>)
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	4619      	mov	r1, r3
 8007454:	4c20      	ldr	r4, [pc, #128]	; (80074d8 <AddToManualBuffer+0xa8>)
 8007456:	460b      	mov	r3, r1
 8007458:	00db      	lsls	r3, r3, #3
 800745a:	440b      	add	r3, r1
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	440b      	add	r3, r1
 8007460:	4423      	add	r3, r4
 8007462:	3323      	adds	r3, #35	; 0x23
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	4619      	mov	r1, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	4419      	add	r1, r3
 800746c:	7804      	ldrb	r4, [r0, #0]
 800746e:	481a      	ldr	r0, [pc, #104]	; (80074d8 <AddToManualBuffer+0xa8>)
 8007470:	4613      	mov	r3, r2
 8007472:	00db      	lsls	r3, r3, #3
 8007474:	4413      	add	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4413      	add	r3, r2
 800747a:	4403      	add	r3, r0
 800747c:	440b      	add	r3, r1
 800747e:	4622      	mov	r2, r4
 8007480:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < size; i++)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	3301      	adds	r3, #1
 8007486:	60fb      	str	r3, [r7, #12]
 8007488:	78fb      	ldrb	r3, [r7, #3]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	429a      	cmp	r2, r3
 800748e:	dbd8      	blt.n	8007442 <AddToManualBuffer+0x12>
	}

	manual_packet_buffer[manual_packet_count].width += size;
 8007490:	4b10      	ldr	r3, [pc, #64]	; (80074d4 <AddToManualBuffer+0xa4>)
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	461a      	mov	r2, r3
 8007496:	4910      	ldr	r1, [pc, #64]	; (80074d8 <AddToManualBuffer+0xa8>)
 8007498:	4613      	mov	r3, r2
 800749a:	00db      	lsls	r3, r3, #3
 800749c:	4413      	add	r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	4413      	add	r3, r2
 80074a2:	440b      	add	r3, r1
 80074a4:	3323      	adds	r3, #35	; 0x23
 80074a6:	7819      	ldrb	r1, [r3, #0]
 80074a8:	4b0a      	ldr	r3, [pc, #40]	; (80074d4 <AddToManualBuffer+0xa4>)
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	461a      	mov	r2, r3
 80074ae:	78fb      	ldrb	r3, [r7, #3]
 80074b0:	440b      	add	r3, r1
 80074b2:	b2d8      	uxtb	r0, r3
 80074b4:	4908      	ldr	r1, [pc, #32]	; (80074d8 <AddToManualBuffer+0xa8>)
 80074b6:	4613      	mov	r3, r2
 80074b8:	00db      	lsls	r3, r3, #3
 80074ba:	4413      	add	r3, r2
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	4413      	add	r3, r2
 80074c0:	440b      	add	r3, r1
 80074c2:	3323      	adds	r3, #35	; 0x23
 80074c4:	4602      	mov	r2, r0
 80074c6:	701a      	strb	r2, [r3, #0]
}
 80074c8:	bf00      	nop
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bc90      	pop	{r4, r7}
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	200003b0 	.word	0x200003b0
 80074d8:	20002258 	.word	0x20002258

080074dc <ReadReceiveBuffer>:

void ReadReceiveBuffer(uint8_t *output, uint8_t size)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	460b      	mov	r3, r1
 80074e6:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < size; i++)
 80074e8:	2300      	movs	r3, #0
 80074ea:	60fb      	str	r3, [r7, #12]
 80074ec:	e00e      	b.n	800750c <ReadReceiveBuffer+0x30>
	{
		*(((uint8_t *)output) + i) = telem_receive_buffer[telem_receive_read_index + i];
 80074ee:	4b10      	ldr	r3, [pc, #64]	; (8007530 <ReadReceiveBuffer+0x54>)
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	461a      	mov	r2, r3
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	441a      	add	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6879      	ldr	r1, [r7, #4]
 80074fc:	440b      	add	r3, r1
 80074fe:	490d      	ldr	r1, [pc, #52]	; (8007534 <ReadReceiveBuffer+0x58>)
 8007500:	5c8a      	ldrb	r2, [r1, r2]
 8007502:	b2d2      	uxtb	r2, r2
 8007504:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < size; i++)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	3301      	adds	r3, #1
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	78fb      	ldrb	r3, [r7, #3]
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	429a      	cmp	r2, r3
 8007512:	dbec      	blt.n	80074ee <ReadReceiveBuffer+0x12>
	}

	telem_receive_read_index += size;
 8007514:	4b06      	ldr	r3, [pc, #24]	; (8007530 <ReadReceiveBuffer+0x54>)
 8007516:	781a      	ldrb	r2, [r3, #0]
 8007518:	78fb      	ldrb	r3, [r7, #3]
 800751a:	4413      	add	r3, r2
 800751c:	b2da      	uxtb	r2, r3
 800751e:	4b04      	ldr	r3, [pc, #16]	; (8007530 <ReadReceiveBuffer+0x54>)
 8007520:	701a      	strb	r2, [r3, #0]
}
 8007522:	bf00      	nop
 8007524:	3714      	adds	r7, #20
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	200003b3 	.word	0x200003b3
 8007534:	20003d04 	.word	0x20003d04

08007538 <MX_TIM3_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b08a      	sub	sp, #40	; 0x28
 800753c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800753e:	f107 0320 	add.w	r3, r7, #32
 8007542:	2200      	movs	r2, #0
 8007544:	601a      	str	r2, [r3, #0]
 8007546:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007548:	1d3b      	adds	r3, r7, #4
 800754a:	2200      	movs	r2, #0
 800754c:	601a      	str	r2, [r3, #0]
 800754e:	605a      	str	r2, [r3, #4]
 8007550:	609a      	str	r2, [r3, #8]
 8007552:	60da      	str	r2, [r3, #12]
 8007554:	611a      	str	r2, [r3, #16]
 8007556:	615a      	str	r2, [r3, #20]
 8007558:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800755a:	4b33      	ldr	r3, [pc, #204]	; (8007628 <MX_TIM3_Init+0xf0>)
 800755c:	4a33      	ldr	r2, [pc, #204]	; (800762c <MX_TIM3_Init+0xf4>)
 800755e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8007560:	4b31      	ldr	r3, [pc, #196]	; (8007628 <MX_TIM3_Init+0xf0>)
 8007562:	2253      	movs	r2, #83	; 0x53
 8007564:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007566:	4b30      	ldr	r3, [pc, #192]	; (8007628 <MX_TIM3_Init+0xf0>)
 8007568:	2200      	movs	r2, #0
 800756a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 800756c:	4b2e      	ldr	r3, [pc, #184]	; (8007628 <MX_TIM3_Init+0xf0>)
 800756e:	f241 3287 	movw	r2, #4999	; 0x1387
 8007572:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007574:	4b2c      	ldr	r3, [pc, #176]	; (8007628 <MX_TIM3_Init+0xf0>)
 8007576:	2200      	movs	r2, #0
 8007578:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800757a:	4b2b      	ldr	r3, [pc, #172]	; (8007628 <MX_TIM3_Init+0xf0>)
 800757c:	2200      	movs	r2, #0
 800757e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8007580:	4829      	ldr	r0, [pc, #164]	; (8007628 <MX_TIM3_Init+0xf0>)
 8007582:	f005 fedf 	bl	800d344 <HAL_TIM_PWM_Init>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d001      	beq.n	8007590 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800758c:	f7fe fa82 	bl	8005a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007590:	2300      	movs	r3, #0
 8007592:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007594:	2300      	movs	r3, #0
 8007596:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007598:	f107 0320 	add.w	r3, r7, #32
 800759c:	4619      	mov	r1, r3
 800759e:	4822      	ldr	r0, [pc, #136]	; (8007628 <MX_TIM3_Init+0xf0>)
 80075a0:	f006 ff8c 	bl	800e4bc <HAL_TIMEx_MasterConfigSynchronization>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80075aa:	f7fe fa73 	bl	8005a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80075ae:	2360      	movs	r3, #96	; 0x60
 80075b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 80075b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80075b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80075b8:	2300      	movs	r3, #0
 80075ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80075bc:	2300      	movs	r3, #0
 80075be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80075c0:	1d3b      	adds	r3, r7, #4
 80075c2:	2200      	movs	r2, #0
 80075c4:	4619      	mov	r1, r3
 80075c6:	4818      	ldr	r0, [pc, #96]	; (8007628 <MX_TIM3_Init+0xf0>)
 80075c8:	f006 f968 	bl	800d89c <HAL_TIM_PWM_ConfigChannel>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d001      	beq.n	80075d6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80075d2:	f7fe fa5f 	bl	8005a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80075d6:	1d3b      	adds	r3, r7, #4
 80075d8:	2204      	movs	r2, #4
 80075da:	4619      	mov	r1, r3
 80075dc:	4812      	ldr	r0, [pc, #72]	; (8007628 <MX_TIM3_Init+0xf0>)
 80075de:	f006 f95d 	bl	800d89c <HAL_TIM_PWM_ConfigChannel>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d001      	beq.n	80075ec <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80075e8:	f7fe fa54 	bl	8005a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80075ec:	1d3b      	adds	r3, r7, #4
 80075ee:	2208      	movs	r2, #8
 80075f0:	4619      	mov	r1, r3
 80075f2:	480d      	ldr	r0, [pc, #52]	; (8007628 <MX_TIM3_Init+0xf0>)
 80075f4:	f006 f952 	bl	800d89c <HAL_TIM_PWM_ConfigChannel>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d001      	beq.n	8007602 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80075fe:	f7fe fa49 	bl	8005a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007602:	1d3b      	adds	r3, r7, #4
 8007604:	220c      	movs	r2, #12
 8007606:	4619      	mov	r1, r3
 8007608:	4807      	ldr	r0, [pc, #28]	; (8007628 <MX_TIM3_Init+0xf0>)
 800760a:	f006 f947 	bl	800d89c <HAL_TIM_PWM_ConfigChannel>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d001      	beq.n	8007618 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8007614:	f7fe fa3e 	bl	8005a94 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8007618:	4803      	ldr	r0, [pc, #12]	; (8007628 <MX_TIM3_Init+0xf0>)
 800761a:	f000 fa1d 	bl	8007a58 <HAL_TIM_MspPostInit>

}
 800761e:	bf00      	nop
 8007620:	3728      	adds	r7, #40	; 0x28
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	20003dac 	.word	0x20003dac
 800762c:	40000400 	.word	0x40000400

08007630 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b08a      	sub	sp, #40	; 0x28
 8007634:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007636:	f107 0318 	add.w	r3, r7, #24
 800763a:	2200      	movs	r2, #0
 800763c:	601a      	str	r2, [r3, #0]
 800763e:	605a      	str	r2, [r3, #4]
 8007640:	609a      	str	r2, [r3, #8]
 8007642:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007644:	f107 0310 	add.w	r3, r7, #16
 8007648:	2200      	movs	r2, #0
 800764a:	601a      	str	r2, [r3, #0]
 800764c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800764e:	463b      	mov	r3, r7
 8007650:	2200      	movs	r2, #0
 8007652:	601a      	str	r2, [r3, #0]
 8007654:	605a      	str	r2, [r3, #4]
 8007656:	609a      	str	r2, [r3, #8]
 8007658:	60da      	str	r2, [r3, #12]

  htim5.Instance = TIM5;
 800765a:	4b2b      	ldr	r3, [pc, #172]	; (8007708 <MX_TIM5_Init+0xd8>)
 800765c:	4a2b      	ldr	r2, [pc, #172]	; (800770c <MX_TIM5_Init+0xdc>)
 800765e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8007660:	4b29      	ldr	r3, [pc, #164]	; (8007708 <MX_TIM5_Init+0xd8>)
 8007662:	2253      	movs	r2, #83	; 0x53
 8007664:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007666:	4b28      	ldr	r3, [pc, #160]	; (8007708 <MX_TIM5_Init+0xd8>)
 8007668:	2200      	movs	r2, #0
 800766a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800766c:	4b26      	ldr	r3, [pc, #152]	; (8007708 <MX_TIM5_Init+0xd8>)
 800766e:	f04f 32ff 	mov.w	r2, #4294967295
 8007672:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007674:	4b24      	ldr	r3, [pc, #144]	; (8007708 <MX_TIM5_Init+0xd8>)
 8007676:	2200      	movs	r2, #0
 8007678:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800767a:	4b23      	ldr	r3, [pc, #140]	; (8007708 <MX_TIM5_Init+0xd8>)
 800767c:	2200      	movs	r2, #0
 800767e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8007680:	4821      	ldr	r0, [pc, #132]	; (8007708 <MX_TIM5_Init+0xd8>)
 8007682:	f005 fe10 	bl	800d2a6 <HAL_TIM_Base_Init>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 800768c:	f7fe fa02 	bl	8005a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007694:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8007696:	f107 0318 	add.w	r3, r7, #24
 800769a:	4619      	mov	r1, r3
 800769c:	481a      	ldr	r0, [pc, #104]	; (8007708 <MX_TIM5_Init+0xd8>)
 800769e:	f006 f9c3 	bl	800da28 <HAL_TIM_ConfigClockSource>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d001      	beq.n	80076ac <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80076a8:	f7fe f9f4 	bl	8005a94 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80076ac:	4816      	ldr	r0, [pc, #88]	; (8007708 <MX_TIM5_Init+0xd8>)
 80076ae:	f005 feb3 	bl	800d418 <HAL_TIM_IC_Init>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d001      	beq.n	80076bc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80076b8:	f7fe f9ec 	bl	8005a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80076bc:	2300      	movs	r3, #0
 80076be:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80076c0:	2300      	movs	r3, #0
 80076c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80076c4:	f107 0310 	add.w	r3, r7, #16
 80076c8:	4619      	mov	r1, r3
 80076ca:	480f      	ldr	r0, [pc, #60]	; (8007708 <MX_TIM5_Init+0xd8>)
 80076cc:	f006 fef6 	bl	800e4bc <HAL_TIMEx_MasterConfigSynchronization>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 80076d6:	f7fe f9dd 	bl	8005a94 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80076da:	2300      	movs	r3, #0
 80076dc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80076de:	2301      	movs	r3, #1
 80076e0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80076e2:	2300      	movs	r3, #0
 80076e4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80076e6:	2300      	movs	r3, #0
 80076e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80076ea:	463b      	mov	r3, r7
 80076ec:	2200      	movs	r2, #0
 80076ee:	4619      	mov	r1, r3
 80076f0:	4805      	ldr	r0, [pc, #20]	; (8007708 <MX_TIM5_Init+0xd8>)
 80076f2:	f006 f837 	bl	800d764 <HAL_TIM_IC_ConfigChannel>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d001      	beq.n	8007700 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 80076fc:	f7fe f9ca 	bl	8005a94 <Error_Handler>
  }

}
 8007700:	bf00      	nop
 8007702:	3728      	adds	r7, #40	; 0x28
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	20003d6c 	.word	0x20003d6c
 800770c:	40000c00 	.word	0x40000c00

08007710 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b096      	sub	sp, #88	; 0x58
 8007714:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007716:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800771a:	2200      	movs	r2, #0
 800771c:	601a      	str	r2, [r3, #0]
 800771e:	605a      	str	r2, [r3, #4]
 8007720:	609a      	str	r2, [r3, #8]
 8007722:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007724:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007728:	2200      	movs	r2, #0
 800772a:	601a      	str	r2, [r3, #0]
 800772c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800772e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007732:	2200      	movs	r2, #0
 8007734:	601a      	str	r2, [r3, #0]
 8007736:	605a      	str	r2, [r3, #4]
 8007738:	609a      	str	r2, [r3, #8]
 800773a:	60da      	str	r2, [r3, #12]
 800773c:	611a      	str	r2, [r3, #16]
 800773e:	615a      	str	r2, [r3, #20]
 8007740:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007742:	1d3b      	adds	r3, r7, #4
 8007744:	2220      	movs	r2, #32
 8007746:	2100      	movs	r1, #0
 8007748:	4618      	mov	r0, r3
 800774a:	f00d fa6e 	bl	8014c2a <memset>

  htim8.Instance = TIM8;
 800774e:	4b50      	ldr	r3, [pc, #320]	; (8007890 <MX_TIM8_Init+0x180>)
 8007750:	4a50      	ldr	r2, [pc, #320]	; (8007894 <MX_TIM8_Init+0x184>)
 8007752:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 167;
 8007754:	4b4e      	ldr	r3, [pc, #312]	; (8007890 <MX_TIM8_Init+0x180>)
 8007756:	22a7      	movs	r2, #167	; 0xa7
 8007758:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800775a:	4b4d      	ldr	r3, [pc, #308]	; (8007890 <MX_TIM8_Init+0x180>)
 800775c:	2200      	movs	r2, #0
 800775e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3999;
 8007760:	4b4b      	ldr	r3, [pc, #300]	; (8007890 <MX_TIM8_Init+0x180>)
 8007762:	f640 729f 	movw	r2, #3999	; 0xf9f
 8007766:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007768:	4b49      	ldr	r3, [pc, #292]	; (8007890 <MX_TIM8_Init+0x180>)
 800776a:	2200      	movs	r2, #0
 800776c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800776e:	4b48      	ldr	r3, [pc, #288]	; (8007890 <MX_TIM8_Init+0x180>)
 8007770:	2200      	movs	r2, #0
 8007772:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007774:	4b46      	ldr	r3, [pc, #280]	; (8007890 <MX_TIM8_Init+0x180>)
 8007776:	2200      	movs	r2, #0
 8007778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800777a:	4845      	ldr	r0, [pc, #276]	; (8007890 <MX_TIM8_Init+0x180>)
 800777c:	f005 fd93 	bl	800d2a6 <HAL_TIM_Base_Init>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d001      	beq.n	800778a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8007786:	f7fe f985 	bl	8005a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800778a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800778e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8007790:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007794:	4619      	mov	r1, r3
 8007796:	483e      	ldr	r0, [pc, #248]	; (8007890 <MX_TIM8_Init+0x180>)
 8007798:	f006 f946 	bl	800da28 <HAL_TIM_ConfigClockSource>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d001      	beq.n	80077a6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80077a2:	f7fe f977 	bl	8005a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80077a6:	483a      	ldr	r0, [pc, #232]	; (8007890 <MX_TIM8_Init+0x180>)
 80077a8:	f005 fdcc 	bl	800d344 <HAL_TIM_PWM_Init>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d001      	beq.n	80077b6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80077b2:	f7fe f96f 	bl	8005a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80077b6:	2300      	movs	r3, #0
 80077b8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80077ba:	2300      	movs	r3, #0
 80077bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80077be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80077c2:	4619      	mov	r1, r3
 80077c4:	4832      	ldr	r0, [pc, #200]	; (8007890 <MX_TIM8_Init+0x180>)
 80077c6:	f006 fe79 	bl	800e4bc <HAL_TIMEx_MasterConfigSynchronization>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d001      	beq.n	80077d4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80077d0:	f7fe f960 	bl	8005a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80077d4:	2360      	movs	r3, #96	; 0x60
 80077d6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 125;
 80077d8:	237d      	movs	r3, #125	; 0x7d
 80077da:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80077dc:	2300      	movs	r3, #0
 80077de:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80077e0:	2300      	movs	r3, #0
 80077e2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80077e4:	2300      	movs	r3, #0
 80077e6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80077e8:	2300      	movs	r3, #0
 80077ea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80077ec:	2300      	movs	r3, #0
 80077ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80077f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077f4:	2200      	movs	r2, #0
 80077f6:	4619      	mov	r1, r3
 80077f8:	4825      	ldr	r0, [pc, #148]	; (8007890 <MX_TIM8_Init+0x180>)
 80077fa:	f006 f84f 	bl	800d89c <HAL_TIM_PWM_ConfigChannel>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d001      	beq.n	8007808 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8007804:	f7fe f946 	bl	8005a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800780c:	2204      	movs	r2, #4
 800780e:	4619      	mov	r1, r3
 8007810:	481f      	ldr	r0, [pc, #124]	; (8007890 <MX_TIM8_Init+0x180>)
 8007812:	f006 f843 	bl	800d89c <HAL_TIM_PWM_ConfigChannel>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d001      	beq.n	8007820 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 800781c:	f7fe f93a 	bl	8005a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007824:	2208      	movs	r2, #8
 8007826:	4619      	mov	r1, r3
 8007828:	4819      	ldr	r0, [pc, #100]	; (8007890 <MX_TIM8_Init+0x180>)
 800782a:	f006 f837 	bl	800d89c <HAL_TIM_PWM_ConfigChannel>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d001      	beq.n	8007838 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8007834:	f7fe f92e 	bl	8005a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800783c:	220c      	movs	r2, #12
 800783e:	4619      	mov	r1, r3
 8007840:	4813      	ldr	r0, [pc, #76]	; (8007890 <MX_TIM8_Init+0x180>)
 8007842:	f006 f82b 	bl	800d89c <HAL_TIM_PWM_ConfigChannel>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d001      	beq.n	8007850 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 800784c:	f7fe f922 	bl	8005a94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007850:	2300      	movs	r3, #0
 8007852:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007854:	2300      	movs	r3, #0
 8007856:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007858:	2300      	movs	r3, #0
 800785a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800785c:	2300      	movs	r3, #0
 800785e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007860:	2300      	movs	r3, #0
 8007862:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007864:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007868:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800786a:	2300      	movs	r3, #0
 800786c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800786e:	1d3b      	adds	r3, r7, #4
 8007870:	4619      	mov	r1, r3
 8007872:	4807      	ldr	r0, [pc, #28]	; (8007890 <MX_TIM8_Init+0x180>)
 8007874:	f006 fe9e 	bl	800e5b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d001      	beq.n	8007882 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 800787e:	f7fe f909 	bl	8005a94 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8007882:	4803      	ldr	r0, [pc, #12]	; (8007890 <MX_TIM8_Init+0x180>)
 8007884:	f000 f8e8 	bl	8007a58 <HAL_TIM_MspPostInit>

}
 8007888:	bf00      	nop
 800788a:	3758      	adds	r7, #88	; 0x58
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	20003d2c 	.word	0x20003d2c
 8007894:	40010400 	.word	0x40010400

08007898 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800789e:	463b      	mov	r3, r7
 80078a0:	2200      	movs	r2, #0
 80078a2:	601a      	str	r2, [r3, #0]
 80078a4:	605a      	str	r2, [r3, #4]
 80078a6:	609a      	str	r2, [r3, #8]
 80078a8:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 80078aa:	4b16      	ldr	r3, [pc, #88]	; (8007904 <MX_TIM9_Init+0x6c>)
 80078ac:	4a16      	ldr	r2, [pc, #88]	; (8007908 <MX_TIM9_Init+0x70>)
 80078ae:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 167;
 80078b0:	4b14      	ldr	r3, [pc, #80]	; (8007904 <MX_TIM9_Init+0x6c>)
 80078b2:	22a7      	movs	r2, #167	; 0xa7
 80078b4:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80078b6:	4b13      	ldr	r3, [pc, #76]	; (8007904 <MX_TIM9_Init+0x6c>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 64999;
 80078bc:	4b11      	ldr	r3, [pc, #68]	; (8007904 <MX_TIM9_Init+0x6c>)
 80078be:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 80078c2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80078c4:	4b0f      	ldr	r3, [pc, #60]	; (8007904 <MX_TIM9_Init+0x6c>)
 80078c6:	2200      	movs	r2, #0
 80078c8:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80078ca:	4b0e      	ldr	r3, [pc, #56]	; (8007904 <MX_TIM9_Init+0x6c>)
 80078cc:	2200      	movs	r2, #0
 80078ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80078d0:	480c      	ldr	r0, [pc, #48]	; (8007904 <MX_TIM9_Init+0x6c>)
 80078d2:	f005 fce8 	bl	800d2a6 <HAL_TIM_Base_Init>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d001      	beq.n	80078e0 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 80078dc:	f7fe f8da 	bl	8005a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80078e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078e4:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80078e6:	463b      	mov	r3, r7
 80078e8:	4619      	mov	r1, r3
 80078ea:	4806      	ldr	r0, [pc, #24]	; (8007904 <MX_TIM9_Init+0x6c>)
 80078ec:	f006 f89c 	bl	800da28 <HAL_TIM_ConfigClockSource>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d001      	beq.n	80078fa <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80078f6:	f7fe f8cd 	bl	8005a94 <Error_Handler>
  }

}
 80078fa:	bf00      	nop
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	20003dec 	.word	0x20003dec
 8007908:	40014000 	.word	0x40014000

0800790c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a0b      	ldr	r2, [pc, #44]	; (8007948 <HAL_TIM_PWM_MspInit+0x3c>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d10d      	bne.n	800793a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800791e:	2300      	movs	r3, #0
 8007920:	60fb      	str	r3, [r7, #12]
 8007922:	4b0a      	ldr	r3, [pc, #40]	; (800794c <HAL_TIM_PWM_MspInit+0x40>)
 8007924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007926:	4a09      	ldr	r2, [pc, #36]	; (800794c <HAL_TIM_PWM_MspInit+0x40>)
 8007928:	f043 0302 	orr.w	r3, r3, #2
 800792c:	6413      	str	r3, [r2, #64]	; 0x40
 800792e:	4b07      	ldr	r3, [pc, #28]	; (800794c <HAL_TIM_PWM_MspInit+0x40>)
 8007930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007932:	f003 0302 	and.w	r3, r3, #2
 8007936:	60fb      	str	r3, [r7, #12]
 8007938:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800793a:	bf00      	nop
 800793c:	3714      	adds	r7, #20
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	40000400 	.word	0x40000400
 800794c:	40023800 	.word	0x40023800

08007950 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b08c      	sub	sp, #48	; 0x30
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007958:	f107 031c 	add.w	r3, r7, #28
 800795c:	2200      	movs	r2, #0
 800795e:	601a      	str	r2, [r3, #0]
 8007960:	605a      	str	r2, [r3, #4]
 8007962:	609a      	str	r2, [r3, #8]
 8007964:	60da      	str	r2, [r3, #12]
 8007966:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM5)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a35      	ldr	r2, [pc, #212]	; (8007a44 <HAL_TIM_Base_MspInit+0xf4>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d134      	bne.n	80079dc <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007972:	2300      	movs	r3, #0
 8007974:	61bb      	str	r3, [r7, #24]
 8007976:	4b34      	ldr	r3, [pc, #208]	; (8007a48 <HAL_TIM_Base_MspInit+0xf8>)
 8007978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797a:	4a33      	ldr	r2, [pc, #204]	; (8007a48 <HAL_TIM_Base_MspInit+0xf8>)
 800797c:	f043 0308 	orr.w	r3, r3, #8
 8007980:	6413      	str	r3, [r2, #64]	; 0x40
 8007982:	4b31      	ldr	r3, [pc, #196]	; (8007a48 <HAL_TIM_Base_MspInit+0xf8>)
 8007984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007986:	f003 0308 	and.w	r3, r3, #8
 800798a:	61bb      	str	r3, [r7, #24]
 800798c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800798e:	2300      	movs	r3, #0
 8007990:	617b      	str	r3, [r7, #20]
 8007992:	4b2d      	ldr	r3, [pc, #180]	; (8007a48 <HAL_TIM_Base_MspInit+0xf8>)
 8007994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007996:	4a2c      	ldr	r2, [pc, #176]	; (8007a48 <HAL_TIM_Base_MspInit+0xf8>)
 8007998:	f043 0301 	orr.w	r3, r3, #1
 800799c:	6313      	str	r3, [r2, #48]	; 0x30
 800799e:	4b2a      	ldr	r3, [pc, #168]	; (8007a48 <HAL_TIM_Base_MspInit+0xf8>)
 80079a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a2:	f003 0301 	and.w	r3, r3, #1
 80079a6:	617b      	str	r3, [r7, #20]
 80079a8:	697b      	ldr	r3, [r7, #20]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80079aa:	2301      	movs	r3, #1
 80079ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079ae:	2302      	movs	r3, #2
 80079b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079b2:	2300      	movs	r3, #0
 80079b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079b6:	2300      	movs	r3, #0
 80079b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80079ba:	2302      	movs	r3, #2
 80079bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079be:	f107 031c 	add.w	r3, r7, #28
 80079c2:	4619      	mov	r1, r3
 80079c4:	4821      	ldr	r0, [pc, #132]	; (8007a4c <HAL_TIM_Base_MspInit+0xfc>)
 80079c6:	f000 fdb1 	bl	800852c <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80079ca:	2200      	movs	r2, #0
 80079cc:	2100      	movs	r1, #0
 80079ce:	2032      	movs	r0, #50	; 0x32
 80079d0:	f000 fa5d 	bl	8007e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80079d4:	2032      	movs	r0, #50	; 0x32
 80079d6:	f000 fa76 	bl	8007ec6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80079da:	e02e      	b.n	8007a3a <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM8)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a1b      	ldr	r2, [pc, #108]	; (8007a50 <HAL_TIM_Base_MspInit+0x100>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d10e      	bne.n	8007a04 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80079e6:	2300      	movs	r3, #0
 80079e8:	613b      	str	r3, [r7, #16]
 80079ea:	4b17      	ldr	r3, [pc, #92]	; (8007a48 <HAL_TIM_Base_MspInit+0xf8>)
 80079ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ee:	4a16      	ldr	r2, [pc, #88]	; (8007a48 <HAL_TIM_Base_MspInit+0xf8>)
 80079f0:	f043 0302 	orr.w	r3, r3, #2
 80079f4:	6453      	str	r3, [r2, #68]	; 0x44
 80079f6:	4b14      	ldr	r3, [pc, #80]	; (8007a48 <HAL_TIM_Base_MspInit+0xf8>)
 80079f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079fa:	f003 0302 	and.w	r3, r3, #2
 80079fe:	613b      	str	r3, [r7, #16]
 8007a00:	693b      	ldr	r3, [r7, #16]
}
 8007a02:	e01a      	b.n	8007a3a <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM9)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a12      	ldr	r2, [pc, #72]	; (8007a54 <HAL_TIM_Base_MspInit+0x104>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d115      	bne.n	8007a3a <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8007a0e:	2300      	movs	r3, #0
 8007a10:	60fb      	str	r3, [r7, #12]
 8007a12:	4b0d      	ldr	r3, [pc, #52]	; (8007a48 <HAL_TIM_Base_MspInit+0xf8>)
 8007a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a16:	4a0c      	ldr	r2, [pc, #48]	; (8007a48 <HAL_TIM_Base_MspInit+0xf8>)
 8007a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8007a1e:	4b0a      	ldr	r3, [pc, #40]	; (8007a48 <HAL_TIM_Base_MspInit+0xf8>)
 8007a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a26:	60fb      	str	r3, [r7, #12]
 8007a28:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	2018      	movs	r0, #24
 8007a30:	f000 fa2d 	bl	8007e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8007a34:	2018      	movs	r0, #24
 8007a36:	f000 fa46 	bl	8007ec6 <HAL_NVIC_EnableIRQ>
}
 8007a3a:	bf00      	nop
 8007a3c:	3730      	adds	r7, #48	; 0x30
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	40000c00 	.word	0x40000c00
 8007a48:	40023800 	.word	0x40023800
 8007a4c:	40020000 	.word	0x40020000
 8007a50:	40010400 	.word	0x40010400
 8007a54:	40014000 	.word	0x40014000

08007a58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b08a      	sub	sp, #40	; 0x28
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a60:	f107 0314 	add.w	r3, r7, #20
 8007a64:	2200      	movs	r2, #0
 8007a66:	601a      	str	r2, [r3, #0]
 8007a68:	605a      	str	r2, [r3, #4]
 8007a6a:	609a      	str	r2, [r3, #8]
 8007a6c:	60da      	str	r2, [r3, #12]
 8007a6e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a33      	ldr	r2, [pc, #204]	; (8007b44 <HAL_TIM_MspPostInit+0xec>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d13c      	bne.n	8007af4 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	613b      	str	r3, [r7, #16]
 8007a7e:	4b32      	ldr	r3, [pc, #200]	; (8007b48 <HAL_TIM_MspPostInit+0xf0>)
 8007a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a82:	4a31      	ldr	r2, [pc, #196]	; (8007b48 <HAL_TIM_MspPostInit+0xf0>)
 8007a84:	f043 0301 	orr.w	r3, r3, #1
 8007a88:	6313      	str	r3, [r2, #48]	; 0x30
 8007a8a:	4b2f      	ldr	r3, [pc, #188]	; (8007b48 <HAL_TIM_MspPostInit+0xf0>)
 8007a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	613b      	str	r3, [r7, #16]
 8007a94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a96:	2300      	movs	r3, #0
 8007a98:	60fb      	str	r3, [r7, #12]
 8007a9a:	4b2b      	ldr	r3, [pc, #172]	; (8007b48 <HAL_TIM_MspPostInit+0xf0>)
 8007a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9e:	4a2a      	ldr	r2, [pc, #168]	; (8007b48 <HAL_TIM_MspPostInit+0xf0>)
 8007aa0:	f043 0302 	orr.w	r3, r3, #2
 8007aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8007aa6:	4b28      	ldr	r3, [pc, #160]	; (8007b48 <HAL_TIM_MspPostInit+0xf0>)
 8007aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aaa:	f003 0302 	and.w	r3, r3, #2
 8007aae:	60fb      	str	r3, [r7, #12]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007ab2:	23c0      	movs	r3, #192	; 0xc0
 8007ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007aba:	2300      	movs	r3, #0
 8007abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007ac2:	2302      	movs	r3, #2
 8007ac4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ac6:	f107 0314 	add.w	r3, r7, #20
 8007aca:	4619      	mov	r1, r3
 8007acc:	481f      	ldr	r0, [pc, #124]	; (8007b4c <HAL_TIM_MspPostInit+0xf4>)
 8007ace:	f000 fd2d 	bl	800852c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ad6:	2302      	movs	r3, #2
 8007ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ada:	2300      	movs	r3, #0
 8007adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007ae2:	2302      	movs	r3, #2
 8007ae4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ae6:	f107 0314 	add.w	r3, r7, #20
 8007aea:	4619      	mov	r1, r3
 8007aec:	4818      	ldr	r0, [pc, #96]	; (8007b50 <HAL_TIM_MspPostInit+0xf8>)
 8007aee:	f000 fd1d 	bl	800852c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8007af2:	e023      	b.n	8007b3c <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM8)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a16      	ldr	r2, [pc, #88]	; (8007b54 <HAL_TIM_MspPostInit+0xfc>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d11e      	bne.n	8007b3c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007afe:	2300      	movs	r3, #0
 8007b00:	60bb      	str	r3, [r7, #8]
 8007b02:	4b11      	ldr	r3, [pc, #68]	; (8007b48 <HAL_TIM_MspPostInit+0xf0>)
 8007b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b06:	4a10      	ldr	r2, [pc, #64]	; (8007b48 <HAL_TIM_MspPostInit+0xf0>)
 8007b08:	f043 0304 	orr.w	r3, r3, #4
 8007b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8007b0e:	4b0e      	ldr	r3, [pc, #56]	; (8007b48 <HAL_TIM_MspPostInit+0xf0>)
 8007b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b12:	f003 0304 	and.w	r3, r3, #4
 8007b16:	60bb      	str	r3, [r7, #8]
 8007b18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8007b1a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8007b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b20:	2302      	movs	r3, #2
 8007b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b24:	2300      	movs	r3, #0
 8007b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b30:	f107 0314 	add.w	r3, r7, #20
 8007b34:	4619      	mov	r1, r3
 8007b36:	4808      	ldr	r0, [pc, #32]	; (8007b58 <HAL_TIM_MspPostInit+0x100>)
 8007b38:	f000 fcf8 	bl	800852c <HAL_GPIO_Init>
}
 8007b3c:	bf00      	nop
 8007b3e:	3728      	adds	r7, #40	; 0x28
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	40000400 	.word	0x40000400
 8007b48:	40023800 	.word	0x40023800
 8007b4c:	40020000 	.word	0x40020000
 8007b50:	40020400 	.word	0x40020400
 8007b54:	40010400 	.word	0x40010400
 8007b58:	40020800 	.word	0x40020800

08007b5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007b5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007b94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007b60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007b62:	e003      	b.n	8007b6c <LoopCopyDataInit>

08007b64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007b64:	4b0c      	ldr	r3, [pc, #48]	; (8007b98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007b66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007b68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007b6a:	3104      	adds	r1, #4

08007b6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007b6c:	480b      	ldr	r0, [pc, #44]	; (8007b9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007b6e:	4b0c      	ldr	r3, [pc, #48]	; (8007ba0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007b70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007b72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007b74:	d3f6      	bcc.n	8007b64 <CopyDataInit>
  ldr  r2, =_sbss
 8007b76:	4a0b      	ldr	r2, [pc, #44]	; (8007ba4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007b78:	e002      	b.n	8007b80 <LoopFillZerobss>

08007b7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007b7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007b7c:	f842 3b04 	str.w	r3, [r2], #4

08007b80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007b80:	4b09      	ldr	r3, [pc, #36]	; (8007ba8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007b82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007b84:	d3f9      	bcc.n	8007b7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007b86:	f7fe f8c3 	bl	8005d10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007b8a:	f00d f80f 	bl	8014bac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007b8e:	f7fc ff83 	bl	8004a98 <main>
  bx  lr    
 8007b92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007b94:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007b98:	08015994 	.word	0x08015994
  ldr  r0, =_sdata
 8007b9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007ba0:	2000026c 	.word	0x2000026c
  ldr  r2, =_sbss
 8007ba4:	20000270 	.word	0x20000270
  ldr  r3, = _ebss
 8007ba8:	2000570c 	.word	0x2000570c

08007bac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007bac:	e7fe      	b.n	8007bac <ADC_IRQHandler>
	...

08007bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007bb4:	4b0e      	ldr	r3, [pc, #56]	; (8007bf0 <HAL_Init+0x40>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a0d      	ldr	r2, [pc, #52]	; (8007bf0 <HAL_Init+0x40>)
 8007bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007bbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007bc0:	4b0b      	ldr	r3, [pc, #44]	; (8007bf0 <HAL_Init+0x40>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a0a      	ldr	r2, [pc, #40]	; (8007bf0 <HAL_Init+0x40>)
 8007bc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007bca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007bcc:	4b08      	ldr	r3, [pc, #32]	; (8007bf0 <HAL_Init+0x40>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a07      	ldr	r2, [pc, #28]	; (8007bf0 <HAL_Init+0x40>)
 8007bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007bd8:	2003      	movs	r0, #3
 8007bda:	f000 f94d 	bl	8007e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007bde:	2000      	movs	r0, #0
 8007be0:	f000 f808 	bl	8007bf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007be4:	f7fd ff9a 	bl	8005b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	40023c00 	.word	0x40023c00

08007bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007bfc:	4b12      	ldr	r3, [pc, #72]	; (8007c48 <HAL_InitTick+0x54>)
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	4b12      	ldr	r3, [pc, #72]	; (8007c4c <HAL_InitTick+0x58>)
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	4619      	mov	r1, r3
 8007c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c12:	4618      	mov	r0, r3
 8007c14:	f000 f965 	bl	8007ee2 <HAL_SYSTICK_Config>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d001      	beq.n	8007c22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e00e      	b.n	8007c40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2b0f      	cmp	r3, #15
 8007c26:	d80a      	bhi.n	8007c3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007c28:	2200      	movs	r2, #0
 8007c2a:	6879      	ldr	r1, [r7, #4]
 8007c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c30:	f000 f92d 	bl	8007e8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007c34:	4a06      	ldr	r2, [pc, #24]	; (8007c50 <HAL_InitTick+0x5c>)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	e000      	b.n	8007c40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}
 8007c48:	2000007c 	.word	0x2000007c
 8007c4c:	20000088 	.word	0x20000088
 8007c50:	20000084 	.word	0x20000084

08007c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007c54:	b480      	push	{r7}
 8007c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007c58:	4b06      	ldr	r3, [pc, #24]	; (8007c74 <HAL_IncTick+0x20>)
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	4b06      	ldr	r3, [pc, #24]	; (8007c78 <HAL_IncTick+0x24>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4413      	add	r3, r2
 8007c64:	4a04      	ldr	r2, [pc, #16]	; (8007c78 <HAL_IncTick+0x24>)
 8007c66:	6013      	str	r3, [r2, #0]
}
 8007c68:	bf00      	nop
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	20000088 	.word	0x20000088
 8007c78:	20003e2c 	.word	0x20003e2c

08007c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8007c80:	4b03      	ldr	r3, [pc, #12]	; (8007c90 <HAL_GetTick+0x14>)
 8007c82:	681b      	ldr	r3, [r3, #0]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	20003e2c 	.word	0x20003e2c

08007c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007c9c:	f7ff ffee 	bl	8007c7c <HAL_GetTick>
 8007ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cac:	d005      	beq.n	8007cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007cae:	4b09      	ldr	r3, [pc, #36]	; (8007cd4 <HAL_Delay+0x40>)
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007cba:	bf00      	nop
 8007cbc:	f7ff ffde 	bl	8007c7c <HAL_GetTick>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d8f7      	bhi.n	8007cbc <HAL_Delay+0x28>
  {
  }
}
 8007ccc:	bf00      	nop
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	20000088 	.word	0x20000088

08007cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f003 0307 	and.w	r3, r3, #7
 8007ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007ce8:	4b0c      	ldr	r3, [pc, #48]	; (8007d1c <__NVIC_SetPriorityGrouping+0x44>)
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007cee:	68ba      	ldr	r2, [r7, #8]
 8007cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007d0a:	4a04      	ldr	r2, [pc, #16]	; (8007d1c <__NVIC_SetPriorityGrouping+0x44>)
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	60d3      	str	r3, [r2, #12]
}
 8007d10:	bf00      	nop
 8007d12:	3714      	adds	r7, #20
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr
 8007d1c:	e000ed00 	.word	0xe000ed00

08007d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007d20:	b480      	push	{r7}
 8007d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007d24:	4b04      	ldr	r3, [pc, #16]	; (8007d38 <__NVIC_GetPriorityGrouping+0x18>)
 8007d26:	68db      	ldr	r3, [r3, #12]
 8007d28:	0a1b      	lsrs	r3, r3, #8
 8007d2a:	f003 0307 	and.w	r3, r3, #7
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr
 8007d38:	e000ed00 	.word	0xe000ed00

08007d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	4603      	mov	r3, r0
 8007d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	db0b      	blt.n	8007d66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007d4e:	79fb      	ldrb	r3, [r7, #7]
 8007d50:	f003 021f 	and.w	r2, r3, #31
 8007d54:	4907      	ldr	r1, [pc, #28]	; (8007d74 <__NVIC_EnableIRQ+0x38>)
 8007d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d5a:	095b      	lsrs	r3, r3, #5
 8007d5c:	2001      	movs	r0, #1
 8007d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8007d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007d66:	bf00      	nop
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	e000e100 	.word	0xe000e100

08007d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	4603      	mov	r3, r0
 8007d80:	6039      	str	r1, [r7, #0]
 8007d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	db0a      	blt.n	8007da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	b2da      	uxtb	r2, r3
 8007d90:	490c      	ldr	r1, [pc, #48]	; (8007dc4 <__NVIC_SetPriority+0x4c>)
 8007d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d96:	0112      	lsls	r2, r2, #4
 8007d98:	b2d2      	uxtb	r2, r2
 8007d9a:	440b      	add	r3, r1
 8007d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007da0:	e00a      	b.n	8007db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	b2da      	uxtb	r2, r3
 8007da6:	4908      	ldr	r1, [pc, #32]	; (8007dc8 <__NVIC_SetPriority+0x50>)
 8007da8:	79fb      	ldrb	r3, [r7, #7]
 8007daa:	f003 030f 	and.w	r3, r3, #15
 8007dae:	3b04      	subs	r3, #4
 8007db0:	0112      	lsls	r2, r2, #4
 8007db2:	b2d2      	uxtb	r2, r2
 8007db4:	440b      	add	r3, r1
 8007db6:	761a      	strb	r2, [r3, #24]
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr
 8007dc4:	e000e100 	.word	0xe000e100
 8007dc8:	e000ed00 	.word	0xe000ed00

08007dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b089      	sub	sp, #36	; 0x24
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f003 0307 	and.w	r3, r3, #7
 8007dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	f1c3 0307 	rsb	r3, r3, #7
 8007de6:	2b04      	cmp	r3, #4
 8007de8:	bf28      	it	cs
 8007dea:	2304      	movcs	r3, #4
 8007dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	3304      	adds	r3, #4
 8007df2:	2b06      	cmp	r3, #6
 8007df4:	d902      	bls.n	8007dfc <NVIC_EncodePriority+0x30>
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	3b03      	subs	r3, #3
 8007dfa:	e000      	b.n	8007dfe <NVIC_EncodePriority+0x32>
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e00:	f04f 32ff 	mov.w	r2, #4294967295
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	fa02 f303 	lsl.w	r3, r2, r3
 8007e0a:	43da      	mvns	r2, r3
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	401a      	ands	r2, r3
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007e14:	f04f 31ff 	mov.w	r1, #4294967295
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e1e:	43d9      	mvns	r1, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e24:	4313      	orrs	r3, r2
         );
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3724      	adds	r7, #36	; 0x24
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
	...

08007e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e44:	d301      	bcc.n	8007e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007e46:	2301      	movs	r3, #1
 8007e48:	e00f      	b.n	8007e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007e4a:	4a0a      	ldr	r2, [pc, #40]	; (8007e74 <SysTick_Config+0x40>)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007e52:	210f      	movs	r1, #15
 8007e54:	f04f 30ff 	mov.w	r0, #4294967295
 8007e58:	f7ff ff8e 	bl	8007d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007e5c:	4b05      	ldr	r3, [pc, #20]	; (8007e74 <SysTick_Config+0x40>)
 8007e5e:	2200      	movs	r2, #0
 8007e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007e62:	4b04      	ldr	r3, [pc, #16]	; (8007e74 <SysTick_Config+0x40>)
 8007e64:	2207      	movs	r2, #7
 8007e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3708      	adds	r7, #8
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	e000e010 	.word	0xe000e010

08007e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f7ff ff29 	bl	8007cd8 <__NVIC_SetPriorityGrouping>
}
 8007e86:	bf00      	nop
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b086      	sub	sp, #24
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	4603      	mov	r3, r0
 8007e96:	60b9      	str	r1, [r7, #8]
 8007e98:	607a      	str	r2, [r7, #4]
 8007e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007ea0:	f7ff ff3e 	bl	8007d20 <__NVIC_GetPriorityGrouping>
 8007ea4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	68b9      	ldr	r1, [r7, #8]
 8007eaa:	6978      	ldr	r0, [r7, #20]
 8007eac:	f7ff ff8e 	bl	8007dcc <NVIC_EncodePriority>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007eb6:	4611      	mov	r1, r2
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7ff ff5d 	bl	8007d78 <__NVIC_SetPriority>
}
 8007ebe:	bf00      	nop
 8007ec0:	3718      	adds	r7, #24
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b082      	sub	sp, #8
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	4603      	mov	r3, r0
 8007ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7ff ff31 	bl	8007d3c <__NVIC_EnableIRQ>
}
 8007eda:	bf00      	nop
 8007edc:	3708      	adds	r7, #8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b082      	sub	sp, #8
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f7ff ffa2 	bl	8007e34 <SysTick_Config>
 8007ef0:	4603      	mov	r3, r0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
	...

08007efc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b086      	sub	sp, #24
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007f04:	2300      	movs	r3, #0
 8007f06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007f08:	f7ff feb8 	bl	8007c7c <HAL_GetTick>
 8007f0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d101      	bne.n	8007f18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	e099      	b.n	800804c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2202      	movs	r2, #2
 8007f24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f022 0201 	bic.w	r2, r2, #1
 8007f36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007f38:	e00f      	b.n	8007f5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007f3a:	f7ff fe9f 	bl	8007c7c <HAL_GetTick>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	2b05      	cmp	r3, #5
 8007f46:	d908      	bls.n	8007f5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2220      	movs	r2, #32
 8007f4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2203      	movs	r2, #3
 8007f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e078      	b.n	800804c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f003 0301 	and.w	r3, r3, #1
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d1e8      	bne.n	8007f3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007f70:	697a      	ldr	r2, [r7, #20]
 8007f72:	4b38      	ldr	r3, [pc, #224]	; (8008054 <HAL_DMA_Init+0x158>)
 8007f74:	4013      	ands	r3, r2
 8007f76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	685a      	ldr	r2, [r3, #4]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007f86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a1b      	ldr	r3, [r3, #32]
 8007fa4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb0:	2b04      	cmp	r3, #4
 8007fb2:	d107      	bne.n	8007fc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	697a      	ldr	r2, [r7, #20]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	697a      	ldr	r2, [r7, #20]
 8007fca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	695b      	ldr	r3, [r3, #20]
 8007fd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	f023 0307 	bic.w	r3, r3, #7
 8007fda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe0:	697a      	ldr	r2, [r7, #20]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fea:	2b04      	cmp	r3, #4
 8007fec:	d117      	bne.n	800801e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00e      	beq.n	800801e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 fa19 	bl	8008438 <DMA_CheckFifoParam>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d008      	beq.n	800801e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2240      	movs	r2, #64	; 0x40
 8008010:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2201      	movs	r2, #1
 8008016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800801a:	2301      	movs	r3, #1
 800801c:	e016      	b.n	800804c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 f9d0 	bl	80083cc <DMA_CalcBaseAndBitshift>
 800802c:	4603      	mov	r3, r0
 800802e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008034:	223f      	movs	r2, #63	; 0x3f
 8008036:	409a      	lsls	r2, r3
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2201      	movs	r2, #1
 8008046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3718      	adds	r7, #24
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	f010803f 	.word	0xf010803f

08008058 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008066:	b2db      	uxtb	r3, r3
 8008068:	2b02      	cmp	r3, #2
 800806a:	d004      	beq.n	8008076 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2280      	movs	r2, #128	; 0x80
 8008070:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e00c      	b.n	8008090 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2205      	movs	r2, #5
 800807a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f022 0201 	bic.w	r2, r2, #1
 800808c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80080a4:	2300      	movs	r3, #0
 80080a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80080a8:	4b92      	ldr	r3, [pc, #584]	; (80082f4 <HAL_DMA_IRQHandler+0x258>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a92      	ldr	r2, [pc, #584]	; (80082f8 <HAL_DMA_IRQHandler+0x25c>)
 80080ae:	fba2 2303 	umull	r2, r3, r2, r3
 80080b2:	0a9b      	lsrs	r3, r3, #10
 80080b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080c6:	2208      	movs	r2, #8
 80080c8:	409a      	lsls	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	4013      	ands	r3, r2
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d01a      	beq.n	8008108 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 0304 	and.w	r3, r3, #4
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d013      	beq.n	8008108 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f022 0204 	bic.w	r2, r2, #4
 80080ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080f4:	2208      	movs	r2, #8
 80080f6:	409a      	lsls	r2, r3
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008100:	f043 0201 	orr.w	r2, r3, #1
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800810c:	2201      	movs	r2, #1
 800810e:	409a      	lsls	r2, r3
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	4013      	ands	r3, r2
 8008114:	2b00      	cmp	r3, #0
 8008116:	d012      	beq.n	800813e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	695b      	ldr	r3, [r3, #20]
 800811e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00b      	beq.n	800813e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800812a:	2201      	movs	r2, #1
 800812c:	409a      	lsls	r2, r3
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008136:	f043 0202 	orr.w	r2, r3, #2
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008142:	2204      	movs	r2, #4
 8008144:	409a      	lsls	r2, r3
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	4013      	ands	r3, r2
 800814a:	2b00      	cmp	r3, #0
 800814c:	d012      	beq.n	8008174 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 0302 	and.w	r3, r3, #2
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00b      	beq.n	8008174 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008160:	2204      	movs	r2, #4
 8008162:	409a      	lsls	r2, r3
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800816c:	f043 0204 	orr.w	r2, r3, #4
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008178:	2210      	movs	r2, #16
 800817a:	409a      	lsls	r2, r3
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	4013      	ands	r3, r2
 8008180:	2b00      	cmp	r3, #0
 8008182:	d043      	beq.n	800820c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 0308 	and.w	r3, r3, #8
 800818e:	2b00      	cmp	r3, #0
 8008190:	d03c      	beq.n	800820c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008196:	2210      	movs	r2, #16
 8008198:	409a      	lsls	r2, r3
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d018      	beq.n	80081de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d108      	bne.n	80081cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d024      	beq.n	800820c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	4798      	blx	r3
 80081ca:	e01f      	b.n	800820c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d01b      	beq.n	800820c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	4798      	blx	r3
 80081dc:	e016      	b.n	800820c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d107      	bne.n	80081fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f022 0208 	bic.w	r2, r2, #8
 80081fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008200:	2b00      	cmp	r3, #0
 8008202:	d003      	beq.n	800820c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008210:	2220      	movs	r2, #32
 8008212:	409a      	lsls	r2, r3
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	4013      	ands	r3, r2
 8008218:	2b00      	cmp	r3, #0
 800821a:	f000 808e 	beq.w	800833a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f003 0310 	and.w	r3, r3, #16
 8008228:	2b00      	cmp	r3, #0
 800822a:	f000 8086 	beq.w	800833a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008232:	2220      	movs	r2, #32
 8008234:	409a      	lsls	r2, r3
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008240:	b2db      	uxtb	r3, r3
 8008242:	2b05      	cmp	r3, #5
 8008244:	d136      	bne.n	80082b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f022 0216 	bic.w	r2, r2, #22
 8008254:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	695a      	ldr	r2, [r3, #20]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008264:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826a:	2b00      	cmp	r3, #0
 800826c:	d103      	bne.n	8008276 <HAL_DMA_IRQHandler+0x1da>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008272:	2b00      	cmp	r3, #0
 8008274:	d007      	beq.n	8008286 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f022 0208 	bic.w	r2, r2, #8
 8008284:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800828a:	223f      	movs	r2, #63	; 0x3f
 800828c:	409a      	lsls	r2, r3
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2201      	movs	r2, #1
 800829e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d07d      	beq.n	80083a6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	4798      	blx	r3
        }
        return;
 80082b2:	e078      	b.n	80083a6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d01c      	beq.n	80082fc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d108      	bne.n	80082e2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d030      	beq.n	800833a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	4798      	blx	r3
 80082e0:	e02b      	b.n	800833a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d027      	beq.n	800833a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	4798      	blx	r3
 80082f2:	e022      	b.n	800833a <HAL_DMA_IRQHandler+0x29e>
 80082f4:	2000007c 	.word	0x2000007c
 80082f8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008306:	2b00      	cmp	r3, #0
 8008308:	d10f      	bne.n	800832a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f022 0210 	bic.w	r2, r2, #16
 8008318:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2201      	movs	r2, #1
 8008326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800832e:	2b00      	cmp	r3, #0
 8008330:	d003      	beq.n	800833a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800833e:	2b00      	cmp	r3, #0
 8008340:	d032      	beq.n	80083a8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008346:	f003 0301 	and.w	r3, r3, #1
 800834a:	2b00      	cmp	r3, #0
 800834c:	d022      	beq.n	8008394 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2205      	movs	r2, #5
 8008352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f022 0201 	bic.w	r2, r2, #1
 8008364:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	3301      	adds	r3, #1
 800836a:	60bb      	str	r3, [r7, #8]
 800836c:	697a      	ldr	r2, [r7, #20]
 800836e:	429a      	cmp	r2, r3
 8008370:	d307      	bcc.n	8008382 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 0301 	and.w	r3, r3, #1
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1f2      	bne.n	8008366 <HAL_DMA_IRQHandler+0x2ca>
 8008380:	e000      	b.n	8008384 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008382:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008398:	2b00      	cmp	r3, #0
 800839a:	d005      	beq.n	80083a8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	4798      	blx	r3
 80083a4:	e000      	b.n	80083a8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80083a6:	bf00      	nop
    }
  }
}
 80083a8:	3718      	adds	r7, #24
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop

080083b0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80083be:	b2db      	uxtb	r3, r3
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	3b10      	subs	r3, #16
 80083dc:	4a14      	ldr	r2, [pc, #80]	; (8008430 <DMA_CalcBaseAndBitshift+0x64>)
 80083de:	fba2 2303 	umull	r2, r3, r2, r3
 80083e2:	091b      	lsrs	r3, r3, #4
 80083e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80083e6:	4a13      	ldr	r2, [pc, #76]	; (8008434 <DMA_CalcBaseAndBitshift+0x68>)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	4413      	add	r3, r2
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	461a      	mov	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2b03      	cmp	r3, #3
 80083f8:	d909      	bls.n	800840e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008402:	f023 0303 	bic.w	r3, r3, #3
 8008406:	1d1a      	adds	r2, r3, #4
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	659a      	str	r2, [r3, #88]	; 0x58
 800840c:	e007      	b.n	800841e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008416:	f023 0303 	bic.w	r3, r3, #3
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008422:	4618      	mov	r0, r3
 8008424:	3714      	adds	r7, #20
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr
 800842e:	bf00      	nop
 8008430:	aaaaaaab 	.word	0xaaaaaaab
 8008434:	0801569c 	.word	0x0801569c

08008438 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008440:	2300      	movs	r3, #0
 8008442:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008448:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d11f      	bne.n	8008492 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	2b03      	cmp	r3, #3
 8008456:	d855      	bhi.n	8008504 <DMA_CheckFifoParam+0xcc>
 8008458:	a201      	add	r2, pc, #4	; (adr r2, 8008460 <DMA_CheckFifoParam+0x28>)
 800845a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845e:	bf00      	nop
 8008460:	08008471 	.word	0x08008471
 8008464:	08008483 	.word	0x08008483
 8008468:	08008471 	.word	0x08008471
 800846c:	08008505 	.word	0x08008505
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008474:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d045      	beq.n	8008508 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008480:	e042      	b.n	8008508 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008486:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800848a:	d13f      	bne.n	800850c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008490:	e03c      	b.n	800850c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	699b      	ldr	r3, [r3, #24]
 8008496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800849a:	d121      	bne.n	80084e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	2b03      	cmp	r3, #3
 80084a0:	d836      	bhi.n	8008510 <DMA_CheckFifoParam+0xd8>
 80084a2:	a201      	add	r2, pc, #4	; (adr r2, 80084a8 <DMA_CheckFifoParam+0x70>)
 80084a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a8:	080084b9 	.word	0x080084b9
 80084ac:	080084bf 	.word	0x080084bf
 80084b0:	080084b9 	.word	0x080084b9
 80084b4:	080084d1 	.word	0x080084d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	73fb      	strb	r3, [r7, #15]
      break;
 80084bc:	e02f      	b.n	800851e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d024      	beq.n	8008514 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80084ce:	e021      	b.n	8008514 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80084d8:	d11e      	bne.n	8008518 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80084de:	e01b      	b.n	8008518 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d902      	bls.n	80084ec <DMA_CheckFifoParam+0xb4>
 80084e6:	2b03      	cmp	r3, #3
 80084e8:	d003      	beq.n	80084f2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80084ea:	e018      	b.n	800851e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	73fb      	strb	r3, [r7, #15]
      break;
 80084f0:	e015      	b.n	800851e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00e      	beq.n	800851c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	73fb      	strb	r3, [r7, #15]
      break;
 8008502:	e00b      	b.n	800851c <DMA_CheckFifoParam+0xe4>
      break;
 8008504:	bf00      	nop
 8008506:	e00a      	b.n	800851e <DMA_CheckFifoParam+0xe6>
      break;
 8008508:	bf00      	nop
 800850a:	e008      	b.n	800851e <DMA_CheckFifoParam+0xe6>
      break;
 800850c:	bf00      	nop
 800850e:	e006      	b.n	800851e <DMA_CheckFifoParam+0xe6>
      break;
 8008510:	bf00      	nop
 8008512:	e004      	b.n	800851e <DMA_CheckFifoParam+0xe6>
      break;
 8008514:	bf00      	nop
 8008516:	e002      	b.n	800851e <DMA_CheckFifoParam+0xe6>
      break;   
 8008518:	bf00      	nop
 800851a:	e000      	b.n	800851e <DMA_CheckFifoParam+0xe6>
      break;
 800851c:	bf00      	nop
    }
  } 
  
  return status; 
 800851e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008520:	4618      	mov	r0, r3
 8008522:	3714      	adds	r7, #20
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800852c:	b480      	push	{r7}
 800852e:	b089      	sub	sp, #36	; 0x24
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008536:	2300      	movs	r3, #0
 8008538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800853a:	2300      	movs	r3, #0
 800853c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800853e:	2300      	movs	r3, #0
 8008540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008542:	2300      	movs	r3, #0
 8008544:	61fb      	str	r3, [r7, #28]
 8008546:	e16b      	b.n	8008820 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008548:	2201      	movs	r2, #1
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	fa02 f303 	lsl.w	r3, r2, r3
 8008550:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	697a      	ldr	r2, [r7, #20]
 8008558:	4013      	ands	r3, r2
 800855a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800855c:	693a      	ldr	r2, [r7, #16]
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	429a      	cmp	r2, r3
 8008562:	f040 815a 	bne.w	800881a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	2b01      	cmp	r3, #1
 800856c:	d00b      	beq.n	8008586 <HAL_GPIO_Init+0x5a>
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	2b02      	cmp	r3, #2
 8008574:	d007      	beq.n	8008586 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800857a:	2b11      	cmp	r3, #17
 800857c:	d003      	beq.n	8008586 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	2b12      	cmp	r3, #18
 8008584:	d130      	bne.n	80085e8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	005b      	lsls	r3, r3, #1
 8008590:	2203      	movs	r2, #3
 8008592:	fa02 f303 	lsl.w	r3, r2, r3
 8008596:	43db      	mvns	r3, r3
 8008598:	69ba      	ldr	r2, [r7, #24]
 800859a:	4013      	ands	r3, r2
 800859c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	68da      	ldr	r2, [r3, #12]
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	005b      	lsls	r3, r3, #1
 80085a6:	fa02 f303 	lsl.w	r3, r2, r3
 80085aa:	69ba      	ldr	r2, [r7, #24]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	69ba      	ldr	r2, [r7, #24]
 80085b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80085bc:	2201      	movs	r2, #1
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	fa02 f303 	lsl.w	r3, r2, r3
 80085c4:	43db      	mvns	r3, r3
 80085c6:	69ba      	ldr	r2, [r7, #24]
 80085c8:	4013      	ands	r3, r2
 80085ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	091b      	lsrs	r3, r3, #4
 80085d2:	f003 0201 	and.w	r2, r3, #1
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	fa02 f303 	lsl.w	r3, r2, r3
 80085dc:	69ba      	ldr	r2, [r7, #24]
 80085de:	4313      	orrs	r3, r2
 80085e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	69ba      	ldr	r2, [r7, #24]
 80085e6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	005b      	lsls	r3, r3, #1
 80085f2:	2203      	movs	r2, #3
 80085f4:	fa02 f303 	lsl.w	r3, r2, r3
 80085f8:	43db      	mvns	r3, r3
 80085fa:	69ba      	ldr	r2, [r7, #24]
 80085fc:	4013      	ands	r3, r2
 80085fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	689a      	ldr	r2, [r3, #8]
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	005b      	lsls	r3, r3, #1
 8008608:	fa02 f303 	lsl.w	r3, r2, r3
 800860c:	69ba      	ldr	r2, [r7, #24]
 800860e:	4313      	orrs	r3, r2
 8008610:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	69ba      	ldr	r2, [r7, #24]
 8008616:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	2b02      	cmp	r3, #2
 800861e:	d003      	beq.n	8008628 <HAL_GPIO_Init+0xfc>
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	2b12      	cmp	r3, #18
 8008626:	d123      	bne.n	8008670 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	08da      	lsrs	r2, r3, #3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	3208      	adds	r2, #8
 8008630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008634:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	f003 0307 	and.w	r3, r3, #7
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	220f      	movs	r2, #15
 8008640:	fa02 f303 	lsl.w	r3, r2, r3
 8008644:	43db      	mvns	r3, r3
 8008646:	69ba      	ldr	r2, [r7, #24]
 8008648:	4013      	ands	r3, r2
 800864a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	691a      	ldr	r2, [r3, #16]
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	f003 0307 	and.w	r3, r3, #7
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	fa02 f303 	lsl.w	r3, r2, r3
 800865c:	69ba      	ldr	r2, [r7, #24]
 800865e:	4313      	orrs	r3, r2
 8008660:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	08da      	lsrs	r2, r3, #3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	3208      	adds	r2, #8
 800866a:	69b9      	ldr	r1, [r7, #24]
 800866c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	005b      	lsls	r3, r3, #1
 800867a:	2203      	movs	r2, #3
 800867c:	fa02 f303 	lsl.w	r3, r2, r3
 8008680:	43db      	mvns	r3, r3
 8008682:	69ba      	ldr	r2, [r7, #24]
 8008684:	4013      	ands	r3, r2
 8008686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	f003 0203 	and.w	r2, r3, #3
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	005b      	lsls	r3, r3, #1
 8008694:	fa02 f303 	lsl.w	r3, r2, r3
 8008698:	69ba      	ldr	r2, [r7, #24]
 800869a:	4313      	orrs	r3, r2
 800869c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	69ba      	ldr	r2, [r7, #24]
 80086a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f000 80b4 	beq.w	800881a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80086b2:	2300      	movs	r3, #0
 80086b4:	60fb      	str	r3, [r7, #12]
 80086b6:	4b5f      	ldr	r3, [pc, #380]	; (8008834 <HAL_GPIO_Init+0x308>)
 80086b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ba:	4a5e      	ldr	r2, [pc, #376]	; (8008834 <HAL_GPIO_Init+0x308>)
 80086bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80086c0:	6453      	str	r3, [r2, #68]	; 0x44
 80086c2:	4b5c      	ldr	r3, [pc, #368]	; (8008834 <HAL_GPIO_Init+0x308>)
 80086c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086ca:	60fb      	str	r3, [r7, #12]
 80086cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80086ce:	4a5a      	ldr	r2, [pc, #360]	; (8008838 <HAL_GPIO_Init+0x30c>)
 80086d0:	69fb      	ldr	r3, [r7, #28]
 80086d2:	089b      	lsrs	r3, r3, #2
 80086d4:	3302      	adds	r3, #2
 80086d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	f003 0303 	and.w	r3, r3, #3
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	220f      	movs	r2, #15
 80086e6:	fa02 f303 	lsl.w	r3, r2, r3
 80086ea:	43db      	mvns	r3, r3
 80086ec:	69ba      	ldr	r2, [r7, #24]
 80086ee:	4013      	ands	r3, r2
 80086f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a51      	ldr	r2, [pc, #324]	; (800883c <HAL_GPIO_Init+0x310>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d02b      	beq.n	8008752 <HAL_GPIO_Init+0x226>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a50      	ldr	r2, [pc, #320]	; (8008840 <HAL_GPIO_Init+0x314>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d025      	beq.n	800874e <HAL_GPIO_Init+0x222>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a4f      	ldr	r2, [pc, #316]	; (8008844 <HAL_GPIO_Init+0x318>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d01f      	beq.n	800874a <HAL_GPIO_Init+0x21e>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a4e      	ldr	r2, [pc, #312]	; (8008848 <HAL_GPIO_Init+0x31c>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d019      	beq.n	8008746 <HAL_GPIO_Init+0x21a>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a4d      	ldr	r2, [pc, #308]	; (800884c <HAL_GPIO_Init+0x320>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d013      	beq.n	8008742 <HAL_GPIO_Init+0x216>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a4c      	ldr	r2, [pc, #304]	; (8008850 <HAL_GPIO_Init+0x324>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d00d      	beq.n	800873e <HAL_GPIO_Init+0x212>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a4b      	ldr	r2, [pc, #300]	; (8008854 <HAL_GPIO_Init+0x328>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d007      	beq.n	800873a <HAL_GPIO_Init+0x20e>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4a4a      	ldr	r2, [pc, #296]	; (8008858 <HAL_GPIO_Init+0x32c>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d101      	bne.n	8008736 <HAL_GPIO_Init+0x20a>
 8008732:	2307      	movs	r3, #7
 8008734:	e00e      	b.n	8008754 <HAL_GPIO_Init+0x228>
 8008736:	2308      	movs	r3, #8
 8008738:	e00c      	b.n	8008754 <HAL_GPIO_Init+0x228>
 800873a:	2306      	movs	r3, #6
 800873c:	e00a      	b.n	8008754 <HAL_GPIO_Init+0x228>
 800873e:	2305      	movs	r3, #5
 8008740:	e008      	b.n	8008754 <HAL_GPIO_Init+0x228>
 8008742:	2304      	movs	r3, #4
 8008744:	e006      	b.n	8008754 <HAL_GPIO_Init+0x228>
 8008746:	2303      	movs	r3, #3
 8008748:	e004      	b.n	8008754 <HAL_GPIO_Init+0x228>
 800874a:	2302      	movs	r3, #2
 800874c:	e002      	b.n	8008754 <HAL_GPIO_Init+0x228>
 800874e:	2301      	movs	r3, #1
 8008750:	e000      	b.n	8008754 <HAL_GPIO_Init+0x228>
 8008752:	2300      	movs	r3, #0
 8008754:	69fa      	ldr	r2, [r7, #28]
 8008756:	f002 0203 	and.w	r2, r2, #3
 800875a:	0092      	lsls	r2, r2, #2
 800875c:	4093      	lsls	r3, r2
 800875e:	69ba      	ldr	r2, [r7, #24]
 8008760:	4313      	orrs	r3, r2
 8008762:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008764:	4934      	ldr	r1, [pc, #208]	; (8008838 <HAL_GPIO_Init+0x30c>)
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	089b      	lsrs	r3, r3, #2
 800876a:	3302      	adds	r3, #2
 800876c:	69ba      	ldr	r2, [r7, #24]
 800876e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008772:	4b3a      	ldr	r3, [pc, #232]	; (800885c <HAL_GPIO_Init+0x330>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	43db      	mvns	r3, r3
 800877c:	69ba      	ldr	r2, [r7, #24]
 800877e:	4013      	ands	r3, r2
 8008780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800878a:	2b00      	cmp	r3, #0
 800878c:	d003      	beq.n	8008796 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800878e:	69ba      	ldr	r2, [r7, #24]
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	4313      	orrs	r3, r2
 8008794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008796:	4a31      	ldr	r2, [pc, #196]	; (800885c <HAL_GPIO_Init+0x330>)
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800879c:	4b2f      	ldr	r3, [pc, #188]	; (800885c <HAL_GPIO_Init+0x330>)
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	43db      	mvns	r3, r3
 80087a6:	69ba      	ldr	r2, [r7, #24]
 80087a8:	4013      	ands	r3, r2
 80087aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d003      	beq.n	80087c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80087b8:	69ba      	ldr	r2, [r7, #24]
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	4313      	orrs	r3, r2
 80087be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80087c0:	4a26      	ldr	r2, [pc, #152]	; (800885c <HAL_GPIO_Init+0x330>)
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80087c6:	4b25      	ldr	r3, [pc, #148]	; (800885c <HAL_GPIO_Init+0x330>)
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	43db      	mvns	r3, r3
 80087d0:	69ba      	ldr	r2, [r7, #24]
 80087d2:	4013      	ands	r3, r2
 80087d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d003      	beq.n	80087ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80087e2:	69ba      	ldr	r2, [r7, #24]
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80087ea:	4a1c      	ldr	r2, [pc, #112]	; (800885c <HAL_GPIO_Init+0x330>)
 80087ec:	69bb      	ldr	r3, [r7, #24]
 80087ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80087f0:	4b1a      	ldr	r3, [pc, #104]	; (800885c <HAL_GPIO_Init+0x330>)
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	43db      	mvns	r3, r3
 80087fa:	69ba      	ldr	r2, [r7, #24]
 80087fc:	4013      	ands	r3, r2
 80087fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008808:	2b00      	cmp	r3, #0
 800880a:	d003      	beq.n	8008814 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800880c:	69ba      	ldr	r2, [r7, #24]
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	4313      	orrs	r3, r2
 8008812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008814:	4a11      	ldr	r2, [pc, #68]	; (800885c <HAL_GPIO_Init+0x330>)
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	3301      	adds	r3, #1
 800881e:	61fb      	str	r3, [r7, #28]
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	2b0f      	cmp	r3, #15
 8008824:	f67f ae90 	bls.w	8008548 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008828:	bf00      	nop
 800882a:	3724      	adds	r7, #36	; 0x24
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr
 8008834:	40023800 	.word	0x40023800
 8008838:	40013800 	.word	0x40013800
 800883c:	40020000 	.word	0x40020000
 8008840:	40020400 	.word	0x40020400
 8008844:	40020800 	.word	0x40020800
 8008848:	40020c00 	.word	0x40020c00
 800884c:	40021000 	.word	0x40021000
 8008850:	40021400 	.word	0x40021400
 8008854:	40021800 	.word	0x40021800
 8008858:	40021c00 	.word	0x40021c00
 800885c:	40013c00 	.word	0x40013c00

08008860 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	460b      	mov	r3, r1
 800886a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	691a      	ldr	r2, [r3, #16]
 8008870:	887b      	ldrh	r3, [r7, #2]
 8008872:	4013      	ands	r3, r2
 8008874:	2b00      	cmp	r3, #0
 8008876:	d002      	beq.n	800887e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008878:	2301      	movs	r3, #1
 800887a:	73fb      	strb	r3, [r7, #15]
 800887c:	e001      	b.n	8008882 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800887e:	2300      	movs	r3, #0
 8008880:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008882:	7bfb      	ldrb	r3, [r7, #15]
}
 8008884:	4618      	mov	r0, r3
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	460b      	mov	r3, r1
 800889a:	807b      	strh	r3, [r7, #2]
 800889c:	4613      	mov	r3, r2
 800889e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80088a0:	787b      	ldrb	r3, [r7, #1]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d003      	beq.n	80088ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80088a6:	887a      	ldrh	r2, [r7, #2]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80088ac:	e003      	b.n	80088b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80088ae:	887b      	ldrh	r3, [r7, #2]
 80088b0:	041a      	lsls	r2, r3, #16
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	619a      	str	r2, [r3, #24]
}
 80088b6:	bf00      	nop
 80088b8:	370c      	adds	r7, #12
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr

080088c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80088c2:	b480      	push	{r7}
 80088c4:	b083      	sub	sp, #12
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
 80088ca:	460b      	mov	r3, r1
 80088cc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	695a      	ldr	r2, [r3, #20]
 80088d2:	887b      	ldrh	r3, [r7, #2]
 80088d4:	401a      	ands	r2, r3
 80088d6:	887b      	ldrh	r3, [r7, #2]
 80088d8:	429a      	cmp	r2, r3
 80088da:	d104      	bne.n	80088e6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80088dc:	887b      	ldrh	r3, [r7, #2]
 80088de:	041a      	lsls	r2, r3, #16
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80088e4:	e002      	b.n	80088ec <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80088e6:	887a      	ldrh	r2, [r7, #2]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	619a      	str	r2, [r3, #24]
}
 80088ec:	bf00      	nop
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d101      	bne.n	800890a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	e11f      	b.n	8008b4a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008910:	b2db      	uxtb	r3, r3
 8008912:	2b00      	cmp	r3, #0
 8008914:	d106      	bne.n	8008924 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f7fb fda0 	bl	8004464 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2224      	movs	r2, #36	; 0x24
 8008928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f022 0201 	bic.w	r2, r2, #1
 800893a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800894a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800895a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800895c:	f004 fac8 	bl	800cef0 <HAL_RCC_GetPCLK1Freq>
 8008960:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	4a7b      	ldr	r2, [pc, #492]	; (8008b54 <HAL_I2C_Init+0x25c>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d807      	bhi.n	800897c <HAL_I2C_Init+0x84>
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	4a7a      	ldr	r2, [pc, #488]	; (8008b58 <HAL_I2C_Init+0x260>)
 8008970:	4293      	cmp	r3, r2
 8008972:	bf94      	ite	ls
 8008974:	2301      	movls	r3, #1
 8008976:	2300      	movhi	r3, #0
 8008978:	b2db      	uxtb	r3, r3
 800897a:	e006      	b.n	800898a <HAL_I2C_Init+0x92>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	4a77      	ldr	r2, [pc, #476]	; (8008b5c <HAL_I2C_Init+0x264>)
 8008980:	4293      	cmp	r3, r2
 8008982:	bf94      	ite	ls
 8008984:	2301      	movls	r3, #1
 8008986:	2300      	movhi	r3, #0
 8008988:	b2db      	uxtb	r3, r3
 800898a:	2b00      	cmp	r3, #0
 800898c:	d001      	beq.n	8008992 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	e0db      	b.n	8008b4a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	4a72      	ldr	r2, [pc, #456]	; (8008b60 <HAL_I2C_Init+0x268>)
 8008996:	fba2 2303 	umull	r2, r3, r2, r3
 800899a:	0c9b      	lsrs	r3, r3, #18
 800899c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	430a      	orrs	r2, r1
 80089b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	6a1b      	ldr	r3, [r3, #32]
 80089b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	4a64      	ldr	r2, [pc, #400]	; (8008b54 <HAL_I2C_Init+0x25c>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d802      	bhi.n	80089cc <HAL_I2C_Init+0xd4>
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	3301      	adds	r3, #1
 80089ca:	e009      	b.n	80089e0 <HAL_I2C_Init+0xe8>
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80089d2:	fb02 f303 	mul.w	r3, r2, r3
 80089d6:	4a63      	ldr	r2, [pc, #396]	; (8008b64 <HAL_I2C_Init+0x26c>)
 80089d8:	fba2 2303 	umull	r2, r3, r2, r3
 80089dc:	099b      	lsrs	r3, r3, #6
 80089de:	3301      	adds	r3, #1
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	6812      	ldr	r2, [r2, #0]
 80089e4:	430b      	orrs	r3, r1
 80089e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	69db      	ldr	r3, [r3, #28]
 80089ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80089f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	4956      	ldr	r1, [pc, #344]	; (8008b54 <HAL_I2C_Init+0x25c>)
 80089fc:	428b      	cmp	r3, r1
 80089fe:	d80d      	bhi.n	8008a1c <HAL_I2C_Init+0x124>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	1e59      	subs	r1, r3, #1
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	005b      	lsls	r3, r3, #1
 8008a0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a0e:	3301      	adds	r3, #1
 8008a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a14:	2b04      	cmp	r3, #4
 8008a16:	bf38      	it	cc
 8008a18:	2304      	movcc	r3, #4
 8008a1a:	e04f      	b.n	8008abc <HAL_I2C_Init+0x1c4>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d111      	bne.n	8008a48 <HAL_I2C_Init+0x150>
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	1e58      	subs	r0, r3, #1
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6859      	ldr	r1, [r3, #4]
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	005b      	lsls	r3, r3, #1
 8008a30:	440b      	add	r3, r1
 8008a32:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a36:	3301      	adds	r3, #1
 8008a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	bf0c      	ite	eq
 8008a40:	2301      	moveq	r3, #1
 8008a42:	2300      	movne	r3, #0
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	e012      	b.n	8008a6e <HAL_I2C_Init+0x176>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	1e58      	subs	r0, r3, #1
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6859      	ldr	r1, [r3, #4]
 8008a50:	460b      	mov	r3, r1
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	440b      	add	r3, r1
 8008a56:	0099      	lsls	r1, r3, #2
 8008a58:	440b      	add	r3, r1
 8008a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a5e:	3301      	adds	r3, #1
 8008a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	bf0c      	ite	eq
 8008a68:	2301      	moveq	r3, #1
 8008a6a:	2300      	movne	r3, #0
 8008a6c:	b2db      	uxtb	r3, r3
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d001      	beq.n	8008a76 <HAL_I2C_Init+0x17e>
 8008a72:	2301      	movs	r3, #1
 8008a74:	e022      	b.n	8008abc <HAL_I2C_Init+0x1c4>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d10e      	bne.n	8008a9c <HAL_I2C_Init+0x1a4>
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	1e58      	subs	r0, r3, #1
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6859      	ldr	r1, [r3, #4]
 8008a86:	460b      	mov	r3, r1
 8008a88:	005b      	lsls	r3, r3, #1
 8008a8a:	440b      	add	r3, r1
 8008a8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a90:	3301      	adds	r3, #1
 8008a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a9a:	e00f      	b.n	8008abc <HAL_I2C_Init+0x1c4>
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	1e58      	subs	r0, r3, #1
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6859      	ldr	r1, [r3, #4]
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	440b      	add	r3, r1
 8008aaa:	0099      	lsls	r1, r3, #2
 8008aac:	440b      	add	r3, r1
 8008aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ab8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008abc:	6879      	ldr	r1, [r7, #4]
 8008abe:	6809      	ldr	r1, [r1, #0]
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	69da      	ldr	r2, [r3, #28]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6a1b      	ldr	r3, [r3, #32]
 8008ad6:	431a      	orrs	r2, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	430a      	orrs	r2, r1
 8008ade:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008aea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	6911      	ldr	r1, [r2, #16]
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	68d2      	ldr	r2, [r2, #12]
 8008af6:	4311      	orrs	r1, r2
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	6812      	ldr	r2, [r2, #0]
 8008afc:	430b      	orrs	r3, r1
 8008afe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	695a      	ldr	r2, [r3, #20]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	699b      	ldr	r3, [r3, #24]
 8008b12:	431a      	orrs	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	430a      	orrs	r2, r1
 8008b1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f042 0201 	orr.w	r2, r2, #1
 8008b2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2220      	movs	r2, #32
 8008b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	000186a0 	.word	0x000186a0
 8008b58:	001e847f 	.word	0x001e847f
 8008b5c:	003d08ff 	.word	0x003d08ff
 8008b60:	431bde83 	.word	0x431bde83
 8008b64:	10624dd3 	.word	0x10624dd3

08008b68 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b088      	sub	sp, #32
 8008b6c:	af02      	add	r7, sp, #8
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	607a      	str	r2, [r7, #4]
 8008b72:	461a      	mov	r2, r3
 8008b74:	460b      	mov	r3, r1
 8008b76:	817b      	strh	r3, [r7, #10]
 8008b78:	4613      	mov	r3, r2
 8008b7a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008b7c:	f7ff f87e 	bl	8007c7c <HAL_GetTick>
 8008b80:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	2b20      	cmp	r3, #32
 8008b8c:	f040 80e0 	bne.w	8008d50 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	2319      	movs	r3, #25
 8008b96:	2201      	movs	r2, #1
 8008b98:	4970      	ldr	r1, [pc, #448]	; (8008d5c <HAL_I2C_Master_Transmit+0x1f4>)
 8008b9a:	68f8      	ldr	r0, [r7, #12]
 8008b9c:	f002 f9f5 	bl	800af8a <I2C_WaitOnFlagUntilTimeout>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d001      	beq.n	8008baa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008ba6:	2302      	movs	r3, #2
 8008ba8:	e0d3      	b.n	8008d52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d101      	bne.n	8008bb8 <HAL_I2C_Master_Transmit+0x50>
 8008bb4:	2302      	movs	r3, #2
 8008bb6:	e0cc      	b.n	8008d52 <HAL_I2C_Master_Transmit+0x1ea>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f003 0301 	and.w	r3, r3, #1
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d007      	beq.n	8008bde <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	681a      	ldr	r2, [r3, #0]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f042 0201 	orr.w	r2, r2, #1
 8008bdc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008bec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2221      	movs	r2, #33	; 0x21
 8008bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2210      	movs	r2, #16
 8008bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2200      	movs	r2, #0
 8008c02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	893a      	ldrh	r2, [r7, #8]
 8008c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c14:	b29a      	uxth	r2, r3
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	4a50      	ldr	r2, [pc, #320]	; (8008d60 <HAL_I2C_Master_Transmit+0x1f8>)
 8008c1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008c20:	8979      	ldrh	r1, [r7, #10]
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	6a3a      	ldr	r2, [r7, #32]
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f001 ffc8 	bl	800abbc <I2C_MasterRequestWrite>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d001      	beq.n	8008c36 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	e08d      	b.n	8008d52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c36:	2300      	movs	r3, #0
 8008c38:	613b      	str	r3, [r7, #16]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	695b      	ldr	r3, [r3, #20]
 8008c40:	613b      	str	r3, [r7, #16]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	699b      	ldr	r3, [r3, #24]
 8008c48:	613b      	str	r3, [r7, #16]
 8008c4a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008c4c:	e066      	b.n	8008d1c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c4e:	697a      	ldr	r2, [r7, #20]
 8008c50:	6a39      	ldr	r1, [r7, #32]
 8008c52:	68f8      	ldr	r0, [r7, #12]
 8008c54:	f002 fa6f 	bl	800b136 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00d      	beq.n	8008c7a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c62:	2b04      	cmp	r3, #4
 8008c64:	d107      	bne.n	8008c76 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	e06b      	b.n	8008d52 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7e:	781a      	ldrb	r2, [r3, #0]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8a:	1c5a      	adds	r2, r3, #1
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	3b01      	subs	r3, #1
 8008c98:	b29a      	uxth	r2, r3
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	b29a      	uxth	r2, r3
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	695b      	ldr	r3, [r3, #20]
 8008cb0:	f003 0304 	and.w	r3, r3, #4
 8008cb4:	2b04      	cmp	r3, #4
 8008cb6:	d11b      	bne.n	8008cf0 <HAL_I2C_Master_Transmit+0x188>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d017      	beq.n	8008cf0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc4:	781a      	ldrb	r2, [r3, #0]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd0:	1c5a      	adds	r2, r3, #1
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	3b01      	subs	r3, #1
 8008cde:	b29a      	uxth	r2, r3
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	b29a      	uxth	r2, r3
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008cf0:	697a      	ldr	r2, [r7, #20]
 8008cf2:	6a39      	ldr	r1, [r7, #32]
 8008cf4:	68f8      	ldr	r0, [r7, #12]
 8008cf6:	f002 fa5f 	bl	800b1b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d00d      	beq.n	8008d1c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d04:	2b04      	cmp	r3, #4
 8008d06:	d107      	bne.n	8008d18 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d16:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e01a      	b.n	8008d52 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d194      	bne.n	8008c4e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2220      	movs	r2, #32
 8008d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2200      	movs	r2, #0
 8008d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	e000      	b.n	8008d52 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008d50:	2302      	movs	r3, #2
  }
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3718      	adds	r7, #24
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	00100002 	.word	0x00100002
 8008d60:	ffff0000 	.word	0xffff0000

08008d64 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b08c      	sub	sp, #48	; 0x30
 8008d68:	af02      	add	r7, sp, #8
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	4608      	mov	r0, r1
 8008d6e:	4611      	mov	r1, r2
 8008d70:	461a      	mov	r2, r3
 8008d72:	4603      	mov	r3, r0
 8008d74:	817b      	strh	r3, [r7, #10]
 8008d76:	460b      	mov	r3, r1
 8008d78:	813b      	strh	r3, [r7, #8]
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008d7e:	f7fe ff7d 	bl	8007c7c <HAL_GetTick>
 8008d82:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	2b20      	cmp	r3, #32
 8008d8e:	f040 8208 	bne.w	80091a2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	2319      	movs	r3, #25
 8008d98:	2201      	movs	r2, #1
 8008d9a:	497b      	ldr	r1, [pc, #492]	; (8008f88 <HAL_I2C_Mem_Read+0x224>)
 8008d9c:	68f8      	ldr	r0, [r7, #12]
 8008d9e:	f002 f8f4 	bl	800af8a <I2C_WaitOnFlagUntilTimeout>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d001      	beq.n	8008dac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008da8:	2302      	movs	r3, #2
 8008daa:	e1fb      	b.n	80091a4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d101      	bne.n	8008dba <HAL_I2C_Mem_Read+0x56>
 8008db6:	2302      	movs	r3, #2
 8008db8:	e1f4      	b.n	80091a4 <HAL_I2C_Mem_Read+0x440>
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f003 0301 	and.w	r3, r3, #1
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d007      	beq.n	8008de0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f042 0201 	orr.w	r2, r2, #1
 8008dde:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008dee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2222      	movs	r2, #34	; 0x22
 8008df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2240      	movs	r2, #64	; 0x40
 8008dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2200      	movs	r2, #0
 8008e04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008e10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e16:	b29a      	uxth	r2, r3
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	4a5b      	ldr	r2, [pc, #364]	; (8008f8c <HAL_I2C_Mem_Read+0x228>)
 8008e20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008e22:	88f8      	ldrh	r0, [r7, #6]
 8008e24:	893a      	ldrh	r2, [r7, #8]
 8008e26:	8979      	ldrh	r1, [r7, #10]
 8008e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2a:	9301      	str	r3, [sp, #4]
 8008e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2e:	9300      	str	r3, [sp, #0]
 8008e30:	4603      	mov	r3, r0
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	f001 ff44 	bl	800acc0 <I2C_RequestMemoryRead>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d001      	beq.n	8008e42 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e1b0      	b.n	80091a4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d113      	bne.n	8008e72 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	623b      	str	r3, [r7, #32]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	695b      	ldr	r3, [r3, #20]
 8008e54:	623b      	str	r3, [r7, #32]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	699b      	ldr	r3, [r3, #24]
 8008e5c:	623b      	str	r3, [r7, #32]
 8008e5e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e6e:	601a      	str	r2, [r3, #0]
 8008e70:	e184      	b.n	800917c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d11b      	bne.n	8008eb2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	61fb      	str	r3, [r7, #28]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	695b      	ldr	r3, [r3, #20]
 8008e94:	61fb      	str	r3, [r7, #28]
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	699b      	ldr	r3, [r3, #24]
 8008e9c:	61fb      	str	r3, [r7, #28]
 8008e9e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008eae:	601a      	str	r2, [r3, #0]
 8008eb0:	e164      	b.n	800917c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d11b      	bne.n	8008ef2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ec8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ed8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008eda:	2300      	movs	r3, #0
 8008edc:	61bb      	str	r3, [r7, #24]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	695b      	ldr	r3, [r3, #20]
 8008ee4:	61bb      	str	r3, [r7, #24]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	699b      	ldr	r3, [r3, #24]
 8008eec:	61bb      	str	r3, [r7, #24]
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	e144      	b.n	800917c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	617b      	str	r3, [r7, #20]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	695b      	ldr	r3, [r3, #20]
 8008efc:	617b      	str	r3, [r7, #20]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	699b      	ldr	r3, [r3, #24]
 8008f04:	617b      	str	r3, [r7, #20]
 8008f06:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008f08:	e138      	b.n	800917c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f0e:	2b03      	cmp	r3, #3
 8008f10:	f200 80f1 	bhi.w	80090f6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d123      	bne.n	8008f64 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f002 f98a 	bl	800b23a <I2C_WaitOnRXNEFlagUntilTimeout>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d001      	beq.n	8008f30 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e139      	b.n	80091a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	691a      	ldr	r2, [r3, #16]
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3a:	b2d2      	uxtb	r2, r2
 8008f3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f42:	1c5a      	adds	r2, r3, #1
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008f62:	e10b      	b.n	800917c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f68:	2b02      	cmp	r3, #2
 8008f6a:	d14e      	bne.n	800900a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6e:	9300      	str	r3, [sp, #0]
 8008f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f72:	2200      	movs	r2, #0
 8008f74:	4906      	ldr	r1, [pc, #24]	; (8008f90 <HAL_I2C_Mem_Read+0x22c>)
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f002 f807 	bl	800af8a <I2C_WaitOnFlagUntilTimeout>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d008      	beq.n	8008f94 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008f82:	2301      	movs	r3, #1
 8008f84:	e10e      	b.n	80091a4 <HAL_I2C_Mem_Read+0x440>
 8008f86:	bf00      	nop
 8008f88:	00100002 	.word	0x00100002
 8008f8c:	ffff0000 	.word	0xffff0000
 8008f90:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	691a      	ldr	r2, [r3, #16]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fae:	b2d2      	uxtb	r2, r2
 8008fb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb6:	1c5a      	adds	r2, r3, #1
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	b29a      	uxth	r2, r3
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	691a      	ldr	r2, [r3, #16]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe0:	b2d2      	uxtb	r2, r2
 8008fe2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe8:	1c5a      	adds	r2, r3, #1
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	3b01      	subs	r3, #1
 8009002:	b29a      	uxth	r2, r3
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009008:	e0b8      	b.n	800917c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800900a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900c:	9300      	str	r3, [sp, #0]
 800900e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009010:	2200      	movs	r2, #0
 8009012:	4966      	ldr	r1, [pc, #408]	; (80091ac <HAL_I2C_Mem_Read+0x448>)
 8009014:	68f8      	ldr	r0, [r7, #12]
 8009016:	f001 ffb8 	bl	800af8a <I2C_WaitOnFlagUntilTimeout>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d001      	beq.n	8009024 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	e0bf      	b.n	80091a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009032:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	691a      	ldr	r2, [r3, #16]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903e:	b2d2      	uxtb	r2, r2
 8009040:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009046:	1c5a      	adds	r2, r3, #1
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009050:	3b01      	subs	r3, #1
 8009052:	b29a      	uxth	r2, r3
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800905c:	b29b      	uxth	r3, r3
 800905e:	3b01      	subs	r3, #1
 8009060:	b29a      	uxth	r2, r3
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009068:	9300      	str	r3, [sp, #0]
 800906a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906c:	2200      	movs	r2, #0
 800906e:	494f      	ldr	r1, [pc, #316]	; (80091ac <HAL_I2C_Mem_Read+0x448>)
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f001 ff8a 	bl	800af8a <I2C_WaitOnFlagUntilTimeout>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d001      	beq.n	8009080 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	e091      	b.n	80091a4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800908e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	691a      	ldr	r2, [r3, #16]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909a:	b2d2      	uxtb	r2, r2
 800909c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a2:	1c5a      	adds	r2, r3, #1
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090ac:	3b01      	subs	r3, #1
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	3b01      	subs	r3, #1
 80090bc:	b29a      	uxth	r2, r3
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	691a      	ldr	r2, [r3, #16]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090cc:	b2d2      	uxtb	r2, r2
 80090ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d4:	1c5a      	adds	r2, r3, #1
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090de:	3b01      	subs	r3, #1
 80090e0:	b29a      	uxth	r2, r3
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	3b01      	subs	r3, #1
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80090f4:	e042      	b.n	800917c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80090fa:	68f8      	ldr	r0, [r7, #12]
 80090fc:	f002 f89d 	bl	800b23a <I2C_WaitOnRXNEFlagUntilTimeout>
 8009100:	4603      	mov	r3, r0
 8009102:	2b00      	cmp	r3, #0
 8009104:	d001      	beq.n	800910a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	e04c      	b.n	80091a4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	691a      	ldr	r2, [r3, #16]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009114:	b2d2      	uxtb	r2, r2
 8009116:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911c:	1c5a      	adds	r2, r3, #1
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009126:	3b01      	subs	r3, #1
 8009128:	b29a      	uxth	r2, r3
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009132:	b29b      	uxth	r3, r3
 8009134:	3b01      	subs	r3, #1
 8009136:	b29a      	uxth	r2, r3
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	695b      	ldr	r3, [r3, #20]
 8009142:	f003 0304 	and.w	r3, r3, #4
 8009146:	2b04      	cmp	r3, #4
 8009148:	d118      	bne.n	800917c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	691a      	ldr	r2, [r3, #16]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009154:	b2d2      	uxtb	r2, r2
 8009156:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915c:	1c5a      	adds	r2, r3, #1
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009166:	3b01      	subs	r3, #1
 8009168:	b29a      	uxth	r2, r3
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009172:	b29b      	uxth	r3, r3
 8009174:	3b01      	subs	r3, #1
 8009176:	b29a      	uxth	r2, r3
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009180:	2b00      	cmp	r3, #0
 8009182:	f47f aec2 	bne.w	8008f0a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2220      	movs	r2, #32
 800918a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2200      	movs	r2, #0
 8009192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2200      	movs	r2, #0
 800919a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800919e:	2300      	movs	r3, #0
 80091a0:	e000      	b.n	80091a4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80091a2:	2302      	movs	r3, #2
  }
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3728      	adds	r7, #40	; 0x28
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	00010004 	.word	0x00010004

080091b0 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b087      	sub	sp, #28
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	607a      	str	r2, [r7, #4]
 80091ba:	461a      	mov	r2, r3
 80091bc:	460b      	mov	r3, r1
 80091be:	817b      	strh	r3, [r7, #10]
 80091c0:	4613      	mov	r3, r2
 80091c2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 80091c4:	2300      	movs	r3, #0
 80091c6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 80091c8:	2300      	movs	r3, #0
 80091ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	2b20      	cmp	r3, #32
 80091d6:	f040 809e 	bne.w	8009316 <HAL_I2C_Master_Seq_Transmit_IT+0x166>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 80091da:	6a3b      	ldr	r3, [r7, #32]
 80091dc:	2b08      	cmp	r3, #8
 80091de:	d002      	beq.n	80091e6 <HAL_I2C_Master_Seq_Transmit_IT+0x36>
 80091e0:	6a3b      	ldr	r3, [r7, #32]
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d130      	bne.n	8009248 <HAL_I2C_Master_Seq_Transmit_IT+0x98>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80091e6:	4b4f      	ldr	r3, [pc, #316]	; (8009324 <HAL_I2C_Master_Seq_Transmit_IT+0x174>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	08db      	lsrs	r3, r3, #3
 80091ec:	4a4e      	ldr	r2, [pc, #312]	; (8009328 <HAL_I2C_Master_Seq_Transmit_IT+0x178>)
 80091ee:	fba2 2303 	umull	r2, r3, r2, r3
 80091f2:	0a1a      	lsrs	r2, r3, #8
 80091f4:	4613      	mov	r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	4413      	add	r3, r2
 80091fa:	009a      	lsls	r2, r3, #2
 80091fc:	4413      	add	r3, r2
 80091fe:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	3b01      	subs	r3, #1
 8009204:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d116      	bne.n	800923a <HAL_I2C_Master_Seq_Transmit_IT+0x8a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2200      	movs	r2, #0
 8009210:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2220      	movs	r2, #32
 8009216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2200      	movs	r2, #0
 800921e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009226:	f043 0220 	orr.w	r2, r3, #32
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2200      	movs	r2, #0
 8009232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	e06e      	b.n	8009318 <HAL_I2C_Master_Seq_Transmit_IT+0x168>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	699b      	ldr	r3, [r3, #24]
 8009240:	f003 0302 	and.w	r3, r3, #2
 8009244:	2b02      	cmp	r3, #2
 8009246:	d0db      	beq.n	8009200 <HAL_I2C_Master_Seq_Transmit_IT+0x50>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800924e:	2b01      	cmp	r3, #1
 8009250:	d101      	bne.n	8009256 <HAL_I2C_Master_Seq_Transmit_IT+0xa6>
 8009252:	2302      	movs	r3, #2
 8009254:	e060      	b.n	8009318 <HAL_I2C_Master_Seq_Transmit_IT+0x168>
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2201      	movs	r2, #1
 800925a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f003 0301 	and.w	r3, r3, #1
 8009268:	2b01      	cmp	r3, #1
 800926a:	d007      	beq.n	800927c <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f042 0201 	orr.w	r2, r2, #1
 800927a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800928a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2221      	movs	r2, #33	; 0x21
 8009290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2210      	movs	r2, #16
 8009298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	893a      	ldrh	r2, [r7, #8]
 80092ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092b2:	b29a      	uxth	r2, r3
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6a3a      	ldr	r2, [r7, #32]
 80092bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80092be:	897a      	ldrh	r2, [r7, #10]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c8:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	2b11      	cmp	r3, #17
 80092ce:	d10c      	bne.n	80092ea <HAL_I2C_Master_Seq_Transmit_IT+0x13a>
 80092d0:	6a3b      	ldr	r3, [r7, #32]
 80092d2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80092d6:	d003      	beq.n	80092e0 <HAL_I2C_Master_Seq_Transmit_IT+0x130>
 80092d8:	6a3b      	ldr	r3, [r7, #32]
 80092da:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80092de:	d101      	bne.n	80092e4 <HAL_I2C_Master_Seq_Transmit_IT+0x134>
 80092e0:	2301      	movs	r3, #1
 80092e2:	e000      	b.n	80092e6 <HAL_I2C_Master_Seq_Transmit_IT+0x136>
 80092e4:	2300      	movs	r3, #0
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d107      	bne.n	80092fa <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092f8:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	685a      	ldr	r2, [r3, #4]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8009310:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8009312:	2300      	movs	r3, #0
 8009314:	e000      	b.n	8009318 <HAL_I2C_Master_Seq_Transmit_IT+0x168>
  }
  else
  {
    return HAL_BUSY;
 8009316:	2302      	movs	r3, #2
  }
}
 8009318:	4618      	mov	r0, r3
 800931a:	371c      	adds	r7, #28
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr
 8009324:	2000007c 	.word	0x2000007c
 8009328:	14f8b589 	.word	0x14f8b589

0800932c <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800932c:	b480      	push	{r7}
 800932e:	b089      	sub	sp, #36	; 0x24
 8009330:	af00      	add	r7, sp, #0
 8009332:	60f8      	str	r0, [r7, #12]
 8009334:	607a      	str	r2, [r7, #4]
 8009336:	461a      	mov	r2, r3
 8009338:	460b      	mov	r3, r1
 800933a:	817b      	strh	r3, [r7, #10]
 800933c:	4613      	mov	r3, r2
 800933e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8009340:	2300      	movs	r3, #0
 8009342:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009344:	2300      	movs	r3, #0
 8009346:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009348:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800934c:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009354:	b2db      	uxtb	r3, r3
 8009356:	2b20      	cmp	r3, #32
 8009358:	f040 80d2 	bne.w	8009500 <HAL_I2C_Master_Seq_Receive_IT+0x1d4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800935c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935e:	2b08      	cmp	r3, #8
 8009360:	d002      	beq.n	8009368 <HAL_I2C_Master_Seq_Receive_IT+0x3c>
 8009362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009364:	2b01      	cmp	r3, #1
 8009366:	d130      	bne.n	80093ca <HAL_I2C_Master_Seq_Receive_IT+0x9e>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8009368:	4b69      	ldr	r3, [pc, #420]	; (8009510 <HAL_I2C_Master_Seq_Receive_IT+0x1e4>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	08db      	lsrs	r3, r3, #3
 800936e:	4a69      	ldr	r2, [pc, #420]	; (8009514 <HAL_I2C_Master_Seq_Receive_IT+0x1e8>)
 8009370:	fba2 2303 	umull	r2, r3, r2, r3
 8009374:	0a1a      	lsrs	r2, r3, #8
 8009376:	4613      	mov	r3, r2
 8009378:	009b      	lsls	r3, r3, #2
 800937a:	4413      	add	r3, r2
 800937c:	009a      	lsls	r2, r3, #2
 800937e:	4413      	add	r3, r2
 8009380:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	3b01      	subs	r3, #1
 8009386:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d116      	bne.n	80093bc <HAL_I2C_Master_Seq_Receive_IT+0x90>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2200      	movs	r2, #0
 8009392:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2220      	movs	r2, #32
 8009398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2200      	movs	r2, #0
 80093a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a8:	f043 0220 	orr.w	r2, r3, #32
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2200      	movs	r2, #0
 80093b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80093b8:	2301      	movs	r3, #1
 80093ba:	e0a2      	b.n	8009502 <HAL_I2C_Master_Seq_Receive_IT+0x1d6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	699b      	ldr	r3, [r3, #24]
 80093c2:	f003 0302 	and.w	r3, r3, #2
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	d0db      	beq.n	8009382 <HAL_I2C_Master_Seq_Receive_IT+0x56>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d101      	bne.n	80093d8 <HAL_I2C_Master_Seq_Receive_IT+0xac>
 80093d4:	2302      	movs	r3, #2
 80093d6:	e094      	b.n	8009502 <HAL_I2C_Master_Seq_Receive_IT+0x1d6>
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2201      	movs	r2, #1
 80093dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f003 0301 	and.w	r3, r3, #1
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d007      	beq.n	80093fe <HAL_I2C_Master_Seq_Receive_IT+0xd2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f042 0201 	orr.w	r2, r2, #1
 80093fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800940c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2222      	movs	r2, #34	; 0x22
 8009412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2210      	movs	r2, #16
 800941a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2200      	movs	r2, #0
 8009422:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	893a      	ldrh	r2, [r7, #8]
 800942e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009434:	b29a      	uxth	r2, r3
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800943e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8009440:	897a      	ldrh	r2, [r7, #10]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800944a:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009450:	b29b      	uxth	r3, r3
 8009452:	2b02      	cmp	r3, #2
 8009454:	d126      	bne.n	80094a4 <HAL_I2C_Master_Seq_Receive_IT+0x178>
 8009456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009458:	2b20      	cmp	r3, #32
 800945a:	d002      	beq.n	8009462 <HAL_I2C_Master_Seq_Receive_IT+0x136>
 800945c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800945e:	2b10      	cmp	r3, #16
 8009460:	d120      	bne.n	80094a4 <HAL_I2C_Master_Seq_Receive_IT+0x178>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8009462:	69bb      	ldr	r3, [r7, #24]
 8009464:	2b12      	cmp	r3, #18
 8009466:	d114      	bne.n	8009492 <HAL_I2C_Master_Seq_Receive_IT+0x166>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009476:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009486:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800948e:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8009490:	e010      	b.n	80094b4 <HAL_I2C_Master_Seq_Receive_IT+0x188>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80094a0:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 80094a2:	e007      	b.n	80094b4 <HAL_I2C_Master_Seq_Receive_IT+0x188>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80094b2:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	2b12      	cmp	r3, #18
 80094b8:	d10c      	bne.n	80094d4 <HAL_I2C_Master_Seq_Receive_IT+0x1a8>
 80094ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094bc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80094c0:	d003      	beq.n	80094ca <HAL_I2C_Master_Seq_Receive_IT+0x19e>
 80094c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80094c8:	d101      	bne.n	80094ce <HAL_I2C_Master_Seq_Receive_IT+0x1a2>
 80094ca:	2301      	movs	r3, #1
 80094cc:	e000      	b.n	80094d0 <HAL_I2C_Master_Seq_Receive_IT+0x1a4>
 80094ce:	2300      	movs	r3, #0
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d107      	bne.n	80094e4 <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094e2:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	6859      	ldr	r1, [r3, #4]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	69fa      	ldr	r2, [r7, #28]
 80094f8:	430a      	orrs	r2, r1
 80094fa:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80094fc:	2300      	movs	r3, #0
 80094fe:	e000      	b.n	8009502 <HAL_I2C_Master_Seq_Receive_IT+0x1d6>
  }
  else
  {
    return HAL_BUSY;
 8009500:	2302      	movs	r3, #2
  }
}
 8009502:	4618      	mov	r0, r3
 8009504:	3724      	adds	r7, #36	; 0x24
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	2000007c 	.word	0x2000007c
 8009514:	14f8b589 	.word	0x14f8b589

08009518 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b088      	sub	sp, #32
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8009520:	2300      	movs	r3, #0
 8009522:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009530:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009538:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009540:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8009542:	7bfb      	ldrb	r3, [r7, #15]
 8009544:	2b10      	cmp	r3, #16
 8009546:	d003      	beq.n	8009550 <HAL_I2C_EV_IRQHandler+0x38>
 8009548:	7bfb      	ldrb	r3, [r7, #15]
 800954a:	2b40      	cmp	r3, #64	; 0x40
 800954c:	f040 80b6 	bne.w	80096bc <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	699b      	ldr	r3, [r3, #24]
 8009556:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	695b      	ldr	r3, [r3, #20]
 800955e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	f003 0301 	and.w	r3, r3, #1
 8009566:	2b00      	cmp	r3, #0
 8009568:	d10d      	bne.n	8009586 <HAL_I2C_EV_IRQHandler+0x6e>
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8009570:	d003      	beq.n	800957a <HAL_I2C_EV_IRQHandler+0x62>
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009578:	d101      	bne.n	800957e <HAL_I2C_EV_IRQHandler+0x66>
 800957a:	2301      	movs	r3, #1
 800957c:	e000      	b.n	8009580 <HAL_I2C_EV_IRQHandler+0x68>
 800957e:	2300      	movs	r3, #0
 8009580:	2b01      	cmp	r3, #1
 8009582:	f000 8127 	beq.w	80097d4 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	f003 0301 	and.w	r3, r3, #1
 800958c:	2b00      	cmp	r3, #0
 800958e:	d00c      	beq.n	80095aa <HAL_I2C_EV_IRQHandler+0x92>
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	0a5b      	lsrs	r3, r3, #9
 8009594:	f003 0301 	and.w	r3, r3, #1
 8009598:	2b00      	cmp	r3, #0
 800959a:	d006      	beq.n	80095aa <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f001 fed1 	bl	800b344 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 fcf8 	bl	8009f98 <I2C_Master_SB>
 80095a8:	e087      	b.n	80096ba <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	08db      	lsrs	r3, r3, #3
 80095ae:	f003 0301 	and.w	r3, r3, #1
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d009      	beq.n	80095ca <HAL_I2C_EV_IRQHandler+0xb2>
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	0a5b      	lsrs	r3, r3, #9
 80095ba:	f003 0301 	and.w	r3, r3, #1
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d003      	beq.n	80095ca <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 fd6e 	bl	800a0a4 <I2C_Master_ADD10>
 80095c8:	e077      	b.n	80096ba <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	085b      	lsrs	r3, r3, #1
 80095ce:	f003 0301 	and.w	r3, r3, #1
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d009      	beq.n	80095ea <HAL_I2C_EV_IRQHandler+0xd2>
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	0a5b      	lsrs	r3, r3, #9
 80095da:	f003 0301 	and.w	r3, r3, #1
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d003      	beq.n	80095ea <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 fd88 	bl	800a0f8 <I2C_Master_ADDR>
 80095e8:	e067      	b.n	80096ba <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	089b      	lsrs	r3, r3, #2
 80095ee:	f003 0301 	and.w	r3, r3, #1
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d030      	beq.n	8009658 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009600:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009604:	f000 80e8 	beq.w	80097d8 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009608:	69fb      	ldr	r3, [r7, #28]
 800960a:	09db      	lsrs	r3, r3, #7
 800960c:	f003 0301 	and.w	r3, r3, #1
 8009610:	2b00      	cmp	r3, #0
 8009612:	d00f      	beq.n	8009634 <HAL_I2C_EV_IRQHandler+0x11c>
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	0a9b      	lsrs	r3, r3, #10
 8009618:	f003 0301 	and.w	r3, r3, #1
 800961c:	2b00      	cmp	r3, #0
 800961e:	d009      	beq.n	8009634 <HAL_I2C_EV_IRQHandler+0x11c>
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	089b      	lsrs	r3, r3, #2
 8009624:	f003 0301 	and.w	r3, r3, #1
 8009628:	2b00      	cmp	r3, #0
 800962a:	d103      	bne.n	8009634 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 f9c4 	bl	80099ba <I2C_MasterTransmit_TXE>
 8009632:	e042      	b.n	80096ba <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009634:	69fb      	ldr	r3, [r7, #28]
 8009636:	089b      	lsrs	r3, r3, #2
 8009638:	f003 0301 	and.w	r3, r3, #1
 800963c:	2b00      	cmp	r3, #0
 800963e:	f000 80cb 	beq.w	80097d8 <HAL_I2C_EV_IRQHandler+0x2c0>
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	0a5b      	lsrs	r3, r3, #9
 8009646:	f003 0301 	and.w	r3, r3, #1
 800964a:	2b00      	cmp	r3, #0
 800964c:	f000 80c4 	beq.w	80097d8 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 fa4e 	bl	8009af2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009656:	e0bf      	b.n	80097d8 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009666:	f000 80b7 	beq.w	80097d8 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	099b      	lsrs	r3, r3, #6
 800966e:	f003 0301 	and.w	r3, r3, #1
 8009672:	2b00      	cmp	r3, #0
 8009674:	d00f      	beq.n	8009696 <HAL_I2C_EV_IRQHandler+0x17e>
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	0a9b      	lsrs	r3, r3, #10
 800967a:	f003 0301 	and.w	r3, r3, #1
 800967e:	2b00      	cmp	r3, #0
 8009680:	d009      	beq.n	8009696 <HAL_I2C_EV_IRQHandler+0x17e>
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	089b      	lsrs	r3, r3, #2
 8009686:	f003 0301 	and.w	r3, r3, #1
 800968a:	2b00      	cmp	r3, #0
 800968c:	d103      	bne.n	8009696 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 fb16 	bl	8009cc0 <I2C_MasterReceive_RXNE>
 8009694:	e011      	b.n	80096ba <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	089b      	lsrs	r3, r3, #2
 800969a:	f003 0301 	and.w	r3, r3, #1
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f000 809a 	beq.w	80097d8 <HAL_I2C_EV_IRQHandler+0x2c0>
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	0a5b      	lsrs	r3, r3, #9
 80096a8:	f003 0301 	and.w	r3, r3, #1
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f000 8093 	beq.w	80097d8 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 fb86 	bl	8009dc4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80096b8:	e08e      	b.n	80097d8 <HAL_I2C_EV_IRQHandler+0x2c0>
 80096ba:	e08d      	b.n	80097d8 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d004      	beq.n	80096ce <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	695b      	ldr	r3, [r3, #20]
 80096ca:	61fb      	str	r3, [r7, #28]
 80096cc:	e007      	b.n	80096de <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	699b      	ldr	r3, [r3, #24]
 80096d4:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	695b      	ldr	r3, [r3, #20]
 80096dc:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	085b      	lsrs	r3, r3, #1
 80096e2:	f003 0301 	and.w	r3, r3, #1
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d012      	beq.n	8009710 <HAL_I2C_EV_IRQHandler+0x1f8>
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	0a5b      	lsrs	r3, r3, #9
 80096ee:	f003 0301 	and.w	r3, r3, #1
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d00c      	beq.n	8009710 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d003      	beq.n	8009706 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	699b      	ldr	r3, [r3, #24]
 8009704:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8009706:	69b9      	ldr	r1, [r7, #24]
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 ff44 	bl	800a596 <I2C_Slave_ADDR>
 800970e:	e066      	b.n	80097de <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	091b      	lsrs	r3, r3, #4
 8009714:	f003 0301 	and.w	r3, r3, #1
 8009718:	2b00      	cmp	r3, #0
 800971a:	d009      	beq.n	8009730 <HAL_I2C_EV_IRQHandler+0x218>
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	0a5b      	lsrs	r3, r3, #9
 8009720:	f003 0301 	and.w	r3, r3, #1
 8009724:	2b00      	cmp	r3, #0
 8009726:	d003      	beq.n	8009730 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 ff79 	bl	800a620 <I2C_Slave_STOPF>
 800972e:	e056      	b.n	80097de <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009730:	7bbb      	ldrb	r3, [r7, #14]
 8009732:	2b21      	cmp	r3, #33	; 0x21
 8009734:	d002      	beq.n	800973c <HAL_I2C_EV_IRQHandler+0x224>
 8009736:	7bbb      	ldrb	r3, [r7, #14]
 8009738:	2b29      	cmp	r3, #41	; 0x29
 800973a:	d125      	bne.n	8009788 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	09db      	lsrs	r3, r3, #7
 8009740:	f003 0301 	and.w	r3, r3, #1
 8009744:	2b00      	cmp	r3, #0
 8009746:	d00f      	beq.n	8009768 <HAL_I2C_EV_IRQHandler+0x250>
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	0a9b      	lsrs	r3, r3, #10
 800974c:	f003 0301 	and.w	r3, r3, #1
 8009750:	2b00      	cmp	r3, #0
 8009752:	d009      	beq.n	8009768 <HAL_I2C_EV_IRQHandler+0x250>
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	089b      	lsrs	r3, r3, #2
 8009758:	f003 0301 	and.w	r3, r3, #1
 800975c:	2b00      	cmp	r3, #0
 800975e:	d103      	bne.n	8009768 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 fe5a 	bl	800a41a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009766:	e039      	b.n	80097dc <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	089b      	lsrs	r3, r3, #2
 800976c:	f003 0301 	and.w	r3, r3, #1
 8009770:	2b00      	cmp	r3, #0
 8009772:	d033      	beq.n	80097dc <HAL_I2C_EV_IRQHandler+0x2c4>
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	0a5b      	lsrs	r3, r3, #9
 8009778:	f003 0301 	and.w	r3, r3, #1
 800977c:	2b00      	cmp	r3, #0
 800977e:	d02d      	beq.n	80097dc <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 fe87 	bl	800a494 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009786:	e029      	b.n	80097dc <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009788:	69fb      	ldr	r3, [r7, #28]
 800978a:	099b      	lsrs	r3, r3, #6
 800978c:	f003 0301 	and.w	r3, r3, #1
 8009790:	2b00      	cmp	r3, #0
 8009792:	d00f      	beq.n	80097b4 <HAL_I2C_EV_IRQHandler+0x29c>
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	0a9b      	lsrs	r3, r3, #10
 8009798:	f003 0301 	and.w	r3, r3, #1
 800979c:	2b00      	cmp	r3, #0
 800979e:	d009      	beq.n	80097b4 <HAL_I2C_EV_IRQHandler+0x29c>
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	089b      	lsrs	r3, r3, #2
 80097a4:	f003 0301 	and.w	r3, r3, #1
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d103      	bne.n	80097b4 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 fe92 	bl	800a4d6 <I2C_SlaveReceive_RXNE>
 80097b2:	e014      	b.n	80097de <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	089b      	lsrs	r3, r3, #2
 80097b8:	f003 0301 	and.w	r3, r3, #1
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00e      	beq.n	80097de <HAL_I2C_EV_IRQHandler+0x2c6>
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	0a5b      	lsrs	r3, r3, #9
 80097c4:	f003 0301 	and.w	r3, r3, #1
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d008      	beq.n	80097de <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 fec0 	bl	800a552 <I2C_SlaveReceive_BTF>
 80097d2:	e004      	b.n	80097de <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 80097d4:	bf00      	nop
 80097d6:	e002      	b.n	80097de <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80097d8:	bf00      	nop
 80097da:	e000      	b.n	80097de <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80097dc:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80097de:	3720      	adds	r7, #32
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b08a      	sub	sp, #40	; 0x28
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	695b      	ldr	r3, [r3, #20]
 80097f2:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80097fc:	2300      	movs	r3, #0
 80097fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009806:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009808:	6a3b      	ldr	r3, [r7, #32]
 800980a:	0a1b      	lsrs	r3, r3, #8
 800980c:	f003 0301 	and.w	r3, r3, #1
 8009810:	2b00      	cmp	r3, #0
 8009812:	d00e      	beq.n	8009832 <HAL_I2C_ER_IRQHandler+0x4e>
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	0a1b      	lsrs	r3, r3, #8
 8009818:	f003 0301 	and.w	r3, r3, #1
 800981c:	2b00      	cmp	r3, #0
 800981e:	d008      	beq.n	8009832 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8009820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009822:	f043 0301 	orr.w	r3, r3, #1
 8009826:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009830:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8009832:	6a3b      	ldr	r3, [r7, #32]
 8009834:	0a5b      	lsrs	r3, r3, #9
 8009836:	f003 0301 	and.w	r3, r3, #1
 800983a:	2b00      	cmp	r3, #0
 800983c:	d00e      	beq.n	800985c <HAL_I2C_ER_IRQHandler+0x78>
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	0a1b      	lsrs	r3, r3, #8
 8009842:	f003 0301 	and.w	r3, r3, #1
 8009846:	2b00      	cmp	r3, #0
 8009848:	d008      	beq.n	800985c <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800984a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984c:	f043 0302 	orr.w	r3, r3, #2
 8009850:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800985a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800985c:	6a3b      	ldr	r3, [r7, #32]
 800985e:	0a9b      	lsrs	r3, r3, #10
 8009860:	f003 0301 	and.w	r3, r3, #1
 8009864:	2b00      	cmp	r3, #0
 8009866:	d03f      	beq.n	80098e8 <HAL_I2C_ER_IRQHandler+0x104>
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	0a1b      	lsrs	r3, r3, #8
 800986c:	f003 0301 	and.w	r3, r3, #1
 8009870:	2b00      	cmp	r3, #0
 8009872:	d039      	beq.n	80098e8 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8009874:	7efb      	ldrb	r3, [r7, #27]
 8009876:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800987c:	b29b      	uxth	r3, r3
 800987e:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009886:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988c:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800988e:	7ebb      	ldrb	r3, [r7, #26]
 8009890:	2b20      	cmp	r3, #32
 8009892:	d112      	bne.n	80098ba <HAL_I2C_ER_IRQHandler+0xd6>
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d10f      	bne.n	80098ba <HAL_I2C_ER_IRQHandler+0xd6>
 800989a:	7cfb      	ldrb	r3, [r7, #19]
 800989c:	2b21      	cmp	r3, #33	; 0x21
 800989e:	d008      	beq.n	80098b2 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80098a0:	7cfb      	ldrb	r3, [r7, #19]
 80098a2:	2b29      	cmp	r3, #41	; 0x29
 80098a4:	d005      	beq.n	80098b2 <HAL_I2C_ER_IRQHandler+0xce>
 80098a6:	7cfb      	ldrb	r3, [r7, #19]
 80098a8:	2b28      	cmp	r3, #40	; 0x28
 80098aa:	d106      	bne.n	80098ba <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2b21      	cmp	r3, #33	; 0x21
 80098b0:	d103      	bne.n	80098ba <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 ffe4 	bl	800a880 <I2C_Slave_AF>
 80098b8:	e016      	b.n	80098e8 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80098c2:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80098c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c6:	f043 0304 	orr.w	r3, r3, #4
 80098ca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80098cc:	7efb      	ldrb	r3, [r7, #27]
 80098ce:	2b10      	cmp	r3, #16
 80098d0:	d002      	beq.n	80098d8 <HAL_I2C_ER_IRQHandler+0xf4>
 80098d2:	7efb      	ldrb	r3, [r7, #27]
 80098d4:	2b40      	cmp	r3, #64	; 0x40
 80098d6:	d107      	bne.n	80098e8 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098e6:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80098e8:	6a3b      	ldr	r3, [r7, #32]
 80098ea:	0adb      	lsrs	r3, r3, #11
 80098ec:	f003 0301 	and.w	r3, r3, #1
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00e      	beq.n	8009912 <HAL_I2C_ER_IRQHandler+0x12e>
 80098f4:	69fb      	ldr	r3, [r7, #28]
 80098f6:	0a1b      	lsrs	r3, r3, #8
 80098f8:	f003 0301 	and.w	r3, r3, #1
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d008      	beq.n	8009912 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8009900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009902:	f043 0308 	orr.w	r3, r3, #8
 8009906:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8009910:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8009912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009914:	2b00      	cmp	r3, #0
 8009916:	d008      	beq.n	800992a <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800991c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991e:	431a      	orrs	r2, r3
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f001 f81b 	bl	800a960 <I2C_ITError>
  }
}
 800992a:	bf00      	nop
 800992c:	3728      	adds	r7, #40	; 0x28
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009932:	b480      	push	{r7}
 8009934:	b083      	sub	sp, #12
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800993a:	bf00      	nop
 800993c:	370c      	adds	r7, #12
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr

08009946 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009946:	b480      	push	{r7}
 8009948:	b083      	sub	sp, #12
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800994e:	bf00      	nop
 8009950:	370c      	adds	r7, #12
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr

0800995a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800995a:	b480      	push	{r7}
 800995c:	b083      	sub	sp, #12
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
 8009962:	460b      	mov	r3, r1
 8009964:	70fb      	strb	r3, [r7, #3]
 8009966:	4613      	mov	r3, r2
 8009968:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800996a:	bf00      	nop
 800996c:	370c      	adds	r7, #12
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr

08009976 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009976:	b480      	push	{r7}
 8009978:	b083      	sub	sp, #12
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800997e:	bf00      	nop
 8009980:	370c      	adds	r7, #12
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr

0800998a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800998a:	b480      	push	{r7}
 800998c:	b083      	sub	sp, #12
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8009992:	bf00      	nop
 8009994:	370c      	adds	r7, #12
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr

0800999e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800999e:	b480      	push	{r7}
 80099a0:	b083      	sub	sp, #12
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099ac:	b2db      	uxtb	r3, r3
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	370c      	adds	r7, #12
 80099b2:	46bd      	mov	sp, r7
 80099b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b8:	4770      	bx	lr

080099ba <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b084      	sub	sp, #16
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099c8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80099d0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d150      	bne.n	8009a82 <I2C_MasterTransmit_TXE+0xc8>
 80099e0:	7bfb      	ldrb	r3, [r7, #15]
 80099e2:	2b21      	cmp	r3, #33	; 0x21
 80099e4:	d14d      	bne.n	8009a82 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	2b08      	cmp	r3, #8
 80099ea:	d01d      	beq.n	8009a28 <I2C_MasterTransmit_TXE+0x6e>
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	2b20      	cmp	r3, #32
 80099f0:	d01a      	beq.n	8009a28 <I2C_MasterTransmit_TXE+0x6e>
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80099f8:	d016      	beq.n	8009a28 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	685a      	ldr	r2, [r3, #4]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009a08:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2211      	movs	r2, #17
 8009a0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2220      	movs	r2, #32
 8009a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f7fb ffdb 	bl	80059dc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009a26:	e060      	b.n	8009aea <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	685a      	ldr	r2, [r3, #4]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009a36:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a46:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2220      	movs	r2, #32
 8009a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	2b40      	cmp	r3, #64	; 0x40
 8009a60:	d107      	bne.n	8009a72 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f7ff ff8d 	bl	800998a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009a70:	e03b      	b.n	8009aea <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f7fb ffae 	bl	80059dc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009a80:	e033      	b.n	8009aea <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8009a82:	7bfb      	ldrb	r3, [r7, #15]
 8009a84:	2b21      	cmp	r3, #33	; 0x21
 8009a86:	d005      	beq.n	8009a94 <I2C_MasterTransmit_TXE+0xda>
 8009a88:	7bbb      	ldrb	r3, [r7, #14]
 8009a8a:	2b40      	cmp	r3, #64	; 0x40
 8009a8c:	d12d      	bne.n	8009aea <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8009a8e:	7bfb      	ldrb	r3, [r7, #15]
 8009a90:	2b22      	cmp	r3, #34	; 0x22
 8009a92:	d12a      	bne.n	8009aea <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d108      	bne.n	8009ab0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	685a      	ldr	r2, [r3, #4]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009aac:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8009aae:	e01c      	b.n	8009aea <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	2b40      	cmp	r3, #64	; 0x40
 8009aba:	d103      	bne.n	8009ac4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 f898 	bl	8009bf2 <I2C_MemoryTransmit_TXE_BTF>
}
 8009ac2:	e012      	b.n	8009aea <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac8:	781a      	ldrb	r2, [r3, #0]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad4:	1c5a      	adds	r2, r3, #1
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	b29a      	uxth	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009ae8:	e7ff      	b.n	8009aea <I2C_MasterTransmit_TXE+0x130>
 8009aea:	bf00      	nop
 8009aec:	3710      	adds	r7, #16
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}

08009af2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8009af2:	b580      	push	{r7, lr}
 8009af4:	b084      	sub	sp, #16
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009afe:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	2b21      	cmp	r3, #33	; 0x21
 8009b0a:	d165      	bne.n	8009bd8 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d012      	beq.n	8009b3c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1a:	781a      	ldrb	r2, [r3, #0]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b26:	1c5a      	adds	r2, r3, #1
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	3b01      	subs	r3, #1
 8009b34:	b29a      	uxth	r2, r3
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8009b3a:	e056      	b.n	8009bea <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2b08      	cmp	r3, #8
 8009b40:	d01d      	beq.n	8009b7e <I2C_MasterTransmit_BTF+0x8c>
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2b20      	cmp	r3, #32
 8009b46:	d01a      	beq.n	8009b7e <I2C_MasterTransmit_BTF+0x8c>
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009b4e:	d016      	beq.n	8009b7e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	685a      	ldr	r2, [r3, #4]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009b5e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2211      	movs	r2, #17
 8009b64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2220      	movs	r2, #32
 8009b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f7fb ff30 	bl	80059dc <HAL_I2C_MasterTxCpltCallback>
}
 8009b7c:	e035      	b.n	8009bea <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	685a      	ldr	r2, [r3, #4]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009b8c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b9c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2220      	movs	r2, #32
 8009ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	2b40      	cmp	r3, #64	; 0x40
 8009bb6:	d107      	bne.n	8009bc8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f7ff fee2 	bl	800998a <HAL_I2C_MemTxCpltCallback>
}
 8009bc6:	e010      	b.n	8009bea <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f7fb ff03 	bl	80059dc <HAL_I2C_MasterTxCpltCallback>
}
 8009bd6:	e008      	b.n	8009bea <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	2b40      	cmp	r3, #64	; 0x40
 8009be2:	d102      	bne.n	8009bea <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 f804 	bl	8009bf2 <I2C_MemoryTransmit_TXE_BTF>
}
 8009bea:	bf00      	nop
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8009bf2:	b480      	push	{r7}
 8009bf4:	b083      	sub	sp, #12
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d11d      	bne.n	8009c3e <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d10b      	bne.n	8009c22 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c0e:	b2da      	uxtb	r2, r3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c1a:	1c9a      	adds	r2, r3, #2
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8009c20:	e048      	b.n	8009cb4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	121b      	asrs	r3, r3, #8
 8009c2a:	b2da      	uxtb	r2, r3
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c36:	1c5a      	adds	r2, r3, #1
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009c3c:	e03a      	b.n	8009cb4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d10b      	bne.n	8009c5e <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c4a:	b2da      	uxtb	r2, r3
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c56:	1c5a      	adds	r2, r3, #1
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009c5c:	e02a      	b.n	8009cb4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c62:	2b02      	cmp	r3, #2
 8009c64:	d126      	bne.n	8009cb4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	2b22      	cmp	r3, #34	; 0x22
 8009c70:	d108      	bne.n	8009c84 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c80:	601a      	str	r2, [r3, #0]
}
 8009c82:	e017      	b.n	8009cb4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c8a:	b2db      	uxtb	r3, r3
 8009c8c:	2b21      	cmp	r3, #33	; 0x21
 8009c8e:	d111      	bne.n	8009cb4 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c94:	781a      	ldrb	r2, [r3, #0]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca0:	1c5a      	adds	r2, r3, #1
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	3b01      	subs	r3, #1
 8009cae:	b29a      	uxth	r2, r3
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009cb4:	bf00      	nop
 8009cb6:	370c      	adds	r7, #12
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr

08009cc0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	2b22      	cmp	r3, #34	; 0x22
 8009cd2:	d173      	bne.n	8009dbc <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2b03      	cmp	r3, #3
 8009ce0:	d920      	bls.n	8009d24 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	691a      	ldr	r2, [r3, #16]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cec:	b2d2      	uxtb	r2, r2
 8009cee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf4:	1c5a      	adds	r2, r3, #1
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	3b01      	subs	r3, #1
 8009d02:	b29a      	uxth	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	2b03      	cmp	r3, #3
 8009d10:	d154      	bne.n	8009dbc <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	685a      	ldr	r2, [r3, #4]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d20:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8009d22:	e04b      	b.n	8009dbc <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	d047      	beq.n	8009dbc <I2C_MasterReceive_RXNE+0xfc>
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d002      	beq.n	8009d38 <I2C_MasterReceive_RXNE+0x78>
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d141      	bne.n	8009dbc <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d46:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	685a      	ldr	r2, [r3, #4]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009d56:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	691a      	ldr	r2, [r3, #16]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d62:	b2d2      	uxtb	r2, r2
 8009d64:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6a:	1c5a      	adds	r2, r3, #1
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	3b01      	subs	r3, #1
 8009d78:	b29a      	uxth	r2, r3
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2220      	movs	r2, #32
 8009d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	2b40      	cmp	r3, #64	; 0x40
 8009d90:	d10a      	bne.n	8009da8 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f7fb fe11 	bl	80059c8 <HAL_I2C_MemRxCpltCallback>
}
 8009da6:	e009      	b.n	8009dbc <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2212      	movs	r2, #18
 8009db4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f7fb fe26 	bl	8005a08 <HAL_I2C_MasterRxCpltCallback>
}
 8009dbc:	bf00      	nop
 8009dbe:	3710      	adds	r7, #16
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b084      	sub	sp, #16
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	2b04      	cmp	r3, #4
 8009dda:	d11b      	bne.n	8009e14 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	685a      	ldr	r2, [r3, #4]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dea:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	691a      	ldr	r2, [r3, #16]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df6:	b2d2      	uxtb	r2, r2
 8009df8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfe:	1c5a      	adds	r2, r3, #1
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	b29a      	uxth	r2, r3
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8009e12:	e0bd      	b.n	8009f90 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	2b03      	cmp	r3, #3
 8009e1c:	d129      	bne.n	8009e72 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	685a      	ldr	r2, [r3, #4]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e2c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2b04      	cmp	r3, #4
 8009e32:	d00a      	beq.n	8009e4a <I2C_MasterReceive_BTF+0x86>
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2b02      	cmp	r3, #2
 8009e38:	d007      	beq.n	8009e4a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e48:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	691a      	ldr	r2, [r3, #16]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e54:	b2d2      	uxtb	r2, r2
 8009e56:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5c:	1c5a      	adds	r2, r3, #1
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	3b01      	subs	r3, #1
 8009e6a:	b29a      	uxth	r2, r3
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009e70:	e08e      	b.n	8009f90 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	2b02      	cmp	r3, #2
 8009e7a:	d176      	bne.n	8009f6a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d002      	beq.n	8009e88 <I2C_MasterReceive_BTF+0xc4>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2b10      	cmp	r3, #16
 8009e86:	d108      	bne.n	8009e9a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e96:	601a      	str	r2, [r3, #0]
 8009e98:	e019      	b.n	8009ece <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2b04      	cmp	r3, #4
 8009e9e:	d002      	beq.n	8009ea6 <I2C_MasterReceive_BTF+0xe2>
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2b02      	cmp	r3, #2
 8009ea4:	d108      	bne.n	8009eb8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009eb4:	601a      	str	r2, [r3, #0]
 8009eb6:	e00a      	b.n	8009ece <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2b10      	cmp	r3, #16
 8009ebc:	d007      	beq.n	8009ece <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ecc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	691a      	ldr	r2, [r3, #16]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed8:	b2d2      	uxtb	r2, r2
 8009eda:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee0:	1c5a      	adds	r2, r3, #1
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	3b01      	subs	r3, #1
 8009eee:	b29a      	uxth	r2, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	691a      	ldr	r2, [r3, #16]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009efe:	b2d2      	uxtb	r2, r2
 8009f00:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f06:	1c5a      	adds	r2, r3, #1
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	3b01      	subs	r3, #1
 8009f14:	b29a      	uxth	r2, r3
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	685a      	ldr	r2, [r3, #4]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009f28:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2220      	movs	r2, #32
 8009f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	2b40      	cmp	r3, #64	; 0x40
 8009f3c:	d10a      	bne.n	8009f54 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f7fb fd3b 	bl	80059c8 <HAL_I2C_MemRxCpltCallback>
}
 8009f52:	e01d      	b.n	8009f90 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2212      	movs	r2, #18
 8009f60:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f7fb fd50 	bl	8005a08 <HAL_I2C_MasterRxCpltCallback>
}
 8009f68:	e012      	b.n	8009f90 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	691a      	ldr	r2, [r3, #16]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f74:	b2d2      	uxtb	r2, r2
 8009f76:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f7c:	1c5a      	adds	r2, r3, #1
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	3b01      	subs	r3, #1
 8009f8a:	b29a      	uxth	r2, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8009f90:	bf00      	nop
 8009f92:	3710      	adds	r7, #16
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	2b40      	cmp	r3, #64	; 0x40
 8009faa:	d117      	bne.n	8009fdc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d109      	bne.n	8009fc8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	461a      	mov	r2, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009fc4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8009fc6:	e067      	b.n	800a098 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	f043 0301 	orr.w	r3, r3, #1
 8009fd2:	b2da      	uxtb	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	611a      	str	r2, [r3, #16]
}
 8009fda:	e05d      	b.n	800a098 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	691b      	ldr	r3, [r3, #16]
 8009fe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fe4:	d133      	bne.n	800a04e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	2b21      	cmp	r3, #33	; 0x21
 8009ff0:	d109      	bne.n	800a006 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a002:	611a      	str	r2, [r3, #16]
 800a004:	e008      	b.n	800a018 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	f043 0301 	orr.w	r3, r3, #1
 800a010:	b2da      	uxtb	r2, r3
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d004      	beq.n	800a02a <I2C_Master_SB+0x92>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a026:	2b00      	cmp	r3, #0
 800a028:	d108      	bne.n	800a03c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d032      	beq.n	800a098 <I2C_Master_SB+0x100>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d02d      	beq.n	800a098 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	685a      	ldr	r2, [r3, #4]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a04a:	605a      	str	r2, [r3, #4]
}
 800a04c:	e024      	b.n	800a098 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a052:	2b00      	cmp	r3, #0
 800a054:	d10e      	bne.n	800a074 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	11db      	asrs	r3, r3, #7
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	f003 0306 	and.w	r3, r3, #6
 800a064:	b2db      	uxtb	r3, r3
 800a066:	f063 030f 	orn	r3, r3, #15
 800a06a:	b2da      	uxtb	r2, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	611a      	str	r2, [r3, #16]
}
 800a072:	e011      	b.n	800a098 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d10d      	bne.n	800a098 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a080:	b29b      	uxth	r3, r3
 800a082:	11db      	asrs	r3, r3, #7
 800a084:	b2db      	uxtb	r3, r3
 800a086:	f003 0306 	and.w	r3, r3, #6
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	f063 030e 	orn	r3, r3, #14
 800a090:	b2da      	uxtb	r2, r3
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	611a      	str	r2, [r3, #16]
}
 800a098:	bf00      	nop
 800a09a:	370c      	adds	r7, #12
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr

0800a0a4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b083      	sub	sp, #12
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0b0:	b2da      	uxtb	r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d103      	bne.n	800a0c8 <I2C_Master_ADD10+0x24>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d011      	beq.n	800a0ec <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d104      	bne.n	800a0dc <I2C_Master_ADD10+0x38>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d007      	beq.n	800a0ec <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	685a      	ldr	r2, [r3, #4]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0ea:	605a      	str	r2, [r3, #4]
    }
  }
}
 800a0ec:	bf00      	nop
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b091      	sub	sp, #68	; 0x44
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a106:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a10e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a114:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	2b22      	cmp	r3, #34	; 0x22
 800a120:	f040 8169 	bne.w	800a3f6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d10f      	bne.n	800a14c <I2C_Master_ADDR+0x54>
 800a12c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a130:	2b40      	cmp	r3, #64	; 0x40
 800a132:	d10b      	bne.n	800a14c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a134:	2300      	movs	r3, #0
 800a136:	633b      	str	r3, [r7, #48]	; 0x30
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	695b      	ldr	r3, [r3, #20]
 800a13e:	633b      	str	r3, [r7, #48]	; 0x30
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	699b      	ldr	r3, [r3, #24]
 800a146:	633b      	str	r3, [r7, #48]	; 0x30
 800a148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14a:	e160      	b.n	800a40e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a150:	2b00      	cmp	r3, #0
 800a152:	d11d      	bne.n	800a190 <I2C_Master_ADDR+0x98>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a15c:	d118      	bne.n	800a190 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a15e:	2300      	movs	r3, #0
 800a160:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	695b      	ldr	r3, [r3, #20]
 800a168:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	699b      	ldr	r3, [r3, #24]
 800a170:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a172:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	681a      	ldr	r2, [r3, #0]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a182:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a188:	1c5a      	adds	r2, r3, #1
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	651a      	str	r2, [r3, #80]	; 0x50
 800a18e:	e13e      	b.n	800a40e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a194:	b29b      	uxth	r3, r3
 800a196:	2b00      	cmp	r3, #0
 800a198:	d113      	bne.n	800a1c2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a19a:	2300      	movs	r3, #0
 800a19c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	695b      	ldr	r3, [r3, #20]
 800a1a4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	699b      	ldr	r3, [r3, #24]
 800a1ac:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1be:	601a      	str	r2, [r3, #0]
 800a1c0:	e115      	b.n	800a3ee <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	f040 808a 	bne.w	800a2e2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800a1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a1d4:	d137      	bne.n	800a246 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a1e4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1f4:	d113      	bne.n	800a21e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a204:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a206:	2300      	movs	r3, #0
 800a208:	627b      	str	r3, [r7, #36]	; 0x24
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	695b      	ldr	r3, [r3, #20]
 800a210:	627b      	str	r3, [r7, #36]	; 0x24
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	699b      	ldr	r3, [r3, #24]
 800a218:	627b      	str	r3, [r7, #36]	; 0x24
 800a21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21c:	e0e7      	b.n	800a3ee <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a21e:	2300      	movs	r3, #0
 800a220:	623b      	str	r3, [r7, #32]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	695b      	ldr	r3, [r3, #20]
 800a228:	623b      	str	r3, [r7, #32]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	699b      	ldr	r3, [r3, #24]
 800a230:	623b      	str	r3, [r7, #32]
 800a232:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a242:	601a      	str	r2, [r3, #0]
 800a244:	e0d3      	b.n	800a3ee <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800a246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a248:	2b08      	cmp	r3, #8
 800a24a:	d02e      	beq.n	800a2aa <I2C_Master_ADDR+0x1b2>
 800a24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a24e:	2b20      	cmp	r3, #32
 800a250:	d02b      	beq.n	800a2aa <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800a252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a254:	2b12      	cmp	r3, #18
 800a256:	d102      	bne.n	800a25e <I2C_Master_ADDR+0x166>
 800a258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d125      	bne.n	800a2aa <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800a25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a260:	2b04      	cmp	r3, #4
 800a262:	d00e      	beq.n	800a282 <I2C_Master_ADDR+0x18a>
 800a264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a266:	2b02      	cmp	r3, #2
 800a268:	d00b      	beq.n	800a282 <I2C_Master_ADDR+0x18a>
 800a26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26c:	2b10      	cmp	r3, #16
 800a26e:	d008      	beq.n	800a282 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a27e:	601a      	str	r2, [r3, #0]
 800a280:	e007      	b.n	800a292 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a290:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a292:	2300      	movs	r3, #0
 800a294:	61fb      	str	r3, [r7, #28]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	695b      	ldr	r3, [r3, #20]
 800a29c:	61fb      	str	r3, [r7, #28]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	699b      	ldr	r3, [r3, #24]
 800a2a4:	61fb      	str	r3, [r7, #28]
 800a2a6:	69fb      	ldr	r3, [r7, #28]
 800a2a8:	e0a1      	b.n	800a3ee <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	681a      	ldr	r2, [r3, #0]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2b8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	61bb      	str	r3, [r7, #24]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	695b      	ldr	r3, [r3, #20]
 800a2c4:	61bb      	str	r3, [r7, #24]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	699b      	ldr	r3, [r3, #24]
 800a2cc:	61bb      	str	r3, [r7, #24]
 800a2ce:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2de:	601a      	str	r2, [r3, #0]
 800a2e0:	e085      	b.n	800a3ee <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	2b02      	cmp	r3, #2
 800a2ea:	d14d      	bne.n	800a388 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800a2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ee:	2b04      	cmp	r3, #4
 800a2f0:	d016      	beq.n	800a320 <I2C_Master_ADDR+0x228>
 800a2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d013      	beq.n	800a320 <I2C_Master_ADDR+0x228>
 800a2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fa:	2b10      	cmp	r3, #16
 800a2fc:	d010      	beq.n	800a320 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a30c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a31c:	601a      	str	r2, [r3, #0]
 800a31e:	e007      	b.n	800a330 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a32e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a33a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a33e:	d117      	bne.n	800a370 <I2C_Master_ADDR+0x278>
 800a340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a342:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a346:	d00b      	beq.n	800a360 <I2C_Master_ADDR+0x268>
 800a348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d008      	beq.n	800a360 <I2C_Master_ADDR+0x268>
 800a34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a350:	2b08      	cmp	r3, #8
 800a352:	d005      	beq.n	800a360 <I2C_Master_ADDR+0x268>
 800a354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a356:	2b10      	cmp	r3, #16
 800a358:	d002      	beq.n	800a360 <I2C_Master_ADDR+0x268>
 800a35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35c:	2b20      	cmp	r3, #32
 800a35e:	d107      	bne.n	800a370 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	685a      	ldr	r2, [r3, #4]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a36e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a370:	2300      	movs	r3, #0
 800a372:	617b      	str	r3, [r7, #20]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	695b      	ldr	r3, [r3, #20]
 800a37a:	617b      	str	r3, [r7, #20]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	699b      	ldr	r3, [r3, #24]
 800a382:	617b      	str	r3, [r7, #20]
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	e032      	b.n	800a3ee <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a396:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3a6:	d117      	bne.n	800a3d8 <I2C_Master_ADDR+0x2e0>
 800a3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a3ae:	d00b      	beq.n	800a3c8 <I2C_Master_ADDR+0x2d0>
 800a3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d008      	beq.n	800a3c8 <I2C_Master_ADDR+0x2d0>
 800a3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b8:	2b08      	cmp	r3, #8
 800a3ba:	d005      	beq.n	800a3c8 <I2C_Master_ADDR+0x2d0>
 800a3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3be:	2b10      	cmp	r3, #16
 800a3c0:	d002      	beq.n	800a3c8 <I2C_Master_ADDR+0x2d0>
 800a3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c4:	2b20      	cmp	r3, #32
 800a3c6:	d107      	bne.n	800a3d8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	685a      	ldr	r2, [r3, #4]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a3d6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a3d8:	2300      	movs	r3, #0
 800a3da:	613b      	str	r3, [r7, #16]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	695b      	ldr	r3, [r3, #20]
 800a3e2:	613b      	str	r3, [r7, #16]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	699b      	ldr	r3, [r3, #24]
 800a3ea:	613b      	str	r3, [r7, #16]
 800a3ec:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800a3f4:	e00b      	b.n	800a40e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	60fb      	str	r3, [r7, #12]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	695b      	ldr	r3, [r3, #20]
 800a400:	60fb      	str	r3, [r7, #12]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	699b      	ldr	r3, [r3, #24]
 800a408:	60fb      	str	r3, [r7, #12]
 800a40a:	68fb      	ldr	r3, [r7, #12]
}
 800a40c:	e7ff      	b.n	800a40e <I2C_Master_ADDR+0x316>
 800a40e:	bf00      	nop
 800a410:	3744      	adds	r7, #68	; 0x44
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr

0800a41a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b084      	sub	sp, #16
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a428:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a42e:	b29b      	uxth	r3, r3
 800a430:	2b00      	cmp	r3, #0
 800a432:	d02b      	beq.n	800a48c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a438:	781a      	ldrb	r2, [r3, #0]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a444:	1c5a      	adds	r2, r3, #1
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a44e:	b29b      	uxth	r3, r3
 800a450:	3b01      	subs	r3, #1
 800a452:	b29a      	uxth	r2, r3
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a45c:	b29b      	uxth	r3, r3
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d114      	bne.n	800a48c <I2C_SlaveTransmit_TXE+0x72>
 800a462:	7bfb      	ldrb	r3, [r7, #15]
 800a464:	2b29      	cmp	r3, #41	; 0x29
 800a466:	d111      	bne.n	800a48c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	685a      	ldr	r2, [r3, #4]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a476:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2221      	movs	r2, #33	; 0x21
 800a47c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2228      	movs	r2, #40	; 0x28
 800a482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f7ff fa53 	bl	8009932 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800a48c:	bf00      	nop
 800a48e:	3710      	adds	r7, #16
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d011      	beq.n	800a4ca <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4aa:	781a      	ldrb	r2, [r3, #0]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b6:	1c5a      	adds	r2, r3, #1
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	3b01      	subs	r3, #1
 800a4c4:	b29a      	uxth	r2, r3
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800a4ca:	bf00      	nop
 800a4cc:	370c      	adds	r7, #12
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr

0800a4d6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b084      	sub	sp, #16
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4e4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d02c      	beq.n	800a54a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	691a      	ldr	r2, [r3, #16]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4fa:	b2d2      	uxtb	r2, r2
 800a4fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a502:	1c5a      	adds	r2, r3, #1
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	3b01      	subs	r3, #1
 800a510:	b29a      	uxth	r2, r3
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d114      	bne.n	800a54a <I2C_SlaveReceive_RXNE+0x74>
 800a520:	7bfb      	ldrb	r3, [r7, #15]
 800a522:	2b2a      	cmp	r3, #42	; 0x2a
 800a524:	d111      	bne.n	800a54a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	685a      	ldr	r2, [r3, #4]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a534:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2222      	movs	r2, #34	; 0x22
 800a53a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2228      	movs	r2, #40	; 0x28
 800a540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f7ff f9fe 	bl	8009946 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800a54a:	bf00      	nop
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800a552:	b480      	push	{r7}
 800a554:	b083      	sub	sp, #12
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a55e:	b29b      	uxth	r3, r3
 800a560:	2b00      	cmp	r3, #0
 800a562:	d012      	beq.n	800a58a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	691a      	ldr	r2, [r3, #16]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56e:	b2d2      	uxtb	r2, r2
 800a570:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a576:	1c5a      	adds	r2, r3, #1
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a580:	b29b      	uxth	r3, r3
 800a582:	3b01      	subs	r3, #1
 800a584:	b29a      	uxth	r2, r3
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800a58a:	bf00      	nop
 800a58c:	370c      	adds	r7, #12
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr

0800a596 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b084      	sub	sp, #16
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
 800a59e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a5b0:	2b28      	cmp	r3, #40	; 0x28
 800a5b2:	d127      	bne.n	800a604 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	685a      	ldr	r2, [r3, #4]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5c2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	089b      	lsrs	r3, r3, #2
 800a5c8:	f003 0301 	and.w	r3, r3, #1
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d101      	bne.n	800a5d4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	09db      	lsrs	r3, r3, #7
 800a5d8:	f003 0301 	and.w	r3, r3, #1
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d103      	bne.n	800a5e8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	68db      	ldr	r3, [r3, #12]
 800a5e4:	81bb      	strh	r3, [r7, #12]
 800a5e6:	e002      	b.n	800a5ee <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	699b      	ldr	r3, [r3, #24]
 800a5ec:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800a5f6:	89ba      	ldrh	r2, [r7, #12]
 800a5f8:	7bfb      	ldrb	r3, [r7, #15]
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f7ff f9ac 	bl	800995a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800a602:	e008      	b.n	800a616 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f06f 0202 	mvn.w	r2, #2
 800a60c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2200      	movs	r2, #0
 800a612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800a616:	bf00      	nop
 800a618:	3710      	adds	r7, #16
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}
	...

0800a620 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b084      	sub	sp, #16
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a62e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	685a      	ldr	r2, [r3, #4]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a63e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800a640:	2300      	movs	r3, #0
 800a642:	60bb      	str	r3, [r7, #8]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	695b      	ldr	r3, [r3, #20]
 800a64a:	60bb      	str	r3, [r7, #8]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f042 0201 	orr.w	r2, r2, #1
 800a65a:	601a      	str	r2, [r3, #0]
 800a65c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a66c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a678:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a67c:	d172      	bne.n	800a764 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a67e:	7bfb      	ldrb	r3, [r7, #15]
 800a680:	2b22      	cmp	r3, #34	; 0x22
 800a682:	d002      	beq.n	800a68a <I2C_Slave_STOPF+0x6a>
 800a684:	7bfb      	ldrb	r3, [r7, #15]
 800a686:	2b2a      	cmp	r3, #42	; 0x2a
 800a688:	d135      	bne.n	800a6f6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	b29a      	uxth	r2, r3
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d005      	beq.n	800a6ae <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a6:	f043 0204 	orr.w	r2, r3, #4
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	685a      	ldr	r2, [r3, #4]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a6bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7fd fe74 	bl	80083b0 <HAL_DMA_GetState>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d049      	beq.n	800a762 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d2:	4a69      	ldr	r2, [pc, #420]	; (800a878 <I2C_Slave_STOPF+0x258>)
 800a6d4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f7fd fcbc 	bl	8008058 <HAL_DMA_Abort_IT>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d03d      	beq.n	800a762 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6ec:	687a      	ldr	r2, [r7, #4]
 800a6ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a6f0:	4610      	mov	r0, r2
 800a6f2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a6f4:	e035      	b.n	800a762 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	b29a      	uxth	r2, r3
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a708:	b29b      	uxth	r3, r3
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d005      	beq.n	800a71a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a712:	f043 0204 	orr.w	r2, r3, #4
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	685a      	ldr	r2, [r3, #4]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a728:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a72e:	4618      	mov	r0, r3
 800a730:	f7fd fe3e 	bl	80083b0 <HAL_DMA_GetState>
 800a734:	4603      	mov	r3, r0
 800a736:	2b01      	cmp	r3, #1
 800a738:	d014      	beq.n	800a764 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a73e:	4a4e      	ldr	r2, [pc, #312]	; (800a878 <I2C_Slave_STOPF+0x258>)
 800a740:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a746:	4618      	mov	r0, r3
 800a748:	f7fd fc86 	bl	8008058 <HAL_DMA_Abort_IT>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d008      	beq.n	800a764 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a75c:	4610      	mov	r0, r2
 800a75e:	4798      	blx	r3
 800a760:	e000      	b.n	800a764 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a762:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a768:	b29b      	uxth	r3, r3
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d03e      	beq.n	800a7ec <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	695b      	ldr	r3, [r3, #20]
 800a774:	f003 0304 	and.w	r3, r3, #4
 800a778:	2b04      	cmp	r3, #4
 800a77a:	d112      	bne.n	800a7a2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	691a      	ldr	r2, [r3, #16]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a786:	b2d2      	uxtb	r2, r2
 800a788:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78e:	1c5a      	adds	r2, r3, #1
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a798:	b29b      	uxth	r3, r3
 800a79a:	3b01      	subs	r3, #1
 800a79c:	b29a      	uxth	r2, r3
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	695b      	ldr	r3, [r3, #20]
 800a7a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ac:	2b40      	cmp	r3, #64	; 0x40
 800a7ae:	d112      	bne.n	800a7d6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	691a      	ldr	r2, [r3, #16]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ba:	b2d2      	uxtb	r2, r2
 800a7bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c2:	1c5a      	adds	r2, r3, #1
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	3b01      	subs	r3, #1
 800a7d0:	b29a      	uxth	r2, r3
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7da:	b29b      	uxth	r3, r3
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d005      	beq.n	800a7ec <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e4:	f043 0204 	orr.w	r2, r3, #4
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d003      	beq.n	800a7fc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 f8b3 	bl	800a960 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800a7fa:	e039      	b.n	800a870 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a7fc:	7bfb      	ldrb	r3, [r7, #15]
 800a7fe:	2b2a      	cmp	r3, #42	; 0x2a
 800a800:	d109      	bne.n	800a816 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2200      	movs	r2, #0
 800a806:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2228      	movs	r2, #40	; 0x28
 800a80c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f7ff f898 	bl	8009946 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	2b28      	cmp	r3, #40	; 0x28
 800a820:	d111      	bne.n	800a846 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4a15      	ldr	r2, [pc, #84]	; (800a87c <I2C_Slave_STOPF+0x25c>)
 800a826:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2220      	movs	r2, #32
 800a832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2200      	movs	r2, #0
 800a83a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f7ff f899 	bl	8009976 <HAL_I2C_ListenCpltCallback>
}
 800a844:	e014      	b.n	800a870 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a84a:	2b22      	cmp	r3, #34	; 0x22
 800a84c:	d002      	beq.n	800a854 <I2C_Slave_STOPF+0x234>
 800a84e:	7bfb      	ldrb	r3, [r7, #15]
 800a850:	2b22      	cmp	r3, #34	; 0x22
 800a852:	d10d      	bne.n	800a870 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2220      	movs	r2, #32
 800a85e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2200      	movs	r2, #0
 800a866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f7ff f86b 	bl	8009946 <HAL_I2C_SlaveRxCpltCallback>
}
 800a870:	bf00      	nop
 800a872:	3710      	adds	r7, #16
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}
 800a878:	0800ae8d 	.word	0x0800ae8d
 800a87c:	ffff0000 	.word	0xffff0000

0800a880 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a88e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a894:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	2b08      	cmp	r3, #8
 800a89a:	d002      	beq.n	800a8a2 <I2C_Slave_AF+0x22>
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	2b20      	cmp	r3, #32
 800a8a0:	d129      	bne.n	800a8f6 <I2C_Slave_AF+0x76>
 800a8a2:	7bfb      	ldrb	r3, [r7, #15]
 800a8a4:	2b28      	cmp	r3, #40	; 0x28
 800a8a6:	d126      	bne.n	800a8f6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	4a2c      	ldr	r2, [pc, #176]	; (800a95c <I2C_Slave_AF+0xdc>)
 800a8ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	685a      	ldr	r2, [r3, #4]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a8bc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a8c6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	681a      	ldr	r2, [r3, #0]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a8d6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2220      	movs	r2, #32
 800a8e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f7ff f841 	bl	8009976 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800a8f4:	e02e      	b.n	800a954 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800a8f6:	7bfb      	ldrb	r3, [r7, #15]
 800a8f8:	2b21      	cmp	r3, #33	; 0x21
 800a8fa:	d126      	bne.n	800a94a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	4a17      	ldr	r2, [pc, #92]	; (800a95c <I2C_Slave_AF+0xdc>)
 800a900:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2221      	movs	r2, #33	; 0x21
 800a906:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2220      	movs	r2, #32
 800a90c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2200      	movs	r2, #0
 800a914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	685a      	ldr	r2, [r3, #4]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a926:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a930:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a940:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f7fe fff5 	bl	8009932 <HAL_I2C_SlaveTxCpltCallback>
}
 800a948:	e004      	b.n	800a954 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a952:	615a      	str	r2, [r3, #20]
}
 800a954:	bf00      	nop
 800a956:	3710      	adds	r7, #16
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	ffff0000 	.word	0xffff0000

0800a960 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a96e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a976:	b2db      	uxtb	r3, r3
 800a978:	2b10      	cmp	r3, #16
 800a97a:	d10a      	bne.n	800a992 <I2C_ITError+0x32>
 800a97c:	7bfb      	ldrb	r3, [r7, #15]
 800a97e:	2b22      	cmp	r3, #34	; 0x22
 800a980:	d107      	bne.n	800a992 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a990:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a992:	7bfb      	ldrb	r3, [r7, #15]
 800a994:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a998:	2b28      	cmp	r3, #40	; 0x28
 800a99a:	d107      	bne.n	800a9ac <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2228      	movs	r2, #40	; 0x28
 800a9a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a9aa:	e015      	b.n	800a9d8 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9ba:	d006      	beq.n	800a9ca <I2C_ITError+0x6a>
 800a9bc:	7bfb      	ldrb	r3, [r7, #15]
 800a9be:	2b60      	cmp	r3, #96	; 0x60
 800a9c0:	d003      	beq.n	800a9ca <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2220      	movs	r2, #32
 800a9c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9e6:	d162      	bne.n	800aaae <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	685a      	ldr	r2, [r3, #4]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a9f6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	d020      	beq.n	800aa48 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa0a:	4a6a      	ldr	r2, [pc, #424]	; (800abb4 <I2C_ITError+0x254>)
 800aa0c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7fd fb20 	bl	8008058 <HAL_DMA_Abort_IT>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	f000 8089 	beq.w	800ab32 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f022 0201 	bic.w	r2, r2, #1
 800aa2e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2220      	movs	r2, #32
 800aa34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800aa42:	4610      	mov	r0, r2
 800aa44:	4798      	blx	r3
 800aa46:	e074      	b.n	800ab32 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa4c:	4a59      	ldr	r2, [pc, #356]	; (800abb4 <I2C_ITError+0x254>)
 800aa4e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7fd faff 	bl	8008058 <HAL_DMA_Abort_IT>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d068      	beq.n	800ab32 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	695b      	ldr	r3, [r3, #20]
 800aa66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa6a:	2b40      	cmp	r3, #64	; 0x40
 800aa6c:	d10b      	bne.n	800aa86 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	691a      	ldr	r2, [r3, #16]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa78:	b2d2      	uxtb	r2, r2
 800aa7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa80:	1c5a      	adds	r2, r3, #1
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f022 0201 	bic.w	r2, r2, #1
 800aa94:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2220      	movs	r2, #32
 800aa9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800aaa8:	4610      	mov	r0, r2
 800aaaa:	4798      	blx	r3
 800aaac:	e041      	b.n	800ab32 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	2b60      	cmp	r3, #96	; 0x60
 800aab8:	d125      	bne.n	800ab06 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2220      	movs	r2, #32
 800aabe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2200      	movs	r2, #0
 800aac6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	695b      	ldr	r3, [r3, #20]
 800aace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aad2:	2b40      	cmp	r3, #64	; 0x40
 800aad4:	d10b      	bne.n	800aaee <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	691a      	ldr	r2, [r3, #16]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae0:	b2d2      	uxtb	r2, r2
 800aae2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae8:	1c5a      	adds	r2, r3, #1
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	681a      	ldr	r2, [r3, #0]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f022 0201 	bic.w	r2, r2, #1
 800aafc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f7fa ffaa 	bl	8005a58 <HAL_I2C_AbortCpltCallback>
 800ab04:	e015      	b.n	800ab32 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	695b      	ldr	r3, [r3, #20]
 800ab0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab10:	2b40      	cmp	r3, #64	; 0x40
 800ab12:	d10b      	bne.n	800ab2c <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	691a      	ldr	r2, [r3, #16]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab1e:	b2d2      	uxtb	r2, r2
 800ab20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab26:	1c5a      	adds	r2, r3, #1
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f7fa ff9d 	bl	8005a6c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab36:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	f003 0301 	and.w	r3, r3, #1
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d10e      	bne.n	800ab60 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d109      	bne.n	800ab60 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d104      	bne.n	800ab60 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d007      	beq.n	800ab70 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	685a      	ldr	r2, [r3, #4]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ab6e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab76:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab7c:	f003 0304 	and.w	r3, r3, #4
 800ab80:	2b04      	cmp	r3, #4
 800ab82:	d113      	bne.n	800abac <I2C_ITError+0x24c>
 800ab84:	7bfb      	ldrb	r3, [r7, #15]
 800ab86:	2b28      	cmp	r3, #40	; 0x28
 800ab88:	d110      	bne.n	800abac <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	4a0a      	ldr	r2, [pc, #40]	; (800abb8 <I2C_ITError+0x258>)
 800ab8e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2200      	movs	r2, #0
 800ab94:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2220      	movs	r2, #32
 800ab9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2200      	movs	r2, #0
 800aba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f7fe fee5 	bl	8009976 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800abac:	bf00      	nop
 800abae:	3710      	adds	r7, #16
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	0800ae8d 	.word	0x0800ae8d
 800abb8:	ffff0000 	.word	0xffff0000

0800abbc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b088      	sub	sp, #32
 800abc0:	af02      	add	r7, sp, #8
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	607a      	str	r2, [r7, #4]
 800abc6:	603b      	str	r3, [r7, #0]
 800abc8:	460b      	mov	r3, r1
 800abca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	2b08      	cmp	r3, #8
 800abd6:	d006      	beq.n	800abe6 <I2C_MasterRequestWrite+0x2a>
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d003      	beq.n	800abe6 <I2C_MasterRequestWrite+0x2a>
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800abe4:	d108      	bne.n	800abf8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800abf4:	601a      	str	r2, [r3, #0]
 800abf6:	e00b      	b.n	800ac10 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abfc:	2b12      	cmp	r3, #18
 800abfe:	d107      	bne.n	800ac10 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	9300      	str	r3, [sp, #0]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2200      	movs	r2, #0
 800ac18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ac1c:	68f8      	ldr	r0, [r7, #12]
 800ac1e:	f000 f9b4 	bl	800af8a <I2C_WaitOnFlagUntilTimeout>
 800ac22:	4603      	mov	r3, r0
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d00c      	beq.n	800ac42 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d003      	beq.n	800ac3e <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ac3e:	2303      	movs	r3, #3
 800ac40:	e035      	b.n	800acae <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	691b      	ldr	r3, [r3, #16]
 800ac46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac4a:	d108      	bne.n	800ac5e <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ac4c:	897b      	ldrh	r3, [r7, #10]
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	461a      	mov	r2, r3
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ac5a:	611a      	str	r2, [r3, #16]
 800ac5c:	e01b      	b.n	800ac96 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800ac5e:	897b      	ldrh	r3, [r7, #10]
 800ac60:	11db      	asrs	r3, r3, #7
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	f003 0306 	and.w	r3, r3, #6
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	f063 030f 	orn	r3, r3, #15
 800ac6e:	b2da      	uxtb	r2, r3
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	490f      	ldr	r1, [pc, #60]	; (800acb8 <I2C_MasterRequestWrite+0xfc>)
 800ac7c:	68f8      	ldr	r0, [r7, #12]
 800ac7e:	f000 f9db 	bl	800b038 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ac82:	4603      	mov	r3, r0
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d001      	beq.n	800ac8c <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 800ac88:	2301      	movs	r3, #1
 800ac8a:	e010      	b.n	800acae <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ac8c:	897b      	ldrh	r3, [r7, #10]
 800ac8e:	b2da      	uxtb	r2, r3
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	687a      	ldr	r2, [r7, #4]
 800ac9a:	4908      	ldr	r1, [pc, #32]	; (800acbc <I2C_MasterRequestWrite+0x100>)
 800ac9c:	68f8      	ldr	r0, [r7, #12]
 800ac9e:	f000 f9cb 	bl	800b038 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d001      	beq.n	800acac <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 800aca8:	2301      	movs	r3, #1
 800acaa:	e000      	b.n	800acae <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 800acac:	2300      	movs	r3, #0
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3718      	adds	r7, #24
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	00010008 	.word	0x00010008
 800acbc:	00010002 	.word	0x00010002

0800acc0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b088      	sub	sp, #32
 800acc4:	af02      	add	r7, sp, #8
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	4608      	mov	r0, r1
 800acca:	4611      	mov	r1, r2
 800accc:	461a      	mov	r2, r3
 800acce:	4603      	mov	r3, r0
 800acd0:	817b      	strh	r3, [r7, #10]
 800acd2:	460b      	mov	r3, r1
 800acd4:	813b      	strh	r3, [r7, #8]
 800acd6:	4613      	mov	r3, r2
 800acd8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	681a      	ldr	r2, [r3, #0]
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ace8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	681a      	ldr	r2, [r3, #0]
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800acf8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800acfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfc:	9300      	str	r3, [sp, #0]
 800acfe:	6a3b      	ldr	r3, [r7, #32]
 800ad00:	2200      	movs	r2, #0
 800ad02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ad06:	68f8      	ldr	r0, [r7, #12]
 800ad08:	f000 f93f 	bl	800af8a <I2C_WaitOnFlagUntilTimeout>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d00c      	beq.n	800ad2c <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d003      	beq.n	800ad28 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ad28:	2303      	movs	r3, #3
 800ad2a:	e0a9      	b.n	800ae80 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ad2c:	897b      	ldrh	r3, [r7, #10]
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	461a      	mov	r2, r3
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ad3a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ad3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3e:	6a3a      	ldr	r2, [r7, #32]
 800ad40:	4951      	ldr	r1, [pc, #324]	; (800ae88 <I2C_RequestMemoryRead+0x1c8>)
 800ad42:	68f8      	ldr	r0, [r7, #12]
 800ad44:	f000 f978 	bl	800b038 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d001      	beq.n	800ad52 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	e096      	b.n	800ae80 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ad52:	2300      	movs	r3, #0
 800ad54:	617b      	str	r3, [r7, #20]
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	695b      	ldr	r3, [r3, #20]
 800ad5c:	617b      	str	r3, [r7, #20]
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	699b      	ldr	r3, [r3, #24]
 800ad64:	617b      	str	r3, [r7, #20]
 800ad66:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad6a:	6a39      	ldr	r1, [r7, #32]
 800ad6c:	68f8      	ldr	r0, [r7, #12]
 800ad6e:	f000 f9e2 	bl	800b136 <I2C_WaitOnTXEFlagUntilTimeout>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d00d      	beq.n	800ad94 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad7c:	2b04      	cmp	r3, #4
 800ad7e:	d107      	bne.n	800ad90 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	681a      	ldr	r2, [r3, #0]
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad8e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ad90:	2301      	movs	r3, #1
 800ad92:	e075      	b.n	800ae80 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ad94:	88fb      	ldrh	r3, [r7, #6]
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d105      	bne.n	800ada6 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ad9a:	893b      	ldrh	r3, [r7, #8]
 800ad9c:	b2da      	uxtb	r2, r3
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	611a      	str	r2, [r3, #16]
 800ada4:	e021      	b.n	800adea <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ada6:	893b      	ldrh	r3, [r7, #8]
 800ada8:	0a1b      	lsrs	r3, r3, #8
 800adaa:	b29b      	uxth	r3, r3
 800adac:	b2da      	uxtb	r2, r3
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800adb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adb6:	6a39      	ldr	r1, [r7, #32]
 800adb8:	68f8      	ldr	r0, [r7, #12]
 800adba:	f000 f9bc 	bl	800b136 <I2C_WaitOnTXEFlagUntilTimeout>
 800adbe:	4603      	mov	r3, r0
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d00d      	beq.n	800ade0 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc8:	2b04      	cmp	r3, #4
 800adca:	d107      	bne.n	800addc <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	681a      	ldr	r2, [r3, #0]
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800adda:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800addc:	2301      	movs	r3, #1
 800adde:	e04f      	b.n	800ae80 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ade0:	893b      	ldrh	r3, [r7, #8]
 800ade2:	b2da      	uxtb	r2, r3
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800adea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adec:	6a39      	ldr	r1, [r7, #32]
 800adee:	68f8      	ldr	r0, [r7, #12]
 800adf0:	f000 f9a1 	bl	800b136 <I2C_WaitOnTXEFlagUntilTimeout>
 800adf4:	4603      	mov	r3, r0
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d00d      	beq.n	800ae16 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adfe:	2b04      	cmp	r3, #4
 800ae00:	d107      	bne.n	800ae12 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ae12:	2301      	movs	r3, #1
 800ae14:	e034      	b.n	800ae80 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ae26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae28:	9300      	str	r3, [sp, #0]
 800ae2a:	6a3b      	ldr	r3, [r7, #32]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ae32:	68f8      	ldr	r0, [r7, #12]
 800ae34:	f000 f8a9 	bl	800af8a <I2C_WaitOnFlagUntilTimeout>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d00c      	beq.n	800ae58 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d003      	beq.n	800ae54 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ae54:	2303      	movs	r3, #3
 800ae56:	e013      	b.n	800ae80 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800ae58:	897b      	ldrh	r3, [r7, #10]
 800ae5a:	b2db      	uxtb	r3, r3
 800ae5c:	f043 0301 	orr.w	r3, r3, #1
 800ae60:	b2da      	uxtb	r2, r3
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ae68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae6a:	6a3a      	ldr	r2, [r7, #32]
 800ae6c:	4906      	ldr	r1, [pc, #24]	; (800ae88 <I2C_RequestMemoryRead+0x1c8>)
 800ae6e:	68f8      	ldr	r0, [r7, #12]
 800ae70:	f000 f8e2 	bl	800b038 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d001      	beq.n	800ae7e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	e000      	b.n	800ae80 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800ae7e:	2300      	movs	r3, #0
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3718      	adds	r7, #24
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	00010002 	.word	0x00010002

0800ae8c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae98:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aea0:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d003      	beq.n	800aeb2 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeae:	2200      	movs	r2, #0
 800aeb0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d003      	beq.n	800aec2 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aebe:	2200      	movs	r2, #0
 800aec0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	681a      	ldr	r2, [r3, #0]
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aed0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2200      	movs	r2, #0
 800aed6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d003      	beq.n	800aee8 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aee4:	2200      	movs	r2, #0
 800aee6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d003      	beq.n	800aef8 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aef4:	2200      	movs	r2, #0
 800aef6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	681a      	ldr	r2, [r3, #0]
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f022 0201 	bic.w	r2, r2, #1
 800af06:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	2b60      	cmp	r3, #96	; 0x60
 800af12:	d10e      	bne.n	800af32 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2220      	movs	r2, #32
 800af18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2200      	movs	r2, #0
 800af20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	2200      	movs	r2, #0
 800af28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800af2a:	68f8      	ldr	r0, [r7, #12]
 800af2c:	f7fa fd94 	bl	8005a58 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800af30:	e027      	b.n	800af82 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800af32:	7afb      	ldrb	r3, [r7, #11]
 800af34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800af38:	2b28      	cmp	r3, #40	; 0x28
 800af3a:	d117      	bne.n	800af6c <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	681a      	ldr	r2, [r3, #0]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f042 0201 	orr.w	r2, r2, #1
 800af4a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	681a      	ldr	r2, [r3, #0]
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800af5a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2200      	movs	r2, #0
 800af60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2228      	movs	r2, #40	; 0x28
 800af66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800af6a:	e007      	b.n	800af7c <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	2220      	movs	r2, #32
 800af70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2200      	movs	r2, #0
 800af78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800af7c:	68f8      	ldr	r0, [r7, #12]
 800af7e:	f7fa fd75 	bl	8005a6c <HAL_I2C_ErrorCallback>
}
 800af82:	bf00      	nop
 800af84:	3710      	adds	r7, #16
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}

0800af8a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800af8a:	b580      	push	{r7, lr}
 800af8c:	b084      	sub	sp, #16
 800af8e:	af00      	add	r7, sp, #0
 800af90:	60f8      	str	r0, [r7, #12]
 800af92:	60b9      	str	r1, [r7, #8]
 800af94:	603b      	str	r3, [r7, #0]
 800af96:	4613      	mov	r3, r2
 800af98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800af9a:	e025      	b.n	800afe8 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afa2:	d021      	beq.n	800afe8 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afa4:	f7fc fe6a 	bl	8007c7c <HAL_GetTick>
 800afa8:	4602      	mov	r2, r0
 800afaa:	69bb      	ldr	r3, [r7, #24]
 800afac:	1ad3      	subs	r3, r2, r3
 800afae:	683a      	ldr	r2, [r7, #0]
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d302      	bcc.n	800afba <I2C_WaitOnFlagUntilTimeout+0x30>
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d116      	bne.n	800afe8 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2200      	movs	r2, #0
 800afbe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2220      	movs	r2, #32
 800afc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2200      	movs	r2, #0
 800afcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afd4:	f043 0220 	orr.w	r2, r3, #32
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2200      	movs	r2, #0
 800afe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800afe4:	2301      	movs	r3, #1
 800afe6:	e023      	b.n	800b030 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	0c1b      	lsrs	r3, r3, #16
 800afec:	b2db      	uxtb	r3, r3
 800afee:	2b01      	cmp	r3, #1
 800aff0:	d10d      	bne.n	800b00e <I2C_WaitOnFlagUntilTimeout+0x84>
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	695b      	ldr	r3, [r3, #20]
 800aff8:	43da      	mvns	r2, r3
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	4013      	ands	r3, r2
 800affe:	b29b      	uxth	r3, r3
 800b000:	2b00      	cmp	r3, #0
 800b002:	bf0c      	ite	eq
 800b004:	2301      	moveq	r3, #1
 800b006:	2300      	movne	r3, #0
 800b008:	b2db      	uxtb	r3, r3
 800b00a:	461a      	mov	r2, r3
 800b00c:	e00c      	b.n	800b028 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	699b      	ldr	r3, [r3, #24]
 800b014:	43da      	mvns	r2, r3
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	4013      	ands	r3, r2
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	bf0c      	ite	eq
 800b020:	2301      	moveq	r3, #1
 800b022:	2300      	movne	r3, #0
 800b024:	b2db      	uxtb	r3, r3
 800b026:	461a      	mov	r2, r3
 800b028:	79fb      	ldrb	r3, [r7, #7]
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d0b6      	beq.n	800af9c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b02e:	2300      	movs	r3, #0
}
 800b030:	4618      	mov	r0, r3
 800b032:	3710      	adds	r7, #16
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	607a      	str	r2, [r7, #4]
 800b044:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b046:	e051      	b.n	800b0ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	695b      	ldr	r3, [r3, #20]
 800b04e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b056:	d123      	bne.n	800b0a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b066:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b070:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2200      	movs	r2, #0
 800b076:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2220      	movs	r2, #32
 800b07c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2200      	movs	r2, #0
 800b084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b08c:	f043 0204 	orr.w	r2, r3, #4
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2200      	movs	r2, #0
 800b098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b09c:	2301      	movs	r3, #1
 800b09e:	e046      	b.n	800b12e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0a6:	d021      	beq.n	800b0ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0a8:	f7fc fde8 	bl	8007c7c <HAL_GetTick>
 800b0ac:	4602      	mov	r2, r0
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	1ad3      	subs	r3, r2, r3
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d302      	bcc.n	800b0be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d116      	bne.n	800b0ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2220      	movs	r2, #32
 800b0c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0d8:	f043 0220 	orr.w	r2, r3, #32
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	e020      	b.n	800b12e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	0c1b      	lsrs	r3, r3, #16
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	d10c      	bne.n	800b110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	695b      	ldr	r3, [r3, #20]
 800b0fc:	43da      	mvns	r2, r3
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	4013      	ands	r3, r2
 800b102:	b29b      	uxth	r3, r3
 800b104:	2b00      	cmp	r3, #0
 800b106:	bf14      	ite	ne
 800b108:	2301      	movne	r3, #1
 800b10a:	2300      	moveq	r3, #0
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	e00b      	b.n	800b128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	699b      	ldr	r3, [r3, #24]
 800b116:	43da      	mvns	r2, r3
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	4013      	ands	r3, r2
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	2b00      	cmp	r3, #0
 800b120:	bf14      	ite	ne
 800b122:	2301      	movne	r3, #1
 800b124:	2300      	moveq	r3, #0
 800b126:	b2db      	uxtb	r3, r3
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d18d      	bne.n	800b048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800b12c:	2300      	movs	r3, #0
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}

0800b136 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b136:	b580      	push	{r7, lr}
 800b138:	b084      	sub	sp, #16
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	60f8      	str	r0, [r7, #12]
 800b13e:	60b9      	str	r1, [r7, #8]
 800b140:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b142:	e02d      	b.n	800b1a0 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b144:	68f8      	ldr	r0, [r7, #12]
 800b146:	f000 f8ce 	bl	800b2e6 <I2C_IsAcknowledgeFailed>
 800b14a:	4603      	mov	r3, r0
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d001      	beq.n	800b154 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b150:	2301      	movs	r3, #1
 800b152:	e02d      	b.n	800b1b0 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b15a:	d021      	beq.n	800b1a0 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b15c:	f7fc fd8e 	bl	8007c7c <HAL_GetTick>
 800b160:	4602      	mov	r2, r0
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	1ad3      	subs	r3, r2, r3
 800b166:	68ba      	ldr	r2, [r7, #8]
 800b168:	429a      	cmp	r2, r3
 800b16a:	d302      	bcc.n	800b172 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d116      	bne.n	800b1a0 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	2200      	movs	r2, #0
 800b176:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2220      	movs	r2, #32
 800b17c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2200      	movs	r2, #0
 800b184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b18c:	f043 0220 	orr.w	r2, r3, #32
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2200      	movs	r2, #0
 800b198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b19c:	2301      	movs	r3, #1
 800b19e:	e007      	b.n	800b1b0 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	695b      	ldr	r3, [r3, #20]
 800b1a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1aa:	2b80      	cmp	r3, #128	; 0x80
 800b1ac:	d1ca      	bne.n	800b144 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b1ae:	2300      	movs	r3, #0
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3710      	adds	r7, #16
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b084      	sub	sp, #16
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	60f8      	str	r0, [r7, #12]
 800b1c0:	60b9      	str	r1, [r7, #8]
 800b1c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b1c4:	e02d      	b.n	800b222 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b1c6:	68f8      	ldr	r0, [r7, #12]
 800b1c8:	f000 f88d 	bl	800b2e6 <I2C_IsAcknowledgeFailed>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d001      	beq.n	800b1d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e02d      	b.n	800b232 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1dc:	d021      	beq.n	800b222 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1de:	f7fc fd4d 	bl	8007c7c <HAL_GetTick>
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	1ad3      	subs	r3, r2, r3
 800b1e8:	68ba      	ldr	r2, [r7, #8]
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d302      	bcc.n	800b1f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d116      	bne.n	800b222 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2220      	movs	r2, #32
 800b1fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2200      	movs	r2, #0
 800b206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b20e:	f043 0220 	orr.w	r2, r3, #32
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2200      	movs	r2, #0
 800b21a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b21e:	2301      	movs	r3, #1
 800b220:	e007      	b.n	800b232 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	695b      	ldr	r3, [r3, #20]
 800b228:	f003 0304 	and.w	r3, r3, #4
 800b22c:	2b04      	cmp	r3, #4
 800b22e:	d1ca      	bne.n	800b1c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b230:	2300      	movs	r3, #0
}
 800b232:	4618      	mov	r0, r3
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}

0800b23a <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b23a:	b580      	push	{r7, lr}
 800b23c:	b084      	sub	sp, #16
 800b23e:	af00      	add	r7, sp, #0
 800b240:	60f8      	str	r0, [r7, #12]
 800b242:	60b9      	str	r1, [r7, #8]
 800b244:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b246:	e042      	b.n	800b2ce <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	695b      	ldr	r3, [r3, #20]
 800b24e:	f003 0310 	and.w	r3, r3, #16
 800b252:	2b10      	cmp	r3, #16
 800b254:	d119      	bne.n	800b28a <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f06f 0210 	mvn.w	r2, #16
 800b25e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2200      	movs	r2, #0
 800b264:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2220      	movs	r2, #32
 800b26a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2200      	movs	r2, #0
 800b272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2200      	movs	r2, #0
 800b282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b286:	2301      	movs	r3, #1
 800b288:	e029      	b.n	800b2de <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b28a:	f7fc fcf7 	bl	8007c7c <HAL_GetTick>
 800b28e:	4602      	mov	r2, r0
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	1ad3      	subs	r3, r2, r3
 800b294:	68ba      	ldr	r2, [r7, #8]
 800b296:	429a      	cmp	r2, r3
 800b298:	d302      	bcc.n	800b2a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d116      	bne.n	800b2ce <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2220      	movs	r2, #32
 800b2aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ba:	f043 0220 	orr.w	r2, r3, #32
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	e007      	b.n	800b2de <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	695b      	ldr	r3, [r3, #20]
 800b2d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2d8:	2b40      	cmp	r3, #64	; 0x40
 800b2da:	d1b5      	bne.n	800b248 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b2dc:	2300      	movs	r3, #0
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3710      	adds	r7, #16
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b2e6:	b480      	push	{r7}
 800b2e8:	b083      	sub	sp, #12
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	695b      	ldr	r3, [r3, #20]
 800b2f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2fc:	d11b      	bne.n	800b336 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b306:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2200      	movs	r2, #0
 800b30c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2220      	movs	r2, #32
 800b312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2200      	movs	r2, #0
 800b31a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b322:	f043 0204 	orr.w	r2, r3, #4
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2200      	movs	r2, #0
 800b32e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b332:	2301      	movs	r3, #1
 800b334:	e000      	b.n	800b338 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b336:	2300      	movs	r3, #0
}
 800b338:	4618      	mov	r0, r3
 800b33a:	370c      	adds	r7, #12
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr

0800b344 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b350:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800b354:	d103      	bne.n	800b35e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2201      	movs	r2, #1
 800b35a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800b35c:	e007      	b.n	800b36e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b362:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800b366:	d102      	bne.n	800b36e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2208      	movs	r2, #8
 800b36c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800b36e:	bf00      	nop
 800b370:	370c      	adds	r7, #12
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr

0800b37a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b37a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b37c:	b08f      	sub	sp, #60	; 0x3c
 800b37e:	af0a      	add	r7, sp, #40	; 0x28
 800b380:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d101      	bne.n	800b38c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b388:	2301      	movs	r3, #1
 800b38a:	e10f      	b.n	800b5ac <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800b398:	b2db      	uxtb	r3, r3
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d106      	bne.n	800b3ac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f006 fa4c 	bl	8011844 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2203      	movs	r2, #3
 800b3b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d102      	bne.n	800b3c6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f003 fa6d 	bl	800e8aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	603b      	str	r3, [r7, #0]
 800b3d6:	687e      	ldr	r6, [r7, #4]
 800b3d8:	466d      	mov	r5, sp
 800b3da:	f106 0410 	add.w	r4, r6, #16
 800b3de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b3e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b3e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b3e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b3e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b3ea:	e885 0003 	stmia.w	r5, {r0, r1}
 800b3ee:	1d33      	adds	r3, r6, #4
 800b3f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b3f2:	6838      	ldr	r0, [r7, #0]
 800b3f4:	f003 f944 	bl	800e680 <USB_CoreInit>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d005      	beq.n	800b40a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2202      	movs	r2, #2
 800b402:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800b406:	2301      	movs	r3, #1
 800b408:	e0d0      	b.n	800b5ac <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	2100      	movs	r1, #0
 800b410:	4618      	mov	r0, r3
 800b412:	f003 fa5b 	bl	800e8cc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b416:	2300      	movs	r3, #0
 800b418:	73fb      	strb	r3, [r7, #15]
 800b41a:	e04a      	b.n	800b4b2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b41c:	7bfa      	ldrb	r2, [r7, #15]
 800b41e:	6879      	ldr	r1, [r7, #4]
 800b420:	4613      	mov	r3, r2
 800b422:	00db      	lsls	r3, r3, #3
 800b424:	1a9b      	subs	r3, r3, r2
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	440b      	add	r3, r1
 800b42a:	333d      	adds	r3, #61	; 0x3d
 800b42c:	2201      	movs	r2, #1
 800b42e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b430:	7bfa      	ldrb	r2, [r7, #15]
 800b432:	6879      	ldr	r1, [r7, #4]
 800b434:	4613      	mov	r3, r2
 800b436:	00db      	lsls	r3, r3, #3
 800b438:	1a9b      	subs	r3, r3, r2
 800b43a:	009b      	lsls	r3, r3, #2
 800b43c:	440b      	add	r3, r1
 800b43e:	333c      	adds	r3, #60	; 0x3c
 800b440:	7bfa      	ldrb	r2, [r7, #15]
 800b442:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b444:	7bfa      	ldrb	r2, [r7, #15]
 800b446:	7bfb      	ldrb	r3, [r7, #15]
 800b448:	b298      	uxth	r0, r3
 800b44a:	6879      	ldr	r1, [r7, #4]
 800b44c:	4613      	mov	r3, r2
 800b44e:	00db      	lsls	r3, r3, #3
 800b450:	1a9b      	subs	r3, r3, r2
 800b452:	009b      	lsls	r3, r3, #2
 800b454:	440b      	add	r3, r1
 800b456:	3342      	adds	r3, #66	; 0x42
 800b458:	4602      	mov	r2, r0
 800b45a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b45c:	7bfa      	ldrb	r2, [r7, #15]
 800b45e:	6879      	ldr	r1, [r7, #4]
 800b460:	4613      	mov	r3, r2
 800b462:	00db      	lsls	r3, r3, #3
 800b464:	1a9b      	subs	r3, r3, r2
 800b466:	009b      	lsls	r3, r3, #2
 800b468:	440b      	add	r3, r1
 800b46a:	333f      	adds	r3, #63	; 0x3f
 800b46c:	2200      	movs	r2, #0
 800b46e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b470:	7bfa      	ldrb	r2, [r7, #15]
 800b472:	6879      	ldr	r1, [r7, #4]
 800b474:	4613      	mov	r3, r2
 800b476:	00db      	lsls	r3, r3, #3
 800b478:	1a9b      	subs	r3, r3, r2
 800b47a:	009b      	lsls	r3, r3, #2
 800b47c:	440b      	add	r3, r1
 800b47e:	3344      	adds	r3, #68	; 0x44
 800b480:	2200      	movs	r2, #0
 800b482:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b484:	7bfa      	ldrb	r2, [r7, #15]
 800b486:	6879      	ldr	r1, [r7, #4]
 800b488:	4613      	mov	r3, r2
 800b48a:	00db      	lsls	r3, r3, #3
 800b48c:	1a9b      	subs	r3, r3, r2
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	440b      	add	r3, r1
 800b492:	3348      	adds	r3, #72	; 0x48
 800b494:	2200      	movs	r2, #0
 800b496:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b498:	7bfa      	ldrb	r2, [r7, #15]
 800b49a:	6879      	ldr	r1, [r7, #4]
 800b49c:	4613      	mov	r3, r2
 800b49e:	00db      	lsls	r3, r3, #3
 800b4a0:	1a9b      	subs	r3, r3, r2
 800b4a2:	009b      	lsls	r3, r3, #2
 800b4a4:	440b      	add	r3, r1
 800b4a6:	3350      	adds	r3, #80	; 0x50
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b4ac:	7bfb      	ldrb	r3, [r7, #15]
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	73fb      	strb	r3, [r7, #15]
 800b4b2:	7bfa      	ldrb	r2, [r7, #15]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d3af      	bcc.n	800b41c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b4bc:	2300      	movs	r3, #0
 800b4be:	73fb      	strb	r3, [r7, #15]
 800b4c0:	e044      	b.n	800b54c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b4c2:	7bfa      	ldrb	r2, [r7, #15]
 800b4c4:	6879      	ldr	r1, [r7, #4]
 800b4c6:	4613      	mov	r3, r2
 800b4c8:	00db      	lsls	r3, r3, #3
 800b4ca:	1a9b      	subs	r3, r3, r2
 800b4cc:	009b      	lsls	r3, r3, #2
 800b4ce:	440b      	add	r3, r1
 800b4d0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b4d8:	7bfa      	ldrb	r2, [r7, #15]
 800b4da:	6879      	ldr	r1, [r7, #4]
 800b4dc:	4613      	mov	r3, r2
 800b4de:	00db      	lsls	r3, r3, #3
 800b4e0:	1a9b      	subs	r3, r3, r2
 800b4e2:	009b      	lsls	r3, r3, #2
 800b4e4:	440b      	add	r3, r1
 800b4e6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b4ea:	7bfa      	ldrb	r2, [r7, #15]
 800b4ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b4ee:	7bfa      	ldrb	r2, [r7, #15]
 800b4f0:	6879      	ldr	r1, [r7, #4]
 800b4f2:	4613      	mov	r3, r2
 800b4f4:	00db      	lsls	r3, r3, #3
 800b4f6:	1a9b      	subs	r3, r3, r2
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	440b      	add	r3, r1
 800b4fc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b500:	2200      	movs	r2, #0
 800b502:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b504:	7bfa      	ldrb	r2, [r7, #15]
 800b506:	6879      	ldr	r1, [r7, #4]
 800b508:	4613      	mov	r3, r2
 800b50a:	00db      	lsls	r3, r3, #3
 800b50c:	1a9b      	subs	r3, r3, r2
 800b50e:	009b      	lsls	r3, r3, #2
 800b510:	440b      	add	r3, r1
 800b512:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800b516:	2200      	movs	r2, #0
 800b518:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b51a:	7bfa      	ldrb	r2, [r7, #15]
 800b51c:	6879      	ldr	r1, [r7, #4]
 800b51e:	4613      	mov	r3, r2
 800b520:	00db      	lsls	r3, r3, #3
 800b522:	1a9b      	subs	r3, r3, r2
 800b524:	009b      	lsls	r3, r3, #2
 800b526:	440b      	add	r3, r1
 800b528:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b52c:	2200      	movs	r2, #0
 800b52e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b530:	7bfa      	ldrb	r2, [r7, #15]
 800b532:	6879      	ldr	r1, [r7, #4]
 800b534:	4613      	mov	r3, r2
 800b536:	00db      	lsls	r3, r3, #3
 800b538:	1a9b      	subs	r3, r3, r2
 800b53a:	009b      	lsls	r3, r3, #2
 800b53c:	440b      	add	r3, r1
 800b53e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800b542:	2200      	movs	r2, #0
 800b544:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b546:	7bfb      	ldrb	r3, [r7, #15]
 800b548:	3301      	adds	r3, #1
 800b54a:	73fb      	strb	r3, [r7, #15]
 800b54c:	7bfa      	ldrb	r2, [r7, #15]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	429a      	cmp	r2, r3
 800b554:	d3b5      	bcc.n	800b4c2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	603b      	str	r3, [r7, #0]
 800b55c:	687e      	ldr	r6, [r7, #4]
 800b55e:	466d      	mov	r5, sp
 800b560:	f106 0410 	add.w	r4, r6, #16
 800b564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b568:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b56a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b56c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b570:	e885 0003 	stmia.w	r5, {r0, r1}
 800b574:	1d33      	adds	r3, r6, #4
 800b576:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b578:	6838      	ldr	r0, [r7, #0]
 800b57a:	f003 f9d1 	bl	800e920 <USB_DevInit>
 800b57e:	4603      	mov	r3, r0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d005      	beq.n	800b590 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2202      	movs	r2, #2
 800b588:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800b58c:	2301      	movs	r3, #1
 800b58e:	e00d      	b.n	800b5ac <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2200      	movs	r2, #0
 800b594:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2201      	movs	r2, #1
 800b59c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f004 fa10 	bl	800f9ca <USB_DevDisconnect>

  return HAL_OK;
 800b5aa:	2300      	movs	r3, #0
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3714      	adds	r7, #20
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b5b4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b084      	sub	sp, #16
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d101      	bne.n	800b5d0 <HAL_PCD_Start+0x1c>
 800b5cc:	2302      	movs	r3, #2
 800b5ce:	e020      	b.n	800b612 <HAL_PCD_Start+0x5e>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d109      	bne.n	800b5f4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800b5e4:	2b01      	cmp	r3, #1
 800b5e6:	d005      	beq.n	800b5f4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f004 f9ce 	bl	800f99a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	4618      	mov	r0, r3
 800b604:	f003 f940 	bl	800e888 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2200      	movs	r2, #0
 800b60c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800b610:	2300      	movs	r3, #0
}
 800b612:	4618      	mov	r0, r3
 800b614:	3710      	adds	r7, #16
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}

0800b61a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b61a:	b590      	push	{r4, r7, lr}
 800b61c:	b08d      	sub	sp, #52	; 0x34
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b628:	6a3b      	ldr	r3, [r7, #32]
 800b62a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	4618      	mov	r0, r3
 800b632:	f004 fa75 	bl	800fb20 <USB_GetMode>
 800b636:	4603      	mov	r3, r0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	f040 839d 	bne.w	800bd78 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	4618      	mov	r0, r3
 800b644:	f004 f9d9 	bl	800f9fa <USB_ReadInterrupts>
 800b648:	4603      	mov	r3, r0
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	f000 8393 	beq.w	800bd76 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4618      	mov	r0, r3
 800b656:	f004 f9d0 	bl	800f9fa <USB_ReadInterrupts>
 800b65a:	4603      	mov	r3, r0
 800b65c:	f003 0302 	and.w	r3, r3, #2
 800b660:	2b02      	cmp	r3, #2
 800b662:	d107      	bne.n	800b674 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	695a      	ldr	r2, [r3, #20]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f002 0202 	and.w	r2, r2, #2
 800b672:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4618      	mov	r0, r3
 800b67a:	f004 f9be 	bl	800f9fa <USB_ReadInterrupts>
 800b67e:	4603      	mov	r3, r0
 800b680:	f003 0310 	and.w	r3, r3, #16
 800b684:	2b10      	cmp	r3, #16
 800b686:	d161      	bne.n	800b74c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	699a      	ldr	r2, [r3, #24]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f022 0210 	bic.w	r2, r2, #16
 800b696:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800b698:	6a3b      	ldr	r3, [r7, #32]
 800b69a:	6a1b      	ldr	r3, [r3, #32]
 800b69c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	f003 020f 	and.w	r2, r3, #15
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	00db      	lsls	r3, r3, #3
 800b6a8:	1a9b      	subs	r3, r3, r2
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b6b0:	687a      	ldr	r2, [r7, #4]
 800b6b2:	4413      	add	r3, r2
 800b6b4:	3304      	adds	r3, #4
 800b6b6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800b6b8:	69bb      	ldr	r3, [r7, #24]
 800b6ba:	0c5b      	lsrs	r3, r3, #17
 800b6bc:	f003 030f 	and.w	r3, r3, #15
 800b6c0:	2b02      	cmp	r3, #2
 800b6c2:	d124      	bne.n	800b70e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800b6c4:	69ba      	ldr	r2, [r7, #24]
 800b6c6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800b6ca:	4013      	ands	r3, r2
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d035      	beq.n	800b73c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800b6d4:	69bb      	ldr	r3, [r7, #24]
 800b6d6:	091b      	lsrs	r3, r3, #4
 800b6d8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b6da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b6de:	b29b      	uxth	r3, r3
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	6a38      	ldr	r0, [r7, #32]
 800b6e4:	f004 f836 	bl	800f754 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	68da      	ldr	r2, [r3, #12]
 800b6ec:	69bb      	ldr	r3, [r7, #24]
 800b6ee:	091b      	lsrs	r3, r3, #4
 800b6f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b6f4:	441a      	add	r2, r3
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	699a      	ldr	r2, [r3, #24]
 800b6fe:	69bb      	ldr	r3, [r7, #24]
 800b700:	091b      	lsrs	r3, r3, #4
 800b702:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b706:	441a      	add	r2, r3
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	619a      	str	r2, [r3, #24]
 800b70c:	e016      	b.n	800b73c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800b70e:	69bb      	ldr	r3, [r7, #24]
 800b710:	0c5b      	lsrs	r3, r3, #17
 800b712:	f003 030f 	and.w	r3, r3, #15
 800b716:	2b06      	cmp	r3, #6
 800b718:	d110      	bne.n	800b73c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b720:	2208      	movs	r2, #8
 800b722:	4619      	mov	r1, r3
 800b724:	6a38      	ldr	r0, [r7, #32]
 800b726:	f004 f815 	bl	800f754 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	699a      	ldr	r2, [r3, #24]
 800b72e:	69bb      	ldr	r3, [r7, #24]
 800b730:	091b      	lsrs	r3, r3, #4
 800b732:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b736:	441a      	add	r2, r3
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	699a      	ldr	r2, [r3, #24]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f042 0210 	orr.w	r2, r2, #16
 800b74a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	4618      	mov	r0, r3
 800b752:	f004 f952 	bl	800f9fa <USB_ReadInterrupts>
 800b756:	4603      	mov	r3, r0
 800b758:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b75c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b760:	d16e      	bne.n	800b840 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800b762:	2300      	movs	r3, #0
 800b764:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4618      	mov	r0, r3
 800b76c:	f004 f958 	bl	800fa20 <USB_ReadDevAllOutEpInterrupt>
 800b770:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800b772:	e062      	b.n	800b83a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b776:	f003 0301 	and.w	r3, r3, #1
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d057      	beq.n	800b82e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b784:	b2d2      	uxtb	r2, r2
 800b786:	4611      	mov	r1, r2
 800b788:	4618      	mov	r0, r3
 800b78a:	f004 f97d 	bl	800fa88 <USB_ReadDevOutEPInterrupt>
 800b78e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	f003 0301 	and.w	r3, r3, #1
 800b796:	2b00      	cmp	r3, #0
 800b798:	d00c      	beq.n	800b7b4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b79c:	015a      	lsls	r2, r3, #5
 800b79e:	69fb      	ldr	r3, [r7, #28]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b7ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 fdb0 	bl	800c314 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	f003 0308 	and.w	r3, r3, #8
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d00c      	beq.n	800b7d8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c0:	015a      	lsls	r2, r3, #5
 800b7c2:	69fb      	ldr	r3, [r7, #28]
 800b7c4:	4413      	add	r3, r2
 800b7c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	2308      	movs	r3, #8
 800b7ce:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b7d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 feaa 	bl	800c52c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	f003 0310 	and.w	r3, r3, #16
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d008      	beq.n	800b7f4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e4:	015a      	lsls	r2, r3, #5
 800b7e6:	69fb      	ldr	r3, [r7, #28]
 800b7e8:	4413      	add	r3, r2
 800b7ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	2310      	movs	r3, #16
 800b7f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	f003 0320 	and.w	r3, r3, #32
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d008      	beq.n	800b810 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b800:	015a      	lsls	r2, r3, #5
 800b802:	69fb      	ldr	r3, [r7, #28]
 800b804:	4413      	add	r3, r2
 800b806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b80a:	461a      	mov	r2, r3
 800b80c:	2320      	movs	r3, #32
 800b80e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b816:	2b00      	cmp	r3, #0
 800b818:	d009      	beq.n	800b82e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b81c:	015a      	lsls	r2, r3, #5
 800b81e:	69fb      	ldr	r3, [r7, #28]
 800b820:	4413      	add	r3, r2
 800b822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b826:	461a      	mov	r2, r3
 800b828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b82c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b830:	3301      	adds	r3, #1
 800b832:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b836:	085b      	lsrs	r3, r3, #1
 800b838:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d199      	bne.n	800b774 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4618      	mov	r0, r3
 800b846:	f004 f8d8 	bl	800f9fa <USB_ReadInterrupts>
 800b84a:	4603      	mov	r3, r0
 800b84c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b850:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b854:	f040 80c0 	bne.w	800b9d8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4618      	mov	r0, r3
 800b85e:	f004 f8f9 	bl	800fa54 <USB_ReadDevAllInEpInterrupt>
 800b862:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800b864:	2300      	movs	r3, #0
 800b866:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800b868:	e0b2      	b.n	800b9d0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86c:	f003 0301 	and.w	r3, r3, #1
 800b870:	2b00      	cmp	r3, #0
 800b872:	f000 80a7 	beq.w	800b9c4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b87c:	b2d2      	uxtb	r2, r2
 800b87e:	4611      	mov	r1, r2
 800b880:	4618      	mov	r0, r3
 800b882:	f004 f91f 	bl	800fac4 <USB_ReadDevInEPInterrupt>
 800b886:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	f003 0301 	and.w	r3, r3, #1
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d057      	beq.n	800b942 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b894:	f003 030f 	and.w	r3, r3, #15
 800b898:	2201      	movs	r2, #1
 800b89a:	fa02 f303 	lsl.w	r3, r2, r3
 800b89e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b8a0:	69fb      	ldr	r3, [r7, #28]
 800b8a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	43db      	mvns	r3, r3
 800b8ac:	69f9      	ldr	r1, [r7, #28]
 800b8ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8b2:	4013      	ands	r3, r2
 800b8b4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b8:	015a      	lsls	r2, r3, #5
 800b8ba:	69fb      	ldr	r3, [r7, #28]
 800b8bc:	4413      	add	r3, r2
 800b8be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	691b      	ldr	r3, [r3, #16]
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d132      	bne.n	800b936 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b8d0:	6879      	ldr	r1, [r7, #4]
 800b8d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8d4:	4613      	mov	r3, r2
 800b8d6:	00db      	lsls	r3, r3, #3
 800b8d8:	1a9b      	subs	r3, r3, r2
 800b8da:	009b      	lsls	r3, r3, #2
 800b8dc:	440b      	add	r3, r1
 800b8de:	3348      	adds	r3, #72	; 0x48
 800b8e0:	6819      	ldr	r1, [r3, #0]
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8e6:	4613      	mov	r3, r2
 800b8e8:	00db      	lsls	r3, r3, #3
 800b8ea:	1a9b      	subs	r3, r3, r2
 800b8ec:	009b      	lsls	r3, r3, #2
 800b8ee:	4403      	add	r3, r0
 800b8f0:	3344      	adds	r3, #68	; 0x44
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	4419      	add	r1, r3
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8fa:	4613      	mov	r3, r2
 800b8fc:	00db      	lsls	r3, r3, #3
 800b8fe:	1a9b      	subs	r3, r3, r2
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	4403      	add	r3, r0
 800b904:	3348      	adds	r3, #72	; 0x48
 800b906:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d113      	bne.n	800b936 <HAL_PCD_IRQHandler+0x31c>
 800b90e:	6879      	ldr	r1, [r7, #4]
 800b910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b912:	4613      	mov	r3, r2
 800b914:	00db      	lsls	r3, r3, #3
 800b916:	1a9b      	subs	r3, r3, r2
 800b918:	009b      	lsls	r3, r3, #2
 800b91a:	440b      	add	r3, r1
 800b91c:	3350      	adds	r3, #80	; 0x50
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d108      	bne.n	800b936 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6818      	ldr	r0, [r3, #0]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b92e:	461a      	mov	r2, r3
 800b930:	2101      	movs	r1, #1
 800b932:	f004 f927 	bl	800fb84 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b938:	b2db      	uxtb	r3, r3
 800b93a:	4619      	mov	r1, r3
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f006 f802 	bl	8011946 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	f003 0308 	and.w	r3, r3, #8
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d008      	beq.n	800b95e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94e:	015a      	lsls	r2, r3, #5
 800b950:	69fb      	ldr	r3, [r7, #28]
 800b952:	4413      	add	r3, r2
 800b954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b958:	461a      	mov	r2, r3
 800b95a:	2308      	movs	r3, #8
 800b95c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	f003 0310 	and.w	r3, r3, #16
 800b964:	2b00      	cmp	r3, #0
 800b966:	d008      	beq.n	800b97a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96a:	015a      	lsls	r2, r3, #5
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	4413      	add	r3, r2
 800b970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b974:	461a      	mov	r2, r3
 800b976:	2310      	movs	r3, #16
 800b978:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b980:	2b00      	cmp	r3, #0
 800b982:	d008      	beq.n	800b996 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b986:	015a      	lsls	r2, r3, #5
 800b988:	69fb      	ldr	r3, [r7, #28]
 800b98a:	4413      	add	r3, r2
 800b98c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b990:	461a      	mov	r2, r3
 800b992:	2340      	movs	r3, #64	; 0x40
 800b994:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	f003 0302 	and.w	r3, r3, #2
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d008      	beq.n	800b9b2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a2:	015a      	lsls	r2, r3, #5
 800b9a4:	69fb      	ldr	r3, [r7, #28]
 800b9a6:	4413      	add	r3, r2
 800b9a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	2302      	movs	r3, #2
 800b9b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d003      	beq.n	800b9c4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b9bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f000 fc1b 	bl	800c1fa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9cc:	085b      	lsrs	r3, r3, #1
 800b9ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	f47f af49 	bne.w	800b86a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f004 f80c 	bl	800f9fa <USB_ReadInterrupts>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b9e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b9ec:	d122      	bne.n	800ba34 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b9ee:	69fb      	ldr	r3, [r7, #28]
 800b9f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	69fa      	ldr	r2, [r7, #28]
 800b9f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b9fc:	f023 0301 	bic.w	r3, r3, #1
 800ba00:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d108      	bne.n	800ba1e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800ba14:	2100      	movs	r1, #0
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f000 fe26 	bl	800c668 <HAL_PCDEx_LPM_Callback>
 800ba1c:	e002      	b.n	800ba24 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f006 f808 	bl	8011a34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	695a      	ldr	r2, [r3, #20]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800ba32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f003 ffde 	bl	800f9fa <USB_ReadInterrupts>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba48:	d112      	bne.n	800ba70 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800ba4a:	69fb      	ldr	r3, [r7, #28]
 800ba4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba50:	689b      	ldr	r3, [r3, #8]
 800ba52:	f003 0301 	and.w	r3, r3, #1
 800ba56:	2b01      	cmp	r3, #1
 800ba58:	d102      	bne.n	800ba60 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f005 ffc4 	bl	80119e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	695a      	ldr	r2, [r3, #20]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800ba6e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	4618      	mov	r0, r3
 800ba76:	f003 ffc0 	bl	800f9fa <USB_ReadInterrupts>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ba80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba84:	f040 80c7 	bne.w	800bc16 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ba88:	69fb      	ldr	r3, [r7, #28]
 800ba8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	69fa      	ldr	r2, [r7, #28]
 800ba92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba96:	f023 0301 	bic.w	r3, r3, #1
 800ba9a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	2110      	movs	r1, #16
 800baa2:	4618      	mov	r0, r3
 800baa4:	f003 f8a0 	bl	800ebe8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800baa8:	2300      	movs	r3, #0
 800baaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800baac:	e056      	b.n	800bb5c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800baae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab0:	015a      	lsls	r2, r3, #5
 800bab2:	69fb      	ldr	r3, [r7, #28]
 800bab4:	4413      	add	r3, r2
 800bab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baba:	461a      	mov	r2, r3
 800babc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bac0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac4:	015a      	lsls	r2, r3, #5
 800bac6:	69fb      	ldr	r3, [r7, #28]
 800bac8:	4413      	add	r3, r2
 800baca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bad2:	0151      	lsls	r1, r2, #5
 800bad4:	69fa      	ldr	r2, [r7, #28]
 800bad6:	440a      	add	r2, r1
 800bad8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800badc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bae0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae4:	015a      	lsls	r2, r3, #5
 800bae6:	69fb      	ldr	r3, [r7, #28]
 800bae8:	4413      	add	r3, r2
 800baea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800baf2:	0151      	lsls	r1, r2, #5
 800baf4:	69fa      	ldr	r2, [r7, #28]
 800baf6:	440a      	add	r2, r1
 800baf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bafc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bb00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800bb02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb04:	015a      	lsls	r2, r3, #5
 800bb06:	69fb      	ldr	r3, [r7, #28]
 800bb08:	4413      	add	r3, r2
 800bb0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb0e:	461a      	mov	r2, r3
 800bb10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bb14:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bb16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb18:	015a      	lsls	r2, r3, #5
 800bb1a:	69fb      	ldr	r3, [r7, #28]
 800bb1c:	4413      	add	r3, r2
 800bb1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb26:	0151      	lsls	r1, r2, #5
 800bb28:	69fa      	ldr	r2, [r7, #28]
 800bb2a:	440a      	add	r2, r1
 800bb2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bb34:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bb36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb38:	015a      	lsls	r2, r3, #5
 800bb3a:	69fb      	ldr	r3, [r7, #28]
 800bb3c:	4413      	add	r3, r2
 800bb3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb46:	0151      	lsls	r1, r2, #5
 800bb48:	69fa      	ldr	r2, [r7, #28]
 800bb4a:	440a      	add	r2, r1
 800bb4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bb54:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bb56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb58:	3301      	adds	r3, #1
 800bb5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	685b      	ldr	r3, [r3, #4]
 800bb60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d3a3      	bcc.n	800baae <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800bb66:	69fb      	ldr	r3, [r7, #28]
 800bb68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb6c:	69db      	ldr	r3, [r3, #28]
 800bb6e:	69fa      	ldr	r2, [r7, #28]
 800bb70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb74:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800bb78:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d016      	beq.n	800bbb0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800bb82:	69fb      	ldr	r3, [r7, #28]
 800bb84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb8c:	69fa      	ldr	r2, [r7, #28]
 800bb8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb92:	f043 030b 	orr.w	r3, r3, #11
 800bb96:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800bb9a:	69fb      	ldr	r3, [r7, #28]
 800bb9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bba2:	69fa      	ldr	r2, [r7, #28]
 800bba4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bba8:	f043 030b 	orr.w	r3, r3, #11
 800bbac:	6453      	str	r3, [r2, #68]	; 0x44
 800bbae:	e015      	b.n	800bbdc <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800bbb0:	69fb      	ldr	r3, [r7, #28]
 800bbb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbb6:	695b      	ldr	r3, [r3, #20]
 800bbb8:	69fa      	ldr	r2, [r7, #28]
 800bbba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbbe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bbc2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800bbc6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800bbc8:	69fb      	ldr	r3, [r7, #28]
 800bbca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbce:	691b      	ldr	r3, [r3, #16]
 800bbd0:	69fa      	ldr	r2, [r7, #28]
 800bbd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbd6:	f043 030b 	orr.w	r3, r3, #11
 800bbda:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800bbdc:	69fb      	ldr	r3, [r7, #28]
 800bbde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	69fa      	ldr	r2, [r7, #28]
 800bbe6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bbee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6818      	ldr	r0, [r3, #0]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	691b      	ldr	r3, [r3, #16]
 800bbf8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800bc00:	461a      	mov	r2, r3
 800bc02:	f003 ffbf 	bl	800fb84 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	695a      	ldr	r2, [r3, #20]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800bc14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f003 feed 	bl	800f9fa <USB_ReadInterrupts>
 800bc20:	4603      	mov	r3, r0
 800bc22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc2a:	d124      	bne.n	800bc76 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	4618      	mov	r0, r3
 800bc32:	f003 ff83 	bl	800fb3c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f003 f835 	bl	800ecaa <USB_GetDevSpeed>
 800bc40:	4603      	mov	r3, r0
 800bc42:	461a      	mov	r2, r3
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681c      	ldr	r4, [r3, #0]
 800bc4c:	f001 f944 	bl	800ced8 <HAL_RCC_GetHCLKFreq>
 800bc50:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bc56:	b2db      	uxtb	r3, r3
 800bc58:	461a      	mov	r2, r3
 800bc5a:	4620      	mov	r0, r4
 800bc5c:	f002 fd72 	bl	800e744 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f005 fe98 	bl	8011996 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	695a      	ldr	r2, [r3, #20]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800bc74:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f003 febd 	bl	800f9fa <USB_ReadInterrupts>
 800bc80:	4603      	mov	r3, r0
 800bc82:	f003 0308 	and.w	r3, r3, #8
 800bc86:	2b08      	cmp	r3, #8
 800bc88:	d10a      	bne.n	800bca0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f005 fe75 	bl	801197a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	695a      	ldr	r2, [r3, #20]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f002 0208 	and.w	r2, r2, #8
 800bc9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4618      	mov	r0, r3
 800bca6:	f003 fea8 	bl	800f9fa <USB_ReadInterrupts>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bcb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcb4:	d10f      	bne.n	800bcd6 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800bcba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f005 fed7 	bl	8011a74 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	695a      	ldr	r2, [r3, #20]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800bcd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f003 fe8d 	bl	800f9fa <USB_ReadInterrupts>
 800bce0:	4603      	mov	r3, r0
 800bce2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bce6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bcea:	d10f      	bne.n	800bd0c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800bcec:	2300      	movs	r3, #0
 800bcee:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800bcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf2:	b2db      	uxtb	r3, r3
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f005 feaa 	bl	8011a50 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	695a      	ldr	r2, [r3, #20]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800bd0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4618      	mov	r0, r3
 800bd12:	f003 fe72 	bl	800f9fa <USB_ReadInterrupts>
 800bd16:	4603      	mov	r3, r0
 800bd18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bd1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd20:	d10a      	bne.n	800bd38 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f005 feb8 	bl	8011a98 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	695a      	ldr	r2, [r3, #20]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800bd36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f003 fe5c 	bl	800f9fa <USB_ReadInterrupts>
 800bd42:	4603      	mov	r3, r0
 800bd44:	f003 0304 	and.w	r3, r3, #4
 800bd48:	2b04      	cmp	r3, #4
 800bd4a:	d115      	bne.n	800bd78 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	685b      	ldr	r3, [r3, #4]
 800bd52:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800bd54:	69bb      	ldr	r3, [r7, #24]
 800bd56:	f003 0304 	and.w	r3, r3, #4
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d002      	beq.n	800bd64 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f005 fea8 	bl	8011ab4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	6859      	ldr	r1, [r3, #4]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	69ba      	ldr	r2, [r7, #24]
 800bd70:	430a      	orrs	r2, r1
 800bd72:	605a      	str	r2, [r3, #4]
 800bd74:	e000      	b.n	800bd78 <HAL_PCD_IRQHandler+0x75e>
      return;
 800bd76:	bf00      	nop
    }
  }
}
 800bd78:	3734      	adds	r7, #52	; 0x34
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd90      	pop	{r4, r7, pc}

0800bd7e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800bd7e:	b580      	push	{r7, lr}
 800bd80:	b082      	sub	sp, #8
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	6078      	str	r0, [r7, #4]
 800bd86:	460b      	mov	r3, r1
 800bd88:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800bd90:	2b01      	cmp	r3, #1
 800bd92:	d101      	bne.n	800bd98 <HAL_PCD_SetAddress+0x1a>
 800bd94:	2302      	movs	r3, #2
 800bd96:	e013      	b.n	800bdc0 <HAL_PCD_SetAddress+0x42>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	78fa      	ldrb	r2, [r7, #3]
 800bda4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	78fa      	ldrb	r2, [r7, #3]
 800bdae:	4611      	mov	r1, r2
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f003 fdcc 	bl	800f94e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800bdbe:	2300      	movs	r3, #0
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3708      	adds	r7, #8
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b084      	sub	sp, #16
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	4608      	mov	r0, r1
 800bdd2:	4611      	mov	r1, r2
 800bdd4:	461a      	mov	r2, r3
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	70fb      	strb	r3, [r7, #3]
 800bdda:	460b      	mov	r3, r1
 800bddc:	803b      	strh	r3, [r7, #0]
 800bdde:	4613      	mov	r3, r2
 800bde0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800bde2:	2300      	movs	r3, #0
 800bde4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800bde6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	da0f      	bge.n	800be0e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bdee:	78fb      	ldrb	r3, [r7, #3]
 800bdf0:	f003 020f 	and.w	r2, r3, #15
 800bdf4:	4613      	mov	r3, r2
 800bdf6:	00db      	lsls	r3, r3, #3
 800bdf8:	1a9b      	subs	r3, r3, r2
 800bdfa:	009b      	lsls	r3, r3, #2
 800bdfc:	3338      	adds	r3, #56	; 0x38
 800bdfe:	687a      	ldr	r2, [r7, #4]
 800be00:	4413      	add	r3, r2
 800be02:	3304      	adds	r3, #4
 800be04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	2201      	movs	r2, #1
 800be0a:	705a      	strb	r2, [r3, #1]
 800be0c:	e00f      	b.n	800be2e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800be0e:	78fb      	ldrb	r3, [r7, #3]
 800be10:	f003 020f 	and.w	r2, r3, #15
 800be14:	4613      	mov	r3, r2
 800be16:	00db      	lsls	r3, r3, #3
 800be18:	1a9b      	subs	r3, r3, r2
 800be1a:	009b      	lsls	r3, r3, #2
 800be1c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800be20:	687a      	ldr	r2, [r7, #4]
 800be22:	4413      	add	r3, r2
 800be24:	3304      	adds	r3, #4
 800be26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	2200      	movs	r2, #0
 800be2c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800be2e:	78fb      	ldrb	r3, [r7, #3]
 800be30:	f003 030f 	and.w	r3, r3, #15
 800be34:	b2da      	uxtb	r2, r3
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800be3a:	883a      	ldrh	r2, [r7, #0]
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	78ba      	ldrb	r2, [r7, #2]
 800be44:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	785b      	ldrb	r3, [r3, #1]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d004      	beq.n	800be58 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	b29a      	uxth	r2, r3
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800be58:	78bb      	ldrb	r3, [r7, #2]
 800be5a:	2b02      	cmp	r3, #2
 800be5c:	d102      	bne.n	800be64 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2200      	movs	r2, #0
 800be62:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800be6a:	2b01      	cmp	r3, #1
 800be6c:	d101      	bne.n	800be72 <HAL_PCD_EP_Open+0xaa>
 800be6e:	2302      	movs	r3, #2
 800be70:	e00e      	b.n	800be90 <HAL_PCD_EP_Open+0xc8>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2201      	movs	r2, #1
 800be76:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	68f9      	ldr	r1, [r7, #12]
 800be80:	4618      	mov	r0, r3
 800be82:	f002 ff37 	bl	800ecf4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2200      	movs	r2, #0
 800be8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800be8e:	7afb      	ldrb	r3, [r7, #11]
}
 800be90:	4618      	mov	r0, r3
 800be92:	3710      	adds	r7, #16
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	460b      	mov	r3, r1
 800bea2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800bea4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	da0f      	bge.n	800becc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800beac:	78fb      	ldrb	r3, [r7, #3]
 800beae:	f003 020f 	and.w	r2, r3, #15
 800beb2:	4613      	mov	r3, r2
 800beb4:	00db      	lsls	r3, r3, #3
 800beb6:	1a9b      	subs	r3, r3, r2
 800beb8:	009b      	lsls	r3, r3, #2
 800beba:	3338      	adds	r3, #56	; 0x38
 800bebc:	687a      	ldr	r2, [r7, #4]
 800bebe:	4413      	add	r3, r2
 800bec0:	3304      	adds	r3, #4
 800bec2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	2201      	movs	r2, #1
 800bec8:	705a      	strb	r2, [r3, #1]
 800beca:	e00f      	b.n	800beec <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800becc:	78fb      	ldrb	r3, [r7, #3]
 800bece:	f003 020f 	and.w	r2, r3, #15
 800bed2:	4613      	mov	r3, r2
 800bed4:	00db      	lsls	r3, r3, #3
 800bed6:	1a9b      	subs	r3, r3, r2
 800bed8:	009b      	lsls	r3, r3, #2
 800beda:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800bede:	687a      	ldr	r2, [r7, #4]
 800bee0:	4413      	add	r3, r2
 800bee2:	3304      	adds	r3, #4
 800bee4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	2200      	movs	r2, #0
 800beea:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800beec:	78fb      	ldrb	r3, [r7, #3]
 800beee:	f003 030f 	and.w	r3, r3, #15
 800bef2:	b2da      	uxtb	r2, r3
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800befe:	2b01      	cmp	r3, #1
 800bf00:	d101      	bne.n	800bf06 <HAL_PCD_EP_Close+0x6e>
 800bf02:	2302      	movs	r3, #2
 800bf04:	e00e      	b.n	800bf24 <HAL_PCD_EP_Close+0x8c>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2201      	movs	r2, #1
 800bf0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	68f9      	ldr	r1, [r7, #12]
 800bf14:	4618      	mov	r0, r3
 800bf16:	f002 ff75 	bl	800ee04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800bf22:	2300      	movs	r3, #0
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3710      	adds	r7, #16
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b086      	sub	sp, #24
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	60f8      	str	r0, [r7, #12]
 800bf34:	607a      	str	r2, [r7, #4]
 800bf36:	603b      	str	r3, [r7, #0]
 800bf38:	460b      	mov	r3, r1
 800bf3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bf3c:	7afb      	ldrb	r3, [r7, #11]
 800bf3e:	f003 020f 	and.w	r2, r3, #15
 800bf42:	4613      	mov	r3, r2
 800bf44:	00db      	lsls	r3, r3, #3
 800bf46:	1a9b      	subs	r3, r3, r2
 800bf48:	009b      	lsls	r3, r3, #2
 800bf4a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800bf4e:	68fa      	ldr	r2, [r7, #12]
 800bf50:	4413      	add	r3, r2
 800bf52:	3304      	adds	r3, #4
 800bf54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	687a      	ldr	r2, [r7, #4]
 800bf5a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	683a      	ldr	r2, [r7, #0]
 800bf60:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	2200      	movs	r2, #0
 800bf66:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bf6e:	7afb      	ldrb	r3, [r7, #11]
 800bf70:	f003 030f 	and.w	r3, r3, #15
 800bf74:	b2da      	uxtb	r2, r3
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	691b      	ldr	r3, [r3, #16]
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	d102      	bne.n	800bf88 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800bf82:	687a      	ldr	r2, [r7, #4]
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bf88:	7afb      	ldrb	r3, [r7, #11]
 800bf8a:	f003 030f 	and.w	r3, r3, #15
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d109      	bne.n	800bfa6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	6818      	ldr	r0, [r3, #0]
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	691b      	ldr	r3, [r3, #16]
 800bf9a:	b2db      	uxtb	r3, r3
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	6979      	ldr	r1, [r7, #20]
 800bfa0:	f003 fa50 	bl	800f444 <USB_EP0StartXfer>
 800bfa4:	e008      	b.n	800bfb8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	6818      	ldr	r0, [r3, #0]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	691b      	ldr	r3, [r3, #16]
 800bfae:	b2db      	uxtb	r3, r3
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	6979      	ldr	r1, [r7, #20]
 800bfb4:	f003 f802 	bl	800efbc <USB_EPStartXfer>
  }

  return HAL_OK;
 800bfb8:	2300      	movs	r3, #0
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3718      	adds	r7, #24
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}

0800bfc2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bfc2:	b480      	push	{r7}
 800bfc4:	b083      	sub	sp, #12
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	6078      	str	r0, [r7, #4]
 800bfca:	460b      	mov	r3, r1
 800bfcc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800bfce:	78fb      	ldrb	r3, [r7, #3]
 800bfd0:	f003 020f 	and.w	r2, r3, #15
 800bfd4:	6879      	ldr	r1, [r7, #4]
 800bfd6:	4613      	mov	r3, r2
 800bfd8:	00db      	lsls	r3, r3, #3
 800bfda:	1a9b      	subs	r3, r3, r2
 800bfdc:	009b      	lsls	r3, r3, #2
 800bfde:	440b      	add	r3, r1
 800bfe0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800bfe4:	681b      	ldr	r3, [r3, #0]
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	370c      	adds	r7, #12
 800bfea:	46bd      	mov	sp, r7
 800bfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff0:	4770      	bx	lr

0800bff2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bff2:	b580      	push	{r7, lr}
 800bff4:	b086      	sub	sp, #24
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	60f8      	str	r0, [r7, #12]
 800bffa:	607a      	str	r2, [r7, #4]
 800bffc:	603b      	str	r3, [r7, #0]
 800bffe:	460b      	mov	r3, r1
 800c000:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c002:	7afb      	ldrb	r3, [r7, #11]
 800c004:	f003 020f 	and.w	r2, r3, #15
 800c008:	4613      	mov	r3, r2
 800c00a:	00db      	lsls	r3, r3, #3
 800c00c:	1a9b      	subs	r3, r3, r2
 800c00e:	009b      	lsls	r3, r3, #2
 800c010:	3338      	adds	r3, #56	; 0x38
 800c012:	68fa      	ldr	r2, [r7, #12]
 800c014:	4413      	add	r3, r2
 800c016:	3304      	adds	r3, #4
 800c018:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	683a      	ldr	r2, [r7, #0]
 800c024:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	2200      	movs	r2, #0
 800c02a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	2201      	movs	r2, #1
 800c030:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c032:	7afb      	ldrb	r3, [r7, #11]
 800c034:	f003 030f 	and.w	r3, r3, #15
 800c038:	b2da      	uxtb	r2, r3
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	691b      	ldr	r3, [r3, #16]
 800c042:	2b01      	cmp	r3, #1
 800c044:	d102      	bne.n	800c04c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c046:	687a      	ldr	r2, [r7, #4]
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c04c:	7afb      	ldrb	r3, [r7, #11]
 800c04e:	f003 030f 	and.w	r3, r3, #15
 800c052:	2b00      	cmp	r3, #0
 800c054:	d109      	bne.n	800c06a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	6818      	ldr	r0, [r3, #0]
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	691b      	ldr	r3, [r3, #16]
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	461a      	mov	r2, r3
 800c062:	6979      	ldr	r1, [r7, #20]
 800c064:	f003 f9ee 	bl	800f444 <USB_EP0StartXfer>
 800c068:	e008      	b.n	800c07c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	6818      	ldr	r0, [r3, #0]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	691b      	ldr	r3, [r3, #16]
 800c072:	b2db      	uxtb	r3, r3
 800c074:	461a      	mov	r2, r3
 800c076:	6979      	ldr	r1, [r7, #20]
 800c078:	f002 ffa0 	bl	800efbc <USB_EPStartXfer>
  }

  return HAL_OK;
 800c07c:	2300      	movs	r3, #0
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3718      	adds	r7, #24
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}

0800c086 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c086:	b580      	push	{r7, lr}
 800c088:	b084      	sub	sp, #16
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
 800c08e:	460b      	mov	r3, r1
 800c090:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c092:	78fb      	ldrb	r3, [r7, #3]
 800c094:	f003 020f 	and.w	r2, r3, #15
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	685b      	ldr	r3, [r3, #4]
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d901      	bls.n	800c0a4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	e050      	b.n	800c146 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c0a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	da0f      	bge.n	800c0cc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c0ac:	78fb      	ldrb	r3, [r7, #3]
 800c0ae:	f003 020f 	and.w	r2, r3, #15
 800c0b2:	4613      	mov	r3, r2
 800c0b4:	00db      	lsls	r3, r3, #3
 800c0b6:	1a9b      	subs	r3, r3, r2
 800c0b8:	009b      	lsls	r3, r3, #2
 800c0ba:	3338      	adds	r3, #56	; 0x38
 800c0bc:	687a      	ldr	r2, [r7, #4]
 800c0be:	4413      	add	r3, r2
 800c0c0:	3304      	adds	r3, #4
 800c0c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	705a      	strb	r2, [r3, #1]
 800c0ca:	e00d      	b.n	800c0e8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c0cc:	78fa      	ldrb	r2, [r7, #3]
 800c0ce:	4613      	mov	r3, r2
 800c0d0:	00db      	lsls	r3, r3, #3
 800c0d2:	1a9b      	subs	r3, r3, r2
 800c0d4:	009b      	lsls	r3, r3, #2
 800c0d6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c0da:	687a      	ldr	r2, [r7, #4]
 800c0dc:	4413      	add	r3, r2
 800c0de:	3304      	adds	r3, #4
 800c0e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c0ee:	78fb      	ldrb	r3, [r7, #3]
 800c0f0:	f003 030f 	and.w	r3, r3, #15
 800c0f4:	b2da      	uxtb	r2, r3
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c100:	2b01      	cmp	r3, #1
 800c102:	d101      	bne.n	800c108 <HAL_PCD_EP_SetStall+0x82>
 800c104:	2302      	movs	r3, #2
 800c106:	e01e      	b.n	800c146 <HAL_PCD_EP_SetStall+0xc0>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2201      	movs	r2, #1
 800c10c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	68f9      	ldr	r1, [r7, #12]
 800c116:	4618      	mov	r0, r3
 800c118:	f003 fb45 	bl	800f7a6 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c11c:	78fb      	ldrb	r3, [r7, #3]
 800c11e:	f003 030f 	and.w	r3, r3, #15
 800c122:	2b00      	cmp	r3, #0
 800c124:	d10a      	bne.n	800c13c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6818      	ldr	r0, [r3, #0]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	691b      	ldr	r3, [r3, #16]
 800c12e:	b2d9      	uxtb	r1, r3
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c136:	461a      	mov	r2, r3
 800c138:	f003 fd24 	bl	800fb84 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2200      	movs	r2, #0
 800c140:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c144:	2300      	movs	r3, #0
}
 800c146:	4618      	mov	r0, r3
 800c148:	3710      	adds	r7, #16
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}

0800c14e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c14e:	b580      	push	{r7, lr}
 800c150:	b084      	sub	sp, #16
 800c152:	af00      	add	r7, sp, #0
 800c154:	6078      	str	r0, [r7, #4]
 800c156:	460b      	mov	r3, r1
 800c158:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c15a:	78fb      	ldrb	r3, [r7, #3]
 800c15c:	f003 020f 	and.w	r2, r3, #15
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	429a      	cmp	r2, r3
 800c166:	d901      	bls.n	800c16c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c168:	2301      	movs	r3, #1
 800c16a:	e042      	b.n	800c1f2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c16c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c170:	2b00      	cmp	r3, #0
 800c172:	da0f      	bge.n	800c194 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c174:	78fb      	ldrb	r3, [r7, #3]
 800c176:	f003 020f 	and.w	r2, r3, #15
 800c17a:	4613      	mov	r3, r2
 800c17c:	00db      	lsls	r3, r3, #3
 800c17e:	1a9b      	subs	r3, r3, r2
 800c180:	009b      	lsls	r3, r3, #2
 800c182:	3338      	adds	r3, #56	; 0x38
 800c184:	687a      	ldr	r2, [r7, #4]
 800c186:	4413      	add	r3, r2
 800c188:	3304      	adds	r3, #4
 800c18a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2201      	movs	r2, #1
 800c190:	705a      	strb	r2, [r3, #1]
 800c192:	e00f      	b.n	800c1b4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c194:	78fb      	ldrb	r3, [r7, #3]
 800c196:	f003 020f 	and.w	r2, r3, #15
 800c19a:	4613      	mov	r3, r2
 800c19c:	00db      	lsls	r3, r3, #3
 800c19e:	1a9b      	subs	r3, r3, r2
 800c1a0:	009b      	lsls	r3, r3, #2
 800c1a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	4413      	add	r3, r2
 800c1aa:	3304      	adds	r3, #4
 800c1ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c1ba:	78fb      	ldrb	r3, [r7, #3]
 800c1bc:	f003 030f 	and.w	r3, r3, #15
 800c1c0:	b2da      	uxtb	r2, r3
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	d101      	bne.n	800c1d4 <HAL_PCD_EP_ClrStall+0x86>
 800c1d0:	2302      	movs	r3, #2
 800c1d2:	e00e      	b.n	800c1f2 <HAL_PCD_EP_ClrStall+0xa4>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	68f9      	ldr	r1, [r7, #12]
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f003 fb4d 	bl	800f882 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800c1f0:	2300      	movs	r3, #0
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3710      	adds	r7, #16
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}

0800c1fa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c1fa:	b580      	push	{r7, lr}
 800c1fc:	b08a      	sub	sp, #40	; 0x28
 800c1fe:	af02      	add	r7, sp, #8
 800c200:	6078      	str	r0, [r7, #4]
 800c202:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800c20e:	683a      	ldr	r2, [r7, #0]
 800c210:	4613      	mov	r3, r2
 800c212:	00db      	lsls	r3, r3, #3
 800c214:	1a9b      	subs	r3, r3, r2
 800c216:	009b      	lsls	r3, r3, #2
 800c218:	3338      	adds	r3, #56	; 0x38
 800c21a:	687a      	ldr	r2, [r7, #4]
 800c21c:	4413      	add	r3, r2
 800c21e:	3304      	adds	r3, #4
 800c220:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	699a      	ldr	r2, [r3, #24]
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	695b      	ldr	r3, [r3, #20]
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d901      	bls.n	800c232 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800c22e:	2301      	movs	r3, #1
 800c230:	e06c      	b.n	800c30c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	695a      	ldr	r2, [r3, #20]
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	699b      	ldr	r3, [r3, #24]
 800c23a:	1ad3      	subs	r3, r2, r3
 800c23c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	689b      	ldr	r3, [r3, #8]
 800c242:	69fa      	ldr	r2, [r7, #28]
 800c244:	429a      	cmp	r2, r3
 800c246:	d902      	bls.n	800c24e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	689b      	ldr	r3, [r3, #8]
 800c24c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800c24e:	69fb      	ldr	r3, [r7, #28]
 800c250:	3303      	adds	r3, #3
 800c252:	089b      	lsrs	r3, r3, #2
 800c254:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c256:	e02b      	b.n	800c2b0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	695a      	ldr	r2, [r3, #20]
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	699b      	ldr	r3, [r3, #24]
 800c260:	1ad3      	subs	r3, r2, r3
 800c262:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	689b      	ldr	r3, [r3, #8]
 800c268:	69fa      	ldr	r2, [r7, #28]
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d902      	bls.n	800c274 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	689b      	ldr	r3, [r3, #8]
 800c272:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800c274:	69fb      	ldr	r3, [r7, #28]
 800c276:	3303      	adds	r3, #3
 800c278:	089b      	lsrs	r3, r3, #2
 800c27a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	68d9      	ldr	r1, [r3, #12]
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	b2da      	uxtb	r2, r3
 800c284:	69fb      	ldr	r3, [r7, #28]
 800c286:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c28c:	b2db      	uxtb	r3, r3
 800c28e:	9300      	str	r3, [sp, #0]
 800c290:	4603      	mov	r3, r0
 800c292:	6978      	ldr	r0, [r7, #20]
 800c294:	f003 fa29 	bl	800f6ea <USB_WritePacket>

    ep->xfer_buff  += len;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	68da      	ldr	r2, [r3, #12]
 800c29c:	69fb      	ldr	r3, [r7, #28]
 800c29e:	441a      	add	r2, r3
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	699a      	ldr	r2, [r3, #24]
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	441a      	add	r2, r3
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	015a      	lsls	r2, r3, #5
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	4413      	add	r3, r2
 800c2b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2bc:	699b      	ldr	r3, [r3, #24]
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	69ba      	ldr	r2, [r7, #24]
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d809      	bhi.n	800c2da <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	699a      	ldr	r2, [r3, #24]
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d203      	bcs.n	800c2da <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	695b      	ldr	r3, [r3, #20]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d1be      	bne.n	800c258 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	695a      	ldr	r2, [r3, #20]
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	699b      	ldr	r3, [r3, #24]
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d811      	bhi.n	800c30a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	f003 030f 	and.w	r3, r3, #15
 800c2ec:	2201      	movs	r2, #1
 800c2ee:	fa02 f303 	lsl.w	r3, r2, r3
 800c2f2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	43db      	mvns	r3, r3
 800c300:	6939      	ldr	r1, [r7, #16]
 800c302:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c306:	4013      	ands	r3, r2
 800c308:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800c30a:	2300      	movs	r3, #0
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3720      	adds	r7, #32
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}

0800c314 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b086      	sub	sp, #24
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	333c      	adds	r3, #60	; 0x3c
 800c32c:	3304      	adds	r3, #4
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	015a      	lsls	r2, r3, #5
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	4413      	add	r3, r2
 800c33a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c33e:	689b      	ldr	r3, [r3, #8]
 800c340:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	691b      	ldr	r3, [r3, #16]
 800c346:	2b01      	cmp	r3, #1
 800c348:	f040 80a0 	bne.w	800c48c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	f003 0308 	and.w	r3, r3, #8
 800c352:	2b00      	cmp	r3, #0
 800c354:	d015      	beq.n	800c382 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	4a72      	ldr	r2, [pc, #456]	; (800c524 <PCD_EP_OutXfrComplete_int+0x210>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	f240 80dd 	bls.w	800c51a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c366:	2b00      	cmp	r3, #0
 800c368:	f000 80d7 	beq.w	800c51a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	015a      	lsls	r2, r3, #5
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	4413      	add	r3, r2
 800c374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c378:	461a      	mov	r2, r3
 800c37a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c37e:	6093      	str	r3, [r2, #8]
 800c380:	e0cb      	b.n	800c51a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	f003 0320 	and.w	r3, r3, #32
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d009      	beq.n	800c3a0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	015a      	lsls	r2, r3, #5
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	4413      	add	r3, r2
 800c394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c398:	461a      	mov	r2, r3
 800c39a:	2320      	movs	r3, #32
 800c39c:	6093      	str	r3, [r2, #8]
 800c39e:	e0bc      	b.n	800c51a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	f040 80b7 	bne.w	800c51a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	4a5d      	ldr	r2, [pc, #372]	; (800c524 <PCD_EP_OutXfrComplete_int+0x210>)
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d90f      	bls.n	800c3d4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d00a      	beq.n	800c3d4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	015a      	lsls	r2, r3, #5
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	4413      	add	r3, r2
 800c3c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3ca:	461a      	mov	r2, r3
 800c3cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c3d0:	6093      	str	r3, [r2, #8]
 800c3d2:	e0a2      	b.n	800c51a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800c3d4:	6879      	ldr	r1, [r7, #4]
 800c3d6:	683a      	ldr	r2, [r7, #0]
 800c3d8:	4613      	mov	r3, r2
 800c3da:	00db      	lsls	r3, r3, #3
 800c3dc:	1a9b      	subs	r3, r3, r2
 800c3de:	009b      	lsls	r3, r3, #2
 800c3e0:	440b      	add	r3, r1
 800c3e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c3e6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	0159      	lsls	r1, r3, #5
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	440b      	add	r3, r1
 800c3f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3f4:	691b      	ldr	r3, [r3, #16]
 800c3f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800c3fa:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	683a      	ldr	r2, [r7, #0]
 800c400:	4613      	mov	r3, r2
 800c402:	00db      	lsls	r3, r3, #3
 800c404:	1a9b      	subs	r3, r3, r2
 800c406:	009b      	lsls	r3, r3, #2
 800c408:	4403      	add	r3, r0
 800c40a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800c40e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800c410:	6879      	ldr	r1, [r7, #4]
 800c412:	683a      	ldr	r2, [r7, #0]
 800c414:	4613      	mov	r3, r2
 800c416:	00db      	lsls	r3, r3, #3
 800c418:	1a9b      	subs	r3, r3, r2
 800c41a:	009b      	lsls	r3, r3, #2
 800c41c:	440b      	add	r3, r1
 800c41e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c422:	6819      	ldr	r1, [r3, #0]
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	683a      	ldr	r2, [r7, #0]
 800c428:	4613      	mov	r3, r2
 800c42a:	00db      	lsls	r3, r3, #3
 800c42c:	1a9b      	subs	r3, r3, r2
 800c42e:	009b      	lsls	r3, r3, #2
 800c430:	4403      	add	r3, r0
 800c432:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4419      	add	r1, r3
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	683a      	ldr	r2, [r7, #0]
 800c43e:	4613      	mov	r3, r2
 800c440:	00db      	lsls	r3, r3, #3
 800c442:	1a9b      	subs	r3, r3, r2
 800c444:	009b      	lsls	r3, r3, #2
 800c446:	4403      	add	r3, r0
 800c448:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c44c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d114      	bne.n	800c47e <PCD_EP_OutXfrComplete_int+0x16a>
 800c454:	6879      	ldr	r1, [r7, #4]
 800c456:	683a      	ldr	r2, [r7, #0]
 800c458:	4613      	mov	r3, r2
 800c45a:	00db      	lsls	r3, r3, #3
 800c45c:	1a9b      	subs	r3, r3, r2
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	440b      	add	r3, r1
 800c462:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d108      	bne.n	800c47e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6818      	ldr	r0, [r3, #0]
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c476:	461a      	mov	r2, r3
 800c478:	2101      	movs	r1, #1
 800c47a:	f003 fb83 	bl	800fb84 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	b2db      	uxtb	r3, r3
 800c482:	4619      	mov	r1, r3
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f005 fa43 	bl	8011910 <HAL_PCD_DataOutStageCallback>
 800c48a:	e046      	b.n	800c51a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	4a26      	ldr	r2, [pc, #152]	; (800c528 <PCD_EP_OutXfrComplete_int+0x214>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d124      	bne.n	800c4de <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d00a      	beq.n	800c4b4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	015a      	lsls	r2, r3, #5
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	4413      	add	r3, r2
 800c4a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4aa:	461a      	mov	r2, r3
 800c4ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4b0:	6093      	str	r3, [r2, #8]
 800c4b2:	e032      	b.n	800c51a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	f003 0320 	and.w	r3, r3, #32
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d008      	beq.n	800c4d0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	015a      	lsls	r2, r3, #5
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	4413      	add	r3, r2
 800c4c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4ca:	461a      	mov	r2, r3
 800c4cc:	2320      	movs	r3, #32
 800c4ce:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	b2db      	uxtb	r3, r3
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f005 fa1a 	bl	8011910 <HAL_PCD_DataOutStageCallback>
 800c4dc:	e01d      	b.n	800c51a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d114      	bne.n	800c50e <PCD_EP_OutXfrComplete_int+0x1fa>
 800c4e4:	6879      	ldr	r1, [r7, #4]
 800c4e6:	683a      	ldr	r2, [r7, #0]
 800c4e8:	4613      	mov	r3, r2
 800c4ea:	00db      	lsls	r3, r3, #3
 800c4ec:	1a9b      	subs	r3, r3, r2
 800c4ee:	009b      	lsls	r3, r3, #2
 800c4f0:	440b      	add	r3, r1
 800c4f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d108      	bne.n	800c50e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6818      	ldr	r0, [r3, #0]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c506:	461a      	mov	r2, r3
 800c508:	2100      	movs	r1, #0
 800c50a:	f003 fb3b 	bl	800fb84 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	b2db      	uxtb	r3, r3
 800c512:	4619      	mov	r1, r3
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f005 f9fb 	bl	8011910 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800c51a:	2300      	movs	r3, #0
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3718      	adds	r7, #24
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}
 800c524:	4f54300a 	.word	0x4f54300a
 800c528:	4f54310a 	.word	0x4f54310a

0800c52c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b086      	sub	sp, #24
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	333c      	adds	r3, #60	; 0x3c
 800c544:	3304      	adds	r3, #4
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	015a      	lsls	r2, r3, #5
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	4413      	add	r3, r2
 800c552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c556:	689b      	ldr	r3, [r3, #8]
 800c558:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	4a15      	ldr	r2, [pc, #84]	; (800c5b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d90e      	bls.n	800c580 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d009      	beq.n	800c580 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	015a      	lsls	r2, r3, #5
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	4413      	add	r3, r2
 800c574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c578:	461a      	mov	r2, r3
 800c57a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c57e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f005 f9b3 	bl	80118ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	4a0a      	ldr	r2, [pc, #40]	; (800c5b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d90c      	bls.n	800c5a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	691b      	ldr	r3, [r3, #16]
 800c592:	2b01      	cmp	r3, #1
 800c594:	d108      	bne.n	800c5a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6818      	ldr	r0, [r3, #0]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	2101      	movs	r1, #1
 800c5a4:	f003 faee 	bl	800fb84 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800c5a8:	2300      	movs	r3, #0
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3718      	adds	r7, #24
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
 800c5b2:	bf00      	nop
 800c5b4:	4f54300a 	.word	0x4f54300a

0800c5b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b085      	sub	sp, #20
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
 800c5c0:	460b      	mov	r3, r1
 800c5c2:	70fb      	strb	r3, [r7, #3]
 800c5c4:	4613      	mov	r3, r2
 800c5c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800c5d0:	78fb      	ldrb	r3, [r7, #3]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d107      	bne.n	800c5e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c5d6:	883b      	ldrh	r3, [r7, #0]
 800c5d8:	0419      	lsls	r1, r3, #16
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	68ba      	ldr	r2, [r7, #8]
 800c5e0:	430a      	orrs	r2, r1
 800c5e2:	629a      	str	r2, [r3, #40]	; 0x28
 800c5e4:	e028      	b.n	800c638 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ec:	0c1b      	lsrs	r3, r3, #16
 800c5ee:	68ba      	ldr	r2, [r7, #8]
 800c5f0:	4413      	add	r3, r2
 800c5f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	73fb      	strb	r3, [r7, #15]
 800c5f8:	e00d      	b.n	800c616 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681a      	ldr	r2, [r3, #0]
 800c5fe:	7bfb      	ldrb	r3, [r7, #15]
 800c600:	3340      	adds	r3, #64	; 0x40
 800c602:	009b      	lsls	r3, r3, #2
 800c604:	4413      	add	r3, r2
 800c606:	685b      	ldr	r3, [r3, #4]
 800c608:	0c1b      	lsrs	r3, r3, #16
 800c60a:	68ba      	ldr	r2, [r7, #8]
 800c60c:	4413      	add	r3, r2
 800c60e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c610:	7bfb      	ldrb	r3, [r7, #15]
 800c612:	3301      	adds	r3, #1
 800c614:	73fb      	strb	r3, [r7, #15]
 800c616:	7bfa      	ldrb	r2, [r7, #15]
 800c618:	78fb      	ldrb	r3, [r7, #3]
 800c61a:	3b01      	subs	r3, #1
 800c61c:	429a      	cmp	r2, r3
 800c61e:	d3ec      	bcc.n	800c5fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c620:	883b      	ldrh	r3, [r7, #0]
 800c622:	0418      	lsls	r0, r3, #16
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6819      	ldr	r1, [r3, #0]
 800c628:	78fb      	ldrb	r3, [r7, #3]
 800c62a:	3b01      	subs	r3, #1
 800c62c:	68ba      	ldr	r2, [r7, #8]
 800c62e:	4302      	orrs	r2, r0
 800c630:	3340      	adds	r3, #64	; 0x40
 800c632:	009b      	lsls	r3, r3, #2
 800c634:	440b      	add	r3, r1
 800c636:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c638:	2300      	movs	r3, #0
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3714      	adds	r7, #20
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr

0800c646 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c646:	b480      	push	{r7}
 800c648:	b083      	sub	sp, #12
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	6078      	str	r0, [r7, #4]
 800c64e:	460b      	mov	r3, r1
 800c650:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	887a      	ldrh	r2, [r7, #2]
 800c658:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800c65a:	2300      	movs	r3, #0
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	370c      	adds	r7, #12
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr

0800c668 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c668:	b480      	push	{r7}
 800c66a:	b083      	sub	sp, #12
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
 800c670:	460b      	mov	r3, r1
 800c672:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c674:	bf00      	nop
 800c676:	370c      	adds	r7, #12
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr

0800c680 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b086      	sub	sp, #24
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d101      	bne.n	800c692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c68e:	2301      	movs	r3, #1
 800c690:	e25b      	b.n	800cb4a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f003 0301 	and.w	r3, r3, #1
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d075      	beq.n	800c78a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c69e:	4ba3      	ldr	r3, [pc, #652]	; (800c92c <HAL_RCC_OscConfig+0x2ac>)
 800c6a0:	689b      	ldr	r3, [r3, #8]
 800c6a2:	f003 030c 	and.w	r3, r3, #12
 800c6a6:	2b04      	cmp	r3, #4
 800c6a8:	d00c      	beq.n	800c6c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c6aa:	4ba0      	ldr	r3, [pc, #640]	; (800c92c <HAL_RCC_OscConfig+0x2ac>)
 800c6ac:	689b      	ldr	r3, [r3, #8]
 800c6ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c6b2:	2b08      	cmp	r3, #8
 800c6b4:	d112      	bne.n	800c6dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c6b6:	4b9d      	ldr	r3, [pc, #628]	; (800c92c <HAL_RCC_OscConfig+0x2ac>)
 800c6b8:	685b      	ldr	r3, [r3, #4]
 800c6ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c6c2:	d10b      	bne.n	800c6dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c6c4:	4b99      	ldr	r3, [pc, #612]	; (800c92c <HAL_RCC_OscConfig+0x2ac>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d05b      	beq.n	800c788 <HAL_RCC_OscConfig+0x108>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	685b      	ldr	r3, [r3, #4]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d157      	bne.n	800c788 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c6d8:	2301      	movs	r3, #1
 800c6da:	e236      	b.n	800cb4a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6e4:	d106      	bne.n	800c6f4 <HAL_RCC_OscConfig+0x74>
 800c6e6:	4b91      	ldr	r3, [pc, #580]	; (800c92c <HAL_RCC_OscConfig+0x2ac>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4a90      	ldr	r2, [pc, #576]	; (800c92c <HAL_RCC_OscConfig+0x2ac>)
 800c6ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c6f0:	6013      	str	r3, [r2, #0]
 800c6f2:	e01d      	b.n	800c730 <HAL_RCC_OscConfig+0xb0>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	685b      	ldr	r3, [r3, #4]
 800c6f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c6fc:	d10c      	bne.n	800c718 <HAL_RCC_OscConfig+0x98>
 800c6fe:	4b8b      	ldr	r3, [pc, #556]	; (800c92c <HAL_RCC_OscConfig+0x2ac>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4a8a      	ldr	r2, [pc, #552]	; (800c92c <HAL_RCC_OscConfig+0x2ac>)
 800c704:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c708:	6013      	str	r3, [r2, #0]
 800c70a:	4b88      	ldr	r3, [pc, #544]	; (800c92c <HAL_RCC_OscConfig+0x2ac>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	4a87      	ldr	r2, [pc, #540]	; (800c92c <HAL_RCC_OscConfig+0x2ac>)
 800c710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c714:	6013      	str	r3, [r2, #0]
 800c716:	e00b      	b.n	800c730 <HAL_RCC_OscConfig+0xb0>
 800c718:	4b84      	ldr	r3, [pc, #528]	; (800c92c <HAL_RCC_OscConfig+0x2ac>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4a83      	ldr	r2, [pc, #524]	; (800c92c <HAL_RCC_OscConfig+0x2ac>)
 800c71e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c722:	6013      	str	r3, [r2, #0]
 800c724:	4b81      	ldr	r3, [pc, #516]	; (800c92c <HAL_RCC_OscConfig+0x2ac>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4a80      	ldr	r2, [pc, #512]	; (800c92c <HAL_RCC_OscConfig+0x2ac>)
 800c72a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c72e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d013      	beq.n	800c760 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c738:	f7fb faa0 	bl	8007c7c <HAL_GetTick>
 800c73c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c73e:	e008      	b.n	800c752 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c740:	f7fb fa9c 	bl	8007c7c <HAL_GetTick>
 800c744:	4602      	mov	r2, r0
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	1ad3      	subs	r3, r2, r3
 800c74a:	2b64      	cmp	r3, #100	; 0x64
 800c74c:	d901      	bls.n	800c752 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c74e:	2303      	movs	r3, #3
 800c750:	e1fb      	b.n	800cb4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c752:	4b76      	ldr	r3, [pc, #472]	; (800c92c <HAL_RCC_OscConfig+0x2ac>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d0f0      	beq.n	800c740 <HAL_RCC_OscConfig+0xc0>
 800c75e:	e014      	b.n	800c78a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c760:	f7fb fa8c 	bl	8007c7c <HAL_GetTick>
 800c764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c766:	e008      	b.n	800c77a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c768:	f7fb fa88 	bl	8007c7c <HAL_GetTick>
 800c76c:	4602      	mov	r2, r0
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	1ad3      	subs	r3, r2, r3
 800c772:	2b64      	cmp	r3, #100	; 0x64
 800c774:	d901      	bls.n	800c77a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c776:	2303      	movs	r3, #3
 800c778:	e1e7      	b.n	800cb4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c77a:	4b6c      	ldr	r3, [pc, #432]	; (800c92c <HAL_RCC_OscConfig+0x2ac>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c782:	2b00      	cmp	r3, #0
 800c784:	d1f0      	bne.n	800c768 <HAL_RCC_OscConfig+0xe8>
 800c786:	e000      	b.n	800c78a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c788:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f003 0302 	and.w	r3, r3, #2
 800c792:	2b00      	cmp	r3, #0
 800c794:	d063      	beq.n	800c85e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c796:	4b65      	ldr	r3, [pc, #404]	; (800c92c <HAL_RCC_OscConfig+0x2ac>)
 800c798:	689b      	ldr	r3, [r3, #8]
 800c79a:	f003 030c 	and.w	r3, r3, #12
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d00b      	beq.n	800c7ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c7a2:	4b62      	ldr	r3, [pc, #392]	; (800c92c <HAL_RCC_OscConfig+0x2ac>)
 800c7a4:	689b      	ldr	r3, [r3, #8]
 800c7a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c7aa:	2b08      	cmp	r3, #8
 800c7ac:	d11c      	bne.n	800c7e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c7ae:	4b5f      	ldr	r3, [pc, #380]	; (800c92c <HAL_RCC_OscConfig+0x2ac>)
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d116      	bne.n	800c7e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c7ba:	4b5c      	ldr	r3, [pc, #368]	; (800c92c <HAL_RCC_OscConfig+0x2ac>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f003 0302 	and.w	r3, r3, #2
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d005      	beq.n	800c7d2 <HAL_RCC_OscConfig+0x152>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	68db      	ldr	r3, [r3, #12]
 800c7ca:	2b01      	cmp	r3, #1
 800c7cc:	d001      	beq.n	800c7d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	e1bb      	b.n	800cb4a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c7d2:	4b56      	ldr	r3, [pc, #344]	; (800c92c <HAL_RCC_OscConfig+0x2ac>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	691b      	ldr	r3, [r3, #16]
 800c7de:	00db      	lsls	r3, r3, #3
 800c7e0:	4952      	ldr	r1, [pc, #328]	; (800c92c <HAL_RCC_OscConfig+0x2ac>)
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c7e6:	e03a      	b.n	800c85e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	68db      	ldr	r3, [r3, #12]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d020      	beq.n	800c832 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c7f0:	4b4f      	ldr	r3, [pc, #316]	; (800c930 <HAL_RCC_OscConfig+0x2b0>)
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7f6:	f7fb fa41 	bl	8007c7c <HAL_GetTick>
 800c7fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c7fc:	e008      	b.n	800c810 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c7fe:	f7fb fa3d 	bl	8007c7c <HAL_GetTick>
 800c802:	4602      	mov	r2, r0
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	1ad3      	subs	r3, r2, r3
 800c808:	2b02      	cmp	r3, #2
 800c80a:	d901      	bls.n	800c810 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c80c:	2303      	movs	r3, #3
 800c80e:	e19c      	b.n	800cb4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c810:	4b46      	ldr	r3, [pc, #280]	; (800c92c <HAL_RCC_OscConfig+0x2ac>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f003 0302 	and.w	r3, r3, #2
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d0f0      	beq.n	800c7fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c81c:	4b43      	ldr	r3, [pc, #268]	; (800c92c <HAL_RCC_OscConfig+0x2ac>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	691b      	ldr	r3, [r3, #16]
 800c828:	00db      	lsls	r3, r3, #3
 800c82a:	4940      	ldr	r1, [pc, #256]	; (800c92c <HAL_RCC_OscConfig+0x2ac>)
 800c82c:	4313      	orrs	r3, r2
 800c82e:	600b      	str	r3, [r1, #0]
 800c830:	e015      	b.n	800c85e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c832:	4b3f      	ldr	r3, [pc, #252]	; (800c930 <HAL_RCC_OscConfig+0x2b0>)
 800c834:	2200      	movs	r2, #0
 800c836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c838:	f7fb fa20 	bl	8007c7c <HAL_GetTick>
 800c83c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c83e:	e008      	b.n	800c852 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c840:	f7fb fa1c 	bl	8007c7c <HAL_GetTick>
 800c844:	4602      	mov	r2, r0
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	1ad3      	subs	r3, r2, r3
 800c84a:	2b02      	cmp	r3, #2
 800c84c:	d901      	bls.n	800c852 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c84e:	2303      	movs	r3, #3
 800c850:	e17b      	b.n	800cb4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c852:	4b36      	ldr	r3, [pc, #216]	; (800c92c <HAL_RCC_OscConfig+0x2ac>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f003 0302 	and.w	r3, r3, #2
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d1f0      	bne.n	800c840 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f003 0308 	and.w	r3, r3, #8
 800c866:	2b00      	cmp	r3, #0
 800c868:	d030      	beq.n	800c8cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	695b      	ldr	r3, [r3, #20]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d016      	beq.n	800c8a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c872:	4b30      	ldr	r3, [pc, #192]	; (800c934 <HAL_RCC_OscConfig+0x2b4>)
 800c874:	2201      	movs	r2, #1
 800c876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c878:	f7fb fa00 	bl	8007c7c <HAL_GetTick>
 800c87c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c87e:	e008      	b.n	800c892 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c880:	f7fb f9fc 	bl	8007c7c <HAL_GetTick>
 800c884:	4602      	mov	r2, r0
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	1ad3      	subs	r3, r2, r3
 800c88a:	2b02      	cmp	r3, #2
 800c88c:	d901      	bls.n	800c892 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c88e:	2303      	movs	r3, #3
 800c890:	e15b      	b.n	800cb4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c892:	4b26      	ldr	r3, [pc, #152]	; (800c92c <HAL_RCC_OscConfig+0x2ac>)
 800c894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c896:	f003 0302 	and.w	r3, r3, #2
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d0f0      	beq.n	800c880 <HAL_RCC_OscConfig+0x200>
 800c89e:	e015      	b.n	800c8cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c8a0:	4b24      	ldr	r3, [pc, #144]	; (800c934 <HAL_RCC_OscConfig+0x2b4>)
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c8a6:	f7fb f9e9 	bl	8007c7c <HAL_GetTick>
 800c8aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c8ac:	e008      	b.n	800c8c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c8ae:	f7fb f9e5 	bl	8007c7c <HAL_GetTick>
 800c8b2:	4602      	mov	r2, r0
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	1ad3      	subs	r3, r2, r3
 800c8b8:	2b02      	cmp	r3, #2
 800c8ba:	d901      	bls.n	800c8c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c8bc:	2303      	movs	r3, #3
 800c8be:	e144      	b.n	800cb4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c8c0:	4b1a      	ldr	r3, [pc, #104]	; (800c92c <HAL_RCC_OscConfig+0x2ac>)
 800c8c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8c4:	f003 0302 	and.w	r3, r3, #2
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d1f0      	bne.n	800c8ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f003 0304 	and.w	r3, r3, #4
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	f000 80a0 	beq.w	800ca1a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c8de:	4b13      	ldr	r3, [pc, #76]	; (800c92c <HAL_RCC_OscConfig+0x2ac>)
 800c8e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d10f      	bne.n	800c90a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	60bb      	str	r3, [r7, #8]
 800c8ee:	4b0f      	ldr	r3, [pc, #60]	; (800c92c <HAL_RCC_OscConfig+0x2ac>)
 800c8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8f2:	4a0e      	ldr	r2, [pc, #56]	; (800c92c <HAL_RCC_OscConfig+0x2ac>)
 800c8f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c8f8:	6413      	str	r3, [r2, #64]	; 0x40
 800c8fa:	4b0c      	ldr	r3, [pc, #48]	; (800c92c <HAL_RCC_OscConfig+0x2ac>)
 800c8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c902:	60bb      	str	r3, [r7, #8]
 800c904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c906:	2301      	movs	r3, #1
 800c908:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c90a:	4b0b      	ldr	r3, [pc, #44]	; (800c938 <HAL_RCC_OscConfig+0x2b8>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c912:	2b00      	cmp	r3, #0
 800c914:	d121      	bne.n	800c95a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c916:	4b08      	ldr	r3, [pc, #32]	; (800c938 <HAL_RCC_OscConfig+0x2b8>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	4a07      	ldr	r2, [pc, #28]	; (800c938 <HAL_RCC_OscConfig+0x2b8>)
 800c91c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c922:	f7fb f9ab 	bl	8007c7c <HAL_GetTick>
 800c926:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c928:	e011      	b.n	800c94e <HAL_RCC_OscConfig+0x2ce>
 800c92a:	bf00      	nop
 800c92c:	40023800 	.word	0x40023800
 800c930:	42470000 	.word	0x42470000
 800c934:	42470e80 	.word	0x42470e80
 800c938:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c93c:	f7fb f99e 	bl	8007c7c <HAL_GetTick>
 800c940:	4602      	mov	r2, r0
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	1ad3      	subs	r3, r2, r3
 800c946:	2b02      	cmp	r3, #2
 800c948:	d901      	bls.n	800c94e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800c94a:	2303      	movs	r3, #3
 800c94c:	e0fd      	b.n	800cb4a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c94e:	4b81      	ldr	r3, [pc, #516]	; (800cb54 <HAL_RCC_OscConfig+0x4d4>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c956:	2b00      	cmp	r3, #0
 800c958:	d0f0      	beq.n	800c93c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	689b      	ldr	r3, [r3, #8]
 800c95e:	2b01      	cmp	r3, #1
 800c960:	d106      	bne.n	800c970 <HAL_RCC_OscConfig+0x2f0>
 800c962:	4b7d      	ldr	r3, [pc, #500]	; (800cb58 <HAL_RCC_OscConfig+0x4d8>)
 800c964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c966:	4a7c      	ldr	r2, [pc, #496]	; (800cb58 <HAL_RCC_OscConfig+0x4d8>)
 800c968:	f043 0301 	orr.w	r3, r3, #1
 800c96c:	6713      	str	r3, [r2, #112]	; 0x70
 800c96e:	e01c      	b.n	800c9aa <HAL_RCC_OscConfig+0x32a>
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	689b      	ldr	r3, [r3, #8]
 800c974:	2b05      	cmp	r3, #5
 800c976:	d10c      	bne.n	800c992 <HAL_RCC_OscConfig+0x312>
 800c978:	4b77      	ldr	r3, [pc, #476]	; (800cb58 <HAL_RCC_OscConfig+0x4d8>)
 800c97a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c97c:	4a76      	ldr	r2, [pc, #472]	; (800cb58 <HAL_RCC_OscConfig+0x4d8>)
 800c97e:	f043 0304 	orr.w	r3, r3, #4
 800c982:	6713      	str	r3, [r2, #112]	; 0x70
 800c984:	4b74      	ldr	r3, [pc, #464]	; (800cb58 <HAL_RCC_OscConfig+0x4d8>)
 800c986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c988:	4a73      	ldr	r2, [pc, #460]	; (800cb58 <HAL_RCC_OscConfig+0x4d8>)
 800c98a:	f043 0301 	orr.w	r3, r3, #1
 800c98e:	6713      	str	r3, [r2, #112]	; 0x70
 800c990:	e00b      	b.n	800c9aa <HAL_RCC_OscConfig+0x32a>
 800c992:	4b71      	ldr	r3, [pc, #452]	; (800cb58 <HAL_RCC_OscConfig+0x4d8>)
 800c994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c996:	4a70      	ldr	r2, [pc, #448]	; (800cb58 <HAL_RCC_OscConfig+0x4d8>)
 800c998:	f023 0301 	bic.w	r3, r3, #1
 800c99c:	6713      	str	r3, [r2, #112]	; 0x70
 800c99e:	4b6e      	ldr	r3, [pc, #440]	; (800cb58 <HAL_RCC_OscConfig+0x4d8>)
 800c9a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9a2:	4a6d      	ldr	r2, [pc, #436]	; (800cb58 <HAL_RCC_OscConfig+0x4d8>)
 800c9a4:	f023 0304 	bic.w	r3, r3, #4
 800c9a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	689b      	ldr	r3, [r3, #8]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d015      	beq.n	800c9de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c9b2:	f7fb f963 	bl	8007c7c <HAL_GetTick>
 800c9b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c9b8:	e00a      	b.n	800c9d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c9ba:	f7fb f95f 	bl	8007c7c <HAL_GetTick>
 800c9be:	4602      	mov	r2, r0
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	1ad3      	subs	r3, r2, r3
 800c9c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d901      	bls.n	800c9d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800c9cc:	2303      	movs	r3, #3
 800c9ce:	e0bc      	b.n	800cb4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c9d0:	4b61      	ldr	r3, [pc, #388]	; (800cb58 <HAL_RCC_OscConfig+0x4d8>)
 800c9d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9d4:	f003 0302 	and.w	r3, r3, #2
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d0ee      	beq.n	800c9ba <HAL_RCC_OscConfig+0x33a>
 800c9dc:	e014      	b.n	800ca08 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c9de:	f7fb f94d 	bl	8007c7c <HAL_GetTick>
 800c9e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c9e4:	e00a      	b.n	800c9fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c9e6:	f7fb f949 	bl	8007c7c <HAL_GetTick>
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	1ad3      	subs	r3, r2, r3
 800c9f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d901      	bls.n	800c9fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800c9f8:	2303      	movs	r3, #3
 800c9fa:	e0a6      	b.n	800cb4a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c9fc:	4b56      	ldr	r3, [pc, #344]	; (800cb58 <HAL_RCC_OscConfig+0x4d8>)
 800c9fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca00:	f003 0302 	and.w	r3, r3, #2
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d1ee      	bne.n	800c9e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ca08:	7dfb      	ldrb	r3, [r7, #23]
 800ca0a:	2b01      	cmp	r3, #1
 800ca0c:	d105      	bne.n	800ca1a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ca0e:	4b52      	ldr	r3, [pc, #328]	; (800cb58 <HAL_RCC_OscConfig+0x4d8>)
 800ca10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca12:	4a51      	ldr	r2, [pc, #324]	; (800cb58 <HAL_RCC_OscConfig+0x4d8>)
 800ca14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ca18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	699b      	ldr	r3, [r3, #24]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	f000 8092 	beq.w	800cb48 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ca24:	4b4c      	ldr	r3, [pc, #304]	; (800cb58 <HAL_RCC_OscConfig+0x4d8>)
 800ca26:	689b      	ldr	r3, [r3, #8]
 800ca28:	f003 030c 	and.w	r3, r3, #12
 800ca2c:	2b08      	cmp	r3, #8
 800ca2e:	d05c      	beq.n	800caea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	699b      	ldr	r3, [r3, #24]
 800ca34:	2b02      	cmp	r3, #2
 800ca36:	d141      	bne.n	800cabc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ca38:	4b48      	ldr	r3, [pc, #288]	; (800cb5c <HAL_RCC_OscConfig+0x4dc>)
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca3e:	f7fb f91d 	bl	8007c7c <HAL_GetTick>
 800ca42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca44:	e008      	b.n	800ca58 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ca46:	f7fb f919 	bl	8007c7c <HAL_GetTick>
 800ca4a:	4602      	mov	r2, r0
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	1ad3      	subs	r3, r2, r3
 800ca50:	2b02      	cmp	r3, #2
 800ca52:	d901      	bls.n	800ca58 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800ca54:	2303      	movs	r3, #3
 800ca56:	e078      	b.n	800cb4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca58:	4b3f      	ldr	r3, [pc, #252]	; (800cb58 <HAL_RCC_OscConfig+0x4d8>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d1f0      	bne.n	800ca46 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	69da      	ldr	r2, [r3, #28]
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6a1b      	ldr	r3, [r3, #32]
 800ca6c:	431a      	orrs	r2, r3
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca72:	019b      	lsls	r3, r3, #6
 800ca74:	431a      	orrs	r2, r3
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca7a:	085b      	lsrs	r3, r3, #1
 800ca7c:	3b01      	subs	r3, #1
 800ca7e:	041b      	lsls	r3, r3, #16
 800ca80:	431a      	orrs	r2, r3
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca86:	061b      	lsls	r3, r3, #24
 800ca88:	4933      	ldr	r1, [pc, #204]	; (800cb58 <HAL_RCC_OscConfig+0x4d8>)
 800ca8a:	4313      	orrs	r3, r2
 800ca8c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ca8e:	4b33      	ldr	r3, [pc, #204]	; (800cb5c <HAL_RCC_OscConfig+0x4dc>)
 800ca90:	2201      	movs	r2, #1
 800ca92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ca94:	f7fb f8f2 	bl	8007c7c <HAL_GetTick>
 800ca98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ca9a:	e008      	b.n	800caae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ca9c:	f7fb f8ee 	bl	8007c7c <HAL_GetTick>
 800caa0:	4602      	mov	r2, r0
 800caa2:	693b      	ldr	r3, [r7, #16]
 800caa4:	1ad3      	subs	r3, r2, r3
 800caa6:	2b02      	cmp	r3, #2
 800caa8:	d901      	bls.n	800caae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800caaa:	2303      	movs	r3, #3
 800caac:	e04d      	b.n	800cb4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800caae:	4b2a      	ldr	r3, [pc, #168]	; (800cb58 <HAL_RCC_OscConfig+0x4d8>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d0f0      	beq.n	800ca9c <HAL_RCC_OscConfig+0x41c>
 800caba:	e045      	b.n	800cb48 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cabc:	4b27      	ldr	r3, [pc, #156]	; (800cb5c <HAL_RCC_OscConfig+0x4dc>)
 800cabe:	2200      	movs	r2, #0
 800cac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cac2:	f7fb f8db 	bl	8007c7c <HAL_GetTick>
 800cac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cac8:	e008      	b.n	800cadc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800caca:	f7fb f8d7 	bl	8007c7c <HAL_GetTick>
 800cace:	4602      	mov	r2, r0
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	1ad3      	subs	r3, r2, r3
 800cad4:	2b02      	cmp	r3, #2
 800cad6:	d901      	bls.n	800cadc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800cad8:	2303      	movs	r3, #3
 800cada:	e036      	b.n	800cb4a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cadc:	4b1e      	ldr	r3, [pc, #120]	; (800cb58 <HAL_RCC_OscConfig+0x4d8>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d1f0      	bne.n	800caca <HAL_RCC_OscConfig+0x44a>
 800cae8:	e02e      	b.n	800cb48 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	699b      	ldr	r3, [r3, #24]
 800caee:	2b01      	cmp	r3, #1
 800caf0:	d101      	bne.n	800caf6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800caf2:	2301      	movs	r3, #1
 800caf4:	e029      	b.n	800cb4a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800caf6:	4b18      	ldr	r3, [pc, #96]	; (800cb58 <HAL_RCC_OscConfig+0x4d8>)
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	69db      	ldr	r3, [r3, #28]
 800cb06:	429a      	cmp	r2, r3
 800cb08:	d11c      	bne.n	800cb44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d115      	bne.n	800cb44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800cb18:	68fa      	ldr	r2, [r7, #12]
 800cb1a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800cb1e:	4013      	ands	r3, r2
 800cb20:	687a      	ldr	r2, [r7, #4]
 800cb22:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800cb24:	4293      	cmp	r3, r2
 800cb26:	d10d      	bne.n	800cb44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d106      	bne.n	800cb44 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d001      	beq.n	800cb48 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800cb44:	2301      	movs	r3, #1
 800cb46:	e000      	b.n	800cb4a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800cb48:	2300      	movs	r3, #0
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3718      	adds	r7, #24
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	bf00      	nop
 800cb54:	40007000 	.word	0x40007000
 800cb58:	40023800 	.word	0x40023800
 800cb5c:	42470060 	.word	0x42470060

0800cb60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b084      	sub	sp, #16
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
 800cb68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d101      	bne.n	800cb74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cb70:	2301      	movs	r3, #1
 800cb72:	e0cc      	b.n	800cd0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800cb74:	4b68      	ldr	r3, [pc, #416]	; (800cd18 <HAL_RCC_ClockConfig+0x1b8>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f003 030f 	and.w	r3, r3, #15
 800cb7c:	683a      	ldr	r2, [r7, #0]
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	d90c      	bls.n	800cb9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cb82:	4b65      	ldr	r3, [pc, #404]	; (800cd18 <HAL_RCC_ClockConfig+0x1b8>)
 800cb84:	683a      	ldr	r2, [r7, #0]
 800cb86:	b2d2      	uxtb	r2, r2
 800cb88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb8a:	4b63      	ldr	r3, [pc, #396]	; (800cd18 <HAL_RCC_ClockConfig+0x1b8>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	f003 030f 	and.w	r3, r3, #15
 800cb92:	683a      	ldr	r2, [r7, #0]
 800cb94:	429a      	cmp	r2, r3
 800cb96:	d001      	beq.n	800cb9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800cb98:	2301      	movs	r3, #1
 800cb9a:	e0b8      	b.n	800cd0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f003 0302 	and.w	r3, r3, #2
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d020      	beq.n	800cbea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f003 0304 	and.w	r3, r3, #4
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d005      	beq.n	800cbc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cbb4:	4b59      	ldr	r3, [pc, #356]	; (800cd1c <HAL_RCC_ClockConfig+0x1bc>)
 800cbb6:	689b      	ldr	r3, [r3, #8]
 800cbb8:	4a58      	ldr	r2, [pc, #352]	; (800cd1c <HAL_RCC_ClockConfig+0x1bc>)
 800cbba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800cbbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f003 0308 	and.w	r3, r3, #8
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d005      	beq.n	800cbd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800cbcc:	4b53      	ldr	r3, [pc, #332]	; (800cd1c <HAL_RCC_ClockConfig+0x1bc>)
 800cbce:	689b      	ldr	r3, [r3, #8]
 800cbd0:	4a52      	ldr	r2, [pc, #328]	; (800cd1c <HAL_RCC_ClockConfig+0x1bc>)
 800cbd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800cbd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cbd8:	4b50      	ldr	r3, [pc, #320]	; (800cd1c <HAL_RCC_ClockConfig+0x1bc>)
 800cbda:	689b      	ldr	r3, [r3, #8]
 800cbdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	689b      	ldr	r3, [r3, #8]
 800cbe4:	494d      	ldr	r1, [pc, #308]	; (800cd1c <HAL_RCC_ClockConfig+0x1bc>)
 800cbe6:	4313      	orrs	r3, r2
 800cbe8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f003 0301 	and.w	r3, r3, #1
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d044      	beq.n	800cc80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	2b01      	cmp	r3, #1
 800cbfc:	d107      	bne.n	800cc0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cbfe:	4b47      	ldr	r3, [pc, #284]	; (800cd1c <HAL_RCC_ClockConfig+0x1bc>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d119      	bne.n	800cc3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cc0a:	2301      	movs	r3, #1
 800cc0c:	e07f      	b.n	800cd0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	685b      	ldr	r3, [r3, #4]
 800cc12:	2b02      	cmp	r3, #2
 800cc14:	d003      	beq.n	800cc1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cc1a:	2b03      	cmp	r3, #3
 800cc1c:	d107      	bne.n	800cc2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cc1e:	4b3f      	ldr	r3, [pc, #252]	; (800cd1c <HAL_RCC_ClockConfig+0x1bc>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d109      	bne.n	800cc3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	e06f      	b.n	800cd0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cc2e:	4b3b      	ldr	r3, [pc, #236]	; (800cd1c <HAL_RCC_ClockConfig+0x1bc>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f003 0302 	and.w	r3, r3, #2
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d101      	bne.n	800cc3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	e067      	b.n	800cd0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cc3e:	4b37      	ldr	r3, [pc, #220]	; (800cd1c <HAL_RCC_ClockConfig+0x1bc>)
 800cc40:	689b      	ldr	r3, [r3, #8]
 800cc42:	f023 0203 	bic.w	r2, r3, #3
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	685b      	ldr	r3, [r3, #4]
 800cc4a:	4934      	ldr	r1, [pc, #208]	; (800cd1c <HAL_RCC_ClockConfig+0x1bc>)
 800cc4c:	4313      	orrs	r3, r2
 800cc4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cc50:	f7fb f814 	bl	8007c7c <HAL_GetTick>
 800cc54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc56:	e00a      	b.n	800cc6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cc58:	f7fb f810 	bl	8007c7c <HAL_GetTick>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	1ad3      	subs	r3, r2, r3
 800cc62:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d901      	bls.n	800cc6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cc6a:	2303      	movs	r3, #3
 800cc6c:	e04f      	b.n	800cd0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cc6e:	4b2b      	ldr	r3, [pc, #172]	; (800cd1c <HAL_RCC_ClockConfig+0x1bc>)
 800cc70:	689b      	ldr	r3, [r3, #8]
 800cc72:	f003 020c 	and.w	r2, r3, #12
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	009b      	lsls	r3, r3, #2
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d1eb      	bne.n	800cc58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800cc80:	4b25      	ldr	r3, [pc, #148]	; (800cd18 <HAL_RCC_ClockConfig+0x1b8>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f003 030f 	and.w	r3, r3, #15
 800cc88:	683a      	ldr	r2, [r7, #0]
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d20c      	bcs.n	800cca8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc8e:	4b22      	ldr	r3, [pc, #136]	; (800cd18 <HAL_RCC_ClockConfig+0x1b8>)
 800cc90:	683a      	ldr	r2, [r7, #0]
 800cc92:	b2d2      	uxtb	r2, r2
 800cc94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc96:	4b20      	ldr	r3, [pc, #128]	; (800cd18 <HAL_RCC_ClockConfig+0x1b8>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f003 030f 	and.w	r3, r3, #15
 800cc9e:	683a      	ldr	r2, [r7, #0]
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d001      	beq.n	800cca8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800cca4:	2301      	movs	r3, #1
 800cca6:	e032      	b.n	800cd0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f003 0304 	and.w	r3, r3, #4
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d008      	beq.n	800ccc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ccb4:	4b19      	ldr	r3, [pc, #100]	; (800cd1c <HAL_RCC_ClockConfig+0x1bc>)
 800ccb6:	689b      	ldr	r3, [r3, #8]
 800ccb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	68db      	ldr	r3, [r3, #12]
 800ccc0:	4916      	ldr	r1, [pc, #88]	; (800cd1c <HAL_RCC_ClockConfig+0x1bc>)
 800ccc2:	4313      	orrs	r3, r2
 800ccc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f003 0308 	and.w	r3, r3, #8
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d009      	beq.n	800cce6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ccd2:	4b12      	ldr	r3, [pc, #72]	; (800cd1c <HAL_RCC_ClockConfig+0x1bc>)
 800ccd4:	689b      	ldr	r3, [r3, #8]
 800ccd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	691b      	ldr	r3, [r3, #16]
 800ccde:	00db      	lsls	r3, r3, #3
 800cce0:	490e      	ldr	r1, [pc, #56]	; (800cd1c <HAL_RCC_ClockConfig+0x1bc>)
 800cce2:	4313      	orrs	r3, r2
 800cce4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800cce6:	f000 f821 	bl	800cd2c <HAL_RCC_GetSysClockFreq>
 800ccea:	4601      	mov	r1, r0
 800ccec:	4b0b      	ldr	r3, [pc, #44]	; (800cd1c <HAL_RCC_ClockConfig+0x1bc>)
 800ccee:	689b      	ldr	r3, [r3, #8]
 800ccf0:	091b      	lsrs	r3, r3, #4
 800ccf2:	f003 030f 	and.w	r3, r3, #15
 800ccf6:	4a0a      	ldr	r2, [pc, #40]	; (800cd20 <HAL_RCC_ClockConfig+0x1c0>)
 800ccf8:	5cd3      	ldrb	r3, [r2, r3]
 800ccfa:	fa21 f303 	lsr.w	r3, r1, r3
 800ccfe:	4a09      	ldr	r2, [pc, #36]	; (800cd24 <HAL_RCC_ClockConfig+0x1c4>)
 800cd00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800cd02:	4b09      	ldr	r3, [pc, #36]	; (800cd28 <HAL_RCC_ClockConfig+0x1c8>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	4618      	mov	r0, r3
 800cd08:	f7fa ff74 	bl	8007bf4 <HAL_InitTick>

  return HAL_OK;
 800cd0c:	2300      	movs	r3, #0
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3710      	adds	r7, #16
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
 800cd16:	bf00      	nop
 800cd18:	40023c00 	.word	0x40023c00
 800cd1c:	40023800 	.word	0x40023800
 800cd20:	08015684 	.word	0x08015684
 800cd24:	2000007c 	.word	0x2000007c
 800cd28:	20000084 	.word	0x20000084

0800cd2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cd2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd2e:	b085      	sub	sp, #20
 800cd30:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800cd32:	2300      	movs	r3, #0
 800cd34:	607b      	str	r3, [r7, #4]
 800cd36:	2300      	movs	r3, #0
 800cd38:	60fb      	str	r3, [r7, #12]
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cd42:	4b63      	ldr	r3, [pc, #396]	; (800ced0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800cd44:	689b      	ldr	r3, [r3, #8]
 800cd46:	f003 030c 	and.w	r3, r3, #12
 800cd4a:	2b04      	cmp	r3, #4
 800cd4c:	d007      	beq.n	800cd5e <HAL_RCC_GetSysClockFreq+0x32>
 800cd4e:	2b08      	cmp	r3, #8
 800cd50:	d008      	beq.n	800cd64 <HAL_RCC_GetSysClockFreq+0x38>
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	f040 80b4 	bne.w	800cec0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cd58:	4b5e      	ldr	r3, [pc, #376]	; (800ced4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800cd5a:	60bb      	str	r3, [r7, #8]
       break;
 800cd5c:	e0b3      	b.n	800cec6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800cd5e:	4b5d      	ldr	r3, [pc, #372]	; (800ced4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800cd60:	60bb      	str	r3, [r7, #8]
      break;
 800cd62:	e0b0      	b.n	800cec6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800cd64:	4b5a      	ldr	r3, [pc, #360]	; (800ced0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd6c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800cd6e:	4b58      	ldr	r3, [pc, #352]	; (800ced0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800cd70:	685b      	ldr	r3, [r3, #4]
 800cd72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d04a      	beq.n	800ce10 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cd7a:	4b55      	ldr	r3, [pc, #340]	; (800ced0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	099b      	lsrs	r3, r3, #6
 800cd80:	f04f 0400 	mov.w	r4, #0
 800cd84:	f240 11ff 	movw	r1, #511	; 0x1ff
 800cd88:	f04f 0200 	mov.w	r2, #0
 800cd8c:	ea03 0501 	and.w	r5, r3, r1
 800cd90:	ea04 0602 	and.w	r6, r4, r2
 800cd94:	4629      	mov	r1, r5
 800cd96:	4632      	mov	r2, r6
 800cd98:	f04f 0300 	mov.w	r3, #0
 800cd9c:	f04f 0400 	mov.w	r4, #0
 800cda0:	0154      	lsls	r4, r2, #5
 800cda2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800cda6:	014b      	lsls	r3, r1, #5
 800cda8:	4619      	mov	r1, r3
 800cdaa:	4622      	mov	r2, r4
 800cdac:	1b49      	subs	r1, r1, r5
 800cdae:	eb62 0206 	sbc.w	r2, r2, r6
 800cdb2:	f04f 0300 	mov.w	r3, #0
 800cdb6:	f04f 0400 	mov.w	r4, #0
 800cdba:	0194      	lsls	r4, r2, #6
 800cdbc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800cdc0:	018b      	lsls	r3, r1, #6
 800cdc2:	1a5b      	subs	r3, r3, r1
 800cdc4:	eb64 0402 	sbc.w	r4, r4, r2
 800cdc8:	f04f 0100 	mov.w	r1, #0
 800cdcc:	f04f 0200 	mov.w	r2, #0
 800cdd0:	00e2      	lsls	r2, r4, #3
 800cdd2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800cdd6:	00d9      	lsls	r1, r3, #3
 800cdd8:	460b      	mov	r3, r1
 800cdda:	4614      	mov	r4, r2
 800cddc:	195b      	adds	r3, r3, r5
 800cdde:	eb44 0406 	adc.w	r4, r4, r6
 800cde2:	f04f 0100 	mov.w	r1, #0
 800cde6:	f04f 0200 	mov.w	r2, #0
 800cdea:	02a2      	lsls	r2, r4, #10
 800cdec:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800cdf0:	0299      	lsls	r1, r3, #10
 800cdf2:	460b      	mov	r3, r1
 800cdf4:	4614      	mov	r4, r2
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	4621      	mov	r1, r4
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f04f 0400 	mov.w	r4, #0
 800ce00:	461a      	mov	r2, r3
 800ce02:	4623      	mov	r3, r4
 800ce04:	f7f4 f87e 	bl	8000f04 <__aeabi_uldivmod>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	460c      	mov	r4, r1
 800ce0c:	60fb      	str	r3, [r7, #12]
 800ce0e:	e049      	b.n	800cea4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ce10:	4b2f      	ldr	r3, [pc, #188]	; (800ced0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ce12:	685b      	ldr	r3, [r3, #4]
 800ce14:	099b      	lsrs	r3, r3, #6
 800ce16:	f04f 0400 	mov.w	r4, #0
 800ce1a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800ce1e:	f04f 0200 	mov.w	r2, #0
 800ce22:	ea03 0501 	and.w	r5, r3, r1
 800ce26:	ea04 0602 	and.w	r6, r4, r2
 800ce2a:	4629      	mov	r1, r5
 800ce2c:	4632      	mov	r2, r6
 800ce2e:	f04f 0300 	mov.w	r3, #0
 800ce32:	f04f 0400 	mov.w	r4, #0
 800ce36:	0154      	lsls	r4, r2, #5
 800ce38:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800ce3c:	014b      	lsls	r3, r1, #5
 800ce3e:	4619      	mov	r1, r3
 800ce40:	4622      	mov	r2, r4
 800ce42:	1b49      	subs	r1, r1, r5
 800ce44:	eb62 0206 	sbc.w	r2, r2, r6
 800ce48:	f04f 0300 	mov.w	r3, #0
 800ce4c:	f04f 0400 	mov.w	r4, #0
 800ce50:	0194      	lsls	r4, r2, #6
 800ce52:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800ce56:	018b      	lsls	r3, r1, #6
 800ce58:	1a5b      	subs	r3, r3, r1
 800ce5a:	eb64 0402 	sbc.w	r4, r4, r2
 800ce5e:	f04f 0100 	mov.w	r1, #0
 800ce62:	f04f 0200 	mov.w	r2, #0
 800ce66:	00e2      	lsls	r2, r4, #3
 800ce68:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800ce6c:	00d9      	lsls	r1, r3, #3
 800ce6e:	460b      	mov	r3, r1
 800ce70:	4614      	mov	r4, r2
 800ce72:	195b      	adds	r3, r3, r5
 800ce74:	eb44 0406 	adc.w	r4, r4, r6
 800ce78:	f04f 0100 	mov.w	r1, #0
 800ce7c:	f04f 0200 	mov.w	r2, #0
 800ce80:	02a2      	lsls	r2, r4, #10
 800ce82:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800ce86:	0299      	lsls	r1, r3, #10
 800ce88:	460b      	mov	r3, r1
 800ce8a:	4614      	mov	r4, r2
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	4621      	mov	r1, r4
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f04f 0400 	mov.w	r4, #0
 800ce96:	461a      	mov	r2, r3
 800ce98:	4623      	mov	r3, r4
 800ce9a:	f7f4 f833 	bl	8000f04 <__aeabi_uldivmod>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	460c      	mov	r4, r1
 800cea2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800cea4:	4b0a      	ldr	r3, [pc, #40]	; (800ced0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800cea6:	685b      	ldr	r3, [r3, #4]
 800cea8:	0c1b      	lsrs	r3, r3, #16
 800ceaa:	f003 0303 	and.w	r3, r3, #3
 800ceae:	3301      	adds	r3, #1
 800ceb0:	005b      	lsls	r3, r3, #1
 800ceb2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800ceb4:	68fa      	ldr	r2, [r7, #12]
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cebc:	60bb      	str	r3, [r7, #8]
      break;
 800cebe:	e002      	b.n	800cec6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cec0:	4b04      	ldr	r3, [pc, #16]	; (800ced4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800cec2:	60bb      	str	r3, [r7, #8]
      break;
 800cec4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cec6:	68bb      	ldr	r3, [r7, #8]
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3714      	adds	r7, #20
 800cecc:	46bd      	mov	sp, r7
 800cece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ced0:	40023800 	.word	0x40023800
 800ced4:	00f42400 	.word	0x00f42400

0800ced8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ced8:	b480      	push	{r7}
 800ceda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cedc:	4b03      	ldr	r3, [pc, #12]	; (800ceec <HAL_RCC_GetHCLKFreq+0x14>)
 800cede:	681b      	ldr	r3, [r3, #0]
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	46bd      	mov	sp, r7
 800cee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee8:	4770      	bx	lr
 800ceea:	bf00      	nop
 800ceec:	2000007c 	.word	0x2000007c

0800cef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800cef4:	f7ff fff0 	bl	800ced8 <HAL_RCC_GetHCLKFreq>
 800cef8:	4601      	mov	r1, r0
 800cefa:	4b05      	ldr	r3, [pc, #20]	; (800cf10 <HAL_RCC_GetPCLK1Freq+0x20>)
 800cefc:	689b      	ldr	r3, [r3, #8]
 800cefe:	0a9b      	lsrs	r3, r3, #10
 800cf00:	f003 0307 	and.w	r3, r3, #7
 800cf04:	4a03      	ldr	r2, [pc, #12]	; (800cf14 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cf06:	5cd3      	ldrb	r3, [r2, r3]
 800cf08:	fa21 f303 	lsr.w	r3, r1, r3
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	bd80      	pop	{r7, pc}
 800cf10:	40023800 	.word	0x40023800
 800cf14:	08015694 	.word	0x08015694

0800cf18 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b086      	sub	sp, #24
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cf20:	2300      	movs	r3, #0
 800cf22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800cf24:	2300      	movs	r3, #0
 800cf26:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	f003 0301 	and.w	r3, r3, #1
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d105      	bne.n	800cf40 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d035      	beq.n	800cfac <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800cf40:	4b62      	ldr	r3, [pc, #392]	; (800d0cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800cf42:	2200      	movs	r2, #0
 800cf44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800cf46:	f7fa fe99 	bl	8007c7c <HAL_GetTick>
 800cf4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800cf4c:	e008      	b.n	800cf60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800cf4e:	f7fa fe95 	bl	8007c7c <HAL_GetTick>
 800cf52:	4602      	mov	r2, r0
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	1ad3      	subs	r3, r2, r3
 800cf58:	2b02      	cmp	r3, #2
 800cf5a:	d901      	bls.n	800cf60 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cf5c:	2303      	movs	r3, #3
 800cf5e:	e0b0      	b.n	800d0c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800cf60:	4b5b      	ldr	r3, [pc, #364]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d1f0      	bne.n	800cf4e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	685b      	ldr	r3, [r3, #4]
 800cf70:	019a      	lsls	r2, r3, #6
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	689b      	ldr	r3, [r3, #8]
 800cf76:	071b      	lsls	r3, r3, #28
 800cf78:	4955      	ldr	r1, [pc, #340]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cf7a:	4313      	orrs	r3, r2
 800cf7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800cf80:	4b52      	ldr	r3, [pc, #328]	; (800d0cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800cf82:	2201      	movs	r2, #1
 800cf84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800cf86:	f7fa fe79 	bl	8007c7c <HAL_GetTick>
 800cf8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800cf8c:	e008      	b.n	800cfa0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800cf8e:	f7fa fe75 	bl	8007c7c <HAL_GetTick>
 800cf92:	4602      	mov	r2, r0
 800cf94:	697b      	ldr	r3, [r7, #20]
 800cf96:	1ad3      	subs	r3, r2, r3
 800cf98:	2b02      	cmp	r3, #2
 800cf9a:	d901      	bls.n	800cfa0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cf9c:	2303      	movs	r3, #3
 800cf9e:	e090      	b.n	800d0c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800cfa0:	4b4b      	ldr	r3, [pc, #300]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d0f0      	beq.n	800cf8e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f003 0302 	and.w	r3, r3, #2
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	f000 8083 	beq.w	800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800cfba:	2300      	movs	r3, #0
 800cfbc:	60fb      	str	r3, [r7, #12]
 800cfbe:	4b44      	ldr	r3, [pc, #272]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cfc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfc2:	4a43      	ldr	r2, [pc, #268]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cfc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfc8:	6413      	str	r3, [r2, #64]	; 0x40
 800cfca:	4b41      	ldr	r3, [pc, #260]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cfcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cfd2:	60fb      	str	r3, [r7, #12]
 800cfd4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800cfd6:	4b3f      	ldr	r3, [pc, #252]	; (800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	4a3e      	ldr	r2, [pc, #248]	; (800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cfdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cfe0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cfe2:	f7fa fe4b 	bl	8007c7c <HAL_GetTick>
 800cfe6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800cfe8:	e008      	b.n	800cffc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800cfea:	f7fa fe47 	bl	8007c7c <HAL_GetTick>
 800cfee:	4602      	mov	r2, r0
 800cff0:	697b      	ldr	r3, [r7, #20]
 800cff2:	1ad3      	subs	r3, r2, r3
 800cff4:	2b02      	cmp	r3, #2
 800cff6:	d901      	bls.n	800cffc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800cff8:	2303      	movs	r3, #3
 800cffa:	e062      	b.n	800d0c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800cffc:	4b35      	ldr	r3, [pc, #212]	; (800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d004:	2b00      	cmp	r3, #0
 800d006:	d0f0      	beq.n	800cfea <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800d008:	4b31      	ldr	r3, [pc, #196]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d00a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d00c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d010:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d02f      	beq.n	800d078 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	68db      	ldr	r3, [r3, #12]
 800d01c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d020:	693a      	ldr	r2, [r7, #16]
 800d022:	429a      	cmp	r2, r3
 800d024:	d028      	beq.n	800d078 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d026:	4b2a      	ldr	r3, [pc, #168]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d02a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d02e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800d030:	4b29      	ldr	r3, [pc, #164]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800d032:	2201      	movs	r2, #1
 800d034:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800d036:	4b28      	ldr	r3, [pc, #160]	; (800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800d038:	2200      	movs	r2, #0
 800d03a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800d03c:	4a24      	ldr	r2, [pc, #144]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d03e:	693b      	ldr	r3, [r7, #16]
 800d040:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800d042:	4b23      	ldr	r3, [pc, #140]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d046:	f003 0301 	and.w	r3, r3, #1
 800d04a:	2b01      	cmp	r3, #1
 800d04c:	d114      	bne.n	800d078 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800d04e:	f7fa fe15 	bl	8007c7c <HAL_GetTick>
 800d052:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d054:	e00a      	b.n	800d06c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d056:	f7fa fe11 	bl	8007c7c <HAL_GetTick>
 800d05a:	4602      	mov	r2, r0
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	1ad3      	subs	r3, r2, r3
 800d060:	f241 3288 	movw	r2, #5000	; 0x1388
 800d064:	4293      	cmp	r3, r2
 800d066:	d901      	bls.n	800d06c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800d068:	2303      	movs	r3, #3
 800d06a:	e02a      	b.n	800d0c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d06c:	4b18      	ldr	r3, [pc, #96]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d06e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d070:	f003 0302 	and.w	r3, r3, #2
 800d074:	2b00      	cmp	r3, #0
 800d076:	d0ee      	beq.n	800d056 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	68db      	ldr	r3, [r3, #12]
 800d07c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d080:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d084:	d10d      	bne.n	800d0a2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800d086:	4b12      	ldr	r3, [pc, #72]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d088:	689b      	ldr	r3, [r3, #8]
 800d08a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	68db      	ldr	r3, [r3, #12]
 800d092:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d09a:	490d      	ldr	r1, [pc, #52]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d09c:	4313      	orrs	r3, r2
 800d09e:	608b      	str	r3, [r1, #8]
 800d0a0:	e005      	b.n	800d0ae <HAL_RCCEx_PeriphCLKConfig+0x196>
 800d0a2:	4b0b      	ldr	r3, [pc, #44]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d0a4:	689b      	ldr	r3, [r3, #8]
 800d0a6:	4a0a      	ldr	r2, [pc, #40]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d0a8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800d0ac:	6093      	str	r3, [r2, #8]
 800d0ae:	4b08      	ldr	r3, [pc, #32]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d0b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	68db      	ldr	r3, [r3, #12]
 800d0b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d0ba:	4905      	ldr	r1, [pc, #20]	; (800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800d0bc:	4313      	orrs	r3, r2
 800d0be:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800d0c0:	2300      	movs	r3, #0
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3718      	adds	r7, #24
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	42470068 	.word	0x42470068
 800d0d0:	40023800 	.word	0x40023800
 800d0d4:	40007000 	.word	0x40007000
 800d0d8:	42470e40 	.word	0x42470e40

0800d0dc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b082      	sub	sp, #8
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d101      	bne.n	800d0ee <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	e083      	b.n	800d1f6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	7f5b      	ldrb	r3, [r3, #29]
 800d0f2:	b2db      	uxtb	r3, r3
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d105      	bne.n	800d104 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f7f8 fcf6 	bl	8005af0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2202      	movs	r2, #2
 800d108:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	22ca      	movs	r2, #202	; 0xca
 800d110:	625a      	str	r2, [r3, #36]	; 0x24
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	2253      	movs	r2, #83	; 0x53
 800d118:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f000 f897 	bl	800d24e <RTC_EnterInitMode>
 800d120:	4603      	mov	r3, r0
 800d122:	2b00      	cmp	r3, #0
 800d124:	d008      	beq.n	800d138 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	22ff      	movs	r2, #255	; 0xff
 800d12c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2204      	movs	r2, #4
 800d132:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800d134:	2301      	movs	r3, #1
 800d136:	e05e      	b.n	800d1f6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	689b      	ldr	r3, [r3, #8]
 800d13e:	687a      	ldr	r2, [r7, #4]
 800d140:	6812      	ldr	r2, [r2, #0]
 800d142:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d146:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d14a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	6899      	ldr	r1, [r3, #8]
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	685a      	ldr	r2, [r3, #4]
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	691b      	ldr	r3, [r3, #16]
 800d15a:	431a      	orrs	r2, r3
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	695b      	ldr	r3, [r3, #20]
 800d160:	431a      	orrs	r2, r3
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	430a      	orrs	r2, r1
 800d168:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	687a      	ldr	r2, [r7, #4]
 800d170:	68d2      	ldr	r2, [r2, #12]
 800d172:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	6919      	ldr	r1, [r3, #16]
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	689b      	ldr	r3, [r3, #8]
 800d17e:	041a      	lsls	r2, r3, #16
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	430a      	orrs	r2, r1
 800d186:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	68da      	ldr	r2, [r3, #12]
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d196:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	689b      	ldr	r3, [r3, #8]
 800d19e:	f003 0320 	and.w	r3, r3, #32
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d10e      	bne.n	800d1c4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f000 f829 	bl	800d1fe <HAL_RTC_WaitForSynchro>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d008      	beq.n	800d1c4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	22ff      	movs	r2, #255	; 0xff
 800d1b8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2204      	movs	r2, #4
 800d1be:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	e018      	b.n	800d1f6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d1d2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	699a      	ldr	r2, [r3, #24]
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	430a      	orrs	r2, r1
 800d1e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	22ff      	movs	r2, #255	; 0xff
 800d1ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800d1f4:	2300      	movs	r3, #0
  }
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	3708      	adds	r7, #8
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}

0800d1fe <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800d1fe:	b580      	push	{r7, lr}
 800d200:	b084      	sub	sp, #16
 800d202:	af00      	add	r7, sp, #0
 800d204:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d206:	2300      	movs	r3, #0
 800d208:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	68da      	ldr	r2, [r3, #12]
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d218:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d21a:	f7fa fd2f 	bl	8007c7c <HAL_GetTick>
 800d21e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d220:	e009      	b.n	800d236 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d222:	f7fa fd2b 	bl	8007c7c <HAL_GetTick>
 800d226:	4602      	mov	r2, r0
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	1ad3      	subs	r3, r2, r3
 800d22c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d230:	d901      	bls.n	800d236 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800d232:	2303      	movs	r3, #3
 800d234:	e007      	b.n	800d246 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	68db      	ldr	r3, [r3, #12]
 800d23c:	f003 0320 	and.w	r3, r3, #32
 800d240:	2b00      	cmp	r3, #0
 800d242:	d0ee      	beq.n	800d222 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800d244:	2300      	movs	r3, #0
}
 800d246:	4618      	mov	r0, r3
 800d248:	3710      	adds	r7, #16
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}

0800d24e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800d24e:	b580      	push	{r7, lr}
 800d250:	b084      	sub	sp, #16
 800d252:	af00      	add	r7, sp, #0
 800d254:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d256:	2300      	movs	r3, #0
 800d258:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	68db      	ldr	r3, [r3, #12]
 800d260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d264:	2b00      	cmp	r3, #0
 800d266:	d119      	bne.n	800d29c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f04f 32ff 	mov.w	r2, #4294967295
 800d270:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d272:	f7fa fd03 	bl	8007c7c <HAL_GetTick>
 800d276:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d278:	e009      	b.n	800d28e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d27a:	f7fa fcff 	bl	8007c7c <HAL_GetTick>
 800d27e:	4602      	mov	r2, r0
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	1ad3      	subs	r3, r2, r3
 800d284:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d288:	d901      	bls.n	800d28e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800d28a:	2303      	movs	r3, #3
 800d28c:	e007      	b.n	800d29e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	68db      	ldr	r3, [r3, #12]
 800d294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d0ee      	beq.n	800d27a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800d29c:	2300      	movs	r3, #0
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3710      	adds	r7, #16
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}

0800d2a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d2a6:	b580      	push	{r7, lr}
 800d2a8:	b082      	sub	sp, #8
 800d2aa:	af00      	add	r7, sp, #0
 800d2ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d101      	bne.n	800d2b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	e01d      	b.n	800d2f4 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d2be:	b2db      	uxtb	r3, r3
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d106      	bne.n	800d2d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f7fa fb3f 	bl	8007950 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2202      	movs	r2, #2
 800d2d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681a      	ldr	r2, [r3, #0]
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	3304      	adds	r3, #4
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	4610      	mov	r0, r2
 800d2e6:	f000 fcaf 	bl	800dc48 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2201      	movs	r2, #1
 800d2ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d2f2:	2300      	movs	r3, #0
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	3708      	adds	r7, #8
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}

0800d2fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b085      	sub	sp, #20
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	68da      	ldr	r2, [r3, #12]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	f042 0201 	orr.w	r2, r2, #1
 800d312:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	689b      	ldr	r3, [r3, #8]
 800d31a:	f003 0307 	and.w	r3, r3, #7
 800d31e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	2b06      	cmp	r3, #6
 800d324:	d007      	beq.n	800d336 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	681a      	ldr	r2, [r3, #0]
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f042 0201 	orr.w	r2, r2, #1
 800d334:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d336:	2300      	movs	r3, #0
}
 800d338:	4618      	mov	r0, r3
 800d33a:	3714      	adds	r7, #20
 800d33c:	46bd      	mov	sp, r7
 800d33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d342:	4770      	bx	lr

0800d344 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b082      	sub	sp, #8
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d101      	bne.n	800d356 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d352:	2301      	movs	r3, #1
 800d354:	e01d      	b.n	800d392 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d35c:	b2db      	uxtb	r3, r3
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d106      	bne.n	800d370 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2200      	movs	r2, #0
 800d366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f7fa face 	bl	800790c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2202      	movs	r2, #2
 800d374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681a      	ldr	r2, [r3, #0]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	3304      	adds	r3, #4
 800d380:	4619      	mov	r1, r3
 800d382:	4610      	mov	r0, r2
 800d384:	f000 fc60 	bl	800dc48 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2201      	movs	r2, #1
 800d38c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d390:	2300      	movs	r3, #0
}
 800d392:	4618      	mov	r0, r3
 800d394:	3708      	adds	r7, #8
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
	...

0800d39c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b084      	sub	sp, #16
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
 800d3a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	2201      	movs	r2, #1
 800d3ac:	6839      	ldr	r1, [r7, #0]
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f001 f85e 	bl	800e470 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	4a15      	ldr	r2, [pc, #84]	; (800d410 <HAL_TIM_PWM_Start+0x74>)
 800d3ba:	4293      	cmp	r3, r2
 800d3bc:	d004      	beq.n	800d3c8 <HAL_TIM_PWM_Start+0x2c>
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	4a14      	ldr	r2, [pc, #80]	; (800d414 <HAL_TIM_PWM_Start+0x78>)
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d101      	bne.n	800d3cc <HAL_TIM_PWM_Start+0x30>
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	e000      	b.n	800d3ce <HAL_TIM_PWM_Start+0x32>
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d007      	beq.n	800d3e2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d3e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	689b      	ldr	r3, [r3, #8]
 800d3e8:	f003 0307 	and.w	r3, r3, #7
 800d3ec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	2b06      	cmp	r3, #6
 800d3f2:	d007      	beq.n	800d404 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	681a      	ldr	r2, [r3, #0]
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	f042 0201 	orr.w	r2, r2, #1
 800d402:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d404:	2300      	movs	r3, #0
}
 800d406:	4618      	mov	r0, r3
 800d408:	3710      	adds	r7, #16
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
 800d40e:	bf00      	nop
 800d410:	40010000 	.word	0x40010000
 800d414:	40010400 	.word	0x40010400

0800d418 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b082      	sub	sp, #8
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d101      	bne.n	800d42a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800d426:	2301      	movs	r3, #1
 800d428:	e01d      	b.n	800d466 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d430:	b2db      	uxtb	r3, r3
 800d432:	2b00      	cmp	r3, #0
 800d434:	d106      	bne.n	800d444 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2200      	movs	r2, #0
 800d43a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f000 f815 	bl	800d46e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2202      	movs	r2, #2
 800d448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681a      	ldr	r2, [r3, #0]
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	3304      	adds	r3, #4
 800d454:	4619      	mov	r1, r3
 800d456:	4610      	mov	r0, r2
 800d458:	f000 fbf6 	bl	800dc48 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2201      	movs	r2, #1
 800d460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d464:	2300      	movs	r3, #0
}
 800d466:	4618      	mov	r0, r3
 800d468:	3708      	adds	r7, #8
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}

0800d46e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800d46e:	b480      	push	{r7}
 800d470:	b083      	sub	sp, #12
 800d472:	af00      	add	r7, sp, #0
 800d474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800d476:	bf00      	nop
 800d478:	370c      	adds	r7, #12
 800d47a:	46bd      	mov	sp, r7
 800d47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d480:	4770      	bx	lr
	...

0800d484 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b084      	sub	sp, #16
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
 800d48c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	2b0c      	cmp	r3, #12
 800d492:	d841      	bhi.n	800d518 <HAL_TIM_IC_Start_IT+0x94>
 800d494:	a201      	add	r2, pc, #4	; (adr r2, 800d49c <HAL_TIM_IC_Start_IT+0x18>)
 800d496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d49a:	bf00      	nop
 800d49c:	0800d4d1 	.word	0x0800d4d1
 800d4a0:	0800d519 	.word	0x0800d519
 800d4a4:	0800d519 	.word	0x0800d519
 800d4a8:	0800d519 	.word	0x0800d519
 800d4ac:	0800d4e3 	.word	0x0800d4e3
 800d4b0:	0800d519 	.word	0x0800d519
 800d4b4:	0800d519 	.word	0x0800d519
 800d4b8:	0800d519 	.word	0x0800d519
 800d4bc:	0800d4f5 	.word	0x0800d4f5
 800d4c0:	0800d519 	.word	0x0800d519
 800d4c4:	0800d519 	.word	0x0800d519
 800d4c8:	0800d519 	.word	0x0800d519
 800d4cc:	0800d507 	.word	0x0800d507
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	68da      	ldr	r2, [r3, #12]
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	f042 0202 	orr.w	r2, r2, #2
 800d4de:	60da      	str	r2, [r3, #12]
      break;
 800d4e0:	e01b      	b.n	800d51a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	68da      	ldr	r2, [r3, #12]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f042 0204 	orr.w	r2, r2, #4
 800d4f0:	60da      	str	r2, [r3, #12]
      break;
 800d4f2:	e012      	b.n	800d51a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	68da      	ldr	r2, [r3, #12]
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	f042 0208 	orr.w	r2, r2, #8
 800d502:	60da      	str	r2, [r3, #12]
      break;
 800d504:	e009      	b.n	800d51a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	68da      	ldr	r2, [r3, #12]
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	f042 0210 	orr.w	r2, r2, #16
 800d514:	60da      	str	r2, [r3, #12]
      break;
 800d516:	e000      	b.n	800d51a <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 800d518:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	2201      	movs	r2, #1
 800d520:	6839      	ldr	r1, [r7, #0]
 800d522:	4618      	mov	r0, r3
 800d524:	f000 ffa4 	bl	800e470 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	689b      	ldr	r3, [r3, #8]
 800d52e:	f003 0307 	and.w	r3, r3, #7
 800d532:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	2b06      	cmp	r3, #6
 800d538:	d007      	beq.n	800d54a <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	681a      	ldr	r2, [r3, #0]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	f042 0201 	orr.w	r2, r2, #1
 800d548:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d54a:	2300      	movs	r3, #0
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3710      	adds	r7, #16
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}

0800d554 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b082      	sub	sp, #8
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	691b      	ldr	r3, [r3, #16]
 800d562:	f003 0302 	and.w	r3, r3, #2
 800d566:	2b02      	cmp	r3, #2
 800d568:	d122      	bne.n	800d5b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	68db      	ldr	r3, [r3, #12]
 800d570:	f003 0302 	and.w	r3, r3, #2
 800d574:	2b02      	cmp	r3, #2
 800d576:	d11b      	bne.n	800d5b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	f06f 0202 	mvn.w	r2, #2
 800d580:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2201      	movs	r2, #1
 800d586:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	699b      	ldr	r3, [r3, #24]
 800d58e:	f003 0303 	and.w	r3, r3, #3
 800d592:	2b00      	cmp	r3, #0
 800d594:	d003      	beq.n	800d59e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f7f8 f8fa 	bl	8005790 <HAL_TIM_IC_CaptureCallback>
 800d59c:	e005      	b.n	800d5aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f000 fb3e 	bl	800dc20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	f7f8 fa6b 	bl	8005a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	691b      	ldr	r3, [r3, #16]
 800d5b6:	f003 0304 	and.w	r3, r3, #4
 800d5ba:	2b04      	cmp	r3, #4
 800d5bc:	d122      	bne.n	800d604 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	68db      	ldr	r3, [r3, #12]
 800d5c4:	f003 0304 	and.w	r3, r3, #4
 800d5c8:	2b04      	cmp	r3, #4
 800d5ca:	d11b      	bne.n	800d604 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	f06f 0204 	mvn.w	r2, #4
 800d5d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2202      	movs	r2, #2
 800d5da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	699b      	ldr	r3, [r3, #24]
 800d5e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d003      	beq.n	800d5f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f7f8 f8d0 	bl	8005790 <HAL_TIM_IC_CaptureCallback>
 800d5f0:	e005      	b.n	800d5fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f000 fb14 	bl	800dc20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f7f8 fa41 	bl	8005a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2200      	movs	r2, #0
 800d602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	691b      	ldr	r3, [r3, #16]
 800d60a:	f003 0308 	and.w	r3, r3, #8
 800d60e:	2b08      	cmp	r3, #8
 800d610:	d122      	bne.n	800d658 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	68db      	ldr	r3, [r3, #12]
 800d618:	f003 0308 	and.w	r3, r3, #8
 800d61c:	2b08      	cmp	r3, #8
 800d61e:	d11b      	bne.n	800d658 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	f06f 0208 	mvn.w	r2, #8
 800d628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2204      	movs	r2, #4
 800d62e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	69db      	ldr	r3, [r3, #28]
 800d636:	f003 0303 	and.w	r3, r3, #3
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d003      	beq.n	800d646 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f7f8 f8a6 	bl	8005790 <HAL_TIM_IC_CaptureCallback>
 800d644:	e005      	b.n	800d652 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f000 faea 	bl	800dc20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f7f8 fa17 	bl	8005a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2200      	movs	r2, #0
 800d656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	691b      	ldr	r3, [r3, #16]
 800d65e:	f003 0310 	and.w	r3, r3, #16
 800d662:	2b10      	cmp	r3, #16
 800d664:	d122      	bne.n	800d6ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	68db      	ldr	r3, [r3, #12]
 800d66c:	f003 0310 	and.w	r3, r3, #16
 800d670:	2b10      	cmp	r3, #16
 800d672:	d11b      	bne.n	800d6ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	f06f 0210 	mvn.w	r2, #16
 800d67c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2208      	movs	r2, #8
 800d682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	69db      	ldr	r3, [r3, #28]
 800d68a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d003      	beq.n	800d69a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f7f8 f87c 	bl	8005790 <HAL_TIM_IC_CaptureCallback>
 800d698:	e005      	b.n	800d6a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f000 fac0 	bl	800dc20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6a0:	6878      	ldr	r0, [r7, #4]
 800d6a2:	f7f8 f9ed 	bl	8005a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	691b      	ldr	r3, [r3, #16]
 800d6b2:	f003 0301 	and.w	r3, r3, #1
 800d6b6:	2b01      	cmp	r3, #1
 800d6b8:	d10e      	bne.n	800d6d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	68db      	ldr	r3, [r3, #12]
 800d6c0:	f003 0301 	and.w	r3, r3, #1
 800d6c4:	2b01      	cmp	r3, #1
 800d6c6:	d107      	bne.n	800d6d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	f06f 0201 	mvn.w	r2, #1
 800d6d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f7f8 f90e 	bl	80058f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	691b      	ldr	r3, [r3, #16]
 800d6de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6e2:	2b80      	cmp	r3, #128	; 0x80
 800d6e4:	d10e      	bne.n	800d704 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	68db      	ldr	r3, [r3, #12]
 800d6ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6f0:	2b80      	cmp	r3, #128	; 0x80
 800d6f2:	d107      	bne.n	800d704 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d6fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f000 ffb4 	bl	800e66c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	691b      	ldr	r3, [r3, #16]
 800d70a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d70e:	2b40      	cmp	r3, #64	; 0x40
 800d710:	d10e      	bne.n	800d730 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	68db      	ldr	r3, [r3, #12]
 800d718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d71c:	2b40      	cmp	r3, #64	; 0x40
 800d71e:	d107      	bne.n	800d730 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f000 fa82 	bl	800dc34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	691b      	ldr	r3, [r3, #16]
 800d736:	f003 0320 	and.w	r3, r3, #32
 800d73a:	2b20      	cmp	r3, #32
 800d73c:	d10e      	bne.n	800d75c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	68db      	ldr	r3, [r3, #12]
 800d744:	f003 0320 	and.w	r3, r3, #32
 800d748:	2b20      	cmp	r3, #32
 800d74a:	d107      	bne.n	800d75c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	f06f 0220 	mvn.w	r2, #32
 800d754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f000 ff7e 	bl	800e658 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d75c:	bf00      	nop
 800d75e:	3708      	adds	r7, #8
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}

0800d764 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b084      	sub	sp, #16
 800d768:	af00      	add	r7, sp, #0
 800d76a:	60f8      	str	r0, [r7, #12]
 800d76c:	60b9      	str	r1, [r7, #8]
 800d76e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d776:	2b01      	cmp	r3, #1
 800d778:	d101      	bne.n	800d77e <HAL_TIM_IC_ConfigChannel+0x1a>
 800d77a:	2302      	movs	r3, #2
 800d77c:	e08a      	b.n	800d894 <HAL_TIM_IC_ConfigChannel+0x130>
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	2201      	movs	r2, #1
 800d782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	2202      	movs	r2, #2
 800d78a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d11b      	bne.n	800d7cc <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	6818      	ldr	r0, [r3, #0]
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	6819      	ldr	r1, [r3, #0]
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	685a      	ldr	r2, [r3, #4]
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	68db      	ldr	r3, [r3, #12]
 800d7a4:	f000 fca0 	bl	800e0e8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	699a      	ldr	r2, [r3, #24]
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	f022 020c 	bic.w	r2, r2, #12
 800d7b6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	6999      	ldr	r1, [r3, #24]
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	689a      	ldr	r2, [r3, #8]
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	430a      	orrs	r2, r1
 800d7c8:	619a      	str	r2, [r3, #24]
 800d7ca:	e05a      	b.n	800d882 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2b04      	cmp	r3, #4
 800d7d0:	d11c      	bne.n	800d80c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	6818      	ldr	r0, [r3, #0]
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	6819      	ldr	r1, [r3, #0]
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	685a      	ldr	r2, [r3, #4]
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	68db      	ldr	r3, [r3, #12]
 800d7e2:	f000 fd24 	bl	800e22e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	699a      	ldr	r2, [r3, #24]
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d7f4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	6999      	ldr	r1, [r3, #24]
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	689b      	ldr	r3, [r3, #8]
 800d800:	021a      	lsls	r2, r3, #8
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	430a      	orrs	r2, r1
 800d808:	619a      	str	r2, [r3, #24]
 800d80a:	e03a      	b.n	800d882 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2b08      	cmp	r3, #8
 800d810:	d11b      	bne.n	800d84a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	6818      	ldr	r0, [r3, #0]
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	6819      	ldr	r1, [r3, #0]
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	685a      	ldr	r2, [r3, #4]
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	68db      	ldr	r3, [r3, #12]
 800d822:	f000 fd71 	bl	800e308 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	69da      	ldr	r2, [r3, #28]
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	f022 020c 	bic.w	r2, r2, #12
 800d834:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	69d9      	ldr	r1, [r3, #28]
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	689a      	ldr	r2, [r3, #8]
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	430a      	orrs	r2, r1
 800d846:	61da      	str	r2, [r3, #28]
 800d848:	e01b      	b.n	800d882 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	6818      	ldr	r0, [r3, #0]
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	6819      	ldr	r1, [r3, #0]
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	685a      	ldr	r2, [r3, #4]
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	68db      	ldr	r3, [r3, #12]
 800d85a:	f000 fd91 	bl	800e380 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	69da      	ldr	r2, [r3, #28]
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800d86c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	69d9      	ldr	r1, [r3, #28]
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	689b      	ldr	r3, [r3, #8]
 800d878:	021a      	lsls	r2, r3, #8
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	430a      	orrs	r2, r1
 800d880:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	2201      	movs	r2, #1
 800d886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	2200      	movs	r2, #0
 800d88e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d892:	2300      	movs	r3, #0
}
 800d894:	4618      	mov	r0, r3
 800d896:	3710      	adds	r7, #16
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}

0800d89c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b084      	sub	sp, #16
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	60f8      	str	r0, [r7, #12]
 800d8a4:	60b9      	str	r1, [r7, #8]
 800d8a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d8ae:	2b01      	cmp	r3, #1
 800d8b0:	d101      	bne.n	800d8b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800d8b2:	2302      	movs	r3, #2
 800d8b4:	e0b4      	b.n	800da20 <HAL_TIM_PWM_ConfigChannel+0x184>
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	2201      	movs	r2, #1
 800d8ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	2202      	movs	r2, #2
 800d8c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2b0c      	cmp	r3, #12
 800d8ca:	f200 809f 	bhi.w	800da0c <HAL_TIM_PWM_ConfigChannel+0x170>
 800d8ce:	a201      	add	r2, pc, #4	; (adr r2, 800d8d4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800d8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8d4:	0800d909 	.word	0x0800d909
 800d8d8:	0800da0d 	.word	0x0800da0d
 800d8dc:	0800da0d 	.word	0x0800da0d
 800d8e0:	0800da0d 	.word	0x0800da0d
 800d8e4:	0800d949 	.word	0x0800d949
 800d8e8:	0800da0d 	.word	0x0800da0d
 800d8ec:	0800da0d 	.word	0x0800da0d
 800d8f0:	0800da0d 	.word	0x0800da0d
 800d8f4:	0800d98b 	.word	0x0800d98b
 800d8f8:	0800da0d 	.word	0x0800da0d
 800d8fc:	0800da0d 	.word	0x0800da0d
 800d900:	0800da0d 	.word	0x0800da0d
 800d904:	0800d9cb 	.word	0x0800d9cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	68b9      	ldr	r1, [r7, #8]
 800d90e:	4618      	mov	r0, r3
 800d910:	f000 fa3a 	bl	800dd88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	699a      	ldr	r2, [r3, #24]
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f042 0208 	orr.w	r2, r2, #8
 800d922:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	699a      	ldr	r2, [r3, #24]
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	f022 0204 	bic.w	r2, r2, #4
 800d932:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	6999      	ldr	r1, [r3, #24]
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	691a      	ldr	r2, [r3, #16]
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	430a      	orrs	r2, r1
 800d944:	619a      	str	r2, [r3, #24]
      break;
 800d946:	e062      	b.n	800da0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	68b9      	ldr	r1, [r7, #8]
 800d94e:	4618      	mov	r0, r3
 800d950:	f000 fa8a 	bl	800de68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	699a      	ldr	r2, [r3, #24]
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d962:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	699a      	ldr	r2, [r3, #24]
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	6999      	ldr	r1, [r3, #24]
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	691b      	ldr	r3, [r3, #16]
 800d97e:	021a      	lsls	r2, r3, #8
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	430a      	orrs	r2, r1
 800d986:	619a      	str	r2, [r3, #24]
      break;
 800d988:	e041      	b.n	800da0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	68b9      	ldr	r1, [r7, #8]
 800d990:	4618      	mov	r0, r3
 800d992:	f000 fadf 	bl	800df54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	69da      	ldr	r2, [r3, #28]
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	f042 0208 	orr.w	r2, r2, #8
 800d9a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	69da      	ldr	r2, [r3, #28]
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	f022 0204 	bic.w	r2, r2, #4
 800d9b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	69d9      	ldr	r1, [r3, #28]
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	691a      	ldr	r2, [r3, #16]
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	430a      	orrs	r2, r1
 800d9c6:	61da      	str	r2, [r3, #28]
      break;
 800d9c8:	e021      	b.n	800da0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	68b9      	ldr	r1, [r7, #8]
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f000 fb33 	bl	800e03c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	69da      	ldr	r2, [r3, #28]
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d9e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	69da      	ldr	r2, [r3, #28]
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d9f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	69d9      	ldr	r1, [r3, #28]
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	691b      	ldr	r3, [r3, #16]
 800da00:	021a      	lsls	r2, r3, #8
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	430a      	orrs	r2, r1
 800da08:	61da      	str	r2, [r3, #28]
      break;
 800da0a:	e000      	b.n	800da0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800da0c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	2201      	movs	r2, #1
 800da12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	2200      	movs	r2, #0
 800da1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800da1e:	2300      	movs	r3, #0
}
 800da20:	4618      	mov	r0, r3
 800da22:	3710      	adds	r7, #16
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}

0800da28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b084      	sub	sp, #16
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da38:	2b01      	cmp	r3, #1
 800da3a:	d101      	bne.n	800da40 <HAL_TIM_ConfigClockSource+0x18>
 800da3c:	2302      	movs	r3, #2
 800da3e:	e0a6      	b.n	800db8e <HAL_TIM_ConfigClockSource+0x166>
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2201      	movs	r2, #1
 800da44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2202      	movs	r2, #2
 800da4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	689b      	ldr	r3, [r3, #8]
 800da56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800da5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800da66:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	68fa      	ldr	r2, [r7, #12]
 800da6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	2b40      	cmp	r3, #64	; 0x40
 800da76:	d067      	beq.n	800db48 <HAL_TIM_ConfigClockSource+0x120>
 800da78:	2b40      	cmp	r3, #64	; 0x40
 800da7a:	d80b      	bhi.n	800da94 <HAL_TIM_ConfigClockSource+0x6c>
 800da7c:	2b10      	cmp	r3, #16
 800da7e:	d073      	beq.n	800db68 <HAL_TIM_ConfigClockSource+0x140>
 800da80:	2b10      	cmp	r3, #16
 800da82:	d802      	bhi.n	800da8a <HAL_TIM_ConfigClockSource+0x62>
 800da84:	2b00      	cmp	r3, #0
 800da86:	d06f      	beq.n	800db68 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800da88:	e078      	b.n	800db7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800da8a:	2b20      	cmp	r3, #32
 800da8c:	d06c      	beq.n	800db68 <HAL_TIM_ConfigClockSource+0x140>
 800da8e:	2b30      	cmp	r3, #48	; 0x30
 800da90:	d06a      	beq.n	800db68 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800da92:	e073      	b.n	800db7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800da94:	2b70      	cmp	r3, #112	; 0x70
 800da96:	d00d      	beq.n	800dab4 <HAL_TIM_ConfigClockSource+0x8c>
 800da98:	2b70      	cmp	r3, #112	; 0x70
 800da9a:	d804      	bhi.n	800daa6 <HAL_TIM_ConfigClockSource+0x7e>
 800da9c:	2b50      	cmp	r3, #80	; 0x50
 800da9e:	d033      	beq.n	800db08 <HAL_TIM_ConfigClockSource+0xe0>
 800daa0:	2b60      	cmp	r3, #96	; 0x60
 800daa2:	d041      	beq.n	800db28 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800daa4:	e06a      	b.n	800db7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800daa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800daaa:	d066      	beq.n	800db7a <HAL_TIM_ConfigClockSource+0x152>
 800daac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dab0:	d017      	beq.n	800dae2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800dab2:	e063      	b.n	800db7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6818      	ldr	r0, [r3, #0]
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	6899      	ldr	r1, [r3, #8]
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	685a      	ldr	r2, [r3, #4]
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	68db      	ldr	r3, [r3, #12]
 800dac4:	f000 fcb4 	bl	800e430 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	689b      	ldr	r3, [r3, #8]
 800dace:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800dad6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	68fa      	ldr	r2, [r7, #12]
 800dade:	609a      	str	r2, [r3, #8]
      break;
 800dae0:	e04c      	b.n	800db7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6818      	ldr	r0, [r3, #0]
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	6899      	ldr	r1, [r3, #8]
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	685a      	ldr	r2, [r3, #4]
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	68db      	ldr	r3, [r3, #12]
 800daf2:	f000 fc9d 	bl	800e430 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	689a      	ldr	r2, [r3, #8]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800db04:	609a      	str	r2, [r3, #8]
      break;
 800db06:	e039      	b.n	800db7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6818      	ldr	r0, [r3, #0]
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	6859      	ldr	r1, [r3, #4]
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	68db      	ldr	r3, [r3, #12]
 800db14:	461a      	mov	r2, r3
 800db16:	f000 fb5b 	bl	800e1d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	2150      	movs	r1, #80	; 0x50
 800db20:	4618      	mov	r0, r3
 800db22:	f000 fc6a 	bl	800e3fa <TIM_ITRx_SetConfig>
      break;
 800db26:	e029      	b.n	800db7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6818      	ldr	r0, [r3, #0]
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	6859      	ldr	r1, [r3, #4]
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	68db      	ldr	r3, [r3, #12]
 800db34:	461a      	mov	r2, r3
 800db36:	f000 fbb7 	bl	800e2a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	2160      	movs	r1, #96	; 0x60
 800db40:	4618      	mov	r0, r3
 800db42:	f000 fc5a 	bl	800e3fa <TIM_ITRx_SetConfig>
      break;
 800db46:	e019      	b.n	800db7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6818      	ldr	r0, [r3, #0]
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	6859      	ldr	r1, [r3, #4]
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	68db      	ldr	r3, [r3, #12]
 800db54:	461a      	mov	r2, r3
 800db56:	f000 fb3b 	bl	800e1d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	2140      	movs	r1, #64	; 0x40
 800db60:	4618      	mov	r0, r3
 800db62:	f000 fc4a 	bl	800e3fa <TIM_ITRx_SetConfig>
      break;
 800db66:	e009      	b.n	800db7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681a      	ldr	r2, [r3, #0]
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	4619      	mov	r1, r3
 800db72:	4610      	mov	r0, r2
 800db74:	f000 fc41 	bl	800e3fa <TIM_ITRx_SetConfig>
      break;
 800db78:	e000      	b.n	800db7c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800db7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2201      	movs	r2, #1
 800db80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2200      	movs	r2, #0
 800db88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800db8c:	2300      	movs	r3, #0
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3710      	adds	r7, #16
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}
	...

0800db98 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800db98:	b480      	push	{r7}
 800db9a:	b085      	sub	sp, #20
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
 800dba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800dba2:	2300      	movs	r3, #0
 800dba4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	2b0c      	cmp	r3, #12
 800dbaa:	d831      	bhi.n	800dc10 <HAL_TIM_ReadCapturedValue+0x78>
 800dbac:	a201      	add	r2, pc, #4	; (adr r2, 800dbb4 <HAL_TIM_ReadCapturedValue+0x1c>)
 800dbae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbb2:	bf00      	nop
 800dbb4:	0800dbe9 	.word	0x0800dbe9
 800dbb8:	0800dc11 	.word	0x0800dc11
 800dbbc:	0800dc11 	.word	0x0800dc11
 800dbc0:	0800dc11 	.word	0x0800dc11
 800dbc4:	0800dbf3 	.word	0x0800dbf3
 800dbc8:	0800dc11 	.word	0x0800dc11
 800dbcc:	0800dc11 	.word	0x0800dc11
 800dbd0:	0800dc11 	.word	0x0800dc11
 800dbd4:	0800dbfd 	.word	0x0800dbfd
 800dbd8:	0800dc11 	.word	0x0800dc11
 800dbdc:	0800dc11 	.word	0x0800dc11
 800dbe0:	0800dc11 	.word	0x0800dc11
 800dbe4:	0800dc07 	.word	0x0800dc07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbee:	60fb      	str	r3, [r7, #12]

      break;
 800dbf0:	e00f      	b.n	800dc12 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbf8:	60fb      	str	r3, [r7, #12]

      break;
 800dbfa:	e00a      	b.n	800dc12 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc02:	60fb      	str	r3, [r7, #12]

      break;
 800dc04:	e005      	b.n	800dc12 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc0c:	60fb      	str	r3, [r7, #12]

      break;
 800dc0e:	e000      	b.n	800dc12 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800dc10:	bf00      	nop
  }

  return tmpreg;
 800dc12:	68fb      	ldr	r3, [r7, #12]
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3714      	adds	r7, #20
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr

0800dc20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b083      	sub	sp, #12
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dc28:	bf00      	nop
 800dc2a:	370c      	adds	r7, #12
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc32:	4770      	bx	lr

0800dc34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dc34:	b480      	push	{r7}
 800dc36:	b083      	sub	sp, #12
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dc3c:	bf00      	nop
 800dc3e:	370c      	adds	r7, #12
 800dc40:	46bd      	mov	sp, r7
 800dc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc46:	4770      	bx	lr

0800dc48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b085      	sub	sp, #20
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	4a40      	ldr	r2, [pc, #256]	; (800dd5c <TIM_Base_SetConfig+0x114>)
 800dc5c:	4293      	cmp	r3, r2
 800dc5e:	d013      	beq.n	800dc88 <TIM_Base_SetConfig+0x40>
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc66:	d00f      	beq.n	800dc88 <TIM_Base_SetConfig+0x40>
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	4a3d      	ldr	r2, [pc, #244]	; (800dd60 <TIM_Base_SetConfig+0x118>)
 800dc6c:	4293      	cmp	r3, r2
 800dc6e:	d00b      	beq.n	800dc88 <TIM_Base_SetConfig+0x40>
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	4a3c      	ldr	r2, [pc, #240]	; (800dd64 <TIM_Base_SetConfig+0x11c>)
 800dc74:	4293      	cmp	r3, r2
 800dc76:	d007      	beq.n	800dc88 <TIM_Base_SetConfig+0x40>
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	4a3b      	ldr	r2, [pc, #236]	; (800dd68 <TIM_Base_SetConfig+0x120>)
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d003      	beq.n	800dc88 <TIM_Base_SetConfig+0x40>
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	4a3a      	ldr	r2, [pc, #232]	; (800dd6c <TIM_Base_SetConfig+0x124>)
 800dc84:	4293      	cmp	r3, r2
 800dc86:	d108      	bne.n	800dc9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	685b      	ldr	r3, [r3, #4]
 800dc94:	68fa      	ldr	r2, [r7, #12]
 800dc96:	4313      	orrs	r3, r2
 800dc98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	4a2f      	ldr	r2, [pc, #188]	; (800dd5c <TIM_Base_SetConfig+0x114>)
 800dc9e:	4293      	cmp	r3, r2
 800dca0:	d02b      	beq.n	800dcfa <TIM_Base_SetConfig+0xb2>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dca8:	d027      	beq.n	800dcfa <TIM_Base_SetConfig+0xb2>
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	4a2c      	ldr	r2, [pc, #176]	; (800dd60 <TIM_Base_SetConfig+0x118>)
 800dcae:	4293      	cmp	r3, r2
 800dcb0:	d023      	beq.n	800dcfa <TIM_Base_SetConfig+0xb2>
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	4a2b      	ldr	r2, [pc, #172]	; (800dd64 <TIM_Base_SetConfig+0x11c>)
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d01f      	beq.n	800dcfa <TIM_Base_SetConfig+0xb2>
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	4a2a      	ldr	r2, [pc, #168]	; (800dd68 <TIM_Base_SetConfig+0x120>)
 800dcbe:	4293      	cmp	r3, r2
 800dcc0:	d01b      	beq.n	800dcfa <TIM_Base_SetConfig+0xb2>
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	4a29      	ldr	r2, [pc, #164]	; (800dd6c <TIM_Base_SetConfig+0x124>)
 800dcc6:	4293      	cmp	r3, r2
 800dcc8:	d017      	beq.n	800dcfa <TIM_Base_SetConfig+0xb2>
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	4a28      	ldr	r2, [pc, #160]	; (800dd70 <TIM_Base_SetConfig+0x128>)
 800dcce:	4293      	cmp	r3, r2
 800dcd0:	d013      	beq.n	800dcfa <TIM_Base_SetConfig+0xb2>
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	4a27      	ldr	r2, [pc, #156]	; (800dd74 <TIM_Base_SetConfig+0x12c>)
 800dcd6:	4293      	cmp	r3, r2
 800dcd8:	d00f      	beq.n	800dcfa <TIM_Base_SetConfig+0xb2>
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	4a26      	ldr	r2, [pc, #152]	; (800dd78 <TIM_Base_SetConfig+0x130>)
 800dcde:	4293      	cmp	r3, r2
 800dce0:	d00b      	beq.n	800dcfa <TIM_Base_SetConfig+0xb2>
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	4a25      	ldr	r2, [pc, #148]	; (800dd7c <TIM_Base_SetConfig+0x134>)
 800dce6:	4293      	cmp	r3, r2
 800dce8:	d007      	beq.n	800dcfa <TIM_Base_SetConfig+0xb2>
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	4a24      	ldr	r2, [pc, #144]	; (800dd80 <TIM_Base_SetConfig+0x138>)
 800dcee:	4293      	cmp	r3, r2
 800dcf0:	d003      	beq.n	800dcfa <TIM_Base_SetConfig+0xb2>
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	4a23      	ldr	r2, [pc, #140]	; (800dd84 <TIM_Base_SetConfig+0x13c>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d108      	bne.n	800dd0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dd00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	68db      	ldr	r3, [r3, #12]
 800dd06:	68fa      	ldr	r2, [r7, #12]
 800dd08:	4313      	orrs	r3, r2
 800dd0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	695b      	ldr	r3, [r3, #20]
 800dd16:	4313      	orrs	r3, r2
 800dd18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	68fa      	ldr	r2, [r7, #12]
 800dd1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	689a      	ldr	r2, [r3, #8]
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	681a      	ldr	r2, [r3, #0]
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	4a0a      	ldr	r2, [pc, #40]	; (800dd5c <TIM_Base_SetConfig+0x114>)
 800dd34:	4293      	cmp	r3, r2
 800dd36:	d003      	beq.n	800dd40 <TIM_Base_SetConfig+0xf8>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	4a0c      	ldr	r2, [pc, #48]	; (800dd6c <TIM_Base_SetConfig+0x124>)
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	d103      	bne.n	800dd48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	691a      	ldr	r2, [r3, #16]
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2201      	movs	r2, #1
 800dd4c:	615a      	str	r2, [r3, #20]
}
 800dd4e:	bf00      	nop
 800dd50:	3714      	adds	r7, #20
 800dd52:	46bd      	mov	sp, r7
 800dd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd58:	4770      	bx	lr
 800dd5a:	bf00      	nop
 800dd5c:	40010000 	.word	0x40010000
 800dd60:	40000400 	.word	0x40000400
 800dd64:	40000800 	.word	0x40000800
 800dd68:	40000c00 	.word	0x40000c00
 800dd6c:	40010400 	.word	0x40010400
 800dd70:	40014000 	.word	0x40014000
 800dd74:	40014400 	.word	0x40014400
 800dd78:	40014800 	.word	0x40014800
 800dd7c:	40001800 	.word	0x40001800
 800dd80:	40001c00 	.word	0x40001c00
 800dd84:	40002000 	.word	0x40002000

0800dd88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b087      	sub	sp, #28
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6a1b      	ldr	r3, [r3, #32]
 800dd96:	f023 0201 	bic.w	r2, r3, #1
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	6a1b      	ldr	r3, [r3, #32]
 800dda2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	685b      	ldr	r3, [r3, #4]
 800dda8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	699b      	ldr	r3, [r3, #24]
 800ddae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ddb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	f023 0303 	bic.w	r3, r3, #3
 800ddbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	68fa      	ldr	r2, [r7, #12]
 800ddc6:	4313      	orrs	r3, r2
 800ddc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	f023 0302 	bic.w	r3, r3, #2
 800ddd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	689b      	ldr	r3, [r3, #8]
 800ddd6:	697a      	ldr	r2, [r7, #20]
 800ddd8:	4313      	orrs	r3, r2
 800ddda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	4a20      	ldr	r2, [pc, #128]	; (800de60 <TIM_OC1_SetConfig+0xd8>)
 800dde0:	4293      	cmp	r3, r2
 800dde2:	d003      	beq.n	800ddec <TIM_OC1_SetConfig+0x64>
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	4a1f      	ldr	r2, [pc, #124]	; (800de64 <TIM_OC1_SetConfig+0xdc>)
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d10c      	bne.n	800de06 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	f023 0308 	bic.w	r3, r3, #8
 800ddf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	68db      	ldr	r3, [r3, #12]
 800ddf8:	697a      	ldr	r2, [r7, #20]
 800ddfa:	4313      	orrs	r3, r2
 800ddfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ddfe:	697b      	ldr	r3, [r7, #20]
 800de00:	f023 0304 	bic.w	r3, r3, #4
 800de04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	4a15      	ldr	r2, [pc, #84]	; (800de60 <TIM_OC1_SetConfig+0xd8>)
 800de0a:	4293      	cmp	r3, r2
 800de0c:	d003      	beq.n	800de16 <TIM_OC1_SetConfig+0x8e>
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	4a14      	ldr	r2, [pc, #80]	; (800de64 <TIM_OC1_SetConfig+0xdc>)
 800de12:	4293      	cmp	r3, r2
 800de14:	d111      	bne.n	800de3a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800de1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800de1e:	693b      	ldr	r3, [r7, #16]
 800de20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800de24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	695b      	ldr	r3, [r3, #20]
 800de2a:	693a      	ldr	r2, [r7, #16]
 800de2c:	4313      	orrs	r3, r2
 800de2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800de30:	683b      	ldr	r3, [r7, #0]
 800de32:	699b      	ldr	r3, [r3, #24]
 800de34:	693a      	ldr	r2, [r7, #16]
 800de36:	4313      	orrs	r3, r2
 800de38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	693a      	ldr	r2, [r7, #16]
 800de3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	68fa      	ldr	r2, [r7, #12]
 800de44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	685a      	ldr	r2, [r3, #4]
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	697a      	ldr	r2, [r7, #20]
 800de52:	621a      	str	r2, [r3, #32]
}
 800de54:	bf00      	nop
 800de56:	371c      	adds	r7, #28
 800de58:	46bd      	mov	sp, r7
 800de5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5e:	4770      	bx	lr
 800de60:	40010000 	.word	0x40010000
 800de64:	40010400 	.word	0x40010400

0800de68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800de68:	b480      	push	{r7}
 800de6a:	b087      	sub	sp, #28
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
 800de70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6a1b      	ldr	r3, [r3, #32]
 800de76:	f023 0210 	bic.w	r2, r3, #16
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	6a1b      	ldr	r3, [r3, #32]
 800de82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	685b      	ldr	r3, [r3, #4]
 800de88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	699b      	ldr	r3, [r3, #24]
 800de8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800de96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800de9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	021b      	lsls	r3, r3, #8
 800dea6:	68fa      	ldr	r2, [r7, #12]
 800dea8:	4313      	orrs	r3, r2
 800deaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800deac:	697b      	ldr	r3, [r7, #20]
 800deae:	f023 0320 	bic.w	r3, r3, #32
 800deb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	689b      	ldr	r3, [r3, #8]
 800deb8:	011b      	lsls	r3, r3, #4
 800deba:	697a      	ldr	r2, [r7, #20]
 800debc:	4313      	orrs	r3, r2
 800debe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	4a22      	ldr	r2, [pc, #136]	; (800df4c <TIM_OC2_SetConfig+0xe4>)
 800dec4:	4293      	cmp	r3, r2
 800dec6:	d003      	beq.n	800ded0 <TIM_OC2_SetConfig+0x68>
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	4a21      	ldr	r2, [pc, #132]	; (800df50 <TIM_OC2_SetConfig+0xe8>)
 800decc:	4293      	cmp	r3, r2
 800dece:	d10d      	bne.n	800deec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ded6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	68db      	ldr	r3, [r3, #12]
 800dedc:	011b      	lsls	r3, r3, #4
 800dede:	697a      	ldr	r2, [r7, #20]
 800dee0:	4313      	orrs	r3, r2
 800dee2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dee4:	697b      	ldr	r3, [r7, #20]
 800dee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800deea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	4a17      	ldr	r2, [pc, #92]	; (800df4c <TIM_OC2_SetConfig+0xe4>)
 800def0:	4293      	cmp	r3, r2
 800def2:	d003      	beq.n	800defc <TIM_OC2_SetConfig+0x94>
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	4a16      	ldr	r2, [pc, #88]	; (800df50 <TIM_OC2_SetConfig+0xe8>)
 800def8:	4293      	cmp	r3, r2
 800defa:	d113      	bne.n	800df24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800defc:	693b      	ldr	r3, [r7, #16]
 800defe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800df02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800df0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	695b      	ldr	r3, [r3, #20]
 800df10:	009b      	lsls	r3, r3, #2
 800df12:	693a      	ldr	r2, [r7, #16]
 800df14:	4313      	orrs	r3, r2
 800df16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	699b      	ldr	r3, [r3, #24]
 800df1c:	009b      	lsls	r3, r3, #2
 800df1e:	693a      	ldr	r2, [r7, #16]
 800df20:	4313      	orrs	r3, r2
 800df22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	693a      	ldr	r2, [r7, #16]
 800df28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	68fa      	ldr	r2, [r7, #12]
 800df2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	685a      	ldr	r2, [r3, #4]
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	697a      	ldr	r2, [r7, #20]
 800df3c:	621a      	str	r2, [r3, #32]
}
 800df3e:	bf00      	nop
 800df40:	371c      	adds	r7, #28
 800df42:	46bd      	mov	sp, r7
 800df44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df48:	4770      	bx	lr
 800df4a:	bf00      	nop
 800df4c:	40010000 	.word	0x40010000
 800df50:	40010400 	.word	0x40010400

0800df54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800df54:	b480      	push	{r7}
 800df56:	b087      	sub	sp, #28
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
 800df5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6a1b      	ldr	r3, [r3, #32]
 800df62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6a1b      	ldr	r3, [r3, #32]
 800df6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	685b      	ldr	r3, [r3, #4]
 800df74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	69db      	ldr	r3, [r3, #28]
 800df7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800df82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	f023 0303 	bic.w	r3, r3, #3
 800df8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	68fa      	ldr	r2, [r7, #12]
 800df92:	4313      	orrs	r3, r2
 800df94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800df9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	689b      	ldr	r3, [r3, #8]
 800dfa2:	021b      	lsls	r3, r3, #8
 800dfa4:	697a      	ldr	r2, [r7, #20]
 800dfa6:	4313      	orrs	r3, r2
 800dfa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	4a21      	ldr	r2, [pc, #132]	; (800e034 <TIM_OC3_SetConfig+0xe0>)
 800dfae:	4293      	cmp	r3, r2
 800dfb0:	d003      	beq.n	800dfba <TIM_OC3_SetConfig+0x66>
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	4a20      	ldr	r2, [pc, #128]	; (800e038 <TIM_OC3_SetConfig+0xe4>)
 800dfb6:	4293      	cmp	r3, r2
 800dfb8:	d10d      	bne.n	800dfd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800dfba:	697b      	ldr	r3, [r7, #20]
 800dfbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dfc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	68db      	ldr	r3, [r3, #12]
 800dfc6:	021b      	lsls	r3, r3, #8
 800dfc8:	697a      	ldr	r2, [r7, #20]
 800dfca:	4313      	orrs	r3, r2
 800dfcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dfd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	4a16      	ldr	r2, [pc, #88]	; (800e034 <TIM_OC3_SetConfig+0xe0>)
 800dfda:	4293      	cmp	r3, r2
 800dfdc:	d003      	beq.n	800dfe6 <TIM_OC3_SetConfig+0x92>
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	4a15      	ldr	r2, [pc, #84]	; (800e038 <TIM_OC3_SetConfig+0xe4>)
 800dfe2:	4293      	cmp	r3, r2
 800dfe4:	d113      	bne.n	800e00e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800dfe6:	693b      	ldr	r3, [r7, #16]
 800dfe8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dfec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dff4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	695b      	ldr	r3, [r3, #20]
 800dffa:	011b      	lsls	r3, r3, #4
 800dffc:	693a      	ldr	r2, [r7, #16]
 800dffe:	4313      	orrs	r3, r2
 800e000:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	699b      	ldr	r3, [r3, #24]
 800e006:	011b      	lsls	r3, r3, #4
 800e008:	693a      	ldr	r2, [r7, #16]
 800e00a:	4313      	orrs	r3, r2
 800e00c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	693a      	ldr	r2, [r7, #16]
 800e012:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	68fa      	ldr	r2, [r7, #12]
 800e018:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	685a      	ldr	r2, [r3, #4]
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	697a      	ldr	r2, [r7, #20]
 800e026:	621a      	str	r2, [r3, #32]
}
 800e028:	bf00      	nop
 800e02a:	371c      	adds	r7, #28
 800e02c:	46bd      	mov	sp, r7
 800e02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e032:	4770      	bx	lr
 800e034:	40010000 	.word	0x40010000
 800e038:	40010400 	.word	0x40010400

0800e03c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e03c:	b480      	push	{r7}
 800e03e:	b087      	sub	sp, #28
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
 800e044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6a1b      	ldr	r3, [r3, #32]
 800e04a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6a1b      	ldr	r3, [r3, #32]
 800e056:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	685b      	ldr	r3, [r3, #4]
 800e05c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	69db      	ldr	r3, [r3, #28]
 800e062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e06a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e072:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	021b      	lsls	r3, r3, #8
 800e07a:	68fa      	ldr	r2, [r7, #12]
 800e07c:	4313      	orrs	r3, r2
 800e07e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e080:	693b      	ldr	r3, [r7, #16]
 800e082:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e086:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	689b      	ldr	r3, [r3, #8]
 800e08c:	031b      	lsls	r3, r3, #12
 800e08e:	693a      	ldr	r2, [r7, #16]
 800e090:	4313      	orrs	r3, r2
 800e092:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	4a12      	ldr	r2, [pc, #72]	; (800e0e0 <TIM_OC4_SetConfig+0xa4>)
 800e098:	4293      	cmp	r3, r2
 800e09a:	d003      	beq.n	800e0a4 <TIM_OC4_SetConfig+0x68>
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	4a11      	ldr	r2, [pc, #68]	; (800e0e4 <TIM_OC4_SetConfig+0xa8>)
 800e0a0:	4293      	cmp	r3, r2
 800e0a2:	d109      	bne.n	800e0b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e0a4:	697b      	ldr	r3, [r7, #20]
 800e0a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e0aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	695b      	ldr	r3, [r3, #20]
 800e0b0:	019b      	lsls	r3, r3, #6
 800e0b2:	697a      	ldr	r2, [r7, #20]
 800e0b4:	4313      	orrs	r3, r2
 800e0b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	697a      	ldr	r2, [r7, #20]
 800e0bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	68fa      	ldr	r2, [r7, #12]
 800e0c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	685a      	ldr	r2, [r3, #4]
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	693a      	ldr	r2, [r7, #16]
 800e0d0:	621a      	str	r2, [r3, #32]
}
 800e0d2:	bf00      	nop
 800e0d4:	371c      	adds	r7, #28
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0dc:	4770      	bx	lr
 800e0de:	bf00      	nop
 800e0e0:	40010000 	.word	0x40010000
 800e0e4:	40010400 	.word	0x40010400

0800e0e8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800e0e8:	b480      	push	{r7}
 800e0ea:	b087      	sub	sp, #28
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	60f8      	str	r0, [r7, #12]
 800e0f0:	60b9      	str	r1, [r7, #8]
 800e0f2:	607a      	str	r2, [r7, #4]
 800e0f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	6a1b      	ldr	r3, [r3, #32]
 800e0fa:	f023 0201 	bic.w	r2, r3, #1
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	699b      	ldr	r3, [r3, #24]
 800e106:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	6a1b      	ldr	r3, [r3, #32]
 800e10c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	4a28      	ldr	r2, [pc, #160]	; (800e1b4 <TIM_TI1_SetConfig+0xcc>)
 800e112:	4293      	cmp	r3, r2
 800e114:	d01b      	beq.n	800e14e <TIM_TI1_SetConfig+0x66>
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e11c:	d017      	beq.n	800e14e <TIM_TI1_SetConfig+0x66>
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	4a25      	ldr	r2, [pc, #148]	; (800e1b8 <TIM_TI1_SetConfig+0xd0>)
 800e122:	4293      	cmp	r3, r2
 800e124:	d013      	beq.n	800e14e <TIM_TI1_SetConfig+0x66>
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	4a24      	ldr	r2, [pc, #144]	; (800e1bc <TIM_TI1_SetConfig+0xd4>)
 800e12a:	4293      	cmp	r3, r2
 800e12c:	d00f      	beq.n	800e14e <TIM_TI1_SetConfig+0x66>
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	4a23      	ldr	r2, [pc, #140]	; (800e1c0 <TIM_TI1_SetConfig+0xd8>)
 800e132:	4293      	cmp	r3, r2
 800e134:	d00b      	beq.n	800e14e <TIM_TI1_SetConfig+0x66>
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	4a22      	ldr	r2, [pc, #136]	; (800e1c4 <TIM_TI1_SetConfig+0xdc>)
 800e13a:	4293      	cmp	r3, r2
 800e13c:	d007      	beq.n	800e14e <TIM_TI1_SetConfig+0x66>
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	4a21      	ldr	r2, [pc, #132]	; (800e1c8 <TIM_TI1_SetConfig+0xe0>)
 800e142:	4293      	cmp	r3, r2
 800e144:	d003      	beq.n	800e14e <TIM_TI1_SetConfig+0x66>
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	4a20      	ldr	r2, [pc, #128]	; (800e1cc <TIM_TI1_SetConfig+0xe4>)
 800e14a:	4293      	cmp	r3, r2
 800e14c:	d101      	bne.n	800e152 <TIM_TI1_SetConfig+0x6a>
 800e14e:	2301      	movs	r3, #1
 800e150:	e000      	b.n	800e154 <TIM_TI1_SetConfig+0x6c>
 800e152:	2300      	movs	r3, #0
 800e154:	2b00      	cmp	r3, #0
 800e156:	d008      	beq.n	800e16a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800e158:	697b      	ldr	r3, [r7, #20]
 800e15a:	f023 0303 	bic.w	r3, r3, #3
 800e15e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800e160:	697a      	ldr	r2, [r7, #20]
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	4313      	orrs	r3, r2
 800e166:	617b      	str	r3, [r7, #20]
 800e168:	e003      	b.n	800e172 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	f043 0301 	orr.w	r3, r3, #1
 800e170:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e178:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	011b      	lsls	r3, r3, #4
 800e17e:	b2db      	uxtb	r3, r3
 800e180:	697a      	ldr	r2, [r7, #20]
 800e182:	4313      	orrs	r3, r2
 800e184:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	f023 030a 	bic.w	r3, r3, #10
 800e18c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	f003 030a 	and.w	r3, r3, #10
 800e194:	693a      	ldr	r2, [r7, #16]
 800e196:	4313      	orrs	r3, r2
 800e198:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	697a      	ldr	r2, [r7, #20]
 800e19e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	693a      	ldr	r2, [r7, #16]
 800e1a4:	621a      	str	r2, [r3, #32]
}
 800e1a6:	bf00      	nop
 800e1a8:	371c      	adds	r7, #28
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b0:	4770      	bx	lr
 800e1b2:	bf00      	nop
 800e1b4:	40010000 	.word	0x40010000
 800e1b8:	40000400 	.word	0x40000400
 800e1bc:	40000800 	.word	0x40000800
 800e1c0:	40000c00 	.word	0x40000c00
 800e1c4:	40010400 	.word	0x40010400
 800e1c8:	40014000 	.word	0x40014000
 800e1cc:	40001800 	.word	0x40001800

0800e1d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	b087      	sub	sp, #28
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	60f8      	str	r0, [r7, #12]
 800e1d8:	60b9      	str	r1, [r7, #8]
 800e1da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	6a1b      	ldr	r3, [r3, #32]
 800e1e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	6a1b      	ldr	r3, [r3, #32]
 800e1e6:	f023 0201 	bic.w	r2, r3, #1
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	699b      	ldr	r3, [r3, #24]
 800e1f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e1f4:	693b      	ldr	r3, [r7, #16]
 800e1f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e1fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	011b      	lsls	r3, r3, #4
 800e200:	693a      	ldr	r2, [r7, #16]
 800e202:	4313      	orrs	r3, r2
 800e204:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	f023 030a 	bic.w	r3, r3, #10
 800e20c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e20e:	697a      	ldr	r2, [r7, #20]
 800e210:	68bb      	ldr	r3, [r7, #8]
 800e212:	4313      	orrs	r3, r2
 800e214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	693a      	ldr	r2, [r7, #16]
 800e21a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	697a      	ldr	r2, [r7, #20]
 800e220:	621a      	str	r2, [r3, #32]
}
 800e222:	bf00      	nop
 800e224:	371c      	adds	r7, #28
 800e226:	46bd      	mov	sp, r7
 800e228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22c:	4770      	bx	lr

0800e22e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e22e:	b480      	push	{r7}
 800e230:	b087      	sub	sp, #28
 800e232:	af00      	add	r7, sp, #0
 800e234:	60f8      	str	r0, [r7, #12]
 800e236:	60b9      	str	r1, [r7, #8]
 800e238:	607a      	str	r2, [r7, #4]
 800e23a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	6a1b      	ldr	r3, [r3, #32]
 800e240:	f023 0210 	bic.w	r2, r3, #16
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	699b      	ldr	r3, [r3, #24]
 800e24c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	6a1b      	ldr	r3, [r3, #32]
 800e252:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e25a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	021b      	lsls	r3, r3, #8
 800e260:	697a      	ldr	r2, [r7, #20]
 800e262:	4313      	orrs	r3, r2
 800e264:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e26c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	031b      	lsls	r3, r3, #12
 800e272:	b29b      	uxth	r3, r3
 800e274:	697a      	ldr	r2, [r7, #20]
 800e276:	4313      	orrs	r3, r2
 800e278:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e280:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	011b      	lsls	r3, r3, #4
 800e286:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e28a:	693a      	ldr	r2, [r7, #16]
 800e28c:	4313      	orrs	r3, r2
 800e28e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	697a      	ldr	r2, [r7, #20]
 800e294:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	693a      	ldr	r2, [r7, #16]
 800e29a:	621a      	str	r2, [r3, #32]
}
 800e29c:	bf00      	nop
 800e29e:	371c      	adds	r7, #28
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a6:	4770      	bx	lr

0800e2a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b087      	sub	sp, #28
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	60f8      	str	r0, [r7, #12]
 800e2b0:	60b9      	str	r1, [r7, #8]
 800e2b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	6a1b      	ldr	r3, [r3, #32]
 800e2b8:	f023 0210 	bic.w	r2, r3, #16
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	699b      	ldr	r3, [r3, #24]
 800e2c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	6a1b      	ldr	r3, [r3, #32]
 800e2ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e2d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	031b      	lsls	r3, r3, #12
 800e2d8:	697a      	ldr	r2, [r7, #20]
 800e2da:	4313      	orrs	r3, r2
 800e2dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e2de:	693b      	ldr	r3, [r7, #16]
 800e2e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e2e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	011b      	lsls	r3, r3, #4
 800e2ea:	693a      	ldr	r2, [r7, #16]
 800e2ec:	4313      	orrs	r3, r2
 800e2ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	697a      	ldr	r2, [r7, #20]
 800e2f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	693a      	ldr	r2, [r7, #16]
 800e2fa:	621a      	str	r2, [r3, #32]
}
 800e2fc:	bf00      	nop
 800e2fe:	371c      	adds	r7, #28
 800e300:	46bd      	mov	sp, r7
 800e302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e306:	4770      	bx	lr

0800e308 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e308:	b480      	push	{r7}
 800e30a:	b087      	sub	sp, #28
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	60f8      	str	r0, [r7, #12]
 800e310:	60b9      	str	r1, [r7, #8]
 800e312:	607a      	str	r2, [r7, #4]
 800e314:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	6a1b      	ldr	r3, [r3, #32]
 800e31a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	69db      	ldr	r3, [r3, #28]
 800e326:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	6a1b      	ldr	r3, [r3, #32]
 800e32c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800e32e:	697b      	ldr	r3, [r7, #20]
 800e330:	f023 0303 	bic.w	r3, r3, #3
 800e334:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800e336:	697a      	ldr	r2, [r7, #20]
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	4313      	orrs	r3, r2
 800e33c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800e33e:	697b      	ldr	r3, [r7, #20]
 800e340:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e344:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	011b      	lsls	r3, r3, #4
 800e34a:	b2db      	uxtb	r3, r3
 800e34c:	697a      	ldr	r2, [r7, #20]
 800e34e:	4313      	orrs	r3, r2
 800e350:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800e358:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800e35a:	68bb      	ldr	r3, [r7, #8]
 800e35c:	021b      	lsls	r3, r3, #8
 800e35e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800e362:	693a      	ldr	r2, [r7, #16]
 800e364:	4313      	orrs	r3, r2
 800e366:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	697a      	ldr	r2, [r7, #20]
 800e36c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	693a      	ldr	r2, [r7, #16]
 800e372:	621a      	str	r2, [r3, #32]
}
 800e374:	bf00      	nop
 800e376:	371c      	adds	r7, #28
 800e378:	46bd      	mov	sp, r7
 800e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37e:	4770      	bx	lr

0800e380 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e380:	b480      	push	{r7}
 800e382:	b087      	sub	sp, #28
 800e384:	af00      	add	r7, sp, #0
 800e386:	60f8      	str	r0, [r7, #12]
 800e388:	60b9      	str	r1, [r7, #8]
 800e38a:	607a      	str	r2, [r7, #4]
 800e38c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	6a1b      	ldr	r3, [r3, #32]
 800e392:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	69db      	ldr	r3, [r3, #28]
 800e39e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	6a1b      	ldr	r3, [r3, #32]
 800e3a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e3ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	021b      	lsls	r3, r3, #8
 800e3b2:	697a      	ldr	r2, [r7, #20]
 800e3b4:	4313      	orrs	r3, r2
 800e3b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e3be:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	031b      	lsls	r3, r3, #12
 800e3c4:	b29b      	uxth	r3, r3
 800e3c6:	697a      	ldr	r2, [r7, #20]
 800e3c8:	4313      	orrs	r3, r2
 800e3ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800e3cc:	693b      	ldr	r3, [r7, #16]
 800e3ce:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800e3d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	031b      	lsls	r3, r3, #12
 800e3d8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800e3dc:	693a      	ldr	r2, [r7, #16]
 800e3de:	4313      	orrs	r3, r2
 800e3e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	697a      	ldr	r2, [r7, #20]
 800e3e6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	693a      	ldr	r2, [r7, #16]
 800e3ec:	621a      	str	r2, [r3, #32]
}
 800e3ee:	bf00      	nop
 800e3f0:	371c      	adds	r7, #28
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f8:	4770      	bx	lr

0800e3fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e3fa:	b480      	push	{r7}
 800e3fc:	b085      	sub	sp, #20
 800e3fe:	af00      	add	r7, sp, #0
 800e400:	6078      	str	r0, [r7, #4]
 800e402:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	689b      	ldr	r3, [r3, #8]
 800e408:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e410:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e412:	683a      	ldr	r2, [r7, #0]
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	4313      	orrs	r3, r2
 800e418:	f043 0307 	orr.w	r3, r3, #7
 800e41c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	68fa      	ldr	r2, [r7, #12]
 800e422:	609a      	str	r2, [r3, #8]
}
 800e424:	bf00      	nop
 800e426:	3714      	adds	r7, #20
 800e428:	46bd      	mov	sp, r7
 800e42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42e:	4770      	bx	lr

0800e430 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e430:	b480      	push	{r7}
 800e432:	b087      	sub	sp, #28
 800e434:	af00      	add	r7, sp, #0
 800e436:	60f8      	str	r0, [r7, #12]
 800e438:	60b9      	str	r1, [r7, #8]
 800e43a:	607a      	str	r2, [r7, #4]
 800e43c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	689b      	ldr	r3, [r3, #8]
 800e442:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e44a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	021a      	lsls	r2, r3, #8
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	431a      	orrs	r2, r3
 800e454:	68bb      	ldr	r3, [r7, #8]
 800e456:	4313      	orrs	r3, r2
 800e458:	697a      	ldr	r2, [r7, #20]
 800e45a:	4313      	orrs	r3, r2
 800e45c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	697a      	ldr	r2, [r7, #20]
 800e462:	609a      	str	r2, [r3, #8]
}
 800e464:	bf00      	nop
 800e466:	371c      	adds	r7, #28
 800e468:	46bd      	mov	sp, r7
 800e46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46e:	4770      	bx	lr

0800e470 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e470:	b480      	push	{r7}
 800e472:	b087      	sub	sp, #28
 800e474:	af00      	add	r7, sp, #0
 800e476:	60f8      	str	r0, [r7, #12]
 800e478:	60b9      	str	r1, [r7, #8]
 800e47a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e47c:	68bb      	ldr	r3, [r7, #8]
 800e47e:	f003 031f 	and.w	r3, r3, #31
 800e482:	2201      	movs	r2, #1
 800e484:	fa02 f303 	lsl.w	r3, r2, r3
 800e488:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	6a1a      	ldr	r2, [r3, #32]
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	43db      	mvns	r3, r3
 800e492:	401a      	ands	r2, r3
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	6a1a      	ldr	r2, [r3, #32]
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	f003 031f 	and.w	r3, r3, #31
 800e4a2:	6879      	ldr	r1, [r7, #4]
 800e4a4:	fa01 f303 	lsl.w	r3, r1, r3
 800e4a8:	431a      	orrs	r2, r3
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	621a      	str	r2, [r3, #32]
}
 800e4ae:	bf00      	nop
 800e4b0:	371c      	adds	r7, #28
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b8:	4770      	bx	lr
	...

0800e4bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e4bc:	b480      	push	{r7}
 800e4be:	b085      	sub	sp, #20
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
 800e4c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e4cc:	2b01      	cmp	r3, #1
 800e4ce:	d101      	bne.n	800e4d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e4d0:	2302      	movs	r3, #2
 800e4d2:	e05a      	b.n	800e58a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2201      	movs	r2, #1
 800e4d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2202      	movs	r2, #2
 800e4e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	685b      	ldr	r3, [r3, #4]
 800e4ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	689b      	ldr	r3, [r3, #8]
 800e4f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e4fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	68fa      	ldr	r2, [r7, #12]
 800e502:	4313      	orrs	r3, r2
 800e504:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	68fa      	ldr	r2, [r7, #12]
 800e50c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	4a21      	ldr	r2, [pc, #132]	; (800e598 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e514:	4293      	cmp	r3, r2
 800e516:	d022      	beq.n	800e55e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e520:	d01d      	beq.n	800e55e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	4a1d      	ldr	r2, [pc, #116]	; (800e59c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e528:	4293      	cmp	r3, r2
 800e52a:	d018      	beq.n	800e55e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	4a1b      	ldr	r2, [pc, #108]	; (800e5a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e532:	4293      	cmp	r3, r2
 800e534:	d013      	beq.n	800e55e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	4a1a      	ldr	r2, [pc, #104]	; (800e5a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e53c:	4293      	cmp	r3, r2
 800e53e:	d00e      	beq.n	800e55e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	4a18      	ldr	r2, [pc, #96]	; (800e5a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e546:	4293      	cmp	r3, r2
 800e548:	d009      	beq.n	800e55e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	4a17      	ldr	r2, [pc, #92]	; (800e5ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e550:	4293      	cmp	r3, r2
 800e552:	d004      	beq.n	800e55e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	4a15      	ldr	r2, [pc, #84]	; (800e5b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e55a:	4293      	cmp	r3, r2
 800e55c:	d10c      	bne.n	800e578 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e55e:	68bb      	ldr	r3, [r7, #8]
 800e560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e564:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	685b      	ldr	r3, [r3, #4]
 800e56a:	68ba      	ldr	r2, [r7, #8]
 800e56c:	4313      	orrs	r3, r2
 800e56e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	68ba      	ldr	r2, [r7, #8]
 800e576:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2201      	movs	r2, #1
 800e57c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2200      	movs	r2, #0
 800e584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e588:	2300      	movs	r3, #0
}
 800e58a:	4618      	mov	r0, r3
 800e58c:	3714      	adds	r7, #20
 800e58e:	46bd      	mov	sp, r7
 800e590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e594:	4770      	bx	lr
 800e596:	bf00      	nop
 800e598:	40010000 	.word	0x40010000
 800e59c:	40000400 	.word	0x40000400
 800e5a0:	40000800 	.word	0x40000800
 800e5a4:	40000c00 	.word	0x40000c00
 800e5a8:	40010400 	.word	0x40010400
 800e5ac:	40014000 	.word	0x40014000
 800e5b0:	40001800 	.word	0x40001800

0800e5b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b085      	sub	sp, #20
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e5c8:	2b01      	cmp	r3, #1
 800e5ca:	d101      	bne.n	800e5d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e5cc:	2302      	movs	r3, #2
 800e5ce:	e03d      	b.n	800e64c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2201      	movs	r2, #1
 800e5d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	68db      	ldr	r3, [r3, #12]
 800e5e2:	4313      	orrs	r3, r2
 800e5e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	689b      	ldr	r3, [r3, #8]
 800e5f0:	4313      	orrs	r3, r2
 800e5f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	685b      	ldr	r3, [r3, #4]
 800e5fe:	4313      	orrs	r3, r2
 800e600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	4313      	orrs	r3, r2
 800e60e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	691b      	ldr	r3, [r3, #16]
 800e61a:	4313      	orrs	r3, r2
 800e61c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	695b      	ldr	r3, [r3, #20]
 800e628:	4313      	orrs	r3, r2
 800e62a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	69db      	ldr	r3, [r3, #28]
 800e636:	4313      	orrs	r3, r2
 800e638:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	68fa      	ldr	r2, [r7, #12]
 800e640:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	2200      	movs	r2, #0
 800e646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e64a:	2300      	movs	r3, #0
}
 800e64c:	4618      	mov	r0, r3
 800e64e:	3714      	adds	r7, #20
 800e650:	46bd      	mov	sp, r7
 800e652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e656:	4770      	bx	lr

0800e658 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e658:	b480      	push	{r7}
 800e65a:	b083      	sub	sp, #12
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e660:	bf00      	nop
 800e662:	370c      	adds	r7, #12
 800e664:	46bd      	mov	sp, r7
 800e666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e66a:	4770      	bx	lr

0800e66c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e66c:	b480      	push	{r7}
 800e66e:	b083      	sub	sp, #12
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e674:	bf00      	nop
 800e676:	370c      	adds	r7, #12
 800e678:	46bd      	mov	sp, r7
 800e67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67e:	4770      	bx	lr

0800e680 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e680:	b084      	sub	sp, #16
 800e682:	b580      	push	{r7, lr}
 800e684:	b084      	sub	sp, #16
 800e686:	af00      	add	r7, sp, #0
 800e688:	6078      	str	r0, [r7, #4]
 800e68a:	f107 001c 	add.w	r0, r7, #28
 800e68e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e694:	2b01      	cmp	r3, #1
 800e696:	d122      	bne.n	800e6de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e69c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	68db      	ldr	r3, [r3, #12]
 800e6a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800e6ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e6b0:	687a      	ldr	r2, [r7, #4]
 800e6b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	68db      	ldr	r3, [r3, #12]
 800e6b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e6c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6c2:	2b01      	cmp	r3, #1
 800e6c4:	d105      	bne.n	800e6d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	68db      	ldr	r3, [r3, #12]
 800e6ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f001 fab4 	bl	800fc40 <USB_CoreReset>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	73fb      	strb	r3, [r7, #15]
 800e6dc:	e01a      	b.n	800e714 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	68db      	ldr	r3, [r3, #12]
 800e6e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f001 faa8 	bl	800fc40 <USB_CoreReset>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e6f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d106      	bne.n	800e708 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	639a      	str	r2, [r3, #56]	; 0x38
 800e706:	e005      	b.n	800e714 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e70c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e716:	2b01      	cmp	r3, #1
 800e718:	d10b      	bne.n	800e732 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	689b      	ldr	r3, [r3, #8]
 800e71e:	f043 0206 	orr.w	r2, r3, #6
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	689b      	ldr	r3, [r3, #8]
 800e72a:	f043 0220 	orr.w	r2, r3, #32
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e732:	7bfb      	ldrb	r3, [r7, #15]
}
 800e734:	4618      	mov	r0, r3
 800e736:	3710      	adds	r7, #16
 800e738:	46bd      	mov	sp, r7
 800e73a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e73e:	b004      	add	sp, #16
 800e740:	4770      	bx	lr
	...

0800e744 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e744:	b480      	push	{r7}
 800e746:	b087      	sub	sp, #28
 800e748:	af00      	add	r7, sp, #0
 800e74a:	60f8      	str	r0, [r7, #12]
 800e74c:	60b9      	str	r1, [r7, #8]
 800e74e:	4613      	mov	r3, r2
 800e750:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e752:	79fb      	ldrb	r3, [r7, #7]
 800e754:	2b02      	cmp	r3, #2
 800e756:	d165      	bne.n	800e824 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e758:	68bb      	ldr	r3, [r7, #8]
 800e75a:	4a41      	ldr	r2, [pc, #260]	; (800e860 <USB_SetTurnaroundTime+0x11c>)
 800e75c:	4293      	cmp	r3, r2
 800e75e:	d906      	bls.n	800e76e <USB_SetTurnaroundTime+0x2a>
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	4a40      	ldr	r2, [pc, #256]	; (800e864 <USB_SetTurnaroundTime+0x120>)
 800e764:	4293      	cmp	r3, r2
 800e766:	d802      	bhi.n	800e76e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e768:	230f      	movs	r3, #15
 800e76a:	617b      	str	r3, [r7, #20]
 800e76c:	e062      	b.n	800e834 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	4a3c      	ldr	r2, [pc, #240]	; (800e864 <USB_SetTurnaroundTime+0x120>)
 800e772:	4293      	cmp	r3, r2
 800e774:	d906      	bls.n	800e784 <USB_SetTurnaroundTime+0x40>
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	4a3b      	ldr	r2, [pc, #236]	; (800e868 <USB_SetTurnaroundTime+0x124>)
 800e77a:	4293      	cmp	r3, r2
 800e77c:	d802      	bhi.n	800e784 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e77e:	230e      	movs	r3, #14
 800e780:	617b      	str	r3, [r7, #20]
 800e782:	e057      	b.n	800e834 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	4a38      	ldr	r2, [pc, #224]	; (800e868 <USB_SetTurnaroundTime+0x124>)
 800e788:	4293      	cmp	r3, r2
 800e78a:	d906      	bls.n	800e79a <USB_SetTurnaroundTime+0x56>
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	4a37      	ldr	r2, [pc, #220]	; (800e86c <USB_SetTurnaroundTime+0x128>)
 800e790:	4293      	cmp	r3, r2
 800e792:	d802      	bhi.n	800e79a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e794:	230d      	movs	r3, #13
 800e796:	617b      	str	r3, [r7, #20]
 800e798:	e04c      	b.n	800e834 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	4a33      	ldr	r2, [pc, #204]	; (800e86c <USB_SetTurnaroundTime+0x128>)
 800e79e:	4293      	cmp	r3, r2
 800e7a0:	d906      	bls.n	800e7b0 <USB_SetTurnaroundTime+0x6c>
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	4a32      	ldr	r2, [pc, #200]	; (800e870 <USB_SetTurnaroundTime+0x12c>)
 800e7a6:	4293      	cmp	r3, r2
 800e7a8:	d802      	bhi.n	800e7b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e7aa:	230c      	movs	r3, #12
 800e7ac:	617b      	str	r3, [r7, #20]
 800e7ae:	e041      	b.n	800e834 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	4a2f      	ldr	r2, [pc, #188]	; (800e870 <USB_SetTurnaroundTime+0x12c>)
 800e7b4:	4293      	cmp	r3, r2
 800e7b6:	d906      	bls.n	800e7c6 <USB_SetTurnaroundTime+0x82>
 800e7b8:	68bb      	ldr	r3, [r7, #8]
 800e7ba:	4a2e      	ldr	r2, [pc, #184]	; (800e874 <USB_SetTurnaroundTime+0x130>)
 800e7bc:	4293      	cmp	r3, r2
 800e7be:	d802      	bhi.n	800e7c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e7c0:	230b      	movs	r3, #11
 800e7c2:	617b      	str	r3, [r7, #20]
 800e7c4:	e036      	b.n	800e834 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e7c6:	68bb      	ldr	r3, [r7, #8]
 800e7c8:	4a2a      	ldr	r2, [pc, #168]	; (800e874 <USB_SetTurnaroundTime+0x130>)
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	d906      	bls.n	800e7dc <USB_SetTurnaroundTime+0x98>
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	4a29      	ldr	r2, [pc, #164]	; (800e878 <USB_SetTurnaroundTime+0x134>)
 800e7d2:	4293      	cmp	r3, r2
 800e7d4:	d802      	bhi.n	800e7dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e7d6:	230a      	movs	r3, #10
 800e7d8:	617b      	str	r3, [r7, #20]
 800e7da:	e02b      	b.n	800e834 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	4a26      	ldr	r2, [pc, #152]	; (800e878 <USB_SetTurnaroundTime+0x134>)
 800e7e0:	4293      	cmp	r3, r2
 800e7e2:	d906      	bls.n	800e7f2 <USB_SetTurnaroundTime+0xae>
 800e7e4:	68bb      	ldr	r3, [r7, #8]
 800e7e6:	4a25      	ldr	r2, [pc, #148]	; (800e87c <USB_SetTurnaroundTime+0x138>)
 800e7e8:	4293      	cmp	r3, r2
 800e7ea:	d802      	bhi.n	800e7f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e7ec:	2309      	movs	r3, #9
 800e7ee:	617b      	str	r3, [r7, #20]
 800e7f0:	e020      	b.n	800e834 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	4a21      	ldr	r2, [pc, #132]	; (800e87c <USB_SetTurnaroundTime+0x138>)
 800e7f6:	4293      	cmp	r3, r2
 800e7f8:	d906      	bls.n	800e808 <USB_SetTurnaroundTime+0xc4>
 800e7fa:	68bb      	ldr	r3, [r7, #8]
 800e7fc:	4a20      	ldr	r2, [pc, #128]	; (800e880 <USB_SetTurnaroundTime+0x13c>)
 800e7fe:	4293      	cmp	r3, r2
 800e800:	d802      	bhi.n	800e808 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e802:	2308      	movs	r3, #8
 800e804:	617b      	str	r3, [r7, #20]
 800e806:	e015      	b.n	800e834 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	4a1d      	ldr	r2, [pc, #116]	; (800e880 <USB_SetTurnaroundTime+0x13c>)
 800e80c:	4293      	cmp	r3, r2
 800e80e:	d906      	bls.n	800e81e <USB_SetTurnaroundTime+0xda>
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	4a1c      	ldr	r2, [pc, #112]	; (800e884 <USB_SetTurnaroundTime+0x140>)
 800e814:	4293      	cmp	r3, r2
 800e816:	d802      	bhi.n	800e81e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e818:	2307      	movs	r3, #7
 800e81a:	617b      	str	r3, [r7, #20]
 800e81c:	e00a      	b.n	800e834 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e81e:	2306      	movs	r3, #6
 800e820:	617b      	str	r3, [r7, #20]
 800e822:	e007      	b.n	800e834 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e824:	79fb      	ldrb	r3, [r7, #7]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d102      	bne.n	800e830 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e82a:	2309      	movs	r3, #9
 800e82c:	617b      	str	r3, [r7, #20]
 800e82e:	e001      	b.n	800e834 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e830:	2309      	movs	r3, #9
 800e832:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	68db      	ldr	r3, [r3, #12]
 800e838:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	68da      	ldr	r2, [r3, #12]
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	029b      	lsls	r3, r3, #10
 800e848:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800e84c:	431a      	orrs	r2, r3
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e852:	2300      	movs	r3, #0
}
 800e854:	4618      	mov	r0, r3
 800e856:	371c      	adds	r7, #28
 800e858:	46bd      	mov	sp, r7
 800e85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85e:	4770      	bx	lr
 800e860:	00d8acbf 	.word	0x00d8acbf
 800e864:	00e4e1bf 	.word	0x00e4e1bf
 800e868:	00f423ff 	.word	0x00f423ff
 800e86c:	0106737f 	.word	0x0106737f
 800e870:	011a499f 	.word	0x011a499f
 800e874:	01312cff 	.word	0x01312cff
 800e878:	014ca43f 	.word	0x014ca43f
 800e87c:	016e35ff 	.word	0x016e35ff
 800e880:	01a6ab1f 	.word	0x01a6ab1f
 800e884:	01e847ff 	.word	0x01e847ff

0800e888 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e888:	b480      	push	{r7}
 800e88a:	b083      	sub	sp, #12
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	689b      	ldr	r3, [r3, #8]
 800e894:	f043 0201 	orr.w	r2, r3, #1
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e89c:	2300      	movs	r3, #0
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	370c      	adds	r7, #12
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a8:	4770      	bx	lr

0800e8aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e8aa:	b480      	push	{r7}
 800e8ac:	b083      	sub	sp, #12
 800e8ae:	af00      	add	r7, sp, #0
 800e8b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	689b      	ldr	r3, [r3, #8]
 800e8b6:	f023 0201 	bic.w	r2, r3, #1
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e8be:	2300      	movs	r3, #0
}
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	370c      	adds	r7, #12
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ca:	4770      	bx	lr

0800e8cc <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b082      	sub	sp, #8
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
 800e8d4:	460b      	mov	r3, r1
 800e8d6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	68db      	ldr	r3, [r3, #12]
 800e8dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e8e4:	78fb      	ldrb	r3, [r7, #3]
 800e8e6:	2b01      	cmp	r3, #1
 800e8e8:	d106      	bne.n	800e8f8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	68db      	ldr	r3, [r3, #12]
 800e8ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	60da      	str	r2, [r3, #12]
 800e8f6:	e00b      	b.n	800e910 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800e8f8:	78fb      	ldrb	r3, [r7, #3]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d106      	bne.n	800e90c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	68db      	ldr	r3, [r3, #12]
 800e902:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	60da      	str	r2, [r3, #12]
 800e90a:	e001      	b.n	800e910 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800e90c:	2301      	movs	r3, #1
 800e90e:	e003      	b.n	800e918 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800e910:	2032      	movs	r0, #50	; 0x32
 800e912:	f7f9 f9bf 	bl	8007c94 <HAL_Delay>

  return HAL_OK;
 800e916:	2300      	movs	r3, #0
}
 800e918:	4618      	mov	r0, r3
 800e91a:	3708      	adds	r7, #8
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}

0800e920 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e920:	b084      	sub	sp, #16
 800e922:	b580      	push	{r7, lr}
 800e924:	b086      	sub	sp, #24
 800e926:	af00      	add	r7, sp, #0
 800e928:	6078      	str	r0, [r7, #4]
 800e92a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e92e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e932:	2300      	movs	r3, #0
 800e934:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e93a:	2300      	movs	r3, #0
 800e93c:	613b      	str	r3, [r7, #16]
 800e93e:	e009      	b.n	800e954 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e940:	687a      	ldr	r2, [r7, #4]
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	3340      	adds	r3, #64	; 0x40
 800e946:	009b      	lsls	r3, r3, #2
 800e948:	4413      	add	r3, r2
 800e94a:	2200      	movs	r2, #0
 800e94c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e94e:	693b      	ldr	r3, [r7, #16]
 800e950:	3301      	adds	r3, #1
 800e952:	613b      	str	r3, [r7, #16]
 800e954:	693b      	ldr	r3, [r7, #16]
 800e956:	2b0e      	cmp	r3, #14
 800e958:	d9f2      	bls.n	800e940 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e95a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d11c      	bne.n	800e99a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e966:	685b      	ldr	r3, [r3, #4]
 800e968:	68fa      	ldr	r2, [r7, #12]
 800e96a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e96e:	f043 0302 	orr.w	r3, r3, #2
 800e972:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e978:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e984:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e990:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	639a      	str	r2, [r3, #56]	; 0x38
 800e998:	e00b      	b.n	800e9b2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e99e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e9b8:	461a      	mov	r2, r3
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9c4:	4619      	mov	r1, r3
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9cc:	461a      	mov	r2, r3
 800e9ce:	680b      	ldr	r3, [r1, #0]
 800e9d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9d4:	2b01      	cmp	r3, #1
 800e9d6:	d10c      	bne.n	800e9f2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d104      	bne.n	800e9e8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e9de:	2100      	movs	r1, #0
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f000 f949 	bl	800ec78 <USB_SetDevSpeed>
 800e9e6:	e008      	b.n	800e9fa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e9e8:	2101      	movs	r1, #1
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f000 f944 	bl	800ec78 <USB_SetDevSpeed>
 800e9f0:	e003      	b.n	800e9fa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e9f2:	2103      	movs	r1, #3
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f000 f93f 	bl	800ec78 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e9fa:	2110      	movs	r1, #16
 800e9fc:	6878      	ldr	r0, [r7, #4]
 800e9fe:	f000 f8f3 	bl	800ebe8 <USB_FlushTxFifo>
 800ea02:	4603      	mov	r3, r0
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d001      	beq.n	800ea0c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800ea08:	2301      	movs	r3, #1
 800ea0a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ea0c:	6878      	ldr	r0, [r7, #4]
 800ea0e:	f000 f911 	bl	800ec34 <USB_FlushRxFifo>
 800ea12:	4603      	mov	r3, r0
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d001      	beq.n	800ea1c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800ea18:	2301      	movs	r3, #1
 800ea1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea22:	461a      	mov	r2, r3
 800ea24:	2300      	movs	r3, #0
 800ea26:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea2e:	461a      	mov	r2, r3
 800ea30:	2300      	movs	r3, #0
 800ea32:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea3a:	461a      	mov	r2, r3
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ea40:	2300      	movs	r3, #0
 800ea42:	613b      	str	r3, [r7, #16]
 800ea44:	e043      	b.n	800eace <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ea46:	693b      	ldr	r3, [r7, #16]
 800ea48:	015a      	lsls	r2, r3, #5
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	4413      	add	r3, r2
 800ea4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ea58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ea5c:	d118      	bne.n	800ea90 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800ea5e:	693b      	ldr	r3, [r7, #16]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d10a      	bne.n	800ea7a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ea64:	693b      	ldr	r3, [r7, #16]
 800ea66:	015a      	lsls	r2, r3, #5
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	4413      	add	r3, r2
 800ea6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea70:	461a      	mov	r2, r3
 800ea72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ea76:	6013      	str	r3, [r2, #0]
 800ea78:	e013      	b.n	800eaa2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ea7a:	693b      	ldr	r3, [r7, #16]
 800ea7c:	015a      	lsls	r2, r3, #5
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	4413      	add	r3, r2
 800ea82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea86:	461a      	mov	r2, r3
 800ea88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ea8c:	6013      	str	r3, [r2, #0]
 800ea8e:	e008      	b.n	800eaa2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ea90:	693b      	ldr	r3, [r7, #16]
 800ea92:	015a      	lsls	r2, r3, #5
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	4413      	add	r3, r2
 800ea98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea9c:	461a      	mov	r2, r3
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800eaa2:	693b      	ldr	r3, [r7, #16]
 800eaa4:	015a      	lsls	r2, r3, #5
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	4413      	add	r3, r2
 800eaaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eaae:	461a      	mov	r2, r3
 800eab0:	2300      	movs	r3, #0
 800eab2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800eab4:	693b      	ldr	r3, [r7, #16]
 800eab6:	015a      	lsls	r2, r3, #5
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	4413      	add	r3, r2
 800eabc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eac0:	461a      	mov	r2, r3
 800eac2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800eac6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	3301      	adds	r3, #1
 800eacc:	613b      	str	r3, [r7, #16]
 800eace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead0:	693a      	ldr	r2, [r7, #16]
 800ead2:	429a      	cmp	r2, r3
 800ead4:	d3b7      	bcc.n	800ea46 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ead6:	2300      	movs	r3, #0
 800ead8:	613b      	str	r3, [r7, #16]
 800eada:	e043      	b.n	800eb64 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eadc:	693b      	ldr	r3, [r7, #16]
 800eade:	015a      	lsls	r2, r3, #5
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	4413      	add	r3, r2
 800eae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eaee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eaf2:	d118      	bne.n	800eb26 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d10a      	bne.n	800eb10 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	015a      	lsls	r2, r3, #5
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	4413      	add	r3, r2
 800eb02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb06:	461a      	mov	r2, r3
 800eb08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800eb0c:	6013      	str	r3, [r2, #0]
 800eb0e:	e013      	b.n	800eb38 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	015a      	lsls	r2, r3, #5
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	4413      	add	r3, r2
 800eb18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb1c:	461a      	mov	r2, r3
 800eb1e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800eb22:	6013      	str	r3, [r2, #0]
 800eb24:	e008      	b.n	800eb38 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800eb26:	693b      	ldr	r3, [r7, #16]
 800eb28:	015a      	lsls	r2, r3, #5
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	4413      	add	r3, r2
 800eb2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb32:	461a      	mov	r2, r3
 800eb34:	2300      	movs	r3, #0
 800eb36:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800eb38:	693b      	ldr	r3, [r7, #16]
 800eb3a:	015a      	lsls	r2, r3, #5
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	4413      	add	r3, r2
 800eb40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb44:	461a      	mov	r2, r3
 800eb46:	2300      	movs	r3, #0
 800eb48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	015a      	lsls	r2, r3, #5
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	4413      	add	r3, r2
 800eb52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb56:	461a      	mov	r2, r3
 800eb58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800eb5c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800eb5e:	693b      	ldr	r3, [r7, #16]
 800eb60:	3301      	adds	r3, #1
 800eb62:	613b      	str	r3, [r7, #16]
 800eb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb66:	693a      	ldr	r2, [r7, #16]
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d3b7      	bcc.n	800eadc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb72:	691b      	ldr	r3, [r3, #16]
 800eb74:	68fa      	ldr	r2, [r7, #12]
 800eb76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eb7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eb7e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2200      	movs	r2, #0
 800eb84:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800eb8c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800eb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d105      	bne.n	800eba0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	699b      	ldr	r3, [r3, #24]
 800eb98:	f043 0210 	orr.w	r2, r3, #16
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	699a      	ldr	r2, [r3, #24]
 800eba4:	4b0f      	ldr	r3, [pc, #60]	; (800ebe4 <USB_DevInit+0x2c4>)
 800eba6:	4313      	orrs	r3, r2
 800eba8:	687a      	ldr	r2, [r7, #4]
 800ebaa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ebac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d005      	beq.n	800ebbe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	699b      	ldr	r3, [r3, #24]
 800ebb6:	f043 0208 	orr.w	r2, r3, #8
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ebbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebc0:	2b01      	cmp	r3, #1
 800ebc2:	d107      	bne.n	800ebd4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	699b      	ldr	r3, [r3, #24]
 800ebc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ebcc:	f043 0304 	orr.w	r3, r3, #4
 800ebd0:	687a      	ldr	r2, [r7, #4]
 800ebd2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ebd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	3718      	adds	r7, #24
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ebe0:	b004      	add	sp, #16
 800ebe2:	4770      	bx	lr
 800ebe4:	803c3800 	.word	0x803c3800

0800ebe8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ebe8:	b480      	push	{r7}
 800ebea:	b085      	sub	sp, #20
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
 800ebf0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	019b      	lsls	r3, r3, #6
 800ebfa:	f043 0220 	orr.w	r2, r3, #32
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	3301      	adds	r3, #1
 800ec06:	60fb      	str	r3, [r7, #12]
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	4a09      	ldr	r2, [pc, #36]	; (800ec30 <USB_FlushTxFifo+0x48>)
 800ec0c:	4293      	cmp	r3, r2
 800ec0e:	d901      	bls.n	800ec14 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ec10:	2303      	movs	r3, #3
 800ec12:	e006      	b.n	800ec22 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	691b      	ldr	r3, [r3, #16]
 800ec18:	f003 0320 	and.w	r3, r3, #32
 800ec1c:	2b20      	cmp	r3, #32
 800ec1e:	d0f0      	beq.n	800ec02 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ec20:	2300      	movs	r3, #0
}
 800ec22:	4618      	mov	r0, r3
 800ec24:	3714      	adds	r7, #20
 800ec26:	46bd      	mov	sp, r7
 800ec28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2c:	4770      	bx	lr
 800ec2e:	bf00      	nop
 800ec30:	00030d40 	.word	0x00030d40

0800ec34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ec34:	b480      	push	{r7}
 800ec36:	b085      	sub	sp, #20
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2210      	movs	r2, #16
 800ec44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	3301      	adds	r3, #1
 800ec4a:	60fb      	str	r3, [r7, #12]
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	4a09      	ldr	r2, [pc, #36]	; (800ec74 <USB_FlushRxFifo+0x40>)
 800ec50:	4293      	cmp	r3, r2
 800ec52:	d901      	bls.n	800ec58 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ec54:	2303      	movs	r3, #3
 800ec56:	e006      	b.n	800ec66 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	691b      	ldr	r3, [r3, #16]
 800ec5c:	f003 0310 	and.w	r3, r3, #16
 800ec60:	2b10      	cmp	r3, #16
 800ec62:	d0f0      	beq.n	800ec46 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ec64:	2300      	movs	r3, #0
}
 800ec66:	4618      	mov	r0, r3
 800ec68:	3714      	adds	r7, #20
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec70:	4770      	bx	lr
 800ec72:	bf00      	nop
 800ec74:	00030d40 	.word	0x00030d40

0800ec78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ec78:	b480      	push	{r7}
 800ec7a:	b085      	sub	sp, #20
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
 800ec80:	460b      	mov	r3, r1
 800ec82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec8e:	681a      	ldr	r2, [r3, #0]
 800ec90:	78fb      	ldrb	r3, [r7, #3]
 800ec92:	68f9      	ldr	r1, [r7, #12]
 800ec94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ec98:	4313      	orrs	r3, r2
 800ec9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ec9c:	2300      	movs	r3, #0
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	3714      	adds	r7, #20
 800eca2:	46bd      	mov	sp, r7
 800eca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca8:	4770      	bx	lr

0800ecaa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ecaa:	b480      	push	{r7}
 800ecac:	b087      	sub	sp, #28
 800ecae:	af00      	add	r7, sp, #0
 800ecb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecbc:	689b      	ldr	r3, [r3, #8]
 800ecbe:	f003 0306 	and.w	r3, r3, #6
 800ecc2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d102      	bne.n	800ecd0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ecca:	2300      	movs	r3, #0
 800eccc:	75fb      	strb	r3, [r7, #23]
 800ecce:	e00a      	b.n	800ece6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	2b02      	cmp	r3, #2
 800ecd4:	d002      	beq.n	800ecdc <USB_GetDevSpeed+0x32>
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	2b06      	cmp	r3, #6
 800ecda:	d102      	bne.n	800ece2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ecdc:	2302      	movs	r3, #2
 800ecde:	75fb      	strb	r3, [r7, #23]
 800ece0:	e001      	b.n	800ece6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ece2:	230f      	movs	r3, #15
 800ece4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ece6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ece8:	4618      	mov	r0, r3
 800ecea:	371c      	adds	r7, #28
 800ecec:	46bd      	mov	sp, r7
 800ecee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf2:	4770      	bx	lr

0800ecf4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b085      	sub	sp, #20
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
 800ecfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	781b      	ldrb	r3, [r3, #0]
 800ed06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ed08:	683b      	ldr	r3, [r7, #0]
 800ed0a:	785b      	ldrb	r3, [r3, #1]
 800ed0c:	2b01      	cmp	r3, #1
 800ed0e:	d13a      	bne.n	800ed86 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed16:	69da      	ldr	r2, [r3, #28]
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	781b      	ldrb	r3, [r3, #0]
 800ed1c:	f003 030f 	and.w	r3, r3, #15
 800ed20:	2101      	movs	r1, #1
 800ed22:	fa01 f303 	lsl.w	r3, r1, r3
 800ed26:	b29b      	uxth	r3, r3
 800ed28:	68f9      	ldr	r1, [r7, #12]
 800ed2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ed2e:	4313      	orrs	r3, r2
 800ed30:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ed32:	68bb      	ldr	r3, [r7, #8]
 800ed34:	015a      	lsls	r2, r3, #5
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	4413      	add	r3, r2
 800ed3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d155      	bne.n	800edf4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	015a      	lsls	r2, r3, #5
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	4413      	add	r3, r2
 800ed50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed54:	681a      	ldr	r2, [r3, #0]
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	689b      	ldr	r3, [r3, #8]
 800ed5a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	78db      	ldrb	r3, [r3, #3]
 800ed62:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ed64:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ed66:	68bb      	ldr	r3, [r7, #8]
 800ed68:	059b      	lsls	r3, r3, #22
 800ed6a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ed6c:	4313      	orrs	r3, r2
 800ed6e:	68ba      	ldr	r2, [r7, #8]
 800ed70:	0151      	lsls	r1, r2, #5
 800ed72:	68fa      	ldr	r2, [r7, #12]
 800ed74:	440a      	add	r2, r1
 800ed76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ed7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ed82:	6013      	str	r3, [r2, #0]
 800ed84:	e036      	b.n	800edf4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed8c:	69da      	ldr	r2, [r3, #28]
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	781b      	ldrb	r3, [r3, #0]
 800ed92:	f003 030f 	and.w	r3, r3, #15
 800ed96:	2101      	movs	r1, #1
 800ed98:	fa01 f303 	lsl.w	r3, r1, r3
 800ed9c:	041b      	lsls	r3, r3, #16
 800ed9e:	68f9      	ldr	r1, [r7, #12]
 800eda0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eda4:	4313      	orrs	r3, r2
 800eda6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	015a      	lsls	r2, r3, #5
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	4413      	add	r3, r2
 800edb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d11a      	bne.n	800edf4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	015a      	lsls	r2, r3, #5
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	4413      	add	r3, r2
 800edc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edca:	681a      	ldr	r2, [r3, #0]
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	689b      	ldr	r3, [r3, #8]
 800edd0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	78db      	ldrb	r3, [r3, #3]
 800edd8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800edda:	430b      	orrs	r3, r1
 800eddc:	4313      	orrs	r3, r2
 800edde:	68ba      	ldr	r2, [r7, #8]
 800ede0:	0151      	lsls	r1, r2, #5
 800ede2:	68fa      	ldr	r2, [r7, #12]
 800ede4:	440a      	add	r2, r1
 800ede6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800edea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800edee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800edf2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800edf4:	2300      	movs	r3, #0
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3714      	adds	r7, #20
 800edfa:	46bd      	mov	sp, r7
 800edfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee00:	4770      	bx	lr
	...

0800ee04 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ee04:	b480      	push	{r7}
 800ee06:	b085      	sub	sp, #20
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
 800ee0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	781b      	ldrb	r3, [r3, #0]
 800ee16:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	785b      	ldrb	r3, [r3, #1]
 800ee1c:	2b01      	cmp	r3, #1
 800ee1e:	d161      	bne.n	800eee4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	015a      	lsls	r2, r3, #5
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	4413      	add	r3, r2
 800ee28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ee32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ee36:	d11f      	bne.n	800ee78 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ee38:	68bb      	ldr	r3, [r7, #8]
 800ee3a:	015a      	lsls	r2, r3, #5
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	4413      	add	r3, r2
 800ee40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	68ba      	ldr	r2, [r7, #8]
 800ee48:	0151      	lsls	r1, r2, #5
 800ee4a:	68fa      	ldr	r2, [r7, #12]
 800ee4c:	440a      	add	r2, r1
 800ee4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ee56:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	015a      	lsls	r2, r3, #5
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	4413      	add	r3, r2
 800ee60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	68ba      	ldr	r2, [r7, #8]
 800ee68:	0151      	lsls	r1, r2, #5
 800ee6a:	68fa      	ldr	r2, [r7, #12]
 800ee6c:	440a      	add	r2, r1
 800ee6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ee72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ee76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	781b      	ldrb	r3, [r3, #0]
 800ee84:	f003 030f 	and.w	r3, r3, #15
 800ee88:	2101      	movs	r1, #1
 800ee8a:	fa01 f303 	lsl.w	r3, r1, r3
 800ee8e:	b29b      	uxth	r3, r3
 800ee90:	43db      	mvns	r3, r3
 800ee92:	68f9      	ldr	r1, [r7, #12]
 800ee94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ee98:	4013      	ands	r3, r2
 800ee9a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eea2:	69da      	ldr	r2, [r3, #28]
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	781b      	ldrb	r3, [r3, #0]
 800eea8:	f003 030f 	and.w	r3, r3, #15
 800eeac:	2101      	movs	r1, #1
 800eeae:	fa01 f303 	lsl.w	r3, r1, r3
 800eeb2:	b29b      	uxth	r3, r3
 800eeb4:	43db      	mvns	r3, r3
 800eeb6:	68f9      	ldr	r1, [r7, #12]
 800eeb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eebc:	4013      	ands	r3, r2
 800eebe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	015a      	lsls	r2, r3, #5
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	4413      	add	r3, r2
 800eec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eecc:	681a      	ldr	r2, [r3, #0]
 800eece:	68bb      	ldr	r3, [r7, #8]
 800eed0:	0159      	lsls	r1, r3, #5
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	440b      	add	r3, r1
 800eed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eeda:	4619      	mov	r1, r3
 800eedc:	4b35      	ldr	r3, [pc, #212]	; (800efb4 <USB_DeactivateEndpoint+0x1b0>)
 800eede:	4013      	ands	r3, r2
 800eee0:	600b      	str	r3, [r1, #0]
 800eee2:	e060      	b.n	800efa6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	015a      	lsls	r2, r3, #5
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	4413      	add	r3, r2
 800eeec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eef6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eefa:	d11f      	bne.n	800ef3c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800eefc:	68bb      	ldr	r3, [r7, #8]
 800eefe:	015a      	lsls	r2, r3, #5
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	4413      	add	r3, r2
 800ef04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	68ba      	ldr	r2, [r7, #8]
 800ef0c:	0151      	lsls	r1, r2, #5
 800ef0e:	68fa      	ldr	r2, [r7, #12]
 800ef10:	440a      	add	r2, r1
 800ef12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ef16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ef1a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	015a      	lsls	r2, r3, #5
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	4413      	add	r3, r2
 800ef24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	68ba      	ldr	r2, [r7, #8]
 800ef2c:	0151      	lsls	r1, r2, #5
 800ef2e:	68fa      	ldr	r2, [r7, #12]
 800ef30:	440a      	add	r2, r1
 800ef32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ef36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ef3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	781b      	ldrb	r3, [r3, #0]
 800ef48:	f003 030f 	and.w	r3, r3, #15
 800ef4c:	2101      	movs	r1, #1
 800ef4e:	fa01 f303 	lsl.w	r3, r1, r3
 800ef52:	041b      	lsls	r3, r3, #16
 800ef54:	43db      	mvns	r3, r3
 800ef56:	68f9      	ldr	r1, [r7, #12]
 800ef58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ef5c:	4013      	ands	r3, r2
 800ef5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef66:	69da      	ldr	r2, [r3, #28]
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	781b      	ldrb	r3, [r3, #0]
 800ef6c:	f003 030f 	and.w	r3, r3, #15
 800ef70:	2101      	movs	r1, #1
 800ef72:	fa01 f303 	lsl.w	r3, r1, r3
 800ef76:	041b      	lsls	r3, r3, #16
 800ef78:	43db      	mvns	r3, r3
 800ef7a:	68f9      	ldr	r1, [r7, #12]
 800ef7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ef80:	4013      	ands	r3, r2
 800ef82:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ef84:	68bb      	ldr	r3, [r7, #8]
 800ef86:	015a      	lsls	r2, r3, #5
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	4413      	add	r3, r2
 800ef8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef90:	681a      	ldr	r2, [r3, #0]
 800ef92:	68bb      	ldr	r3, [r7, #8]
 800ef94:	0159      	lsls	r1, r3, #5
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	440b      	add	r3, r1
 800ef9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef9e:	4619      	mov	r1, r3
 800efa0:	4b05      	ldr	r3, [pc, #20]	; (800efb8 <USB_DeactivateEndpoint+0x1b4>)
 800efa2:	4013      	ands	r3, r2
 800efa4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800efa6:	2300      	movs	r3, #0
}
 800efa8:	4618      	mov	r0, r3
 800efaa:	3714      	adds	r7, #20
 800efac:	46bd      	mov	sp, r7
 800efae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb2:	4770      	bx	lr
 800efb4:	ec337800 	.word	0xec337800
 800efb8:	eff37800 	.word	0xeff37800

0800efbc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b08a      	sub	sp, #40	; 0x28
 800efc0:	af02      	add	r7, sp, #8
 800efc2:	60f8      	str	r0, [r7, #12]
 800efc4:	60b9      	str	r1, [r7, #8]
 800efc6:	4613      	mov	r3, r2
 800efc8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800efce:	68bb      	ldr	r3, [r7, #8]
 800efd0:	781b      	ldrb	r3, [r3, #0]
 800efd2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	785b      	ldrb	r3, [r3, #1]
 800efd8:	2b01      	cmp	r3, #1
 800efda:	f040 815c 	bne.w	800f296 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800efde:	68bb      	ldr	r3, [r7, #8]
 800efe0:	695b      	ldr	r3, [r3, #20]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d132      	bne.n	800f04c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800efe6:	69bb      	ldr	r3, [r7, #24]
 800efe8:	015a      	lsls	r2, r3, #5
 800efea:	69fb      	ldr	r3, [r7, #28]
 800efec:	4413      	add	r3, r2
 800efee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eff2:	691b      	ldr	r3, [r3, #16]
 800eff4:	69ba      	ldr	r2, [r7, #24]
 800eff6:	0151      	lsls	r1, r2, #5
 800eff8:	69fa      	ldr	r2, [r7, #28]
 800effa:	440a      	add	r2, r1
 800effc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f000:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f004:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f008:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f00a:	69bb      	ldr	r3, [r7, #24]
 800f00c:	015a      	lsls	r2, r3, #5
 800f00e:	69fb      	ldr	r3, [r7, #28]
 800f010:	4413      	add	r3, r2
 800f012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f016:	691b      	ldr	r3, [r3, #16]
 800f018:	69ba      	ldr	r2, [r7, #24]
 800f01a:	0151      	lsls	r1, r2, #5
 800f01c:	69fa      	ldr	r2, [r7, #28]
 800f01e:	440a      	add	r2, r1
 800f020:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f024:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f028:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f02a:	69bb      	ldr	r3, [r7, #24]
 800f02c:	015a      	lsls	r2, r3, #5
 800f02e:	69fb      	ldr	r3, [r7, #28]
 800f030:	4413      	add	r3, r2
 800f032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f036:	691b      	ldr	r3, [r3, #16]
 800f038:	69ba      	ldr	r2, [r7, #24]
 800f03a:	0151      	lsls	r1, r2, #5
 800f03c:	69fa      	ldr	r2, [r7, #28]
 800f03e:	440a      	add	r2, r1
 800f040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f044:	0cdb      	lsrs	r3, r3, #19
 800f046:	04db      	lsls	r3, r3, #19
 800f048:	6113      	str	r3, [r2, #16]
 800f04a:	e074      	b.n	800f136 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f04c:	69bb      	ldr	r3, [r7, #24]
 800f04e:	015a      	lsls	r2, r3, #5
 800f050:	69fb      	ldr	r3, [r7, #28]
 800f052:	4413      	add	r3, r2
 800f054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f058:	691b      	ldr	r3, [r3, #16]
 800f05a:	69ba      	ldr	r2, [r7, #24]
 800f05c:	0151      	lsls	r1, r2, #5
 800f05e:	69fa      	ldr	r2, [r7, #28]
 800f060:	440a      	add	r2, r1
 800f062:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f066:	0cdb      	lsrs	r3, r3, #19
 800f068:	04db      	lsls	r3, r3, #19
 800f06a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f06c:	69bb      	ldr	r3, [r7, #24]
 800f06e:	015a      	lsls	r2, r3, #5
 800f070:	69fb      	ldr	r3, [r7, #28]
 800f072:	4413      	add	r3, r2
 800f074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f078:	691b      	ldr	r3, [r3, #16]
 800f07a:	69ba      	ldr	r2, [r7, #24]
 800f07c:	0151      	lsls	r1, r2, #5
 800f07e:	69fa      	ldr	r2, [r7, #28]
 800f080:	440a      	add	r2, r1
 800f082:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f086:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f08a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f08e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f090:	69bb      	ldr	r3, [r7, #24]
 800f092:	015a      	lsls	r2, r3, #5
 800f094:	69fb      	ldr	r3, [r7, #28]
 800f096:	4413      	add	r3, r2
 800f098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f09c:	691a      	ldr	r2, [r3, #16]
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	6959      	ldr	r1, [r3, #20]
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	689b      	ldr	r3, [r3, #8]
 800f0a6:	440b      	add	r3, r1
 800f0a8:	1e59      	subs	r1, r3, #1
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	689b      	ldr	r3, [r3, #8]
 800f0ae:	fbb1 f3f3 	udiv	r3, r1, r3
 800f0b2:	04d9      	lsls	r1, r3, #19
 800f0b4:	4b9d      	ldr	r3, [pc, #628]	; (800f32c <USB_EPStartXfer+0x370>)
 800f0b6:	400b      	ands	r3, r1
 800f0b8:	69b9      	ldr	r1, [r7, #24]
 800f0ba:	0148      	lsls	r0, r1, #5
 800f0bc:	69f9      	ldr	r1, [r7, #28]
 800f0be:	4401      	add	r1, r0
 800f0c0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f0c4:	4313      	orrs	r3, r2
 800f0c6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f0c8:	69bb      	ldr	r3, [r7, #24]
 800f0ca:	015a      	lsls	r2, r3, #5
 800f0cc:	69fb      	ldr	r3, [r7, #28]
 800f0ce:	4413      	add	r3, r2
 800f0d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0d4:	691a      	ldr	r2, [r3, #16]
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	695b      	ldr	r3, [r3, #20]
 800f0da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f0de:	69b9      	ldr	r1, [r7, #24]
 800f0e0:	0148      	lsls	r0, r1, #5
 800f0e2:	69f9      	ldr	r1, [r7, #28]
 800f0e4:	4401      	add	r1, r0
 800f0e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f0ea:	4313      	orrs	r3, r2
 800f0ec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	78db      	ldrb	r3, [r3, #3]
 800f0f2:	2b01      	cmp	r3, #1
 800f0f4:	d11f      	bne.n	800f136 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f0f6:	69bb      	ldr	r3, [r7, #24]
 800f0f8:	015a      	lsls	r2, r3, #5
 800f0fa:	69fb      	ldr	r3, [r7, #28]
 800f0fc:	4413      	add	r3, r2
 800f0fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f102:	691b      	ldr	r3, [r3, #16]
 800f104:	69ba      	ldr	r2, [r7, #24]
 800f106:	0151      	lsls	r1, r2, #5
 800f108:	69fa      	ldr	r2, [r7, #28]
 800f10a:	440a      	add	r2, r1
 800f10c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f110:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f114:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f116:	69bb      	ldr	r3, [r7, #24]
 800f118:	015a      	lsls	r2, r3, #5
 800f11a:	69fb      	ldr	r3, [r7, #28]
 800f11c:	4413      	add	r3, r2
 800f11e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f122:	691b      	ldr	r3, [r3, #16]
 800f124:	69ba      	ldr	r2, [r7, #24]
 800f126:	0151      	lsls	r1, r2, #5
 800f128:	69fa      	ldr	r2, [r7, #28]
 800f12a:	440a      	add	r2, r1
 800f12c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f130:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f134:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f136:	79fb      	ldrb	r3, [r7, #7]
 800f138:	2b01      	cmp	r3, #1
 800f13a:	d14b      	bne.n	800f1d4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f13c:	68bb      	ldr	r3, [r7, #8]
 800f13e:	691b      	ldr	r3, [r3, #16]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d009      	beq.n	800f158 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f144:	69bb      	ldr	r3, [r7, #24]
 800f146:	015a      	lsls	r2, r3, #5
 800f148:	69fb      	ldr	r3, [r7, #28]
 800f14a:	4413      	add	r3, r2
 800f14c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f150:	461a      	mov	r2, r3
 800f152:	68bb      	ldr	r3, [r7, #8]
 800f154:	691b      	ldr	r3, [r3, #16]
 800f156:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	78db      	ldrb	r3, [r3, #3]
 800f15c:	2b01      	cmp	r3, #1
 800f15e:	d128      	bne.n	800f1b2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f160:	69fb      	ldr	r3, [r7, #28]
 800f162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f166:	689b      	ldr	r3, [r3, #8]
 800f168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d110      	bne.n	800f192 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f170:	69bb      	ldr	r3, [r7, #24]
 800f172:	015a      	lsls	r2, r3, #5
 800f174:	69fb      	ldr	r3, [r7, #28]
 800f176:	4413      	add	r3, r2
 800f178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	69ba      	ldr	r2, [r7, #24]
 800f180:	0151      	lsls	r1, r2, #5
 800f182:	69fa      	ldr	r2, [r7, #28]
 800f184:	440a      	add	r2, r1
 800f186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f18a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f18e:	6013      	str	r3, [r2, #0]
 800f190:	e00f      	b.n	800f1b2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f192:	69bb      	ldr	r3, [r7, #24]
 800f194:	015a      	lsls	r2, r3, #5
 800f196:	69fb      	ldr	r3, [r7, #28]
 800f198:	4413      	add	r3, r2
 800f19a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	69ba      	ldr	r2, [r7, #24]
 800f1a2:	0151      	lsls	r1, r2, #5
 800f1a4:	69fa      	ldr	r2, [r7, #28]
 800f1a6:	440a      	add	r2, r1
 800f1a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f1ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f1b0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f1b2:	69bb      	ldr	r3, [r7, #24]
 800f1b4:	015a      	lsls	r2, r3, #5
 800f1b6:	69fb      	ldr	r3, [r7, #28]
 800f1b8:	4413      	add	r3, r2
 800f1ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	69ba      	ldr	r2, [r7, #24]
 800f1c2:	0151      	lsls	r1, r2, #5
 800f1c4:	69fa      	ldr	r2, [r7, #28]
 800f1c6:	440a      	add	r2, r1
 800f1c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f1cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f1d0:	6013      	str	r3, [r2, #0]
 800f1d2:	e12f      	b.n	800f434 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f1d4:	69bb      	ldr	r3, [r7, #24]
 800f1d6:	015a      	lsls	r2, r3, #5
 800f1d8:	69fb      	ldr	r3, [r7, #28]
 800f1da:	4413      	add	r3, r2
 800f1dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	69ba      	ldr	r2, [r7, #24]
 800f1e4:	0151      	lsls	r1, r2, #5
 800f1e6:	69fa      	ldr	r2, [r7, #28]
 800f1e8:	440a      	add	r2, r1
 800f1ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f1ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f1f2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	78db      	ldrb	r3, [r3, #3]
 800f1f8:	2b01      	cmp	r3, #1
 800f1fa:	d015      	beq.n	800f228 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f1fc:	68bb      	ldr	r3, [r7, #8]
 800f1fe:	695b      	ldr	r3, [r3, #20]
 800f200:	2b00      	cmp	r3, #0
 800f202:	f000 8117 	beq.w	800f434 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f206:	69fb      	ldr	r3, [r7, #28]
 800f208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f20c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f20e:	68bb      	ldr	r3, [r7, #8]
 800f210:	781b      	ldrb	r3, [r3, #0]
 800f212:	f003 030f 	and.w	r3, r3, #15
 800f216:	2101      	movs	r1, #1
 800f218:	fa01 f303 	lsl.w	r3, r1, r3
 800f21c:	69f9      	ldr	r1, [r7, #28]
 800f21e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f222:	4313      	orrs	r3, r2
 800f224:	634b      	str	r3, [r1, #52]	; 0x34
 800f226:	e105      	b.n	800f434 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f228:	69fb      	ldr	r3, [r7, #28]
 800f22a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f22e:	689b      	ldr	r3, [r3, #8]
 800f230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f234:	2b00      	cmp	r3, #0
 800f236:	d110      	bne.n	800f25a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f238:	69bb      	ldr	r3, [r7, #24]
 800f23a:	015a      	lsls	r2, r3, #5
 800f23c:	69fb      	ldr	r3, [r7, #28]
 800f23e:	4413      	add	r3, r2
 800f240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	69ba      	ldr	r2, [r7, #24]
 800f248:	0151      	lsls	r1, r2, #5
 800f24a:	69fa      	ldr	r2, [r7, #28]
 800f24c:	440a      	add	r2, r1
 800f24e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f252:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f256:	6013      	str	r3, [r2, #0]
 800f258:	e00f      	b.n	800f27a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f25a:	69bb      	ldr	r3, [r7, #24]
 800f25c:	015a      	lsls	r2, r3, #5
 800f25e:	69fb      	ldr	r3, [r7, #28]
 800f260:	4413      	add	r3, r2
 800f262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	69ba      	ldr	r2, [r7, #24]
 800f26a:	0151      	lsls	r1, r2, #5
 800f26c:	69fa      	ldr	r2, [r7, #28]
 800f26e:	440a      	add	r2, r1
 800f270:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f278:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	68d9      	ldr	r1, [r3, #12]
 800f27e:	68bb      	ldr	r3, [r7, #8]
 800f280:	781a      	ldrb	r2, [r3, #0]
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	695b      	ldr	r3, [r3, #20]
 800f286:	b298      	uxth	r0, r3
 800f288:	79fb      	ldrb	r3, [r7, #7]
 800f28a:	9300      	str	r3, [sp, #0]
 800f28c:	4603      	mov	r3, r0
 800f28e:	68f8      	ldr	r0, [r7, #12]
 800f290:	f000 fa2b 	bl	800f6ea <USB_WritePacket>
 800f294:	e0ce      	b.n	800f434 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f296:	69bb      	ldr	r3, [r7, #24]
 800f298:	015a      	lsls	r2, r3, #5
 800f29a:	69fb      	ldr	r3, [r7, #28]
 800f29c:	4413      	add	r3, r2
 800f29e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2a2:	691b      	ldr	r3, [r3, #16]
 800f2a4:	69ba      	ldr	r2, [r7, #24]
 800f2a6:	0151      	lsls	r1, r2, #5
 800f2a8:	69fa      	ldr	r2, [r7, #28]
 800f2aa:	440a      	add	r2, r1
 800f2ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f2b0:	0cdb      	lsrs	r3, r3, #19
 800f2b2:	04db      	lsls	r3, r3, #19
 800f2b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f2b6:	69bb      	ldr	r3, [r7, #24]
 800f2b8:	015a      	lsls	r2, r3, #5
 800f2ba:	69fb      	ldr	r3, [r7, #28]
 800f2bc:	4413      	add	r3, r2
 800f2be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2c2:	691b      	ldr	r3, [r3, #16]
 800f2c4:	69ba      	ldr	r2, [r7, #24]
 800f2c6:	0151      	lsls	r1, r2, #5
 800f2c8:	69fa      	ldr	r2, [r7, #28]
 800f2ca:	440a      	add	r2, r1
 800f2cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f2d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f2d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f2d8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800f2da:	68bb      	ldr	r3, [r7, #8]
 800f2dc:	695b      	ldr	r3, [r3, #20]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d126      	bne.n	800f330 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f2e2:	69bb      	ldr	r3, [r7, #24]
 800f2e4:	015a      	lsls	r2, r3, #5
 800f2e6:	69fb      	ldr	r3, [r7, #28]
 800f2e8:	4413      	add	r3, r2
 800f2ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2ee:	691a      	ldr	r2, [r3, #16]
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	689b      	ldr	r3, [r3, #8]
 800f2f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f2f8:	69b9      	ldr	r1, [r7, #24]
 800f2fa:	0148      	lsls	r0, r1, #5
 800f2fc:	69f9      	ldr	r1, [r7, #28]
 800f2fe:	4401      	add	r1, r0
 800f300:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f304:	4313      	orrs	r3, r2
 800f306:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f308:	69bb      	ldr	r3, [r7, #24]
 800f30a:	015a      	lsls	r2, r3, #5
 800f30c:	69fb      	ldr	r3, [r7, #28]
 800f30e:	4413      	add	r3, r2
 800f310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f314:	691b      	ldr	r3, [r3, #16]
 800f316:	69ba      	ldr	r2, [r7, #24]
 800f318:	0151      	lsls	r1, r2, #5
 800f31a:	69fa      	ldr	r2, [r7, #28]
 800f31c:	440a      	add	r2, r1
 800f31e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f322:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f326:	6113      	str	r3, [r2, #16]
 800f328:	e036      	b.n	800f398 <USB_EPStartXfer+0x3dc>
 800f32a:	bf00      	nop
 800f32c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f330:	68bb      	ldr	r3, [r7, #8]
 800f332:	695a      	ldr	r2, [r3, #20]
 800f334:	68bb      	ldr	r3, [r7, #8]
 800f336:	689b      	ldr	r3, [r3, #8]
 800f338:	4413      	add	r3, r2
 800f33a:	1e5a      	subs	r2, r3, #1
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	689b      	ldr	r3, [r3, #8]
 800f340:	fbb2 f3f3 	udiv	r3, r2, r3
 800f344:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f346:	69bb      	ldr	r3, [r7, #24]
 800f348:	015a      	lsls	r2, r3, #5
 800f34a:	69fb      	ldr	r3, [r7, #28]
 800f34c:	4413      	add	r3, r2
 800f34e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f352:	691a      	ldr	r2, [r3, #16]
 800f354:	8afb      	ldrh	r3, [r7, #22]
 800f356:	04d9      	lsls	r1, r3, #19
 800f358:	4b39      	ldr	r3, [pc, #228]	; (800f440 <USB_EPStartXfer+0x484>)
 800f35a:	400b      	ands	r3, r1
 800f35c:	69b9      	ldr	r1, [r7, #24]
 800f35e:	0148      	lsls	r0, r1, #5
 800f360:	69f9      	ldr	r1, [r7, #28]
 800f362:	4401      	add	r1, r0
 800f364:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f368:	4313      	orrs	r3, r2
 800f36a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f36c:	69bb      	ldr	r3, [r7, #24]
 800f36e:	015a      	lsls	r2, r3, #5
 800f370:	69fb      	ldr	r3, [r7, #28]
 800f372:	4413      	add	r3, r2
 800f374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f378:	691a      	ldr	r2, [r3, #16]
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	689b      	ldr	r3, [r3, #8]
 800f37e:	8af9      	ldrh	r1, [r7, #22]
 800f380:	fb01 f303 	mul.w	r3, r1, r3
 800f384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f388:	69b9      	ldr	r1, [r7, #24]
 800f38a:	0148      	lsls	r0, r1, #5
 800f38c:	69f9      	ldr	r1, [r7, #28]
 800f38e:	4401      	add	r1, r0
 800f390:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f394:	4313      	orrs	r3, r2
 800f396:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f398:	79fb      	ldrb	r3, [r7, #7]
 800f39a:	2b01      	cmp	r3, #1
 800f39c:	d10d      	bne.n	800f3ba <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f39e:	68bb      	ldr	r3, [r7, #8]
 800f3a0:	68db      	ldr	r3, [r3, #12]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d009      	beq.n	800f3ba <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	68d9      	ldr	r1, [r3, #12]
 800f3aa:	69bb      	ldr	r3, [r7, #24]
 800f3ac:	015a      	lsls	r2, r3, #5
 800f3ae:	69fb      	ldr	r3, [r7, #28]
 800f3b0:	4413      	add	r3, r2
 800f3b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3b6:	460a      	mov	r2, r1
 800f3b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f3ba:	68bb      	ldr	r3, [r7, #8]
 800f3bc:	78db      	ldrb	r3, [r3, #3]
 800f3be:	2b01      	cmp	r3, #1
 800f3c0:	d128      	bne.n	800f414 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f3c2:	69fb      	ldr	r3, [r7, #28]
 800f3c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3c8:	689b      	ldr	r3, [r3, #8]
 800f3ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d110      	bne.n	800f3f4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f3d2:	69bb      	ldr	r3, [r7, #24]
 800f3d4:	015a      	lsls	r2, r3, #5
 800f3d6:	69fb      	ldr	r3, [r7, #28]
 800f3d8:	4413      	add	r3, r2
 800f3da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	69ba      	ldr	r2, [r7, #24]
 800f3e2:	0151      	lsls	r1, r2, #5
 800f3e4:	69fa      	ldr	r2, [r7, #28]
 800f3e6:	440a      	add	r2, r1
 800f3e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f3f0:	6013      	str	r3, [r2, #0]
 800f3f2:	e00f      	b.n	800f414 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f3f4:	69bb      	ldr	r3, [r7, #24]
 800f3f6:	015a      	lsls	r2, r3, #5
 800f3f8:	69fb      	ldr	r3, [r7, #28]
 800f3fa:	4413      	add	r3, r2
 800f3fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	69ba      	ldr	r2, [r7, #24]
 800f404:	0151      	lsls	r1, r2, #5
 800f406:	69fa      	ldr	r2, [r7, #28]
 800f408:	440a      	add	r2, r1
 800f40a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f40e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f412:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f414:	69bb      	ldr	r3, [r7, #24]
 800f416:	015a      	lsls	r2, r3, #5
 800f418:	69fb      	ldr	r3, [r7, #28]
 800f41a:	4413      	add	r3, r2
 800f41c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	69ba      	ldr	r2, [r7, #24]
 800f424:	0151      	lsls	r1, r2, #5
 800f426:	69fa      	ldr	r2, [r7, #28]
 800f428:	440a      	add	r2, r1
 800f42a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f42e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f432:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f434:	2300      	movs	r3, #0
}
 800f436:	4618      	mov	r0, r3
 800f438:	3720      	adds	r7, #32
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}
 800f43e:	bf00      	nop
 800f440:	1ff80000 	.word	0x1ff80000

0800f444 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f444:	b480      	push	{r7}
 800f446:	b087      	sub	sp, #28
 800f448:	af00      	add	r7, sp, #0
 800f44a:	60f8      	str	r0, [r7, #12]
 800f44c:	60b9      	str	r1, [r7, #8]
 800f44e:	4613      	mov	r3, r2
 800f450:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f456:	68bb      	ldr	r3, [r7, #8]
 800f458:	781b      	ldrb	r3, [r3, #0]
 800f45a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f45c:	68bb      	ldr	r3, [r7, #8]
 800f45e:	785b      	ldrb	r3, [r3, #1]
 800f460:	2b01      	cmp	r3, #1
 800f462:	f040 80cd 	bne.w	800f600 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f466:	68bb      	ldr	r3, [r7, #8]
 800f468:	695b      	ldr	r3, [r3, #20]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d132      	bne.n	800f4d4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f46e:	693b      	ldr	r3, [r7, #16]
 800f470:	015a      	lsls	r2, r3, #5
 800f472:	697b      	ldr	r3, [r7, #20]
 800f474:	4413      	add	r3, r2
 800f476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f47a:	691b      	ldr	r3, [r3, #16]
 800f47c:	693a      	ldr	r2, [r7, #16]
 800f47e:	0151      	lsls	r1, r2, #5
 800f480:	697a      	ldr	r2, [r7, #20]
 800f482:	440a      	add	r2, r1
 800f484:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f488:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f48c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f490:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f492:	693b      	ldr	r3, [r7, #16]
 800f494:	015a      	lsls	r2, r3, #5
 800f496:	697b      	ldr	r3, [r7, #20]
 800f498:	4413      	add	r3, r2
 800f49a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f49e:	691b      	ldr	r3, [r3, #16]
 800f4a0:	693a      	ldr	r2, [r7, #16]
 800f4a2:	0151      	lsls	r1, r2, #5
 800f4a4:	697a      	ldr	r2, [r7, #20]
 800f4a6:	440a      	add	r2, r1
 800f4a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f4ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f4b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f4b2:	693b      	ldr	r3, [r7, #16]
 800f4b4:	015a      	lsls	r2, r3, #5
 800f4b6:	697b      	ldr	r3, [r7, #20]
 800f4b8:	4413      	add	r3, r2
 800f4ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4be:	691b      	ldr	r3, [r3, #16]
 800f4c0:	693a      	ldr	r2, [r7, #16]
 800f4c2:	0151      	lsls	r1, r2, #5
 800f4c4:	697a      	ldr	r2, [r7, #20]
 800f4c6:	440a      	add	r2, r1
 800f4c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f4cc:	0cdb      	lsrs	r3, r3, #19
 800f4ce:	04db      	lsls	r3, r3, #19
 800f4d0:	6113      	str	r3, [r2, #16]
 800f4d2:	e04e      	b.n	800f572 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f4d4:	693b      	ldr	r3, [r7, #16]
 800f4d6:	015a      	lsls	r2, r3, #5
 800f4d8:	697b      	ldr	r3, [r7, #20]
 800f4da:	4413      	add	r3, r2
 800f4dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4e0:	691b      	ldr	r3, [r3, #16]
 800f4e2:	693a      	ldr	r2, [r7, #16]
 800f4e4:	0151      	lsls	r1, r2, #5
 800f4e6:	697a      	ldr	r2, [r7, #20]
 800f4e8:	440a      	add	r2, r1
 800f4ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f4ee:	0cdb      	lsrs	r3, r3, #19
 800f4f0:	04db      	lsls	r3, r3, #19
 800f4f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f4f4:	693b      	ldr	r3, [r7, #16]
 800f4f6:	015a      	lsls	r2, r3, #5
 800f4f8:	697b      	ldr	r3, [r7, #20]
 800f4fa:	4413      	add	r3, r2
 800f4fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f500:	691b      	ldr	r3, [r3, #16]
 800f502:	693a      	ldr	r2, [r7, #16]
 800f504:	0151      	lsls	r1, r2, #5
 800f506:	697a      	ldr	r2, [r7, #20]
 800f508:	440a      	add	r2, r1
 800f50a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f50e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f512:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f516:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	695a      	ldr	r2, [r3, #20]
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	689b      	ldr	r3, [r3, #8]
 800f520:	429a      	cmp	r2, r3
 800f522:	d903      	bls.n	800f52c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800f524:	68bb      	ldr	r3, [r7, #8]
 800f526:	689a      	ldr	r2, [r3, #8]
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f52c:	693b      	ldr	r3, [r7, #16]
 800f52e:	015a      	lsls	r2, r3, #5
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	4413      	add	r3, r2
 800f534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f538:	691b      	ldr	r3, [r3, #16]
 800f53a:	693a      	ldr	r2, [r7, #16]
 800f53c:	0151      	lsls	r1, r2, #5
 800f53e:	697a      	ldr	r2, [r7, #20]
 800f540:	440a      	add	r2, r1
 800f542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f546:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f54a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f54c:	693b      	ldr	r3, [r7, #16]
 800f54e:	015a      	lsls	r2, r3, #5
 800f550:	697b      	ldr	r3, [r7, #20]
 800f552:	4413      	add	r3, r2
 800f554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f558:	691a      	ldr	r2, [r3, #16]
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	695b      	ldr	r3, [r3, #20]
 800f55e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f562:	6939      	ldr	r1, [r7, #16]
 800f564:	0148      	lsls	r0, r1, #5
 800f566:	6979      	ldr	r1, [r7, #20]
 800f568:	4401      	add	r1, r0
 800f56a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f56e:	4313      	orrs	r3, r2
 800f570:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f572:	79fb      	ldrb	r3, [r7, #7]
 800f574:	2b01      	cmp	r3, #1
 800f576:	d11e      	bne.n	800f5b6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	691b      	ldr	r3, [r3, #16]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d009      	beq.n	800f594 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f580:	693b      	ldr	r3, [r7, #16]
 800f582:	015a      	lsls	r2, r3, #5
 800f584:	697b      	ldr	r3, [r7, #20]
 800f586:	4413      	add	r3, r2
 800f588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f58c:	461a      	mov	r2, r3
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	691b      	ldr	r3, [r3, #16]
 800f592:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f594:	693b      	ldr	r3, [r7, #16]
 800f596:	015a      	lsls	r2, r3, #5
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	4413      	add	r3, r2
 800f59c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	693a      	ldr	r2, [r7, #16]
 800f5a4:	0151      	lsls	r1, r2, #5
 800f5a6:	697a      	ldr	r2, [r7, #20]
 800f5a8:	440a      	add	r2, r1
 800f5aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f5b2:	6013      	str	r3, [r2, #0]
 800f5b4:	e092      	b.n	800f6dc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f5b6:	693b      	ldr	r3, [r7, #16]
 800f5b8:	015a      	lsls	r2, r3, #5
 800f5ba:	697b      	ldr	r3, [r7, #20]
 800f5bc:	4413      	add	r3, r2
 800f5be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	693a      	ldr	r2, [r7, #16]
 800f5c6:	0151      	lsls	r1, r2, #5
 800f5c8:	697a      	ldr	r2, [r7, #20]
 800f5ca:	440a      	add	r2, r1
 800f5cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f5d4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800f5d6:	68bb      	ldr	r3, [r7, #8]
 800f5d8:	695b      	ldr	r3, [r3, #20]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d07e      	beq.n	800f6dc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f5e6:	68bb      	ldr	r3, [r7, #8]
 800f5e8:	781b      	ldrb	r3, [r3, #0]
 800f5ea:	f003 030f 	and.w	r3, r3, #15
 800f5ee:	2101      	movs	r1, #1
 800f5f0:	fa01 f303 	lsl.w	r3, r1, r3
 800f5f4:	6979      	ldr	r1, [r7, #20]
 800f5f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f5fa:	4313      	orrs	r3, r2
 800f5fc:	634b      	str	r3, [r1, #52]	; 0x34
 800f5fe:	e06d      	b.n	800f6dc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f600:	693b      	ldr	r3, [r7, #16]
 800f602:	015a      	lsls	r2, r3, #5
 800f604:	697b      	ldr	r3, [r7, #20]
 800f606:	4413      	add	r3, r2
 800f608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f60c:	691b      	ldr	r3, [r3, #16]
 800f60e:	693a      	ldr	r2, [r7, #16]
 800f610:	0151      	lsls	r1, r2, #5
 800f612:	697a      	ldr	r2, [r7, #20]
 800f614:	440a      	add	r2, r1
 800f616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f61a:	0cdb      	lsrs	r3, r3, #19
 800f61c:	04db      	lsls	r3, r3, #19
 800f61e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f620:	693b      	ldr	r3, [r7, #16]
 800f622:	015a      	lsls	r2, r3, #5
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	4413      	add	r3, r2
 800f628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f62c:	691b      	ldr	r3, [r3, #16]
 800f62e:	693a      	ldr	r2, [r7, #16]
 800f630:	0151      	lsls	r1, r2, #5
 800f632:	697a      	ldr	r2, [r7, #20]
 800f634:	440a      	add	r2, r1
 800f636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f63a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f63e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f642:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	695b      	ldr	r3, [r3, #20]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d003      	beq.n	800f654 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	689a      	ldr	r2, [r3, #8]
 800f650:	68bb      	ldr	r3, [r7, #8]
 800f652:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f654:	693b      	ldr	r3, [r7, #16]
 800f656:	015a      	lsls	r2, r3, #5
 800f658:	697b      	ldr	r3, [r7, #20]
 800f65a:	4413      	add	r3, r2
 800f65c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f660:	691b      	ldr	r3, [r3, #16]
 800f662:	693a      	ldr	r2, [r7, #16]
 800f664:	0151      	lsls	r1, r2, #5
 800f666:	697a      	ldr	r2, [r7, #20]
 800f668:	440a      	add	r2, r1
 800f66a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f66e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f672:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f674:	693b      	ldr	r3, [r7, #16]
 800f676:	015a      	lsls	r2, r3, #5
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	4413      	add	r3, r2
 800f67c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f680:	691a      	ldr	r2, [r3, #16]
 800f682:	68bb      	ldr	r3, [r7, #8]
 800f684:	689b      	ldr	r3, [r3, #8]
 800f686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f68a:	6939      	ldr	r1, [r7, #16]
 800f68c:	0148      	lsls	r0, r1, #5
 800f68e:	6979      	ldr	r1, [r7, #20]
 800f690:	4401      	add	r1, r0
 800f692:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f696:	4313      	orrs	r3, r2
 800f698:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800f69a:	79fb      	ldrb	r3, [r7, #7]
 800f69c:	2b01      	cmp	r3, #1
 800f69e:	d10d      	bne.n	800f6bc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	68db      	ldr	r3, [r3, #12]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d009      	beq.n	800f6bc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f6a8:	68bb      	ldr	r3, [r7, #8]
 800f6aa:	68d9      	ldr	r1, [r3, #12]
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	015a      	lsls	r2, r3, #5
 800f6b0:	697b      	ldr	r3, [r7, #20]
 800f6b2:	4413      	add	r3, r2
 800f6b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6b8:	460a      	mov	r2, r1
 800f6ba:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f6bc:	693b      	ldr	r3, [r7, #16]
 800f6be:	015a      	lsls	r2, r3, #5
 800f6c0:	697b      	ldr	r3, [r7, #20]
 800f6c2:	4413      	add	r3, r2
 800f6c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	693a      	ldr	r2, [r7, #16]
 800f6cc:	0151      	lsls	r1, r2, #5
 800f6ce:	697a      	ldr	r2, [r7, #20]
 800f6d0:	440a      	add	r2, r1
 800f6d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f6d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f6da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f6dc:	2300      	movs	r3, #0
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	371c      	adds	r7, #28
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e8:	4770      	bx	lr

0800f6ea <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f6ea:	b480      	push	{r7}
 800f6ec:	b089      	sub	sp, #36	; 0x24
 800f6ee:	af00      	add	r7, sp, #0
 800f6f0:	60f8      	str	r0, [r7, #12]
 800f6f2:	60b9      	str	r1, [r7, #8]
 800f6f4:	4611      	mov	r1, r2
 800f6f6:	461a      	mov	r2, r3
 800f6f8:	460b      	mov	r3, r1
 800f6fa:	71fb      	strb	r3, [r7, #7]
 800f6fc:	4613      	mov	r3, r2
 800f6fe:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800f704:	68bb      	ldr	r3, [r7, #8]
 800f706:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800f708:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d11a      	bne.n	800f746 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f710:	88bb      	ldrh	r3, [r7, #4]
 800f712:	3303      	adds	r3, #3
 800f714:	089b      	lsrs	r3, r3, #2
 800f716:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f718:	2300      	movs	r3, #0
 800f71a:	61bb      	str	r3, [r7, #24]
 800f71c:	e00f      	b.n	800f73e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f71e:	79fb      	ldrb	r3, [r7, #7]
 800f720:	031a      	lsls	r2, r3, #12
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	4413      	add	r3, r2
 800f726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f72a:	461a      	mov	r2, r3
 800f72c:	69fb      	ldr	r3, [r7, #28]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f732:	69fb      	ldr	r3, [r7, #28]
 800f734:	3304      	adds	r3, #4
 800f736:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f738:	69bb      	ldr	r3, [r7, #24]
 800f73a:	3301      	adds	r3, #1
 800f73c:	61bb      	str	r3, [r7, #24]
 800f73e:	69ba      	ldr	r2, [r7, #24]
 800f740:	693b      	ldr	r3, [r7, #16]
 800f742:	429a      	cmp	r2, r3
 800f744:	d3eb      	bcc.n	800f71e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f746:	2300      	movs	r3, #0
}
 800f748:	4618      	mov	r0, r3
 800f74a:	3724      	adds	r7, #36	; 0x24
 800f74c:	46bd      	mov	sp, r7
 800f74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f752:	4770      	bx	lr

0800f754 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f754:	b480      	push	{r7}
 800f756:	b089      	sub	sp, #36	; 0x24
 800f758:	af00      	add	r7, sp, #0
 800f75a:	60f8      	str	r0, [r7, #12]
 800f75c:	60b9      	str	r1, [r7, #8]
 800f75e:	4613      	mov	r3, r2
 800f760:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800f76a:	88fb      	ldrh	r3, [r7, #6]
 800f76c:	3303      	adds	r3, #3
 800f76e:	089b      	lsrs	r3, r3, #2
 800f770:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800f772:	2300      	movs	r3, #0
 800f774:	61bb      	str	r3, [r7, #24]
 800f776:	e00b      	b.n	800f790 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f77e:	681a      	ldr	r2, [r3, #0]
 800f780:	69fb      	ldr	r3, [r7, #28]
 800f782:	601a      	str	r2, [r3, #0]
    pDest++;
 800f784:	69fb      	ldr	r3, [r7, #28]
 800f786:	3304      	adds	r3, #4
 800f788:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800f78a:	69bb      	ldr	r3, [r7, #24]
 800f78c:	3301      	adds	r3, #1
 800f78e:	61bb      	str	r3, [r7, #24]
 800f790:	69ba      	ldr	r2, [r7, #24]
 800f792:	693b      	ldr	r3, [r7, #16]
 800f794:	429a      	cmp	r2, r3
 800f796:	d3ef      	bcc.n	800f778 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800f798:	69fb      	ldr	r3, [r7, #28]
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	3724      	adds	r7, #36	; 0x24
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a4:	4770      	bx	lr

0800f7a6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f7a6:	b480      	push	{r7}
 800f7a8:	b085      	sub	sp, #20
 800f7aa:	af00      	add	r7, sp, #0
 800f7ac:	6078      	str	r0, [r7, #4]
 800f7ae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	781b      	ldrb	r3, [r3, #0]
 800f7b8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	785b      	ldrb	r3, [r3, #1]
 800f7be:	2b01      	cmp	r3, #1
 800f7c0:	d12c      	bne.n	800f81c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f7c2:	68bb      	ldr	r3, [r7, #8]
 800f7c4:	015a      	lsls	r2, r3, #5
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	4413      	add	r3, r2
 800f7ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	db12      	blt.n	800f7fa <USB_EPSetStall+0x54>
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d00f      	beq.n	800f7fa <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f7da:	68bb      	ldr	r3, [r7, #8]
 800f7dc:	015a      	lsls	r2, r3, #5
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	4413      	add	r3, r2
 800f7e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	68ba      	ldr	r2, [r7, #8]
 800f7ea:	0151      	lsls	r1, r2, #5
 800f7ec:	68fa      	ldr	r2, [r7, #12]
 800f7ee:	440a      	add	r2, r1
 800f7f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f7f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f7f8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	015a      	lsls	r2, r3, #5
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	4413      	add	r3, r2
 800f802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	68ba      	ldr	r2, [r7, #8]
 800f80a:	0151      	lsls	r1, r2, #5
 800f80c:	68fa      	ldr	r2, [r7, #12]
 800f80e:	440a      	add	r2, r1
 800f810:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f814:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f818:	6013      	str	r3, [r2, #0]
 800f81a:	e02b      	b.n	800f874 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	015a      	lsls	r2, r3, #5
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	4413      	add	r3, r2
 800f824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	db12      	blt.n	800f854 <USB_EPSetStall+0xae>
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d00f      	beq.n	800f854 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f834:	68bb      	ldr	r3, [r7, #8]
 800f836:	015a      	lsls	r2, r3, #5
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	4413      	add	r3, r2
 800f83c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	68ba      	ldr	r2, [r7, #8]
 800f844:	0151      	lsls	r1, r2, #5
 800f846:	68fa      	ldr	r2, [r7, #12]
 800f848:	440a      	add	r2, r1
 800f84a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f84e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f852:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f854:	68bb      	ldr	r3, [r7, #8]
 800f856:	015a      	lsls	r2, r3, #5
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	4413      	add	r3, r2
 800f85c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	68ba      	ldr	r2, [r7, #8]
 800f864:	0151      	lsls	r1, r2, #5
 800f866:	68fa      	ldr	r2, [r7, #12]
 800f868:	440a      	add	r2, r1
 800f86a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f86e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f872:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f874:	2300      	movs	r3, #0
}
 800f876:	4618      	mov	r0, r3
 800f878:	3714      	adds	r7, #20
 800f87a:	46bd      	mov	sp, r7
 800f87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f880:	4770      	bx	lr

0800f882 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f882:	b480      	push	{r7}
 800f884:	b085      	sub	sp, #20
 800f886:	af00      	add	r7, sp, #0
 800f888:	6078      	str	r0, [r7, #4]
 800f88a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f890:	683b      	ldr	r3, [r7, #0]
 800f892:	781b      	ldrb	r3, [r3, #0]
 800f894:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	785b      	ldrb	r3, [r3, #1]
 800f89a:	2b01      	cmp	r3, #1
 800f89c:	d128      	bne.n	800f8f0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f89e:	68bb      	ldr	r3, [r7, #8]
 800f8a0:	015a      	lsls	r2, r3, #5
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	4413      	add	r3, r2
 800f8a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	68ba      	ldr	r2, [r7, #8]
 800f8ae:	0151      	lsls	r1, r2, #5
 800f8b0:	68fa      	ldr	r2, [r7, #12]
 800f8b2:	440a      	add	r2, r1
 800f8b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f8bc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	78db      	ldrb	r3, [r3, #3]
 800f8c2:	2b03      	cmp	r3, #3
 800f8c4:	d003      	beq.n	800f8ce <USB_EPClearStall+0x4c>
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	78db      	ldrb	r3, [r3, #3]
 800f8ca:	2b02      	cmp	r3, #2
 800f8cc:	d138      	bne.n	800f940 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f8ce:	68bb      	ldr	r3, [r7, #8]
 800f8d0:	015a      	lsls	r2, r3, #5
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	4413      	add	r3, r2
 800f8d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	68ba      	ldr	r2, [r7, #8]
 800f8de:	0151      	lsls	r1, r2, #5
 800f8e0:	68fa      	ldr	r2, [r7, #12]
 800f8e2:	440a      	add	r2, r1
 800f8e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f8ec:	6013      	str	r3, [r2, #0]
 800f8ee:	e027      	b.n	800f940 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f8f0:	68bb      	ldr	r3, [r7, #8]
 800f8f2:	015a      	lsls	r2, r3, #5
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	4413      	add	r3, r2
 800f8f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	68ba      	ldr	r2, [r7, #8]
 800f900:	0151      	lsls	r1, r2, #5
 800f902:	68fa      	ldr	r2, [r7, #12]
 800f904:	440a      	add	r2, r1
 800f906:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f90a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f90e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	78db      	ldrb	r3, [r3, #3]
 800f914:	2b03      	cmp	r3, #3
 800f916:	d003      	beq.n	800f920 <USB_EPClearStall+0x9e>
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	78db      	ldrb	r3, [r3, #3]
 800f91c:	2b02      	cmp	r3, #2
 800f91e:	d10f      	bne.n	800f940 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	015a      	lsls	r2, r3, #5
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	4413      	add	r3, r2
 800f928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	68ba      	ldr	r2, [r7, #8]
 800f930:	0151      	lsls	r1, r2, #5
 800f932:	68fa      	ldr	r2, [r7, #12]
 800f934:	440a      	add	r2, r1
 800f936:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f93a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f93e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f940:	2300      	movs	r3, #0
}
 800f942:	4618      	mov	r0, r3
 800f944:	3714      	adds	r7, #20
 800f946:	46bd      	mov	sp, r7
 800f948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94c:	4770      	bx	lr

0800f94e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f94e:	b480      	push	{r7}
 800f950:	b085      	sub	sp, #20
 800f952:	af00      	add	r7, sp, #0
 800f954:	6078      	str	r0, [r7, #4]
 800f956:	460b      	mov	r3, r1
 800f958:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	68fa      	ldr	r2, [r7, #12]
 800f968:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f96c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f970:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f978:	681a      	ldr	r2, [r3, #0]
 800f97a:	78fb      	ldrb	r3, [r7, #3]
 800f97c:	011b      	lsls	r3, r3, #4
 800f97e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f982:	68f9      	ldr	r1, [r7, #12]
 800f984:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f988:	4313      	orrs	r3, r2
 800f98a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f98c:	2300      	movs	r3, #0
}
 800f98e:	4618      	mov	r0, r3
 800f990:	3714      	adds	r7, #20
 800f992:	46bd      	mov	sp, r7
 800f994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f998:	4770      	bx	lr

0800f99a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f99a:	b580      	push	{r7, lr}
 800f99c:	b084      	sub	sp, #16
 800f99e:	af00      	add	r7, sp, #0
 800f9a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9ac:	685b      	ldr	r3, [r3, #4]
 800f9ae:	68fa      	ldr	r2, [r7, #12]
 800f9b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f9b4:	f023 0302 	bic.w	r3, r3, #2
 800f9b8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800f9ba:	2003      	movs	r0, #3
 800f9bc:	f7f8 f96a 	bl	8007c94 <HAL_Delay>

  return HAL_OK;
 800f9c0:	2300      	movs	r3, #0
}
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	3710      	adds	r7, #16
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd80      	pop	{r7, pc}

0800f9ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f9ca:	b580      	push	{r7, lr}
 800f9cc:	b084      	sub	sp, #16
 800f9ce:	af00      	add	r7, sp, #0
 800f9d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9dc:	685b      	ldr	r3, [r3, #4]
 800f9de:	68fa      	ldr	r2, [r7, #12]
 800f9e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f9e4:	f043 0302 	orr.w	r3, r3, #2
 800f9e8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800f9ea:	2003      	movs	r0, #3
 800f9ec:	f7f8 f952 	bl	8007c94 <HAL_Delay>

  return HAL_OK;
 800f9f0:	2300      	movs	r3, #0
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	3710      	adds	r7, #16
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}

0800f9fa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f9fa:	b480      	push	{r7}
 800f9fc:	b085      	sub	sp, #20
 800f9fe:	af00      	add	r7, sp, #0
 800fa00:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	695b      	ldr	r3, [r3, #20]
 800fa06:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	699b      	ldr	r3, [r3, #24]
 800fa0c:	68fa      	ldr	r2, [r7, #12]
 800fa0e:	4013      	ands	r3, r2
 800fa10:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800fa12:	68fb      	ldr	r3, [r7, #12]
}
 800fa14:	4618      	mov	r0, r3
 800fa16:	3714      	adds	r7, #20
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1e:	4770      	bx	lr

0800fa20 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fa20:	b480      	push	{r7}
 800fa22:	b085      	sub	sp, #20
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa32:	699b      	ldr	r3, [r3, #24]
 800fa34:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa3c:	69db      	ldr	r3, [r3, #28]
 800fa3e:	68ba      	ldr	r2, [r7, #8]
 800fa40:	4013      	ands	r3, r2
 800fa42:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	0c1b      	lsrs	r3, r3, #16
}
 800fa48:	4618      	mov	r0, r3
 800fa4a:	3714      	adds	r7, #20
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa52:	4770      	bx	lr

0800fa54 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fa54:	b480      	push	{r7}
 800fa56:	b085      	sub	sp, #20
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa66:	699b      	ldr	r3, [r3, #24]
 800fa68:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa70:	69db      	ldr	r3, [r3, #28]
 800fa72:	68ba      	ldr	r2, [r7, #8]
 800fa74:	4013      	ands	r3, r2
 800fa76:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	b29b      	uxth	r3, r3
}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	3714      	adds	r7, #20
 800fa80:	46bd      	mov	sp, r7
 800fa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa86:	4770      	bx	lr

0800fa88 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fa88:	b480      	push	{r7}
 800fa8a:	b085      	sub	sp, #20
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
 800fa90:	460b      	mov	r3, r1
 800fa92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800fa98:	78fb      	ldrb	r3, [r7, #3]
 800fa9a:	015a      	lsls	r2, r3, #5
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	4413      	add	r3, r2
 800faa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800faa4:	689b      	ldr	r3, [r3, #8]
 800faa6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800faae:	695b      	ldr	r3, [r3, #20]
 800fab0:	68ba      	ldr	r2, [r7, #8]
 800fab2:	4013      	ands	r3, r2
 800fab4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fab6:	68bb      	ldr	r3, [r7, #8]
}
 800fab8:	4618      	mov	r0, r3
 800faba:	3714      	adds	r7, #20
 800fabc:	46bd      	mov	sp, r7
 800fabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac2:	4770      	bx	lr

0800fac4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fac4:	b480      	push	{r7}
 800fac6:	b087      	sub	sp, #28
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
 800facc:	460b      	mov	r3, r1
 800face:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fada:	691b      	ldr	r3, [r3, #16]
 800fadc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800fade:	697b      	ldr	r3, [r7, #20]
 800fae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fae6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800fae8:	78fb      	ldrb	r3, [r7, #3]
 800faea:	f003 030f 	and.w	r3, r3, #15
 800faee:	68fa      	ldr	r2, [r7, #12]
 800faf0:	fa22 f303 	lsr.w	r3, r2, r3
 800faf4:	01db      	lsls	r3, r3, #7
 800faf6:	b2db      	uxtb	r3, r3
 800faf8:	693a      	ldr	r2, [r7, #16]
 800fafa:	4313      	orrs	r3, r2
 800fafc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800fafe:	78fb      	ldrb	r3, [r7, #3]
 800fb00:	015a      	lsls	r2, r3, #5
 800fb02:	697b      	ldr	r3, [r7, #20]
 800fb04:	4413      	add	r3, r2
 800fb06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb0a:	689b      	ldr	r3, [r3, #8]
 800fb0c:	693a      	ldr	r2, [r7, #16]
 800fb0e:	4013      	ands	r3, r2
 800fb10:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fb12:	68bb      	ldr	r3, [r7, #8]
}
 800fb14:	4618      	mov	r0, r3
 800fb16:	371c      	adds	r7, #28
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1e:	4770      	bx	lr

0800fb20 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800fb20:	b480      	push	{r7}
 800fb22:	b083      	sub	sp, #12
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	695b      	ldr	r3, [r3, #20]
 800fb2c:	f003 0301 	and.w	r3, r3, #1
}
 800fb30:	4618      	mov	r0, r3
 800fb32:	370c      	adds	r7, #12
 800fb34:	46bd      	mov	sp, r7
 800fb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3a:	4770      	bx	lr

0800fb3c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800fb3c:	b480      	push	{r7}
 800fb3e:	b085      	sub	sp, #20
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	68fa      	ldr	r2, [r7, #12]
 800fb52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb56:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800fb5a:	f023 0307 	bic.w	r3, r3, #7
 800fb5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb66:	685b      	ldr	r3, [r3, #4]
 800fb68:	68fa      	ldr	r2, [r7, #12]
 800fb6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fb6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fb72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fb74:	2300      	movs	r3, #0
}
 800fb76:	4618      	mov	r0, r3
 800fb78:	3714      	adds	r7, #20
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb80:	4770      	bx	lr
	...

0800fb84 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800fb84:	b480      	push	{r7}
 800fb86:	b087      	sub	sp, #28
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	60f8      	str	r0, [r7, #12]
 800fb8c:	460b      	mov	r3, r1
 800fb8e:	607a      	str	r2, [r7, #4]
 800fb90:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	333c      	adds	r3, #60	; 0x3c
 800fb9a:	3304      	adds	r3, #4
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800fba0:	693b      	ldr	r3, [r7, #16]
 800fba2:	4a26      	ldr	r2, [pc, #152]	; (800fc3c <USB_EP0_OutStart+0xb8>)
 800fba4:	4293      	cmp	r3, r2
 800fba6:	d90a      	bls.n	800fbbe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fba8:	697b      	ldr	r3, [r7, #20]
 800fbaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fbb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fbb8:	d101      	bne.n	800fbbe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800fbba:	2300      	movs	r3, #0
 800fbbc:	e037      	b.n	800fc2e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbc4:	461a      	mov	r2, r3
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbd0:	691b      	ldr	r3, [r3, #16]
 800fbd2:	697a      	ldr	r2, [r7, #20]
 800fbd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fbd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fbdc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800fbde:	697b      	ldr	r3, [r7, #20]
 800fbe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbe4:	691b      	ldr	r3, [r3, #16]
 800fbe6:	697a      	ldr	r2, [r7, #20]
 800fbe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fbec:	f043 0318 	orr.w	r3, r3, #24
 800fbf0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800fbf2:	697b      	ldr	r3, [r7, #20]
 800fbf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbf8:	691b      	ldr	r3, [r3, #16]
 800fbfa:	697a      	ldr	r2, [r7, #20]
 800fbfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc00:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800fc04:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800fc06:	7afb      	ldrb	r3, [r7, #11]
 800fc08:	2b01      	cmp	r3, #1
 800fc0a:	d10f      	bne.n	800fc2c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc12:	461a      	mov	r2, r3
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	697a      	ldr	r2, [r7, #20]
 800fc22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc26:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800fc2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fc2c:	2300      	movs	r3, #0
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	371c      	adds	r7, #28
 800fc32:	46bd      	mov	sp, r7
 800fc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc38:	4770      	bx	lr
 800fc3a:	bf00      	nop
 800fc3c:	4f54300a 	.word	0x4f54300a

0800fc40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fc40:	b480      	push	{r7}
 800fc42:	b085      	sub	sp, #20
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800fc48:	2300      	movs	r3, #0
 800fc4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	3301      	adds	r3, #1
 800fc50:	60fb      	str	r3, [r7, #12]
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	4a13      	ldr	r2, [pc, #76]	; (800fca4 <USB_CoreReset+0x64>)
 800fc56:	4293      	cmp	r3, r2
 800fc58:	d901      	bls.n	800fc5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fc5a:	2303      	movs	r3, #3
 800fc5c:	e01b      	b.n	800fc96 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	691b      	ldr	r3, [r3, #16]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	daf2      	bge.n	800fc4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fc66:	2300      	movs	r3, #0
 800fc68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	691b      	ldr	r3, [r3, #16]
 800fc6e:	f043 0201 	orr.w	r2, r3, #1
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	3301      	adds	r3, #1
 800fc7a:	60fb      	str	r3, [r7, #12]
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	4a09      	ldr	r2, [pc, #36]	; (800fca4 <USB_CoreReset+0x64>)
 800fc80:	4293      	cmp	r3, r2
 800fc82:	d901      	bls.n	800fc88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fc84:	2303      	movs	r3, #3
 800fc86:	e006      	b.n	800fc96 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	691b      	ldr	r3, [r3, #16]
 800fc8c:	f003 0301 	and.w	r3, r3, #1
 800fc90:	2b01      	cmp	r3, #1
 800fc92:	d0f0      	beq.n	800fc76 <USB_CoreReset+0x36>

  return HAL_OK;
 800fc94:	2300      	movs	r3, #0
}
 800fc96:	4618      	mov	r0, r3
 800fc98:	3714      	adds	r7, #20
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca0:	4770      	bx	lr
 800fca2:	bf00      	nop
 800fca4:	00030d40 	.word	0x00030d40

0800fca8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b084      	sub	sp, #16
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
 800fcb0:	460b      	mov	r3, r1
 800fcb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800fcb4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800fcb8:	f004 ff9c 	bl	8014bf4 <malloc>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d105      	bne.n	800fcd2 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2200      	movs	r2, #0
 800fcca:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800fcce:	2302      	movs	r3, #2
 800fcd0:	e066      	b.n	800fda0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	68fa      	ldr	r2, [r7, #12]
 800fcd6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	7c1b      	ldrb	r3, [r3, #16]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d119      	bne.n	800fd16 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800fce2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fce6:	2202      	movs	r2, #2
 800fce8:	2181      	movs	r1, #129	; 0x81
 800fcea:	6878      	ldr	r0, [r7, #4]
 800fcec:	f001 ff57 	bl	8011b9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2201      	movs	r2, #1
 800fcf4:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800fcf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fcfa:	2202      	movs	r2, #2
 800fcfc:	2101      	movs	r1, #1
 800fcfe:	6878      	ldr	r0, [r7, #4]
 800fd00:	f001 ff4d 	bl	8011b9e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2201      	movs	r2, #1
 800fd08:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2210      	movs	r2, #16
 800fd10:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800fd14:	e016      	b.n	800fd44 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800fd16:	2340      	movs	r3, #64	; 0x40
 800fd18:	2202      	movs	r2, #2
 800fd1a:	2181      	movs	r1, #129	; 0x81
 800fd1c:	6878      	ldr	r0, [r7, #4]
 800fd1e:	f001 ff3e 	bl	8011b9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	2201      	movs	r2, #1
 800fd26:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800fd28:	2340      	movs	r3, #64	; 0x40
 800fd2a:	2202      	movs	r2, #2
 800fd2c:	2101      	movs	r1, #1
 800fd2e:	6878      	ldr	r0, [r7, #4]
 800fd30:	f001 ff35 	bl	8011b9e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2201      	movs	r2, #1
 800fd38:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	2210      	movs	r2, #16
 800fd40:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800fd44:	2308      	movs	r3, #8
 800fd46:	2203      	movs	r2, #3
 800fd48:	2182      	movs	r1, #130	; 0x82
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	f001 ff27 	bl	8011b9e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	2201      	movs	r2, #1
 800fd54:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	2200      	movs	r2, #0
 800fd66:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	7c1b      	ldrb	r3, [r3, #16]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d109      	bne.n	800fd8e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fd80:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fd84:	2101      	movs	r1, #1
 800fd86:	6878      	ldr	r0, [r7, #4]
 800fd88:	f001 fff8 	bl	8011d7c <USBD_LL_PrepareReceive>
 800fd8c:	e007      	b.n	800fd9e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fd94:	2340      	movs	r3, #64	; 0x40
 800fd96:	2101      	movs	r1, #1
 800fd98:	6878      	ldr	r0, [r7, #4]
 800fd9a:	f001 ffef 	bl	8011d7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fd9e:	2300      	movs	r3, #0
}
 800fda0:	4618      	mov	r0, r3
 800fda2:	3710      	adds	r7, #16
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}

0800fda8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b084      	sub	sp, #16
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
 800fdb0:	460b      	mov	r3, r1
 800fdb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800fdb8:	2181      	movs	r1, #129	; 0x81
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f001 ff15 	bl	8011bea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800fdc6:	2101      	movs	r1, #1
 800fdc8:	6878      	ldr	r0, [r7, #4]
 800fdca:	f001 ff0e 	bl	8011bea <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800fdd6:	2182      	movs	r1, #130	; 0x82
 800fdd8:	6878      	ldr	r0, [r7, #4]
 800fdda:	f001 ff06 	bl	8011bea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	2200      	movs	r2, #0
 800fde2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	2200      	movs	r2, #0
 800fdea:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d00e      	beq.n	800fe16 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fdfe:	685b      	ldr	r3, [r3, #4]
 800fe00:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f004 fefb 	bl	8014c04 <free>
    pdev->pClassData = NULL;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	2200      	movs	r2, #0
 800fe12:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800fe16:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe18:	4618      	mov	r0, r3
 800fe1a:	3710      	adds	r7, #16
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}

0800fe20 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b086      	sub	sp, #24
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
 800fe28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fe30:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800fe32:	2300      	movs	r3, #0
 800fe34:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800fe36:	2300      	movs	r3, #0
 800fe38:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fe3e:	683b      	ldr	r3, [r7, #0]
 800fe40:	781b      	ldrb	r3, [r3, #0]
 800fe42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d03a      	beq.n	800fec0 <USBD_CDC_Setup+0xa0>
 800fe4a:	2b20      	cmp	r3, #32
 800fe4c:	f040 8097 	bne.w	800ff7e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	88db      	ldrh	r3, [r3, #6]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d029      	beq.n	800feac <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	781b      	ldrb	r3, [r3, #0]
 800fe5c:	b25b      	sxtb	r3, r3
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	da11      	bge.n	800fe86 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fe68:	689b      	ldr	r3, [r3, #8]
 800fe6a:	683a      	ldr	r2, [r7, #0]
 800fe6c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800fe6e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800fe70:	683a      	ldr	r2, [r7, #0]
 800fe72:	88d2      	ldrh	r2, [r2, #6]
 800fe74:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800fe76:	6939      	ldr	r1, [r7, #16]
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	88db      	ldrh	r3, [r3, #6]
 800fe7c:	461a      	mov	r2, r3
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	f001 fa6d 	bl	801135e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800fe84:	e082      	b.n	800ff8c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800fe86:	683b      	ldr	r3, [r7, #0]
 800fe88:	785a      	ldrb	r2, [r3, #1]
 800fe8a:	693b      	ldr	r3, [r7, #16]
 800fe8c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	88db      	ldrh	r3, [r3, #6]
 800fe94:	b2da      	uxtb	r2, r3
 800fe96:	693b      	ldr	r3, [r7, #16]
 800fe98:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800fe9c:	6939      	ldr	r1, [r7, #16]
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	88db      	ldrh	r3, [r3, #6]
 800fea2:	461a      	mov	r2, r3
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	f001 fa86 	bl	80113b6 <USBD_CtlPrepareRx>
    break;
 800feaa:	e06f      	b.n	800ff8c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800feb2:	689b      	ldr	r3, [r3, #8]
 800feb4:	683a      	ldr	r2, [r7, #0]
 800feb6:	7850      	ldrb	r0, [r2, #1]
 800feb8:	2200      	movs	r2, #0
 800feba:	6839      	ldr	r1, [r7, #0]
 800febc:	4798      	blx	r3
    break;
 800febe:	e065      	b.n	800ff8c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	785b      	ldrb	r3, [r3, #1]
 800fec4:	2b0b      	cmp	r3, #11
 800fec6:	d84f      	bhi.n	800ff68 <USBD_CDC_Setup+0x148>
 800fec8:	a201      	add	r2, pc, #4	; (adr r2, 800fed0 <USBD_CDC_Setup+0xb0>)
 800feca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fece:	bf00      	nop
 800fed0:	0800ff01 	.word	0x0800ff01
 800fed4:	0800ff77 	.word	0x0800ff77
 800fed8:	0800ff69 	.word	0x0800ff69
 800fedc:	0800ff69 	.word	0x0800ff69
 800fee0:	0800ff69 	.word	0x0800ff69
 800fee4:	0800ff69 	.word	0x0800ff69
 800fee8:	0800ff69 	.word	0x0800ff69
 800feec:	0800ff69 	.word	0x0800ff69
 800fef0:	0800ff69 	.word	0x0800ff69
 800fef4:	0800ff69 	.word	0x0800ff69
 800fef8:	0800ff29 	.word	0x0800ff29
 800fefc:	0800ff51 	.word	0x0800ff51
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff06:	2b03      	cmp	r3, #3
 800ff08:	d107      	bne.n	800ff1a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ff0a:	f107 030c 	add.w	r3, r7, #12
 800ff0e:	2202      	movs	r2, #2
 800ff10:	4619      	mov	r1, r3
 800ff12:	6878      	ldr	r0, [r7, #4]
 800ff14:	f001 fa23 	bl	801135e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ff18:	e030      	b.n	800ff7c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800ff1a:	6839      	ldr	r1, [r7, #0]
 800ff1c:	6878      	ldr	r0, [r7, #4]
 800ff1e:	f001 f9ad 	bl	801127c <USBD_CtlError>
        ret = USBD_FAIL;
 800ff22:	2303      	movs	r3, #3
 800ff24:	75fb      	strb	r3, [r7, #23]
      break;
 800ff26:	e029      	b.n	800ff7c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff2e:	2b03      	cmp	r3, #3
 800ff30:	d107      	bne.n	800ff42 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ff32:	f107 030f 	add.w	r3, r7, #15
 800ff36:	2201      	movs	r2, #1
 800ff38:	4619      	mov	r1, r3
 800ff3a:	6878      	ldr	r0, [r7, #4]
 800ff3c:	f001 fa0f 	bl	801135e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ff40:	e01c      	b.n	800ff7c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800ff42:	6839      	ldr	r1, [r7, #0]
 800ff44:	6878      	ldr	r0, [r7, #4]
 800ff46:	f001 f999 	bl	801127c <USBD_CtlError>
        ret = USBD_FAIL;
 800ff4a:	2303      	movs	r3, #3
 800ff4c:	75fb      	strb	r3, [r7, #23]
      break;
 800ff4e:	e015      	b.n	800ff7c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff56:	2b03      	cmp	r3, #3
 800ff58:	d00f      	beq.n	800ff7a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800ff5a:	6839      	ldr	r1, [r7, #0]
 800ff5c:	6878      	ldr	r0, [r7, #4]
 800ff5e:	f001 f98d 	bl	801127c <USBD_CtlError>
        ret = USBD_FAIL;
 800ff62:	2303      	movs	r3, #3
 800ff64:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800ff66:	e008      	b.n	800ff7a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800ff68:	6839      	ldr	r1, [r7, #0]
 800ff6a:	6878      	ldr	r0, [r7, #4]
 800ff6c:	f001 f986 	bl	801127c <USBD_CtlError>
      ret = USBD_FAIL;
 800ff70:	2303      	movs	r3, #3
 800ff72:	75fb      	strb	r3, [r7, #23]
      break;
 800ff74:	e002      	b.n	800ff7c <USBD_CDC_Setup+0x15c>
      break;
 800ff76:	bf00      	nop
 800ff78:	e008      	b.n	800ff8c <USBD_CDC_Setup+0x16c>
      break;
 800ff7a:	bf00      	nop
    }
    break;
 800ff7c:	e006      	b.n	800ff8c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800ff7e:	6839      	ldr	r1, [r7, #0]
 800ff80:	6878      	ldr	r0, [r7, #4]
 800ff82:	f001 f97b 	bl	801127c <USBD_CtlError>
    ret = USBD_FAIL;
 800ff86:	2303      	movs	r3, #3
 800ff88:	75fb      	strb	r3, [r7, #23]
    break;
 800ff8a:	bf00      	nop
  }

  return (uint8_t)ret;
 800ff8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff8e:	4618      	mov	r0, r3
 800ff90:	3718      	adds	r7, #24
 800ff92:	46bd      	mov	sp, r7
 800ff94:	bd80      	pop	{r7, pc}
 800ff96:	bf00      	nop

0800ff98 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b084      	sub	sp, #16
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
 800ffa0:	460b      	mov	r3, r1
 800ffa2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ffaa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d101      	bne.n	800ffba <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ffb6:	2303      	movs	r3, #3
 800ffb8:	e049      	b.n	801004e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ffc0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ffc2:	78fa      	ldrb	r2, [r7, #3]
 800ffc4:	6879      	ldr	r1, [r7, #4]
 800ffc6:	4613      	mov	r3, r2
 800ffc8:	009b      	lsls	r3, r3, #2
 800ffca:	4413      	add	r3, r2
 800ffcc:	009b      	lsls	r3, r3, #2
 800ffce:	440b      	add	r3, r1
 800ffd0:	3318      	adds	r3, #24
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d029      	beq.n	801002c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ffd8:	78fa      	ldrb	r2, [r7, #3]
 800ffda:	6879      	ldr	r1, [r7, #4]
 800ffdc:	4613      	mov	r3, r2
 800ffde:	009b      	lsls	r3, r3, #2
 800ffe0:	4413      	add	r3, r2
 800ffe2:	009b      	lsls	r3, r3, #2
 800ffe4:	440b      	add	r3, r1
 800ffe6:	3318      	adds	r3, #24
 800ffe8:	681a      	ldr	r2, [r3, #0]
 800ffea:	78f9      	ldrb	r1, [r7, #3]
 800ffec:	68f8      	ldr	r0, [r7, #12]
 800ffee:	460b      	mov	r3, r1
 800fff0:	00db      	lsls	r3, r3, #3
 800fff2:	1a5b      	subs	r3, r3, r1
 800fff4:	009b      	lsls	r3, r3, #2
 800fff6:	4403      	add	r3, r0
 800fff8:	3344      	adds	r3, #68	; 0x44
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	fbb2 f1f3 	udiv	r1, r2, r3
 8010000:	fb03 f301 	mul.w	r3, r3, r1
 8010004:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010006:	2b00      	cmp	r3, #0
 8010008:	d110      	bne.n	801002c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801000a:	78fa      	ldrb	r2, [r7, #3]
 801000c:	6879      	ldr	r1, [r7, #4]
 801000e:	4613      	mov	r3, r2
 8010010:	009b      	lsls	r3, r3, #2
 8010012:	4413      	add	r3, r2
 8010014:	009b      	lsls	r3, r3, #2
 8010016:	440b      	add	r3, r1
 8010018:	3318      	adds	r3, #24
 801001a:	2200      	movs	r2, #0
 801001c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801001e:	78f9      	ldrb	r1, [r7, #3]
 8010020:	2300      	movs	r3, #0
 8010022:	2200      	movs	r2, #0
 8010024:	6878      	ldr	r0, [r7, #4]
 8010026:	f001 fe88 	bl	8011d3a <USBD_LL_Transmit>
 801002a:	e00f      	b.n	801004c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	2200      	movs	r2, #0
 8010030:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801003a:	691b      	ldr	r3, [r3, #16]
 801003c:	68ba      	ldr	r2, [r7, #8]
 801003e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8010042:	68ba      	ldr	r2, [r7, #8]
 8010044:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8010048:	78fa      	ldrb	r2, [r7, #3]
 801004a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 801004c:	2300      	movs	r3, #0
}
 801004e:	4618      	mov	r0, r3
 8010050:	3710      	adds	r7, #16
 8010052:	46bd      	mov	sp, r7
 8010054:	bd80      	pop	{r7, pc}

08010056 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010056:	b580      	push	{r7, lr}
 8010058:	b084      	sub	sp, #16
 801005a:	af00      	add	r7, sp, #0
 801005c:	6078      	str	r0, [r7, #4]
 801005e:	460b      	mov	r3, r1
 8010060:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010068:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010070:	2b00      	cmp	r3, #0
 8010072:	d101      	bne.n	8010078 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010074:	2303      	movs	r3, #3
 8010076:	e015      	b.n	80100a4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010078:	78fb      	ldrb	r3, [r7, #3]
 801007a:	4619      	mov	r1, r3
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f001 fe9e 	bl	8011dbe <USBD_LL_GetRxDataSize>
 8010082:	4602      	mov	r2, r0
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010090:	68db      	ldr	r3, [r3, #12]
 8010092:	68fa      	ldr	r2, [r7, #12]
 8010094:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010098:	68fa      	ldr	r2, [r7, #12]
 801009a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801009e:	4611      	mov	r1, r2
 80100a0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80100a2:	2300      	movs	r3, #0
}
 80100a4:	4618      	mov	r0, r3
 80100a6:	3710      	adds	r7, #16
 80100a8:	46bd      	mov	sp, r7
 80100aa:	bd80      	pop	{r7, pc}

080100ac <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b084      	sub	sp, #16
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80100ba:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d015      	beq.n	80100f2 <USBD_CDC_EP0_RxReady+0x46>
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80100cc:	2bff      	cmp	r3, #255	; 0xff
 80100ce:	d010      	beq.n	80100f2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80100d6:	689b      	ldr	r3, [r3, #8]
 80100d8:	68fa      	ldr	r2, [r7, #12]
 80100da:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80100de:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80100e0:	68fa      	ldr	r2, [r7, #12]
 80100e2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80100e6:	b292      	uxth	r2, r2
 80100e8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	22ff      	movs	r2, #255	; 0xff
 80100ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80100f2:	2300      	movs	r3, #0
}
 80100f4:	4618      	mov	r0, r3
 80100f6:	3710      	adds	r7, #16
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}

080100fc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80100fc:	b480      	push	{r7}
 80100fe:	b083      	sub	sp, #12
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2243      	movs	r2, #67	; 0x43
 8010108:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801010a:	4b03      	ldr	r3, [pc, #12]	; (8010118 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801010c:	4618      	mov	r0, r3
 801010e:	370c      	adds	r7, #12
 8010110:	46bd      	mov	sp, r7
 8010112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010116:	4770      	bx	lr
 8010118:	20000114 	.word	0x20000114

0801011c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801011c:	b480      	push	{r7}
 801011e:	b083      	sub	sp, #12
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2243      	movs	r2, #67	; 0x43
 8010128:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801012a:	4b03      	ldr	r3, [pc, #12]	; (8010138 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801012c:	4618      	mov	r0, r3
 801012e:	370c      	adds	r7, #12
 8010130:	46bd      	mov	sp, r7
 8010132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010136:	4770      	bx	lr
 8010138:	200000d0 	.word	0x200000d0

0801013c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801013c:	b480      	push	{r7}
 801013e:	b083      	sub	sp, #12
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	2243      	movs	r2, #67	; 0x43
 8010148:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801014a:	4b03      	ldr	r3, [pc, #12]	; (8010158 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801014c:	4618      	mov	r0, r3
 801014e:	370c      	adds	r7, #12
 8010150:	46bd      	mov	sp, r7
 8010152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010156:	4770      	bx	lr
 8010158:	20000158 	.word	0x20000158

0801015c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801015c:	b480      	push	{r7}
 801015e:	b083      	sub	sp, #12
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	220a      	movs	r2, #10
 8010168:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801016a:	4b03      	ldr	r3, [pc, #12]	; (8010178 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801016c:	4618      	mov	r0, r3
 801016e:	370c      	adds	r7, #12
 8010170:	46bd      	mov	sp, r7
 8010172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010176:	4770      	bx	lr
 8010178:	2000008c 	.word	0x2000008c

0801017c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801017c:	b480      	push	{r7}
 801017e:	b083      	sub	sp, #12
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
 8010184:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d101      	bne.n	8010190 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801018c:	2303      	movs	r3, #3
 801018e:	e004      	b.n	801019a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	683a      	ldr	r2, [r7, #0]
 8010194:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8010198:	2300      	movs	r3, #0
}
 801019a:	4618      	mov	r0, r3
 801019c:	370c      	adds	r7, #12
 801019e:	46bd      	mov	sp, r7
 80101a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a4:	4770      	bx	lr

080101a6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80101a6:	b480      	push	{r7}
 80101a8:	b087      	sub	sp, #28
 80101aa:	af00      	add	r7, sp, #0
 80101ac:	60f8      	str	r0, [r7, #12]
 80101ae:	60b9      	str	r1, [r7, #8]
 80101b0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80101b8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80101ba:	697b      	ldr	r3, [r7, #20]
 80101bc:	68ba      	ldr	r2, [r7, #8]
 80101be:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80101c2:	697b      	ldr	r3, [r7, #20]
 80101c4:	687a      	ldr	r2, [r7, #4]
 80101c6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80101ca:	2300      	movs	r3, #0
}
 80101cc:	4618      	mov	r0, r3
 80101ce:	371c      	adds	r7, #28
 80101d0:	46bd      	mov	sp, r7
 80101d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d6:	4770      	bx	lr

080101d8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80101d8:	b480      	push	{r7}
 80101da:	b085      	sub	sp, #20
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
 80101e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80101e8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	683a      	ldr	r2, [r7, #0]
 80101ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80101f2:	2300      	movs	r3, #0
}
 80101f4:	4618      	mov	r0, r3
 80101f6:	3714      	adds	r7, #20
 80101f8:	46bd      	mov	sp, r7
 80101fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fe:	4770      	bx	lr

08010200 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b084      	sub	sp, #16
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801020e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010216:	2b00      	cmp	r3, #0
 8010218:	d101      	bne.n	801021e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801021a:	2303      	movs	r3, #3
 801021c:	e016      	b.n	801024c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	7c1b      	ldrb	r3, [r3, #16]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d109      	bne.n	801023a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801022c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010230:	2101      	movs	r1, #1
 8010232:	6878      	ldr	r0, [r7, #4]
 8010234:	f001 fda2 	bl	8011d7c <USBD_LL_PrepareReceive>
 8010238:	e007      	b.n	801024a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010240:	2340      	movs	r3, #64	; 0x40
 8010242:	2101      	movs	r1, #1
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	f001 fd99 	bl	8011d7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801024a:	2300      	movs	r3, #0
}
 801024c:	4618      	mov	r0, r3
 801024e:	3710      	adds	r7, #16
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}

08010254 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b086      	sub	sp, #24
 8010258:	af00      	add	r7, sp, #0
 801025a:	60f8      	str	r0, [r7, #12]
 801025c:	60b9      	str	r1, [r7, #8]
 801025e:	4613      	mov	r3, r2
 8010260:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d101      	bne.n	801026c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8010268:	2303      	movs	r3, #3
 801026a:	e025      	b.n	80102b8 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010272:	2b00      	cmp	r3, #0
 8010274:	d003      	beq.n	801027e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	2200      	movs	r2, #0
 801027a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8010284:	2b00      	cmp	r3, #0
 8010286:	d003      	beq.n	8010290 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	2200      	movs	r2, #0
 801028c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010290:	68bb      	ldr	r3, [r7, #8]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d003      	beq.n	801029e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	68ba      	ldr	r2, [r7, #8]
 801029a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	2201      	movs	r2, #1
 80102a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	79fa      	ldrb	r2, [r7, #7]
 80102aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80102ac:	68f8      	ldr	r0, [r7, #12]
 80102ae:	f001 fc0f 	bl	8011ad0 <USBD_LL_Init>
 80102b2:	4603      	mov	r3, r0
 80102b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80102b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80102b8:	4618      	mov	r0, r3
 80102ba:	3718      	adds	r7, #24
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}

080102c0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b084      	sub	sp, #16
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
 80102c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80102ca:	2300      	movs	r3, #0
 80102cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80102ce:	683b      	ldr	r3, [r7, #0]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d101      	bne.n	80102d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80102d4:	2303      	movs	r3, #3
 80102d6:	e010      	b.n	80102fa <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	683a      	ldr	r2, [r7, #0]
 80102dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80102e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102e8:	f107 020e 	add.w	r2, r7, #14
 80102ec:	4610      	mov	r0, r2
 80102ee:	4798      	blx	r3
 80102f0:	4602      	mov	r2, r0
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80102f8:	2300      	movs	r3, #0
}
 80102fa:	4618      	mov	r0, r3
 80102fc:	3710      	adds	r7, #16
 80102fe:	46bd      	mov	sp, r7
 8010300:	bd80      	pop	{r7, pc}

08010302 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010302:	b580      	push	{r7, lr}
 8010304:	b082      	sub	sp, #8
 8010306:	af00      	add	r7, sp, #0
 8010308:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801030a:	6878      	ldr	r0, [r7, #4]
 801030c:	f001 fc2c 	bl	8011b68 <USBD_LL_Start>
 8010310:	4603      	mov	r3, r0
}
 8010312:	4618      	mov	r0, r3
 8010314:	3708      	adds	r7, #8
 8010316:	46bd      	mov	sp, r7
 8010318:	bd80      	pop	{r7, pc}

0801031a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801031a:	b480      	push	{r7}
 801031c:	b083      	sub	sp, #12
 801031e:	af00      	add	r7, sp, #0
 8010320:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010322:	2300      	movs	r3, #0
}
 8010324:	4618      	mov	r0, r3
 8010326:	370c      	adds	r7, #12
 8010328:	46bd      	mov	sp, r7
 801032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032e:	4770      	bx	lr

08010330 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b084      	sub	sp, #16
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
 8010338:	460b      	mov	r3, r1
 801033a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801033c:	2303      	movs	r3, #3
 801033e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010346:	2b00      	cmp	r3, #0
 8010348:	d009      	beq.n	801035e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	78fa      	ldrb	r2, [r7, #3]
 8010354:	4611      	mov	r1, r2
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	4798      	blx	r3
 801035a:	4603      	mov	r3, r0
 801035c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801035e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010360:	4618      	mov	r0, r3
 8010362:	3710      	adds	r7, #16
 8010364:	46bd      	mov	sp, r7
 8010366:	bd80      	pop	{r7, pc}

08010368 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b082      	sub	sp, #8
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
 8010370:	460b      	mov	r3, r1
 8010372:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801037a:	2b00      	cmp	r3, #0
 801037c:	d007      	beq.n	801038e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010384:	685b      	ldr	r3, [r3, #4]
 8010386:	78fa      	ldrb	r2, [r7, #3]
 8010388:	4611      	mov	r1, r2
 801038a:	6878      	ldr	r0, [r7, #4]
 801038c:	4798      	blx	r3
  }

  return USBD_OK;
 801038e:	2300      	movs	r3, #0
}
 8010390:	4618      	mov	r0, r3
 8010392:	3708      	adds	r7, #8
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}

08010398 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b084      	sub	sp, #16
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
 80103a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80103a8:	6839      	ldr	r1, [r7, #0]
 80103aa:	4618      	mov	r0, r3
 80103ac:	f000 ff2c 	bl	8011208 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	2201      	movs	r2, #1
 80103b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80103be:	461a      	mov	r2, r3
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80103cc:	f003 031f 	and.w	r3, r3, #31
 80103d0:	2b01      	cmp	r3, #1
 80103d2:	d00e      	beq.n	80103f2 <USBD_LL_SetupStage+0x5a>
 80103d4:	2b01      	cmp	r3, #1
 80103d6:	d302      	bcc.n	80103de <USBD_LL_SetupStage+0x46>
 80103d8:	2b02      	cmp	r3, #2
 80103da:	d014      	beq.n	8010406 <USBD_LL_SetupStage+0x6e>
 80103dc:	e01d      	b.n	801041a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80103e4:	4619      	mov	r1, r3
 80103e6:	6878      	ldr	r0, [r7, #4]
 80103e8:	f000 fa18 	bl	801081c <USBD_StdDevReq>
 80103ec:	4603      	mov	r3, r0
 80103ee:	73fb      	strb	r3, [r7, #15]
      break;
 80103f0:	e020      	b.n	8010434 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80103f8:	4619      	mov	r1, r3
 80103fa:	6878      	ldr	r0, [r7, #4]
 80103fc:	f000 fa7c 	bl	80108f8 <USBD_StdItfReq>
 8010400:	4603      	mov	r3, r0
 8010402:	73fb      	strb	r3, [r7, #15]
      break;
 8010404:	e016      	b.n	8010434 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801040c:	4619      	mov	r1, r3
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	f000 fab8 	bl	8010984 <USBD_StdEPReq>
 8010414:	4603      	mov	r3, r0
 8010416:	73fb      	strb	r3, [r7, #15]
      break;
 8010418:	e00c      	b.n	8010434 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010420:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010424:	b2db      	uxtb	r3, r3
 8010426:	4619      	mov	r1, r3
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f001 fbfd 	bl	8011c28 <USBD_LL_StallEP>
 801042e:	4603      	mov	r3, r0
 8010430:	73fb      	strb	r3, [r7, #15]
      break;
 8010432:	bf00      	nop
  }

  return ret;
 8010434:	7bfb      	ldrb	r3, [r7, #15]
}
 8010436:	4618      	mov	r0, r3
 8010438:	3710      	adds	r7, #16
 801043a:	46bd      	mov	sp, r7
 801043c:	bd80      	pop	{r7, pc}

0801043e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801043e:	b580      	push	{r7, lr}
 8010440:	b086      	sub	sp, #24
 8010442:	af00      	add	r7, sp, #0
 8010444:	60f8      	str	r0, [r7, #12]
 8010446:	460b      	mov	r3, r1
 8010448:	607a      	str	r2, [r7, #4]
 801044a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801044c:	7afb      	ldrb	r3, [r7, #11]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d137      	bne.n	80104c2 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8010458:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010460:	2b03      	cmp	r3, #3
 8010462:	d14a      	bne.n	80104fa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8010464:	693b      	ldr	r3, [r7, #16]
 8010466:	689a      	ldr	r2, [r3, #8]
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	68db      	ldr	r3, [r3, #12]
 801046c:	429a      	cmp	r2, r3
 801046e:	d913      	bls.n	8010498 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010470:	693b      	ldr	r3, [r7, #16]
 8010472:	689a      	ldr	r2, [r3, #8]
 8010474:	693b      	ldr	r3, [r7, #16]
 8010476:	68db      	ldr	r3, [r3, #12]
 8010478:	1ad2      	subs	r2, r2, r3
 801047a:	693b      	ldr	r3, [r7, #16]
 801047c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801047e:	693b      	ldr	r3, [r7, #16]
 8010480:	68da      	ldr	r2, [r3, #12]
 8010482:	693b      	ldr	r3, [r7, #16]
 8010484:	689b      	ldr	r3, [r3, #8]
 8010486:	4293      	cmp	r3, r2
 8010488:	bf28      	it	cs
 801048a:	4613      	movcs	r3, r2
 801048c:	461a      	mov	r2, r3
 801048e:	6879      	ldr	r1, [r7, #4]
 8010490:	68f8      	ldr	r0, [r7, #12]
 8010492:	f000 ffad 	bl	80113f0 <USBD_CtlContinueRx>
 8010496:	e030      	b.n	80104fa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801049e:	691b      	ldr	r3, [r3, #16]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d00a      	beq.n	80104ba <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80104aa:	2b03      	cmp	r3, #3
 80104ac:	d105      	bne.n	80104ba <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80104b4:	691b      	ldr	r3, [r3, #16]
 80104b6:	68f8      	ldr	r0, [r7, #12]
 80104b8:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80104ba:	68f8      	ldr	r0, [r7, #12]
 80104bc:	f000 ffa9 	bl	8011412 <USBD_CtlSendStatus>
 80104c0:	e01b      	b.n	80104fa <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80104c8:	699b      	ldr	r3, [r3, #24]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d013      	beq.n	80104f6 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80104d4:	2b03      	cmp	r3, #3
 80104d6:	d10e      	bne.n	80104f6 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80104de:	699b      	ldr	r3, [r3, #24]
 80104e0:	7afa      	ldrb	r2, [r7, #11]
 80104e2:	4611      	mov	r1, r2
 80104e4:	68f8      	ldr	r0, [r7, #12]
 80104e6:	4798      	blx	r3
 80104e8:	4603      	mov	r3, r0
 80104ea:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80104ec:	7dfb      	ldrb	r3, [r7, #23]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d003      	beq.n	80104fa <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80104f2:	7dfb      	ldrb	r3, [r7, #23]
 80104f4:	e002      	b.n	80104fc <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80104f6:	2303      	movs	r3, #3
 80104f8:	e000      	b.n	80104fc <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80104fa:	2300      	movs	r3, #0
}
 80104fc:	4618      	mov	r0, r3
 80104fe:	3718      	adds	r7, #24
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}

08010504 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b086      	sub	sp, #24
 8010508:	af00      	add	r7, sp, #0
 801050a:	60f8      	str	r0, [r7, #12]
 801050c:	460b      	mov	r3, r1
 801050e:	607a      	str	r2, [r7, #4]
 8010510:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010512:	7afb      	ldrb	r3, [r7, #11]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d16a      	bne.n	80105ee <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	3314      	adds	r3, #20
 801051c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010524:	2b02      	cmp	r3, #2
 8010526:	d155      	bne.n	80105d4 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8010528:	693b      	ldr	r3, [r7, #16]
 801052a:	689a      	ldr	r2, [r3, #8]
 801052c:	693b      	ldr	r3, [r7, #16]
 801052e:	68db      	ldr	r3, [r3, #12]
 8010530:	429a      	cmp	r2, r3
 8010532:	d914      	bls.n	801055e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010534:	693b      	ldr	r3, [r7, #16]
 8010536:	689a      	ldr	r2, [r3, #8]
 8010538:	693b      	ldr	r3, [r7, #16]
 801053a:	68db      	ldr	r3, [r3, #12]
 801053c:	1ad2      	subs	r2, r2, r3
 801053e:	693b      	ldr	r3, [r7, #16]
 8010540:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010542:	693b      	ldr	r3, [r7, #16]
 8010544:	689b      	ldr	r3, [r3, #8]
 8010546:	461a      	mov	r2, r3
 8010548:	6879      	ldr	r1, [r7, #4]
 801054a:	68f8      	ldr	r0, [r7, #12]
 801054c:	f000 ff22 	bl	8011394 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010550:	2300      	movs	r3, #0
 8010552:	2200      	movs	r2, #0
 8010554:	2100      	movs	r1, #0
 8010556:	68f8      	ldr	r0, [r7, #12]
 8010558:	f001 fc10 	bl	8011d7c <USBD_LL_PrepareReceive>
 801055c:	e03a      	b.n	80105d4 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801055e:	693b      	ldr	r3, [r7, #16]
 8010560:	68da      	ldr	r2, [r3, #12]
 8010562:	693b      	ldr	r3, [r7, #16]
 8010564:	689b      	ldr	r3, [r3, #8]
 8010566:	429a      	cmp	r2, r3
 8010568:	d11c      	bne.n	80105a4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801056a:	693b      	ldr	r3, [r7, #16]
 801056c:	685a      	ldr	r2, [r3, #4]
 801056e:	693b      	ldr	r3, [r7, #16]
 8010570:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010572:	429a      	cmp	r2, r3
 8010574:	d316      	bcc.n	80105a4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010576:	693b      	ldr	r3, [r7, #16]
 8010578:	685a      	ldr	r2, [r3, #4]
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010580:	429a      	cmp	r2, r3
 8010582:	d20f      	bcs.n	80105a4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010584:	2200      	movs	r2, #0
 8010586:	2100      	movs	r1, #0
 8010588:	68f8      	ldr	r0, [r7, #12]
 801058a:	f000 ff03 	bl	8011394 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	2200      	movs	r2, #0
 8010592:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010596:	2300      	movs	r3, #0
 8010598:	2200      	movs	r2, #0
 801059a:	2100      	movs	r1, #0
 801059c:	68f8      	ldr	r0, [r7, #12]
 801059e:	f001 fbed 	bl	8011d7c <USBD_LL_PrepareReceive>
 80105a2:	e017      	b.n	80105d4 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80105aa:	68db      	ldr	r3, [r3, #12]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d00a      	beq.n	80105c6 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80105b6:	2b03      	cmp	r3, #3
 80105b8:	d105      	bne.n	80105c6 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80105c0:	68db      	ldr	r3, [r3, #12]
 80105c2:	68f8      	ldr	r0, [r7, #12]
 80105c4:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80105c6:	2180      	movs	r1, #128	; 0x80
 80105c8:	68f8      	ldr	r0, [r7, #12]
 80105ca:	f001 fb2d 	bl	8011c28 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80105ce:	68f8      	ldr	r0, [r7, #12]
 80105d0:	f000 ff32 	bl	8011438 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80105da:	2b01      	cmp	r3, #1
 80105dc:	d123      	bne.n	8010626 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80105de:	68f8      	ldr	r0, [r7, #12]
 80105e0:	f7ff fe9b 	bl	801031a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	2200      	movs	r2, #0
 80105e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80105ec:	e01b      	b.n	8010626 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80105f4:	695b      	ldr	r3, [r3, #20]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d013      	beq.n	8010622 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8010600:	2b03      	cmp	r3, #3
 8010602:	d10e      	bne.n	8010622 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801060a:	695b      	ldr	r3, [r3, #20]
 801060c:	7afa      	ldrb	r2, [r7, #11]
 801060e:	4611      	mov	r1, r2
 8010610:	68f8      	ldr	r0, [r7, #12]
 8010612:	4798      	blx	r3
 8010614:	4603      	mov	r3, r0
 8010616:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8010618:	7dfb      	ldrb	r3, [r7, #23]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d003      	beq.n	8010626 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 801061e:	7dfb      	ldrb	r3, [r7, #23]
 8010620:	e002      	b.n	8010628 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8010622:	2303      	movs	r3, #3
 8010624:	e000      	b.n	8010628 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8010626:	2300      	movs	r3, #0
}
 8010628:	4618      	mov	r0, r3
 801062a:	3718      	adds	r7, #24
 801062c:	46bd      	mov	sp, r7
 801062e:	bd80      	pop	{r7, pc}

08010630 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010630:	b580      	push	{r7, lr}
 8010632:	b082      	sub	sp, #8
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	2201      	movs	r2, #1
 801063c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	2200      	movs	r2, #0
 8010644:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	2200      	movs	r2, #0
 801064c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2200      	movs	r2, #0
 8010652:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801065c:	2b00      	cmp	r3, #0
 801065e:	d009      	beq.n	8010674 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010666:	685b      	ldr	r3, [r3, #4]
 8010668:	687a      	ldr	r2, [r7, #4]
 801066a:	6852      	ldr	r2, [r2, #4]
 801066c:	b2d2      	uxtb	r2, r2
 801066e:	4611      	mov	r1, r2
 8010670:	6878      	ldr	r0, [r7, #4]
 8010672:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010674:	2340      	movs	r3, #64	; 0x40
 8010676:	2200      	movs	r2, #0
 8010678:	2100      	movs	r1, #0
 801067a:	6878      	ldr	r0, [r7, #4]
 801067c:	f001 fa8f 	bl	8011b9e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	2201      	movs	r2, #1
 8010684:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2240      	movs	r2, #64	; 0x40
 801068c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010690:	2340      	movs	r3, #64	; 0x40
 8010692:	2200      	movs	r2, #0
 8010694:	2180      	movs	r1, #128	; 0x80
 8010696:	6878      	ldr	r0, [r7, #4]
 8010698:	f001 fa81 	bl	8011b9e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2201      	movs	r2, #1
 80106a0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2240      	movs	r2, #64	; 0x40
 80106a6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80106a8:	2300      	movs	r3, #0
}
 80106aa:	4618      	mov	r0, r3
 80106ac:	3708      	adds	r7, #8
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd80      	pop	{r7, pc}

080106b2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80106b2:	b480      	push	{r7}
 80106b4:	b083      	sub	sp, #12
 80106b6:	af00      	add	r7, sp, #0
 80106b8:	6078      	str	r0, [r7, #4]
 80106ba:	460b      	mov	r3, r1
 80106bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	78fa      	ldrb	r2, [r7, #3]
 80106c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80106c4:	2300      	movs	r3, #0
}
 80106c6:	4618      	mov	r0, r3
 80106c8:	370c      	adds	r7, #12
 80106ca:	46bd      	mov	sp, r7
 80106cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d0:	4770      	bx	lr

080106d2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80106d2:	b480      	push	{r7}
 80106d4:	b083      	sub	sp, #12
 80106d6:	af00      	add	r7, sp, #0
 80106d8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	2204      	movs	r2, #4
 80106ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80106ee:	2300      	movs	r3, #0
}
 80106f0:	4618      	mov	r0, r3
 80106f2:	370c      	adds	r7, #12
 80106f4:	46bd      	mov	sp, r7
 80106f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fa:	4770      	bx	lr

080106fc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80106fc:	b480      	push	{r7}
 80106fe:	b083      	sub	sp, #12
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801070a:	2b04      	cmp	r3, #4
 801070c:	d105      	bne.n	801071a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801071a:	2300      	movs	r3, #0
}
 801071c:	4618      	mov	r0, r3
 801071e:	370c      	adds	r7, #12
 8010720:	46bd      	mov	sp, r7
 8010722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010726:	4770      	bx	lr

08010728 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010728:	b580      	push	{r7, lr}
 801072a:	b082      	sub	sp, #8
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010736:	2b03      	cmp	r3, #3
 8010738:	d10b      	bne.n	8010752 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010740:	69db      	ldr	r3, [r3, #28]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d005      	beq.n	8010752 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801074c:	69db      	ldr	r3, [r3, #28]
 801074e:	6878      	ldr	r0, [r7, #4]
 8010750:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010752:	2300      	movs	r3, #0
}
 8010754:	4618      	mov	r0, r3
 8010756:	3708      	adds	r7, #8
 8010758:	46bd      	mov	sp, r7
 801075a:	bd80      	pop	{r7, pc}

0801075c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801075c:	b480      	push	{r7}
 801075e:	b083      	sub	sp, #12
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
 8010764:	460b      	mov	r3, r1
 8010766:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8010768:	2300      	movs	r3, #0
}
 801076a:	4618      	mov	r0, r3
 801076c:	370c      	adds	r7, #12
 801076e:	46bd      	mov	sp, r7
 8010770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010774:	4770      	bx	lr

08010776 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010776:	b480      	push	{r7}
 8010778:	b083      	sub	sp, #12
 801077a:	af00      	add	r7, sp, #0
 801077c:	6078      	str	r0, [r7, #4]
 801077e:	460b      	mov	r3, r1
 8010780:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8010782:	2300      	movs	r3, #0
}
 8010784:	4618      	mov	r0, r3
 8010786:	370c      	adds	r7, #12
 8010788:	46bd      	mov	sp, r7
 801078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078e:	4770      	bx	lr

08010790 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010790:	b480      	push	{r7}
 8010792:	b083      	sub	sp, #12
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010798:	2300      	movs	r3, #0
}
 801079a:	4618      	mov	r0, r3
 801079c:	370c      	adds	r7, #12
 801079e:	46bd      	mov	sp, r7
 80107a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a4:	4770      	bx	lr

080107a6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80107a6:	b580      	push	{r7, lr}
 80107a8:	b082      	sub	sp, #8
 80107aa:	af00      	add	r7, sp, #0
 80107ac:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	2201      	movs	r2, #1
 80107b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d009      	beq.n	80107d4 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80107c6:	685b      	ldr	r3, [r3, #4]
 80107c8:	687a      	ldr	r2, [r7, #4]
 80107ca:	6852      	ldr	r2, [r2, #4]
 80107cc:	b2d2      	uxtb	r2, r2
 80107ce:	4611      	mov	r1, r2
 80107d0:	6878      	ldr	r0, [r7, #4]
 80107d2:	4798      	blx	r3
  }

  return USBD_OK;
 80107d4:	2300      	movs	r3, #0
}
 80107d6:	4618      	mov	r0, r3
 80107d8:	3708      	adds	r7, #8
 80107da:	46bd      	mov	sp, r7
 80107dc:	bd80      	pop	{r7, pc}

080107de <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80107de:	b480      	push	{r7}
 80107e0:	b087      	sub	sp, #28
 80107e2:	af00      	add	r7, sp, #0
 80107e4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80107ea:	697b      	ldr	r3, [r7, #20]
 80107ec:	781b      	ldrb	r3, [r3, #0]
 80107ee:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80107f0:	697b      	ldr	r3, [r7, #20]
 80107f2:	3301      	adds	r3, #1
 80107f4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80107f6:	697b      	ldr	r3, [r7, #20]
 80107f8:	781b      	ldrb	r3, [r3, #0]
 80107fa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80107fc:	8a3b      	ldrh	r3, [r7, #16]
 80107fe:	021b      	lsls	r3, r3, #8
 8010800:	b21a      	sxth	r2, r3
 8010802:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010806:	4313      	orrs	r3, r2
 8010808:	b21b      	sxth	r3, r3
 801080a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801080c:	89fb      	ldrh	r3, [r7, #14]
}
 801080e:	4618      	mov	r0, r3
 8010810:	371c      	adds	r7, #28
 8010812:	46bd      	mov	sp, r7
 8010814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010818:	4770      	bx	lr
	...

0801081c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b084      	sub	sp, #16
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
 8010824:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010826:	2300      	movs	r3, #0
 8010828:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	781b      	ldrb	r3, [r3, #0]
 801082e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010832:	2b20      	cmp	r3, #32
 8010834:	d004      	beq.n	8010840 <USBD_StdDevReq+0x24>
 8010836:	2b40      	cmp	r3, #64	; 0x40
 8010838:	d002      	beq.n	8010840 <USBD_StdDevReq+0x24>
 801083a:	2b00      	cmp	r3, #0
 801083c:	d00a      	beq.n	8010854 <USBD_StdDevReq+0x38>
 801083e:	e050      	b.n	80108e2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010846:	689b      	ldr	r3, [r3, #8]
 8010848:	6839      	ldr	r1, [r7, #0]
 801084a:	6878      	ldr	r0, [r7, #4]
 801084c:	4798      	blx	r3
 801084e:	4603      	mov	r3, r0
 8010850:	73fb      	strb	r3, [r7, #15]
    break;
 8010852:	e04b      	b.n	80108ec <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	785b      	ldrb	r3, [r3, #1]
 8010858:	2b09      	cmp	r3, #9
 801085a:	d83c      	bhi.n	80108d6 <USBD_StdDevReq+0xba>
 801085c:	a201      	add	r2, pc, #4	; (adr r2, 8010864 <USBD_StdDevReq+0x48>)
 801085e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010862:	bf00      	nop
 8010864:	080108b9 	.word	0x080108b9
 8010868:	080108cd 	.word	0x080108cd
 801086c:	080108d7 	.word	0x080108d7
 8010870:	080108c3 	.word	0x080108c3
 8010874:	080108d7 	.word	0x080108d7
 8010878:	08010897 	.word	0x08010897
 801087c:	0801088d 	.word	0x0801088d
 8010880:	080108d7 	.word	0x080108d7
 8010884:	080108af 	.word	0x080108af
 8010888:	080108a1 	.word	0x080108a1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 801088c:	6839      	ldr	r1, [r7, #0]
 801088e:	6878      	ldr	r0, [r7, #4]
 8010890:	f000 f9ce 	bl	8010c30 <USBD_GetDescriptor>
      break;
 8010894:	e024      	b.n	80108e0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8010896:	6839      	ldr	r1, [r7, #0]
 8010898:	6878      	ldr	r0, [r7, #4]
 801089a:	f000 fb33 	bl	8010f04 <USBD_SetAddress>
      break;
 801089e:	e01f      	b.n	80108e0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80108a0:	6839      	ldr	r1, [r7, #0]
 80108a2:	6878      	ldr	r0, [r7, #4]
 80108a4:	f000 fb70 	bl	8010f88 <USBD_SetConfig>
 80108a8:	4603      	mov	r3, r0
 80108aa:	73fb      	strb	r3, [r7, #15]
      break;
 80108ac:	e018      	b.n	80108e0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80108ae:	6839      	ldr	r1, [r7, #0]
 80108b0:	6878      	ldr	r0, [r7, #4]
 80108b2:	f000 fc0d 	bl	80110d0 <USBD_GetConfig>
      break;
 80108b6:	e013      	b.n	80108e0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80108b8:	6839      	ldr	r1, [r7, #0]
 80108ba:	6878      	ldr	r0, [r7, #4]
 80108bc:	f000 fc3c 	bl	8011138 <USBD_GetStatus>
      break;
 80108c0:	e00e      	b.n	80108e0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80108c2:	6839      	ldr	r1, [r7, #0]
 80108c4:	6878      	ldr	r0, [r7, #4]
 80108c6:	f000 fc6a 	bl	801119e <USBD_SetFeature>
      break;
 80108ca:	e009      	b.n	80108e0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80108cc:	6839      	ldr	r1, [r7, #0]
 80108ce:	6878      	ldr	r0, [r7, #4]
 80108d0:	f000 fc79 	bl	80111c6 <USBD_ClrFeature>
      break;
 80108d4:	e004      	b.n	80108e0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80108d6:	6839      	ldr	r1, [r7, #0]
 80108d8:	6878      	ldr	r0, [r7, #4]
 80108da:	f000 fccf 	bl	801127c <USBD_CtlError>
      break;
 80108de:	bf00      	nop
    }
    break;
 80108e0:	e004      	b.n	80108ec <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80108e2:	6839      	ldr	r1, [r7, #0]
 80108e4:	6878      	ldr	r0, [r7, #4]
 80108e6:	f000 fcc9 	bl	801127c <USBD_CtlError>
    break;
 80108ea:	bf00      	nop
  }

  return ret;
 80108ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80108ee:	4618      	mov	r0, r3
 80108f0:	3710      	adds	r7, #16
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bd80      	pop	{r7, pc}
 80108f6:	bf00      	nop

080108f8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b084      	sub	sp, #16
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
 8010900:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010902:	2300      	movs	r3, #0
 8010904:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010906:	683b      	ldr	r3, [r7, #0]
 8010908:	781b      	ldrb	r3, [r3, #0]
 801090a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801090e:	2b20      	cmp	r3, #32
 8010910:	d003      	beq.n	801091a <USBD_StdItfReq+0x22>
 8010912:	2b40      	cmp	r3, #64	; 0x40
 8010914:	d001      	beq.n	801091a <USBD_StdItfReq+0x22>
 8010916:	2b00      	cmp	r3, #0
 8010918:	d12a      	bne.n	8010970 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010920:	3b01      	subs	r3, #1
 8010922:	2b02      	cmp	r3, #2
 8010924:	d81d      	bhi.n	8010962 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010926:	683b      	ldr	r3, [r7, #0]
 8010928:	889b      	ldrh	r3, [r3, #4]
 801092a:	b2db      	uxtb	r3, r3
 801092c:	2b01      	cmp	r3, #1
 801092e:	d813      	bhi.n	8010958 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010936:	689b      	ldr	r3, [r3, #8]
 8010938:	6839      	ldr	r1, [r7, #0]
 801093a:	6878      	ldr	r0, [r7, #4]
 801093c:	4798      	blx	r3
 801093e:	4603      	mov	r3, r0
 8010940:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8010942:	683b      	ldr	r3, [r7, #0]
 8010944:	88db      	ldrh	r3, [r3, #6]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d110      	bne.n	801096c <USBD_StdItfReq+0x74>
 801094a:	7bfb      	ldrb	r3, [r7, #15]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d10d      	bne.n	801096c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8010950:	6878      	ldr	r0, [r7, #4]
 8010952:	f000 fd5e 	bl	8011412 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8010956:	e009      	b.n	801096c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8010958:	6839      	ldr	r1, [r7, #0]
 801095a:	6878      	ldr	r0, [r7, #4]
 801095c:	f000 fc8e 	bl	801127c <USBD_CtlError>
      break;
 8010960:	e004      	b.n	801096c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8010962:	6839      	ldr	r1, [r7, #0]
 8010964:	6878      	ldr	r0, [r7, #4]
 8010966:	f000 fc89 	bl	801127c <USBD_CtlError>
      break;
 801096a:	e000      	b.n	801096e <USBD_StdItfReq+0x76>
      break;
 801096c:	bf00      	nop
    }
    break;
 801096e:	e004      	b.n	801097a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8010970:	6839      	ldr	r1, [r7, #0]
 8010972:	6878      	ldr	r0, [r7, #4]
 8010974:	f000 fc82 	bl	801127c <USBD_CtlError>
    break;
 8010978:	bf00      	nop
  }

  return ret;
 801097a:	7bfb      	ldrb	r3, [r7, #15]
}
 801097c:	4618      	mov	r0, r3
 801097e:	3710      	adds	r7, #16
 8010980:	46bd      	mov	sp, r7
 8010982:	bd80      	pop	{r7, pc}

08010984 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b084      	sub	sp, #16
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
 801098c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801098e:	2300      	movs	r3, #0
 8010990:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8010992:	683b      	ldr	r3, [r7, #0]
 8010994:	889b      	ldrh	r3, [r3, #4]
 8010996:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010998:	683b      	ldr	r3, [r7, #0]
 801099a:	781b      	ldrb	r3, [r3, #0]
 801099c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80109a0:	2b20      	cmp	r3, #32
 80109a2:	d004      	beq.n	80109ae <USBD_StdEPReq+0x2a>
 80109a4:	2b40      	cmp	r3, #64	; 0x40
 80109a6:	d002      	beq.n	80109ae <USBD_StdEPReq+0x2a>
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d00a      	beq.n	80109c2 <USBD_StdEPReq+0x3e>
 80109ac:	e135      	b.n	8010c1a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80109b4:	689b      	ldr	r3, [r3, #8]
 80109b6:	6839      	ldr	r1, [r7, #0]
 80109b8:	6878      	ldr	r0, [r7, #4]
 80109ba:	4798      	blx	r3
 80109bc:	4603      	mov	r3, r0
 80109be:	73fb      	strb	r3, [r7, #15]
    break;
 80109c0:	e130      	b.n	8010c24 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80109c2:	683b      	ldr	r3, [r7, #0]
 80109c4:	785b      	ldrb	r3, [r3, #1]
 80109c6:	2b01      	cmp	r3, #1
 80109c8:	d03e      	beq.n	8010a48 <USBD_StdEPReq+0xc4>
 80109ca:	2b03      	cmp	r3, #3
 80109cc:	d002      	beq.n	80109d4 <USBD_StdEPReq+0x50>
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d077      	beq.n	8010ac2 <USBD_StdEPReq+0x13e>
 80109d2:	e11c      	b.n	8010c0e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80109da:	2b02      	cmp	r3, #2
 80109dc:	d002      	beq.n	80109e4 <USBD_StdEPReq+0x60>
 80109de:	2b03      	cmp	r3, #3
 80109e0:	d015      	beq.n	8010a0e <USBD_StdEPReq+0x8a>
 80109e2:	e02b      	b.n	8010a3c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80109e4:	7bbb      	ldrb	r3, [r7, #14]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d00c      	beq.n	8010a04 <USBD_StdEPReq+0x80>
 80109ea:	7bbb      	ldrb	r3, [r7, #14]
 80109ec:	2b80      	cmp	r3, #128	; 0x80
 80109ee:	d009      	beq.n	8010a04 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80109f0:	7bbb      	ldrb	r3, [r7, #14]
 80109f2:	4619      	mov	r1, r3
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f001 f917 	bl	8011c28 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80109fa:	2180      	movs	r1, #128	; 0x80
 80109fc:	6878      	ldr	r0, [r7, #4]
 80109fe:	f001 f913 	bl	8011c28 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8010a02:	e020      	b.n	8010a46 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8010a04:	6839      	ldr	r1, [r7, #0]
 8010a06:	6878      	ldr	r0, [r7, #4]
 8010a08:	f000 fc38 	bl	801127c <USBD_CtlError>
        break;
 8010a0c:	e01b      	b.n	8010a46 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010a0e:	683b      	ldr	r3, [r7, #0]
 8010a10:	885b      	ldrh	r3, [r3, #2]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d10e      	bne.n	8010a34 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010a16:	7bbb      	ldrb	r3, [r7, #14]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d00b      	beq.n	8010a34 <USBD_StdEPReq+0xb0>
 8010a1c:	7bbb      	ldrb	r3, [r7, #14]
 8010a1e:	2b80      	cmp	r3, #128	; 0x80
 8010a20:	d008      	beq.n	8010a34 <USBD_StdEPReq+0xb0>
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	88db      	ldrh	r3, [r3, #6]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d104      	bne.n	8010a34 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8010a2a:	7bbb      	ldrb	r3, [r7, #14]
 8010a2c:	4619      	mov	r1, r3
 8010a2e:	6878      	ldr	r0, [r7, #4]
 8010a30:	f001 f8fa 	bl	8011c28 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8010a34:	6878      	ldr	r0, [r7, #4]
 8010a36:	f000 fcec 	bl	8011412 <USBD_CtlSendStatus>

        break;
 8010a3a:	e004      	b.n	8010a46 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8010a3c:	6839      	ldr	r1, [r7, #0]
 8010a3e:	6878      	ldr	r0, [r7, #4]
 8010a40:	f000 fc1c 	bl	801127c <USBD_CtlError>
        break;
 8010a44:	bf00      	nop
      }
      break;
 8010a46:	e0e7      	b.n	8010c18 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a4e:	2b02      	cmp	r3, #2
 8010a50:	d002      	beq.n	8010a58 <USBD_StdEPReq+0xd4>
 8010a52:	2b03      	cmp	r3, #3
 8010a54:	d015      	beq.n	8010a82 <USBD_StdEPReq+0xfe>
 8010a56:	e02d      	b.n	8010ab4 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010a58:	7bbb      	ldrb	r3, [r7, #14]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d00c      	beq.n	8010a78 <USBD_StdEPReq+0xf4>
 8010a5e:	7bbb      	ldrb	r3, [r7, #14]
 8010a60:	2b80      	cmp	r3, #128	; 0x80
 8010a62:	d009      	beq.n	8010a78 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8010a64:	7bbb      	ldrb	r3, [r7, #14]
 8010a66:	4619      	mov	r1, r3
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f001 f8dd 	bl	8011c28 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010a6e:	2180      	movs	r1, #128	; 0x80
 8010a70:	6878      	ldr	r0, [r7, #4]
 8010a72:	f001 f8d9 	bl	8011c28 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8010a76:	e023      	b.n	8010ac0 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8010a78:	6839      	ldr	r1, [r7, #0]
 8010a7a:	6878      	ldr	r0, [r7, #4]
 8010a7c:	f000 fbfe 	bl	801127c <USBD_CtlError>
        break;
 8010a80:	e01e      	b.n	8010ac0 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010a82:	683b      	ldr	r3, [r7, #0]
 8010a84:	885b      	ldrh	r3, [r3, #2]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d119      	bne.n	8010abe <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8010a8a:	7bbb      	ldrb	r3, [r7, #14]
 8010a8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d004      	beq.n	8010a9e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010a94:	7bbb      	ldrb	r3, [r7, #14]
 8010a96:	4619      	mov	r1, r3
 8010a98:	6878      	ldr	r0, [r7, #4]
 8010a9a:	f001 f8e4 	bl	8011c66 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8010a9e:	6878      	ldr	r0, [r7, #4]
 8010aa0:	f000 fcb7 	bl	8011412 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010aaa:	689b      	ldr	r3, [r3, #8]
 8010aac:	6839      	ldr	r1, [r7, #0]
 8010aae:	6878      	ldr	r0, [r7, #4]
 8010ab0:	4798      	blx	r3
        }
        break;
 8010ab2:	e004      	b.n	8010abe <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8010ab4:	6839      	ldr	r1, [r7, #0]
 8010ab6:	6878      	ldr	r0, [r7, #4]
 8010ab8:	f000 fbe0 	bl	801127c <USBD_CtlError>
        break;
 8010abc:	e000      	b.n	8010ac0 <USBD_StdEPReq+0x13c>
        break;
 8010abe:	bf00      	nop
      }
      break;
 8010ac0:	e0aa      	b.n	8010c18 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010ac8:	2b02      	cmp	r3, #2
 8010aca:	d002      	beq.n	8010ad2 <USBD_StdEPReq+0x14e>
 8010acc:	2b03      	cmp	r3, #3
 8010ace:	d032      	beq.n	8010b36 <USBD_StdEPReq+0x1b2>
 8010ad0:	e097      	b.n	8010c02 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010ad2:	7bbb      	ldrb	r3, [r7, #14]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d007      	beq.n	8010ae8 <USBD_StdEPReq+0x164>
 8010ad8:	7bbb      	ldrb	r3, [r7, #14]
 8010ada:	2b80      	cmp	r3, #128	; 0x80
 8010adc:	d004      	beq.n	8010ae8 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8010ade:	6839      	ldr	r1, [r7, #0]
 8010ae0:	6878      	ldr	r0, [r7, #4]
 8010ae2:	f000 fbcb 	bl	801127c <USBD_CtlError>
          break;
 8010ae6:	e091      	b.n	8010c0c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010ae8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	da0b      	bge.n	8010b08 <USBD_StdEPReq+0x184>
 8010af0:	7bbb      	ldrb	r3, [r7, #14]
 8010af2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010af6:	4613      	mov	r3, r2
 8010af8:	009b      	lsls	r3, r3, #2
 8010afa:	4413      	add	r3, r2
 8010afc:	009b      	lsls	r3, r3, #2
 8010afe:	3310      	adds	r3, #16
 8010b00:	687a      	ldr	r2, [r7, #4]
 8010b02:	4413      	add	r3, r2
 8010b04:	3304      	adds	r3, #4
 8010b06:	e00b      	b.n	8010b20 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8010b08:	7bbb      	ldrb	r3, [r7, #14]
 8010b0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010b0e:	4613      	mov	r3, r2
 8010b10:	009b      	lsls	r3, r3, #2
 8010b12:	4413      	add	r3, r2
 8010b14:	009b      	lsls	r3, r3, #2
 8010b16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010b1a:	687a      	ldr	r2, [r7, #4]
 8010b1c:	4413      	add	r3, r2
 8010b1e:	3304      	adds	r3, #4
 8010b20:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8010b22:	68bb      	ldr	r3, [r7, #8]
 8010b24:	2200      	movs	r2, #0
 8010b26:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010b28:	68bb      	ldr	r3, [r7, #8]
 8010b2a:	2202      	movs	r2, #2
 8010b2c:	4619      	mov	r1, r3
 8010b2e:	6878      	ldr	r0, [r7, #4]
 8010b30:	f000 fc15 	bl	801135e <USBD_CtlSendData>
        break;
 8010b34:	e06a      	b.n	8010c0c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8010b36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	da11      	bge.n	8010b62 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010b3e:	7bbb      	ldrb	r3, [r7, #14]
 8010b40:	f003 020f 	and.w	r2, r3, #15
 8010b44:	6879      	ldr	r1, [r7, #4]
 8010b46:	4613      	mov	r3, r2
 8010b48:	009b      	lsls	r3, r3, #2
 8010b4a:	4413      	add	r3, r2
 8010b4c:	009b      	lsls	r3, r3, #2
 8010b4e:	440b      	add	r3, r1
 8010b50:	3324      	adds	r3, #36	; 0x24
 8010b52:	881b      	ldrh	r3, [r3, #0]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d117      	bne.n	8010b88 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8010b58:	6839      	ldr	r1, [r7, #0]
 8010b5a:	6878      	ldr	r0, [r7, #4]
 8010b5c:	f000 fb8e 	bl	801127c <USBD_CtlError>
            break;
 8010b60:	e054      	b.n	8010c0c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010b62:	7bbb      	ldrb	r3, [r7, #14]
 8010b64:	f003 020f 	and.w	r2, r3, #15
 8010b68:	6879      	ldr	r1, [r7, #4]
 8010b6a:	4613      	mov	r3, r2
 8010b6c:	009b      	lsls	r3, r3, #2
 8010b6e:	4413      	add	r3, r2
 8010b70:	009b      	lsls	r3, r3, #2
 8010b72:	440b      	add	r3, r1
 8010b74:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010b78:	881b      	ldrh	r3, [r3, #0]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d104      	bne.n	8010b88 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8010b7e:	6839      	ldr	r1, [r7, #0]
 8010b80:	6878      	ldr	r0, [r7, #4]
 8010b82:	f000 fb7b 	bl	801127c <USBD_CtlError>
            break;
 8010b86:	e041      	b.n	8010c0c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010b88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	da0b      	bge.n	8010ba8 <USBD_StdEPReq+0x224>
 8010b90:	7bbb      	ldrb	r3, [r7, #14]
 8010b92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010b96:	4613      	mov	r3, r2
 8010b98:	009b      	lsls	r3, r3, #2
 8010b9a:	4413      	add	r3, r2
 8010b9c:	009b      	lsls	r3, r3, #2
 8010b9e:	3310      	adds	r3, #16
 8010ba0:	687a      	ldr	r2, [r7, #4]
 8010ba2:	4413      	add	r3, r2
 8010ba4:	3304      	adds	r3, #4
 8010ba6:	e00b      	b.n	8010bc0 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8010ba8:	7bbb      	ldrb	r3, [r7, #14]
 8010baa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010bae:	4613      	mov	r3, r2
 8010bb0:	009b      	lsls	r3, r3, #2
 8010bb2:	4413      	add	r3, r2
 8010bb4:	009b      	lsls	r3, r3, #2
 8010bb6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010bba:	687a      	ldr	r2, [r7, #4]
 8010bbc:	4413      	add	r3, r2
 8010bbe:	3304      	adds	r3, #4
 8010bc0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010bc2:	7bbb      	ldrb	r3, [r7, #14]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d002      	beq.n	8010bce <USBD_StdEPReq+0x24a>
 8010bc8:	7bbb      	ldrb	r3, [r7, #14]
 8010bca:	2b80      	cmp	r3, #128	; 0x80
 8010bcc:	d103      	bne.n	8010bd6 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8010bce:	68bb      	ldr	r3, [r7, #8]
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	601a      	str	r2, [r3, #0]
 8010bd4:	e00e      	b.n	8010bf4 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010bd6:	7bbb      	ldrb	r3, [r7, #14]
 8010bd8:	4619      	mov	r1, r3
 8010bda:	6878      	ldr	r0, [r7, #4]
 8010bdc:	f001 f862 	bl	8011ca4 <USBD_LL_IsStallEP>
 8010be0:	4603      	mov	r3, r0
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d003      	beq.n	8010bee <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8010be6:	68bb      	ldr	r3, [r7, #8]
 8010be8:	2201      	movs	r2, #1
 8010bea:	601a      	str	r2, [r3, #0]
 8010bec:	e002      	b.n	8010bf4 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8010bee:	68bb      	ldr	r3, [r7, #8]
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010bf4:	68bb      	ldr	r3, [r7, #8]
 8010bf6:	2202      	movs	r2, #2
 8010bf8:	4619      	mov	r1, r3
 8010bfa:	6878      	ldr	r0, [r7, #4]
 8010bfc:	f000 fbaf 	bl	801135e <USBD_CtlSendData>
          break;
 8010c00:	e004      	b.n	8010c0c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8010c02:	6839      	ldr	r1, [r7, #0]
 8010c04:	6878      	ldr	r0, [r7, #4]
 8010c06:	f000 fb39 	bl	801127c <USBD_CtlError>
        break;
 8010c0a:	bf00      	nop
      }
      break;
 8010c0c:	e004      	b.n	8010c18 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8010c0e:	6839      	ldr	r1, [r7, #0]
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f000 fb33 	bl	801127c <USBD_CtlError>
      break;
 8010c16:	bf00      	nop
    }
    break;
 8010c18:	e004      	b.n	8010c24 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8010c1a:	6839      	ldr	r1, [r7, #0]
 8010c1c:	6878      	ldr	r0, [r7, #4]
 8010c1e:	f000 fb2d 	bl	801127c <USBD_CtlError>
    break;
 8010c22:	bf00      	nop
  }

  return ret;
 8010c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c26:	4618      	mov	r0, r3
 8010c28:	3710      	adds	r7, #16
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	bd80      	pop	{r7, pc}
	...

08010c30 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b084      	sub	sp, #16
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
 8010c38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010c3e:	2300      	movs	r3, #0
 8010c40:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010c42:	2300      	movs	r3, #0
 8010c44:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010c46:	683b      	ldr	r3, [r7, #0]
 8010c48:	885b      	ldrh	r3, [r3, #2]
 8010c4a:	0a1b      	lsrs	r3, r3, #8
 8010c4c:	b29b      	uxth	r3, r3
 8010c4e:	3b01      	subs	r3, #1
 8010c50:	2b06      	cmp	r3, #6
 8010c52:	f200 8128 	bhi.w	8010ea6 <USBD_GetDescriptor+0x276>
 8010c56:	a201      	add	r2, pc, #4	; (adr r2, 8010c5c <USBD_GetDescriptor+0x2c>)
 8010c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c5c:	08010c79 	.word	0x08010c79
 8010c60:	08010c91 	.word	0x08010c91
 8010c64:	08010cd1 	.word	0x08010cd1
 8010c68:	08010ea7 	.word	0x08010ea7
 8010c6c:	08010ea7 	.word	0x08010ea7
 8010c70:	08010e47 	.word	0x08010e47
 8010c74:	08010e73 	.word	0x08010e73
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	687a      	ldr	r2, [r7, #4]
 8010c82:	7c12      	ldrb	r2, [r2, #16]
 8010c84:	f107 0108 	add.w	r1, r7, #8
 8010c88:	4610      	mov	r0, r2
 8010c8a:	4798      	blx	r3
 8010c8c:	60f8      	str	r0, [r7, #12]
    break;
 8010c8e:	e112      	b.n	8010eb6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	7c1b      	ldrb	r3, [r3, #16]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d10d      	bne.n	8010cb4 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ca0:	f107 0208 	add.w	r2, r7, #8
 8010ca4:	4610      	mov	r0, r2
 8010ca6:	4798      	blx	r3
 8010ca8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	3301      	adds	r3, #1
 8010cae:	2202      	movs	r2, #2
 8010cb0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8010cb2:	e100      	b.n	8010eb6 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cbc:	f107 0208 	add.w	r2, r7, #8
 8010cc0:	4610      	mov	r0, r2
 8010cc2:	4798      	blx	r3
 8010cc4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	3301      	adds	r3, #1
 8010cca:	2202      	movs	r2, #2
 8010ccc:	701a      	strb	r2, [r3, #0]
    break;
 8010cce:	e0f2      	b.n	8010eb6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	885b      	ldrh	r3, [r3, #2]
 8010cd4:	b2db      	uxtb	r3, r3
 8010cd6:	2b05      	cmp	r3, #5
 8010cd8:	f200 80ac 	bhi.w	8010e34 <USBD_GetDescriptor+0x204>
 8010cdc:	a201      	add	r2, pc, #4	; (adr r2, 8010ce4 <USBD_GetDescriptor+0xb4>)
 8010cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ce2:	bf00      	nop
 8010ce4:	08010cfd 	.word	0x08010cfd
 8010ce8:	08010d31 	.word	0x08010d31
 8010cec:	08010d65 	.word	0x08010d65
 8010cf0:	08010d99 	.word	0x08010d99
 8010cf4:	08010dcd 	.word	0x08010dcd
 8010cf8:	08010e01 	.word	0x08010e01
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010d02:	685b      	ldr	r3, [r3, #4]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d00b      	beq.n	8010d20 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010d0e:	685b      	ldr	r3, [r3, #4]
 8010d10:	687a      	ldr	r2, [r7, #4]
 8010d12:	7c12      	ldrb	r2, [r2, #16]
 8010d14:	f107 0108 	add.w	r1, r7, #8
 8010d18:	4610      	mov	r0, r2
 8010d1a:	4798      	blx	r3
 8010d1c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010d1e:	e091      	b.n	8010e44 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8010d20:	6839      	ldr	r1, [r7, #0]
 8010d22:	6878      	ldr	r0, [r7, #4]
 8010d24:	f000 faaa 	bl	801127c <USBD_CtlError>
        err++;
 8010d28:	7afb      	ldrb	r3, [r7, #11]
 8010d2a:	3301      	adds	r3, #1
 8010d2c:	72fb      	strb	r3, [r7, #11]
      break;
 8010d2e:	e089      	b.n	8010e44 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010d36:	689b      	ldr	r3, [r3, #8]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d00b      	beq.n	8010d54 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010d42:	689b      	ldr	r3, [r3, #8]
 8010d44:	687a      	ldr	r2, [r7, #4]
 8010d46:	7c12      	ldrb	r2, [r2, #16]
 8010d48:	f107 0108 	add.w	r1, r7, #8
 8010d4c:	4610      	mov	r0, r2
 8010d4e:	4798      	blx	r3
 8010d50:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010d52:	e077      	b.n	8010e44 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8010d54:	6839      	ldr	r1, [r7, #0]
 8010d56:	6878      	ldr	r0, [r7, #4]
 8010d58:	f000 fa90 	bl	801127c <USBD_CtlError>
        err++;
 8010d5c:	7afb      	ldrb	r3, [r7, #11]
 8010d5e:	3301      	adds	r3, #1
 8010d60:	72fb      	strb	r3, [r7, #11]
      break;
 8010d62:	e06f      	b.n	8010e44 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010d6a:	68db      	ldr	r3, [r3, #12]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d00b      	beq.n	8010d88 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010d76:	68db      	ldr	r3, [r3, #12]
 8010d78:	687a      	ldr	r2, [r7, #4]
 8010d7a:	7c12      	ldrb	r2, [r2, #16]
 8010d7c:	f107 0108 	add.w	r1, r7, #8
 8010d80:	4610      	mov	r0, r2
 8010d82:	4798      	blx	r3
 8010d84:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010d86:	e05d      	b.n	8010e44 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8010d88:	6839      	ldr	r1, [r7, #0]
 8010d8a:	6878      	ldr	r0, [r7, #4]
 8010d8c:	f000 fa76 	bl	801127c <USBD_CtlError>
        err++;
 8010d90:	7afb      	ldrb	r3, [r7, #11]
 8010d92:	3301      	adds	r3, #1
 8010d94:	72fb      	strb	r3, [r7, #11]
      break;
 8010d96:	e055      	b.n	8010e44 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010d9e:	691b      	ldr	r3, [r3, #16]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d00b      	beq.n	8010dbc <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010daa:	691b      	ldr	r3, [r3, #16]
 8010dac:	687a      	ldr	r2, [r7, #4]
 8010dae:	7c12      	ldrb	r2, [r2, #16]
 8010db0:	f107 0108 	add.w	r1, r7, #8
 8010db4:	4610      	mov	r0, r2
 8010db6:	4798      	blx	r3
 8010db8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010dba:	e043      	b.n	8010e44 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8010dbc:	6839      	ldr	r1, [r7, #0]
 8010dbe:	6878      	ldr	r0, [r7, #4]
 8010dc0:	f000 fa5c 	bl	801127c <USBD_CtlError>
        err++;
 8010dc4:	7afb      	ldrb	r3, [r7, #11]
 8010dc6:	3301      	adds	r3, #1
 8010dc8:	72fb      	strb	r3, [r7, #11]
      break;
 8010dca:	e03b      	b.n	8010e44 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010dd2:	695b      	ldr	r3, [r3, #20]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d00b      	beq.n	8010df0 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010dde:	695b      	ldr	r3, [r3, #20]
 8010de0:	687a      	ldr	r2, [r7, #4]
 8010de2:	7c12      	ldrb	r2, [r2, #16]
 8010de4:	f107 0108 	add.w	r1, r7, #8
 8010de8:	4610      	mov	r0, r2
 8010dea:	4798      	blx	r3
 8010dec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010dee:	e029      	b.n	8010e44 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8010df0:	6839      	ldr	r1, [r7, #0]
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	f000 fa42 	bl	801127c <USBD_CtlError>
        err++;
 8010df8:	7afb      	ldrb	r3, [r7, #11]
 8010dfa:	3301      	adds	r3, #1
 8010dfc:	72fb      	strb	r3, [r7, #11]
      break;
 8010dfe:	e021      	b.n	8010e44 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010e06:	699b      	ldr	r3, [r3, #24]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d00b      	beq.n	8010e24 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010e12:	699b      	ldr	r3, [r3, #24]
 8010e14:	687a      	ldr	r2, [r7, #4]
 8010e16:	7c12      	ldrb	r2, [r2, #16]
 8010e18:	f107 0108 	add.w	r1, r7, #8
 8010e1c:	4610      	mov	r0, r2
 8010e1e:	4798      	blx	r3
 8010e20:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010e22:	e00f      	b.n	8010e44 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8010e24:	6839      	ldr	r1, [r7, #0]
 8010e26:	6878      	ldr	r0, [r7, #4]
 8010e28:	f000 fa28 	bl	801127c <USBD_CtlError>
        err++;
 8010e2c:	7afb      	ldrb	r3, [r7, #11]
 8010e2e:	3301      	adds	r3, #1
 8010e30:	72fb      	strb	r3, [r7, #11]
      break;
 8010e32:	e007      	b.n	8010e44 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8010e34:	6839      	ldr	r1, [r7, #0]
 8010e36:	6878      	ldr	r0, [r7, #4]
 8010e38:	f000 fa20 	bl	801127c <USBD_CtlError>
      err++;
 8010e3c:	7afb      	ldrb	r3, [r7, #11]
 8010e3e:	3301      	adds	r3, #1
 8010e40:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8010e42:	bf00      	nop
    }
    break;
 8010e44:	e037      	b.n	8010eb6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	7c1b      	ldrb	r3, [r3, #16]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d109      	bne.n	8010e62 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e56:	f107 0208 	add.w	r2, r7, #8
 8010e5a:	4610      	mov	r0, r2
 8010e5c:	4798      	blx	r3
 8010e5e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8010e60:	e029      	b.n	8010eb6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8010e62:	6839      	ldr	r1, [r7, #0]
 8010e64:	6878      	ldr	r0, [r7, #4]
 8010e66:	f000 fa09 	bl	801127c <USBD_CtlError>
      err++;
 8010e6a:	7afb      	ldrb	r3, [r7, #11]
 8010e6c:	3301      	adds	r3, #1
 8010e6e:	72fb      	strb	r3, [r7, #11]
    break;
 8010e70:	e021      	b.n	8010eb6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	7c1b      	ldrb	r3, [r3, #16]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d10d      	bne.n	8010e96 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e82:	f107 0208 	add.w	r2, r7, #8
 8010e86:	4610      	mov	r0, r2
 8010e88:	4798      	blx	r3
 8010e8a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	3301      	adds	r3, #1
 8010e90:	2207      	movs	r2, #7
 8010e92:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8010e94:	e00f      	b.n	8010eb6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8010e96:	6839      	ldr	r1, [r7, #0]
 8010e98:	6878      	ldr	r0, [r7, #4]
 8010e9a:	f000 f9ef 	bl	801127c <USBD_CtlError>
      err++;
 8010e9e:	7afb      	ldrb	r3, [r7, #11]
 8010ea0:	3301      	adds	r3, #1
 8010ea2:	72fb      	strb	r3, [r7, #11]
    break;
 8010ea4:	e007      	b.n	8010eb6 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8010ea6:	6839      	ldr	r1, [r7, #0]
 8010ea8:	6878      	ldr	r0, [r7, #4]
 8010eaa:	f000 f9e7 	bl	801127c <USBD_CtlError>
    err++;
 8010eae:	7afb      	ldrb	r3, [r7, #11]
 8010eb0:	3301      	adds	r3, #1
 8010eb2:	72fb      	strb	r3, [r7, #11]
    break;
 8010eb4:	bf00      	nop
  }

  if (err != 0U)
 8010eb6:	7afb      	ldrb	r3, [r7, #11]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d11e      	bne.n	8010efa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8010ebc:	683b      	ldr	r3, [r7, #0]
 8010ebe:	88db      	ldrh	r3, [r3, #6]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d016      	beq.n	8010ef2 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8010ec4:	893b      	ldrh	r3, [r7, #8]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d00e      	beq.n	8010ee8 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8010eca:	683b      	ldr	r3, [r7, #0]
 8010ecc:	88da      	ldrh	r2, [r3, #6]
 8010ece:	893b      	ldrh	r3, [r7, #8]
 8010ed0:	4293      	cmp	r3, r2
 8010ed2:	bf28      	it	cs
 8010ed4:	4613      	movcs	r3, r2
 8010ed6:	b29b      	uxth	r3, r3
 8010ed8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8010eda:	893b      	ldrh	r3, [r7, #8]
 8010edc:	461a      	mov	r2, r3
 8010ede:	68f9      	ldr	r1, [r7, #12]
 8010ee0:	6878      	ldr	r0, [r7, #4]
 8010ee2:	f000 fa3c 	bl	801135e <USBD_CtlSendData>
 8010ee6:	e009      	b.n	8010efc <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8010ee8:	6839      	ldr	r1, [r7, #0]
 8010eea:	6878      	ldr	r0, [r7, #4]
 8010eec:	f000 f9c6 	bl	801127c <USBD_CtlError>
 8010ef0:	e004      	b.n	8010efc <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8010ef2:	6878      	ldr	r0, [r7, #4]
 8010ef4:	f000 fa8d 	bl	8011412 <USBD_CtlSendStatus>
 8010ef8:	e000      	b.n	8010efc <USBD_GetDescriptor+0x2cc>
    return;
 8010efa:	bf00      	nop
    }
  }
}
 8010efc:	3710      	adds	r7, #16
 8010efe:	46bd      	mov	sp, r7
 8010f00:	bd80      	pop	{r7, pc}
 8010f02:	bf00      	nop

08010f04 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b084      	sub	sp, #16
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
 8010f0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	889b      	ldrh	r3, [r3, #4]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d130      	bne.n	8010f78 <USBD_SetAddress+0x74>
 8010f16:	683b      	ldr	r3, [r7, #0]
 8010f18:	88db      	ldrh	r3, [r3, #6]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d12c      	bne.n	8010f78 <USBD_SetAddress+0x74>
 8010f1e:	683b      	ldr	r3, [r7, #0]
 8010f20:	885b      	ldrh	r3, [r3, #2]
 8010f22:	2b7f      	cmp	r3, #127	; 0x7f
 8010f24:	d828      	bhi.n	8010f78 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	885b      	ldrh	r3, [r3, #2]
 8010f2a:	b2db      	uxtb	r3, r3
 8010f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f38:	2b03      	cmp	r3, #3
 8010f3a:	d104      	bne.n	8010f46 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8010f3c:	6839      	ldr	r1, [r7, #0]
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f000 f99c 	bl	801127c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f44:	e01c      	b.n	8010f80 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	7bfa      	ldrb	r2, [r7, #15]
 8010f4a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010f4e:	7bfb      	ldrb	r3, [r7, #15]
 8010f50:	4619      	mov	r1, r3
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	f000 fed2 	bl	8011cfc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010f58:	6878      	ldr	r0, [r7, #4]
 8010f5a:	f000 fa5a 	bl	8011412 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010f5e:	7bfb      	ldrb	r3, [r7, #15]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d004      	beq.n	8010f6e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	2202      	movs	r2, #2
 8010f68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f6c:	e008      	b.n	8010f80 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2201      	movs	r2, #1
 8010f72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f76:	e003      	b.n	8010f80 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010f78:	6839      	ldr	r1, [r7, #0]
 8010f7a:	6878      	ldr	r0, [r7, #4]
 8010f7c:	f000 f97e 	bl	801127c <USBD_CtlError>
  }
}
 8010f80:	bf00      	nop
 8010f82:	3710      	adds	r7, #16
 8010f84:	46bd      	mov	sp, r7
 8010f86:	bd80      	pop	{r7, pc}

08010f88 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b084      	sub	sp, #16
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
 8010f90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010f92:	2300      	movs	r3, #0
 8010f94:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	885b      	ldrh	r3, [r3, #2]
 8010f9a:	b2da      	uxtb	r2, r3
 8010f9c:	4b4b      	ldr	r3, [pc, #300]	; (80110cc <USBD_SetConfig+0x144>)
 8010f9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010fa0:	4b4a      	ldr	r3, [pc, #296]	; (80110cc <USBD_SetConfig+0x144>)
 8010fa2:	781b      	ldrb	r3, [r3, #0]
 8010fa4:	2b01      	cmp	r3, #1
 8010fa6:	d905      	bls.n	8010fb4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010fa8:	6839      	ldr	r1, [r7, #0]
 8010faa:	6878      	ldr	r0, [r7, #4]
 8010fac:	f000 f966 	bl	801127c <USBD_CtlError>
    return USBD_FAIL;
 8010fb0:	2303      	movs	r3, #3
 8010fb2:	e087      	b.n	80110c4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010fba:	2b02      	cmp	r3, #2
 8010fbc:	d002      	beq.n	8010fc4 <USBD_SetConfig+0x3c>
 8010fbe:	2b03      	cmp	r3, #3
 8010fc0:	d025      	beq.n	801100e <USBD_SetConfig+0x86>
 8010fc2:	e071      	b.n	80110a8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8010fc4:	4b41      	ldr	r3, [pc, #260]	; (80110cc <USBD_SetConfig+0x144>)
 8010fc6:	781b      	ldrb	r3, [r3, #0]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d01c      	beq.n	8011006 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8010fcc:	4b3f      	ldr	r3, [pc, #252]	; (80110cc <USBD_SetConfig+0x144>)
 8010fce:	781b      	ldrb	r3, [r3, #0]
 8010fd0:	461a      	mov	r2, r3
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8010fd6:	4b3d      	ldr	r3, [pc, #244]	; (80110cc <USBD_SetConfig+0x144>)
 8010fd8:	781b      	ldrb	r3, [r3, #0]
 8010fda:	4619      	mov	r1, r3
 8010fdc:	6878      	ldr	r0, [r7, #4]
 8010fde:	f7ff f9a7 	bl	8010330 <USBD_SetClassConfig>
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8010fe6:	7bfb      	ldrb	r3, [r7, #15]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d004      	beq.n	8010ff6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8010fec:	6839      	ldr	r1, [r7, #0]
 8010fee:	6878      	ldr	r0, [r7, #4]
 8010ff0:	f000 f944 	bl	801127c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8010ff4:	e065      	b.n	80110c2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	f000 fa0b 	bl	8011412 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	2203      	movs	r2, #3
 8011000:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8011004:	e05d      	b.n	80110c2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8011006:	6878      	ldr	r0, [r7, #4]
 8011008:	f000 fa03 	bl	8011412 <USBD_CtlSendStatus>
    break;
 801100c:	e059      	b.n	80110c2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 801100e:	4b2f      	ldr	r3, [pc, #188]	; (80110cc <USBD_SetConfig+0x144>)
 8011010:	781b      	ldrb	r3, [r3, #0]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d112      	bne.n	801103c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	2202      	movs	r2, #2
 801101a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 801101e:	4b2b      	ldr	r3, [pc, #172]	; (80110cc <USBD_SetConfig+0x144>)
 8011020:	781b      	ldrb	r3, [r3, #0]
 8011022:	461a      	mov	r2, r3
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011028:	4b28      	ldr	r3, [pc, #160]	; (80110cc <USBD_SetConfig+0x144>)
 801102a:	781b      	ldrb	r3, [r3, #0]
 801102c:	4619      	mov	r1, r3
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	f7ff f99a 	bl	8010368 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8011034:	6878      	ldr	r0, [r7, #4]
 8011036:	f000 f9ec 	bl	8011412 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801103a:	e042      	b.n	80110c2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 801103c:	4b23      	ldr	r3, [pc, #140]	; (80110cc <USBD_SetConfig+0x144>)
 801103e:	781b      	ldrb	r3, [r3, #0]
 8011040:	461a      	mov	r2, r3
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	685b      	ldr	r3, [r3, #4]
 8011046:	429a      	cmp	r2, r3
 8011048:	d02a      	beq.n	80110a0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	685b      	ldr	r3, [r3, #4]
 801104e:	b2db      	uxtb	r3, r3
 8011050:	4619      	mov	r1, r3
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f7ff f988 	bl	8010368 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8011058:	4b1c      	ldr	r3, [pc, #112]	; (80110cc <USBD_SetConfig+0x144>)
 801105a:	781b      	ldrb	r3, [r3, #0]
 801105c:	461a      	mov	r2, r3
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8011062:	4b1a      	ldr	r3, [pc, #104]	; (80110cc <USBD_SetConfig+0x144>)
 8011064:	781b      	ldrb	r3, [r3, #0]
 8011066:	4619      	mov	r1, r3
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	f7ff f961 	bl	8010330 <USBD_SetClassConfig>
 801106e:	4603      	mov	r3, r0
 8011070:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8011072:	7bfb      	ldrb	r3, [r7, #15]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d00f      	beq.n	8011098 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8011078:	6839      	ldr	r1, [r7, #0]
 801107a:	6878      	ldr	r0, [r7, #4]
 801107c:	f000 f8fe 	bl	801127c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	685b      	ldr	r3, [r3, #4]
 8011084:	b2db      	uxtb	r3, r3
 8011086:	4619      	mov	r1, r3
 8011088:	6878      	ldr	r0, [r7, #4]
 801108a:	f7ff f96d 	bl	8010368 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	2202      	movs	r2, #2
 8011092:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8011096:	e014      	b.n	80110c2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8011098:	6878      	ldr	r0, [r7, #4]
 801109a:	f000 f9ba 	bl	8011412 <USBD_CtlSendStatus>
    break;
 801109e:	e010      	b.n	80110c2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80110a0:	6878      	ldr	r0, [r7, #4]
 80110a2:	f000 f9b6 	bl	8011412 <USBD_CtlSendStatus>
    break;
 80110a6:	e00c      	b.n	80110c2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80110a8:	6839      	ldr	r1, [r7, #0]
 80110aa:	6878      	ldr	r0, [r7, #4]
 80110ac:	f000 f8e6 	bl	801127c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80110b0:	4b06      	ldr	r3, [pc, #24]	; (80110cc <USBD_SetConfig+0x144>)
 80110b2:	781b      	ldrb	r3, [r3, #0]
 80110b4:	4619      	mov	r1, r3
 80110b6:	6878      	ldr	r0, [r7, #4]
 80110b8:	f7ff f956 	bl	8010368 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80110bc:	2303      	movs	r3, #3
 80110be:	73fb      	strb	r3, [r7, #15]
    break;
 80110c0:	bf00      	nop
  }

  return ret;
 80110c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80110c4:	4618      	mov	r0, r3
 80110c6:	3710      	adds	r7, #16
 80110c8:	46bd      	mov	sp, r7
 80110ca:	bd80      	pop	{r7, pc}
 80110cc:	200003cc 	.word	0x200003cc

080110d0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b082      	sub	sp, #8
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
 80110d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80110da:	683b      	ldr	r3, [r7, #0]
 80110dc:	88db      	ldrh	r3, [r3, #6]
 80110de:	2b01      	cmp	r3, #1
 80110e0:	d004      	beq.n	80110ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80110e2:	6839      	ldr	r1, [r7, #0]
 80110e4:	6878      	ldr	r0, [r7, #4]
 80110e6:	f000 f8c9 	bl	801127c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80110ea:	e021      	b.n	8011130 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80110f2:	2b01      	cmp	r3, #1
 80110f4:	db17      	blt.n	8011126 <USBD_GetConfig+0x56>
 80110f6:	2b02      	cmp	r3, #2
 80110f8:	dd02      	ble.n	8011100 <USBD_GetConfig+0x30>
 80110fa:	2b03      	cmp	r3, #3
 80110fc:	d00b      	beq.n	8011116 <USBD_GetConfig+0x46>
 80110fe:	e012      	b.n	8011126 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	2200      	movs	r2, #0
 8011104:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	3308      	adds	r3, #8
 801110a:	2201      	movs	r2, #1
 801110c:	4619      	mov	r1, r3
 801110e:	6878      	ldr	r0, [r7, #4]
 8011110:	f000 f925 	bl	801135e <USBD_CtlSendData>
      break;
 8011114:	e00c      	b.n	8011130 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	3304      	adds	r3, #4
 801111a:	2201      	movs	r2, #1
 801111c:	4619      	mov	r1, r3
 801111e:	6878      	ldr	r0, [r7, #4]
 8011120:	f000 f91d 	bl	801135e <USBD_CtlSendData>
      break;
 8011124:	e004      	b.n	8011130 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8011126:	6839      	ldr	r1, [r7, #0]
 8011128:	6878      	ldr	r0, [r7, #4]
 801112a:	f000 f8a7 	bl	801127c <USBD_CtlError>
      break;
 801112e:	bf00      	nop
}
 8011130:	bf00      	nop
 8011132:	3708      	adds	r7, #8
 8011134:	46bd      	mov	sp, r7
 8011136:	bd80      	pop	{r7, pc}

08011138 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b082      	sub	sp, #8
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
 8011140:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011148:	3b01      	subs	r3, #1
 801114a:	2b02      	cmp	r3, #2
 801114c:	d81e      	bhi.n	801118c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 801114e:	683b      	ldr	r3, [r7, #0]
 8011150:	88db      	ldrh	r3, [r3, #6]
 8011152:	2b02      	cmp	r3, #2
 8011154:	d004      	beq.n	8011160 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8011156:	6839      	ldr	r1, [r7, #0]
 8011158:	6878      	ldr	r0, [r7, #4]
 801115a:	f000 f88f 	bl	801127c <USBD_CtlError>
      break;
 801115e:	e01a      	b.n	8011196 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	2201      	movs	r2, #1
 8011164:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801116c:	2b00      	cmp	r3, #0
 801116e:	d005      	beq.n	801117c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	68db      	ldr	r3, [r3, #12]
 8011174:	f043 0202 	orr.w	r2, r3, #2
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	330c      	adds	r3, #12
 8011180:	2202      	movs	r2, #2
 8011182:	4619      	mov	r1, r3
 8011184:	6878      	ldr	r0, [r7, #4]
 8011186:	f000 f8ea 	bl	801135e <USBD_CtlSendData>
    break;
 801118a:	e004      	b.n	8011196 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 801118c:	6839      	ldr	r1, [r7, #0]
 801118e:	6878      	ldr	r0, [r7, #4]
 8011190:	f000 f874 	bl	801127c <USBD_CtlError>
    break;
 8011194:	bf00      	nop
  }
}
 8011196:	bf00      	nop
 8011198:	3708      	adds	r7, #8
 801119a:	46bd      	mov	sp, r7
 801119c:	bd80      	pop	{r7, pc}

0801119e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801119e:	b580      	push	{r7, lr}
 80111a0:	b082      	sub	sp, #8
 80111a2:	af00      	add	r7, sp, #0
 80111a4:	6078      	str	r0, [r7, #4]
 80111a6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80111a8:	683b      	ldr	r3, [r7, #0]
 80111aa:	885b      	ldrh	r3, [r3, #2]
 80111ac:	2b01      	cmp	r3, #1
 80111ae:	d106      	bne.n	80111be <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	2201      	movs	r2, #1
 80111b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80111b8:	6878      	ldr	r0, [r7, #4]
 80111ba:	f000 f92a 	bl	8011412 <USBD_CtlSendStatus>
  }
}
 80111be:	bf00      	nop
 80111c0:	3708      	adds	r7, #8
 80111c2:	46bd      	mov	sp, r7
 80111c4:	bd80      	pop	{r7, pc}

080111c6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80111c6:	b580      	push	{r7, lr}
 80111c8:	b082      	sub	sp, #8
 80111ca:	af00      	add	r7, sp, #0
 80111cc:	6078      	str	r0, [r7, #4]
 80111ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80111d6:	3b01      	subs	r3, #1
 80111d8:	2b02      	cmp	r3, #2
 80111da:	d80b      	bhi.n	80111f4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80111dc:	683b      	ldr	r3, [r7, #0]
 80111de:	885b      	ldrh	r3, [r3, #2]
 80111e0:	2b01      	cmp	r3, #1
 80111e2:	d10c      	bne.n	80111fe <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	2200      	movs	r2, #0
 80111e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80111ec:	6878      	ldr	r0, [r7, #4]
 80111ee:	f000 f910 	bl	8011412 <USBD_CtlSendStatus>
      }
      break;
 80111f2:	e004      	b.n	80111fe <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80111f4:	6839      	ldr	r1, [r7, #0]
 80111f6:	6878      	ldr	r0, [r7, #4]
 80111f8:	f000 f840 	bl	801127c <USBD_CtlError>
      break;
 80111fc:	e000      	b.n	8011200 <USBD_ClrFeature+0x3a>
      break;
 80111fe:	bf00      	nop
  }
}
 8011200:	bf00      	nop
 8011202:	3708      	adds	r7, #8
 8011204:	46bd      	mov	sp, r7
 8011206:	bd80      	pop	{r7, pc}

08011208 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b084      	sub	sp, #16
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
 8011210:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011212:	683b      	ldr	r3, [r7, #0]
 8011214:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	781a      	ldrb	r2, [r3, #0]
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	3301      	adds	r3, #1
 8011222:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	781a      	ldrb	r2, [r3, #0]
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	3301      	adds	r3, #1
 8011230:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011232:	68f8      	ldr	r0, [r7, #12]
 8011234:	f7ff fad3 	bl	80107de <SWAPBYTE>
 8011238:	4603      	mov	r3, r0
 801123a:	461a      	mov	r2, r3
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	3301      	adds	r3, #1
 8011244:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	3301      	adds	r3, #1
 801124a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801124c:	68f8      	ldr	r0, [r7, #12]
 801124e:	f7ff fac6 	bl	80107de <SWAPBYTE>
 8011252:	4603      	mov	r3, r0
 8011254:	461a      	mov	r2, r3
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	3301      	adds	r3, #1
 801125e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	3301      	adds	r3, #1
 8011264:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011266:	68f8      	ldr	r0, [r7, #12]
 8011268:	f7ff fab9 	bl	80107de <SWAPBYTE>
 801126c:	4603      	mov	r3, r0
 801126e:	461a      	mov	r2, r3
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	80da      	strh	r2, [r3, #6]
}
 8011274:	bf00      	nop
 8011276:	3710      	adds	r7, #16
 8011278:	46bd      	mov	sp, r7
 801127a:	bd80      	pop	{r7, pc}

0801127c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801127c:	b580      	push	{r7, lr}
 801127e:	b082      	sub	sp, #8
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
 8011284:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011286:	2180      	movs	r1, #128	; 0x80
 8011288:	6878      	ldr	r0, [r7, #4]
 801128a:	f000 fccd 	bl	8011c28 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801128e:	2100      	movs	r1, #0
 8011290:	6878      	ldr	r0, [r7, #4]
 8011292:	f000 fcc9 	bl	8011c28 <USBD_LL_StallEP>
}
 8011296:	bf00      	nop
 8011298:	3708      	adds	r7, #8
 801129a:	46bd      	mov	sp, r7
 801129c:	bd80      	pop	{r7, pc}

0801129e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801129e:	b580      	push	{r7, lr}
 80112a0:	b086      	sub	sp, #24
 80112a2:	af00      	add	r7, sp, #0
 80112a4:	60f8      	str	r0, [r7, #12]
 80112a6:	60b9      	str	r1, [r7, #8]
 80112a8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80112aa:	2300      	movs	r3, #0
 80112ac:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d036      	beq.n	8011322 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80112b8:	6938      	ldr	r0, [r7, #16]
 80112ba:	f000 f836 	bl	801132a <USBD_GetLen>
 80112be:	4603      	mov	r3, r0
 80112c0:	3301      	adds	r3, #1
 80112c2:	b29b      	uxth	r3, r3
 80112c4:	005b      	lsls	r3, r3, #1
 80112c6:	b29a      	uxth	r2, r3
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80112cc:	7dfb      	ldrb	r3, [r7, #23]
 80112ce:	68ba      	ldr	r2, [r7, #8]
 80112d0:	4413      	add	r3, r2
 80112d2:	687a      	ldr	r2, [r7, #4]
 80112d4:	7812      	ldrb	r2, [r2, #0]
 80112d6:	701a      	strb	r2, [r3, #0]
  idx++;
 80112d8:	7dfb      	ldrb	r3, [r7, #23]
 80112da:	3301      	adds	r3, #1
 80112dc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80112de:	7dfb      	ldrb	r3, [r7, #23]
 80112e0:	68ba      	ldr	r2, [r7, #8]
 80112e2:	4413      	add	r3, r2
 80112e4:	2203      	movs	r2, #3
 80112e6:	701a      	strb	r2, [r3, #0]
  idx++;
 80112e8:	7dfb      	ldrb	r3, [r7, #23]
 80112ea:	3301      	adds	r3, #1
 80112ec:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80112ee:	e013      	b.n	8011318 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80112f0:	7dfb      	ldrb	r3, [r7, #23]
 80112f2:	68ba      	ldr	r2, [r7, #8]
 80112f4:	4413      	add	r3, r2
 80112f6:	693a      	ldr	r2, [r7, #16]
 80112f8:	7812      	ldrb	r2, [r2, #0]
 80112fa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80112fc:	693b      	ldr	r3, [r7, #16]
 80112fe:	3301      	adds	r3, #1
 8011300:	613b      	str	r3, [r7, #16]
    idx++;
 8011302:	7dfb      	ldrb	r3, [r7, #23]
 8011304:	3301      	adds	r3, #1
 8011306:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011308:	7dfb      	ldrb	r3, [r7, #23]
 801130a:	68ba      	ldr	r2, [r7, #8]
 801130c:	4413      	add	r3, r2
 801130e:	2200      	movs	r2, #0
 8011310:	701a      	strb	r2, [r3, #0]
    idx++;
 8011312:	7dfb      	ldrb	r3, [r7, #23]
 8011314:	3301      	adds	r3, #1
 8011316:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011318:	693b      	ldr	r3, [r7, #16]
 801131a:	781b      	ldrb	r3, [r3, #0]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d1e7      	bne.n	80112f0 <USBD_GetString+0x52>
 8011320:	e000      	b.n	8011324 <USBD_GetString+0x86>
    return;
 8011322:	bf00      	nop
  }
}
 8011324:	3718      	adds	r7, #24
 8011326:	46bd      	mov	sp, r7
 8011328:	bd80      	pop	{r7, pc}

0801132a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801132a:	b480      	push	{r7}
 801132c:	b085      	sub	sp, #20
 801132e:	af00      	add	r7, sp, #0
 8011330:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011332:	2300      	movs	r3, #0
 8011334:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801133a:	e005      	b.n	8011348 <USBD_GetLen+0x1e>
  {
    len++;
 801133c:	7bfb      	ldrb	r3, [r7, #15]
 801133e:	3301      	adds	r3, #1
 8011340:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011342:	68bb      	ldr	r3, [r7, #8]
 8011344:	3301      	adds	r3, #1
 8011346:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011348:	68bb      	ldr	r3, [r7, #8]
 801134a:	781b      	ldrb	r3, [r3, #0]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d1f5      	bne.n	801133c <USBD_GetLen+0x12>
  }

  return len;
 8011350:	7bfb      	ldrb	r3, [r7, #15]
}
 8011352:	4618      	mov	r0, r3
 8011354:	3714      	adds	r7, #20
 8011356:	46bd      	mov	sp, r7
 8011358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135c:	4770      	bx	lr

0801135e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801135e:	b580      	push	{r7, lr}
 8011360:	b084      	sub	sp, #16
 8011362:	af00      	add	r7, sp, #0
 8011364:	60f8      	str	r0, [r7, #12]
 8011366:	60b9      	str	r1, [r7, #8]
 8011368:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	2202      	movs	r2, #2
 801136e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	687a      	ldr	r2, [r7, #4]
 8011376:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	687a      	ldr	r2, [r7, #4]
 801137c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	68ba      	ldr	r2, [r7, #8]
 8011382:	2100      	movs	r1, #0
 8011384:	68f8      	ldr	r0, [r7, #12]
 8011386:	f000 fcd8 	bl	8011d3a <USBD_LL_Transmit>

  return USBD_OK;
 801138a:	2300      	movs	r3, #0
}
 801138c:	4618      	mov	r0, r3
 801138e:	3710      	adds	r7, #16
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}

08011394 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b084      	sub	sp, #16
 8011398:	af00      	add	r7, sp, #0
 801139a:	60f8      	str	r0, [r7, #12]
 801139c:	60b9      	str	r1, [r7, #8]
 801139e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	68ba      	ldr	r2, [r7, #8]
 80113a4:	2100      	movs	r1, #0
 80113a6:	68f8      	ldr	r0, [r7, #12]
 80113a8:	f000 fcc7 	bl	8011d3a <USBD_LL_Transmit>

  return USBD_OK;
 80113ac:	2300      	movs	r3, #0
}
 80113ae:	4618      	mov	r0, r3
 80113b0:	3710      	adds	r7, #16
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd80      	pop	{r7, pc}

080113b6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80113b6:	b580      	push	{r7, lr}
 80113b8:	b084      	sub	sp, #16
 80113ba:	af00      	add	r7, sp, #0
 80113bc:	60f8      	str	r0, [r7, #12]
 80113be:	60b9      	str	r1, [r7, #8]
 80113c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	2203      	movs	r2, #3
 80113c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	687a      	ldr	r2, [r7, #4]
 80113ce:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	687a      	ldr	r2, [r7, #4]
 80113d6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	68ba      	ldr	r2, [r7, #8]
 80113de:	2100      	movs	r1, #0
 80113e0:	68f8      	ldr	r0, [r7, #12]
 80113e2:	f000 fccb 	bl	8011d7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80113e6:	2300      	movs	r3, #0
}
 80113e8:	4618      	mov	r0, r3
 80113ea:	3710      	adds	r7, #16
 80113ec:	46bd      	mov	sp, r7
 80113ee:	bd80      	pop	{r7, pc}

080113f0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b084      	sub	sp, #16
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	60f8      	str	r0, [r7, #12]
 80113f8:	60b9      	str	r1, [r7, #8]
 80113fa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	68ba      	ldr	r2, [r7, #8]
 8011400:	2100      	movs	r1, #0
 8011402:	68f8      	ldr	r0, [r7, #12]
 8011404:	f000 fcba 	bl	8011d7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011408:	2300      	movs	r3, #0
}
 801140a:	4618      	mov	r0, r3
 801140c:	3710      	adds	r7, #16
 801140e:	46bd      	mov	sp, r7
 8011410:	bd80      	pop	{r7, pc}

08011412 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011412:	b580      	push	{r7, lr}
 8011414:	b082      	sub	sp, #8
 8011416:	af00      	add	r7, sp, #0
 8011418:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	2204      	movs	r2, #4
 801141e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011422:	2300      	movs	r3, #0
 8011424:	2200      	movs	r2, #0
 8011426:	2100      	movs	r1, #0
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	f000 fc86 	bl	8011d3a <USBD_LL_Transmit>

  return USBD_OK;
 801142e:	2300      	movs	r3, #0
}
 8011430:	4618      	mov	r0, r3
 8011432:	3708      	adds	r7, #8
 8011434:	46bd      	mov	sp, r7
 8011436:	bd80      	pop	{r7, pc}

08011438 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b082      	sub	sp, #8
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	2205      	movs	r2, #5
 8011444:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011448:	2300      	movs	r3, #0
 801144a:	2200      	movs	r2, #0
 801144c:	2100      	movs	r1, #0
 801144e:	6878      	ldr	r0, [r7, #4]
 8011450:	f000 fc94 	bl	8011d7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011454:	2300      	movs	r3, #0
}
 8011456:	4618      	mov	r0, r3
 8011458:	3708      	adds	r7, #8
 801145a:	46bd      	mov	sp, r7
 801145c:	bd80      	pop	{r7, pc}
	...

08011460 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011460:	b580      	push	{r7, lr}
 8011462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011464:	2200      	movs	r2, #0
 8011466:	4912      	ldr	r1, [pc, #72]	; (80114b0 <MX_USB_DEVICE_Init+0x50>)
 8011468:	4812      	ldr	r0, [pc, #72]	; (80114b4 <MX_USB_DEVICE_Init+0x54>)
 801146a:	f7fe fef3 	bl	8010254 <USBD_Init>
 801146e:	4603      	mov	r3, r0
 8011470:	2b00      	cmp	r3, #0
 8011472:	d001      	beq.n	8011478 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011474:	f7f4 fb0e 	bl	8005a94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011478:	490f      	ldr	r1, [pc, #60]	; (80114b8 <MX_USB_DEVICE_Init+0x58>)
 801147a:	480e      	ldr	r0, [pc, #56]	; (80114b4 <MX_USB_DEVICE_Init+0x54>)
 801147c:	f7fe ff20 	bl	80102c0 <USBD_RegisterClass>
 8011480:	4603      	mov	r3, r0
 8011482:	2b00      	cmp	r3, #0
 8011484:	d001      	beq.n	801148a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011486:	f7f4 fb05 	bl	8005a94 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801148a:	490c      	ldr	r1, [pc, #48]	; (80114bc <MX_USB_DEVICE_Init+0x5c>)
 801148c:	4809      	ldr	r0, [pc, #36]	; (80114b4 <MX_USB_DEVICE_Init+0x54>)
 801148e:	f7fe fe75 	bl	801017c <USBD_CDC_RegisterInterface>
 8011492:	4603      	mov	r3, r0
 8011494:	2b00      	cmp	r3, #0
 8011496:	d001      	beq.n	801149c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011498:	f7f4 fafc 	bl	8005a94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801149c:	4805      	ldr	r0, [pc, #20]	; (80114b4 <MX_USB_DEVICE_Init+0x54>)
 801149e:	f7fe ff30 	bl	8010302 <USBD_Start>
 80114a2:	4603      	mov	r3, r0
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d001      	beq.n	80114ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80114a8:	f7f4 faf4 	bl	8005a94 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80114ac:	bf00      	nop
 80114ae:	bd80      	pop	{r7, pc}
 80114b0:	200001b8 	.word	0x200001b8
 80114b4:	20003e30 	.word	0x20003e30
 80114b8:	20000098 	.word	0x20000098
 80114bc:	2000019c 	.word	0x2000019c

080114c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80114c0:	b580      	push	{r7, lr}
 80114c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80114c4:	2200      	movs	r2, #0
 80114c6:	4905      	ldr	r1, [pc, #20]	; (80114dc <CDC_Init_FS+0x1c>)
 80114c8:	4805      	ldr	r0, [pc, #20]	; (80114e0 <CDC_Init_FS+0x20>)
 80114ca:	f7fe fe6c 	bl	80101a6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80114ce:	4905      	ldr	r1, [pc, #20]	; (80114e4 <CDC_Init_FS+0x24>)
 80114d0:	4803      	ldr	r0, [pc, #12]	; (80114e0 <CDC_Init_FS+0x20>)
 80114d2:	f7fe fe81 	bl	80101d8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80114d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80114d8:	4618      	mov	r0, r3
 80114da:	bd80      	pop	{r7, pc}
 80114dc:	20004900 	.word	0x20004900
 80114e0:	20003e30 	.word	0x20003e30
 80114e4:	20004100 	.word	0x20004100

080114e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80114e8:	b480      	push	{r7}
 80114ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80114ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80114ee:	4618      	mov	r0, r3
 80114f0:	46bd      	mov	sp, r7
 80114f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f6:	4770      	bx	lr

080114f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80114f8:	b480      	push	{r7}
 80114fa:	b083      	sub	sp, #12
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	4603      	mov	r3, r0
 8011500:	6039      	str	r1, [r7, #0]
 8011502:	71fb      	strb	r3, [r7, #7]
 8011504:	4613      	mov	r3, r2
 8011506:	80bb      	strh	r3, [r7, #4]

	static uint8_t lineCoding[7] // <------- add these three lines
							  // 115200bps, 1stop, no parity, 8bit
							  = {0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08};

  switch(cmd)
 8011508:	79fb      	ldrb	r3, [r7, #7]
 801150a:	2b23      	cmp	r3, #35	; 0x23
 801150c:	d85c      	bhi.n	80115c8 <CDC_Control_FS+0xd0>
 801150e:	a201      	add	r2, pc, #4	; (adr r2, 8011514 <CDC_Control_FS+0x1c>)
 8011510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011514:	080115c9 	.word	0x080115c9
 8011518:	080115c9 	.word	0x080115c9
 801151c:	080115c9 	.word	0x080115c9
 8011520:	080115c9 	.word	0x080115c9
 8011524:	080115c9 	.word	0x080115c9
 8011528:	080115c9 	.word	0x080115c9
 801152c:	080115c9 	.word	0x080115c9
 8011530:	080115c9 	.word	0x080115c9
 8011534:	080115c9 	.word	0x080115c9
 8011538:	080115c9 	.word	0x080115c9
 801153c:	080115c9 	.word	0x080115c9
 8011540:	080115c9 	.word	0x080115c9
 8011544:	080115c9 	.word	0x080115c9
 8011548:	080115c9 	.word	0x080115c9
 801154c:	080115c9 	.word	0x080115c9
 8011550:	080115c9 	.word	0x080115c9
 8011554:	080115c9 	.word	0x080115c9
 8011558:	080115c9 	.word	0x080115c9
 801155c:	080115c9 	.word	0x080115c9
 8011560:	080115c9 	.word	0x080115c9
 8011564:	080115c9 	.word	0x080115c9
 8011568:	080115c9 	.word	0x080115c9
 801156c:	080115c9 	.word	0x080115c9
 8011570:	080115c9 	.word	0x080115c9
 8011574:	080115c9 	.word	0x080115c9
 8011578:	080115c9 	.word	0x080115c9
 801157c:	080115c9 	.word	0x080115c9
 8011580:	080115c9 	.word	0x080115c9
 8011584:	080115c9 	.word	0x080115c9
 8011588:	080115c9 	.word	0x080115c9
 801158c:	080115c9 	.word	0x080115c9
 8011590:	080115c9 	.word	0x080115c9
 8011594:	080115a5 	.word	0x080115a5
 8011598:	080115b7 	.word	0x080115b7
 801159c:	080115c9 	.word	0x080115c9
 80115a0:	080115c9 	.word	0x080115c9
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy( lineCoding, pbuf, sizeof(lineCoding) ); // <-- add this line
 80115a4:	4b0c      	ldr	r3, [pc, #48]	; (80115d8 <CDC_Control_FS+0xe0>)
 80115a6:	683a      	ldr	r2, [r7, #0]
 80115a8:	6810      	ldr	r0, [r2, #0]
 80115aa:	6018      	str	r0, [r3, #0]
 80115ac:	8891      	ldrh	r1, [r2, #4]
 80115ae:	7992      	ldrb	r2, [r2, #6]
 80115b0:	8099      	strh	r1, [r3, #4]
 80115b2:	719a      	strb	r2, [r3, #6]
    	break;
 80115b4:	e009      	b.n	80115ca <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy( pbuf, lineCoding, sizeof(lineCoding) ); // <-- add this line
 80115b6:	683b      	ldr	r3, [r7, #0]
 80115b8:	4a07      	ldr	r2, [pc, #28]	; (80115d8 <CDC_Control_FS+0xe0>)
 80115ba:	6810      	ldr	r0, [r2, #0]
 80115bc:	6018      	str	r0, [r3, #0]
 80115be:	8891      	ldrh	r1, [r2, #4]
 80115c0:	7992      	ldrb	r2, [r2, #6]
 80115c2:	8099      	strh	r1, [r3, #4]
 80115c4:	719a      	strb	r2, [r3, #6]
    	break;
 80115c6:	e000      	b.n	80115ca <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80115c8:	bf00      	nop
  }

  return (USBD_OK);
 80115ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80115cc:	4618      	mov	r0, r3
 80115ce:	370c      	adds	r7, #12
 80115d0:	46bd      	mov	sp, r7
 80115d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d6:	4770      	bx	lr
 80115d8:	200001b0 	.word	0x200001b0

080115dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80115dc:	b580      	push	{r7, lr}
 80115de:	b082      	sub	sp, #8
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	6078      	str	r0, [r7, #4]
 80115e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80115e6:	6879      	ldr	r1, [r7, #4]
 80115e8:	4805      	ldr	r0, [pc, #20]	; (8011600 <CDC_Receive_FS+0x24>)
 80115ea:	f7fe fdf5 	bl	80101d8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80115ee:	4804      	ldr	r0, [pc, #16]	; (8011600 <CDC_Receive_FS+0x24>)
 80115f0:	f7fe fe06 	bl	8010200 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80115f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80115f6:	4618      	mov	r0, r3
 80115f8:	3708      	adds	r7, #8
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}
 80115fe:	bf00      	nop
 8011600:	20003e30 	.word	0x20003e30

08011604 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011604:	b480      	push	{r7}
 8011606:	b087      	sub	sp, #28
 8011608:	af00      	add	r7, sp, #0
 801160a:	60f8      	str	r0, [r7, #12]
 801160c:	60b9      	str	r1, [r7, #8]
 801160e:	4613      	mov	r3, r2
 8011610:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011612:	2300      	movs	r3, #0
 8011614:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011616:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801161a:	4618      	mov	r0, r3
 801161c:	371c      	adds	r7, #28
 801161e:	46bd      	mov	sp, r7
 8011620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011624:	4770      	bx	lr
	...

08011628 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011628:	b480      	push	{r7}
 801162a:	b083      	sub	sp, #12
 801162c:	af00      	add	r7, sp, #0
 801162e:	4603      	mov	r3, r0
 8011630:	6039      	str	r1, [r7, #0]
 8011632:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011634:	683b      	ldr	r3, [r7, #0]
 8011636:	2212      	movs	r2, #18
 8011638:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801163a:	4b03      	ldr	r3, [pc, #12]	; (8011648 <USBD_FS_DeviceDescriptor+0x20>)
}
 801163c:	4618      	mov	r0, r3
 801163e:	370c      	adds	r7, #12
 8011640:	46bd      	mov	sp, r7
 8011642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011646:	4770      	bx	lr
 8011648:	200001d4 	.word	0x200001d4

0801164c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801164c:	b480      	push	{r7}
 801164e:	b083      	sub	sp, #12
 8011650:	af00      	add	r7, sp, #0
 8011652:	4603      	mov	r3, r0
 8011654:	6039      	str	r1, [r7, #0]
 8011656:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011658:	683b      	ldr	r3, [r7, #0]
 801165a:	2204      	movs	r2, #4
 801165c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801165e:	4b03      	ldr	r3, [pc, #12]	; (801166c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011660:	4618      	mov	r0, r3
 8011662:	370c      	adds	r7, #12
 8011664:	46bd      	mov	sp, r7
 8011666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801166a:	4770      	bx	lr
 801166c:	200001e8 	.word	0x200001e8

08011670 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b082      	sub	sp, #8
 8011674:	af00      	add	r7, sp, #0
 8011676:	4603      	mov	r3, r0
 8011678:	6039      	str	r1, [r7, #0]
 801167a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801167c:	79fb      	ldrb	r3, [r7, #7]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d105      	bne.n	801168e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011682:	683a      	ldr	r2, [r7, #0]
 8011684:	4907      	ldr	r1, [pc, #28]	; (80116a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8011686:	4808      	ldr	r0, [pc, #32]	; (80116a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8011688:	f7ff fe09 	bl	801129e <USBD_GetString>
 801168c:	e004      	b.n	8011698 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801168e:	683a      	ldr	r2, [r7, #0]
 8011690:	4904      	ldr	r1, [pc, #16]	; (80116a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8011692:	4805      	ldr	r0, [pc, #20]	; (80116a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8011694:	f7ff fe03 	bl	801129e <USBD_GetString>
  }
  return USBD_StrDesc;
 8011698:	4b02      	ldr	r3, [pc, #8]	; (80116a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801169a:	4618      	mov	r0, r3
 801169c:	3708      	adds	r7, #8
 801169e:	46bd      	mov	sp, r7
 80116a0:	bd80      	pop	{r7, pc}
 80116a2:	bf00      	nop
 80116a4:	20005100 	.word	0x20005100
 80116a8:	0801563c 	.word	0x0801563c

080116ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b082      	sub	sp, #8
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	4603      	mov	r3, r0
 80116b4:	6039      	str	r1, [r7, #0]
 80116b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80116b8:	683a      	ldr	r2, [r7, #0]
 80116ba:	4904      	ldr	r1, [pc, #16]	; (80116cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80116bc:	4804      	ldr	r0, [pc, #16]	; (80116d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80116be:	f7ff fdee 	bl	801129e <USBD_GetString>
  return USBD_StrDesc;
 80116c2:	4b02      	ldr	r3, [pc, #8]	; (80116cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80116c4:	4618      	mov	r0, r3
 80116c6:	3708      	adds	r7, #8
 80116c8:	46bd      	mov	sp, r7
 80116ca:	bd80      	pop	{r7, pc}
 80116cc:	20005100 	.word	0x20005100
 80116d0:	08015654 	.word	0x08015654

080116d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b082      	sub	sp, #8
 80116d8:	af00      	add	r7, sp, #0
 80116da:	4603      	mov	r3, r0
 80116dc:	6039      	str	r1, [r7, #0]
 80116de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80116e0:	683b      	ldr	r3, [r7, #0]
 80116e2:	221a      	movs	r2, #26
 80116e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80116e6:	f000 f843 	bl	8011770 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80116ea:	4b02      	ldr	r3, [pc, #8]	; (80116f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80116ec:	4618      	mov	r0, r3
 80116ee:	3708      	adds	r7, #8
 80116f0:	46bd      	mov	sp, r7
 80116f2:	bd80      	pop	{r7, pc}
 80116f4:	200001ec 	.word	0x200001ec

080116f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b082      	sub	sp, #8
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	4603      	mov	r3, r0
 8011700:	6039      	str	r1, [r7, #0]
 8011702:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011704:	79fb      	ldrb	r3, [r7, #7]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d105      	bne.n	8011716 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801170a:	683a      	ldr	r2, [r7, #0]
 801170c:	4907      	ldr	r1, [pc, #28]	; (801172c <USBD_FS_ConfigStrDescriptor+0x34>)
 801170e:	4808      	ldr	r0, [pc, #32]	; (8011730 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011710:	f7ff fdc5 	bl	801129e <USBD_GetString>
 8011714:	e004      	b.n	8011720 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011716:	683a      	ldr	r2, [r7, #0]
 8011718:	4904      	ldr	r1, [pc, #16]	; (801172c <USBD_FS_ConfigStrDescriptor+0x34>)
 801171a:	4805      	ldr	r0, [pc, #20]	; (8011730 <USBD_FS_ConfigStrDescriptor+0x38>)
 801171c:	f7ff fdbf 	bl	801129e <USBD_GetString>
  }
  return USBD_StrDesc;
 8011720:	4b02      	ldr	r3, [pc, #8]	; (801172c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011722:	4618      	mov	r0, r3
 8011724:	3708      	adds	r7, #8
 8011726:	46bd      	mov	sp, r7
 8011728:	bd80      	pop	{r7, pc}
 801172a:	bf00      	nop
 801172c:	20005100 	.word	0x20005100
 8011730:	08015668 	.word	0x08015668

08011734 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011734:	b580      	push	{r7, lr}
 8011736:	b082      	sub	sp, #8
 8011738:	af00      	add	r7, sp, #0
 801173a:	4603      	mov	r3, r0
 801173c:	6039      	str	r1, [r7, #0]
 801173e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011740:	79fb      	ldrb	r3, [r7, #7]
 8011742:	2b00      	cmp	r3, #0
 8011744:	d105      	bne.n	8011752 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011746:	683a      	ldr	r2, [r7, #0]
 8011748:	4907      	ldr	r1, [pc, #28]	; (8011768 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801174a:	4808      	ldr	r0, [pc, #32]	; (801176c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801174c:	f7ff fda7 	bl	801129e <USBD_GetString>
 8011750:	e004      	b.n	801175c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011752:	683a      	ldr	r2, [r7, #0]
 8011754:	4904      	ldr	r1, [pc, #16]	; (8011768 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011756:	4805      	ldr	r0, [pc, #20]	; (801176c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011758:	f7ff fda1 	bl	801129e <USBD_GetString>
  }
  return USBD_StrDesc;
 801175c:	4b02      	ldr	r3, [pc, #8]	; (8011768 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801175e:	4618      	mov	r0, r3
 8011760:	3708      	adds	r7, #8
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}
 8011766:	bf00      	nop
 8011768:	20005100 	.word	0x20005100
 801176c:	08015674 	.word	0x08015674

08011770 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011770:	b580      	push	{r7, lr}
 8011772:	b084      	sub	sp, #16
 8011774:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011776:	4b0f      	ldr	r3, [pc, #60]	; (80117b4 <Get_SerialNum+0x44>)
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801177c:	4b0e      	ldr	r3, [pc, #56]	; (80117b8 <Get_SerialNum+0x48>)
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011782:	4b0e      	ldr	r3, [pc, #56]	; (80117bc <Get_SerialNum+0x4c>)
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011788:	68fa      	ldr	r2, [r7, #12]
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	4413      	add	r3, r2
 801178e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d009      	beq.n	80117aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011796:	2208      	movs	r2, #8
 8011798:	4909      	ldr	r1, [pc, #36]	; (80117c0 <Get_SerialNum+0x50>)
 801179a:	68f8      	ldr	r0, [r7, #12]
 801179c:	f000 f814 	bl	80117c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80117a0:	2204      	movs	r2, #4
 80117a2:	4908      	ldr	r1, [pc, #32]	; (80117c4 <Get_SerialNum+0x54>)
 80117a4:	68b8      	ldr	r0, [r7, #8]
 80117a6:	f000 f80f 	bl	80117c8 <IntToUnicode>
  }
}
 80117aa:	bf00      	nop
 80117ac:	3710      	adds	r7, #16
 80117ae:	46bd      	mov	sp, r7
 80117b0:	bd80      	pop	{r7, pc}
 80117b2:	bf00      	nop
 80117b4:	1fff7a10 	.word	0x1fff7a10
 80117b8:	1fff7a14 	.word	0x1fff7a14
 80117bc:	1fff7a18 	.word	0x1fff7a18
 80117c0:	200001ee 	.word	0x200001ee
 80117c4:	200001fe 	.word	0x200001fe

080117c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80117c8:	b480      	push	{r7}
 80117ca:	b087      	sub	sp, #28
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	60f8      	str	r0, [r7, #12]
 80117d0:	60b9      	str	r1, [r7, #8]
 80117d2:	4613      	mov	r3, r2
 80117d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80117d6:	2300      	movs	r3, #0
 80117d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80117da:	2300      	movs	r3, #0
 80117dc:	75fb      	strb	r3, [r7, #23]
 80117de:	e027      	b.n	8011830 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	0f1b      	lsrs	r3, r3, #28
 80117e4:	2b09      	cmp	r3, #9
 80117e6:	d80b      	bhi.n	8011800 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	0f1b      	lsrs	r3, r3, #28
 80117ec:	b2da      	uxtb	r2, r3
 80117ee:	7dfb      	ldrb	r3, [r7, #23]
 80117f0:	005b      	lsls	r3, r3, #1
 80117f2:	4619      	mov	r1, r3
 80117f4:	68bb      	ldr	r3, [r7, #8]
 80117f6:	440b      	add	r3, r1
 80117f8:	3230      	adds	r2, #48	; 0x30
 80117fa:	b2d2      	uxtb	r2, r2
 80117fc:	701a      	strb	r2, [r3, #0]
 80117fe:	e00a      	b.n	8011816 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	0f1b      	lsrs	r3, r3, #28
 8011804:	b2da      	uxtb	r2, r3
 8011806:	7dfb      	ldrb	r3, [r7, #23]
 8011808:	005b      	lsls	r3, r3, #1
 801180a:	4619      	mov	r1, r3
 801180c:	68bb      	ldr	r3, [r7, #8]
 801180e:	440b      	add	r3, r1
 8011810:	3237      	adds	r2, #55	; 0x37
 8011812:	b2d2      	uxtb	r2, r2
 8011814:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	011b      	lsls	r3, r3, #4
 801181a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801181c:	7dfb      	ldrb	r3, [r7, #23]
 801181e:	005b      	lsls	r3, r3, #1
 8011820:	3301      	adds	r3, #1
 8011822:	68ba      	ldr	r2, [r7, #8]
 8011824:	4413      	add	r3, r2
 8011826:	2200      	movs	r2, #0
 8011828:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801182a:	7dfb      	ldrb	r3, [r7, #23]
 801182c:	3301      	adds	r3, #1
 801182e:	75fb      	strb	r3, [r7, #23]
 8011830:	7dfa      	ldrb	r2, [r7, #23]
 8011832:	79fb      	ldrb	r3, [r7, #7]
 8011834:	429a      	cmp	r2, r3
 8011836:	d3d3      	bcc.n	80117e0 <IntToUnicode+0x18>
  }
}
 8011838:	bf00      	nop
 801183a:	371c      	adds	r7, #28
 801183c:	46bd      	mov	sp, r7
 801183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011842:	4770      	bx	lr

08011844 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011844:	b580      	push	{r7, lr}
 8011846:	b08a      	sub	sp, #40	; 0x28
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801184c:	f107 0314 	add.w	r3, r7, #20
 8011850:	2200      	movs	r2, #0
 8011852:	601a      	str	r2, [r3, #0]
 8011854:	605a      	str	r2, [r3, #4]
 8011856:	609a      	str	r2, [r3, #8]
 8011858:	60da      	str	r2, [r3, #12]
 801185a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011864:	d13a      	bne.n	80118dc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011866:	2300      	movs	r3, #0
 8011868:	613b      	str	r3, [r7, #16]
 801186a:	4b1e      	ldr	r3, [pc, #120]	; (80118e4 <HAL_PCD_MspInit+0xa0>)
 801186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801186e:	4a1d      	ldr	r2, [pc, #116]	; (80118e4 <HAL_PCD_MspInit+0xa0>)
 8011870:	f043 0301 	orr.w	r3, r3, #1
 8011874:	6313      	str	r3, [r2, #48]	; 0x30
 8011876:	4b1b      	ldr	r3, [pc, #108]	; (80118e4 <HAL_PCD_MspInit+0xa0>)
 8011878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801187a:	f003 0301 	and.w	r3, r3, #1
 801187e:	613b      	str	r3, [r7, #16]
 8011880:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011882:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011888:	2302      	movs	r3, #2
 801188a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801188c:	2300      	movs	r3, #0
 801188e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011890:	2303      	movs	r3, #3
 8011892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011894:	230a      	movs	r3, #10
 8011896:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011898:	f107 0314 	add.w	r3, r7, #20
 801189c:	4619      	mov	r1, r3
 801189e:	4812      	ldr	r0, [pc, #72]	; (80118e8 <HAL_PCD_MspInit+0xa4>)
 80118a0:	f7f6 fe44 	bl	800852c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80118a4:	4b0f      	ldr	r3, [pc, #60]	; (80118e4 <HAL_PCD_MspInit+0xa0>)
 80118a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118a8:	4a0e      	ldr	r2, [pc, #56]	; (80118e4 <HAL_PCD_MspInit+0xa0>)
 80118aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80118ae:	6353      	str	r3, [r2, #52]	; 0x34
 80118b0:	2300      	movs	r3, #0
 80118b2:	60fb      	str	r3, [r7, #12]
 80118b4:	4b0b      	ldr	r3, [pc, #44]	; (80118e4 <HAL_PCD_MspInit+0xa0>)
 80118b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118b8:	4a0a      	ldr	r2, [pc, #40]	; (80118e4 <HAL_PCD_MspInit+0xa0>)
 80118ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80118be:	6453      	str	r3, [r2, #68]	; 0x44
 80118c0:	4b08      	ldr	r3, [pc, #32]	; (80118e4 <HAL_PCD_MspInit+0xa0>)
 80118c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80118c8:	60fb      	str	r3, [r7, #12]
 80118ca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80118cc:	2200      	movs	r2, #0
 80118ce:	2100      	movs	r1, #0
 80118d0:	2043      	movs	r0, #67	; 0x43
 80118d2:	f7f6 fadc 	bl	8007e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80118d6:	2043      	movs	r0, #67	; 0x43
 80118d8:	f7f6 faf5 	bl	8007ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80118dc:	bf00      	nop
 80118de:	3728      	adds	r7, #40	; 0x28
 80118e0:	46bd      	mov	sp, r7
 80118e2:	bd80      	pop	{r7, pc}
 80118e4:	40023800 	.word	0x40023800
 80118e8:	40020000 	.word	0x40020000

080118ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b082      	sub	sp, #8
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8011900:	4619      	mov	r1, r3
 8011902:	4610      	mov	r0, r2
 8011904:	f7fe fd48 	bl	8010398 <USBD_LL_SetupStage>
}
 8011908:	bf00      	nop
 801190a:	3708      	adds	r7, #8
 801190c:	46bd      	mov	sp, r7
 801190e:	bd80      	pop	{r7, pc}

08011910 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b082      	sub	sp, #8
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
 8011918:	460b      	mov	r3, r1
 801191a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011922:	78fa      	ldrb	r2, [r7, #3]
 8011924:	6879      	ldr	r1, [r7, #4]
 8011926:	4613      	mov	r3, r2
 8011928:	00db      	lsls	r3, r3, #3
 801192a:	1a9b      	subs	r3, r3, r2
 801192c:	009b      	lsls	r3, r3, #2
 801192e:	440b      	add	r3, r1
 8011930:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8011934:	681a      	ldr	r2, [r3, #0]
 8011936:	78fb      	ldrb	r3, [r7, #3]
 8011938:	4619      	mov	r1, r3
 801193a:	f7fe fd80 	bl	801043e <USBD_LL_DataOutStage>
}
 801193e:	bf00      	nop
 8011940:	3708      	adds	r7, #8
 8011942:	46bd      	mov	sp, r7
 8011944:	bd80      	pop	{r7, pc}

08011946 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011946:	b580      	push	{r7, lr}
 8011948:	b082      	sub	sp, #8
 801194a:	af00      	add	r7, sp, #0
 801194c:	6078      	str	r0, [r7, #4]
 801194e:	460b      	mov	r3, r1
 8011950:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011958:	78fa      	ldrb	r2, [r7, #3]
 801195a:	6879      	ldr	r1, [r7, #4]
 801195c:	4613      	mov	r3, r2
 801195e:	00db      	lsls	r3, r3, #3
 8011960:	1a9b      	subs	r3, r3, r2
 8011962:	009b      	lsls	r3, r3, #2
 8011964:	440b      	add	r3, r1
 8011966:	3348      	adds	r3, #72	; 0x48
 8011968:	681a      	ldr	r2, [r3, #0]
 801196a:	78fb      	ldrb	r3, [r7, #3]
 801196c:	4619      	mov	r1, r3
 801196e:	f7fe fdc9 	bl	8010504 <USBD_LL_DataInStage>
}
 8011972:	bf00      	nop
 8011974:	3708      	adds	r7, #8
 8011976:	46bd      	mov	sp, r7
 8011978:	bd80      	pop	{r7, pc}

0801197a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801197a:	b580      	push	{r7, lr}
 801197c:	b082      	sub	sp, #8
 801197e:	af00      	add	r7, sp, #0
 8011980:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011988:	4618      	mov	r0, r3
 801198a:	f7fe fecd 	bl	8010728 <USBD_LL_SOF>
}
 801198e:	bf00      	nop
 8011990:	3708      	adds	r7, #8
 8011992:	46bd      	mov	sp, r7
 8011994:	bd80      	pop	{r7, pc}

08011996 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011996:	b580      	push	{r7, lr}
 8011998:	b084      	sub	sp, #16
 801199a:	af00      	add	r7, sp, #0
 801199c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801199e:	2301      	movs	r3, #1
 80119a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	68db      	ldr	r3, [r3, #12]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d102      	bne.n	80119b0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80119aa:	2300      	movs	r3, #0
 80119ac:	73fb      	strb	r3, [r7, #15]
 80119ae:	e008      	b.n	80119c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	68db      	ldr	r3, [r3, #12]
 80119b4:	2b02      	cmp	r3, #2
 80119b6:	d102      	bne.n	80119be <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80119b8:	2301      	movs	r3, #1
 80119ba:	73fb      	strb	r3, [r7, #15]
 80119bc:	e001      	b.n	80119c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80119be:	f7f4 f869 	bl	8005a94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80119c8:	7bfa      	ldrb	r2, [r7, #15]
 80119ca:	4611      	mov	r1, r2
 80119cc:	4618      	mov	r0, r3
 80119ce:	f7fe fe70 	bl	80106b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80119d8:	4618      	mov	r0, r3
 80119da:	f7fe fe29 	bl	8010630 <USBD_LL_Reset>
}
 80119de:	bf00      	nop
 80119e0:	3710      	adds	r7, #16
 80119e2:	46bd      	mov	sp, r7
 80119e4:	bd80      	pop	{r7, pc}
	...

080119e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b082      	sub	sp, #8
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80119f6:	4618      	mov	r0, r3
 80119f8:	f7fe fe6b 	bl	80106d2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	687a      	ldr	r2, [r7, #4]
 8011a08:	6812      	ldr	r2, [r2, #0]
 8011a0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011a0e:	f043 0301 	orr.w	r3, r3, #1
 8011a12:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	6a1b      	ldr	r3, [r3, #32]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d005      	beq.n	8011a28 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011a1c:	4b04      	ldr	r3, [pc, #16]	; (8011a30 <HAL_PCD_SuspendCallback+0x48>)
 8011a1e:	691b      	ldr	r3, [r3, #16]
 8011a20:	4a03      	ldr	r2, [pc, #12]	; (8011a30 <HAL_PCD_SuspendCallback+0x48>)
 8011a22:	f043 0306 	orr.w	r3, r3, #6
 8011a26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011a28:	bf00      	nop
 8011a2a:	3708      	adds	r7, #8
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	bd80      	pop	{r7, pc}
 8011a30:	e000ed00 	.word	0xe000ed00

08011a34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b082      	sub	sp, #8
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011a42:	4618      	mov	r0, r3
 8011a44:	f7fe fe5a 	bl	80106fc <USBD_LL_Resume>
}
 8011a48:	bf00      	nop
 8011a4a:	3708      	adds	r7, #8
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	bd80      	pop	{r7, pc}

08011a50 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b082      	sub	sp, #8
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
 8011a58:	460b      	mov	r3, r1
 8011a5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011a62:	78fa      	ldrb	r2, [r7, #3]
 8011a64:	4611      	mov	r1, r2
 8011a66:	4618      	mov	r0, r3
 8011a68:	f7fe fe85 	bl	8010776 <USBD_LL_IsoOUTIncomplete>
}
 8011a6c:	bf00      	nop
 8011a6e:	3708      	adds	r7, #8
 8011a70:	46bd      	mov	sp, r7
 8011a72:	bd80      	pop	{r7, pc}

08011a74 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b082      	sub	sp, #8
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
 8011a7c:	460b      	mov	r3, r1
 8011a7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011a86:	78fa      	ldrb	r2, [r7, #3]
 8011a88:	4611      	mov	r1, r2
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f7fe fe66 	bl	801075c <USBD_LL_IsoINIncomplete>
}
 8011a90:	bf00      	nop
 8011a92:	3708      	adds	r7, #8
 8011a94:	46bd      	mov	sp, r7
 8011a96:	bd80      	pop	{r7, pc}

08011a98 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b082      	sub	sp, #8
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	f7fe fe72 	bl	8010790 <USBD_LL_DevConnected>
}
 8011aac:	bf00      	nop
 8011aae:	3708      	adds	r7, #8
 8011ab0:	46bd      	mov	sp, r7
 8011ab2:	bd80      	pop	{r7, pc}

08011ab4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b082      	sub	sp, #8
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	f7fe fe6f 	bl	80107a6 <USBD_LL_DevDisconnected>
}
 8011ac8:	bf00      	nop
 8011aca:	3708      	adds	r7, #8
 8011acc:	46bd      	mov	sp, r7
 8011ace:	bd80      	pop	{r7, pc}

08011ad0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b082      	sub	sp, #8
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	781b      	ldrb	r3, [r3, #0]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d13c      	bne.n	8011b5a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011ae0:	4a20      	ldr	r2, [pc, #128]	; (8011b64 <USBD_LL_Init+0x94>)
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	4a1e      	ldr	r2, [pc, #120]	; (8011b64 <USBD_LL_Init+0x94>)
 8011aec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011af0:	4b1c      	ldr	r3, [pc, #112]	; (8011b64 <USBD_LL_Init+0x94>)
 8011af2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011af6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8011af8:	4b1a      	ldr	r3, [pc, #104]	; (8011b64 <USBD_LL_Init+0x94>)
 8011afa:	2204      	movs	r2, #4
 8011afc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011afe:	4b19      	ldr	r3, [pc, #100]	; (8011b64 <USBD_LL_Init+0x94>)
 8011b00:	2202      	movs	r2, #2
 8011b02:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011b04:	4b17      	ldr	r3, [pc, #92]	; (8011b64 <USBD_LL_Init+0x94>)
 8011b06:	2200      	movs	r2, #0
 8011b08:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011b0a:	4b16      	ldr	r3, [pc, #88]	; (8011b64 <USBD_LL_Init+0x94>)
 8011b0c:	2202      	movs	r2, #2
 8011b0e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011b10:	4b14      	ldr	r3, [pc, #80]	; (8011b64 <USBD_LL_Init+0x94>)
 8011b12:	2200      	movs	r2, #0
 8011b14:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011b16:	4b13      	ldr	r3, [pc, #76]	; (8011b64 <USBD_LL_Init+0x94>)
 8011b18:	2200      	movs	r2, #0
 8011b1a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011b1c:	4b11      	ldr	r3, [pc, #68]	; (8011b64 <USBD_LL_Init+0x94>)
 8011b1e:	2200      	movs	r2, #0
 8011b20:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011b22:	4b10      	ldr	r3, [pc, #64]	; (8011b64 <USBD_LL_Init+0x94>)
 8011b24:	2200      	movs	r2, #0
 8011b26:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011b28:	4b0e      	ldr	r3, [pc, #56]	; (8011b64 <USBD_LL_Init+0x94>)
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011b2e:	480d      	ldr	r0, [pc, #52]	; (8011b64 <USBD_LL_Init+0x94>)
 8011b30:	f7f9 fc23 	bl	800b37a <HAL_PCD_Init>
 8011b34:	4603      	mov	r3, r0
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d001      	beq.n	8011b3e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8011b3a:	f7f3 ffab 	bl	8005a94 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011b3e:	2180      	movs	r1, #128	; 0x80
 8011b40:	4808      	ldr	r0, [pc, #32]	; (8011b64 <USBD_LL_Init+0x94>)
 8011b42:	f7fa fd80 	bl	800c646 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011b46:	2240      	movs	r2, #64	; 0x40
 8011b48:	2100      	movs	r1, #0
 8011b4a:	4806      	ldr	r0, [pc, #24]	; (8011b64 <USBD_LL_Init+0x94>)
 8011b4c:	f7fa fd34 	bl	800c5b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011b50:	2280      	movs	r2, #128	; 0x80
 8011b52:	2101      	movs	r1, #1
 8011b54:	4803      	ldr	r0, [pc, #12]	; (8011b64 <USBD_LL_Init+0x94>)
 8011b56:	f7fa fd2f 	bl	800c5b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011b5a:	2300      	movs	r3, #0
}
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	3708      	adds	r7, #8
 8011b60:	46bd      	mov	sp, r7
 8011b62:	bd80      	pop	{r7, pc}
 8011b64:	20005300 	.word	0x20005300

08011b68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b084      	sub	sp, #16
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b70:	2300      	movs	r3, #0
 8011b72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b74:	2300      	movs	r3, #0
 8011b76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011b7e:	4618      	mov	r0, r3
 8011b80:	f7f9 fd18 	bl	800b5b4 <HAL_PCD_Start>
 8011b84:	4603      	mov	r3, r0
 8011b86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b88:	7bfb      	ldrb	r3, [r7, #15]
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	f000 f92a 	bl	8011de4 <USBD_Get_USB_Status>
 8011b90:	4603      	mov	r3, r0
 8011b92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b94:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b96:	4618      	mov	r0, r3
 8011b98:	3710      	adds	r7, #16
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	bd80      	pop	{r7, pc}

08011b9e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011b9e:	b580      	push	{r7, lr}
 8011ba0:	b084      	sub	sp, #16
 8011ba2:	af00      	add	r7, sp, #0
 8011ba4:	6078      	str	r0, [r7, #4]
 8011ba6:	4608      	mov	r0, r1
 8011ba8:	4611      	mov	r1, r2
 8011baa:	461a      	mov	r2, r3
 8011bac:	4603      	mov	r3, r0
 8011bae:	70fb      	strb	r3, [r7, #3]
 8011bb0:	460b      	mov	r3, r1
 8011bb2:	70bb      	strb	r3, [r7, #2]
 8011bb4:	4613      	mov	r3, r2
 8011bb6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bb8:	2300      	movs	r3, #0
 8011bba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011bc6:	78bb      	ldrb	r3, [r7, #2]
 8011bc8:	883a      	ldrh	r2, [r7, #0]
 8011bca:	78f9      	ldrb	r1, [r7, #3]
 8011bcc:	f7fa f8fc 	bl	800bdc8 <HAL_PCD_EP_Open>
 8011bd0:	4603      	mov	r3, r0
 8011bd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011bd4:	7bfb      	ldrb	r3, [r7, #15]
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	f000 f904 	bl	8011de4 <USBD_Get_USB_Status>
 8011bdc:	4603      	mov	r3, r0
 8011bde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011be0:	7bbb      	ldrb	r3, [r7, #14]
}
 8011be2:	4618      	mov	r0, r3
 8011be4:	3710      	adds	r7, #16
 8011be6:	46bd      	mov	sp, r7
 8011be8:	bd80      	pop	{r7, pc}

08011bea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011bea:	b580      	push	{r7, lr}
 8011bec:	b084      	sub	sp, #16
 8011bee:	af00      	add	r7, sp, #0
 8011bf0:	6078      	str	r0, [r7, #4]
 8011bf2:	460b      	mov	r3, r1
 8011bf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011c04:	78fa      	ldrb	r2, [r7, #3]
 8011c06:	4611      	mov	r1, r2
 8011c08:	4618      	mov	r0, r3
 8011c0a:	f7fa f945 	bl	800be98 <HAL_PCD_EP_Close>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c12:	7bfb      	ldrb	r3, [r7, #15]
 8011c14:	4618      	mov	r0, r3
 8011c16:	f000 f8e5 	bl	8011de4 <USBD_Get_USB_Status>
 8011c1a:	4603      	mov	r3, r0
 8011c1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c20:	4618      	mov	r0, r3
 8011c22:	3710      	adds	r7, #16
 8011c24:	46bd      	mov	sp, r7
 8011c26:	bd80      	pop	{r7, pc}

08011c28 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b084      	sub	sp, #16
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
 8011c30:	460b      	mov	r3, r1
 8011c32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c34:	2300      	movs	r3, #0
 8011c36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c38:	2300      	movs	r3, #0
 8011c3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011c42:	78fa      	ldrb	r2, [r7, #3]
 8011c44:	4611      	mov	r1, r2
 8011c46:	4618      	mov	r0, r3
 8011c48:	f7fa fa1d 	bl	800c086 <HAL_PCD_EP_SetStall>
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c50:	7bfb      	ldrb	r3, [r7, #15]
 8011c52:	4618      	mov	r0, r3
 8011c54:	f000 f8c6 	bl	8011de4 <USBD_Get_USB_Status>
 8011c58:	4603      	mov	r3, r0
 8011c5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c5e:	4618      	mov	r0, r3
 8011c60:	3710      	adds	r7, #16
 8011c62:	46bd      	mov	sp, r7
 8011c64:	bd80      	pop	{r7, pc}

08011c66 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c66:	b580      	push	{r7, lr}
 8011c68:	b084      	sub	sp, #16
 8011c6a:	af00      	add	r7, sp, #0
 8011c6c:	6078      	str	r0, [r7, #4]
 8011c6e:	460b      	mov	r3, r1
 8011c70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c72:	2300      	movs	r3, #0
 8011c74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c76:	2300      	movs	r3, #0
 8011c78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011c80:	78fa      	ldrb	r2, [r7, #3]
 8011c82:	4611      	mov	r1, r2
 8011c84:	4618      	mov	r0, r3
 8011c86:	f7fa fa62 	bl	800c14e <HAL_PCD_EP_ClrStall>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c8e:	7bfb      	ldrb	r3, [r7, #15]
 8011c90:	4618      	mov	r0, r3
 8011c92:	f000 f8a7 	bl	8011de4 <USBD_Get_USB_Status>
 8011c96:	4603      	mov	r3, r0
 8011c98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	3710      	adds	r7, #16
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	bd80      	pop	{r7, pc}

08011ca4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011ca4:	b480      	push	{r7}
 8011ca6:	b085      	sub	sp, #20
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6078      	str	r0, [r7, #4]
 8011cac:	460b      	mov	r3, r1
 8011cae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011cb6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011cb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	da0b      	bge.n	8011cd8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011cc0:	78fb      	ldrb	r3, [r7, #3]
 8011cc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011cc6:	68f9      	ldr	r1, [r7, #12]
 8011cc8:	4613      	mov	r3, r2
 8011cca:	00db      	lsls	r3, r3, #3
 8011ccc:	1a9b      	subs	r3, r3, r2
 8011cce:	009b      	lsls	r3, r3, #2
 8011cd0:	440b      	add	r3, r1
 8011cd2:	333e      	adds	r3, #62	; 0x3e
 8011cd4:	781b      	ldrb	r3, [r3, #0]
 8011cd6:	e00b      	b.n	8011cf0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011cd8:	78fb      	ldrb	r3, [r7, #3]
 8011cda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011cde:	68f9      	ldr	r1, [r7, #12]
 8011ce0:	4613      	mov	r3, r2
 8011ce2:	00db      	lsls	r3, r3, #3
 8011ce4:	1a9b      	subs	r3, r3, r2
 8011ce6:	009b      	lsls	r3, r3, #2
 8011ce8:	440b      	add	r3, r1
 8011cea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011cee:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	3714      	adds	r7, #20
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfa:	4770      	bx	lr

08011cfc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b084      	sub	sp, #16
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	6078      	str	r0, [r7, #4]
 8011d04:	460b      	mov	r3, r1
 8011d06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d08:	2300      	movs	r3, #0
 8011d0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011d16:	78fa      	ldrb	r2, [r7, #3]
 8011d18:	4611      	mov	r1, r2
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	f7fa f82f 	bl	800bd7e <HAL_PCD_SetAddress>
 8011d20:	4603      	mov	r3, r0
 8011d22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d24:	7bfb      	ldrb	r3, [r7, #15]
 8011d26:	4618      	mov	r0, r3
 8011d28:	f000 f85c 	bl	8011de4 <USBD_Get_USB_Status>
 8011d2c:	4603      	mov	r3, r0
 8011d2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d30:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d32:	4618      	mov	r0, r3
 8011d34:	3710      	adds	r7, #16
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bd80      	pop	{r7, pc}

08011d3a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011d3a:	b580      	push	{r7, lr}
 8011d3c:	b086      	sub	sp, #24
 8011d3e:	af00      	add	r7, sp, #0
 8011d40:	60f8      	str	r0, [r7, #12]
 8011d42:	607a      	str	r2, [r7, #4]
 8011d44:	603b      	str	r3, [r7, #0]
 8011d46:	460b      	mov	r3, r1
 8011d48:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d4e:	2300      	movs	r3, #0
 8011d50:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011d58:	7af9      	ldrb	r1, [r7, #11]
 8011d5a:	683b      	ldr	r3, [r7, #0]
 8011d5c:	687a      	ldr	r2, [r7, #4]
 8011d5e:	f7fa f948 	bl	800bff2 <HAL_PCD_EP_Transmit>
 8011d62:	4603      	mov	r3, r0
 8011d64:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d66:	7dfb      	ldrb	r3, [r7, #23]
 8011d68:	4618      	mov	r0, r3
 8011d6a:	f000 f83b 	bl	8011de4 <USBD_Get_USB_Status>
 8011d6e:	4603      	mov	r3, r0
 8011d70:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011d72:	7dbb      	ldrb	r3, [r7, #22]
}
 8011d74:	4618      	mov	r0, r3
 8011d76:	3718      	adds	r7, #24
 8011d78:	46bd      	mov	sp, r7
 8011d7a:	bd80      	pop	{r7, pc}

08011d7c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b086      	sub	sp, #24
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	60f8      	str	r0, [r7, #12]
 8011d84:	607a      	str	r2, [r7, #4]
 8011d86:	603b      	str	r3, [r7, #0]
 8011d88:	460b      	mov	r3, r1
 8011d8a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d90:	2300      	movs	r3, #0
 8011d92:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011d9a:	7af9      	ldrb	r1, [r7, #11]
 8011d9c:	683b      	ldr	r3, [r7, #0]
 8011d9e:	687a      	ldr	r2, [r7, #4]
 8011da0:	f7fa f8c4 	bl	800bf2c <HAL_PCD_EP_Receive>
 8011da4:	4603      	mov	r3, r0
 8011da6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011da8:	7dfb      	ldrb	r3, [r7, #23]
 8011daa:	4618      	mov	r0, r3
 8011dac:	f000 f81a 	bl	8011de4 <USBD_Get_USB_Status>
 8011db0:	4603      	mov	r3, r0
 8011db2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011db4:	7dbb      	ldrb	r3, [r7, #22]
}
 8011db6:	4618      	mov	r0, r3
 8011db8:	3718      	adds	r7, #24
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	bd80      	pop	{r7, pc}

08011dbe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011dbe:	b580      	push	{r7, lr}
 8011dc0:	b082      	sub	sp, #8
 8011dc2:	af00      	add	r7, sp, #0
 8011dc4:	6078      	str	r0, [r7, #4]
 8011dc6:	460b      	mov	r3, r1
 8011dc8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011dd0:	78fa      	ldrb	r2, [r7, #3]
 8011dd2:	4611      	mov	r1, r2
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	f7fa f8f4 	bl	800bfc2 <HAL_PCD_EP_GetRxCount>
 8011dda:	4603      	mov	r3, r0
}
 8011ddc:	4618      	mov	r0, r3
 8011dde:	3708      	adds	r7, #8
 8011de0:	46bd      	mov	sp, r7
 8011de2:	bd80      	pop	{r7, pc}

08011de4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011de4:	b480      	push	{r7}
 8011de6:	b085      	sub	sp, #20
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	4603      	mov	r3, r0
 8011dec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011dee:	2300      	movs	r3, #0
 8011df0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011df2:	79fb      	ldrb	r3, [r7, #7]
 8011df4:	2b03      	cmp	r3, #3
 8011df6:	d817      	bhi.n	8011e28 <USBD_Get_USB_Status+0x44>
 8011df8:	a201      	add	r2, pc, #4	; (adr r2, 8011e00 <USBD_Get_USB_Status+0x1c>)
 8011dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dfe:	bf00      	nop
 8011e00:	08011e11 	.word	0x08011e11
 8011e04:	08011e17 	.word	0x08011e17
 8011e08:	08011e1d 	.word	0x08011e1d
 8011e0c:	08011e23 	.word	0x08011e23
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011e10:	2300      	movs	r3, #0
 8011e12:	73fb      	strb	r3, [r7, #15]
    break;
 8011e14:	e00b      	b.n	8011e2e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011e16:	2303      	movs	r3, #3
 8011e18:	73fb      	strb	r3, [r7, #15]
    break;
 8011e1a:	e008      	b.n	8011e2e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011e1c:	2301      	movs	r3, #1
 8011e1e:	73fb      	strb	r3, [r7, #15]
    break;
 8011e20:	e005      	b.n	8011e2e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011e22:	2303      	movs	r3, #3
 8011e24:	73fb      	strb	r3, [r7, #15]
    break;
 8011e26:	e002      	b.n	8011e2e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011e28:	2303      	movs	r3, #3
 8011e2a:	73fb      	strb	r3, [r7, #15]
    break;
 8011e2c:	bf00      	nop
  }
  return usb_status;
 8011e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e30:	4618      	mov	r0, r3
 8011e32:	3714      	adds	r7, #20
 8011e34:	46bd      	mov	sp, r7
 8011e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3a:	4770      	bx	lr
 8011e3c:	0000      	movs	r0, r0
	...

08011e40 <cos>:
 8011e40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011e42:	ec51 0b10 	vmov	r0, r1, d0
 8011e46:	4a1e      	ldr	r2, [pc, #120]	; (8011ec0 <cos+0x80>)
 8011e48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011e4c:	4293      	cmp	r3, r2
 8011e4e:	dc06      	bgt.n	8011e5e <cos+0x1e>
 8011e50:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8011eb8 <cos+0x78>
 8011e54:	f001 fe14 	bl	8013a80 <__kernel_cos>
 8011e58:	ec51 0b10 	vmov	r0, r1, d0
 8011e5c:	e007      	b.n	8011e6e <cos+0x2e>
 8011e5e:	4a19      	ldr	r2, [pc, #100]	; (8011ec4 <cos+0x84>)
 8011e60:	4293      	cmp	r3, r2
 8011e62:	dd09      	ble.n	8011e78 <cos+0x38>
 8011e64:	ee10 2a10 	vmov	r2, s0
 8011e68:	460b      	mov	r3, r1
 8011e6a:	f7ee fa0d 	bl	8000288 <__aeabi_dsub>
 8011e6e:	ec41 0b10 	vmov	d0, r0, r1
 8011e72:	b005      	add	sp, #20
 8011e74:	f85d fb04 	ldr.w	pc, [sp], #4
 8011e78:	4668      	mov	r0, sp
 8011e7a:	f001 fab1 	bl	80133e0 <__ieee754_rem_pio2>
 8011e7e:	f000 0003 	and.w	r0, r0, #3
 8011e82:	2801      	cmp	r0, #1
 8011e84:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011e88:	ed9d 0b00 	vldr	d0, [sp]
 8011e8c:	d007      	beq.n	8011e9e <cos+0x5e>
 8011e8e:	2802      	cmp	r0, #2
 8011e90:	d00e      	beq.n	8011eb0 <cos+0x70>
 8011e92:	2800      	cmp	r0, #0
 8011e94:	d0de      	beq.n	8011e54 <cos+0x14>
 8011e96:	2001      	movs	r0, #1
 8011e98:	f002 f9fa 	bl	8014290 <__kernel_sin>
 8011e9c:	e7dc      	b.n	8011e58 <cos+0x18>
 8011e9e:	f002 f9f7 	bl	8014290 <__kernel_sin>
 8011ea2:	ec53 2b10 	vmov	r2, r3, d0
 8011ea6:	ee10 0a10 	vmov	r0, s0
 8011eaa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011eae:	e7de      	b.n	8011e6e <cos+0x2e>
 8011eb0:	f001 fde6 	bl	8013a80 <__kernel_cos>
 8011eb4:	e7f5      	b.n	8011ea2 <cos+0x62>
 8011eb6:	bf00      	nop
	...
 8011ec0:	3fe921fb 	.word	0x3fe921fb
 8011ec4:	7fefffff 	.word	0x7fefffff

08011ec8 <floor>:
 8011ec8:	ec51 0b10 	vmov	r0, r1, d0
 8011ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ed0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8011ed4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8011ed8:	2e13      	cmp	r6, #19
 8011eda:	460c      	mov	r4, r1
 8011edc:	ee10 5a10 	vmov	r5, s0
 8011ee0:	4680      	mov	r8, r0
 8011ee2:	dc34      	bgt.n	8011f4e <floor+0x86>
 8011ee4:	2e00      	cmp	r6, #0
 8011ee6:	da16      	bge.n	8011f16 <floor+0x4e>
 8011ee8:	a335      	add	r3, pc, #212	; (adr r3, 8011fc0 <floor+0xf8>)
 8011eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eee:	f7ee f9cd 	bl	800028c <__adddf3>
 8011ef2:	2200      	movs	r2, #0
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	f7ee fe0f 	bl	8000b18 <__aeabi_dcmpgt>
 8011efa:	b148      	cbz	r0, 8011f10 <floor+0x48>
 8011efc:	2c00      	cmp	r4, #0
 8011efe:	da59      	bge.n	8011fb4 <floor+0xec>
 8011f00:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8011f04:	4a30      	ldr	r2, [pc, #192]	; (8011fc8 <floor+0x100>)
 8011f06:	432b      	orrs	r3, r5
 8011f08:	2500      	movs	r5, #0
 8011f0a:	42ab      	cmp	r3, r5
 8011f0c:	bf18      	it	ne
 8011f0e:	4614      	movne	r4, r2
 8011f10:	4621      	mov	r1, r4
 8011f12:	4628      	mov	r0, r5
 8011f14:	e025      	b.n	8011f62 <floor+0x9a>
 8011f16:	4f2d      	ldr	r7, [pc, #180]	; (8011fcc <floor+0x104>)
 8011f18:	4137      	asrs	r7, r6
 8011f1a:	ea01 0307 	and.w	r3, r1, r7
 8011f1e:	4303      	orrs	r3, r0
 8011f20:	d01f      	beq.n	8011f62 <floor+0x9a>
 8011f22:	a327      	add	r3, pc, #156	; (adr r3, 8011fc0 <floor+0xf8>)
 8011f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f28:	f7ee f9b0 	bl	800028c <__adddf3>
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	2300      	movs	r3, #0
 8011f30:	f7ee fdf2 	bl	8000b18 <__aeabi_dcmpgt>
 8011f34:	2800      	cmp	r0, #0
 8011f36:	d0eb      	beq.n	8011f10 <floor+0x48>
 8011f38:	2c00      	cmp	r4, #0
 8011f3a:	bfbe      	ittt	lt
 8011f3c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011f40:	fa43 f606 	asrlt.w	r6, r3, r6
 8011f44:	19a4      	addlt	r4, r4, r6
 8011f46:	ea24 0407 	bic.w	r4, r4, r7
 8011f4a:	2500      	movs	r5, #0
 8011f4c:	e7e0      	b.n	8011f10 <floor+0x48>
 8011f4e:	2e33      	cmp	r6, #51	; 0x33
 8011f50:	dd0b      	ble.n	8011f6a <floor+0xa2>
 8011f52:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011f56:	d104      	bne.n	8011f62 <floor+0x9a>
 8011f58:	ee10 2a10 	vmov	r2, s0
 8011f5c:	460b      	mov	r3, r1
 8011f5e:	f7ee f995 	bl	800028c <__adddf3>
 8011f62:	ec41 0b10 	vmov	d0, r0, r1
 8011f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f6a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8011f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8011f72:	fa23 f707 	lsr.w	r7, r3, r7
 8011f76:	4207      	tst	r7, r0
 8011f78:	d0f3      	beq.n	8011f62 <floor+0x9a>
 8011f7a:	a311      	add	r3, pc, #68	; (adr r3, 8011fc0 <floor+0xf8>)
 8011f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f80:	f7ee f984 	bl	800028c <__adddf3>
 8011f84:	2200      	movs	r2, #0
 8011f86:	2300      	movs	r3, #0
 8011f88:	f7ee fdc6 	bl	8000b18 <__aeabi_dcmpgt>
 8011f8c:	2800      	cmp	r0, #0
 8011f8e:	d0bf      	beq.n	8011f10 <floor+0x48>
 8011f90:	2c00      	cmp	r4, #0
 8011f92:	da02      	bge.n	8011f9a <floor+0xd2>
 8011f94:	2e14      	cmp	r6, #20
 8011f96:	d103      	bne.n	8011fa0 <floor+0xd8>
 8011f98:	3401      	adds	r4, #1
 8011f9a:	ea25 0507 	bic.w	r5, r5, r7
 8011f9e:	e7b7      	b.n	8011f10 <floor+0x48>
 8011fa0:	2301      	movs	r3, #1
 8011fa2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011fa6:	fa03 f606 	lsl.w	r6, r3, r6
 8011faa:	4435      	add	r5, r6
 8011fac:	4545      	cmp	r5, r8
 8011fae:	bf38      	it	cc
 8011fb0:	18e4      	addcc	r4, r4, r3
 8011fb2:	e7f2      	b.n	8011f9a <floor+0xd2>
 8011fb4:	2500      	movs	r5, #0
 8011fb6:	462c      	mov	r4, r5
 8011fb8:	e7aa      	b.n	8011f10 <floor+0x48>
 8011fba:	bf00      	nop
 8011fbc:	f3af 8000 	nop.w
 8011fc0:	8800759c 	.word	0x8800759c
 8011fc4:	7e37e43c 	.word	0x7e37e43c
 8011fc8:	bff00000 	.word	0xbff00000
 8011fcc:	000fffff 	.word	0x000fffff

08011fd0 <round>:
 8011fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fd2:	ec57 6b10 	vmov	r6, r7, d0
 8011fd6:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8011fda:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8011fde:	2c13      	cmp	r4, #19
 8011fe0:	463b      	mov	r3, r7
 8011fe2:	463d      	mov	r5, r7
 8011fe4:	dc17      	bgt.n	8012016 <round+0x46>
 8011fe6:	2c00      	cmp	r4, #0
 8011fe8:	da09      	bge.n	8011ffe <round+0x2e>
 8011fea:	3401      	adds	r4, #1
 8011fec:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8011ff0:	d103      	bne.n	8011ffa <round+0x2a>
 8011ff2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8011ff6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011ffa:	2100      	movs	r1, #0
 8011ffc:	e02c      	b.n	8012058 <round+0x88>
 8011ffe:	4a18      	ldr	r2, [pc, #96]	; (8012060 <round+0x90>)
 8012000:	4122      	asrs	r2, r4
 8012002:	4217      	tst	r7, r2
 8012004:	d100      	bne.n	8012008 <round+0x38>
 8012006:	b19e      	cbz	r6, 8012030 <round+0x60>
 8012008:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801200c:	4123      	asrs	r3, r4
 801200e:	442b      	add	r3, r5
 8012010:	ea23 0302 	bic.w	r3, r3, r2
 8012014:	e7f1      	b.n	8011ffa <round+0x2a>
 8012016:	2c33      	cmp	r4, #51	; 0x33
 8012018:	dd0d      	ble.n	8012036 <round+0x66>
 801201a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801201e:	d107      	bne.n	8012030 <round+0x60>
 8012020:	4630      	mov	r0, r6
 8012022:	4639      	mov	r1, r7
 8012024:	ee10 2a10 	vmov	r2, s0
 8012028:	f7ee f930 	bl	800028c <__adddf3>
 801202c:	4606      	mov	r6, r0
 801202e:	460f      	mov	r7, r1
 8012030:	ec47 6b10 	vmov	d0, r6, r7
 8012034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012036:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 801203a:	f04f 30ff 	mov.w	r0, #4294967295
 801203e:	40d0      	lsrs	r0, r2
 8012040:	4206      	tst	r6, r0
 8012042:	d0f5      	beq.n	8012030 <round+0x60>
 8012044:	2201      	movs	r2, #1
 8012046:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801204a:	fa02 f404 	lsl.w	r4, r2, r4
 801204e:	1931      	adds	r1, r6, r4
 8012050:	bf28      	it	cs
 8012052:	189b      	addcs	r3, r3, r2
 8012054:	ea21 0100 	bic.w	r1, r1, r0
 8012058:	461f      	mov	r7, r3
 801205a:	460e      	mov	r6, r1
 801205c:	e7e8      	b.n	8012030 <round+0x60>
 801205e:	bf00      	nop
 8012060:	000fffff 	.word	0x000fffff
 8012064:	00000000 	.word	0x00000000

08012068 <sin>:
 8012068:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801206a:	ec51 0b10 	vmov	r0, r1, d0
 801206e:	4a20      	ldr	r2, [pc, #128]	; (80120f0 <sin+0x88>)
 8012070:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012074:	4293      	cmp	r3, r2
 8012076:	dc07      	bgt.n	8012088 <sin+0x20>
 8012078:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80120e8 <sin+0x80>
 801207c:	2000      	movs	r0, #0
 801207e:	f002 f907 	bl	8014290 <__kernel_sin>
 8012082:	ec51 0b10 	vmov	r0, r1, d0
 8012086:	e007      	b.n	8012098 <sin+0x30>
 8012088:	4a1a      	ldr	r2, [pc, #104]	; (80120f4 <sin+0x8c>)
 801208a:	4293      	cmp	r3, r2
 801208c:	dd09      	ble.n	80120a2 <sin+0x3a>
 801208e:	ee10 2a10 	vmov	r2, s0
 8012092:	460b      	mov	r3, r1
 8012094:	f7ee f8f8 	bl	8000288 <__aeabi_dsub>
 8012098:	ec41 0b10 	vmov	d0, r0, r1
 801209c:	b005      	add	sp, #20
 801209e:	f85d fb04 	ldr.w	pc, [sp], #4
 80120a2:	4668      	mov	r0, sp
 80120a4:	f001 f99c 	bl	80133e0 <__ieee754_rem_pio2>
 80120a8:	f000 0003 	and.w	r0, r0, #3
 80120ac:	2801      	cmp	r0, #1
 80120ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80120b2:	ed9d 0b00 	vldr	d0, [sp]
 80120b6:	d004      	beq.n	80120c2 <sin+0x5a>
 80120b8:	2802      	cmp	r0, #2
 80120ba:	d005      	beq.n	80120c8 <sin+0x60>
 80120bc:	b970      	cbnz	r0, 80120dc <sin+0x74>
 80120be:	2001      	movs	r0, #1
 80120c0:	e7dd      	b.n	801207e <sin+0x16>
 80120c2:	f001 fcdd 	bl	8013a80 <__kernel_cos>
 80120c6:	e7dc      	b.n	8012082 <sin+0x1a>
 80120c8:	2001      	movs	r0, #1
 80120ca:	f002 f8e1 	bl	8014290 <__kernel_sin>
 80120ce:	ec53 2b10 	vmov	r2, r3, d0
 80120d2:	ee10 0a10 	vmov	r0, s0
 80120d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80120da:	e7dd      	b.n	8012098 <sin+0x30>
 80120dc:	f001 fcd0 	bl	8013a80 <__kernel_cos>
 80120e0:	e7f5      	b.n	80120ce <sin+0x66>
 80120e2:	bf00      	nop
 80120e4:	f3af 8000 	nop.w
	...
 80120f0:	3fe921fb 	.word	0x3fe921fb
 80120f4:	7fefffff 	.word	0x7fefffff

080120f8 <tan>:
 80120f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80120fa:	ec51 0b10 	vmov	r0, r1, d0
 80120fe:	4a14      	ldr	r2, [pc, #80]	; (8012150 <tan+0x58>)
 8012100:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012104:	4293      	cmp	r3, r2
 8012106:	dc05      	bgt.n	8012114 <tan+0x1c>
 8012108:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8012148 <tan+0x50>
 801210c:	2001      	movs	r0, #1
 801210e:	f002 f97b 	bl	8014408 <__kernel_tan>
 8012112:	e009      	b.n	8012128 <tan+0x30>
 8012114:	4a0f      	ldr	r2, [pc, #60]	; (8012154 <tan+0x5c>)
 8012116:	4293      	cmp	r3, r2
 8012118:	dd09      	ble.n	801212e <tan+0x36>
 801211a:	ee10 2a10 	vmov	r2, s0
 801211e:	460b      	mov	r3, r1
 8012120:	f7ee f8b2 	bl	8000288 <__aeabi_dsub>
 8012124:	ec41 0b10 	vmov	d0, r0, r1
 8012128:	b005      	add	sp, #20
 801212a:	f85d fb04 	ldr.w	pc, [sp], #4
 801212e:	4668      	mov	r0, sp
 8012130:	f001 f956 	bl	80133e0 <__ieee754_rem_pio2>
 8012134:	0040      	lsls	r0, r0, #1
 8012136:	f000 0002 	and.w	r0, r0, #2
 801213a:	f1c0 0001 	rsb	r0, r0, #1
 801213e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012142:	ed9d 0b00 	vldr	d0, [sp]
 8012146:	e7e2      	b.n	801210e <tan+0x16>
	...
 8012150:	3fe921fb 	.word	0x3fe921fb
 8012154:	7fefffff 	.word	0x7fefffff

08012158 <asin>:
 8012158:	b5f0      	push	{r4, r5, r6, r7, lr}
 801215a:	ed2d 8b02 	vpush	{d8}
 801215e:	4e26      	ldr	r6, [pc, #152]	; (80121f8 <asin+0xa0>)
 8012160:	b08b      	sub	sp, #44	; 0x2c
 8012162:	ec55 4b10 	vmov	r4, r5, d0
 8012166:	f000 fa1b 	bl	80125a0 <__ieee754_asin>
 801216a:	f996 3000 	ldrsb.w	r3, [r6]
 801216e:	eeb0 8a40 	vmov.f32	s16, s0
 8012172:	eef0 8a60 	vmov.f32	s17, s1
 8012176:	3301      	adds	r3, #1
 8012178:	d036      	beq.n	80121e8 <asin+0x90>
 801217a:	4622      	mov	r2, r4
 801217c:	462b      	mov	r3, r5
 801217e:	4620      	mov	r0, r4
 8012180:	4629      	mov	r1, r5
 8012182:	f7ee fcd3 	bl	8000b2c <__aeabi_dcmpun>
 8012186:	4607      	mov	r7, r0
 8012188:	bb70      	cbnz	r0, 80121e8 <asin+0x90>
 801218a:	ec45 4b10 	vmov	d0, r4, r5
 801218e:	f002 fb07 	bl	80147a0 <fabs>
 8012192:	2200      	movs	r2, #0
 8012194:	4b19      	ldr	r3, [pc, #100]	; (80121fc <asin+0xa4>)
 8012196:	ec51 0b10 	vmov	r0, r1, d0
 801219a:	f7ee fcbd 	bl	8000b18 <__aeabi_dcmpgt>
 801219e:	b318      	cbz	r0, 80121e8 <asin+0x90>
 80121a0:	2301      	movs	r3, #1
 80121a2:	9300      	str	r3, [sp, #0]
 80121a4:	4816      	ldr	r0, [pc, #88]	; (8012200 <asin+0xa8>)
 80121a6:	4b17      	ldr	r3, [pc, #92]	; (8012204 <asin+0xac>)
 80121a8:	9301      	str	r3, [sp, #4]
 80121aa:	9708      	str	r7, [sp, #32]
 80121ac:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80121b0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80121b4:	f002 fb08 	bl	80147c8 <nan>
 80121b8:	f996 3000 	ldrsb.w	r3, [r6]
 80121bc:	2b02      	cmp	r3, #2
 80121be:	ed8d 0b06 	vstr	d0, [sp, #24]
 80121c2:	d104      	bne.n	80121ce <asin+0x76>
 80121c4:	f002 fcec 	bl	8014ba0 <__errno>
 80121c8:	2321      	movs	r3, #33	; 0x21
 80121ca:	6003      	str	r3, [r0, #0]
 80121cc:	e004      	b.n	80121d8 <asin+0x80>
 80121ce:	4668      	mov	r0, sp
 80121d0:	f002 faf7 	bl	80147c2 <matherr>
 80121d4:	2800      	cmp	r0, #0
 80121d6:	d0f5      	beq.n	80121c4 <asin+0x6c>
 80121d8:	9b08      	ldr	r3, [sp, #32]
 80121da:	b11b      	cbz	r3, 80121e4 <asin+0x8c>
 80121dc:	f002 fce0 	bl	8014ba0 <__errno>
 80121e0:	9b08      	ldr	r3, [sp, #32]
 80121e2:	6003      	str	r3, [r0, #0]
 80121e4:	ed9d 8b06 	vldr	d8, [sp, #24]
 80121e8:	eeb0 0a48 	vmov.f32	s0, s16
 80121ec:	eef0 0a68 	vmov.f32	s1, s17
 80121f0:	b00b      	add	sp, #44	; 0x2c
 80121f2:	ecbd 8b02 	vpop	{d8}
 80121f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121f8:	20000206 	.word	0x20000206
 80121fc:	3ff00000 	.word	0x3ff00000
 8012200:	08015977 	.word	0x08015977
 8012204:	080156a4 	.word	0x080156a4

08012208 <pow>:
 8012208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801220c:	ed2d 8b04 	vpush	{d8-d9}
 8012210:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80124e4 <pow+0x2dc>
 8012214:	b08d      	sub	sp, #52	; 0x34
 8012216:	ec57 6b10 	vmov	r6, r7, d0
 801221a:	ec55 4b11 	vmov	r4, r5, d1
 801221e:	f000 fbcf 	bl	80129c0 <__ieee754_pow>
 8012222:	f999 3000 	ldrsb.w	r3, [r9]
 8012226:	9300      	str	r3, [sp, #0]
 8012228:	3301      	adds	r3, #1
 801222a:	eeb0 8a40 	vmov.f32	s16, s0
 801222e:	eef0 8a60 	vmov.f32	s17, s1
 8012232:	46c8      	mov	r8, r9
 8012234:	d05f      	beq.n	80122f6 <pow+0xee>
 8012236:	4622      	mov	r2, r4
 8012238:	462b      	mov	r3, r5
 801223a:	4620      	mov	r0, r4
 801223c:	4629      	mov	r1, r5
 801223e:	f7ee fc75 	bl	8000b2c <__aeabi_dcmpun>
 8012242:	4683      	mov	fp, r0
 8012244:	2800      	cmp	r0, #0
 8012246:	d156      	bne.n	80122f6 <pow+0xee>
 8012248:	4632      	mov	r2, r6
 801224a:	463b      	mov	r3, r7
 801224c:	4630      	mov	r0, r6
 801224e:	4639      	mov	r1, r7
 8012250:	f7ee fc6c 	bl	8000b2c <__aeabi_dcmpun>
 8012254:	9001      	str	r0, [sp, #4]
 8012256:	b1e8      	cbz	r0, 8012294 <pow+0x8c>
 8012258:	2200      	movs	r2, #0
 801225a:	2300      	movs	r3, #0
 801225c:	4620      	mov	r0, r4
 801225e:	4629      	mov	r1, r5
 8012260:	f7ee fc32 	bl	8000ac8 <__aeabi_dcmpeq>
 8012264:	2800      	cmp	r0, #0
 8012266:	d046      	beq.n	80122f6 <pow+0xee>
 8012268:	2301      	movs	r3, #1
 801226a:	9302      	str	r3, [sp, #8]
 801226c:	4b96      	ldr	r3, [pc, #600]	; (80124c8 <pow+0x2c0>)
 801226e:	9303      	str	r3, [sp, #12]
 8012270:	4b96      	ldr	r3, [pc, #600]	; (80124cc <pow+0x2c4>)
 8012272:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8012276:	2200      	movs	r2, #0
 8012278:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801227c:	9b00      	ldr	r3, [sp, #0]
 801227e:	2b02      	cmp	r3, #2
 8012280:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012284:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012288:	d033      	beq.n	80122f2 <pow+0xea>
 801228a:	a802      	add	r0, sp, #8
 801228c:	f002 fa99 	bl	80147c2 <matherr>
 8012290:	bb48      	cbnz	r0, 80122e6 <pow+0xde>
 8012292:	e05d      	b.n	8012350 <pow+0x148>
 8012294:	f04f 0a00 	mov.w	sl, #0
 8012298:	f04f 0b00 	mov.w	fp, #0
 801229c:	4652      	mov	r2, sl
 801229e:	465b      	mov	r3, fp
 80122a0:	4630      	mov	r0, r6
 80122a2:	4639      	mov	r1, r7
 80122a4:	f7ee fc10 	bl	8000ac8 <__aeabi_dcmpeq>
 80122a8:	ec4b ab19 	vmov	d9, sl, fp
 80122ac:	2800      	cmp	r0, #0
 80122ae:	d054      	beq.n	801235a <pow+0x152>
 80122b0:	4652      	mov	r2, sl
 80122b2:	465b      	mov	r3, fp
 80122b4:	4620      	mov	r0, r4
 80122b6:	4629      	mov	r1, r5
 80122b8:	f7ee fc06 	bl	8000ac8 <__aeabi_dcmpeq>
 80122bc:	4680      	mov	r8, r0
 80122be:	b318      	cbz	r0, 8012308 <pow+0x100>
 80122c0:	2301      	movs	r3, #1
 80122c2:	9302      	str	r3, [sp, #8]
 80122c4:	4b80      	ldr	r3, [pc, #512]	; (80124c8 <pow+0x2c0>)
 80122c6:	9303      	str	r3, [sp, #12]
 80122c8:	9b01      	ldr	r3, [sp, #4]
 80122ca:	930a      	str	r3, [sp, #40]	; 0x28
 80122cc:	9b00      	ldr	r3, [sp, #0]
 80122ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80122d2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80122d6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d0d5      	beq.n	801228a <pow+0x82>
 80122de:	4b7b      	ldr	r3, [pc, #492]	; (80124cc <pow+0x2c4>)
 80122e0:	2200      	movs	r2, #0
 80122e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80122e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122e8:	b11b      	cbz	r3, 80122f2 <pow+0xea>
 80122ea:	f002 fc59 	bl	8014ba0 <__errno>
 80122ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122f0:	6003      	str	r3, [r0, #0]
 80122f2:	ed9d 8b08 	vldr	d8, [sp, #32]
 80122f6:	eeb0 0a48 	vmov.f32	s0, s16
 80122fa:	eef0 0a68 	vmov.f32	s1, s17
 80122fe:	b00d      	add	sp, #52	; 0x34
 8012300:	ecbd 8b04 	vpop	{d8-d9}
 8012304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012308:	ec45 4b10 	vmov	d0, r4, r5
 801230c:	f002 fa51 	bl	80147b2 <finite>
 8012310:	2800      	cmp	r0, #0
 8012312:	d0f0      	beq.n	80122f6 <pow+0xee>
 8012314:	4652      	mov	r2, sl
 8012316:	465b      	mov	r3, fp
 8012318:	4620      	mov	r0, r4
 801231a:	4629      	mov	r1, r5
 801231c:	f7ee fbde 	bl	8000adc <__aeabi_dcmplt>
 8012320:	2800      	cmp	r0, #0
 8012322:	d0e8      	beq.n	80122f6 <pow+0xee>
 8012324:	2301      	movs	r3, #1
 8012326:	9302      	str	r3, [sp, #8]
 8012328:	4b67      	ldr	r3, [pc, #412]	; (80124c8 <pow+0x2c0>)
 801232a:	9303      	str	r3, [sp, #12]
 801232c:	f999 3000 	ldrsb.w	r3, [r9]
 8012330:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8012334:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012338:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801233c:	b913      	cbnz	r3, 8012344 <pow+0x13c>
 801233e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8012342:	e7a2      	b.n	801228a <pow+0x82>
 8012344:	4962      	ldr	r1, [pc, #392]	; (80124d0 <pow+0x2c8>)
 8012346:	2000      	movs	r0, #0
 8012348:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801234c:	2b02      	cmp	r3, #2
 801234e:	d19c      	bne.n	801228a <pow+0x82>
 8012350:	f002 fc26 	bl	8014ba0 <__errno>
 8012354:	2321      	movs	r3, #33	; 0x21
 8012356:	6003      	str	r3, [r0, #0]
 8012358:	e7c5      	b.n	80122e6 <pow+0xde>
 801235a:	eeb0 0a48 	vmov.f32	s0, s16
 801235e:	eef0 0a68 	vmov.f32	s1, s17
 8012362:	f002 fa26 	bl	80147b2 <finite>
 8012366:	9000      	str	r0, [sp, #0]
 8012368:	2800      	cmp	r0, #0
 801236a:	f040 8081 	bne.w	8012470 <pow+0x268>
 801236e:	ec47 6b10 	vmov	d0, r6, r7
 8012372:	f002 fa1e 	bl	80147b2 <finite>
 8012376:	2800      	cmp	r0, #0
 8012378:	d07a      	beq.n	8012470 <pow+0x268>
 801237a:	ec45 4b10 	vmov	d0, r4, r5
 801237e:	f002 fa18 	bl	80147b2 <finite>
 8012382:	2800      	cmp	r0, #0
 8012384:	d074      	beq.n	8012470 <pow+0x268>
 8012386:	ec53 2b18 	vmov	r2, r3, d8
 801238a:	ee18 0a10 	vmov	r0, s16
 801238e:	4619      	mov	r1, r3
 8012390:	f7ee fbcc 	bl	8000b2c <__aeabi_dcmpun>
 8012394:	f999 9000 	ldrsb.w	r9, [r9]
 8012398:	4b4b      	ldr	r3, [pc, #300]	; (80124c8 <pow+0x2c0>)
 801239a:	b1b0      	cbz	r0, 80123ca <pow+0x1c2>
 801239c:	2201      	movs	r2, #1
 801239e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80123a2:	9b00      	ldr	r3, [sp, #0]
 80123a4:	930a      	str	r3, [sp, #40]	; 0x28
 80123a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80123aa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80123ae:	f1b9 0f00 	cmp.w	r9, #0
 80123b2:	d0c4      	beq.n	801233e <pow+0x136>
 80123b4:	4652      	mov	r2, sl
 80123b6:	465b      	mov	r3, fp
 80123b8:	4650      	mov	r0, sl
 80123ba:	4659      	mov	r1, fp
 80123bc:	f7ee fa46 	bl	800084c <__aeabi_ddiv>
 80123c0:	f1b9 0f02 	cmp.w	r9, #2
 80123c4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80123c8:	e7c1      	b.n	801234e <pow+0x146>
 80123ca:	2203      	movs	r2, #3
 80123cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80123d0:	900a      	str	r0, [sp, #40]	; 0x28
 80123d2:	4629      	mov	r1, r5
 80123d4:	4620      	mov	r0, r4
 80123d6:	2200      	movs	r2, #0
 80123d8:	4b3e      	ldr	r3, [pc, #248]	; (80124d4 <pow+0x2cc>)
 80123da:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80123de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80123e2:	f7ee f909 	bl	80005f8 <__aeabi_dmul>
 80123e6:	4604      	mov	r4, r0
 80123e8:	460d      	mov	r5, r1
 80123ea:	f1b9 0f00 	cmp.w	r9, #0
 80123ee:	d124      	bne.n	801243a <pow+0x232>
 80123f0:	4b39      	ldr	r3, [pc, #228]	; (80124d8 <pow+0x2d0>)
 80123f2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80123f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80123fa:	4630      	mov	r0, r6
 80123fc:	4652      	mov	r2, sl
 80123fe:	465b      	mov	r3, fp
 8012400:	4639      	mov	r1, r7
 8012402:	f7ee fb6b 	bl	8000adc <__aeabi_dcmplt>
 8012406:	2800      	cmp	r0, #0
 8012408:	d056      	beq.n	80124b8 <pow+0x2b0>
 801240a:	ec45 4b10 	vmov	d0, r4, r5
 801240e:	f002 f9e3 	bl	80147d8 <rint>
 8012412:	4622      	mov	r2, r4
 8012414:	462b      	mov	r3, r5
 8012416:	ec51 0b10 	vmov	r0, r1, d0
 801241a:	f7ee fb55 	bl	8000ac8 <__aeabi_dcmpeq>
 801241e:	b920      	cbnz	r0, 801242a <pow+0x222>
 8012420:	4b2e      	ldr	r3, [pc, #184]	; (80124dc <pow+0x2d4>)
 8012422:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8012426:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801242a:	f998 3000 	ldrsb.w	r3, [r8]
 801242e:	2b02      	cmp	r3, #2
 8012430:	d142      	bne.n	80124b8 <pow+0x2b0>
 8012432:	f002 fbb5 	bl	8014ba0 <__errno>
 8012436:	2322      	movs	r3, #34	; 0x22
 8012438:	e78d      	b.n	8012356 <pow+0x14e>
 801243a:	4b29      	ldr	r3, [pc, #164]	; (80124e0 <pow+0x2d8>)
 801243c:	2200      	movs	r2, #0
 801243e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012442:	4630      	mov	r0, r6
 8012444:	4652      	mov	r2, sl
 8012446:	465b      	mov	r3, fp
 8012448:	4639      	mov	r1, r7
 801244a:	f7ee fb47 	bl	8000adc <__aeabi_dcmplt>
 801244e:	2800      	cmp	r0, #0
 8012450:	d0eb      	beq.n	801242a <pow+0x222>
 8012452:	ec45 4b10 	vmov	d0, r4, r5
 8012456:	f002 f9bf 	bl	80147d8 <rint>
 801245a:	4622      	mov	r2, r4
 801245c:	462b      	mov	r3, r5
 801245e:	ec51 0b10 	vmov	r0, r1, d0
 8012462:	f7ee fb31 	bl	8000ac8 <__aeabi_dcmpeq>
 8012466:	2800      	cmp	r0, #0
 8012468:	d1df      	bne.n	801242a <pow+0x222>
 801246a:	2200      	movs	r2, #0
 801246c:	4b18      	ldr	r3, [pc, #96]	; (80124d0 <pow+0x2c8>)
 801246e:	e7da      	b.n	8012426 <pow+0x21e>
 8012470:	2200      	movs	r2, #0
 8012472:	2300      	movs	r3, #0
 8012474:	ec51 0b18 	vmov	r0, r1, d8
 8012478:	f7ee fb26 	bl	8000ac8 <__aeabi_dcmpeq>
 801247c:	2800      	cmp	r0, #0
 801247e:	f43f af3a 	beq.w	80122f6 <pow+0xee>
 8012482:	ec47 6b10 	vmov	d0, r6, r7
 8012486:	f002 f994 	bl	80147b2 <finite>
 801248a:	2800      	cmp	r0, #0
 801248c:	f43f af33 	beq.w	80122f6 <pow+0xee>
 8012490:	ec45 4b10 	vmov	d0, r4, r5
 8012494:	f002 f98d 	bl	80147b2 <finite>
 8012498:	2800      	cmp	r0, #0
 801249a:	f43f af2c 	beq.w	80122f6 <pow+0xee>
 801249e:	2304      	movs	r3, #4
 80124a0:	9302      	str	r3, [sp, #8]
 80124a2:	4b09      	ldr	r3, [pc, #36]	; (80124c8 <pow+0x2c0>)
 80124a4:	9303      	str	r3, [sp, #12]
 80124a6:	2300      	movs	r3, #0
 80124a8:	930a      	str	r3, [sp, #40]	; 0x28
 80124aa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80124ae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80124b2:	ed8d 9b08 	vstr	d9, [sp, #32]
 80124b6:	e7b8      	b.n	801242a <pow+0x222>
 80124b8:	a802      	add	r0, sp, #8
 80124ba:	f002 f982 	bl	80147c2 <matherr>
 80124be:	2800      	cmp	r0, #0
 80124c0:	f47f af11 	bne.w	80122e6 <pow+0xde>
 80124c4:	e7b5      	b.n	8012432 <pow+0x22a>
 80124c6:	bf00      	nop
 80124c8:	080156a9 	.word	0x080156a9
 80124cc:	3ff00000 	.word	0x3ff00000
 80124d0:	fff00000 	.word	0xfff00000
 80124d4:	3fe00000 	.word	0x3fe00000
 80124d8:	47efffff 	.word	0x47efffff
 80124dc:	c7efffff 	.word	0xc7efffff
 80124e0:	7ff00000 	.word	0x7ff00000
 80124e4:	20000206 	.word	0x20000206

080124e8 <sqrt>:
 80124e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80124ec:	ed2d 8b02 	vpush	{d8}
 80124f0:	b08b      	sub	sp, #44	; 0x2c
 80124f2:	ec55 4b10 	vmov	r4, r5, d0
 80124f6:	f001 f965 	bl	80137c4 <__ieee754_sqrt>
 80124fa:	4b26      	ldr	r3, [pc, #152]	; (8012594 <sqrt+0xac>)
 80124fc:	eeb0 8a40 	vmov.f32	s16, s0
 8012500:	eef0 8a60 	vmov.f32	s17, s1
 8012504:	f993 6000 	ldrsb.w	r6, [r3]
 8012508:	1c73      	adds	r3, r6, #1
 801250a:	d02a      	beq.n	8012562 <sqrt+0x7a>
 801250c:	4622      	mov	r2, r4
 801250e:	462b      	mov	r3, r5
 8012510:	4620      	mov	r0, r4
 8012512:	4629      	mov	r1, r5
 8012514:	f7ee fb0a 	bl	8000b2c <__aeabi_dcmpun>
 8012518:	4607      	mov	r7, r0
 801251a:	bb10      	cbnz	r0, 8012562 <sqrt+0x7a>
 801251c:	f04f 0800 	mov.w	r8, #0
 8012520:	f04f 0900 	mov.w	r9, #0
 8012524:	4642      	mov	r2, r8
 8012526:	464b      	mov	r3, r9
 8012528:	4620      	mov	r0, r4
 801252a:	4629      	mov	r1, r5
 801252c:	f7ee fad6 	bl	8000adc <__aeabi_dcmplt>
 8012530:	b1b8      	cbz	r0, 8012562 <sqrt+0x7a>
 8012532:	2301      	movs	r3, #1
 8012534:	9300      	str	r3, [sp, #0]
 8012536:	4b18      	ldr	r3, [pc, #96]	; (8012598 <sqrt+0xb0>)
 8012538:	9301      	str	r3, [sp, #4]
 801253a:	9708      	str	r7, [sp, #32]
 801253c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8012540:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8012544:	b9b6      	cbnz	r6, 8012574 <sqrt+0x8c>
 8012546:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801254a:	4668      	mov	r0, sp
 801254c:	f002 f939 	bl	80147c2 <matherr>
 8012550:	b1d0      	cbz	r0, 8012588 <sqrt+0xa0>
 8012552:	9b08      	ldr	r3, [sp, #32]
 8012554:	b11b      	cbz	r3, 801255e <sqrt+0x76>
 8012556:	f002 fb23 	bl	8014ba0 <__errno>
 801255a:	9b08      	ldr	r3, [sp, #32]
 801255c:	6003      	str	r3, [r0, #0]
 801255e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8012562:	eeb0 0a48 	vmov.f32	s0, s16
 8012566:	eef0 0a68 	vmov.f32	s1, s17
 801256a:	b00b      	add	sp, #44	; 0x2c
 801256c:	ecbd 8b02 	vpop	{d8}
 8012570:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012574:	4642      	mov	r2, r8
 8012576:	464b      	mov	r3, r9
 8012578:	4640      	mov	r0, r8
 801257a:	4649      	mov	r1, r9
 801257c:	f7ee f966 	bl	800084c <__aeabi_ddiv>
 8012580:	2e02      	cmp	r6, #2
 8012582:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012586:	d1e0      	bne.n	801254a <sqrt+0x62>
 8012588:	f002 fb0a 	bl	8014ba0 <__errno>
 801258c:	2321      	movs	r3, #33	; 0x21
 801258e:	6003      	str	r3, [r0, #0]
 8012590:	e7df      	b.n	8012552 <sqrt+0x6a>
 8012592:	bf00      	nop
 8012594:	20000206 	.word	0x20000206
 8012598:	080156ad 	.word	0x080156ad

0801259c <atan2f>:
 801259c:	f001 b9c2 	b.w	8013924 <__ieee754_atan2f>

080125a0 <__ieee754_asin>:
 80125a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125a4:	ec55 4b10 	vmov	r4, r5, d0
 80125a8:	4bcb      	ldr	r3, [pc, #812]	; (80128d8 <__ieee754_asin+0x338>)
 80125aa:	b087      	sub	sp, #28
 80125ac:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80125b0:	429f      	cmp	r7, r3
 80125b2:	9501      	str	r5, [sp, #4]
 80125b4:	dd31      	ble.n	801261a <__ieee754_asin+0x7a>
 80125b6:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 80125ba:	ee10 3a10 	vmov	r3, s0
 80125be:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 80125c2:	433b      	orrs	r3, r7
 80125c4:	d117      	bne.n	80125f6 <__ieee754_asin+0x56>
 80125c6:	a3aa      	add	r3, pc, #680	; (adr r3, 8012870 <__ieee754_asin+0x2d0>)
 80125c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125cc:	ee10 0a10 	vmov	r0, s0
 80125d0:	4629      	mov	r1, r5
 80125d2:	f7ee f811 	bl	80005f8 <__aeabi_dmul>
 80125d6:	a3a8      	add	r3, pc, #672	; (adr r3, 8012878 <__ieee754_asin+0x2d8>)
 80125d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125dc:	4606      	mov	r6, r0
 80125de:	460f      	mov	r7, r1
 80125e0:	4620      	mov	r0, r4
 80125e2:	4629      	mov	r1, r5
 80125e4:	f7ee f808 	bl	80005f8 <__aeabi_dmul>
 80125e8:	4602      	mov	r2, r0
 80125ea:	460b      	mov	r3, r1
 80125ec:	4630      	mov	r0, r6
 80125ee:	4639      	mov	r1, r7
 80125f0:	f7ed fe4c 	bl	800028c <__adddf3>
 80125f4:	e00a      	b.n	801260c <__ieee754_asin+0x6c>
 80125f6:	ee10 2a10 	vmov	r2, s0
 80125fa:	462b      	mov	r3, r5
 80125fc:	4620      	mov	r0, r4
 80125fe:	4629      	mov	r1, r5
 8012600:	f7ed fe42 	bl	8000288 <__aeabi_dsub>
 8012604:	4602      	mov	r2, r0
 8012606:	460b      	mov	r3, r1
 8012608:	f7ee f920 	bl	800084c <__aeabi_ddiv>
 801260c:	4604      	mov	r4, r0
 801260e:	460d      	mov	r5, r1
 8012610:	ec45 4b10 	vmov	d0, r4, r5
 8012614:	b007      	add	sp, #28
 8012616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801261a:	4bb0      	ldr	r3, [pc, #704]	; (80128dc <__ieee754_asin+0x33c>)
 801261c:	429f      	cmp	r7, r3
 801261e:	dc11      	bgt.n	8012644 <__ieee754_asin+0xa4>
 8012620:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8012624:	f280 80ae 	bge.w	8012784 <__ieee754_asin+0x1e4>
 8012628:	a395      	add	r3, pc, #596	; (adr r3, 8012880 <__ieee754_asin+0x2e0>)
 801262a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801262e:	ee10 0a10 	vmov	r0, s0
 8012632:	4629      	mov	r1, r5
 8012634:	f7ed fe2a 	bl	800028c <__adddf3>
 8012638:	2200      	movs	r2, #0
 801263a:	4ba9      	ldr	r3, [pc, #676]	; (80128e0 <__ieee754_asin+0x340>)
 801263c:	f7ee fa6c 	bl	8000b18 <__aeabi_dcmpgt>
 8012640:	2800      	cmp	r0, #0
 8012642:	d1e5      	bne.n	8012610 <__ieee754_asin+0x70>
 8012644:	ec45 4b10 	vmov	d0, r4, r5
 8012648:	f002 f8aa 	bl	80147a0 <fabs>
 801264c:	2000      	movs	r0, #0
 801264e:	ec53 2b10 	vmov	r2, r3, d0
 8012652:	49a3      	ldr	r1, [pc, #652]	; (80128e0 <__ieee754_asin+0x340>)
 8012654:	f7ed fe18 	bl	8000288 <__aeabi_dsub>
 8012658:	2200      	movs	r2, #0
 801265a:	4ba2      	ldr	r3, [pc, #648]	; (80128e4 <__ieee754_asin+0x344>)
 801265c:	f7ed ffcc 	bl	80005f8 <__aeabi_dmul>
 8012660:	a389      	add	r3, pc, #548	; (adr r3, 8012888 <__ieee754_asin+0x2e8>)
 8012662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012666:	4604      	mov	r4, r0
 8012668:	460d      	mov	r5, r1
 801266a:	f7ed ffc5 	bl	80005f8 <__aeabi_dmul>
 801266e:	a388      	add	r3, pc, #544	; (adr r3, 8012890 <__ieee754_asin+0x2f0>)
 8012670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012674:	f7ed fe0a 	bl	800028c <__adddf3>
 8012678:	4622      	mov	r2, r4
 801267a:	462b      	mov	r3, r5
 801267c:	f7ed ffbc 	bl	80005f8 <__aeabi_dmul>
 8012680:	a385      	add	r3, pc, #532	; (adr r3, 8012898 <__ieee754_asin+0x2f8>)
 8012682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012686:	f7ed fdff 	bl	8000288 <__aeabi_dsub>
 801268a:	4622      	mov	r2, r4
 801268c:	462b      	mov	r3, r5
 801268e:	f7ed ffb3 	bl	80005f8 <__aeabi_dmul>
 8012692:	a383      	add	r3, pc, #524	; (adr r3, 80128a0 <__ieee754_asin+0x300>)
 8012694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012698:	f7ed fdf8 	bl	800028c <__adddf3>
 801269c:	4622      	mov	r2, r4
 801269e:	462b      	mov	r3, r5
 80126a0:	f7ed ffaa 	bl	80005f8 <__aeabi_dmul>
 80126a4:	a380      	add	r3, pc, #512	; (adr r3, 80128a8 <__ieee754_asin+0x308>)
 80126a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126aa:	f7ed fded 	bl	8000288 <__aeabi_dsub>
 80126ae:	4622      	mov	r2, r4
 80126b0:	462b      	mov	r3, r5
 80126b2:	f7ed ffa1 	bl	80005f8 <__aeabi_dmul>
 80126b6:	a37e      	add	r3, pc, #504	; (adr r3, 80128b0 <__ieee754_asin+0x310>)
 80126b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126bc:	f7ed fde6 	bl	800028c <__adddf3>
 80126c0:	4622      	mov	r2, r4
 80126c2:	462b      	mov	r3, r5
 80126c4:	f7ed ff98 	bl	80005f8 <__aeabi_dmul>
 80126c8:	a37b      	add	r3, pc, #492	; (adr r3, 80128b8 <__ieee754_asin+0x318>)
 80126ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ce:	4680      	mov	r8, r0
 80126d0:	4689      	mov	r9, r1
 80126d2:	4620      	mov	r0, r4
 80126d4:	4629      	mov	r1, r5
 80126d6:	f7ed ff8f 	bl	80005f8 <__aeabi_dmul>
 80126da:	a379      	add	r3, pc, #484	; (adr r3, 80128c0 <__ieee754_asin+0x320>)
 80126dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126e0:	f7ed fdd2 	bl	8000288 <__aeabi_dsub>
 80126e4:	4622      	mov	r2, r4
 80126e6:	462b      	mov	r3, r5
 80126e8:	f7ed ff86 	bl	80005f8 <__aeabi_dmul>
 80126ec:	a376      	add	r3, pc, #472	; (adr r3, 80128c8 <__ieee754_asin+0x328>)
 80126ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126f2:	f7ed fdcb 	bl	800028c <__adddf3>
 80126f6:	4622      	mov	r2, r4
 80126f8:	462b      	mov	r3, r5
 80126fa:	f7ed ff7d 	bl	80005f8 <__aeabi_dmul>
 80126fe:	a374      	add	r3, pc, #464	; (adr r3, 80128d0 <__ieee754_asin+0x330>)
 8012700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012704:	f7ed fdc0 	bl	8000288 <__aeabi_dsub>
 8012708:	4622      	mov	r2, r4
 801270a:	462b      	mov	r3, r5
 801270c:	f7ed ff74 	bl	80005f8 <__aeabi_dmul>
 8012710:	4b73      	ldr	r3, [pc, #460]	; (80128e0 <__ieee754_asin+0x340>)
 8012712:	2200      	movs	r2, #0
 8012714:	f7ed fdba 	bl	800028c <__adddf3>
 8012718:	ec45 4b10 	vmov	d0, r4, r5
 801271c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012720:	f001 f850 	bl	80137c4 <__ieee754_sqrt>
 8012724:	4b70      	ldr	r3, [pc, #448]	; (80128e8 <__ieee754_asin+0x348>)
 8012726:	429f      	cmp	r7, r3
 8012728:	ec5b ab10 	vmov	sl, fp, d0
 801272c:	f340 80de 	ble.w	80128ec <__ieee754_asin+0x34c>
 8012730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012734:	4640      	mov	r0, r8
 8012736:	4649      	mov	r1, r9
 8012738:	f7ee f888 	bl	800084c <__aeabi_ddiv>
 801273c:	4652      	mov	r2, sl
 801273e:	465b      	mov	r3, fp
 8012740:	f7ed ff5a 	bl	80005f8 <__aeabi_dmul>
 8012744:	4652      	mov	r2, sl
 8012746:	465b      	mov	r3, fp
 8012748:	f7ed fda0 	bl	800028c <__adddf3>
 801274c:	4602      	mov	r2, r0
 801274e:	460b      	mov	r3, r1
 8012750:	f7ed fd9c 	bl	800028c <__adddf3>
 8012754:	a348      	add	r3, pc, #288	; (adr r3, 8012878 <__ieee754_asin+0x2d8>)
 8012756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801275a:	f7ed fd95 	bl	8000288 <__aeabi_dsub>
 801275e:	4602      	mov	r2, r0
 8012760:	460b      	mov	r3, r1
 8012762:	a143      	add	r1, pc, #268	; (adr r1, 8012870 <__ieee754_asin+0x2d0>)
 8012764:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012768:	f7ed fd8e 	bl	8000288 <__aeabi_dsub>
 801276c:	9b01      	ldr	r3, [sp, #4]
 801276e:	2b00      	cmp	r3, #0
 8012770:	bfdc      	itt	le
 8012772:	4602      	movle	r2, r0
 8012774:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8012778:	4604      	mov	r4, r0
 801277a:	460d      	mov	r5, r1
 801277c:	bfdc      	itt	le
 801277e:	4614      	movle	r4, r2
 8012780:	461d      	movle	r5, r3
 8012782:	e745      	b.n	8012610 <__ieee754_asin+0x70>
 8012784:	ee10 2a10 	vmov	r2, s0
 8012788:	ee10 0a10 	vmov	r0, s0
 801278c:	462b      	mov	r3, r5
 801278e:	4629      	mov	r1, r5
 8012790:	f7ed ff32 	bl	80005f8 <__aeabi_dmul>
 8012794:	a33c      	add	r3, pc, #240	; (adr r3, 8012888 <__ieee754_asin+0x2e8>)
 8012796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801279a:	4606      	mov	r6, r0
 801279c:	460f      	mov	r7, r1
 801279e:	f7ed ff2b 	bl	80005f8 <__aeabi_dmul>
 80127a2:	a33b      	add	r3, pc, #236	; (adr r3, 8012890 <__ieee754_asin+0x2f0>)
 80127a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127a8:	f7ed fd70 	bl	800028c <__adddf3>
 80127ac:	4632      	mov	r2, r6
 80127ae:	463b      	mov	r3, r7
 80127b0:	f7ed ff22 	bl	80005f8 <__aeabi_dmul>
 80127b4:	a338      	add	r3, pc, #224	; (adr r3, 8012898 <__ieee754_asin+0x2f8>)
 80127b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ba:	f7ed fd65 	bl	8000288 <__aeabi_dsub>
 80127be:	4632      	mov	r2, r6
 80127c0:	463b      	mov	r3, r7
 80127c2:	f7ed ff19 	bl	80005f8 <__aeabi_dmul>
 80127c6:	a336      	add	r3, pc, #216	; (adr r3, 80128a0 <__ieee754_asin+0x300>)
 80127c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127cc:	f7ed fd5e 	bl	800028c <__adddf3>
 80127d0:	4632      	mov	r2, r6
 80127d2:	463b      	mov	r3, r7
 80127d4:	f7ed ff10 	bl	80005f8 <__aeabi_dmul>
 80127d8:	a333      	add	r3, pc, #204	; (adr r3, 80128a8 <__ieee754_asin+0x308>)
 80127da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127de:	f7ed fd53 	bl	8000288 <__aeabi_dsub>
 80127e2:	4632      	mov	r2, r6
 80127e4:	463b      	mov	r3, r7
 80127e6:	f7ed ff07 	bl	80005f8 <__aeabi_dmul>
 80127ea:	a331      	add	r3, pc, #196	; (adr r3, 80128b0 <__ieee754_asin+0x310>)
 80127ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127f0:	f7ed fd4c 	bl	800028c <__adddf3>
 80127f4:	4632      	mov	r2, r6
 80127f6:	463b      	mov	r3, r7
 80127f8:	f7ed fefe 	bl	80005f8 <__aeabi_dmul>
 80127fc:	a32e      	add	r3, pc, #184	; (adr r3, 80128b8 <__ieee754_asin+0x318>)
 80127fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012802:	4680      	mov	r8, r0
 8012804:	4689      	mov	r9, r1
 8012806:	4630      	mov	r0, r6
 8012808:	4639      	mov	r1, r7
 801280a:	f7ed fef5 	bl	80005f8 <__aeabi_dmul>
 801280e:	a32c      	add	r3, pc, #176	; (adr r3, 80128c0 <__ieee754_asin+0x320>)
 8012810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012814:	f7ed fd38 	bl	8000288 <__aeabi_dsub>
 8012818:	4632      	mov	r2, r6
 801281a:	463b      	mov	r3, r7
 801281c:	f7ed feec 	bl	80005f8 <__aeabi_dmul>
 8012820:	a329      	add	r3, pc, #164	; (adr r3, 80128c8 <__ieee754_asin+0x328>)
 8012822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012826:	f7ed fd31 	bl	800028c <__adddf3>
 801282a:	4632      	mov	r2, r6
 801282c:	463b      	mov	r3, r7
 801282e:	f7ed fee3 	bl	80005f8 <__aeabi_dmul>
 8012832:	a327      	add	r3, pc, #156	; (adr r3, 80128d0 <__ieee754_asin+0x330>)
 8012834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012838:	f7ed fd26 	bl	8000288 <__aeabi_dsub>
 801283c:	4632      	mov	r2, r6
 801283e:	463b      	mov	r3, r7
 8012840:	f7ed feda 	bl	80005f8 <__aeabi_dmul>
 8012844:	2200      	movs	r2, #0
 8012846:	4b26      	ldr	r3, [pc, #152]	; (80128e0 <__ieee754_asin+0x340>)
 8012848:	f7ed fd20 	bl	800028c <__adddf3>
 801284c:	4602      	mov	r2, r0
 801284e:	460b      	mov	r3, r1
 8012850:	4640      	mov	r0, r8
 8012852:	4649      	mov	r1, r9
 8012854:	f7ed fffa 	bl	800084c <__aeabi_ddiv>
 8012858:	4622      	mov	r2, r4
 801285a:	462b      	mov	r3, r5
 801285c:	f7ed fecc 	bl	80005f8 <__aeabi_dmul>
 8012860:	4602      	mov	r2, r0
 8012862:	460b      	mov	r3, r1
 8012864:	4620      	mov	r0, r4
 8012866:	4629      	mov	r1, r5
 8012868:	e6c2      	b.n	80125f0 <__ieee754_asin+0x50>
 801286a:	bf00      	nop
 801286c:	f3af 8000 	nop.w
 8012870:	54442d18 	.word	0x54442d18
 8012874:	3ff921fb 	.word	0x3ff921fb
 8012878:	33145c07 	.word	0x33145c07
 801287c:	3c91a626 	.word	0x3c91a626
 8012880:	8800759c 	.word	0x8800759c
 8012884:	7e37e43c 	.word	0x7e37e43c
 8012888:	0dfdf709 	.word	0x0dfdf709
 801288c:	3f023de1 	.word	0x3f023de1
 8012890:	7501b288 	.word	0x7501b288
 8012894:	3f49efe0 	.word	0x3f49efe0
 8012898:	b5688f3b 	.word	0xb5688f3b
 801289c:	3fa48228 	.word	0x3fa48228
 80128a0:	0e884455 	.word	0x0e884455
 80128a4:	3fc9c155 	.word	0x3fc9c155
 80128a8:	03eb6f7d 	.word	0x03eb6f7d
 80128ac:	3fd4d612 	.word	0x3fd4d612
 80128b0:	55555555 	.word	0x55555555
 80128b4:	3fc55555 	.word	0x3fc55555
 80128b8:	b12e9282 	.word	0xb12e9282
 80128bc:	3fb3b8c5 	.word	0x3fb3b8c5
 80128c0:	1b8d0159 	.word	0x1b8d0159
 80128c4:	3fe6066c 	.word	0x3fe6066c
 80128c8:	9c598ac8 	.word	0x9c598ac8
 80128cc:	40002ae5 	.word	0x40002ae5
 80128d0:	1c8a2d4b 	.word	0x1c8a2d4b
 80128d4:	40033a27 	.word	0x40033a27
 80128d8:	3fefffff 	.word	0x3fefffff
 80128dc:	3fdfffff 	.word	0x3fdfffff
 80128e0:	3ff00000 	.word	0x3ff00000
 80128e4:	3fe00000 	.word	0x3fe00000
 80128e8:	3fef3332 	.word	0x3fef3332
 80128ec:	ee10 2a10 	vmov	r2, s0
 80128f0:	ee10 0a10 	vmov	r0, s0
 80128f4:	465b      	mov	r3, fp
 80128f6:	4659      	mov	r1, fp
 80128f8:	f7ed fcc8 	bl	800028c <__adddf3>
 80128fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012900:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012904:	4640      	mov	r0, r8
 8012906:	4649      	mov	r1, r9
 8012908:	f7ed ffa0 	bl	800084c <__aeabi_ddiv>
 801290c:	4602      	mov	r2, r0
 801290e:	460b      	mov	r3, r1
 8012910:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012914:	f7ed fe70 	bl	80005f8 <__aeabi_dmul>
 8012918:	2600      	movs	r6, #0
 801291a:	4680      	mov	r8, r0
 801291c:	4689      	mov	r9, r1
 801291e:	4632      	mov	r2, r6
 8012920:	465b      	mov	r3, fp
 8012922:	4630      	mov	r0, r6
 8012924:	4659      	mov	r1, fp
 8012926:	f7ed fe67 	bl	80005f8 <__aeabi_dmul>
 801292a:	4602      	mov	r2, r0
 801292c:	460b      	mov	r3, r1
 801292e:	4620      	mov	r0, r4
 8012930:	4629      	mov	r1, r5
 8012932:	f7ed fca9 	bl	8000288 <__aeabi_dsub>
 8012936:	4632      	mov	r2, r6
 8012938:	4604      	mov	r4, r0
 801293a:	460d      	mov	r5, r1
 801293c:	465b      	mov	r3, fp
 801293e:	4650      	mov	r0, sl
 8012940:	4659      	mov	r1, fp
 8012942:	f7ed fca3 	bl	800028c <__adddf3>
 8012946:	4602      	mov	r2, r0
 8012948:	460b      	mov	r3, r1
 801294a:	4620      	mov	r0, r4
 801294c:	4629      	mov	r1, r5
 801294e:	f7ed ff7d 	bl	800084c <__aeabi_ddiv>
 8012952:	4602      	mov	r2, r0
 8012954:	460b      	mov	r3, r1
 8012956:	f7ed fc99 	bl	800028c <__adddf3>
 801295a:	4602      	mov	r2, r0
 801295c:	460b      	mov	r3, r1
 801295e:	a114      	add	r1, pc, #80	; (adr r1, 80129b0 <__ieee754_asin+0x410>)
 8012960:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012964:	f7ed fc90 	bl	8000288 <__aeabi_dsub>
 8012968:	4602      	mov	r2, r0
 801296a:	460b      	mov	r3, r1
 801296c:	4640      	mov	r0, r8
 801296e:	4649      	mov	r1, r9
 8012970:	f7ed fc8a 	bl	8000288 <__aeabi_dsub>
 8012974:	465f      	mov	r7, fp
 8012976:	4604      	mov	r4, r0
 8012978:	460d      	mov	r5, r1
 801297a:	4632      	mov	r2, r6
 801297c:	465b      	mov	r3, fp
 801297e:	4630      	mov	r0, r6
 8012980:	4639      	mov	r1, r7
 8012982:	f7ed fc83 	bl	800028c <__adddf3>
 8012986:	4602      	mov	r2, r0
 8012988:	460b      	mov	r3, r1
 801298a:	a10b      	add	r1, pc, #44	; (adr r1, 80129b8 <__ieee754_asin+0x418>)
 801298c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012990:	f7ed fc7a 	bl	8000288 <__aeabi_dsub>
 8012994:	4602      	mov	r2, r0
 8012996:	460b      	mov	r3, r1
 8012998:	4620      	mov	r0, r4
 801299a:	4629      	mov	r1, r5
 801299c:	f7ed fc74 	bl	8000288 <__aeabi_dsub>
 80129a0:	4602      	mov	r2, r0
 80129a2:	460b      	mov	r3, r1
 80129a4:	a104      	add	r1, pc, #16	; (adr r1, 80129b8 <__ieee754_asin+0x418>)
 80129a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80129aa:	e6dd      	b.n	8012768 <__ieee754_asin+0x1c8>
 80129ac:	f3af 8000 	nop.w
 80129b0:	33145c07 	.word	0x33145c07
 80129b4:	3c91a626 	.word	0x3c91a626
 80129b8:	54442d18 	.word	0x54442d18
 80129bc:	3fe921fb 	.word	0x3fe921fb

080129c0 <__ieee754_pow>:
 80129c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129c4:	b091      	sub	sp, #68	; 0x44
 80129c6:	ed8d 1b00 	vstr	d1, [sp]
 80129ca:	e9dd 2900 	ldrd	r2, r9, [sp]
 80129ce:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80129d2:	ea58 0302 	orrs.w	r3, r8, r2
 80129d6:	ec57 6b10 	vmov	r6, r7, d0
 80129da:	f000 84be 	beq.w	801335a <__ieee754_pow+0x99a>
 80129de:	4b7a      	ldr	r3, [pc, #488]	; (8012bc8 <__ieee754_pow+0x208>)
 80129e0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80129e4:	429c      	cmp	r4, r3
 80129e6:	463d      	mov	r5, r7
 80129e8:	ee10 aa10 	vmov	sl, s0
 80129ec:	dc09      	bgt.n	8012a02 <__ieee754_pow+0x42>
 80129ee:	d103      	bne.n	80129f8 <__ieee754_pow+0x38>
 80129f0:	b93e      	cbnz	r6, 8012a02 <__ieee754_pow+0x42>
 80129f2:	45a0      	cmp	r8, r4
 80129f4:	dc0d      	bgt.n	8012a12 <__ieee754_pow+0x52>
 80129f6:	e001      	b.n	80129fc <__ieee754_pow+0x3c>
 80129f8:	4598      	cmp	r8, r3
 80129fa:	dc02      	bgt.n	8012a02 <__ieee754_pow+0x42>
 80129fc:	4598      	cmp	r8, r3
 80129fe:	d10e      	bne.n	8012a1e <__ieee754_pow+0x5e>
 8012a00:	b16a      	cbz	r2, 8012a1e <__ieee754_pow+0x5e>
 8012a02:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8012a06:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012a0a:	ea54 030a 	orrs.w	r3, r4, sl
 8012a0e:	f000 84a4 	beq.w	801335a <__ieee754_pow+0x99a>
 8012a12:	486e      	ldr	r0, [pc, #440]	; (8012bcc <__ieee754_pow+0x20c>)
 8012a14:	b011      	add	sp, #68	; 0x44
 8012a16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a1a:	f001 bed5 	b.w	80147c8 <nan>
 8012a1e:	2d00      	cmp	r5, #0
 8012a20:	da53      	bge.n	8012aca <__ieee754_pow+0x10a>
 8012a22:	4b6b      	ldr	r3, [pc, #428]	; (8012bd0 <__ieee754_pow+0x210>)
 8012a24:	4598      	cmp	r8, r3
 8012a26:	dc4d      	bgt.n	8012ac4 <__ieee754_pow+0x104>
 8012a28:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8012a2c:	4598      	cmp	r8, r3
 8012a2e:	dd4c      	ble.n	8012aca <__ieee754_pow+0x10a>
 8012a30:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012a34:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012a38:	2b14      	cmp	r3, #20
 8012a3a:	dd26      	ble.n	8012a8a <__ieee754_pow+0xca>
 8012a3c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8012a40:	fa22 f103 	lsr.w	r1, r2, r3
 8012a44:	fa01 f303 	lsl.w	r3, r1, r3
 8012a48:	4293      	cmp	r3, r2
 8012a4a:	d13e      	bne.n	8012aca <__ieee754_pow+0x10a>
 8012a4c:	f001 0101 	and.w	r1, r1, #1
 8012a50:	f1c1 0b02 	rsb	fp, r1, #2
 8012a54:	2a00      	cmp	r2, #0
 8012a56:	d15b      	bne.n	8012b10 <__ieee754_pow+0x150>
 8012a58:	4b5b      	ldr	r3, [pc, #364]	; (8012bc8 <__ieee754_pow+0x208>)
 8012a5a:	4598      	cmp	r8, r3
 8012a5c:	d124      	bne.n	8012aa8 <__ieee754_pow+0xe8>
 8012a5e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8012a62:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8012a66:	ea53 030a 	orrs.w	r3, r3, sl
 8012a6a:	f000 8476 	beq.w	801335a <__ieee754_pow+0x99a>
 8012a6e:	4b59      	ldr	r3, [pc, #356]	; (8012bd4 <__ieee754_pow+0x214>)
 8012a70:	429c      	cmp	r4, r3
 8012a72:	dd2d      	ble.n	8012ad0 <__ieee754_pow+0x110>
 8012a74:	f1b9 0f00 	cmp.w	r9, #0
 8012a78:	f280 8473 	bge.w	8013362 <__ieee754_pow+0x9a2>
 8012a7c:	2000      	movs	r0, #0
 8012a7e:	2100      	movs	r1, #0
 8012a80:	ec41 0b10 	vmov	d0, r0, r1
 8012a84:	b011      	add	sp, #68	; 0x44
 8012a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a8a:	2a00      	cmp	r2, #0
 8012a8c:	d13e      	bne.n	8012b0c <__ieee754_pow+0x14c>
 8012a8e:	f1c3 0314 	rsb	r3, r3, #20
 8012a92:	fa48 f103 	asr.w	r1, r8, r3
 8012a96:	fa01 f303 	lsl.w	r3, r1, r3
 8012a9a:	4543      	cmp	r3, r8
 8012a9c:	f040 8469 	bne.w	8013372 <__ieee754_pow+0x9b2>
 8012aa0:	f001 0101 	and.w	r1, r1, #1
 8012aa4:	f1c1 0b02 	rsb	fp, r1, #2
 8012aa8:	4b4b      	ldr	r3, [pc, #300]	; (8012bd8 <__ieee754_pow+0x218>)
 8012aaa:	4598      	cmp	r8, r3
 8012aac:	d118      	bne.n	8012ae0 <__ieee754_pow+0x120>
 8012aae:	f1b9 0f00 	cmp.w	r9, #0
 8012ab2:	f280 845a 	bge.w	801336a <__ieee754_pow+0x9aa>
 8012ab6:	4948      	ldr	r1, [pc, #288]	; (8012bd8 <__ieee754_pow+0x218>)
 8012ab8:	4632      	mov	r2, r6
 8012aba:	463b      	mov	r3, r7
 8012abc:	2000      	movs	r0, #0
 8012abe:	f7ed fec5 	bl	800084c <__aeabi_ddiv>
 8012ac2:	e7dd      	b.n	8012a80 <__ieee754_pow+0xc0>
 8012ac4:	f04f 0b02 	mov.w	fp, #2
 8012ac8:	e7c4      	b.n	8012a54 <__ieee754_pow+0x94>
 8012aca:	f04f 0b00 	mov.w	fp, #0
 8012ace:	e7c1      	b.n	8012a54 <__ieee754_pow+0x94>
 8012ad0:	f1b9 0f00 	cmp.w	r9, #0
 8012ad4:	dad2      	bge.n	8012a7c <__ieee754_pow+0xbc>
 8012ad6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012ada:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012ade:	e7cf      	b.n	8012a80 <__ieee754_pow+0xc0>
 8012ae0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8012ae4:	d106      	bne.n	8012af4 <__ieee754_pow+0x134>
 8012ae6:	4632      	mov	r2, r6
 8012ae8:	463b      	mov	r3, r7
 8012aea:	4610      	mov	r0, r2
 8012aec:	4619      	mov	r1, r3
 8012aee:	f7ed fd83 	bl	80005f8 <__aeabi_dmul>
 8012af2:	e7c5      	b.n	8012a80 <__ieee754_pow+0xc0>
 8012af4:	4b39      	ldr	r3, [pc, #228]	; (8012bdc <__ieee754_pow+0x21c>)
 8012af6:	4599      	cmp	r9, r3
 8012af8:	d10a      	bne.n	8012b10 <__ieee754_pow+0x150>
 8012afa:	2d00      	cmp	r5, #0
 8012afc:	db08      	blt.n	8012b10 <__ieee754_pow+0x150>
 8012afe:	ec47 6b10 	vmov	d0, r6, r7
 8012b02:	b011      	add	sp, #68	; 0x44
 8012b04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b08:	f000 be5c 	b.w	80137c4 <__ieee754_sqrt>
 8012b0c:	f04f 0b00 	mov.w	fp, #0
 8012b10:	ec47 6b10 	vmov	d0, r6, r7
 8012b14:	f001 fe44 	bl	80147a0 <fabs>
 8012b18:	ec51 0b10 	vmov	r0, r1, d0
 8012b1c:	f1ba 0f00 	cmp.w	sl, #0
 8012b20:	d127      	bne.n	8012b72 <__ieee754_pow+0x1b2>
 8012b22:	b124      	cbz	r4, 8012b2e <__ieee754_pow+0x16e>
 8012b24:	4b2c      	ldr	r3, [pc, #176]	; (8012bd8 <__ieee754_pow+0x218>)
 8012b26:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8012b2a:	429a      	cmp	r2, r3
 8012b2c:	d121      	bne.n	8012b72 <__ieee754_pow+0x1b2>
 8012b2e:	f1b9 0f00 	cmp.w	r9, #0
 8012b32:	da05      	bge.n	8012b40 <__ieee754_pow+0x180>
 8012b34:	4602      	mov	r2, r0
 8012b36:	460b      	mov	r3, r1
 8012b38:	2000      	movs	r0, #0
 8012b3a:	4927      	ldr	r1, [pc, #156]	; (8012bd8 <__ieee754_pow+0x218>)
 8012b3c:	f7ed fe86 	bl	800084c <__aeabi_ddiv>
 8012b40:	2d00      	cmp	r5, #0
 8012b42:	da9d      	bge.n	8012a80 <__ieee754_pow+0xc0>
 8012b44:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8012b48:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012b4c:	ea54 030b 	orrs.w	r3, r4, fp
 8012b50:	d108      	bne.n	8012b64 <__ieee754_pow+0x1a4>
 8012b52:	4602      	mov	r2, r0
 8012b54:	460b      	mov	r3, r1
 8012b56:	4610      	mov	r0, r2
 8012b58:	4619      	mov	r1, r3
 8012b5a:	f7ed fb95 	bl	8000288 <__aeabi_dsub>
 8012b5e:	4602      	mov	r2, r0
 8012b60:	460b      	mov	r3, r1
 8012b62:	e7ac      	b.n	8012abe <__ieee754_pow+0xfe>
 8012b64:	f1bb 0f01 	cmp.w	fp, #1
 8012b68:	d18a      	bne.n	8012a80 <__ieee754_pow+0xc0>
 8012b6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012b6e:	4619      	mov	r1, r3
 8012b70:	e786      	b.n	8012a80 <__ieee754_pow+0xc0>
 8012b72:	0fed      	lsrs	r5, r5, #31
 8012b74:	1e6b      	subs	r3, r5, #1
 8012b76:	930d      	str	r3, [sp, #52]	; 0x34
 8012b78:	ea5b 0303 	orrs.w	r3, fp, r3
 8012b7c:	d102      	bne.n	8012b84 <__ieee754_pow+0x1c4>
 8012b7e:	4632      	mov	r2, r6
 8012b80:	463b      	mov	r3, r7
 8012b82:	e7e8      	b.n	8012b56 <__ieee754_pow+0x196>
 8012b84:	4b16      	ldr	r3, [pc, #88]	; (8012be0 <__ieee754_pow+0x220>)
 8012b86:	4598      	cmp	r8, r3
 8012b88:	f340 80fe 	ble.w	8012d88 <__ieee754_pow+0x3c8>
 8012b8c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8012b90:	4598      	cmp	r8, r3
 8012b92:	dd0a      	ble.n	8012baa <__ieee754_pow+0x1ea>
 8012b94:	4b0f      	ldr	r3, [pc, #60]	; (8012bd4 <__ieee754_pow+0x214>)
 8012b96:	429c      	cmp	r4, r3
 8012b98:	dc0d      	bgt.n	8012bb6 <__ieee754_pow+0x1f6>
 8012b9a:	f1b9 0f00 	cmp.w	r9, #0
 8012b9e:	f6bf af6d 	bge.w	8012a7c <__ieee754_pow+0xbc>
 8012ba2:	a307      	add	r3, pc, #28	; (adr r3, 8012bc0 <__ieee754_pow+0x200>)
 8012ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ba8:	e79f      	b.n	8012aea <__ieee754_pow+0x12a>
 8012baa:	4b0e      	ldr	r3, [pc, #56]	; (8012be4 <__ieee754_pow+0x224>)
 8012bac:	429c      	cmp	r4, r3
 8012bae:	ddf4      	ble.n	8012b9a <__ieee754_pow+0x1da>
 8012bb0:	4b09      	ldr	r3, [pc, #36]	; (8012bd8 <__ieee754_pow+0x218>)
 8012bb2:	429c      	cmp	r4, r3
 8012bb4:	dd18      	ble.n	8012be8 <__ieee754_pow+0x228>
 8012bb6:	f1b9 0f00 	cmp.w	r9, #0
 8012bba:	dcf2      	bgt.n	8012ba2 <__ieee754_pow+0x1e2>
 8012bbc:	e75e      	b.n	8012a7c <__ieee754_pow+0xbc>
 8012bbe:	bf00      	nop
 8012bc0:	8800759c 	.word	0x8800759c
 8012bc4:	7e37e43c 	.word	0x7e37e43c
 8012bc8:	7ff00000 	.word	0x7ff00000
 8012bcc:	08015977 	.word	0x08015977
 8012bd0:	433fffff 	.word	0x433fffff
 8012bd4:	3fefffff 	.word	0x3fefffff
 8012bd8:	3ff00000 	.word	0x3ff00000
 8012bdc:	3fe00000 	.word	0x3fe00000
 8012be0:	41e00000 	.word	0x41e00000
 8012be4:	3feffffe 	.word	0x3feffffe
 8012be8:	2200      	movs	r2, #0
 8012bea:	4b63      	ldr	r3, [pc, #396]	; (8012d78 <__ieee754_pow+0x3b8>)
 8012bec:	f7ed fb4c 	bl	8000288 <__aeabi_dsub>
 8012bf0:	a355      	add	r3, pc, #340	; (adr r3, 8012d48 <__ieee754_pow+0x388>)
 8012bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bf6:	4604      	mov	r4, r0
 8012bf8:	460d      	mov	r5, r1
 8012bfa:	f7ed fcfd 	bl	80005f8 <__aeabi_dmul>
 8012bfe:	a354      	add	r3, pc, #336	; (adr r3, 8012d50 <__ieee754_pow+0x390>)
 8012c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c04:	4606      	mov	r6, r0
 8012c06:	460f      	mov	r7, r1
 8012c08:	4620      	mov	r0, r4
 8012c0a:	4629      	mov	r1, r5
 8012c0c:	f7ed fcf4 	bl	80005f8 <__aeabi_dmul>
 8012c10:	2200      	movs	r2, #0
 8012c12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c16:	4b59      	ldr	r3, [pc, #356]	; (8012d7c <__ieee754_pow+0x3bc>)
 8012c18:	4620      	mov	r0, r4
 8012c1a:	4629      	mov	r1, r5
 8012c1c:	f7ed fcec 	bl	80005f8 <__aeabi_dmul>
 8012c20:	4602      	mov	r2, r0
 8012c22:	460b      	mov	r3, r1
 8012c24:	a14c      	add	r1, pc, #304	; (adr r1, 8012d58 <__ieee754_pow+0x398>)
 8012c26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c2a:	f7ed fb2d 	bl	8000288 <__aeabi_dsub>
 8012c2e:	4622      	mov	r2, r4
 8012c30:	462b      	mov	r3, r5
 8012c32:	f7ed fce1 	bl	80005f8 <__aeabi_dmul>
 8012c36:	4602      	mov	r2, r0
 8012c38:	460b      	mov	r3, r1
 8012c3a:	2000      	movs	r0, #0
 8012c3c:	4950      	ldr	r1, [pc, #320]	; (8012d80 <__ieee754_pow+0x3c0>)
 8012c3e:	f7ed fb23 	bl	8000288 <__aeabi_dsub>
 8012c42:	4622      	mov	r2, r4
 8012c44:	462b      	mov	r3, r5
 8012c46:	4680      	mov	r8, r0
 8012c48:	4689      	mov	r9, r1
 8012c4a:	4620      	mov	r0, r4
 8012c4c:	4629      	mov	r1, r5
 8012c4e:	f7ed fcd3 	bl	80005f8 <__aeabi_dmul>
 8012c52:	4602      	mov	r2, r0
 8012c54:	460b      	mov	r3, r1
 8012c56:	4640      	mov	r0, r8
 8012c58:	4649      	mov	r1, r9
 8012c5a:	f7ed fccd 	bl	80005f8 <__aeabi_dmul>
 8012c5e:	a340      	add	r3, pc, #256	; (adr r3, 8012d60 <__ieee754_pow+0x3a0>)
 8012c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c64:	f7ed fcc8 	bl	80005f8 <__aeabi_dmul>
 8012c68:	4602      	mov	r2, r0
 8012c6a:	460b      	mov	r3, r1
 8012c6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012c70:	f7ed fb0a 	bl	8000288 <__aeabi_dsub>
 8012c74:	4602      	mov	r2, r0
 8012c76:	460b      	mov	r3, r1
 8012c78:	4604      	mov	r4, r0
 8012c7a:	460d      	mov	r5, r1
 8012c7c:	4630      	mov	r0, r6
 8012c7e:	4639      	mov	r1, r7
 8012c80:	f7ed fb04 	bl	800028c <__adddf3>
 8012c84:	2000      	movs	r0, #0
 8012c86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012c8a:	4632      	mov	r2, r6
 8012c8c:	463b      	mov	r3, r7
 8012c8e:	f7ed fafb 	bl	8000288 <__aeabi_dsub>
 8012c92:	4602      	mov	r2, r0
 8012c94:	460b      	mov	r3, r1
 8012c96:	4620      	mov	r0, r4
 8012c98:	4629      	mov	r1, r5
 8012c9a:	f7ed faf5 	bl	8000288 <__aeabi_dsub>
 8012c9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012ca0:	f10b 33ff 	add.w	r3, fp, #4294967295
 8012ca4:	4313      	orrs	r3, r2
 8012ca6:	4606      	mov	r6, r0
 8012ca8:	460f      	mov	r7, r1
 8012caa:	f040 81eb 	bne.w	8013084 <__ieee754_pow+0x6c4>
 8012cae:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8012d68 <__ieee754_pow+0x3a8>
 8012cb2:	e9dd 4500 	ldrd	r4, r5, [sp]
 8012cb6:	2400      	movs	r4, #0
 8012cb8:	4622      	mov	r2, r4
 8012cba:	462b      	mov	r3, r5
 8012cbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012cc0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012cc4:	f7ed fae0 	bl	8000288 <__aeabi_dsub>
 8012cc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012ccc:	f7ed fc94 	bl	80005f8 <__aeabi_dmul>
 8012cd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012cd4:	4680      	mov	r8, r0
 8012cd6:	4689      	mov	r9, r1
 8012cd8:	4630      	mov	r0, r6
 8012cda:	4639      	mov	r1, r7
 8012cdc:	f7ed fc8c 	bl	80005f8 <__aeabi_dmul>
 8012ce0:	4602      	mov	r2, r0
 8012ce2:	460b      	mov	r3, r1
 8012ce4:	4640      	mov	r0, r8
 8012ce6:	4649      	mov	r1, r9
 8012ce8:	f7ed fad0 	bl	800028c <__adddf3>
 8012cec:	4622      	mov	r2, r4
 8012cee:	462b      	mov	r3, r5
 8012cf0:	4680      	mov	r8, r0
 8012cf2:	4689      	mov	r9, r1
 8012cf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012cf8:	f7ed fc7e 	bl	80005f8 <__aeabi_dmul>
 8012cfc:	460b      	mov	r3, r1
 8012cfe:	4604      	mov	r4, r0
 8012d00:	460d      	mov	r5, r1
 8012d02:	4602      	mov	r2, r0
 8012d04:	4649      	mov	r1, r9
 8012d06:	4640      	mov	r0, r8
 8012d08:	e9cd 4500 	strd	r4, r5, [sp]
 8012d0c:	f7ed fabe 	bl	800028c <__adddf3>
 8012d10:	4b1c      	ldr	r3, [pc, #112]	; (8012d84 <__ieee754_pow+0x3c4>)
 8012d12:	4299      	cmp	r1, r3
 8012d14:	4606      	mov	r6, r0
 8012d16:	460f      	mov	r7, r1
 8012d18:	468b      	mov	fp, r1
 8012d1a:	f340 82f7 	ble.w	801330c <__ieee754_pow+0x94c>
 8012d1e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8012d22:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8012d26:	4303      	orrs	r3, r0
 8012d28:	f000 81ea 	beq.w	8013100 <__ieee754_pow+0x740>
 8012d2c:	a310      	add	r3, pc, #64	; (adr r3, 8012d70 <__ieee754_pow+0x3b0>)
 8012d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d36:	f7ed fc5f 	bl	80005f8 <__aeabi_dmul>
 8012d3a:	a30d      	add	r3, pc, #52	; (adr r3, 8012d70 <__ieee754_pow+0x3b0>)
 8012d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d40:	e6d5      	b.n	8012aee <__ieee754_pow+0x12e>
 8012d42:	bf00      	nop
 8012d44:	f3af 8000 	nop.w
 8012d48:	60000000 	.word	0x60000000
 8012d4c:	3ff71547 	.word	0x3ff71547
 8012d50:	f85ddf44 	.word	0xf85ddf44
 8012d54:	3e54ae0b 	.word	0x3e54ae0b
 8012d58:	55555555 	.word	0x55555555
 8012d5c:	3fd55555 	.word	0x3fd55555
 8012d60:	652b82fe 	.word	0x652b82fe
 8012d64:	3ff71547 	.word	0x3ff71547
 8012d68:	00000000 	.word	0x00000000
 8012d6c:	bff00000 	.word	0xbff00000
 8012d70:	8800759c 	.word	0x8800759c
 8012d74:	7e37e43c 	.word	0x7e37e43c
 8012d78:	3ff00000 	.word	0x3ff00000
 8012d7c:	3fd00000 	.word	0x3fd00000
 8012d80:	3fe00000 	.word	0x3fe00000
 8012d84:	408fffff 	.word	0x408fffff
 8012d88:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8012d8c:	f04f 0200 	mov.w	r2, #0
 8012d90:	da05      	bge.n	8012d9e <__ieee754_pow+0x3de>
 8012d92:	4bd3      	ldr	r3, [pc, #844]	; (80130e0 <__ieee754_pow+0x720>)
 8012d94:	f7ed fc30 	bl	80005f8 <__aeabi_dmul>
 8012d98:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8012d9c:	460c      	mov	r4, r1
 8012d9e:	1523      	asrs	r3, r4, #20
 8012da0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012da4:	4413      	add	r3, r2
 8012da6:	9309      	str	r3, [sp, #36]	; 0x24
 8012da8:	4bce      	ldr	r3, [pc, #824]	; (80130e4 <__ieee754_pow+0x724>)
 8012daa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012dae:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012db2:	429c      	cmp	r4, r3
 8012db4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012db8:	dd08      	ble.n	8012dcc <__ieee754_pow+0x40c>
 8012dba:	4bcb      	ldr	r3, [pc, #812]	; (80130e8 <__ieee754_pow+0x728>)
 8012dbc:	429c      	cmp	r4, r3
 8012dbe:	f340 815e 	ble.w	801307e <__ieee754_pow+0x6be>
 8012dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012dc4:	3301      	adds	r3, #1
 8012dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8012dc8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8012dcc:	f04f 0a00 	mov.w	sl, #0
 8012dd0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8012dd4:	930c      	str	r3, [sp, #48]	; 0x30
 8012dd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012dd8:	4bc4      	ldr	r3, [pc, #784]	; (80130ec <__ieee754_pow+0x72c>)
 8012dda:	4413      	add	r3, r2
 8012ddc:	ed93 7b00 	vldr	d7, [r3]
 8012de0:	4629      	mov	r1, r5
 8012de2:	ec53 2b17 	vmov	r2, r3, d7
 8012de6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012dea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012dee:	f7ed fa4b 	bl	8000288 <__aeabi_dsub>
 8012df2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012df6:	4606      	mov	r6, r0
 8012df8:	460f      	mov	r7, r1
 8012dfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012dfe:	f7ed fa45 	bl	800028c <__adddf3>
 8012e02:	4602      	mov	r2, r0
 8012e04:	460b      	mov	r3, r1
 8012e06:	2000      	movs	r0, #0
 8012e08:	49b9      	ldr	r1, [pc, #740]	; (80130f0 <__ieee754_pow+0x730>)
 8012e0a:	f7ed fd1f 	bl	800084c <__aeabi_ddiv>
 8012e0e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8012e12:	4602      	mov	r2, r0
 8012e14:	460b      	mov	r3, r1
 8012e16:	4630      	mov	r0, r6
 8012e18:	4639      	mov	r1, r7
 8012e1a:	f7ed fbed 	bl	80005f8 <__aeabi_dmul>
 8012e1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012e22:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8012e26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012e2a:	2300      	movs	r3, #0
 8012e2c:	9302      	str	r3, [sp, #8]
 8012e2e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012e32:	106d      	asrs	r5, r5, #1
 8012e34:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8012e38:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8012e42:	4640      	mov	r0, r8
 8012e44:	4649      	mov	r1, r9
 8012e46:	4614      	mov	r4, r2
 8012e48:	461d      	mov	r5, r3
 8012e4a:	f7ed fbd5 	bl	80005f8 <__aeabi_dmul>
 8012e4e:	4602      	mov	r2, r0
 8012e50:	460b      	mov	r3, r1
 8012e52:	4630      	mov	r0, r6
 8012e54:	4639      	mov	r1, r7
 8012e56:	f7ed fa17 	bl	8000288 <__aeabi_dsub>
 8012e5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012e5e:	4606      	mov	r6, r0
 8012e60:	460f      	mov	r7, r1
 8012e62:	4620      	mov	r0, r4
 8012e64:	4629      	mov	r1, r5
 8012e66:	f7ed fa0f 	bl	8000288 <__aeabi_dsub>
 8012e6a:	4602      	mov	r2, r0
 8012e6c:	460b      	mov	r3, r1
 8012e6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012e72:	f7ed fa09 	bl	8000288 <__aeabi_dsub>
 8012e76:	4642      	mov	r2, r8
 8012e78:	464b      	mov	r3, r9
 8012e7a:	f7ed fbbd 	bl	80005f8 <__aeabi_dmul>
 8012e7e:	4602      	mov	r2, r0
 8012e80:	460b      	mov	r3, r1
 8012e82:	4630      	mov	r0, r6
 8012e84:	4639      	mov	r1, r7
 8012e86:	f7ed f9ff 	bl	8000288 <__aeabi_dsub>
 8012e8a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8012e8e:	f7ed fbb3 	bl	80005f8 <__aeabi_dmul>
 8012e92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012e96:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012e9a:	4610      	mov	r0, r2
 8012e9c:	4619      	mov	r1, r3
 8012e9e:	f7ed fbab 	bl	80005f8 <__aeabi_dmul>
 8012ea2:	a37b      	add	r3, pc, #492	; (adr r3, 8013090 <__ieee754_pow+0x6d0>)
 8012ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ea8:	4604      	mov	r4, r0
 8012eaa:	460d      	mov	r5, r1
 8012eac:	f7ed fba4 	bl	80005f8 <__aeabi_dmul>
 8012eb0:	a379      	add	r3, pc, #484	; (adr r3, 8013098 <__ieee754_pow+0x6d8>)
 8012eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eb6:	f7ed f9e9 	bl	800028c <__adddf3>
 8012eba:	4622      	mov	r2, r4
 8012ebc:	462b      	mov	r3, r5
 8012ebe:	f7ed fb9b 	bl	80005f8 <__aeabi_dmul>
 8012ec2:	a377      	add	r3, pc, #476	; (adr r3, 80130a0 <__ieee754_pow+0x6e0>)
 8012ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ec8:	f7ed f9e0 	bl	800028c <__adddf3>
 8012ecc:	4622      	mov	r2, r4
 8012ece:	462b      	mov	r3, r5
 8012ed0:	f7ed fb92 	bl	80005f8 <__aeabi_dmul>
 8012ed4:	a374      	add	r3, pc, #464	; (adr r3, 80130a8 <__ieee754_pow+0x6e8>)
 8012ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eda:	f7ed f9d7 	bl	800028c <__adddf3>
 8012ede:	4622      	mov	r2, r4
 8012ee0:	462b      	mov	r3, r5
 8012ee2:	f7ed fb89 	bl	80005f8 <__aeabi_dmul>
 8012ee6:	a372      	add	r3, pc, #456	; (adr r3, 80130b0 <__ieee754_pow+0x6f0>)
 8012ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eec:	f7ed f9ce 	bl	800028c <__adddf3>
 8012ef0:	4622      	mov	r2, r4
 8012ef2:	462b      	mov	r3, r5
 8012ef4:	f7ed fb80 	bl	80005f8 <__aeabi_dmul>
 8012ef8:	a36f      	add	r3, pc, #444	; (adr r3, 80130b8 <__ieee754_pow+0x6f8>)
 8012efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012efe:	f7ed f9c5 	bl	800028c <__adddf3>
 8012f02:	4622      	mov	r2, r4
 8012f04:	4606      	mov	r6, r0
 8012f06:	460f      	mov	r7, r1
 8012f08:	462b      	mov	r3, r5
 8012f0a:	4620      	mov	r0, r4
 8012f0c:	4629      	mov	r1, r5
 8012f0e:	f7ed fb73 	bl	80005f8 <__aeabi_dmul>
 8012f12:	4602      	mov	r2, r0
 8012f14:	460b      	mov	r3, r1
 8012f16:	4630      	mov	r0, r6
 8012f18:	4639      	mov	r1, r7
 8012f1a:	f7ed fb6d 	bl	80005f8 <__aeabi_dmul>
 8012f1e:	4642      	mov	r2, r8
 8012f20:	4604      	mov	r4, r0
 8012f22:	460d      	mov	r5, r1
 8012f24:	464b      	mov	r3, r9
 8012f26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012f2a:	f7ed f9af 	bl	800028c <__adddf3>
 8012f2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012f32:	f7ed fb61 	bl	80005f8 <__aeabi_dmul>
 8012f36:	4622      	mov	r2, r4
 8012f38:	462b      	mov	r3, r5
 8012f3a:	f7ed f9a7 	bl	800028c <__adddf3>
 8012f3e:	4642      	mov	r2, r8
 8012f40:	4606      	mov	r6, r0
 8012f42:	460f      	mov	r7, r1
 8012f44:	464b      	mov	r3, r9
 8012f46:	4640      	mov	r0, r8
 8012f48:	4649      	mov	r1, r9
 8012f4a:	f7ed fb55 	bl	80005f8 <__aeabi_dmul>
 8012f4e:	2200      	movs	r2, #0
 8012f50:	4b68      	ldr	r3, [pc, #416]	; (80130f4 <__ieee754_pow+0x734>)
 8012f52:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012f56:	f7ed f999 	bl	800028c <__adddf3>
 8012f5a:	4632      	mov	r2, r6
 8012f5c:	463b      	mov	r3, r7
 8012f5e:	f7ed f995 	bl	800028c <__adddf3>
 8012f62:	9802      	ldr	r0, [sp, #8]
 8012f64:	460d      	mov	r5, r1
 8012f66:	4604      	mov	r4, r0
 8012f68:	4602      	mov	r2, r0
 8012f6a:	460b      	mov	r3, r1
 8012f6c:	4640      	mov	r0, r8
 8012f6e:	4649      	mov	r1, r9
 8012f70:	f7ed fb42 	bl	80005f8 <__aeabi_dmul>
 8012f74:	2200      	movs	r2, #0
 8012f76:	4680      	mov	r8, r0
 8012f78:	4689      	mov	r9, r1
 8012f7a:	4b5e      	ldr	r3, [pc, #376]	; (80130f4 <__ieee754_pow+0x734>)
 8012f7c:	4620      	mov	r0, r4
 8012f7e:	4629      	mov	r1, r5
 8012f80:	f7ed f982 	bl	8000288 <__aeabi_dsub>
 8012f84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012f88:	f7ed f97e 	bl	8000288 <__aeabi_dsub>
 8012f8c:	4602      	mov	r2, r0
 8012f8e:	460b      	mov	r3, r1
 8012f90:	4630      	mov	r0, r6
 8012f92:	4639      	mov	r1, r7
 8012f94:	f7ed f978 	bl	8000288 <__aeabi_dsub>
 8012f98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012f9c:	f7ed fb2c 	bl	80005f8 <__aeabi_dmul>
 8012fa0:	4622      	mov	r2, r4
 8012fa2:	4606      	mov	r6, r0
 8012fa4:	460f      	mov	r7, r1
 8012fa6:	462b      	mov	r3, r5
 8012fa8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012fac:	f7ed fb24 	bl	80005f8 <__aeabi_dmul>
 8012fb0:	4602      	mov	r2, r0
 8012fb2:	460b      	mov	r3, r1
 8012fb4:	4630      	mov	r0, r6
 8012fb6:	4639      	mov	r1, r7
 8012fb8:	f7ed f968 	bl	800028c <__adddf3>
 8012fbc:	4606      	mov	r6, r0
 8012fbe:	460f      	mov	r7, r1
 8012fc0:	4602      	mov	r2, r0
 8012fc2:	460b      	mov	r3, r1
 8012fc4:	4640      	mov	r0, r8
 8012fc6:	4649      	mov	r1, r9
 8012fc8:	f7ed f960 	bl	800028c <__adddf3>
 8012fcc:	9802      	ldr	r0, [sp, #8]
 8012fce:	a33c      	add	r3, pc, #240	; (adr r3, 80130c0 <__ieee754_pow+0x700>)
 8012fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fd4:	4604      	mov	r4, r0
 8012fd6:	460d      	mov	r5, r1
 8012fd8:	f7ed fb0e 	bl	80005f8 <__aeabi_dmul>
 8012fdc:	4642      	mov	r2, r8
 8012fde:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012fe2:	464b      	mov	r3, r9
 8012fe4:	4620      	mov	r0, r4
 8012fe6:	4629      	mov	r1, r5
 8012fe8:	f7ed f94e 	bl	8000288 <__aeabi_dsub>
 8012fec:	4602      	mov	r2, r0
 8012fee:	460b      	mov	r3, r1
 8012ff0:	4630      	mov	r0, r6
 8012ff2:	4639      	mov	r1, r7
 8012ff4:	f7ed f948 	bl	8000288 <__aeabi_dsub>
 8012ff8:	a333      	add	r3, pc, #204	; (adr r3, 80130c8 <__ieee754_pow+0x708>)
 8012ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ffe:	f7ed fafb 	bl	80005f8 <__aeabi_dmul>
 8013002:	a333      	add	r3, pc, #204	; (adr r3, 80130d0 <__ieee754_pow+0x710>)
 8013004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013008:	4606      	mov	r6, r0
 801300a:	460f      	mov	r7, r1
 801300c:	4620      	mov	r0, r4
 801300e:	4629      	mov	r1, r5
 8013010:	f7ed faf2 	bl	80005f8 <__aeabi_dmul>
 8013014:	4602      	mov	r2, r0
 8013016:	460b      	mov	r3, r1
 8013018:	4630      	mov	r0, r6
 801301a:	4639      	mov	r1, r7
 801301c:	f7ed f936 	bl	800028c <__adddf3>
 8013020:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013022:	4b35      	ldr	r3, [pc, #212]	; (80130f8 <__ieee754_pow+0x738>)
 8013024:	4413      	add	r3, r2
 8013026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801302a:	f7ed f92f 	bl	800028c <__adddf3>
 801302e:	4604      	mov	r4, r0
 8013030:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013032:	460d      	mov	r5, r1
 8013034:	f7ed fa76 	bl	8000524 <__aeabi_i2d>
 8013038:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801303a:	4b30      	ldr	r3, [pc, #192]	; (80130fc <__ieee754_pow+0x73c>)
 801303c:	4413      	add	r3, r2
 801303e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013042:	4606      	mov	r6, r0
 8013044:	460f      	mov	r7, r1
 8013046:	4622      	mov	r2, r4
 8013048:	462b      	mov	r3, r5
 801304a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801304e:	f7ed f91d 	bl	800028c <__adddf3>
 8013052:	4642      	mov	r2, r8
 8013054:	464b      	mov	r3, r9
 8013056:	f7ed f919 	bl	800028c <__adddf3>
 801305a:	4632      	mov	r2, r6
 801305c:	463b      	mov	r3, r7
 801305e:	f7ed f915 	bl	800028c <__adddf3>
 8013062:	9802      	ldr	r0, [sp, #8]
 8013064:	4632      	mov	r2, r6
 8013066:	463b      	mov	r3, r7
 8013068:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801306c:	f7ed f90c 	bl	8000288 <__aeabi_dsub>
 8013070:	4642      	mov	r2, r8
 8013072:	464b      	mov	r3, r9
 8013074:	f7ed f908 	bl	8000288 <__aeabi_dsub>
 8013078:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801307c:	e607      	b.n	8012c8e <__ieee754_pow+0x2ce>
 801307e:	f04f 0a01 	mov.w	sl, #1
 8013082:	e6a5      	b.n	8012dd0 <__ieee754_pow+0x410>
 8013084:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80130d8 <__ieee754_pow+0x718>
 8013088:	e613      	b.n	8012cb2 <__ieee754_pow+0x2f2>
 801308a:	bf00      	nop
 801308c:	f3af 8000 	nop.w
 8013090:	4a454eef 	.word	0x4a454eef
 8013094:	3fca7e28 	.word	0x3fca7e28
 8013098:	93c9db65 	.word	0x93c9db65
 801309c:	3fcd864a 	.word	0x3fcd864a
 80130a0:	a91d4101 	.word	0xa91d4101
 80130a4:	3fd17460 	.word	0x3fd17460
 80130a8:	518f264d 	.word	0x518f264d
 80130ac:	3fd55555 	.word	0x3fd55555
 80130b0:	db6fabff 	.word	0xdb6fabff
 80130b4:	3fdb6db6 	.word	0x3fdb6db6
 80130b8:	33333303 	.word	0x33333303
 80130bc:	3fe33333 	.word	0x3fe33333
 80130c0:	e0000000 	.word	0xe0000000
 80130c4:	3feec709 	.word	0x3feec709
 80130c8:	dc3a03fd 	.word	0xdc3a03fd
 80130cc:	3feec709 	.word	0x3feec709
 80130d0:	145b01f5 	.word	0x145b01f5
 80130d4:	be3e2fe0 	.word	0xbe3e2fe0
 80130d8:	00000000 	.word	0x00000000
 80130dc:	3ff00000 	.word	0x3ff00000
 80130e0:	43400000 	.word	0x43400000
 80130e4:	0003988e 	.word	0x0003988e
 80130e8:	000bb679 	.word	0x000bb679
 80130ec:	080156b8 	.word	0x080156b8
 80130f0:	3ff00000 	.word	0x3ff00000
 80130f4:	40080000 	.word	0x40080000
 80130f8:	080156d8 	.word	0x080156d8
 80130fc:	080156c8 	.word	0x080156c8
 8013100:	a3b4      	add	r3, pc, #720	; (adr r3, 80133d4 <__ieee754_pow+0xa14>)
 8013102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013106:	4640      	mov	r0, r8
 8013108:	4649      	mov	r1, r9
 801310a:	f7ed f8bf 	bl	800028c <__adddf3>
 801310e:	4622      	mov	r2, r4
 8013110:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013114:	462b      	mov	r3, r5
 8013116:	4630      	mov	r0, r6
 8013118:	4639      	mov	r1, r7
 801311a:	f7ed f8b5 	bl	8000288 <__aeabi_dsub>
 801311e:	4602      	mov	r2, r0
 8013120:	460b      	mov	r3, r1
 8013122:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013126:	f7ed fcf7 	bl	8000b18 <__aeabi_dcmpgt>
 801312a:	2800      	cmp	r0, #0
 801312c:	f47f adfe 	bne.w	8012d2c <__ieee754_pow+0x36c>
 8013130:	4aa3      	ldr	r2, [pc, #652]	; (80133c0 <__ieee754_pow+0xa00>)
 8013132:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013136:	4293      	cmp	r3, r2
 8013138:	f340 810a 	ble.w	8013350 <__ieee754_pow+0x990>
 801313c:	151b      	asrs	r3, r3, #20
 801313e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8013142:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8013146:	fa4a f303 	asr.w	r3, sl, r3
 801314a:	445b      	add	r3, fp
 801314c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8013150:	4e9c      	ldr	r6, [pc, #624]	; (80133c4 <__ieee754_pow+0xa04>)
 8013152:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8013156:	4116      	asrs	r6, r2
 8013158:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801315c:	2000      	movs	r0, #0
 801315e:	ea23 0106 	bic.w	r1, r3, r6
 8013162:	f1c2 0214 	rsb	r2, r2, #20
 8013166:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801316a:	fa4a fa02 	asr.w	sl, sl, r2
 801316e:	f1bb 0f00 	cmp.w	fp, #0
 8013172:	4602      	mov	r2, r0
 8013174:	460b      	mov	r3, r1
 8013176:	4620      	mov	r0, r4
 8013178:	4629      	mov	r1, r5
 801317a:	bfb8      	it	lt
 801317c:	f1ca 0a00 	rsblt	sl, sl, #0
 8013180:	f7ed f882 	bl	8000288 <__aeabi_dsub>
 8013184:	e9cd 0100 	strd	r0, r1, [sp]
 8013188:	4642      	mov	r2, r8
 801318a:	464b      	mov	r3, r9
 801318c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013190:	f7ed f87c 	bl	800028c <__adddf3>
 8013194:	2000      	movs	r0, #0
 8013196:	a378      	add	r3, pc, #480	; (adr r3, 8013378 <__ieee754_pow+0x9b8>)
 8013198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801319c:	4604      	mov	r4, r0
 801319e:	460d      	mov	r5, r1
 80131a0:	f7ed fa2a 	bl	80005f8 <__aeabi_dmul>
 80131a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80131a8:	4606      	mov	r6, r0
 80131aa:	460f      	mov	r7, r1
 80131ac:	4620      	mov	r0, r4
 80131ae:	4629      	mov	r1, r5
 80131b0:	f7ed f86a 	bl	8000288 <__aeabi_dsub>
 80131b4:	4602      	mov	r2, r0
 80131b6:	460b      	mov	r3, r1
 80131b8:	4640      	mov	r0, r8
 80131ba:	4649      	mov	r1, r9
 80131bc:	f7ed f864 	bl	8000288 <__aeabi_dsub>
 80131c0:	a36f      	add	r3, pc, #444	; (adr r3, 8013380 <__ieee754_pow+0x9c0>)
 80131c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131c6:	f7ed fa17 	bl	80005f8 <__aeabi_dmul>
 80131ca:	a36f      	add	r3, pc, #444	; (adr r3, 8013388 <__ieee754_pow+0x9c8>)
 80131cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131d0:	4680      	mov	r8, r0
 80131d2:	4689      	mov	r9, r1
 80131d4:	4620      	mov	r0, r4
 80131d6:	4629      	mov	r1, r5
 80131d8:	f7ed fa0e 	bl	80005f8 <__aeabi_dmul>
 80131dc:	4602      	mov	r2, r0
 80131de:	460b      	mov	r3, r1
 80131e0:	4640      	mov	r0, r8
 80131e2:	4649      	mov	r1, r9
 80131e4:	f7ed f852 	bl	800028c <__adddf3>
 80131e8:	4604      	mov	r4, r0
 80131ea:	460d      	mov	r5, r1
 80131ec:	4602      	mov	r2, r0
 80131ee:	460b      	mov	r3, r1
 80131f0:	4630      	mov	r0, r6
 80131f2:	4639      	mov	r1, r7
 80131f4:	f7ed f84a 	bl	800028c <__adddf3>
 80131f8:	4632      	mov	r2, r6
 80131fa:	463b      	mov	r3, r7
 80131fc:	4680      	mov	r8, r0
 80131fe:	4689      	mov	r9, r1
 8013200:	f7ed f842 	bl	8000288 <__aeabi_dsub>
 8013204:	4602      	mov	r2, r0
 8013206:	460b      	mov	r3, r1
 8013208:	4620      	mov	r0, r4
 801320a:	4629      	mov	r1, r5
 801320c:	f7ed f83c 	bl	8000288 <__aeabi_dsub>
 8013210:	4642      	mov	r2, r8
 8013212:	4606      	mov	r6, r0
 8013214:	460f      	mov	r7, r1
 8013216:	464b      	mov	r3, r9
 8013218:	4640      	mov	r0, r8
 801321a:	4649      	mov	r1, r9
 801321c:	f7ed f9ec 	bl	80005f8 <__aeabi_dmul>
 8013220:	a35b      	add	r3, pc, #364	; (adr r3, 8013390 <__ieee754_pow+0x9d0>)
 8013222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013226:	4604      	mov	r4, r0
 8013228:	460d      	mov	r5, r1
 801322a:	f7ed f9e5 	bl	80005f8 <__aeabi_dmul>
 801322e:	a35a      	add	r3, pc, #360	; (adr r3, 8013398 <__ieee754_pow+0x9d8>)
 8013230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013234:	f7ed f828 	bl	8000288 <__aeabi_dsub>
 8013238:	4622      	mov	r2, r4
 801323a:	462b      	mov	r3, r5
 801323c:	f7ed f9dc 	bl	80005f8 <__aeabi_dmul>
 8013240:	a357      	add	r3, pc, #348	; (adr r3, 80133a0 <__ieee754_pow+0x9e0>)
 8013242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013246:	f7ed f821 	bl	800028c <__adddf3>
 801324a:	4622      	mov	r2, r4
 801324c:	462b      	mov	r3, r5
 801324e:	f7ed f9d3 	bl	80005f8 <__aeabi_dmul>
 8013252:	a355      	add	r3, pc, #340	; (adr r3, 80133a8 <__ieee754_pow+0x9e8>)
 8013254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013258:	f7ed f816 	bl	8000288 <__aeabi_dsub>
 801325c:	4622      	mov	r2, r4
 801325e:	462b      	mov	r3, r5
 8013260:	f7ed f9ca 	bl	80005f8 <__aeabi_dmul>
 8013264:	a352      	add	r3, pc, #328	; (adr r3, 80133b0 <__ieee754_pow+0x9f0>)
 8013266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801326a:	f7ed f80f 	bl	800028c <__adddf3>
 801326e:	4622      	mov	r2, r4
 8013270:	462b      	mov	r3, r5
 8013272:	f7ed f9c1 	bl	80005f8 <__aeabi_dmul>
 8013276:	4602      	mov	r2, r0
 8013278:	460b      	mov	r3, r1
 801327a:	4640      	mov	r0, r8
 801327c:	4649      	mov	r1, r9
 801327e:	f7ed f803 	bl	8000288 <__aeabi_dsub>
 8013282:	4604      	mov	r4, r0
 8013284:	460d      	mov	r5, r1
 8013286:	4602      	mov	r2, r0
 8013288:	460b      	mov	r3, r1
 801328a:	4640      	mov	r0, r8
 801328c:	4649      	mov	r1, r9
 801328e:	f7ed f9b3 	bl	80005f8 <__aeabi_dmul>
 8013292:	2200      	movs	r2, #0
 8013294:	e9cd 0100 	strd	r0, r1, [sp]
 8013298:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801329c:	4620      	mov	r0, r4
 801329e:	4629      	mov	r1, r5
 80132a0:	f7ec fff2 	bl	8000288 <__aeabi_dsub>
 80132a4:	4602      	mov	r2, r0
 80132a6:	460b      	mov	r3, r1
 80132a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80132ac:	f7ed face 	bl	800084c <__aeabi_ddiv>
 80132b0:	4632      	mov	r2, r6
 80132b2:	4604      	mov	r4, r0
 80132b4:	460d      	mov	r5, r1
 80132b6:	463b      	mov	r3, r7
 80132b8:	4640      	mov	r0, r8
 80132ba:	4649      	mov	r1, r9
 80132bc:	f7ed f99c 	bl	80005f8 <__aeabi_dmul>
 80132c0:	4632      	mov	r2, r6
 80132c2:	463b      	mov	r3, r7
 80132c4:	f7ec ffe2 	bl	800028c <__adddf3>
 80132c8:	4602      	mov	r2, r0
 80132ca:	460b      	mov	r3, r1
 80132cc:	4620      	mov	r0, r4
 80132ce:	4629      	mov	r1, r5
 80132d0:	f7ec ffda 	bl	8000288 <__aeabi_dsub>
 80132d4:	4642      	mov	r2, r8
 80132d6:	464b      	mov	r3, r9
 80132d8:	f7ec ffd6 	bl	8000288 <__aeabi_dsub>
 80132dc:	4602      	mov	r2, r0
 80132de:	460b      	mov	r3, r1
 80132e0:	2000      	movs	r0, #0
 80132e2:	4939      	ldr	r1, [pc, #228]	; (80133c8 <__ieee754_pow+0xa08>)
 80132e4:	f7ec ffd0 	bl	8000288 <__aeabi_dsub>
 80132e8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80132ec:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80132f0:	4602      	mov	r2, r0
 80132f2:	460b      	mov	r3, r1
 80132f4:	da2f      	bge.n	8013356 <__ieee754_pow+0x996>
 80132f6:	4650      	mov	r0, sl
 80132f8:	ec43 2b10 	vmov	d0, r2, r3
 80132fc:	f001 faf0 	bl	80148e0 <scalbn>
 8013300:	ec51 0b10 	vmov	r0, r1, d0
 8013304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013308:	f7ff bbf1 	b.w	8012aee <__ieee754_pow+0x12e>
 801330c:	4b2f      	ldr	r3, [pc, #188]	; (80133cc <__ieee754_pow+0xa0c>)
 801330e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8013312:	429e      	cmp	r6, r3
 8013314:	f77f af0c 	ble.w	8013130 <__ieee754_pow+0x770>
 8013318:	4b2d      	ldr	r3, [pc, #180]	; (80133d0 <__ieee754_pow+0xa10>)
 801331a:	440b      	add	r3, r1
 801331c:	4303      	orrs	r3, r0
 801331e:	d00b      	beq.n	8013338 <__ieee754_pow+0x978>
 8013320:	a325      	add	r3, pc, #148	; (adr r3, 80133b8 <__ieee754_pow+0x9f8>)
 8013322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801332a:	f7ed f965 	bl	80005f8 <__aeabi_dmul>
 801332e:	a322      	add	r3, pc, #136	; (adr r3, 80133b8 <__ieee754_pow+0x9f8>)
 8013330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013334:	f7ff bbdb 	b.w	8012aee <__ieee754_pow+0x12e>
 8013338:	4622      	mov	r2, r4
 801333a:	462b      	mov	r3, r5
 801333c:	f7ec ffa4 	bl	8000288 <__aeabi_dsub>
 8013340:	4642      	mov	r2, r8
 8013342:	464b      	mov	r3, r9
 8013344:	f7ed fbde 	bl	8000b04 <__aeabi_dcmpge>
 8013348:	2800      	cmp	r0, #0
 801334a:	f43f aef1 	beq.w	8013130 <__ieee754_pow+0x770>
 801334e:	e7e7      	b.n	8013320 <__ieee754_pow+0x960>
 8013350:	f04f 0a00 	mov.w	sl, #0
 8013354:	e718      	b.n	8013188 <__ieee754_pow+0x7c8>
 8013356:	4621      	mov	r1, r4
 8013358:	e7d4      	b.n	8013304 <__ieee754_pow+0x944>
 801335a:	2000      	movs	r0, #0
 801335c:	491a      	ldr	r1, [pc, #104]	; (80133c8 <__ieee754_pow+0xa08>)
 801335e:	f7ff bb8f 	b.w	8012a80 <__ieee754_pow+0xc0>
 8013362:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013366:	f7ff bb8b 	b.w	8012a80 <__ieee754_pow+0xc0>
 801336a:	4630      	mov	r0, r6
 801336c:	4639      	mov	r1, r7
 801336e:	f7ff bb87 	b.w	8012a80 <__ieee754_pow+0xc0>
 8013372:	4693      	mov	fp, r2
 8013374:	f7ff bb98 	b.w	8012aa8 <__ieee754_pow+0xe8>
 8013378:	00000000 	.word	0x00000000
 801337c:	3fe62e43 	.word	0x3fe62e43
 8013380:	fefa39ef 	.word	0xfefa39ef
 8013384:	3fe62e42 	.word	0x3fe62e42
 8013388:	0ca86c39 	.word	0x0ca86c39
 801338c:	be205c61 	.word	0xbe205c61
 8013390:	72bea4d0 	.word	0x72bea4d0
 8013394:	3e663769 	.word	0x3e663769
 8013398:	c5d26bf1 	.word	0xc5d26bf1
 801339c:	3ebbbd41 	.word	0x3ebbbd41
 80133a0:	af25de2c 	.word	0xaf25de2c
 80133a4:	3f11566a 	.word	0x3f11566a
 80133a8:	16bebd93 	.word	0x16bebd93
 80133ac:	3f66c16c 	.word	0x3f66c16c
 80133b0:	5555553e 	.word	0x5555553e
 80133b4:	3fc55555 	.word	0x3fc55555
 80133b8:	c2f8f359 	.word	0xc2f8f359
 80133bc:	01a56e1f 	.word	0x01a56e1f
 80133c0:	3fe00000 	.word	0x3fe00000
 80133c4:	000fffff 	.word	0x000fffff
 80133c8:	3ff00000 	.word	0x3ff00000
 80133cc:	4090cbff 	.word	0x4090cbff
 80133d0:	3f6f3400 	.word	0x3f6f3400
 80133d4:	652b82fe 	.word	0x652b82fe
 80133d8:	3c971547 	.word	0x3c971547
 80133dc:	00000000 	.word	0x00000000

080133e0 <__ieee754_rem_pio2>:
 80133e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133e4:	ec57 6b10 	vmov	r6, r7, d0
 80133e8:	4bc3      	ldr	r3, [pc, #780]	; (80136f8 <__ieee754_rem_pio2+0x318>)
 80133ea:	b08d      	sub	sp, #52	; 0x34
 80133ec:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80133f0:	4598      	cmp	r8, r3
 80133f2:	4604      	mov	r4, r0
 80133f4:	9704      	str	r7, [sp, #16]
 80133f6:	dc07      	bgt.n	8013408 <__ieee754_rem_pio2+0x28>
 80133f8:	2200      	movs	r2, #0
 80133fa:	2300      	movs	r3, #0
 80133fc:	ed84 0b00 	vstr	d0, [r4]
 8013400:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8013404:	2500      	movs	r5, #0
 8013406:	e027      	b.n	8013458 <__ieee754_rem_pio2+0x78>
 8013408:	4bbc      	ldr	r3, [pc, #752]	; (80136fc <__ieee754_rem_pio2+0x31c>)
 801340a:	4598      	cmp	r8, r3
 801340c:	dc75      	bgt.n	80134fa <__ieee754_rem_pio2+0x11a>
 801340e:	9b04      	ldr	r3, [sp, #16]
 8013410:	4dbb      	ldr	r5, [pc, #748]	; (8013700 <__ieee754_rem_pio2+0x320>)
 8013412:	2b00      	cmp	r3, #0
 8013414:	ee10 0a10 	vmov	r0, s0
 8013418:	a3a9      	add	r3, pc, #676	; (adr r3, 80136c0 <__ieee754_rem_pio2+0x2e0>)
 801341a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801341e:	4639      	mov	r1, r7
 8013420:	dd36      	ble.n	8013490 <__ieee754_rem_pio2+0xb0>
 8013422:	f7ec ff31 	bl	8000288 <__aeabi_dsub>
 8013426:	45a8      	cmp	r8, r5
 8013428:	4606      	mov	r6, r0
 801342a:	460f      	mov	r7, r1
 801342c:	d018      	beq.n	8013460 <__ieee754_rem_pio2+0x80>
 801342e:	a3a6      	add	r3, pc, #664	; (adr r3, 80136c8 <__ieee754_rem_pio2+0x2e8>)
 8013430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013434:	f7ec ff28 	bl	8000288 <__aeabi_dsub>
 8013438:	4602      	mov	r2, r0
 801343a:	460b      	mov	r3, r1
 801343c:	e9c4 2300 	strd	r2, r3, [r4]
 8013440:	4630      	mov	r0, r6
 8013442:	4639      	mov	r1, r7
 8013444:	f7ec ff20 	bl	8000288 <__aeabi_dsub>
 8013448:	a39f      	add	r3, pc, #636	; (adr r3, 80136c8 <__ieee754_rem_pio2+0x2e8>)
 801344a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801344e:	f7ec ff1b 	bl	8000288 <__aeabi_dsub>
 8013452:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013456:	2501      	movs	r5, #1
 8013458:	4628      	mov	r0, r5
 801345a:	b00d      	add	sp, #52	; 0x34
 801345c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013460:	a39b      	add	r3, pc, #620	; (adr r3, 80136d0 <__ieee754_rem_pio2+0x2f0>)
 8013462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013466:	f7ec ff0f 	bl	8000288 <__aeabi_dsub>
 801346a:	a39b      	add	r3, pc, #620	; (adr r3, 80136d8 <__ieee754_rem_pio2+0x2f8>)
 801346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013470:	4606      	mov	r6, r0
 8013472:	460f      	mov	r7, r1
 8013474:	f7ec ff08 	bl	8000288 <__aeabi_dsub>
 8013478:	4602      	mov	r2, r0
 801347a:	460b      	mov	r3, r1
 801347c:	e9c4 2300 	strd	r2, r3, [r4]
 8013480:	4630      	mov	r0, r6
 8013482:	4639      	mov	r1, r7
 8013484:	f7ec ff00 	bl	8000288 <__aeabi_dsub>
 8013488:	a393      	add	r3, pc, #588	; (adr r3, 80136d8 <__ieee754_rem_pio2+0x2f8>)
 801348a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801348e:	e7de      	b.n	801344e <__ieee754_rem_pio2+0x6e>
 8013490:	f7ec fefc 	bl	800028c <__adddf3>
 8013494:	45a8      	cmp	r8, r5
 8013496:	4606      	mov	r6, r0
 8013498:	460f      	mov	r7, r1
 801349a:	d016      	beq.n	80134ca <__ieee754_rem_pio2+0xea>
 801349c:	a38a      	add	r3, pc, #552	; (adr r3, 80136c8 <__ieee754_rem_pio2+0x2e8>)
 801349e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134a2:	f7ec fef3 	bl	800028c <__adddf3>
 80134a6:	4602      	mov	r2, r0
 80134a8:	460b      	mov	r3, r1
 80134aa:	e9c4 2300 	strd	r2, r3, [r4]
 80134ae:	4630      	mov	r0, r6
 80134b0:	4639      	mov	r1, r7
 80134b2:	f7ec fee9 	bl	8000288 <__aeabi_dsub>
 80134b6:	a384      	add	r3, pc, #528	; (adr r3, 80136c8 <__ieee754_rem_pio2+0x2e8>)
 80134b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134bc:	f7ec fee6 	bl	800028c <__adddf3>
 80134c0:	f04f 35ff 	mov.w	r5, #4294967295
 80134c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80134c8:	e7c6      	b.n	8013458 <__ieee754_rem_pio2+0x78>
 80134ca:	a381      	add	r3, pc, #516	; (adr r3, 80136d0 <__ieee754_rem_pio2+0x2f0>)
 80134cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134d0:	f7ec fedc 	bl	800028c <__adddf3>
 80134d4:	a380      	add	r3, pc, #512	; (adr r3, 80136d8 <__ieee754_rem_pio2+0x2f8>)
 80134d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134da:	4606      	mov	r6, r0
 80134dc:	460f      	mov	r7, r1
 80134de:	f7ec fed5 	bl	800028c <__adddf3>
 80134e2:	4602      	mov	r2, r0
 80134e4:	460b      	mov	r3, r1
 80134e6:	e9c4 2300 	strd	r2, r3, [r4]
 80134ea:	4630      	mov	r0, r6
 80134ec:	4639      	mov	r1, r7
 80134ee:	f7ec fecb 	bl	8000288 <__aeabi_dsub>
 80134f2:	a379      	add	r3, pc, #484	; (adr r3, 80136d8 <__ieee754_rem_pio2+0x2f8>)
 80134f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134f8:	e7e0      	b.n	80134bc <__ieee754_rem_pio2+0xdc>
 80134fa:	4b82      	ldr	r3, [pc, #520]	; (8013704 <__ieee754_rem_pio2+0x324>)
 80134fc:	4598      	cmp	r8, r3
 80134fe:	f300 80d0 	bgt.w	80136a2 <__ieee754_rem_pio2+0x2c2>
 8013502:	f001 f94d 	bl	80147a0 <fabs>
 8013506:	ec57 6b10 	vmov	r6, r7, d0
 801350a:	ee10 0a10 	vmov	r0, s0
 801350e:	a374      	add	r3, pc, #464	; (adr r3, 80136e0 <__ieee754_rem_pio2+0x300>)
 8013510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013514:	4639      	mov	r1, r7
 8013516:	f7ed f86f 	bl	80005f8 <__aeabi_dmul>
 801351a:	2200      	movs	r2, #0
 801351c:	4b7a      	ldr	r3, [pc, #488]	; (8013708 <__ieee754_rem_pio2+0x328>)
 801351e:	f7ec feb5 	bl	800028c <__adddf3>
 8013522:	f7ed fb19 	bl	8000b58 <__aeabi_d2iz>
 8013526:	4605      	mov	r5, r0
 8013528:	f7ec fffc 	bl	8000524 <__aeabi_i2d>
 801352c:	a364      	add	r3, pc, #400	; (adr r3, 80136c0 <__ieee754_rem_pio2+0x2e0>)
 801352e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013532:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013536:	f7ed f85f 	bl	80005f8 <__aeabi_dmul>
 801353a:	4602      	mov	r2, r0
 801353c:	460b      	mov	r3, r1
 801353e:	4630      	mov	r0, r6
 8013540:	4639      	mov	r1, r7
 8013542:	f7ec fea1 	bl	8000288 <__aeabi_dsub>
 8013546:	a360      	add	r3, pc, #384	; (adr r3, 80136c8 <__ieee754_rem_pio2+0x2e8>)
 8013548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801354c:	4682      	mov	sl, r0
 801354e:	468b      	mov	fp, r1
 8013550:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013554:	f7ed f850 	bl	80005f8 <__aeabi_dmul>
 8013558:	2d1f      	cmp	r5, #31
 801355a:	4606      	mov	r6, r0
 801355c:	460f      	mov	r7, r1
 801355e:	dc0c      	bgt.n	801357a <__ieee754_rem_pio2+0x19a>
 8013560:	1e6a      	subs	r2, r5, #1
 8013562:	4b6a      	ldr	r3, [pc, #424]	; (801370c <__ieee754_rem_pio2+0x32c>)
 8013564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013568:	4543      	cmp	r3, r8
 801356a:	d006      	beq.n	801357a <__ieee754_rem_pio2+0x19a>
 801356c:	4632      	mov	r2, r6
 801356e:	463b      	mov	r3, r7
 8013570:	4650      	mov	r0, sl
 8013572:	4659      	mov	r1, fp
 8013574:	f7ec fe88 	bl	8000288 <__aeabi_dsub>
 8013578:	e00e      	b.n	8013598 <__ieee754_rem_pio2+0x1b8>
 801357a:	4632      	mov	r2, r6
 801357c:	463b      	mov	r3, r7
 801357e:	4650      	mov	r0, sl
 8013580:	4659      	mov	r1, fp
 8013582:	f7ec fe81 	bl	8000288 <__aeabi_dsub>
 8013586:	ea4f 5328 	mov.w	r3, r8, asr #20
 801358a:	9305      	str	r3, [sp, #20]
 801358c:	9a05      	ldr	r2, [sp, #20]
 801358e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013592:	1ad3      	subs	r3, r2, r3
 8013594:	2b10      	cmp	r3, #16
 8013596:	dc02      	bgt.n	801359e <__ieee754_rem_pio2+0x1be>
 8013598:	e9c4 0100 	strd	r0, r1, [r4]
 801359c:	e039      	b.n	8013612 <__ieee754_rem_pio2+0x232>
 801359e:	a34c      	add	r3, pc, #304	; (adr r3, 80136d0 <__ieee754_rem_pio2+0x2f0>)
 80135a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80135a8:	f7ed f826 	bl	80005f8 <__aeabi_dmul>
 80135ac:	4606      	mov	r6, r0
 80135ae:	460f      	mov	r7, r1
 80135b0:	4602      	mov	r2, r0
 80135b2:	460b      	mov	r3, r1
 80135b4:	4650      	mov	r0, sl
 80135b6:	4659      	mov	r1, fp
 80135b8:	f7ec fe66 	bl	8000288 <__aeabi_dsub>
 80135bc:	4602      	mov	r2, r0
 80135be:	460b      	mov	r3, r1
 80135c0:	4680      	mov	r8, r0
 80135c2:	4689      	mov	r9, r1
 80135c4:	4650      	mov	r0, sl
 80135c6:	4659      	mov	r1, fp
 80135c8:	f7ec fe5e 	bl	8000288 <__aeabi_dsub>
 80135cc:	4632      	mov	r2, r6
 80135ce:	463b      	mov	r3, r7
 80135d0:	f7ec fe5a 	bl	8000288 <__aeabi_dsub>
 80135d4:	a340      	add	r3, pc, #256	; (adr r3, 80136d8 <__ieee754_rem_pio2+0x2f8>)
 80135d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135da:	4606      	mov	r6, r0
 80135dc:	460f      	mov	r7, r1
 80135de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80135e2:	f7ed f809 	bl	80005f8 <__aeabi_dmul>
 80135e6:	4632      	mov	r2, r6
 80135e8:	463b      	mov	r3, r7
 80135ea:	f7ec fe4d 	bl	8000288 <__aeabi_dsub>
 80135ee:	4602      	mov	r2, r0
 80135f0:	460b      	mov	r3, r1
 80135f2:	4606      	mov	r6, r0
 80135f4:	460f      	mov	r7, r1
 80135f6:	4640      	mov	r0, r8
 80135f8:	4649      	mov	r1, r9
 80135fa:	f7ec fe45 	bl	8000288 <__aeabi_dsub>
 80135fe:	9a05      	ldr	r2, [sp, #20]
 8013600:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013604:	1ad3      	subs	r3, r2, r3
 8013606:	2b31      	cmp	r3, #49	; 0x31
 8013608:	dc20      	bgt.n	801364c <__ieee754_rem_pio2+0x26c>
 801360a:	e9c4 0100 	strd	r0, r1, [r4]
 801360e:	46c2      	mov	sl, r8
 8013610:	46cb      	mov	fp, r9
 8013612:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013616:	4650      	mov	r0, sl
 8013618:	4642      	mov	r2, r8
 801361a:	464b      	mov	r3, r9
 801361c:	4659      	mov	r1, fp
 801361e:	f7ec fe33 	bl	8000288 <__aeabi_dsub>
 8013622:	463b      	mov	r3, r7
 8013624:	4632      	mov	r2, r6
 8013626:	f7ec fe2f 	bl	8000288 <__aeabi_dsub>
 801362a:	9b04      	ldr	r3, [sp, #16]
 801362c:	2b00      	cmp	r3, #0
 801362e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013632:	f6bf af11 	bge.w	8013458 <__ieee754_rem_pio2+0x78>
 8013636:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801363a:	6063      	str	r3, [r4, #4]
 801363c:	f8c4 8000 	str.w	r8, [r4]
 8013640:	60a0      	str	r0, [r4, #8]
 8013642:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013646:	60e3      	str	r3, [r4, #12]
 8013648:	426d      	negs	r5, r5
 801364a:	e705      	b.n	8013458 <__ieee754_rem_pio2+0x78>
 801364c:	a326      	add	r3, pc, #152	; (adr r3, 80136e8 <__ieee754_rem_pio2+0x308>)
 801364e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013652:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013656:	f7ec ffcf 	bl	80005f8 <__aeabi_dmul>
 801365a:	4606      	mov	r6, r0
 801365c:	460f      	mov	r7, r1
 801365e:	4602      	mov	r2, r0
 8013660:	460b      	mov	r3, r1
 8013662:	4640      	mov	r0, r8
 8013664:	4649      	mov	r1, r9
 8013666:	f7ec fe0f 	bl	8000288 <__aeabi_dsub>
 801366a:	4602      	mov	r2, r0
 801366c:	460b      	mov	r3, r1
 801366e:	4682      	mov	sl, r0
 8013670:	468b      	mov	fp, r1
 8013672:	4640      	mov	r0, r8
 8013674:	4649      	mov	r1, r9
 8013676:	f7ec fe07 	bl	8000288 <__aeabi_dsub>
 801367a:	4632      	mov	r2, r6
 801367c:	463b      	mov	r3, r7
 801367e:	f7ec fe03 	bl	8000288 <__aeabi_dsub>
 8013682:	a31b      	add	r3, pc, #108	; (adr r3, 80136f0 <__ieee754_rem_pio2+0x310>)
 8013684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013688:	4606      	mov	r6, r0
 801368a:	460f      	mov	r7, r1
 801368c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013690:	f7ec ffb2 	bl	80005f8 <__aeabi_dmul>
 8013694:	4632      	mov	r2, r6
 8013696:	463b      	mov	r3, r7
 8013698:	f7ec fdf6 	bl	8000288 <__aeabi_dsub>
 801369c:	4606      	mov	r6, r0
 801369e:	460f      	mov	r7, r1
 80136a0:	e764      	b.n	801356c <__ieee754_rem_pio2+0x18c>
 80136a2:	4b1b      	ldr	r3, [pc, #108]	; (8013710 <__ieee754_rem_pio2+0x330>)
 80136a4:	4598      	cmp	r8, r3
 80136a6:	dd35      	ble.n	8013714 <__ieee754_rem_pio2+0x334>
 80136a8:	ee10 2a10 	vmov	r2, s0
 80136ac:	463b      	mov	r3, r7
 80136ae:	4630      	mov	r0, r6
 80136b0:	4639      	mov	r1, r7
 80136b2:	f7ec fde9 	bl	8000288 <__aeabi_dsub>
 80136b6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80136ba:	e9c4 0100 	strd	r0, r1, [r4]
 80136be:	e6a1      	b.n	8013404 <__ieee754_rem_pio2+0x24>
 80136c0:	54400000 	.word	0x54400000
 80136c4:	3ff921fb 	.word	0x3ff921fb
 80136c8:	1a626331 	.word	0x1a626331
 80136cc:	3dd0b461 	.word	0x3dd0b461
 80136d0:	1a600000 	.word	0x1a600000
 80136d4:	3dd0b461 	.word	0x3dd0b461
 80136d8:	2e037073 	.word	0x2e037073
 80136dc:	3ba3198a 	.word	0x3ba3198a
 80136e0:	6dc9c883 	.word	0x6dc9c883
 80136e4:	3fe45f30 	.word	0x3fe45f30
 80136e8:	2e000000 	.word	0x2e000000
 80136ec:	3ba3198a 	.word	0x3ba3198a
 80136f0:	252049c1 	.word	0x252049c1
 80136f4:	397b839a 	.word	0x397b839a
 80136f8:	3fe921fb 	.word	0x3fe921fb
 80136fc:	4002d97b 	.word	0x4002d97b
 8013700:	3ff921fb 	.word	0x3ff921fb
 8013704:	413921fb 	.word	0x413921fb
 8013708:	3fe00000 	.word	0x3fe00000
 801370c:	080156e8 	.word	0x080156e8
 8013710:	7fefffff 	.word	0x7fefffff
 8013714:	ea4f 5528 	mov.w	r5, r8, asr #20
 8013718:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801371c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8013720:	4630      	mov	r0, r6
 8013722:	460f      	mov	r7, r1
 8013724:	f7ed fa18 	bl	8000b58 <__aeabi_d2iz>
 8013728:	f7ec fefc 	bl	8000524 <__aeabi_i2d>
 801372c:	4602      	mov	r2, r0
 801372e:	460b      	mov	r3, r1
 8013730:	4630      	mov	r0, r6
 8013732:	4639      	mov	r1, r7
 8013734:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013738:	f7ec fda6 	bl	8000288 <__aeabi_dsub>
 801373c:	2200      	movs	r2, #0
 801373e:	4b1f      	ldr	r3, [pc, #124]	; (80137bc <__ieee754_rem_pio2+0x3dc>)
 8013740:	f7ec ff5a 	bl	80005f8 <__aeabi_dmul>
 8013744:	460f      	mov	r7, r1
 8013746:	4606      	mov	r6, r0
 8013748:	f7ed fa06 	bl	8000b58 <__aeabi_d2iz>
 801374c:	f7ec feea 	bl	8000524 <__aeabi_i2d>
 8013750:	4602      	mov	r2, r0
 8013752:	460b      	mov	r3, r1
 8013754:	4630      	mov	r0, r6
 8013756:	4639      	mov	r1, r7
 8013758:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801375c:	f7ec fd94 	bl	8000288 <__aeabi_dsub>
 8013760:	2200      	movs	r2, #0
 8013762:	4b16      	ldr	r3, [pc, #88]	; (80137bc <__ieee754_rem_pio2+0x3dc>)
 8013764:	f7ec ff48 	bl	80005f8 <__aeabi_dmul>
 8013768:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801376c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8013770:	f04f 0803 	mov.w	r8, #3
 8013774:	2600      	movs	r6, #0
 8013776:	2700      	movs	r7, #0
 8013778:	4632      	mov	r2, r6
 801377a:	463b      	mov	r3, r7
 801377c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8013780:	f108 3aff 	add.w	sl, r8, #4294967295
 8013784:	f7ed f9a0 	bl	8000ac8 <__aeabi_dcmpeq>
 8013788:	b9b0      	cbnz	r0, 80137b8 <__ieee754_rem_pio2+0x3d8>
 801378a:	4b0d      	ldr	r3, [pc, #52]	; (80137c0 <__ieee754_rem_pio2+0x3e0>)
 801378c:	9301      	str	r3, [sp, #4]
 801378e:	2302      	movs	r3, #2
 8013790:	9300      	str	r3, [sp, #0]
 8013792:	462a      	mov	r2, r5
 8013794:	4643      	mov	r3, r8
 8013796:	4621      	mov	r1, r4
 8013798:	a806      	add	r0, sp, #24
 801379a:	f000 fa39 	bl	8013c10 <__kernel_rem_pio2>
 801379e:	9b04      	ldr	r3, [sp, #16]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	4605      	mov	r5, r0
 80137a4:	f6bf ae58 	bge.w	8013458 <__ieee754_rem_pio2+0x78>
 80137a8:	6863      	ldr	r3, [r4, #4]
 80137aa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80137ae:	6063      	str	r3, [r4, #4]
 80137b0:	68e3      	ldr	r3, [r4, #12]
 80137b2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80137b6:	e746      	b.n	8013646 <__ieee754_rem_pio2+0x266>
 80137b8:	46d0      	mov	r8, sl
 80137ba:	e7dd      	b.n	8013778 <__ieee754_rem_pio2+0x398>
 80137bc:	41700000 	.word	0x41700000
 80137c0:	08015768 	.word	0x08015768

080137c4 <__ieee754_sqrt>:
 80137c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137c8:	4955      	ldr	r1, [pc, #340]	; (8013920 <__ieee754_sqrt+0x15c>)
 80137ca:	ec55 4b10 	vmov	r4, r5, d0
 80137ce:	43a9      	bics	r1, r5
 80137d0:	462b      	mov	r3, r5
 80137d2:	462a      	mov	r2, r5
 80137d4:	d112      	bne.n	80137fc <__ieee754_sqrt+0x38>
 80137d6:	ee10 2a10 	vmov	r2, s0
 80137da:	ee10 0a10 	vmov	r0, s0
 80137de:	4629      	mov	r1, r5
 80137e0:	f7ec ff0a 	bl	80005f8 <__aeabi_dmul>
 80137e4:	4602      	mov	r2, r0
 80137e6:	460b      	mov	r3, r1
 80137e8:	4620      	mov	r0, r4
 80137ea:	4629      	mov	r1, r5
 80137ec:	f7ec fd4e 	bl	800028c <__adddf3>
 80137f0:	4604      	mov	r4, r0
 80137f2:	460d      	mov	r5, r1
 80137f4:	ec45 4b10 	vmov	d0, r4, r5
 80137f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137fc:	2d00      	cmp	r5, #0
 80137fe:	ee10 0a10 	vmov	r0, s0
 8013802:	4621      	mov	r1, r4
 8013804:	dc0f      	bgt.n	8013826 <__ieee754_sqrt+0x62>
 8013806:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801380a:	4330      	orrs	r0, r6
 801380c:	d0f2      	beq.n	80137f4 <__ieee754_sqrt+0x30>
 801380e:	b155      	cbz	r5, 8013826 <__ieee754_sqrt+0x62>
 8013810:	ee10 2a10 	vmov	r2, s0
 8013814:	4620      	mov	r0, r4
 8013816:	4629      	mov	r1, r5
 8013818:	f7ec fd36 	bl	8000288 <__aeabi_dsub>
 801381c:	4602      	mov	r2, r0
 801381e:	460b      	mov	r3, r1
 8013820:	f7ed f814 	bl	800084c <__aeabi_ddiv>
 8013824:	e7e4      	b.n	80137f0 <__ieee754_sqrt+0x2c>
 8013826:	151b      	asrs	r3, r3, #20
 8013828:	d073      	beq.n	8013912 <__ieee754_sqrt+0x14e>
 801382a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801382e:	07dd      	lsls	r5, r3, #31
 8013830:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8013834:	bf48      	it	mi
 8013836:	0fc8      	lsrmi	r0, r1, #31
 8013838:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801383c:	bf44      	itt	mi
 801383e:	0049      	lslmi	r1, r1, #1
 8013840:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8013844:	2500      	movs	r5, #0
 8013846:	1058      	asrs	r0, r3, #1
 8013848:	0fcb      	lsrs	r3, r1, #31
 801384a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801384e:	0049      	lsls	r1, r1, #1
 8013850:	2316      	movs	r3, #22
 8013852:	462c      	mov	r4, r5
 8013854:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8013858:	19a7      	adds	r7, r4, r6
 801385a:	4297      	cmp	r7, r2
 801385c:	bfde      	ittt	le
 801385e:	19bc      	addle	r4, r7, r6
 8013860:	1bd2      	suble	r2, r2, r7
 8013862:	19ad      	addle	r5, r5, r6
 8013864:	0fcf      	lsrs	r7, r1, #31
 8013866:	3b01      	subs	r3, #1
 8013868:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801386c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8013870:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013874:	d1f0      	bne.n	8013858 <__ieee754_sqrt+0x94>
 8013876:	f04f 0c20 	mov.w	ip, #32
 801387a:	469e      	mov	lr, r3
 801387c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8013880:	42a2      	cmp	r2, r4
 8013882:	eb06 070e 	add.w	r7, r6, lr
 8013886:	dc02      	bgt.n	801388e <__ieee754_sqrt+0xca>
 8013888:	d112      	bne.n	80138b0 <__ieee754_sqrt+0xec>
 801388a:	428f      	cmp	r7, r1
 801388c:	d810      	bhi.n	80138b0 <__ieee754_sqrt+0xec>
 801388e:	2f00      	cmp	r7, #0
 8013890:	eb07 0e06 	add.w	lr, r7, r6
 8013894:	da42      	bge.n	801391c <__ieee754_sqrt+0x158>
 8013896:	f1be 0f00 	cmp.w	lr, #0
 801389a:	db3f      	blt.n	801391c <__ieee754_sqrt+0x158>
 801389c:	f104 0801 	add.w	r8, r4, #1
 80138a0:	1b12      	subs	r2, r2, r4
 80138a2:	428f      	cmp	r7, r1
 80138a4:	bf88      	it	hi
 80138a6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80138aa:	1bc9      	subs	r1, r1, r7
 80138ac:	4433      	add	r3, r6
 80138ae:	4644      	mov	r4, r8
 80138b0:	0052      	lsls	r2, r2, #1
 80138b2:	f1bc 0c01 	subs.w	ip, ip, #1
 80138b6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80138ba:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80138be:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80138c2:	d1dd      	bne.n	8013880 <__ieee754_sqrt+0xbc>
 80138c4:	430a      	orrs	r2, r1
 80138c6:	d006      	beq.n	80138d6 <__ieee754_sqrt+0x112>
 80138c8:	1c5c      	adds	r4, r3, #1
 80138ca:	bf13      	iteet	ne
 80138cc:	3301      	addne	r3, #1
 80138ce:	3501      	addeq	r5, #1
 80138d0:	4663      	moveq	r3, ip
 80138d2:	f023 0301 	bicne.w	r3, r3, #1
 80138d6:	106a      	asrs	r2, r5, #1
 80138d8:	085b      	lsrs	r3, r3, #1
 80138da:	07e9      	lsls	r1, r5, #31
 80138dc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80138e0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80138e4:	bf48      	it	mi
 80138e6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80138ea:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80138ee:	461c      	mov	r4, r3
 80138f0:	e780      	b.n	80137f4 <__ieee754_sqrt+0x30>
 80138f2:	0aca      	lsrs	r2, r1, #11
 80138f4:	3815      	subs	r0, #21
 80138f6:	0549      	lsls	r1, r1, #21
 80138f8:	2a00      	cmp	r2, #0
 80138fa:	d0fa      	beq.n	80138f2 <__ieee754_sqrt+0x12e>
 80138fc:	02d6      	lsls	r6, r2, #11
 80138fe:	d50a      	bpl.n	8013916 <__ieee754_sqrt+0x152>
 8013900:	f1c3 0420 	rsb	r4, r3, #32
 8013904:	fa21 f404 	lsr.w	r4, r1, r4
 8013908:	1e5d      	subs	r5, r3, #1
 801390a:	4099      	lsls	r1, r3
 801390c:	4322      	orrs	r2, r4
 801390e:	1b43      	subs	r3, r0, r5
 8013910:	e78b      	b.n	801382a <__ieee754_sqrt+0x66>
 8013912:	4618      	mov	r0, r3
 8013914:	e7f0      	b.n	80138f8 <__ieee754_sqrt+0x134>
 8013916:	0052      	lsls	r2, r2, #1
 8013918:	3301      	adds	r3, #1
 801391a:	e7ef      	b.n	80138fc <__ieee754_sqrt+0x138>
 801391c:	46a0      	mov	r8, r4
 801391e:	e7bf      	b.n	80138a0 <__ieee754_sqrt+0xdc>
 8013920:	7ff00000 	.word	0x7ff00000

08013924 <__ieee754_atan2f>:
 8013924:	ee10 2a90 	vmov	r2, s1
 8013928:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801392c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013930:	b510      	push	{r4, lr}
 8013932:	eef0 7a40 	vmov.f32	s15, s0
 8013936:	dc06      	bgt.n	8013946 <__ieee754_atan2f+0x22>
 8013938:	ee10 0a10 	vmov	r0, s0
 801393c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8013940:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013944:	dd04      	ble.n	8013950 <__ieee754_atan2f+0x2c>
 8013946:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801394a:	eeb0 0a67 	vmov.f32	s0, s15
 801394e:	bd10      	pop	{r4, pc}
 8013950:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8013954:	d103      	bne.n	801395e <__ieee754_atan2f+0x3a>
 8013956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801395a:	f001 b837 	b.w	80149cc <atanf>
 801395e:	1794      	asrs	r4, r2, #30
 8013960:	f004 0402 	and.w	r4, r4, #2
 8013964:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8013968:	b943      	cbnz	r3, 801397c <__ieee754_atan2f+0x58>
 801396a:	2c02      	cmp	r4, #2
 801396c:	d06e      	beq.n	8013a4c <__ieee754_atan2f+0x128>
 801396e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8013a54 <__ieee754_atan2f+0x130>
 8013972:	2c03      	cmp	r4, #3
 8013974:	bf08      	it	eq
 8013976:	eef0 7a47 	vmoveq.f32	s15, s14
 801397a:	e7e6      	b.n	801394a <__ieee754_atan2f+0x26>
 801397c:	b941      	cbnz	r1, 8013990 <__ieee754_atan2f+0x6c>
 801397e:	eddf 7a36 	vldr	s15, [pc, #216]	; 8013a58 <__ieee754_atan2f+0x134>
 8013982:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8013a5c <__ieee754_atan2f+0x138>
 8013986:	2800      	cmp	r0, #0
 8013988:	bfb8      	it	lt
 801398a:	eef0 7a47 	vmovlt.f32	s15, s14
 801398e:	e7dc      	b.n	801394a <__ieee754_atan2f+0x26>
 8013990:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8013994:	d122      	bne.n	80139dc <__ieee754_atan2f+0xb8>
 8013996:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801399a:	d112      	bne.n	80139c2 <__ieee754_atan2f+0x9e>
 801399c:	2c02      	cmp	r4, #2
 801399e:	d00a      	beq.n	80139b6 <__ieee754_atan2f+0x92>
 80139a0:	2c03      	cmp	r4, #3
 80139a2:	d00b      	beq.n	80139bc <__ieee754_atan2f+0x98>
 80139a4:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8013a60 <__ieee754_atan2f+0x13c>
 80139a8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8013a64 <__ieee754_atan2f+0x140>
 80139ac:	2c01      	cmp	r4, #1
 80139ae:	bf18      	it	ne
 80139b0:	eef0 7a47 	vmovne.f32	s15, s14
 80139b4:	e7c9      	b.n	801394a <__ieee754_atan2f+0x26>
 80139b6:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8013a68 <__ieee754_atan2f+0x144>
 80139ba:	e7c6      	b.n	801394a <__ieee754_atan2f+0x26>
 80139bc:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8013a6c <__ieee754_atan2f+0x148>
 80139c0:	e7c3      	b.n	801394a <__ieee754_atan2f+0x26>
 80139c2:	2c02      	cmp	r4, #2
 80139c4:	d042      	beq.n	8013a4c <__ieee754_atan2f+0x128>
 80139c6:	2c03      	cmp	r4, #3
 80139c8:	d005      	beq.n	80139d6 <__ieee754_atan2f+0xb2>
 80139ca:	2c01      	cmp	r4, #1
 80139cc:	eddf 7a28 	vldr	s15, [pc, #160]	; 8013a70 <__ieee754_atan2f+0x14c>
 80139d0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8013a74 <__ieee754_atan2f+0x150>
 80139d4:	e7eb      	b.n	80139ae <__ieee754_atan2f+0x8a>
 80139d6:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8013a54 <__ieee754_atan2f+0x130>
 80139da:	e7b6      	b.n	801394a <__ieee754_atan2f+0x26>
 80139dc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80139e0:	d0cd      	beq.n	801397e <__ieee754_atan2f+0x5a>
 80139e2:	1a5b      	subs	r3, r3, r1
 80139e4:	15db      	asrs	r3, r3, #23
 80139e6:	2b3c      	cmp	r3, #60	; 0x3c
 80139e8:	dc1a      	bgt.n	8013a20 <__ieee754_atan2f+0xfc>
 80139ea:	2a00      	cmp	r2, #0
 80139ec:	da01      	bge.n	80139f2 <__ieee754_atan2f+0xce>
 80139ee:	333c      	adds	r3, #60	; 0x3c
 80139f0:	db19      	blt.n	8013a26 <__ieee754_atan2f+0x102>
 80139f2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80139f6:	f001 f8bd 	bl	8014b74 <fabsf>
 80139fa:	f000 ffe7 	bl	80149cc <atanf>
 80139fe:	eef0 7a40 	vmov.f32	s15, s0
 8013a02:	2c01      	cmp	r4, #1
 8013a04:	d012      	beq.n	8013a2c <__ieee754_atan2f+0x108>
 8013a06:	2c02      	cmp	r4, #2
 8013a08:	d017      	beq.n	8013a3a <__ieee754_atan2f+0x116>
 8013a0a:	2c00      	cmp	r4, #0
 8013a0c:	d09d      	beq.n	801394a <__ieee754_atan2f+0x26>
 8013a0e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8013a78 <__ieee754_atan2f+0x154>
 8013a12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013a16:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8013a7c <__ieee754_atan2f+0x158>
 8013a1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013a1e:	e794      	b.n	801394a <__ieee754_atan2f+0x26>
 8013a20:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8013a58 <__ieee754_atan2f+0x134>
 8013a24:	e7ed      	b.n	8013a02 <__ieee754_atan2f+0xde>
 8013a26:	eddf 7a13 	vldr	s15, [pc, #76]	; 8013a74 <__ieee754_atan2f+0x150>
 8013a2a:	e7ea      	b.n	8013a02 <__ieee754_atan2f+0xde>
 8013a2c:	ee17 3a90 	vmov	r3, s15
 8013a30:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013a34:	ee07 3a90 	vmov	s15, r3
 8013a38:	e787      	b.n	801394a <__ieee754_atan2f+0x26>
 8013a3a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8013a78 <__ieee754_atan2f+0x154>
 8013a3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013a42:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8013a7c <__ieee754_atan2f+0x158>
 8013a46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013a4a:	e77e      	b.n	801394a <__ieee754_atan2f+0x26>
 8013a4c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8013a7c <__ieee754_atan2f+0x158>
 8013a50:	e77b      	b.n	801394a <__ieee754_atan2f+0x26>
 8013a52:	bf00      	nop
 8013a54:	c0490fdb 	.word	0xc0490fdb
 8013a58:	3fc90fdb 	.word	0x3fc90fdb
 8013a5c:	bfc90fdb 	.word	0xbfc90fdb
 8013a60:	bf490fdb 	.word	0xbf490fdb
 8013a64:	3f490fdb 	.word	0x3f490fdb
 8013a68:	4016cbe4 	.word	0x4016cbe4
 8013a6c:	c016cbe4 	.word	0xc016cbe4
 8013a70:	80000000 	.word	0x80000000
 8013a74:	00000000 	.word	0x00000000
 8013a78:	33bbbd2e 	.word	0x33bbbd2e
 8013a7c:	40490fdb 	.word	0x40490fdb

08013a80 <__kernel_cos>:
 8013a80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a84:	ec59 8b10 	vmov	r8, r9, d0
 8013a88:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8013a8c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8013a90:	ed2d 8b02 	vpush	{d8}
 8013a94:	eeb0 8a41 	vmov.f32	s16, s2
 8013a98:	eef0 8a61 	vmov.f32	s17, s3
 8013a9c:	da07      	bge.n	8013aae <__kernel_cos+0x2e>
 8013a9e:	ee10 0a10 	vmov	r0, s0
 8013aa2:	4649      	mov	r1, r9
 8013aa4:	f7ed f858 	bl	8000b58 <__aeabi_d2iz>
 8013aa8:	2800      	cmp	r0, #0
 8013aaa:	f000 8089 	beq.w	8013bc0 <__kernel_cos+0x140>
 8013aae:	4642      	mov	r2, r8
 8013ab0:	464b      	mov	r3, r9
 8013ab2:	4640      	mov	r0, r8
 8013ab4:	4649      	mov	r1, r9
 8013ab6:	f7ec fd9f 	bl	80005f8 <__aeabi_dmul>
 8013aba:	2200      	movs	r2, #0
 8013abc:	4b4e      	ldr	r3, [pc, #312]	; (8013bf8 <__kernel_cos+0x178>)
 8013abe:	4604      	mov	r4, r0
 8013ac0:	460d      	mov	r5, r1
 8013ac2:	f7ec fd99 	bl	80005f8 <__aeabi_dmul>
 8013ac6:	a340      	add	r3, pc, #256	; (adr r3, 8013bc8 <__kernel_cos+0x148>)
 8013ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013acc:	4682      	mov	sl, r0
 8013ace:	468b      	mov	fp, r1
 8013ad0:	4620      	mov	r0, r4
 8013ad2:	4629      	mov	r1, r5
 8013ad4:	f7ec fd90 	bl	80005f8 <__aeabi_dmul>
 8013ad8:	a33d      	add	r3, pc, #244	; (adr r3, 8013bd0 <__kernel_cos+0x150>)
 8013ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ade:	f7ec fbd5 	bl	800028c <__adddf3>
 8013ae2:	4622      	mov	r2, r4
 8013ae4:	462b      	mov	r3, r5
 8013ae6:	f7ec fd87 	bl	80005f8 <__aeabi_dmul>
 8013aea:	a33b      	add	r3, pc, #236	; (adr r3, 8013bd8 <__kernel_cos+0x158>)
 8013aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013af0:	f7ec fbca 	bl	8000288 <__aeabi_dsub>
 8013af4:	4622      	mov	r2, r4
 8013af6:	462b      	mov	r3, r5
 8013af8:	f7ec fd7e 	bl	80005f8 <__aeabi_dmul>
 8013afc:	a338      	add	r3, pc, #224	; (adr r3, 8013be0 <__kernel_cos+0x160>)
 8013afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b02:	f7ec fbc3 	bl	800028c <__adddf3>
 8013b06:	4622      	mov	r2, r4
 8013b08:	462b      	mov	r3, r5
 8013b0a:	f7ec fd75 	bl	80005f8 <__aeabi_dmul>
 8013b0e:	a336      	add	r3, pc, #216	; (adr r3, 8013be8 <__kernel_cos+0x168>)
 8013b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b14:	f7ec fbb8 	bl	8000288 <__aeabi_dsub>
 8013b18:	4622      	mov	r2, r4
 8013b1a:	462b      	mov	r3, r5
 8013b1c:	f7ec fd6c 	bl	80005f8 <__aeabi_dmul>
 8013b20:	a333      	add	r3, pc, #204	; (adr r3, 8013bf0 <__kernel_cos+0x170>)
 8013b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b26:	f7ec fbb1 	bl	800028c <__adddf3>
 8013b2a:	4622      	mov	r2, r4
 8013b2c:	462b      	mov	r3, r5
 8013b2e:	f7ec fd63 	bl	80005f8 <__aeabi_dmul>
 8013b32:	4622      	mov	r2, r4
 8013b34:	462b      	mov	r3, r5
 8013b36:	f7ec fd5f 	bl	80005f8 <__aeabi_dmul>
 8013b3a:	ec53 2b18 	vmov	r2, r3, d8
 8013b3e:	4604      	mov	r4, r0
 8013b40:	460d      	mov	r5, r1
 8013b42:	4640      	mov	r0, r8
 8013b44:	4649      	mov	r1, r9
 8013b46:	f7ec fd57 	bl	80005f8 <__aeabi_dmul>
 8013b4a:	460b      	mov	r3, r1
 8013b4c:	4602      	mov	r2, r0
 8013b4e:	4629      	mov	r1, r5
 8013b50:	4620      	mov	r0, r4
 8013b52:	f7ec fb99 	bl	8000288 <__aeabi_dsub>
 8013b56:	4b29      	ldr	r3, [pc, #164]	; (8013bfc <__kernel_cos+0x17c>)
 8013b58:	429e      	cmp	r6, r3
 8013b5a:	4680      	mov	r8, r0
 8013b5c:	4689      	mov	r9, r1
 8013b5e:	dc11      	bgt.n	8013b84 <__kernel_cos+0x104>
 8013b60:	4602      	mov	r2, r0
 8013b62:	460b      	mov	r3, r1
 8013b64:	4650      	mov	r0, sl
 8013b66:	4659      	mov	r1, fp
 8013b68:	f7ec fb8e 	bl	8000288 <__aeabi_dsub>
 8013b6c:	460b      	mov	r3, r1
 8013b6e:	4924      	ldr	r1, [pc, #144]	; (8013c00 <__kernel_cos+0x180>)
 8013b70:	4602      	mov	r2, r0
 8013b72:	2000      	movs	r0, #0
 8013b74:	f7ec fb88 	bl	8000288 <__aeabi_dsub>
 8013b78:	ecbd 8b02 	vpop	{d8}
 8013b7c:	ec41 0b10 	vmov	d0, r0, r1
 8013b80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b84:	4b1f      	ldr	r3, [pc, #124]	; (8013c04 <__kernel_cos+0x184>)
 8013b86:	491e      	ldr	r1, [pc, #120]	; (8013c00 <__kernel_cos+0x180>)
 8013b88:	429e      	cmp	r6, r3
 8013b8a:	bfcc      	ite	gt
 8013b8c:	4d1e      	ldrgt	r5, [pc, #120]	; (8013c08 <__kernel_cos+0x188>)
 8013b8e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8013b92:	2400      	movs	r4, #0
 8013b94:	4622      	mov	r2, r4
 8013b96:	462b      	mov	r3, r5
 8013b98:	2000      	movs	r0, #0
 8013b9a:	f7ec fb75 	bl	8000288 <__aeabi_dsub>
 8013b9e:	4622      	mov	r2, r4
 8013ba0:	4606      	mov	r6, r0
 8013ba2:	460f      	mov	r7, r1
 8013ba4:	462b      	mov	r3, r5
 8013ba6:	4650      	mov	r0, sl
 8013ba8:	4659      	mov	r1, fp
 8013baa:	f7ec fb6d 	bl	8000288 <__aeabi_dsub>
 8013bae:	4642      	mov	r2, r8
 8013bb0:	464b      	mov	r3, r9
 8013bb2:	f7ec fb69 	bl	8000288 <__aeabi_dsub>
 8013bb6:	4602      	mov	r2, r0
 8013bb8:	460b      	mov	r3, r1
 8013bba:	4630      	mov	r0, r6
 8013bbc:	4639      	mov	r1, r7
 8013bbe:	e7d9      	b.n	8013b74 <__kernel_cos+0xf4>
 8013bc0:	2000      	movs	r0, #0
 8013bc2:	490f      	ldr	r1, [pc, #60]	; (8013c00 <__kernel_cos+0x180>)
 8013bc4:	e7d8      	b.n	8013b78 <__kernel_cos+0xf8>
 8013bc6:	bf00      	nop
 8013bc8:	be8838d4 	.word	0xbe8838d4
 8013bcc:	bda8fae9 	.word	0xbda8fae9
 8013bd0:	bdb4b1c4 	.word	0xbdb4b1c4
 8013bd4:	3e21ee9e 	.word	0x3e21ee9e
 8013bd8:	809c52ad 	.word	0x809c52ad
 8013bdc:	3e927e4f 	.word	0x3e927e4f
 8013be0:	19cb1590 	.word	0x19cb1590
 8013be4:	3efa01a0 	.word	0x3efa01a0
 8013be8:	16c15177 	.word	0x16c15177
 8013bec:	3f56c16c 	.word	0x3f56c16c
 8013bf0:	5555554c 	.word	0x5555554c
 8013bf4:	3fa55555 	.word	0x3fa55555
 8013bf8:	3fe00000 	.word	0x3fe00000
 8013bfc:	3fd33332 	.word	0x3fd33332
 8013c00:	3ff00000 	.word	0x3ff00000
 8013c04:	3fe90000 	.word	0x3fe90000
 8013c08:	3fd20000 	.word	0x3fd20000
 8013c0c:	00000000 	.word	0x00000000

08013c10 <__kernel_rem_pio2>:
 8013c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c14:	ed2d 8b02 	vpush	{d8}
 8013c18:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8013c1c:	1ed4      	subs	r4, r2, #3
 8013c1e:	9308      	str	r3, [sp, #32]
 8013c20:	9101      	str	r1, [sp, #4]
 8013c22:	4bc5      	ldr	r3, [pc, #788]	; (8013f38 <__kernel_rem_pio2+0x328>)
 8013c24:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8013c26:	9009      	str	r0, [sp, #36]	; 0x24
 8013c28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013c2c:	9304      	str	r3, [sp, #16]
 8013c2e:	9b08      	ldr	r3, [sp, #32]
 8013c30:	3b01      	subs	r3, #1
 8013c32:	9307      	str	r3, [sp, #28]
 8013c34:	2318      	movs	r3, #24
 8013c36:	fb94 f4f3 	sdiv	r4, r4, r3
 8013c3a:	f06f 0317 	mvn.w	r3, #23
 8013c3e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8013c42:	fb04 3303 	mla	r3, r4, r3, r3
 8013c46:	eb03 0a02 	add.w	sl, r3, r2
 8013c4a:	9b04      	ldr	r3, [sp, #16]
 8013c4c:	9a07      	ldr	r2, [sp, #28]
 8013c4e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8013f28 <__kernel_rem_pio2+0x318>
 8013c52:	eb03 0802 	add.w	r8, r3, r2
 8013c56:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013c58:	1aa7      	subs	r7, r4, r2
 8013c5a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013c5e:	ae22      	add	r6, sp, #136	; 0x88
 8013c60:	2500      	movs	r5, #0
 8013c62:	4545      	cmp	r5, r8
 8013c64:	dd13      	ble.n	8013c8e <__kernel_rem_pio2+0x7e>
 8013c66:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8013f28 <__kernel_rem_pio2+0x318>
 8013c6a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8013c6e:	2600      	movs	r6, #0
 8013c70:	9b04      	ldr	r3, [sp, #16]
 8013c72:	429e      	cmp	r6, r3
 8013c74:	dc32      	bgt.n	8013cdc <__kernel_rem_pio2+0xcc>
 8013c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c78:	9302      	str	r3, [sp, #8]
 8013c7a:	9b08      	ldr	r3, [sp, #32]
 8013c7c:	199d      	adds	r5, r3, r6
 8013c7e:	ab22      	add	r3, sp, #136	; 0x88
 8013c80:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013c84:	9306      	str	r3, [sp, #24]
 8013c86:	ec59 8b18 	vmov	r8, r9, d8
 8013c8a:	2700      	movs	r7, #0
 8013c8c:	e01f      	b.n	8013cce <__kernel_rem_pio2+0xbe>
 8013c8e:	42ef      	cmn	r7, r5
 8013c90:	d407      	bmi.n	8013ca2 <__kernel_rem_pio2+0x92>
 8013c92:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8013c96:	f7ec fc45 	bl	8000524 <__aeabi_i2d>
 8013c9a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013c9e:	3501      	adds	r5, #1
 8013ca0:	e7df      	b.n	8013c62 <__kernel_rem_pio2+0x52>
 8013ca2:	ec51 0b18 	vmov	r0, r1, d8
 8013ca6:	e7f8      	b.n	8013c9a <__kernel_rem_pio2+0x8a>
 8013ca8:	9906      	ldr	r1, [sp, #24]
 8013caa:	9d02      	ldr	r5, [sp, #8]
 8013cac:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8013cb0:	9106      	str	r1, [sp, #24]
 8013cb2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8013cb6:	9502      	str	r5, [sp, #8]
 8013cb8:	f7ec fc9e 	bl	80005f8 <__aeabi_dmul>
 8013cbc:	4602      	mov	r2, r0
 8013cbe:	460b      	mov	r3, r1
 8013cc0:	4640      	mov	r0, r8
 8013cc2:	4649      	mov	r1, r9
 8013cc4:	f7ec fae2 	bl	800028c <__adddf3>
 8013cc8:	3701      	adds	r7, #1
 8013cca:	4680      	mov	r8, r0
 8013ccc:	4689      	mov	r9, r1
 8013cce:	9b07      	ldr	r3, [sp, #28]
 8013cd0:	429f      	cmp	r7, r3
 8013cd2:	dde9      	ble.n	8013ca8 <__kernel_rem_pio2+0x98>
 8013cd4:	e8eb 8902 	strd	r8, r9, [fp], #8
 8013cd8:	3601      	adds	r6, #1
 8013cda:	e7c9      	b.n	8013c70 <__kernel_rem_pio2+0x60>
 8013cdc:	9b04      	ldr	r3, [sp, #16]
 8013cde:	aa0e      	add	r2, sp, #56	; 0x38
 8013ce0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013ce4:	930c      	str	r3, [sp, #48]	; 0x30
 8013ce6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013ce8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013cec:	9c04      	ldr	r4, [sp, #16]
 8013cee:	930b      	str	r3, [sp, #44]	; 0x2c
 8013cf0:	ab9a      	add	r3, sp, #616	; 0x268
 8013cf2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8013cf6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013cfa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013cfe:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8013d02:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8013d06:	ab9a      	add	r3, sp, #616	; 0x268
 8013d08:	445b      	add	r3, fp
 8013d0a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8013d0e:	2500      	movs	r5, #0
 8013d10:	1b63      	subs	r3, r4, r5
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	dc78      	bgt.n	8013e08 <__kernel_rem_pio2+0x1f8>
 8013d16:	4650      	mov	r0, sl
 8013d18:	ec49 8b10 	vmov	d0, r8, r9
 8013d1c:	f000 fde0 	bl	80148e0 <scalbn>
 8013d20:	ec57 6b10 	vmov	r6, r7, d0
 8013d24:	2200      	movs	r2, #0
 8013d26:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8013d2a:	ee10 0a10 	vmov	r0, s0
 8013d2e:	4639      	mov	r1, r7
 8013d30:	f7ec fc62 	bl	80005f8 <__aeabi_dmul>
 8013d34:	ec41 0b10 	vmov	d0, r0, r1
 8013d38:	f7fe f8c6 	bl	8011ec8 <floor>
 8013d3c:	2200      	movs	r2, #0
 8013d3e:	ec51 0b10 	vmov	r0, r1, d0
 8013d42:	4b7e      	ldr	r3, [pc, #504]	; (8013f3c <__kernel_rem_pio2+0x32c>)
 8013d44:	f7ec fc58 	bl	80005f8 <__aeabi_dmul>
 8013d48:	4602      	mov	r2, r0
 8013d4a:	460b      	mov	r3, r1
 8013d4c:	4630      	mov	r0, r6
 8013d4e:	4639      	mov	r1, r7
 8013d50:	f7ec fa9a 	bl	8000288 <__aeabi_dsub>
 8013d54:	460f      	mov	r7, r1
 8013d56:	4606      	mov	r6, r0
 8013d58:	f7ec fefe 	bl	8000b58 <__aeabi_d2iz>
 8013d5c:	9006      	str	r0, [sp, #24]
 8013d5e:	f7ec fbe1 	bl	8000524 <__aeabi_i2d>
 8013d62:	4602      	mov	r2, r0
 8013d64:	460b      	mov	r3, r1
 8013d66:	4630      	mov	r0, r6
 8013d68:	4639      	mov	r1, r7
 8013d6a:	f7ec fa8d 	bl	8000288 <__aeabi_dsub>
 8013d6e:	f1ba 0f00 	cmp.w	sl, #0
 8013d72:	4606      	mov	r6, r0
 8013d74:	460f      	mov	r7, r1
 8013d76:	dd6c      	ble.n	8013e52 <__kernel_rem_pio2+0x242>
 8013d78:	1e62      	subs	r2, r4, #1
 8013d7a:	ab0e      	add	r3, sp, #56	; 0x38
 8013d7c:	f1ca 0118 	rsb	r1, sl, #24
 8013d80:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013d84:	9d06      	ldr	r5, [sp, #24]
 8013d86:	fa40 f301 	asr.w	r3, r0, r1
 8013d8a:	441d      	add	r5, r3
 8013d8c:	408b      	lsls	r3, r1
 8013d8e:	1ac0      	subs	r0, r0, r3
 8013d90:	ab0e      	add	r3, sp, #56	; 0x38
 8013d92:	9506      	str	r5, [sp, #24]
 8013d94:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8013d98:	f1ca 0317 	rsb	r3, sl, #23
 8013d9c:	fa40 f303 	asr.w	r3, r0, r3
 8013da0:	9302      	str	r3, [sp, #8]
 8013da2:	9b02      	ldr	r3, [sp, #8]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	dd62      	ble.n	8013e6e <__kernel_rem_pio2+0x25e>
 8013da8:	9b06      	ldr	r3, [sp, #24]
 8013daa:	2200      	movs	r2, #0
 8013dac:	3301      	adds	r3, #1
 8013dae:	9306      	str	r3, [sp, #24]
 8013db0:	4615      	mov	r5, r2
 8013db2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8013db6:	4294      	cmp	r4, r2
 8013db8:	f300 8095 	bgt.w	8013ee6 <__kernel_rem_pio2+0x2d6>
 8013dbc:	f1ba 0f00 	cmp.w	sl, #0
 8013dc0:	dd07      	ble.n	8013dd2 <__kernel_rem_pio2+0x1c2>
 8013dc2:	f1ba 0f01 	cmp.w	sl, #1
 8013dc6:	f000 80a2 	beq.w	8013f0e <__kernel_rem_pio2+0x2fe>
 8013dca:	f1ba 0f02 	cmp.w	sl, #2
 8013dce:	f000 80c1 	beq.w	8013f54 <__kernel_rem_pio2+0x344>
 8013dd2:	9b02      	ldr	r3, [sp, #8]
 8013dd4:	2b02      	cmp	r3, #2
 8013dd6:	d14a      	bne.n	8013e6e <__kernel_rem_pio2+0x25e>
 8013dd8:	4632      	mov	r2, r6
 8013dda:	463b      	mov	r3, r7
 8013ddc:	2000      	movs	r0, #0
 8013dde:	4958      	ldr	r1, [pc, #352]	; (8013f40 <__kernel_rem_pio2+0x330>)
 8013de0:	f7ec fa52 	bl	8000288 <__aeabi_dsub>
 8013de4:	4606      	mov	r6, r0
 8013de6:	460f      	mov	r7, r1
 8013de8:	2d00      	cmp	r5, #0
 8013dea:	d040      	beq.n	8013e6e <__kernel_rem_pio2+0x25e>
 8013dec:	4650      	mov	r0, sl
 8013dee:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8013f30 <__kernel_rem_pio2+0x320>
 8013df2:	f000 fd75 	bl	80148e0 <scalbn>
 8013df6:	4630      	mov	r0, r6
 8013df8:	4639      	mov	r1, r7
 8013dfa:	ec53 2b10 	vmov	r2, r3, d0
 8013dfe:	f7ec fa43 	bl	8000288 <__aeabi_dsub>
 8013e02:	4606      	mov	r6, r0
 8013e04:	460f      	mov	r7, r1
 8013e06:	e032      	b.n	8013e6e <__kernel_rem_pio2+0x25e>
 8013e08:	2200      	movs	r2, #0
 8013e0a:	4b4e      	ldr	r3, [pc, #312]	; (8013f44 <__kernel_rem_pio2+0x334>)
 8013e0c:	4640      	mov	r0, r8
 8013e0e:	4649      	mov	r1, r9
 8013e10:	f7ec fbf2 	bl	80005f8 <__aeabi_dmul>
 8013e14:	f7ec fea0 	bl	8000b58 <__aeabi_d2iz>
 8013e18:	f7ec fb84 	bl	8000524 <__aeabi_i2d>
 8013e1c:	2200      	movs	r2, #0
 8013e1e:	4b4a      	ldr	r3, [pc, #296]	; (8013f48 <__kernel_rem_pio2+0x338>)
 8013e20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013e24:	f7ec fbe8 	bl	80005f8 <__aeabi_dmul>
 8013e28:	4602      	mov	r2, r0
 8013e2a:	460b      	mov	r3, r1
 8013e2c:	4640      	mov	r0, r8
 8013e2e:	4649      	mov	r1, r9
 8013e30:	f7ec fa2a 	bl	8000288 <__aeabi_dsub>
 8013e34:	f7ec fe90 	bl	8000b58 <__aeabi_d2iz>
 8013e38:	ab0e      	add	r3, sp, #56	; 0x38
 8013e3a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8013e3e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8013e42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e46:	f7ec fa21 	bl	800028c <__adddf3>
 8013e4a:	3501      	adds	r5, #1
 8013e4c:	4680      	mov	r8, r0
 8013e4e:	4689      	mov	r9, r1
 8013e50:	e75e      	b.n	8013d10 <__kernel_rem_pio2+0x100>
 8013e52:	d105      	bne.n	8013e60 <__kernel_rem_pio2+0x250>
 8013e54:	1e63      	subs	r3, r4, #1
 8013e56:	aa0e      	add	r2, sp, #56	; 0x38
 8013e58:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8013e5c:	15c3      	asrs	r3, r0, #23
 8013e5e:	e79f      	b.n	8013da0 <__kernel_rem_pio2+0x190>
 8013e60:	2200      	movs	r2, #0
 8013e62:	4b3a      	ldr	r3, [pc, #232]	; (8013f4c <__kernel_rem_pio2+0x33c>)
 8013e64:	f7ec fe4e 	bl	8000b04 <__aeabi_dcmpge>
 8013e68:	2800      	cmp	r0, #0
 8013e6a:	d139      	bne.n	8013ee0 <__kernel_rem_pio2+0x2d0>
 8013e6c:	9002      	str	r0, [sp, #8]
 8013e6e:	2200      	movs	r2, #0
 8013e70:	2300      	movs	r3, #0
 8013e72:	4630      	mov	r0, r6
 8013e74:	4639      	mov	r1, r7
 8013e76:	f7ec fe27 	bl	8000ac8 <__aeabi_dcmpeq>
 8013e7a:	2800      	cmp	r0, #0
 8013e7c:	f000 80c7 	beq.w	801400e <__kernel_rem_pio2+0x3fe>
 8013e80:	1e65      	subs	r5, r4, #1
 8013e82:	462b      	mov	r3, r5
 8013e84:	2200      	movs	r2, #0
 8013e86:	9904      	ldr	r1, [sp, #16]
 8013e88:	428b      	cmp	r3, r1
 8013e8a:	da6a      	bge.n	8013f62 <__kernel_rem_pio2+0x352>
 8013e8c:	2a00      	cmp	r2, #0
 8013e8e:	f000 8088 	beq.w	8013fa2 <__kernel_rem_pio2+0x392>
 8013e92:	ab0e      	add	r3, sp, #56	; 0x38
 8013e94:	f1aa 0a18 	sub.w	sl, sl, #24
 8013e98:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	f000 80b4 	beq.w	801400a <__kernel_rem_pio2+0x3fa>
 8013ea2:	4650      	mov	r0, sl
 8013ea4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8013f30 <__kernel_rem_pio2+0x320>
 8013ea8:	f000 fd1a 	bl	80148e0 <scalbn>
 8013eac:	00ec      	lsls	r4, r5, #3
 8013eae:	ab72      	add	r3, sp, #456	; 0x1c8
 8013eb0:	191e      	adds	r6, r3, r4
 8013eb2:	ec59 8b10 	vmov	r8, r9, d0
 8013eb6:	f106 0a08 	add.w	sl, r6, #8
 8013eba:	462f      	mov	r7, r5
 8013ebc:	2f00      	cmp	r7, #0
 8013ebe:	f280 80df 	bge.w	8014080 <__kernel_rem_pio2+0x470>
 8013ec2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8013f28 <__kernel_rem_pio2+0x318>
 8013ec6:	f04f 0a00 	mov.w	sl, #0
 8013eca:	eba5 030a 	sub.w	r3, r5, sl
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	f2c0 810a 	blt.w	80140e8 <__kernel_rem_pio2+0x4d8>
 8013ed4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8013f50 <__kernel_rem_pio2+0x340>
 8013ed8:	ec59 8b18 	vmov	r8, r9, d8
 8013edc:	2700      	movs	r7, #0
 8013ede:	e0f5      	b.n	80140cc <__kernel_rem_pio2+0x4bc>
 8013ee0:	2302      	movs	r3, #2
 8013ee2:	9302      	str	r3, [sp, #8]
 8013ee4:	e760      	b.n	8013da8 <__kernel_rem_pio2+0x198>
 8013ee6:	ab0e      	add	r3, sp, #56	; 0x38
 8013ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013eec:	b94d      	cbnz	r5, 8013f02 <__kernel_rem_pio2+0x2f2>
 8013eee:	b12b      	cbz	r3, 8013efc <__kernel_rem_pio2+0x2ec>
 8013ef0:	a80e      	add	r0, sp, #56	; 0x38
 8013ef2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8013ef6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8013efa:	2301      	movs	r3, #1
 8013efc:	3201      	adds	r2, #1
 8013efe:	461d      	mov	r5, r3
 8013f00:	e759      	b.n	8013db6 <__kernel_rem_pio2+0x1a6>
 8013f02:	a80e      	add	r0, sp, #56	; 0x38
 8013f04:	1acb      	subs	r3, r1, r3
 8013f06:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8013f0a:	462b      	mov	r3, r5
 8013f0c:	e7f6      	b.n	8013efc <__kernel_rem_pio2+0x2ec>
 8013f0e:	1e62      	subs	r2, r4, #1
 8013f10:	ab0e      	add	r3, sp, #56	; 0x38
 8013f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f16:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013f1a:	a90e      	add	r1, sp, #56	; 0x38
 8013f1c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013f20:	e757      	b.n	8013dd2 <__kernel_rem_pio2+0x1c2>
 8013f22:	bf00      	nop
 8013f24:	f3af 8000 	nop.w
	...
 8013f34:	3ff00000 	.word	0x3ff00000
 8013f38:	080158b0 	.word	0x080158b0
 8013f3c:	40200000 	.word	0x40200000
 8013f40:	3ff00000 	.word	0x3ff00000
 8013f44:	3e700000 	.word	0x3e700000
 8013f48:	41700000 	.word	0x41700000
 8013f4c:	3fe00000 	.word	0x3fe00000
 8013f50:	08015870 	.word	0x08015870
 8013f54:	1e62      	subs	r2, r4, #1
 8013f56:	ab0e      	add	r3, sp, #56	; 0x38
 8013f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f5c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013f60:	e7db      	b.n	8013f1a <__kernel_rem_pio2+0x30a>
 8013f62:	a90e      	add	r1, sp, #56	; 0x38
 8013f64:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8013f68:	3b01      	subs	r3, #1
 8013f6a:	430a      	orrs	r2, r1
 8013f6c:	e78b      	b.n	8013e86 <__kernel_rem_pio2+0x276>
 8013f6e:	3301      	adds	r3, #1
 8013f70:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8013f74:	2900      	cmp	r1, #0
 8013f76:	d0fa      	beq.n	8013f6e <__kernel_rem_pio2+0x35e>
 8013f78:	9a08      	ldr	r2, [sp, #32]
 8013f7a:	4422      	add	r2, r4
 8013f7c:	00d2      	lsls	r2, r2, #3
 8013f7e:	a922      	add	r1, sp, #136	; 0x88
 8013f80:	18e3      	adds	r3, r4, r3
 8013f82:	9206      	str	r2, [sp, #24]
 8013f84:	440a      	add	r2, r1
 8013f86:	9302      	str	r3, [sp, #8]
 8013f88:	f10b 0108 	add.w	r1, fp, #8
 8013f8c:	f102 0308 	add.w	r3, r2, #8
 8013f90:	1c66      	adds	r6, r4, #1
 8013f92:	910a      	str	r1, [sp, #40]	; 0x28
 8013f94:	2500      	movs	r5, #0
 8013f96:	930d      	str	r3, [sp, #52]	; 0x34
 8013f98:	9b02      	ldr	r3, [sp, #8]
 8013f9a:	42b3      	cmp	r3, r6
 8013f9c:	da04      	bge.n	8013fa8 <__kernel_rem_pio2+0x398>
 8013f9e:	461c      	mov	r4, r3
 8013fa0:	e6a6      	b.n	8013cf0 <__kernel_rem_pio2+0xe0>
 8013fa2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013fa4:	2301      	movs	r3, #1
 8013fa6:	e7e3      	b.n	8013f70 <__kernel_rem_pio2+0x360>
 8013fa8:	9b06      	ldr	r3, [sp, #24]
 8013faa:	18ef      	adds	r7, r5, r3
 8013fac:	ab22      	add	r3, sp, #136	; 0x88
 8013fae:	441f      	add	r7, r3
 8013fb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013fb2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013fb6:	f7ec fab5 	bl	8000524 <__aeabi_i2d>
 8013fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fbc:	461c      	mov	r4, r3
 8013fbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013fc0:	e9c7 0100 	strd	r0, r1, [r7]
 8013fc4:	eb03 0b05 	add.w	fp, r3, r5
 8013fc8:	2700      	movs	r7, #0
 8013fca:	f04f 0800 	mov.w	r8, #0
 8013fce:	f04f 0900 	mov.w	r9, #0
 8013fd2:	9b07      	ldr	r3, [sp, #28]
 8013fd4:	429f      	cmp	r7, r3
 8013fd6:	dd08      	ble.n	8013fea <__kernel_rem_pio2+0x3da>
 8013fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013fda:	aa72      	add	r2, sp, #456	; 0x1c8
 8013fdc:	18eb      	adds	r3, r5, r3
 8013fde:	4413      	add	r3, r2
 8013fe0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8013fe4:	3601      	adds	r6, #1
 8013fe6:	3508      	adds	r5, #8
 8013fe8:	e7d6      	b.n	8013f98 <__kernel_rem_pio2+0x388>
 8013fea:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8013fee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8013ff2:	f7ec fb01 	bl	80005f8 <__aeabi_dmul>
 8013ff6:	4602      	mov	r2, r0
 8013ff8:	460b      	mov	r3, r1
 8013ffa:	4640      	mov	r0, r8
 8013ffc:	4649      	mov	r1, r9
 8013ffe:	f7ec f945 	bl	800028c <__adddf3>
 8014002:	3701      	adds	r7, #1
 8014004:	4680      	mov	r8, r0
 8014006:	4689      	mov	r9, r1
 8014008:	e7e3      	b.n	8013fd2 <__kernel_rem_pio2+0x3c2>
 801400a:	3d01      	subs	r5, #1
 801400c:	e741      	b.n	8013e92 <__kernel_rem_pio2+0x282>
 801400e:	f1ca 0000 	rsb	r0, sl, #0
 8014012:	ec47 6b10 	vmov	d0, r6, r7
 8014016:	f000 fc63 	bl	80148e0 <scalbn>
 801401a:	ec57 6b10 	vmov	r6, r7, d0
 801401e:	2200      	movs	r2, #0
 8014020:	4b99      	ldr	r3, [pc, #612]	; (8014288 <__kernel_rem_pio2+0x678>)
 8014022:	ee10 0a10 	vmov	r0, s0
 8014026:	4639      	mov	r1, r7
 8014028:	f7ec fd6c 	bl	8000b04 <__aeabi_dcmpge>
 801402c:	b1f8      	cbz	r0, 801406e <__kernel_rem_pio2+0x45e>
 801402e:	2200      	movs	r2, #0
 8014030:	4b96      	ldr	r3, [pc, #600]	; (801428c <__kernel_rem_pio2+0x67c>)
 8014032:	4630      	mov	r0, r6
 8014034:	4639      	mov	r1, r7
 8014036:	f7ec fadf 	bl	80005f8 <__aeabi_dmul>
 801403a:	f7ec fd8d 	bl	8000b58 <__aeabi_d2iz>
 801403e:	4680      	mov	r8, r0
 8014040:	f7ec fa70 	bl	8000524 <__aeabi_i2d>
 8014044:	2200      	movs	r2, #0
 8014046:	4b90      	ldr	r3, [pc, #576]	; (8014288 <__kernel_rem_pio2+0x678>)
 8014048:	f7ec fad6 	bl	80005f8 <__aeabi_dmul>
 801404c:	460b      	mov	r3, r1
 801404e:	4602      	mov	r2, r0
 8014050:	4639      	mov	r1, r7
 8014052:	4630      	mov	r0, r6
 8014054:	f7ec f918 	bl	8000288 <__aeabi_dsub>
 8014058:	f7ec fd7e 	bl	8000b58 <__aeabi_d2iz>
 801405c:	1c65      	adds	r5, r4, #1
 801405e:	ab0e      	add	r3, sp, #56	; 0x38
 8014060:	f10a 0a18 	add.w	sl, sl, #24
 8014064:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014068:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801406c:	e719      	b.n	8013ea2 <__kernel_rem_pio2+0x292>
 801406e:	4630      	mov	r0, r6
 8014070:	4639      	mov	r1, r7
 8014072:	f7ec fd71 	bl	8000b58 <__aeabi_d2iz>
 8014076:	ab0e      	add	r3, sp, #56	; 0x38
 8014078:	4625      	mov	r5, r4
 801407a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801407e:	e710      	b.n	8013ea2 <__kernel_rem_pio2+0x292>
 8014080:	ab0e      	add	r3, sp, #56	; 0x38
 8014082:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8014086:	f7ec fa4d 	bl	8000524 <__aeabi_i2d>
 801408a:	4642      	mov	r2, r8
 801408c:	464b      	mov	r3, r9
 801408e:	f7ec fab3 	bl	80005f8 <__aeabi_dmul>
 8014092:	2200      	movs	r2, #0
 8014094:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8014098:	4b7c      	ldr	r3, [pc, #496]	; (801428c <__kernel_rem_pio2+0x67c>)
 801409a:	4640      	mov	r0, r8
 801409c:	4649      	mov	r1, r9
 801409e:	f7ec faab 	bl	80005f8 <__aeabi_dmul>
 80140a2:	3f01      	subs	r7, #1
 80140a4:	4680      	mov	r8, r0
 80140a6:	4689      	mov	r9, r1
 80140a8:	e708      	b.n	8013ebc <__kernel_rem_pio2+0x2ac>
 80140aa:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80140ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140b2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80140b6:	f7ec fa9f 	bl	80005f8 <__aeabi_dmul>
 80140ba:	4602      	mov	r2, r0
 80140bc:	460b      	mov	r3, r1
 80140be:	4640      	mov	r0, r8
 80140c0:	4649      	mov	r1, r9
 80140c2:	f7ec f8e3 	bl	800028c <__adddf3>
 80140c6:	3701      	adds	r7, #1
 80140c8:	4680      	mov	r8, r0
 80140ca:	4689      	mov	r9, r1
 80140cc:	9b04      	ldr	r3, [sp, #16]
 80140ce:	429f      	cmp	r7, r3
 80140d0:	dc01      	bgt.n	80140d6 <__kernel_rem_pio2+0x4c6>
 80140d2:	45ba      	cmp	sl, r7
 80140d4:	dae9      	bge.n	80140aa <__kernel_rem_pio2+0x49a>
 80140d6:	ab4a      	add	r3, sp, #296	; 0x128
 80140d8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80140dc:	e9c3 8900 	strd	r8, r9, [r3]
 80140e0:	f10a 0a01 	add.w	sl, sl, #1
 80140e4:	3e08      	subs	r6, #8
 80140e6:	e6f0      	b.n	8013eca <__kernel_rem_pio2+0x2ba>
 80140e8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80140ea:	2b03      	cmp	r3, #3
 80140ec:	d85b      	bhi.n	80141a6 <__kernel_rem_pio2+0x596>
 80140ee:	e8df f003 	tbb	[pc, r3]
 80140f2:	264a      	.short	0x264a
 80140f4:	0226      	.short	0x0226
 80140f6:	ab9a      	add	r3, sp, #616	; 0x268
 80140f8:	441c      	add	r4, r3
 80140fa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80140fe:	46a2      	mov	sl, r4
 8014100:	46ab      	mov	fp, r5
 8014102:	f1bb 0f00 	cmp.w	fp, #0
 8014106:	dc6c      	bgt.n	80141e2 <__kernel_rem_pio2+0x5d2>
 8014108:	46a2      	mov	sl, r4
 801410a:	46ab      	mov	fp, r5
 801410c:	f1bb 0f01 	cmp.w	fp, #1
 8014110:	f300 8086 	bgt.w	8014220 <__kernel_rem_pio2+0x610>
 8014114:	2000      	movs	r0, #0
 8014116:	2100      	movs	r1, #0
 8014118:	2d01      	cmp	r5, #1
 801411a:	f300 80a0 	bgt.w	801425e <__kernel_rem_pio2+0x64e>
 801411e:	9b02      	ldr	r3, [sp, #8]
 8014120:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8014124:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8014128:	2b00      	cmp	r3, #0
 801412a:	f040 809e 	bne.w	801426a <__kernel_rem_pio2+0x65a>
 801412e:	9b01      	ldr	r3, [sp, #4]
 8014130:	e9c3 7800 	strd	r7, r8, [r3]
 8014134:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8014138:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801413c:	e033      	b.n	80141a6 <__kernel_rem_pio2+0x596>
 801413e:	3408      	adds	r4, #8
 8014140:	ab4a      	add	r3, sp, #296	; 0x128
 8014142:	441c      	add	r4, r3
 8014144:	462e      	mov	r6, r5
 8014146:	2000      	movs	r0, #0
 8014148:	2100      	movs	r1, #0
 801414a:	2e00      	cmp	r6, #0
 801414c:	da3a      	bge.n	80141c4 <__kernel_rem_pio2+0x5b4>
 801414e:	9b02      	ldr	r3, [sp, #8]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d03d      	beq.n	80141d0 <__kernel_rem_pio2+0x5c0>
 8014154:	4602      	mov	r2, r0
 8014156:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801415a:	9c01      	ldr	r4, [sp, #4]
 801415c:	e9c4 2300 	strd	r2, r3, [r4]
 8014160:	4602      	mov	r2, r0
 8014162:	460b      	mov	r3, r1
 8014164:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8014168:	f7ec f88e 	bl	8000288 <__aeabi_dsub>
 801416c:	ae4c      	add	r6, sp, #304	; 0x130
 801416e:	2401      	movs	r4, #1
 8014170:	42a5      	cmp	r5, r4
 8014172:	da30      	bge.n	80141d6 <__kernel_rem_pio2+0x5c6>
 8014174:	9b02      	ldr	r3, [sp, #8]
 8014176:	b113      	cbz	r3, 801417e <__kernel_rem_pio2+0x56e>
 8014178:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801417c:	4619      	mov	r1, r3
 801417e:	9b01      	ldr	r3, [sp, #4]
 8014180:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8014184:	e00f      	b.n	80141a6 <__kernel_rem_pio2+0x596>
 8014186:	ab9a      	add	r3, sp, #616	; 0x268
 8014188:	441c      	add	r4, r3
 801418a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801418e:	2000      	movs	r0, #0
 8014190:	2100      	movs	r1, #0
 8014192:	2d00      	cmp	r5, #0
 8014194:	da10      	bge.n	80141b8 <__kernel_rem_pio2+0x5a8>
 8014196:	9b02      	ldr	r3, [sp, #8]
 8014198:	b113      	cbz	r3, 80141a0 <__kernel_rem_pio2+0x590>
 801419a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801419e:	4619      	mov	r1, r3
 80141a0:	9b01      	ldr	r3, [sp, #4]
 80141a2:	e9c3 0100 	strd	r0, r1, [r3]
 80141a6:	9b06      	ldr	r3, [sp, #24]
 80141a8:	f003 0007 	and.w	r0, r3, #7
 80141ac:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80141b0:	ecbd 8b02 	vpop	{d8}
 80141b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141b8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80141bc:	f7ec f866 	bl	800028c <__adddf3>
 80141c0:	3d01      	subs	r5, #1
 80141c2:	e7e6      	b.n	8014192 <__kernel_rem_pio2+0x582>
 80141c4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80141c8:	f7ec f860 	bl	800028c <__adddf3>
 80141cc:	3e01      	subs	r6, #1
 80141ce:	e7bc      	b.n	801414a <__kernel_rem_pio2+0x53a>
 80141d0:	4602      	mov	r2, r0
 80141d2:	460b      	mov	r3, r1
 80141d4:	e7c1      	b.n	801415a <__kernel_rem_pio2+0x54a>
 80141d6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80141da:	f7ec f857 	bl	800028c <__adddf3>
 80141de:	3401      	adds	r4, #1
 80141e0:	e7c6      	b.n	8014170 <__kernel_rem_pio2+0x560>
 80141e2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80141e6:	ed3a 7b02 	vldmdb	sl!, {d7}
 80141ea:	4640      	mov	r0, r8
 80141ec:	ec53 2b17 	vmov	r2, r3, d7
 80141f0:	4649      	mov	r1, r9
 80141f2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80141f6:	f7ec f849 	bl	800028c <__adddf3>
 80141fa:	4602      	mov	r2, r0
 80141fc:	460b      	mov	r3, r1
 80141fe:	4606      	mov	r6, r0
 8014200:	460f      	mov	r7, r1
 8014202:	4640      	mov	r0, r8
 8014204:	4649      	mov	r1, r9
 8014206:	f7ec f83f 	bl	8000288 <__aeabi_dsub>
 801420a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801420e:	f7ec f83d 	bl	800028c <__adddf3>
 8014212:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014216:	e9ca 0100 	strd	r0, r1, [sl]
 801421a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801421e:	e770      	b.n	8014102 <__kernel_rem_pio2+0x4f2>
 8014220:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8014224:	ed3a 7b02 	vldmdb	sl!, {d7}
 8014228:	4630      	mov	r0, r6
 801422a:	ec53 2b17 	vmov	r2, r3, d7
 801422e:	4639      	mov	r1, r7
 8014230:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014234:	f7ec f82a 	bl	800028c <__adddf3>
 8014238:	4602      	mov	r2, r0
 801423a:	460b      	mov	r3, r1
 801423c:	4680      	mov	r8, r0
 801423e:	4689      	mov	r9, r1
 8014240:	4630      	mov	r0, r6
 8014242:	4639      	mov	r1, r7
 8014244:	f7ec f820 	bl	8000288 <__aeabi_dsub>
 8014248:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801424c:	f7ec f81e 	bl	800028c <__adddf3>
 8014250:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014254:	e9ca 0100 	strd	r0, r1, [sl]
 8014258:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801425c:	e756      	b.n	801410c <__kernel_rem_pio2+0x4fc>
 801425e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014262:	f7ec f813 	bl	800028c <__adddf3>
 8014266:	3d01      	subs	r5, #1
 8014268:	e756      	b.n	8014118 <__kernel_rem_pio2+0x508>
 801426a:	9b01      	ldr	r3, [sp, #4]
 801426c:	9a01      	ldr	r2, [sp, #4]
 801426e:	601f      	str	r7, [r3, #0]
 8014270:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8014274:	605c      	str	r4, [r3, #4]
 8014276:	609d      	str	r5, [r3, #8]
 8014278:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801427c:	60d3      	str	r3, [r2, #12]
 801427e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014282:	6110      	str	r0, [r2, #16]
 8014284:	6153      	str	r3, [r2, #20]
 8014286:	e78e      	b.n	80141a6 <__kernel_rem_pio2+0x596>
 8014288:	41700000 	.word	0x41700000
 801428c:	3e700000 	.word	0x3e700000

08014290 <__kernel_sin>:
 8014290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014294:	ec55 4b10 	vmov	r4, r5, d0
 8014298:	b085      	sub	sp, #20
 801429a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801429e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80142a2:	ed8d 1b00 	vstr	d1, [sp]
 80142a6:	9002      	str	r0, [sp, #8]
 80142a8:	da06      	bge.n	80142b8 <__kernel_sin+0x28>
 80142aa:	ee10 0a10 	vmov	r0, s0
 80142ae:	4629      	mov	r1, r5
 80142b0:	f7ec fc52 	bl	8000b58 <__aeabi_d2iz>
 80142b4:	2800      	cmp	r0, #0
 80142b6:	d051      	beq.n	801435c <__kernel_sin+0xcc>
 80142b8:	4622      	mov	r2, r4
 80142ba:	462b      	mov	r3, r5
 80142bc:	4620      	mov	r0, r4
 80142be:	4629      	mov	r1, r5
 80142c0:	f7ec f99a 	bl	80005f8 <__aeabi_dmul>
 80142c4:	4682      	mov	sl, r0
 80142c6:	468b      	mov	fp, r1
 80142c8:	4602      	mov	r2, r0
 80142ca:	460b      	mov	r3, r1
 80142cc:	4620      	mov	r0, r4
 80142ce:	4629      	mov	r1, r5
 80142d0:	f7ec f992 	bl	80005f8 <__aeabi_dmul>
 80142d4:	a341      	add	r3, pc, #260	; (adr r3, 80143dc <__kernel_sin+0x14c>)
 80142d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142da:	4680      	mov	r8, r0
 80142dc:	4689      	mov	r9, r1
 80142de:	4650      	mov	r0, sl
 80142e0:	4659      	mov	r1, fp
 80142e2:	f7ec f989 	bl	80005f8 <__aeabi_dmul>
 80142e6:	a33f      	add	r3, pc, #252	; (adr r3, 80143e4 <__kernel_sin+0x154>)
 80142e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142ec:	f7eb ffcc 	bl	8000288 <__aeabi_dsub>
 80142f0:	4652      	mov	r2, sl
 80142f2:	465b      	mov	r3, fp
 80142f4:	f7ec f980 	bl	80005f8 <__aeabi_dmul>
 80142f8:	a33c      	add	r3, pc, #240	; (adr r3, 80143ec <__kernel_sin+0x15c>)
 80142fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142fe:	f7eb ffc5 	bl	800028c <__adddf3>
 8014302:	4652      	mov	r2, sl
 8014304:	465b      	mov	r3, fp
 8014306:	f7ec f977 	bl	80005f8 <__aeabi_dmul>
 801430a:	a33a      	add	r3, pc, #232	; (adr r3, 80143f4 <__kernel_sin+0x164>)
 801430c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014310:	f7eb ffba 	bl	8000288 <__aeabi_dsub>
 8014314:	4652      	mov	r2, sl
 8014316:	465b      	mov	r3, fp
 8014318:	f7ec f96e 	bl	80005f8 <__aeabi_dmul>
 801431c:	a337      	add	r3, pc, #220	; (adr r3, 80143fc <__kernel_sin+0x16c>)
 801431e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014322:	f7eb ffb3 	bl	800028c <__adddf3>
 8014326:	9b02      	ldr	r3, [sp, #8]
 8014328:	4606      	mov	r6, r0
 801432a:	460f      	mov	r7, r1
 801432c:	b9db      	cbnz	r3, 8014366 <__kernel_sin+0xd6>
 801432e:	4602      	mov	r2, r0
 8014330:	460b      	mov	r3, r1
 8014332:	4650      	mov	r0, sl
 8014334:	4659      	mov	r1, fp
 8014336:	f7ec f95f 	bl	80005f8 <__aeabi_dmul>
 801433a:	a325      	add	r3, pc, #148	; (adr r3, 80143d0 <__kernel_sin+0x140>)
 801433c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014340:	f7eb ffa2 	bl	8000288 <__aeabi_dsub>
 8014344:	4642      	mov	r2, r8
 8014346:	464b      	mov	r3, r9
 8014348:	f7ec f956 	bl	80005f8 <__aeabi_dmul>
 801434c:	4602      	mov	r2, r0
 801434e:	460b      	mov	r3, r1
 8014350:	4620      	mov	r0, r4
 8014352:	4629      	mov	r1, r5
 8014354:	f7eb ff9a 	bl	800028c <__adddf3>
 8014358:	4604      	mov	r4, r0
 801435a:	460d      	mov	r5, r1
 801435c:	ec45 4b10 	vmov	d0, r4, r5
 8014360:	b005      	add	sp, #20
 8014362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014366:	2200      	movs	r2, #0
 8014368:	4b1b      	ldr	r3, [pc, #108]	; (80143d8 <__kernel_sin+0x148>)
 801436a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801436e:	f7ec f943 	bl	80005f8 <__aeabi_dmul>
 8014372:	4632      	mov	r2, r6
 8014374:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014378:	463b      	mov	r3, r7
 801437a:	4640      	mov	r0, r8
 801437c:	4649      	mov	r1, r9
 801437e:	f7ec f93b 	bl	80005f8 <__aeabi_dmul>
 8014382:	4602      	mov	r2, r0
 8014384:	460b      	mov	r3, r1
 8014386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801438a:	f7eb ff7d 	bl	8000288 <__aeabi_dsub>
 801438e:	4652      	mov	r2, sl
 8014390:	465b      	mov	r3, fp
 8014392:	f7ec f931 	bl	80005f8 <__aeabi_dmul>
 8014396:	e9dd 2300 	ldrd	r2, r3, [sp]
 801439a:	f7eb ff75 	bl	8000288 <__aeabi_dsub>
 801439e:	a30c      	add	r3, pc, #48	; (adr r3, 80143d0 <__kernel_sin+0x140>)
 80143a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143a4:	4606      	mov	r6, r0
 80143a6:	460f      	mov	r7, r1
 80143a8:	4640      	mov	r0, r8
 80143aa:	4649      	mov	r1, r9
 80143ac:	f7ec f924 	bl	80005f8 <__aeabi_dmul>
 80143b0:	4602      	mov	r2, r0
 80143b2:	460b      	mov	r3, r1
 80143b4:	4630      	mov	r0, r6
 80143b6:	4639      	mov	r1, r7
 80143b8:	f7eb ff68 	bl	800028c <__adddf3>
 80143bc:	4602      	mov	r2, r0
 80143be:	460b      	mov	r3, r1
 80143c0:	4620      	mov	r0, r4
 80143c2:	4629      	mov	r1, r5
 80143c4:	f7eb ff60 	bl	8000288 <__aeabi_dsub>
 80143c8:	e7c6      	b.n	8014358 <__kernel_sin+0xc8>
 80143ca:	bf00      	nop
 80143cc:	f3af 8000 	nop.w
 80143d0:	55555549 	.word	0x55555549
 80143d4:	3fc55555 	.word	0x3fc55555
 80143d8:	3fe00000 	.word	0x3fe00000
 80143dc:	5acfd57c 	.word	0x5acfd57c
 80143e0:	3de5d93a 	.word	0x3de5d93a
 80143e4:	8a2b9ceb 	.word	0x8a2b9ceb
 80143e8:	3e5ae5e6 	.word	0x3e5ae5e6
 80143ec:	57b1fe7d 	.word	0x57b1fe7d
 80143f0:	3ec71de3 	.word	0x3ec71de3
 80143f4:	19c161d5 	.word	0x19c161d5
 80143f8:	3f2a01a0 	.word	0x3f2a01a0
 80143fc:	1110f8a6 	.word	0x1110f8a6
 8014400:	3f811111 	.word	0x3f811111
 8014404:	00000000 	.word	0x00000000

08014408 <__kernel_tan>:
 8014408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801440c:	ec5b ab10 	vmov	sl, fp, d0
 8014410:	4bbf      	ldr	r3, [pc, #764]	; (8014710 <__kernel_tan+0x308>)
 8014412:	b089      	sub	sp, #36	; 0x24
 8014414:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8014418:	429f      	cmp	r7, r3
 801441a:	ec59 8b11 	vmov	r8, r9, d1
 801441e:	4606      	mov	r6, r0
 8014420:	f8cd b008 	str.w	fp, [sp, #8]
 8014424:	dc22      	bgt.n	801446c <__kernel_tan+0x64>
 8014426:	ee10 0a10 	vmov	r0, s0
 801442a:	4659      	mov	r1, fp
 801442c:	f7ec fb94 	bl	8000b58 <__aeabi_d2iz>
 8014430:	2800      	cmp	r0, #0
 8014432:	d145      	bne.n	80144c0 <__kernel_tan+0xb8>
 8014434:	1c73      	adds	r3, r6, #1
 8014436:	4652      	mov	r2, sl
 8014438:	4313      	orrs	r3, r2
 801443a:	433b      	orrs	r3, r7
 801443c:	d110      	bne.n	8014460 <__kernel_tan+0x58>
 801443e:	ec4b ab10 	vmov	d0, sl, fp
 8014442:	f000 f9ad 	bl	80147a0 <fabs>
 8014446:	49b3      	ldr	r1, [pc, #716]	; (8014714 <__kernel_tan+0x30c>)
 8014448:	ec53 2b10 	vmov	r2, r3, d0
 801444c:	2000      	movs	r0, #0
 801444e:	f7ec f9fd 	bl	800084c <__aeabi_ddiv>
 8014452:	4682      	mov	sl, r0
 8014454:	468b      	mov	fp, r1
 8014456:	ec4b ab10 	vmov	d0, sl, fp
 801445a:	b009      	add	sp, #36	; 0x24
 801445c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014460:	2e01      	cmp	r6, #1
 8014462:	d0f8      	beq.n	8014456 <__kernel_tan+0x4e>
 8014464:	465b      	mov	r3, fp
 8014466:	2000      	movs	r0, #0
 8014468:	49ab      	ldr	r1, [pc, #684]	; (8014718 <__kernel_tan+0x310>)
 801446a:	e7f0      	b.n	801444e <__kernel_tan+0x46>
 801446c:	4bab      	ldr	r3, [pc, #684]	; (801471c <__kernel_tan+0x314>)
 801446e:	429f      	cmp	r7, r3
 8014470:	dd26      	ble.n	80144c0 <__kernel_tan+0xb8>
 8014472:	9b02      	ldr	r3, [sp, #8]
 8014474:	2b00      	cmp	r3, #0
 8014476:	da09      	bge.n	801448c <__kernel_tan+0x84>
 8014478:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801447c:	469b      	mov	fp, r3
 801447e:	ee10 aa10 	vmov	sl, s0
 8014482:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014486:	ee11 8a10 	vmov	r8, s2
 801448a:	4699      	mov	r9, r3
 801448c:	4652      	mov	r2, sl
 801448e:	465b      	mov	r3, fp
 8014490:	a181      	add	r1, pc, #516	; (adr r1, 8014698 <__kernel_tan+0x290>)
 8014492:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014496:	f7eb fef7 	bl	8000288 <__aeabi_dsub>
 801449a:	4642      	mov	r2, r8
 801449c:	464b      	mov	r3, r9
 801449e:	4604      	mov	r4, r0
 80144a0:	460d      	mov	r5, r1
 80144a2:	a17f      	add	r1, pc, #508	; (adr r1, 80146a0 <__kernel_tan+0x298>)
 80144a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80144a8:	f7eb feee 	bl	8000288 <__aeabi_dsub>
 80144ac:	4622      	mov	r2, r4
 80144ae:	462b      	mov	r3, r5
 80144b0:	f7eb feec 	bl	800028c <__adddf3>
 80144b4:	f04f 0800 	mov.w	r8, #0
 80144b8:	4682      	mov	sl, r0
 80144ba:	468b      	mov	fp, r1
 80144bc:	f04f 0900 	mov.w	r9, #0
 80144c0:	4652      	mov	r2, sl
 80144c2:	465b      	mov	r3, fp
 80144c4:	4650      	mov	r0, sl
 80144c6:	4659      	mov	r1, fp
 80144c8:	f7ec f896 	bl	80005f8 <__aeabi_dmul>
 80144cc:	4602      	mov	r2, r0
 80144ce:	460b      	mov	r3, r1
 80144d0:	e9cd 0100 	strd	r0, r1, [sp]
 80144d4:	f7ec f890 	bl	80005f8 <__aeabi_dmul>
 80144d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80144dc:	4604      	mov	r4, r0
 80144de:	460d      	mov	r5, r1
 80144e0:	4650      	mov	r0, sl
 80144e2:	4659      	mov	r1, fp
 80144e4:	f7ec f888 	bl	80005f8 <__aeabi_dmul>
 80144e8:	a36f      	add	r3, pc, #444	; (adr r3, 80146a8 <__kernel_tan+0x2a0>)
 80144ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80144f2:	4620      	mov	r0, r4
 80144f4:	4629      	mov	r1, r5
 80144f6:	f7ec f87f 	bl	80005f8 <__aeabi_dmul>
 80144fa:	a36d      	add	r3, pc, #436	; (adr r3, 80146b0 <__kernel_tan+0x2a8>)
 80144fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014500:	f7eb fec4 	bl	800028c <__adddf3>
 8014504:	4622      	mov	r2, r4
 8014506:	462b      	mov	r3, r5
 8014508:	f7ec f876 	bl	80005f8 <__aeabi_dmul>
 801450c:	a36a      	add	r3, pc, #424	; (adr r3, 80146b8 <__kernel_tan+0x2b0>)
 801450e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014512:	f7eb febb 	bl	800028c <__adddf3>
 8014516:	4622      	mov	r2, r4
 8014518:	462b      	mov	r3, r5
 801451a:	f7ec f86d 	bl	80005f8 <__aeabi_dmul>
 801451e:	a368      	add	r3, pc, #416	; (adr r3, 80146c0 <__kernel_tan+0x2b8>)
 8014520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014524:	f7eb feb2 	bl	800028c <__adddf3>
 8014528:	4622      	mov	r2, r4
 801452a:	462b      	mov	r3, r5
 801452c:	f7ec f864 	bl	80005f8 <__aeabi_dmul>
 8014530:	a365      	add	r3, pc, #404	; (adr r3, 80146c8 <__kernel_tan+0x2c0>)
 8014532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014536:	f7eb fea9 	bl	800028c <__adddf3>
 801453a:	4622      	mov	r2, r4
 801453c:	462b      	mov	r3, r5
 801453e:	f7ec f85b 	bl	80005f8 <__aeabi_dmul>
 8014542:	a363      	add	r3, pc, #396	; (adr r3, 80146d0 <__kernel_tan+0x2c8>)
 8014544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014548:	f7eb fea0 	bl	800028c <__adddf3>
 801454c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014550:	f7ec f852 	bl	80005f8 <__aeabi_dmul>
 8014554:	a360      	add	r3, pc, #384	; (adr r3, 80146d8 <__kernel_tan+0x2d0>)
 8014556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801455a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801455e:	4620      	mov	r0, r4
 8014560:	4629      	mov	r1, r5
 8014562:	f7ec f849 	bl	80005f8 <__aeabi_dmul>
 8014566:	a35e      	add	r3, pc, #376	; (adr r3, 80146e0 <__kernel_tan+0x2d8>)
 8014568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801456c:	f7eb fe8e 	bl	800028c <__adddf3>
 8014570:	4622      	mov	r2, r4
 8014572:	462b      	mov	r3, r5
 8014574:	f7ec f840 	bl	80005f8 <__aeabi_dmul>
 8014578:	a35b      	add	r3, pc, #364	; (adr r3, 80146e8 <__kernel_tan+0x2e0>)
 801457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801457e:	f7eb fe85 	bl	800028c <__adddf3>
 8014582:	4622      	mov	r2, r4
 8014584:	462b      	mov	r3, r5
 8014586:	f7ec f837 	bl	80005f8 <__aeabi_dmul>
 801458a:	a359      	add	r3, pc, #356	; (adr r3, 80146f0 <__kernel_tan+0x2e8>)
 801458c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014590:	f7eb fe7c 	bl	800028c <__adddf3>
 8014594:	4622      	mov	r2, r4
 8014596:	462b      	mov	r3, r5
 8014598:	f7ec f82e 	bl	80005f8 <__aeabi_dmul>
 801459c:	a356      	add	r3, pc, #344	; (adr r3, 80146f8 <__kernel_tan+0x2f0>)
 801459e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145a2:	f7eb fe73 	bl	800028c <__adddf3>
 80145a6:	4622      	mov	r2, r4
 80145a8:	462b      	mov	r3, r5
 80145aa:	f7ec f825 	bl	80005f8 <__aeabi_dmul>
 80145ae:	a354      	add	r3, pc, #336	; (adr r3, 8014700 <__kernel_tan+0x2f8>)
 80145b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145b4:	f7eb fe6a 	bl	800028c <__adddf3>
 80145b8:	4602      	mov	r2, r0
 80145ba:	460b      	mov	r3, r1
 80145bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80145c0:	f7eb fe64 	bl	800028c <__adddf3>
 80145c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80145c8:	f7ec f816 	bl	80005f8 <__aeabi_dmul>
 80145cc:	4642      	mov	r2, r8
 80145ce:	464b      	mov	r3, r9
 80145d0:	f7eb fe5c 	bl	800028c <__adddf3>
 80145d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80145d8:	f7ec f80e 	bl	80005f8 <__aeabi_dmul>
 80145dc:	4642      	mov	r2, r8
 80145de:	464b      	mov	r3, r9
 80145e0:	f7eb fe54 	bl	800028c <__adddf3>
 80145e4:	a348      	add	r3, pc, #288	; (adr r3, 8014708 <__kernel_tan+0x300>)
 80145e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145ea:	4604      	mov	r4, r0
 80145ec:	460d      	mov	r5, r1
 80145ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80145f2:	f7ec f801 	bl	80005f8 <__aeabi_dmul>
 80145f6:	4622      	mov	r2, r4
 80145f8:	462b      	mov	r3, r5
 80145fa:	f7eb fe47 	bl	800028c <__adddf3>
 80145fe:	e9cd 0100 	strd	r0, r1, [sp]
 8014602:	460b      	mov	r3, r1
 8014604:	4602      	mov	r2, r0
 8014606:	4659      	mov	r1, fp
 8014608:	4650      	mov	r0, sl
 801460a:	f7eb fe3f 	bl	800028c <__adddf3>
 801460e:	4b43      	ldr	r3, [pc, #268]	; (801471c <__kernel_tan+0x314>)
 8014610:	429f      	cmp	r7, r3
 8014612:	4604      	mov	r4, r0
 8014614:	460d      	mov	r5, r1
 8014616:	f340 8083 	ble.w	8014720 <__kernel_tan+0x318>
 801461a:	4630      	mov	r0, r6
 801461c:	f7eb ff82 	bl	8000524 <__aeabi_i2d>
 8014620:	4622      	mov	r2, r4
 8014622:	4680      	mov	r8, r0
 8014624:	4689      	mov	r9, r1
 8014626:	462b      	mov	r3, r5
 8014628:	4620      	mov	r0, r4
 801462a:	4629      	mov	r1, r5
 801462c:	f7eb ffe4 	bl	80005f8 <__aeabi_dmul>
 8014630:	4642      	mov	r2, r8
 8014632:	4606      	mov	r6, r0
 8014634:	460f      	mov	r7, r1
 8014636:	464b      	mov	r3, r9
 8014638:	4620      	mov	r0, r4
 801463a:	4629      	mov	r1, r5
 801463c:	f7eb fe26 	bl	800028c <__adddf3>
 8014640:	4602      	mov	r2, r0
 8014642:	460b      	mov	r3, r1
 8014644:	4630      	mov	r0, r6
 8014646:	4639      	mov	r1, r7
 8014648:	f7ec f900 	bl	800084c <__aeabi_ddiv>
 801464c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014650:	f7eb fe1a 	bl	8000288 <__aeabi_dsub>
 8014654:	4602      	mov	r2, r0
 8014656:	460b      	mov	r3, r1
 8014658:	4650      	mov	r0, sl
 801465a:	4659      	mov	r1, fp
 801465c:	f7eb fe14 	bl	8000288 <__aeabi_dsub>
 8014660:	4602      	mov	r2, r0
 8014662:	460b      	mov	r3, r1
 8014664:	f7eb fe12 	bl	800028c <__adddf3>
 8014668:	4602      	mov	r2, r0
 801466a:	460b      	mov	r3, r1
 801466c:	4640      	mov	r0, r8
 801466e:	4649      	mov	r1, r9
 8014670:	f7eb fe0a 	bl	8000288 <__aeabi_dsub>
 8014674:	9b02      	ldr	r3, [sp, #8]
 8014676:	4604      	mov	r4, r0
 8014678:	1798      	asrs	r0, r3, #30
 801467a:	f000 0002 	and.w	r0, r0, #2
 801467e:	f1c0 0001 	rsb	r0, r0, #1
 8014682:	460d      	mov	r5, r1
 8014684:	f7eb ff4e 	bl	8000524 <__aeabi_i2d>
 8014688:	4602      	mov	r2, r0
 801468a:	460b      	mov	r3, r1
 801468c:	4620      	mov	r0, r4
 801468e:	4629      	mov	r1, r5
 8014690:	f7eb ffb2 	bl	80005f8 <__aeabi_dmul>
 8014694:	e6dd      	b.n	8014452 <__kernel_tan+0x4a>
 8014696:	bf00      	nop
 8014698:	54442d18 	.word	0x54442d18
 801469c:	3fe921fb 	.word	0x3fe921fb
 80146a0:	33145c07 	.word	0x33145c07
 80146a4:	3c81a626 	.word	0x3c81a626
 80146a8:	74bf7ad4 	.word	0x74bf7ad4
 80146ac:	3efb2a70 	.word	0x3efb2a70
 80146b0:	32f0a7e9 	.word	0x32f0a7e9
 80146b4:	3f12b80f 	.word	0x3f12b80f
 80146b8:	1a8d1068 	.word	0x1a8d1068
 80146bc:	3f3026f7 	.word	0x3f3026f7
 80146c0:	fee08315 	.word	0xfee08315
 80146c4:	3f57dbc8 	.word	0x3f57dbc8
 80146c8:	e96e8493 	.word	0xe96e8493
 80146cc:	3f8226e3 	.word	0x3f8226e3
 80146d0:	1bb341fe 	.word	0x1bb341fe
 80146d4:	3faba1ba 	.word	0x3faba1ba
 80146d8:	db605373 	.word	0xdb605373
 80146dc:	bef375cb 	.word	0xbef375cb
 80146e0:	a03792a6 	.word	0xa03792a6
 80146e4:	3f147e88 	.word	0x3f147e88
 80146e8:	f2f26501 	.word	0xf2f26501
 80146ec:	3f4344d8 	.word	0x3f4344d8
 80146f0:	c9560328 	.word	0xc9560328
 80146f4:	3f6d6d22 	.word	0x3f6d6d22
 80146f8:	8406d637 	.word	0x8406d637
 80146fc:	3f9664f4 	.word	0x3f9664f4
 8014700:	1110fe7a 	.word	0x1110fe7a
 8014704:	3fc11111 	.word	0x3fc11111
 8014708:	55555563 	.word	0x55555563
 801470c:	3fd55555 	.word	0x3fd55555
 8014710:	3e2fffff 	.word	0x3e2fffff
 8014714:	3ff00000 	.word	0x3ff00000
 8014718:	bff00000 	.word	0xbff00000
 801471c:	3fe59427 	.word	0x3fe59427
 8014720:	2e01      	cmp	r6, #1
 8014722:	d036      	beq.n	8014792 <__kernel_tan+0x38a>
 8014724:	460f      	mov	r7, r1
 8014726:	4602      	mov	r2, r0
 8014728:	460b      	mov	r3, r1
 801472a:	2000      	movs	r0, #0
 801472c:	491a      	ldr	r1, [pc, #104]	; (8014798 <__kernel_tan+0x390>)
 801472e:	f7ec f88d 	bl	800084c <__aeabi_ddiv>
 8014732:	2600      	movs	r6, #0
 8014734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014738:	4652      	mov	r2, sl
 801473a:	465b      	mov	r3, fp
 801473c:	4630      	mov	r0, r6
 801473e:	4639      	mov	r1, r7
 8014740:	f7eb fda2 	bl	8000288 <__aeabi_dsub>
 8014744:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8014748:	4602      	mov	r2, r0
 801474a:	460b      	mov	r3, r1
 801474c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014750:	f7eb fd9a 	bl	8000288 <__aeabi_dsub>
 8014754:	4632      	mov	r2, r6
 8014756:	462b      	mov	r3, r5
 8014758:	f7eb ff4e 	bl	80005f8 <__aeabi_dmul>
 801475c:	4632      	mov	r2, r6
 801475e:	4682      	mov	sl, r0
 8014760:	468b      	mov	fp, r1
 8014762:	462b      	mov	r3, r5
 8014764:	4630      	mov	r0, r6
 8014766:	4639      	mov	r1, r7
 8014768:	f7eb ff46 	bl	80005f8 <__aeabi_dmul>
 801476c:	2200      	movs	r2, #0
 801476e:	4b0b      	ldr	r3, [pc, #44]	; (801479c <__kernel_tan+0x394>)
 8014770:	f7eb fd8c 	bl	800028c <__adddf3>
 8014774:	4602      	mov	r2, r0
 8014776:	460b      	mov	r3, r1
 8014778:	4650      	mov	r0, sl
 801477a:	4659      	mov	r1, fp
 801477c:	f7eb fd86 	bl	800028c <__adddf3>
 8014780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014784:	f7eb ff38 	bl	80005f8 <__aeabi_dmul>
 8014788:	4632      	mov	r2, r6
 801478a:	462b      	mov	r3, r5
 801478c:	f7eb fd7e 	bl	800028c <__adddf3>
 8014790:	e65f      	b.n	8014452 <__kernel_tan+0x4a>
 8014792:	4682      	mov	sl, r0
 8014794:	468b      	mov	fp, r1
 8014796:	e65e      	b.n	8014456 <__kernel_tan+0x4e>
 8014798:	bff00000 	.word	0xbff00000
 801479c:	3ff00000 	.word	0x3ff00000

080147a0 <fabs>:
 80147a0:	ec51 0b10 	vmov	r0, r1, d0
 80147a4:	ee10 2a10 	vmov	r2, s0
 80147a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80147ac:	ec43 2b10 	vmov	d0, r2, r3
 80147b0:	4770      	bx	lr

080147b2 <finite>:
 80147b2:	ee10 3a90 	vmov	r3, s1
 80147b6:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80147ba:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80147be:	0fc0      	lsrs	r0, r0, #31
 80147c0:	4770      	bx	lr

080147c2 <matherr>:
 80147c2:	2000      	movs	r0, #0
 80147c4:	4770      	bx	lr
	...

080147c8 <nan>:
 80147c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80147d0 <nan+0x8>
 80147cc:	4770      	bx	lr
 80147ce:	bf00      	nop
 80147d0:	00000000 	.word	0x00000000
 80147d4:	7ff80000 	.word	0x7ff80000

080147d8 <rint>:
 80147d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80147da:	ec51 0b10 	vmov	r0, r1, d0
 80147de:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80147e2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80147e6:	2e13      	cmp	r6, #19
 80147e8:	460b      	mov	r3, r1
 80147ea:	ee10 4a10 	vmov	r4, s0
 80147ee:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80147f2:	dc56      	bgt.n	80148a2 <rint+0xca>
 80147f4:	2e00      	cmp	r6, #0
 80147f6:	da2b      	bge.n	8014850 <rint+0x78>
 80147f8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80147fc:	4302      	orrs	r2, r0
 80147fe:	d023      	beq.n	8014848 <rint+0x70>
 8014800:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8014804:	4302      	orrs	r2, r0
 8014806:	4254      	negs	r4, r2
 8014808:	4314      	orrs	r4, r2
 801480a:	0c4b      	lsrs	r3, r1, #17
 801480c:	0b24      	lsrs	r4, r4, #12
 801480e:	045b      	lsls	r3, r3, #17
 8014810:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8014814:	ea44 0103 	orr.w	r1, r4, r3
 8014818:	460b      	mov	r3, r1
 801481a:	492f      	ldr	r1, [pc, #188]	; (80148d8 <rint+0x100>)
 801481c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8014820:	e9d1 6700 	ldrd	r6, r7, [r1]
 8014824:	4602      	mov	r2, r0
 8014826:	4639      	mov	r1, r7
 8014828:	4630      	mov	r0, r6
 801482a:	f7eb fd2f 	bl	800028c <__adddf3>
 801482e:	e9cd 0100 	strd	r0, r1, [sp]
 8014832:	463b      	mov	r3, r7
 8014834:	4632      	mov	r2, r6
 8014836:	e9dd 0100 	ldrd	r0, r1, [sp]
 801483a:	f7eb fd25 	bl	8000288 <__aeabi_dsub>
 801483e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014842:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8014846:	4639      	mov	r1, r7
 8014848:	ec41 0b10 	vmov	d0, r0, r1
 801484c:	b003      	add	sp, #12
 801484e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014850:	4a22      	ldr	r2, [pc, #136]	; (80148dc <rint+0x104>)
 8014852:	4132      	asrs	r2, r6
 8014854:	ea01 0702 	and.w	r7, r1, r2
 8014858:	4307      	orrs	r7, r0
 801485a:	d0f5      	beq.n	8014848 <rint+0x70>
 801485c:	0852      	lsrs	r2, r2, #1
 801485e:	4011      	ands	r1, r2
 8014860:	430c      	orrs	r4, r1
 8014862:	d00b      	beq.n	801487c <rint+0xa4>
 8014864:	ea23 0202 	bic.w	r2, r3, r2
 8014868:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801486c:	2e13      	cmp	r6, #19
 801486e:	fa43 f306 	asr.w	r3, r3, r6
 8014872:	bf0c      	ite	eq
 8014874:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8014878:	2400      	movne	r4, #0
 801487a:	4313      	orrs	r3, r2
 801487c:	4916      	ldr	r1, [pc, #88]	; (80148d8 <rint+0x100>)
 801487e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8014882:	4622      	mov	r2, r4
 8014884:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014888:	4620      	mov	r0, r4
 801488a:	4629      	mov	r1, r5
 801488c:	f7eb fcfe 	bl	800028c <__adddf3>
 8014890:	e9cd 0100 	strd	r0, r1, [sp]
 8014894:	4622      	mov	r2, r4
 8014896:	462b      	mov	r3, r5
 8014898:	e9dd 0100 	ldrd	r0, r1, [sp]
 801489c:	f7eb fcf4 	bl	8000288 <__aeabi_dsub>
 80148a0:	e7d2      	b.n	8014848 <rint+0x70>
 80148a2:	2e33      	cmp	r6, #51	; 0x33
 80148a4:	dd07      	ble.n	80148b6 <rint+0xde>
 80148a6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80148aa:	d1cd      	bne.n	8014848 <rint+0x70>
 80148ac:	ee10 2a10 	vmov	r2, s0
 80148b0:	f7eb fcec 	bl	800028c <__adddf3>
 80148b4:	e7c8      	b.n	8014848 <rint+0x70>
 80148b6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80148ba:	f04f 32ff 	mov.w	r2, #4294967295
 80148be:	40f2      	lsrs	r2, r6
 80148c0:	4210      	tst	r0, r2
 80148c2:	d0c1      	beq.n	8014848 <rint+0x70>
 80148c4:	0852      	lsrs	r2, r2, #1
 80148c6:	4210      	tst	r0, r2
 80148c8:	bf1f      	itttt	ne
 80148ca:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80148ce:	ea20 0202 	bicne.w	r2, r0, r2
 80148d2:	4134      	asrne	r4, r6
 80148d4:	4314      	orrne	r4, r2
 80148d6:	e7d1      	b.n	801487c <rint+0xa4>
 80148d8:	080158c0 	.word	0x080158c0
 80148dc:	000fffff 	.word	0x000fffff

080148e0 <scalbn>:
 80148e0:	b570      	push	{r4, r5, r6, lr}
 80148e2:	ec55 4b10 	vmov	r4, r5, d0
 80148e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80148ea:	4606      	mov	r6, r0
 80148ec:	462b      	mov	r3, r5
 80148ee:	b9aa      	cbnz	r2, 801491c <scalbn+0x3c>
 80148f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80148f4:	4323      	orrs	r3, r4
 80148f6:	d03b      	beq.n	8014970 <scalbn+0x90>
 80148f8:	4b31      	ldr	r3, [pc, #196]	; (80149c0 <scalbn+0xe0>)
 80148fa:	4629      	mov	r1, r5
 80148fc:	2200      	movs	r2, #0
 80148fe:	ee10 0a10 	vmov	r0, s0
 8014902:	f7eb fe79 	bl	80005f8 <__aeabi_dmul>
 8014906:	4b2f      	ldr	r3, [pc, #188]	; (80149c4 <scalbn+0xe4>)
 8014908:	429e      	cmp	r6, r3
 801490a:	4604      	mov	r4, r0
 801490c:	460d      	mov	r5, r1
 801490e:	da12      	bge.n	8014936 <scalbn+0x56>
 8014910:	a327      	add	r3, pc, #156	; (adr r3, 80149b0 <scalbn+0xd0>)
 8014912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014916:	f7eb fe6f 	bl	80005f8 <__aeabi_dmul>
 801491a:	e009      	b.n	8014930 <scalbn+0x50>
 801491c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014920:	428a      	cmp	r2, r1
 8014922:	d10c      	bne.n	801493e <scalbn+0x5e>
 8014924:	ee10 2a10 	vmov	r2, s0
 8014928:	4620      	mov	r0, r4
 801492a:	4629      	mov	r1, r5
 801492c:	f7eb fcae 	bl	800028c <__adddf3>
 8014930:	4604      	mov	r4, r0
 8014932:	460d      	mov	r5, r1
 8014934:	e01c      	b.n	8014970 <scalbn+0x90>
 8014936:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801493a:	460b      	mov	r3, r1
 801493c:	3a36      	subs	r2, #54	; 0x36
 801493e:	4432      	add	r2, r6
 8014940:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014944:	428a      	cmp	r2, r1
 8014946:	dd0b      	ble.n	8014960 <scalbn+0x80>
 8014948:	ec45 4b11 	vmov	d1, r4, r5
 801494c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80149b8 <scalbn+0xd8>
 8014950:	f000 f917 	bl	8014b82 <copysign>
 8014954:	a318      	add	r3, pc, #96	; (adr r3, 80149b8 <scalbn+0xd8>)
 8014956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801495a:	ec51 0b10 	vmov	r0, r1, d0
 801495e:	e7da      	b.n	8014916 <scalbn+0x36>
 8014960:	2a00      	cmp	r2, #0
 8014962:	dd08      	ble.n	8014976 <scalbn+0x96>
 8014964:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014968:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801496c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014970:	ec45 4b10 	vmov	d0, r4, r5
 8014974:	bd70      	pop	{r4, r5, r6, pc}
 8014976:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801497a:	da0d      	bge.n	8014998 <scalbn+0xb8>
 801497c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014980:	429e      	cmp	r6, r3
 8014982:	ec45 4b11 	vmov	d1, r4, r5
 8014986:	dce1      	bgt.n	801494c <scalbn+0x6c>
 8014988:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80149b0 <scalbn+0xd0>
 801498c:	f000 f8f9 	bl	8014b82 <copysign>
 8014990:	a307      	add	r3, pc, #28	; (adr r3, 80149b0 <scalbn+0xd0>)
 8014992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014996:	e7e0      	b.n	801495a <scalbn+0x7a>
 8014998:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801499c:	3236      	adds	r2, #54	; 0x36
 801499e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80149a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80149a6:	4620      	mov	r0, r4
 80149a8:	4629      	mov	r1, r5
 80149aa:	2200      	movs	r2, #0
 80149ac:	4b06      	ldr	r3, [pc, #24]	; (80149c8 <scalbn+0xe8>)
 80149ae:	e7b2      	b.n	8014916 <scalbn+0x36>
 80149b0:	c2f8f359 	.word	0xc2f8f359
 80149b4:	01a56e1f 	.word	0x01a56e1f
 80149b8:	8800759c 	.word	0x8800759c
 80149bc:	7e37e43c 	.word	0x7e37e43c
 80149c0:	43500000 	.word	0x43500000
 80149c4:	ffff3cb0 	.word	0xffff3cb0
 80149c8:	3c900000 	.word	0x3c900000

080149cc <atanf>:
 80149cc:	b538      	push	{r3, r4, r5, lr}
 80149ce:	ee10 5a10 	vmov	r5, s0
 80149d2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80149d6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80149da:	eef0 7a40 	vmov.f32	s15, s0
 80149de:	db10      	blt.n	8014a02 <atanf+0x36>
 80149e0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80149e4:	dd04      	ble.n	80149f0 <atanf+0x24>
 80149e6:	ee70 7a00 	vadd.f32	s15, s0, s0
 80149ea:	eeb0 0a67 	vmov.f32	s0, s15
 80149ee:	bd38      	pop	{r3, r4, r5, pc}
 80149f0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8014b28 <atanf+0x15c>
 80149f4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8014b2c <atanf+0x160>
 80149f8:	2d00      	cmp	r5, #0
 80149fa:	bfd8      	it	le
 80149fc:	eef0 7a47 	vmovle.f32	s15, s14
 8014a00:	e7f3      	b.n	80149ea <atanf+0x1e>
 8014a02:	4b4b      	ldr	r3, [pc, #300]	; (8014b30 <atanf+0x164>)
 8014a04:	429c      	cmp	r4, r3
 8014a06:	dc10      	bgt.n	8014a2a <atanf+0x5e>
 8014a08:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8014a0c:	da0a      	bge.n	8014a24 <atanf+0x58>
 8014a0e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8014b34 <atanf+0x168>
 8014a12:	ee30 7a07 	vadd.f32	s14, s0, s14
 8014a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014a1a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a22:	dce2      	bgt.n	80149ea <atanf+0x1e>
 8014a24:	f04f 33ff 	mov.w	r3, #4294967295
 8014a28:	e013      	b.n	8014a52 <atanf+0x86>
 8014a2a:	f000 f8a3 	bl	8014b74 <fabsf>
 8014a2e:	4b42      	ldr	r3, [pc, #264]	; (8014b38 <atanf+0x16c>)
 8014a30:	429c      	cmp	r4, r3
 8014a32:	dc4f      	bgt.n	8014ad4 <atanf+0x108>
 8014a34:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8014a38:	429c      	cmp	r4, r3
 8014a3a:	dc41      	bgt.n	8014ac0 <atanf+0xf4>
 8014a3c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8014a40:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014a44:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014a48:	2300      	movs	r3, #0
 8014a4a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014a4e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014a52:	1c5a      	adds	r2, r3, #1
 8014a54:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8014a58:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8014b3c <atanf+0x170>
 8014a5c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8014b40 <atanf+0x174>
 8014a60:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8014b44 <atanf+0x178>
 8014a64:	ee66 6a06 	vmul.f32	s13, s12, s12
 8014a68:	eee6 5a87 	vfma.f32	s11, s13, s14
 8014a6c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8014b48 <atanf+0x17c>
 8014a70:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014a74:	eddf 5a35 	vldr	s11, [pc, #212]	; 8014b4c <atanf+0x180>
 8014a78:	eee7 5a26 	vfma.f32	s11, s14, s13
 8014a7c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8014b50 <atanf+0x184>
 8014a80:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014a84:	eddf 5a33 	vldr	s11, [pc, #204]	; 8014b54 <atanf+0x188>
 8014a88:	eee7 5a26 	vfma.f32	s11, s14, s13
 8014a8c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8014b58 <atanf+0x18c>
 8014a90:	eea6 5a87 	vfma.f32	s10, s13, s14
 8014a94:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8014b5c <atanf+0x190>
 8014a98:	eea5 7a26 	vfma.f32	s14, s10, s13
 8014a9c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8014b60 <atanf+0x194>
 8014aa0:	eea7 5a26 	vfma.f32	s10, s14, s13
 8014aa4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8014b64 <atanf+0x198>
 8014aa8:	eea5 7a26 	vfma.f32	s14, s10, s13
 8014aac:	ee27 7a26 	vmul.f32	s14, s14, s13
 8014ab0:	eea5 7a86 	vfma.f32	s14, s11, s12
 8014ab4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014ab8:	d121      	bne.n	8014afe <atanf+0x132>
 8014aba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014abe:	e794      	b.n	80149ea <atanf+0x1e>
 8014ac0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014ac4:	ee30 7a67 	vsub.f32	s14, s0, s15
 8014ac8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014acc:	2301      	movs	r3, #1
 8014ace:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014ad2:	e7be      	b.n	8014a52 <atanf+0x86>
 8014ad4:	4b24      	ldr	r3, [pc, #144]	; (8014b68 <atanf+0x19c>)
 8014ad6:	429c      	cmp	r4, r3
 8014ad8:	dc0b      	bgt.n	8014af2 <atanf+0x126>
 8014ada:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8014ade:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014ae2:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014ae6:	2302      	movs	r3, #2
 8014ae8:	ee70 6a67 	vsub.f32	s13, s0, s15
 8014aec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014af0:	e7af      	b.n	8014a52 <atanf+0x86>
 8014af2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014af6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014afa:	2303      	movs	r3, #3
 8014afc:	e7a9      	b.n	8014a52 <atanf+0x86>
 8014afe:	4a1b      	ldr	r2, [pc, #108]	; (8014b6c <atanf+0x1a0>)
 8014b00:	491b      	ldr	r1, [pc, #108]	; (8014b70 <atanf+0x1a4>)
 8014b02:	009b      	lsls	r3, r3, #2
 8014b04:	441a      	add	r2, r3
 8014b06:	440b      	add	r3, r1
 8014b08:	edd3 6a00 	vldr	s13, [r3]
 8014b0c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8014b10:	2d00      	cmp	r5, #0
 8014b12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014b16:	ed92 7a00 	vldr	s14, [r2]
 8014b1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014b1e:	bfb8      	it	lt
 8014b20:	eef1 7a67 	vneglt.f32	s15, s15
 8014b24:	e761      	b.n	80149ea <atanf+0x1e>
 8014b26:	bf00      	nop
 8014b28:	bfc90fdb 	.word	0xbfc90fdb
 8014b2c:	3fc90fdb 	.word	0x3fc90fdb
 8014b30:	3edfffff 	.word	0x3edfffff
 8014b34:	7149f2ca 	.word	0x7149f2ca
 8014b38:	3f97ffff 	.word	0x3f97ffff
 8014b3c:	3c8569d7 	.word	0x3c8569d7
 8014b40:	3d4bda59 	.word	0x3d4bda59
 8014b44:	bd6ef16b 	.word	0xbd6ef16b
 8014b48:	3d886b35 	.word	0x3d886b35
 8014b4c:	3dba2e6e 	.word	0x3dba2e6e
 8014b50:	3e124925 	.word	0x3e124925
 8014b54:	3eaaaaab 	.word	0x3eaaaaab
 8014b58:	bd15a221 	.word	0xbd15a221
 8014b5c:	bd9d8795 	.word	0xbd9d8795
 8014b60:	bde38e38 	.word	0xbde38e38
 8014b64:	be4ccccd 	.word	0xbe4ccccd
 8014b68:	401bffff 	.word	0x401bffff
 8014b6c:	080158d0 	.word	0x080158d0
 8014b70:	080158e0 	.word	0x080158e0

08014b74 <fabsf>:
 8014b74:	ee10 3a10 	vmov	r3, s0
 8014b78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014b7c:	ee00 3a10 	vmov	s0, r3
 8014b80:	4770      	bx	lr

08014b82 <copysign>:
 8014b82:	ec51 0b10 	vmov	r0, r1, d0
 8014b86:	ee11 0a90 	vmov	r0, s3
 8014b8a:	ee10 2a10 	vmov	r2, s0
 8014b8e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014b92:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8014b96:	ea41 0300 	orr.w	r3, r1, r0
 8014b9a:	ec43 2b10 	vmov	d0, r2, r3
 8014b9e:	4770      	bx	lr

08014ba0 <__errno>:
 8014ba0:	4b01      	ldr	r3, [pc, #4]	; (8014ba8 <__errno+0x8>)
 8014ba2:	6818      	ldr	r0, [r3, #0]
 8014ba4:	4770      	bx	lr
 8014ba6:	bf00      	nop
 8014ba8:	20000208 	.word	0x20000208

08014bac <__libc_init_array>:
 8014bac:	b570      	push	{r4, r5, r6, lr}
 8014bae:	4e0d      	ldr	r6, [pc, #52]	; (8014be4 <__libc_init_array+0x38>)
 8014bb0:	4c0d      	ldr	r4, [pc, #52]	; (8014be8 <__libc_init_array+0x3c>)
 8014bb2:	1ba4      	subs	r4, r4, r6
 8014bb4:	10a4      	asrs	r4, r4, #2
 8014bb6:	2500      	movs	r5, #0
 8014bb8:	42a5      	cmp	r5, r4
 8014bba:	d109      	bne.n	8014bd0 <__libc_init_array+0x24>
 8014bbc:	4e0b      	ldr	r6, [pc, #44]	; (8014bec <__libc_init_array+0x40>)
 8014bbe:	4c0c      	ldr	r4, [pc, #48]	; (8014bf0 <__libc_init_array+0x44>)
 8014bc0:	f000 fc40 	bl	8015444 <_init>
 8014bc4:	1ba4      	subs	r4, r4, r6
 8014bc6:	10a4      	asrs	r4, r4, #2
 8014bc8:	2500      	movs	r5, #0
 8014bca:	42a5      	cmp	r5, r4
 8014bcc:	d105      	bne.n	8014bda <__libc_init_array+0x2e>
 8014bce:	bd70      	pop	{r4, r5, r6, pc}
 8014bd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014bd4:	4798      	blx	r3
 8014bd6:	3501      	adds	r5, #1
 8014bd8:	e7ee      	b.n	8014bb8 <__libc_init_array+0xc>
 8014bda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014bde:	4798      	blx	r3
 8014be0:	3501      	adds	r5, #1
 8014be2:	e7f2      	b.n	8014bca <__libc_init_array+0x1e>
 8014be4:	0801598c 	.word	0x0801598c
 8014be8:	0801598c 	.word	0x0801598c
 8014bec:	0801598c 	.word	0x0801598c
 8014bf0:	08015990 	.word	0x08015990

08014bf4 <malloc>:
 8014bf4:	4b02      	ldr	r3, [pc, #8]	; (8014c00 <malloc+0xc>)
 8014bf6:	4601      	mov	r1, r0
 8014bf8:	6818      	ldr	r0, [r3, #0]
 8014bfa:	f000 b86d 	b.w	8014cd8 <_malloc_r>
 8014bfe:	bf00      	nop
 8014c00:	20000208 	.word	0x20000208

08014c04 <free>:
 8014c04:	4b02      	ldr	r3, [pc, #8]	; (8014c10 <free+0xc>)
 8014c06:	4601      	mov	r1, r0
 8014c08:	6818      	ldr	r0, [r3, #0]
 8014c0a:	f000 b817 	b.w	8014c3c <_free_r>
 8014c0e:	bf00      	nop
 8014c10:	20000208 	.word	0x20000208

08014c14 <memcpy>:
 8014c14:	b510      	push	{r4, lr}
 8014c16:	1e43      	subs	r3, r0, #1
 8014c18:	440a      	add	r2, r1
 8014c1a:	4291      	cmp	r1, r2
 8014c1c:	d100      	bne.n	8014c20 <memcpy+0xc>
 8014c1e:	bd10      	pop	{r4, pc}
 8014c20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014c24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014c28:	e7f7      	b.n	8014c1a <memcpy+0x6>

08014c2a <memset>:
 8014c2a:	4402      	add	r2, r0
 8014c2c:	4603      	mov	r3, r0
 8014c2e:	4293      	cmp	r3, r2
 8014c30:	d100      	bne.n	8014c34 <memset+0xa>
 8014c32:	4770      	bx	lr
 8014c34:	f803 1b01 	strb.w	r1, [r3], #1
 8014c38:	e7f9      	b.n	8014c2e <memset+0x4>
	...

08014c3c <_free_r>:
 8014c3c:	b538      	push	{r3, r4, r5, lr}
 8014c3e:	4605      	mov	r5, r0
 8014c40:	2900      	cmp	r1, #0
 8014c42:	d045      	beq.n	8014cd0 <_free_r+0x94>
 8014c44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014c48:	1f0c      	subs	r4, r1, #4
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	bfb8      	it	lt
 8014c4e:	18e4      	addlt	r4, r4, r3
 8014c50:	f000 fa75 	bl	801513e <__malloc_lock>
 8014c54:	4a1f      	ldr	r2, [pc, #124]	; (8014cd4 <_free_r+0x98>)
 8014c56:	6813      	ldr	r3, [r2, #0]
 8014c58:	4610      	mov	r0, r2
 8014c5a:	b933      	cbnz	r3, 8014c6a <_free_r+0x2e>
 8014c5c:	6063      	str	r3, [r4, #4]
 8014c5e:	6014      	str	r4, [r2, #0]
 8014c60:	4628      	mov	r0, r5
 8014c62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014c66:	f000 ba6b 	b.w	8015140 <__malloc_unlock>
 8014c6a:	42a3      	cmp	r3, r4
 8014c6c:	d90c      	bls.n	8014c88 <_free_r+0x4c>
 8014c6e:	6821      	ldr	r1, [r4, #0]
 8014c70:	1862      	adds	r2, r4, r1
 8014c72:	4293      	cmp	r3, r2
 8014c74:	bf04      	itt	eq
 8014c76:	681a      	ldreq	r2, [r3, #0]
 8014c78:	685b      	ldreq	r3, [r3, #4]
 8014c7a:	6063      	str	r3, [r4, #4]
 8014c7c:	bf04      	itt	eq
 8014c7e:	1852      	addeq	r2, r2, r1
 8014c80:	6022      	streq	r2, [r4, #0]
 8014c82:	6004      	str	r4, [r0, #0]
 8014c84:	e7ec      	b.n	8014c60 <_free_r+0x24>
 8014c86:	4613      	mov	r3, r2
 8014c88:	685a      	ldr	r2, [r3, #4]
 8014c8a:	b10a      	cbz	r2, 8014c90 <_free_r+0x54>
 8014c8c:	42a2      	cmp	r2, r4
 8014c8e:	d9fa      	bls.n	8014c86 <_free_r+0x4a>
 8014c90:	6819      	ldr	r1, [r3, #0]
 8014c92:	1858      	adds	r0, r3, r1
 8014c94:	42a0      	cmp	r0, r4
 8014c96:	d10b      	bne.n	8014cb0 <_free_r+0x74>
 8014c98:	6820      	ldr	r0, [r4, #0]
 8014c9a:	4401      	add	r1, r0
 8014c9c:	1858      	adds	r0, r3, r1
 8014c9e:	4282      	cmp	r2, r0
 8014ca0:	6019      	str	r1, [r3, #0]
 8014ca2:	d1dd      	bne.n	8014c60 <_free_r+0x24>
 8014ca4:	6810      	ldr	r0, [r2, #0]
 8014ca6:	6852      	ldr	r2, [r2, #4]
 8014ca8:	605a      	str	r2, [r3, #4]
 8014caa:	4401      	add	r1, r0
 8014cac:	6019      	str	r1, [r3, #0]
 8014cae:	e7d7      	b.n	8014c60 <_free_r+0x24>
 8014cb0:	d902      	bls.n	8014cb8 <_free_r+0x7c>
 8014cb2:	230c      	movs	r3, #12
 8014cb4:	602b      	str	r3, [r5, #0]
 8014cb6:	e7d3      	b.n	8014c60 <_free_r+0x24>
 8014cb8:	6820      	ldr	r0, [r4, #0]
 8014cba:	1821      	adds	r1, r4, r0
 8014cbc:	428a      	cmp	r2, r1
 8014cbe:	bf04      	itt	eq
 8014cc0:	6811      	ldreq	r1, [r2, #0]
 8014cc2:	6852      	ldreq	r2, [r2, #4]
 8014cc4:	6062      	str	r2, [r4, #4]
 8014cc6:	bf04      	itt	eq
 8014cc8:	1809      	addeq	r1, r1, r0
 8014cca:	6021      	streq	r1, [r4, #0]
 8014ccc:	605c      	str	r4, [r3, #4]
 8014cce:	e7c7      	b.n	8014c60 <_free_r+0x24>
 8014cd0:	bd38      	pop	{r3, r4, r5, pc}
 8014cd2:	bf00      	nop
 8014cd4:	200003d0 	.word	0x200003d0

08014cd8 <_malloc_r>:
 8014cd8:	b570      	push	{r4, r5, r6, lr}
 8014cda:	1ccd      	adds	r5, r1, #3
 8014cdc:	f025 0503 	bic.w	r5, r5, #3
 8014ce0:	3508      	adds	r5, #8
 8014ce2:	2d0c      	cmp	r5, #12
 8014ce4:	bf38      	it	cc
 8014ce6:	250c      	movcc	r5, #12
 8014ce8:	2d00      	cmp	r5, #0
 8014cea:	4606      	mov	r6, r0
 8014cec:	db01      	blt.n	8014cf2 <_malloc_r+0x1a>
 8014cee:	42a9      	cmp	r1, r5
 8014cf0:	d903      	bls.n	8014cfa <_malloc_r+0x22>
 8014cf2:	230c      	movs	r3, #12
 8014cf4:	6033      	str	r3, [r6, #0]
 8014cf6:	2000      	movs	r0, #0
 8014cf8:	bd70      	pop	{r4, r5, r6, pc}
 8014cfa:	f000 fa20 	bl	801513e <__malloc_lock>
 8014cfe:	4a21      	ldr	r2, [pc, #132]	; (8014d84 <_malloc_r+0xac>)
 8014d00:	6814      	ldr	r4, [r2, #0]
 8014d02:	4621      	mov	r1, r4
 8014d04:	b991      	cbnz	r1, 8014d2c <_malloc_r+0x54>
 8014d06:	4c20      	ldr	r4, [pc, #128]	; (8014d88 <_malloc_r+0xb0>)
 8014d08:	6823      	ldr	r3, [r4, #0]
 8014d0a:	b91b      	cbnz	r3, 8014d14 <_malloc_r+0x3c>
 8014d0c:	4630      	mov	r0, r6
 8014d0e:	f000 f9c5 	bl	801509c <_sbrk_r>
 8014d12:	6020      	str	r0, [r4, #0]
 8014d14:	4629      	mov	r1, r5
 8014d16:	4630      	mov	r0, r6
 8014d18:	f000 f9c0 	bl	801509c <_sbrk_r>
 8014d1c:	1c43      	adds	r3, r0, #1
 8014d1e:	d124      	bne.n	8014d6a <_malloc_r+0x92>
 8014d20:	230c      	movs	r3, #12
 8014d22:	6033      	str	r3, [r6, #0]
 8014d24:	4630      	mov	r0, r6
 8014d26:	f000 fa0b 	bl	8015140 <__malloc_unlock>
 8014d2a:	e7e4      	b.n	8014cf6 <_malloc_r+0x1e>
 8014d2c:	680b      	ldr	r3, [r1, #0]
 8014d2e:	1b5b      	subs	r3, r3, r5
 8014d30:	d418      	bmi.n	8014d64 <_malloc_r+0x8c>
 8014d32:	2b0b      	cmp	r3, #11
 8014d34:	d90f      	bls.n	8014d56 <_malloc_r+0x7e>
 8014d36:	600b      	str	r3, [r1, #0]
 8014d38:	50cd      	str	r5, [r1, r3]
 8014d3a:	18cc      	adds	r4, r1, r3
 8014d3c:	4630      	mov	r0, r6
 8014d3e:	f000 f9ff 	bl	8015140 <__malloc_unlock>
 8014d42:	f104 000b 	add.w	r0, r4, #11
 8014d46:	1d23      	adds	r3, r4, #4
 8014d48:	f020 0007 	bic.w	r0, r0, #7
 8014d4c:	1ac3      	subs	r3, r0, r3
 8014d4e:	d0d3      	beq.n	8014cf8 <_malloc_r+0x20>
 8014d50:	425a      	negs	r2, r3
 8014d52:	50e2      	str	r2, [r4, r3]
 8014d54:	e7d0      	b.n	8014cf8 <_malloc_r+0x20>
 8014d56:	428c      	cmp	r4, r1
 8014d58:	684b      	ldr	r3, [r1, #4]
 8014d5a:	bf16      	itet	ne
 8014d5c:	6063      	strne	r3, [r4, #4]
 8014d5e:	6013      	streq	r3, [r2, #0]
 8014d60:	460c      	movne	r4, r1
 8014d62:	e7eb      	b.n	8014d3c <_malloc_r+0x64>
 8014d64:	460c      	mov	r4, r1
 8014d66:	6849      	ldr	r1, [r1, #4]
 8014d68:	e7cc      	b.n	8014d04 <_malloc_r+0x2c>
 8014d6a:	1cc4      	adds	r4, r0, #3
 8014d6c:	f024 0403 	bic.w	r4, r4, #3
 8014d70:	42a0      	cmp	r0, r4
 8014d72:	d005      	beq.n	8014d80 <_malloc_r+0xa8>
 8014d74:	1a21      	subs	r1, r4, r0
 8014d76:	4630      	mov	r0, r6
 8014d78:	f000 f990 	bl	801509c <_sbrk_r>
 8014d7c:	3001      	adds	r0, #1
 8014d7e:	d0cf      	beq.n	8014d20 <_malloc_r+0x48>
 8014d80:	6025      	str	r5, [r4, #0]
 8014d82:	e7db      	b.n	8014d3c <_malloc_r+0x64>
 8014d84:	200003d0 	.word	0x200003d0
 8014d88:	200003d4 	.word	0x200003d4

08014d8c <_printf_common>:
 8014d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d90:	4691      	mov	r9, r2
 8014d92:	461f      	mov	r7, r3
 8014d94:	688a      	ldr	r2, [r1, #8]
 8014d96:	690b      	ldr	r3, [r1, #16]
 8014d98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014d9c:	4293      	cmp	r3, r2
 8014d9e:	bfb8      	it	lt
 8014da0:	4613      	movlt	r3, r2
 8014da2:	f8c9 3000 	str.w	r3, [r9]
 8014da6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014daa:	4606      	mov	r6, r0
 8014dac:	460c      	mov	r4, r1
 8014dae:	b112      	cbz	r2, 8014db6 <_printf_common+0x2a>
 8014db0:	3301      	adds	r3, #1
 8014db2:	f8c9 3000 	str.w	r3, [r9]
 8014db6:	6823      	ldr	r3, [r4, #0]
 8014db8:	0699      	lsls	r1, r3, #26
 8014dba:	bf42      	ittt	mi
 8014dbc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014dc0:	3302      	addmi	r3, #2
 8014dc2:	f8c9 3000 	strmi.w	r3, [r9]
 8014dc6:	6825      	ldr	r5, [r4, #0]
 8014dc8:	f015 0506 	ands.w	r5, r5, #6
 8014dcc:	d107      	bne.n	8014dde <_printf_common+0x52>
 8014dce:	f104 0a19 	add.w	sl, r4, #25
 8014dd2:	68e3      	ldr	r3, [r4, #12]
 8014dd4:	f8d9 2000 	ldr.w	r2, [r9]
 8014dd8:	1a9b      	subs	r3, r3, r2
 8014dda:	42ab      	cmp	r3, r5
 8014ddc:	dc28      	bgt.n	8014e30 <_printf_common+0xa4>
 8014dde:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014de2:	6822      	ldr	r2, [r4, #0]
 8014de4:	3300      	adds	r3, #0
 8014de6:	bf18      	it	ne
 8014de8:	2301      	movne	r3, #1
 8014dea:	0692      	lsls	r2, r2, #26
 8014dec:	d42d      	bmi.n	8014e4a <_printf_common+0xbe>
 8014dee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014df2:	4639      	mov	r1, r7
 8014df4:	4630      	mov	r0, r6
 8014df6:	47c0      	blx	r8
 8014df8:	3001      	adds	r0, #1
 8014dfa:	d020      	beq.n	8014e3e <_printf_common+0xb2>
 8014dfc:	6823      	ldr	r3, [r4, #0]
 8014dfe:	68e5      	ldr	r5, [r4, #12]
 8014e00:	f8d9 2000 	ldr.w	r2, [r9]
 8014e04:	f003 0306 	and.w	r3, r3, #6
 8014e08:	2b04      	cmp	r3, #4
 8014e0a:	bf08      	it	eq
 8014e0c:	1aad      	subeq	r5, r5, r2
 8014e0e:	68a3      	ldr	r3, [r4, #8]
 8014e10:	6922      	ldr	r2, [r4, #16]
 8014e12:	bf0c      	ite	eq
 8014e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014e18:	2500      	movne	r5, #0
 8014e1a:	4293      	cmp	r3, r2
 8014e1c:	bfc4      	itt	gt
 8014e1e:	1a9b      	subgt	r3, r3, r2
 8014e20:	18ed      	addgt	r5, r5, r3
 8014e22:	f04f 0900 	mov.w	r9, #0
 8014e26:	341a      	adds	r4, #26
 8014e28:	454d      	cmp	r5, r9
 8014e2a:	d11a      	bne.n	8014e62 <_printf_common+0xd6>
 8014e2c:	2000      	movs	r0, #0
 8014e2e:	e008      	b.n	8014e42 <_printf_common+0xb6>
 8014e30:	2301      	movs	r3, #1
 8014e32:	4652      	mov	r2, sl
 8014e34:	4639      	mov	r1, r7
 8014e36:	4630      	mov	r0, r6
 8014e38:	47c0      	blx	r8
 8014e3a:	3001      	adds	r0, #1
 8014e3c:	d103      	bne.n	8014e46 <_printf_common+0xba>
 8014e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8014e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e46:	3501      	adds	r5, #1
 8014e48:	e7c3      	b.n	8014dd2 <_printf_common+0x46>
 8014e4a:	18e1      	adds	r1, r4, r3
 8014e4c:	1c5a      	adds	r2, r3, #1
 8014e4e:	2030      	movs	r0, #48	; 0x30
 8014e50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014e54:	4422      	add	r2, r4
 8014e56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014e5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014e5e:	3302      	adds	r3, #2
 8014e60:	e7c5      	b.n	8014dee <_printf_common+0x62>
 8014e62:	2301      	movs	r3, #1
 8014e64:	4622      	mov	r2, r4
 8014e66:	4639      	mov	r1, r7
 8014e68:	4630      	mov	r0, r6
 8014e6a:	47c0      	blx	r8
 8014e6c:	3001      	adds	r0, #1
 8014e6e:	d0e6      	beq.n	8014e3e <_printf_common+0xb2>
 8014e70:	f109 0901 	add.w	r9, r9, #1
 8014e74:	e7d8      	b.n	8014e28 <_printf_common+0x9c>
	...

08014e78 <_printf_i>:
 8014e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014e7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014e80:	460c      	mov	r4, r1
 8014e82:	7e09      	ldrb	r1, [r1, #24]
 8014e84:	b085      	sub	sp, #20
 8014e86:	296e      	cmp	r1, #110	; 0x6e
 8014e88:	4617      	mov	r7, r2
 8014e8a:	4606      	mov	r6, r0
 8014e8c:	4698      	mov	r8, r3
 8014e8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014e90:	f000 80b3 	beq.w	8014ffa <_printf_i+0x182>
 8014e94:	d822      	bhi.n	8014edc <_printf_i+0x64>
 8014e96:	2963      	cmp	r1, #99	; 0x63
 8014e98:	d036      	beq.n	8014f08 <_printf_i+0x90>
 8014e9a:	d80a      	bhi.n	8014eb2 <_printf_i+0x3a>
 8014e9c:	2900      	cmp	r1, #0
 8014e9e:	f000 80b9 	beq.w	8015014 <_printf_i+0x19c>
 8014ea2:	2958      	cmp	r1, #88	; 0x58
 8014ea4:	f000 8083 	beq.w	8014fae <_printf_i+0x136>
 8014ea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014eac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8014eb0:	e032      	b.n	8014f18 <_printf_i+0xa0>
 8014eb2:	2964      	cmp	r1, #100	; 0x64
 8014eb4:	d001      	beq.n	8014eba <_printf_i+0x42>
 8014eb6:	2969      	cmp	r1, #105	; 0x69
 8014eb8:	d1f6      	bne.n	8014ea8 <_printf_i+0x30>
 8014eba:	6820      	ldr	r0, [r4, #0]
 8014ebc:	6813      	ldr	r3, [r2, #0]
 8014ebe:	0605      	lsls	r5, r0, #24
 8014ec0:	f103 0104 	add.w	r1, r3, #4
 8014ec4:	d52a      	bpl.n	8014f1c <_printf_i+0xa4>
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	6011      	str	r1, [r2, #0]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	da03      	bge.n	8014ed6 <_printf_i+0x5e>
 8014ece:	222d      	movs	r2, #45	; 0x2d
 8014ed0:	425b      	negs	r3, r3
 8014ed2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014ed6:	486f      	ldr	r0, [pc, #444]	; (8015094 <_printf_i+0x21c>)
 8014ed8:	220a      	movs	r2, #10
 8014eda:	e039      	b.n	8014f50 <_printf_i+0xd8>
 8014edc:	2973      	cmp	r1, #115	; 0x73
 8014ede:	f000 809d 	beq.w	801501c <_printf_i+0x1a4>
 8014ee2:	d808      	bhi.n	8014ef6 <_printf_i+0x7e>
 8014ee4:	296f      	cmp	r1, #111	; 0x6f
 8014ee6:	d020      	beq.n	8014f2a <_printf_i+0xb2>
 8014ee8:	2970      	cmp	r1, #112	; 0x70
 8014eea:	d1dd      	bne.n	8014ea8 <_printf_i+0x30>
 8014eec:	6823      	ldr	r3, [r4, #0]
 8014eee:	f043 0320 	orr.w	r3, r3, #32
 8014ef2:	6023      	str	r3, [r4, #0]
 8014ef4:	e003      	b.n	8014efe <_printf_i+0x86>
 8014ef6:	2975      	cmp	r1, #117	; 0x75
 8014ef8:	d017      	beq.n	8014f2a <_printf_i+0xb2>
 8014efa:	2978      	cmp	r1, #120	; 0x78
 8014efc:	d1d4      	bne.n	8014ea8 <_printf_i+0x30>
 8014efe:	2378      	movs	r3, #120	; 0x78
 8014f00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014f04:	4864      	ldr	r0, [pc, #400]	; (8015098 <_printf_i+0x220>)
 8014f06:	e055      	b.n	8014fb4 <_printf_i+0x13c>
 8014f08:	6813      	ldr	r3, [r2, #0]
 8014f0a:	1d19      	adds	r1, r3, #4
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	6011      	str	r1, [r2, #0]
 8014f10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014f14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014f18:	2301      	movs	r3, #1
 8014f1a:	e08c      	b.n	8015036 <_printf_i+0x1be>
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	6011      	str	r1, [r2, #0]
 8014f20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014f24:	bf18      	it	ne
 8014f26:	b21b      	sxthne	r3, r3
 8014f28:	e7cf      	b.n	8014eca <_printf_i+0x52>
 8014f2a:	6813      	ldr	r3, [r2, #0]
 8014f2c:	6825      	ldr	r5, [r4, #0]
 8014f2e:	1d18      	adds	r0, r3, #4
 8014f30:	6010      	str	r0, [r2, #0]
 8014f32:	0628      	lsls	r0, r5, #24
 8014f34:	d501      	bpl.n	8014f3a <_printf_i+0xc2>
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	e002      	b.n	8014f40 <_printf_i+0xc8>
 8014f3a:	0668      	lsls	r0, r5, #25
 8014f3c:	d5fb      	bpl.n	8014f36 <_printf_i+0xbe>
 8014f3e:	881b      	ldrh	r3, [r3, #0]
 8014f40:	4854      	ldr	r0, [pc, #336]	; (8015094 <_printf_i+0x21c>)
 8014f42:	296f      	cmp	r1, #111	; 0x6f
 8014f44:	bf14      	ite	ne
 8014f46:	220a      	movne	r2, #10
 8014f48:	2208      	moveq	r2, #8
 8014f4a:	2100      	movs	r1, #0
 8014f4c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014f50:	6865      	ldr	r5, [r4, #4]
 8014f52:	60a5      	str	r5, [r4, #8]
 8014f54:	2d00      	cmp	r5, #0
 8014f56:	f2c0 8095 	blt.w	8015084 <_printf_i+0x20c>
 8014f5a:	6821      	ldr	r1, [r4, #0]
 8014f5c:	f021 0104 	bic.w	r1, r1, #4
 8014f60:	6021      	str	r1, [r4, #0]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d13d      	bne.n	8014fe2 <_printf_i+0x16a>
 8014f66:	2d00      	cmp	r5, #0
 8014f68:	f040 808e 	bne.w	8015088 <_printf_i+0x210>
 8014f6c:	4665      	mov	r5, ip
 8014f6e:	2a08      	cmp	r2, #8
 8014f70:	d10b      	bne.n	8014f8a <_printf_i+0x112>
 8014f72:	6823      	ldr	r3, [r4, #0]
 8014f74:	07db      	lsls	r3, r3, #31
 8014f76:	d508      	bpl.n	8014f8a <_printf_i+0x112>
 8014f78:	6923      	ldr	r3, [r4, #16]
 8014f7a:	6862      	ldr	r2, [r4, #4]
 8014f7c:	429a      	cmp	r2, r3
 8014f7e:	bfde      	ittt	le
 8014f80:	2330      	movle	r3, #48	; 0x30
 8014f82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014f86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014f8a:	ebac 0305 	sub.w	r3, ip, r5
 8014f8e:	6123      	str	r3, [r4, #16]
 8014f90:	f8cd 8000 	str.w	r8, [sp]
 8014f94:	463b      	mov	r3, r7
 8014f96:	aa03      	add	r2, sp, #12
 8014f98:	4621      	mov	r1, r4
 8014f9a:	4630      	mov	r0, r6
 8014f9c:	f7ff fef6 	bl	8014d8c <_printf_common>
 8014fa0:	3001      	adds	r0, #1
 8014fa2:	d14d      	bne.n	8015040 <_printf_i+0x1c8>
 8014fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8014fa8:	b005      	add	sp, #20
 8014faa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014fae:	4839      	ldr	r0, [pc, #228]	; (8015094 <_printf_i+0x21c>)
 8014fb0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8014fb4:	6813      	ldr	r3, [r2, #0]
 8014fb6:	6821      	ldr	r1, [r4, #0]
 8014fb8:	1d1d      	adds	r5, r3, #4
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	6015      	str	r5, [r2, #0]
 8014fbe:	060a      	lsls	r2, r1, #24
 8014fc0:	d50b      	bpl.n	8014fda <_printf_i+0x162>
 8014fc2:	07ca      	lsls	r2, r1, #31
 8014fc4:	bf44      	itt	mi
 8014fc6:	f041 0120 	orrmi.w	r1, r1, #32
 8014fca:	6021      	strmi	r1, [r4, #0]
 8014fcc:	b91b      	cbnz	r3, 8014fd6 <_printf_i+0x15e>
 8014fce:	6822      	ldr	r2, [r4, #0]
 8014fd0:	f022 0220 	bic.w	r2, r2, #32
 8014fd4:	6022      	str	r2, [r4, #0]
 8014fd6:	2210      	movs	r2, #16
 8014fd8:	e7b7      	b.n	8014f4a <_printf_i+0xd2>
 8014fda:	064d      	lsls	r5, r1, #25
 8014fdc:	bf48      	it	mi
 8014fde:	b29b      	uxthmi	r3, r3
 8014fe0:	e7ef      	b.n	8014fc2 <_printf_i+0x14a>
 8014fe2:	4665      	mov	r5, ip
 8014fe4:	fbb3 f1f2 	udiv	r1, r3, r2
 8014fe8:	fb02 3311 	mls	r3, r2, r1, r3
 8014fec:	5cc3      	ldrb	r3, [r0, r3]
 8014fee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014ff2:	460b      	mov	r3, r1
 8014ff4:	2900      	cmp	r1, #0
 8014ff6:	d1f5      	bne.n	8014fe4 <_printf_i+0x16c>
 8014ff8:	e7b9      	b.n	8014f6e <_printf_i+0xf6>
 8014ffa:	6813      	ldr	r3, [r2, #0]
 8014ffc:	6825      	ldr	r5, [r4, #0]
 8014ffe:	6961      	ldr	r1, [r4, #20]
 8015000:	1d18      	adds	r0, r3, #4
 8015002:	6010      	str	r0, [r2, #0]
 8015004:	0628      	lsls	r0, r5, #24
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	d501      	bpl.n	801500e <_printf_i+0x196>
 801500a:	6019      	str	r1, [r3, #0]
 801500c:	e002      	b.n	8015014 <_printf_i+0x19c>
 801500e:	066a      	lsls	r2, r5, #25
 8015010:	d5fb      	bpl.n	801500a <_printf_i+0x192>
 8015012:	8019      	strh	r1, [r3, #0]
 8015014:	2300      	movs	r3, #0
 8015016:	6123      	str	r3, [r4, #16]
 8015018:	4665      	mov	r5, ip
 801501a:	e7b9      	b.n	8014f90 <_printf_i+0x118>
 801501c:	6813      	ldr	r3, [r2, #0]
 801501e:	1d19      	adds	r1, r3, #4
 8015020:	6011      	str	r1, [r2, #0]
 8015022:	681d      	ldr	r5, [r3, #0]
 8015024:	6862      	ldr	r2, [r4, #4]
 8015026:	2100      	movs	r1, #0
 8015028:	4628      	mov	r0, r5
 801502a:	f7eb f8d9 	bl	80001e0 <memchr>
 801502e:	b108      	cbz	r0, 8015034 <_printf_i+0x1bc>
 8015030:	1b40      	subs	r0, r0, r5
 8015032:	6060      	str	r0, [r4, #4]
 8015034:	6863      	ldr	r3, [r4, #4]
 8015036:	6123      	str	r3, [r4, #16]
 8015038:	2300      	movs	r3, #0
 801503a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801503e:	e7a7      	b.n	8014f90 <_printf_i+0x118>
 8015040:	6923      	ldr	r3, [r4, #16]
 8015042:	462a      	mov	r2, r5
 8015044:	4639      	mov	r1, r7
 8015046:	4630      	mov	r0, r6
 8015048:	47c0      	blx	r8
 801504a:	3001      	adds	r0, #1
 801504c:	d0aa      	beq.n	8014fa4 <_printf_i+0x12c>
 801504e:	6823      	ldr	r3, [r4, #0]
 8015050:	079b      	lsls	r3, r3, #30
 8015052:	d413      	bmi.n	801507c <_printf_i+0x204>
 8015054:	68e0      	ldr	r0, [r4, #12]
 8015056:	9b03      	ldr	r3, [sp, #12]
 8015058:	4298      	cmp	r0, r3
 801505a:	bfb8      	it	lt
 801505c:	4618      	movlt	r0, r3
 801505e:	e7a3      	b.n	8014fa8 <_printf_i+0x130>
 8015060:	2301      	movs	r3, #1
 8015062:	464a      	mov	r2, r9
 8015064:	4639      	mov	r1, r7
 8015066:	4630      	mov	r0, r6
 8015068:	47c0      	blx	r8
 801506a:	3001      	adds	r0, #1
 801506c:	d09a      	beq.n	8014fa4 <_printf_i+0x12c>
 801506e:	3501      	adds	r5, #1
 8015070:	68e3      	ldr	r3, [r4, #12]
 8015072:	9a03      	ldr	r2, [sp, #12]
 8015074:	1a9b      	subs	r3, r3, r2
 8015076:	42ab      	cmp	r3, r5
 8015078:	dcf2      	bgt.n	8015060 <_printf_i+0x1e8>
 801507a:	e7eb      	b.n	8015054 <_printf_i+0x1dc>
 801507c:	2500      	movs	r5, #0
 801507e:	f104 0919 	add.w	r9, r4, #25
 8015082:	e7f5      	b.n	8015070 <_printf_i+0x1f8>
 8015084:	2b00      	cmp	r3, #0
 8015086:	d1ac      	bne.n	8014fe2 <_printf_i+0x16a>
 8015088:	7803      	ldrb	r3, [r0, #0]
 801508a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801508e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015092:	e76c      	b.n	8014f6e <_printf_i+0xf6>
 8015094:	08015950 	.word	0x08015950
 8015098:	08015961 	.word	0x08015961

0801509c <_sbrk_r>:
 801509c:	b538      	push	{r3, r4, r5, lr}
 801509e:	4c06      	ldr	r4, [pc, #24]	; (80150b8 <_sbrk_r+0x1c>)
 80150a0:	2300      	movs	r3, #0
 80150a2:	4605      	mov	r5, r0
 80150a4:	4608      	mov	r0, r1
 80150a6:	6023      	str	r3, [r4, #0]
 80150a8:	f7f0 fdfc 	bl	8005ca4 <_sbrk>
 80150ac:	1c43      	adds	r3, r0, #1
 80150ae:	d102      	bne.n	80150b6 <_sbrk_r+0x1a>
 80150b0:	6823      	ldr	r3, [r4, #0]
 80150b2:	b103      	cbz	r3, 80150b6 <_sbrk_r+0x1a>
 80150b4:	602b      	str	r3, [r5, #0]
 80150b6:	bd38      	pop	{r3, r4, r5, pc}
 80150b8:	20005708 	.word	0x20005708

080150bc <siprintf>:
 80150bc:	b40e      	push	{r1, r2, r3}
 80150be:	b500      	push	{lr}
 80150c0:	b09c      	sub	sp, #112	; 0x70
 80150c2:	ab1d      	add	r3, sp, #116	; 0x74
 80150c4:	9002      	str	r0, [sp, #8]
 80150c6:	9006      	str	r0, [sp, #24]
 80150c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80150cc:	4809      	ldr	r0, [pc, #36]	; (80150f4 <siprintf+0x38>)
 80150ce:	9107      	str	r1, [sp, #28]
 80150d0:	9104      	str	r1, [sp, #16]
 80150d2:	4909      	ldr	r1, [pc, #36]	; (80150f8 <siprintf+0x3c>)
 80150d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80150d8:	9105      	str	r1, [sp, #20]
 80150da:	6800      	ldr	r0, [r0, #0]
 80150dc:	9301      	str	r3, [sp, #4]
 80150de:	a902      	add	r1, sp, #8
 80150e0:	f000 f8b0 	bl	8015244 <_svfiprintf_r>
 80150e4:	9b02      	ldr	r3, [sp, #8]
 80150e6:	2200      	movs	r2, #0
 80150e8:	701a      	strb	r2, [r3, #0]
 80150ea:	b01c      	add	sp, #112	; 0x70
 80150ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80150f0:	b003      	add	sp, #12
 80150f2:	4770      	bx	lr
 80150f4:	20000208 	.word	0x20000208
 80150f8:	ffff0208 	.word	0xffff0208

080150fc <strcpy>:
 80150fc:	4603      	mov	r3, r0
 80150fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015102:	f803 2b01 	strb.w	r2, [r3], #1
 8015106:	2a00      	cmp	r2, #0
 8015108:	d1f9      	bne.n	80150fe <strcpy+0x2>
 801510a:	4770      	bx	lr

0801510c <memmove>:
 801510c:	4288      	cmp	r0, r1
 801510e:	b510      	push	{r4, lr}
 8015110:	eb01 0302 	add.w	r3, r1, r2
 8015114:	d807      	bhi.n	8015126 <memmove+0x1a>
 8015116:	1e42      	subs	r2, r0, #1
 8015118:	4299      	cmp	r1, r3
 801511a:	d00a      	beq.n	8015132 <memmove+0x26>
 801511c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015120:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015124:	e7f8      	b.n	8015118 <memmove+0xc>
 8015126:	4283      	cmp	r3, r0
 8015128:	d9f5      	bls.n	8015116 <memmove+0xa>
 801512a:	1881      	adds	r1, r0, r2
 801512c:	1ad2      	subs	r2, r2, r3
 801512e:	42d3      	cmn	r3, r2
 8015130:	d100      	bne.n	8015134 <memmove+0x28>
 8015132:	bd10      	pop	{r4, pc}
 8015134:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015138:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801513c:	e7f7      	b.n	801512e <memmove+0x22>

0801513e <__malloc_lock>:
 801513e:	4770      	bx	lr

08015140 <__malloc_unlock>:
 8015140:	4770      	bx	lr

08015142 <_realloc_r>:
 8015142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015144:	4607      	mov	r7, r0
 8015146:	4614      	mov	r4, r2
 8015148:	460e      	mov	r6, r1
 801514a:	b921      	cbnz	r1, 8015156 <_realloc_r+0x14>
 801514c:	4611      	mov	r1, r2
 801514e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015152:	f7ff bdc1 	b.w	8014cd8 <_malloc_r>
 8015156:	b922      	cbnz	r2, 8015162 <_realloc_r+0x20>
 8015158:	f7ff fd70 	bl	8014c3c <_free_r>
 801515c:	4625      	mov	r5, r4
 801515e:	4628      	mov	r0, r5
 8015160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015162:	f000 f967 	bl	8015434 <_malloc_usable_size_r>
 8015166:	42a0      	cmp	r0, r4
 8015168:	d20f      	bcs.n	801518a <_realloc_r+0x48>
 801516a:	4621      	mov	r1, r4
 801516c:	4638      	mov	r0, r7
 801516e:	f7ff fdb3 	bl	8014cd8 <_malloc_r>
 8015172:	4605      	mov	r5, r0
 8015174:	2800      	cmp	r0, #0
 8015176:	d0f2      	beq.n	801515e <_realloc_r+0x1c>
 8015178:	4631      	mov	r1, r6
 801517a:	4622      	mov	r2, r4
 801517c:	f7ff fd4a 	bl	8014c14 <memcpy>
 8015180:	4631      	mov	r1, r6
 8015182:	4638      	mov	r0, r7
 8015184:	f7ff fd5a 	bl	8014c3c <_free_r>
 8015188:	e7e9      	b.n	801515e <_realloc_r+0x1c>
 801518a:	4635      	mov	r5, r6
 801518c:	e7e7      	b.n	801515e <_realloc_r+0x1c>

0801518e <__ssputs_r>:
 801518e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015192:	688e      	ldr	r6, [r1, #8]
 8015194:	429e      	cmp	r6, r3
 8015196:	4682      	mov	sl, r0
 8015198:	460c      	mov	r4, r1
 801519a:	4690      	mov	r8, r2
 801519c:	4699      	mov	r9, r3
 801519e:	d837      	bhi.n	8015210 <__ssputs_r+0x82>
 80151a0:	898a      	ldrh	r2, [r1, #12]
 80151a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80151a6:	d031      	beq.n	801520c <__ssputs_r+0x7e>
 80151a8:	6825      	ldr	r5, [r4, #0]
 80151aa:	6909      	ldr	r1, [r1, #16]
 80151ac:	1a6f      	subs	r7, r5, r1
 80151ae:	6965      	ldr	r5, [r4, #20]
 80151b0:	2302      	movs	r3, #2
 80151b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80151b6:	fb95 f5f3 	sdiv	r5, r5, r3
 80151ba:	f109 0301 	add.w	r3, r9, #1
 80151be:	443b      	add	r3, r7
 80151c0:	429d      	cmp	r5, r3
 80151c2:	bf38      	it	cc
 80151c4:	461d      	movcc	r5, r3
 80151c6:	0553      	lsls	r3, r2, #21
 80151c8:	d530      	bpl.n	801522c <__ssputs_r+0x9e>
 80151ca:	4629      	mov	r1, r5
 80151cc:	f7ff fd84 	bl	8014cd8 <_malloc_r>
 80151d0:	4606      	mov	r6, r0
 80151d2:	b950      	cbnz	r0, 80151ea <__ssputs_r+0x5c>
 80151d4:	230c      	movs	r3, #12
 80151d6:	f8ca 3000 	str.w	r3, [sl]
 80151da:	89a3      	ldrh	r3, [r4, #12]
 80151dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80151e0:	81a3      	strh	r3, [r4, #12]
 80151e2:	f04f 30ff 	mov.w	r0, #4294967295
 80151e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151ea:	463a      	mov	r2, r7
 80151ec:	6921      	ldr	r1, [r4, #16]
 80151ee:	f7ff fd11 	bl	8014c14 <memcpy>
 80151f2:	89a3      	ldrh	r3, [r4, #12]
 80151f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80151f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80151fc:	81a3      	strh	r3, [r4, #12]
 80151fe:	6126      	str	r6, [r4, #16]
 8015200:	6165      	str	r5, [r4, #20]
 8015202:	443e      	add	r6, r7
 8015204:	1bed      	subs	r5, r5, r7
 8015206:	6026      	str	r6, [r4, #0]
 8015208:	60a5      	str	r5, [r4, #8]
 801520a:	464e      	mov	r6, r9
 801520c:	454e      	cmp	r6, r9
 801520e:	d900      	bls.n	8015212 <__ssputs_r+0x84>
 8015210:	464e      	mov	r6, r9
 8015212:	4632      	mov	r2, r6
 8015214:	4641      	mov	r1, r8
 8015216:	6820      	ldr	r0, [r4, #0]
 8015218:	f7ff ff78 	bl	801510c <memmove>
 801521c:	68a3      	ldr	r3, [r4, #8]
 801521e:	1b9b      	subs	r3, r3, r6
 8015220:	60a3      	str	r3, [r4, #8]
 8015222:	6823      	ldr	r3, [r4, #0]
 8015224:	441e      	add	r6, r3
 8015226:	6026      	str	r6, [r4, #0]
 8015228:	2000      	movs	r0, #0
 801522a:	e7dc      	b.n	80151e6 <__ssputs_r+0x58>
 801522c:	462a      	mov	r2, r5
 801522e:	f7ff ff88 	bl	8015142 <_realloc_r>
 8015232:	4606      	mov	r6, r0
 8015234:	2800      	cmp	r0, #0
 8015236:	d1e2      	bne.n	80151fe <__ssputs_r+0x70>
 8015238:	6921      	ldr	r1, [r4, #16]
 801523a:	4650      	mov	r0, sl
 801523c:	f7ff fcfe 	bl	8014c3c <_free_r>
 8015240:	e7c8      	b.n	80151d4 <__ssputs_r+0x46>
	...

08015244 <_svfiprintf_r>:
 8015244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015248:	461d      	mov	r5, r3
 801524a:	898b      	ldrh	r3, [r1, #12]
 801524c:	061f      	lsls	r7, r3, #24
 801524e:	b09d      	sub	sp, #116	; 0x74
 8015250:	4680      	mov	r8, r0
 8015252:	460c      	mov	r4, r1
 8015254:	4616      	mov	r6, r2
 8015256:	d50f      	bpl.n	8015278 <_svfiprintf_r+0x34>
 8015258:	690b      	ldr	r3, [r1, #16]
 801525a:	b96b      	cbnz	r3, 8015278 <_svfiprintf_r+0x34>
 801525c:	2140      	movs	r1, #64	; 0x40
 801525e:	f7ff fd3b 	bl	8014cd8 <_malloc_r>
 8015262:	6020      	str	r0, [r4, #0]
 8015264:	6120      	str	r0, [r4, #16]
 8015266:	b928      	cbnz	r0, 8015274 <_svfiprintf_r+0x30>
 8015268:	230c      	movs	r3, #12
 801526a:	f8c8 3000 	str.w	r3, [r8]
 801526e:	f04f 30ff 	mov.w	r0, #4294967295
 8015272:	e0c8      	b.n	8015406 <_svfiprintf_r+0x1c2>
 8015274:	2340      	movs	r3, #64	; 0x40
 8015276:	6163      	str	r3, [r4, #20]
 8015278:	2300      	movs	r3, #0
 801527a:	9309      	str	r3, [sp, #36]	; 0x24
 801527c:	2320      	movs	r3, #32
 801527e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015282:	2330      	movs	r3, #48	; 0x30
 8015284:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015288:	9503      	str	r5, [sp, #12]
 801528a:	f04f 0b01 	mov.w	fp, #1
 801528e:	4637      	mov	r7, r6
 8015290:	463d      	mov	r5, r7
 8015292:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015296:	b10b      	cbz	r3, 801529c <_svfiprintf_r+0x58>
 8015298:	2b25      	cmp	r3, #37	; 0x25
 801529a:	d13e      	bne.n	801531a <_svfiprintf_r+0xd6>
 801529c:	ebb7 0a06 	subs.w	sl, r7, r6
 80152a0:	d00b      	beq.n	80152ba <_svfiprintf_r+0x76>
 80152a2:	4653      	mov	r3, sl
 80152a4:	4632      	mov	r2, r6
 80152a6:	4621      	mov	r1, r4
 80152a8:	4640      	mov	r0, r8
 80152aa:	f7ff ff70 	bl	801518e <__ssputs_r>
 80152ae:	3001      	adds	r0, #1
 80152b0:	f000 80a4 	beq.w	80153fc <_svfiprintf_r+0x1b8>
 80152b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152b6:	4453      	add	r3, sl
 80152b8:	9309      	str	r3, [sp, #36]	; 0x24
 80152ba:	783b      	ldrb	r3, [r7, #0]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	f000 809d 	beq.w	80153fc <_svfiprintf_r+0x1b8>
 80152c2:	2300      	movs	r3, #0
 80152c4:	f04f 32ff 	mov.w	r2, #4294967295
 80152c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80152cc:	9304      	str	r3, [sp, #16]
 80152ce:	9307      	str	r3, [sp, #28]
 80152d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80152d4:	931a      	str	r3, [sp, #104]	; 0x68
 80152d6:	462f      	mov	r7, r5
 80152d8:	2205      	movs	r2, #5
 80152da:	f817 1b01 	ldrb.w	r1, [r7], #1
 80152de:	4850      	ldr	r0, [pc, #320]	; (8015420 <_svfiprintf_r+0x1dc>)
 80152e0:	f7ea ff7e 	bl	80001e0 <memchr>
 80152e4:	9b04      	ldr	r3, [sp, #16]
 80152e6:	b9d0      	cbnz	r0, 801531e <_svfiprintf_r+0xda>
 80152e8:	06d9      	lsls	r1, r3, #27
 80152ea:	bf44      	itt	mi
 80152ec:	2220      	movmi	r2, #32
 80152ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80152f2:	071a      	lsls	r2, r3, #28
 80152f4:	bf44      	itt	mi
 80152f6:	222b      	movmi	r2, #43	; 0x2b
 80152f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80152fc:	782a      	ldrb	r2, [r5, #0]
 80152fe:	2a2a      	cmp	r2, #42	; 0x2a
 8015300:	d015      	beq.n	801532e <_svfiprintf_r+0xea>
 8015302:	9a07      	ldr	r2, [sp, #28]
 8015304:	462f      	mov	r7, r5
 8015306:	2000      	movs	r0, #0
 8015308:	250a      	movs	r5, #10
 801530a:	4639      	mov	r1, r7
 801530c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015310:	3b30      	subs	r3, #48	; 0x30
 8015312:	2b09      	cmp	r3, #9
 8015314:	d94d      	bls.n	80153b2 <_svfiprintf_r+0x16e>
 8015316:	b1b8      	cbz	r0, 8015348 <_svfiprintf_r+0x104>
 8015318:	e00f      	b.n	801533a <_svfiprintf_r+0xf6>
 801531a:	462f      	mov	r7, r5
 801531c:	e7b8      	b.n	8015290 <_svfiprintf_r+0x4c>
 801531e:	4a40      	ldr	r2, [pc, #256]	; (8015420 <_svfiprintf_r+0x1dc>)
 8015320:	1a80      	subs	r0, r0, r2
 8015322:	fa0b f000 	lsl.w	r0, fp, r0
 8015326:	4318      	orrs	r0, r3
 8015328:	9004      	str	r0, [sp, #16]
 801532a:	463d      	mov	r5, r7
 801532c:	e7d3      	b.n	80152d6 <_svfiprintf_r+0x92>
 801532e:	9a03      	ldr	r2, [sp, #12]
 8015330:	1d11      	adds	r1, r2, #4
 8015332:	6812      	ldr	r2, [r2, #0]
 8015334:	9103      	str	r1, [sp, #12]
 8015336:	2a00      	cmp	r2, #0
 8015338:	db01      	blt.n	801533e <_svfiprintf_r+0xfa>
 801533a:	9207      	str	r2, [sp, #28]
 801533c:	e004      	b.n	8015348 <_svfiprintf_r+0x104>
 801533e:	4252      	negs	r2, r2
 8015340:	f043 0302 	orr.w	r3, r3, #2
 8015344:	9207      	str	r2, [sp, #28]
 8015346:	9304      	str	r3, [sp, #16]
 8015348:	783b      	ldrb	r3, [r7, #0]
 801534a:	2b2e      	cmp	r3, #46	; 0x2e
 801534c:	d10c      	bne.n	8015368 <_svfiprintf_r+0x124>
 801534e:	787b      	ldrb	r3, [r7, #1]
 8015350:	2b2a      	cmp	r3, #42	; 0x2a
 8015352:	d133      	bne.n	80153bc <_svfiprintf_r+0x178>
 8015354:	9b03      	ldr	r3, [sp, #12]
 8015356:	1d1a      	adds	r2, r3, #4
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	9203      	str	r2, [sp, #12]
 801535c:	2b00      	cmp	r3, #0
 801535e:	bfb8      	it	lt
 8015360:	f04f 33ff 	movlt.w	r3, #4294967295
 8015364:	3702      	adds	r7, #2
 8015366:	9305      	str	r3, [sp, #20]
 8015368:	4d2e      	ldr	r5, [pc, #184]	; (8015424 <_svfiprintf_r+0x1e0>)
 801536a:	7839      	ldrb	r1, [r7, #0]
 801536c:	2203      	movs	r2, #3
 801536e:	4628      	mov	r0, r5
 8015370:	f7ea ff36 	bl	80001e0 <memchr>
 8015374:	b138      	cbz	r0, 8015386 <_svfiprintf_r+0x142>
 8015376:	2340      	movs	r3, #64	; 0x40
 8015378:	1b40      	subs	r0, r0, r5
 801537a:	fa03 f000 	lsl.w	r0, r3, r0
 801537e:	9b04      	ldr	r3, [sp, #16]
 8015380:	4303      	orrs	r3, r0
 8015382:	3701      	adds	r7, #1
 8015384:	9304      	str	r3, [sp, #16]
 8015386:	7839      	ldrb	r1, [r7, #0]
 8015388:	4827      	ldr	r0, [pc, #156]	; (8015428 <_svfiprintf_r+0x1e4>)
 801538a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801538e:	2206      	movs	r2, #6
 8015390:	1c7e      	adds	r6, r7, #1
 8015392:	f7ea ff25 	bl	80001e0 <memchr>
 8015396:	2800      	cmp	r0, #0
 8015398:	d038      	beq.n	801540c <_svfiprintf_r+0x1c8>
 801539a:	4b24      	ldr	r3, [pc, #144]	; (801542c <_svfiprintf_r+0x1e8>)
 801539c:	bb13      	cbnz	r3, 80153e4 <_svfiprintf_r+0x1a0>
 801539e:	9b03      	ldr	r3, [sp, #12]
 80153a0:	3307      	adds	r3, #7
 80153a2:	f023 0307 	bic.w	r3, r3, #7
 80153a6:	3308      	adds	r3, #8
 80153a8:	9303      	str	r3, [sp, #12]
 80153aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153ac:	444b      	add	r3, r9
 80153ae:	9309      	str	r3, [sp, #36]	; 0x24
 80153b0:	e76d      	b.n	801528e <_svfiprintf_r+0x4a>
 80153b2:	fb05 3202 	mla	r2, r5, r2, r3
 80153b6:	2001      	movs	r0, #1
 80153b8:	460f      	mov	r7, r1
 80153ba:	e7a6      	b.n	801530a <_svfiprintf_r+0xc6>
 80153bc:	2300      	movs	r3, #0
 80153be:	3701      	adds	r7, #1
 80153c0:	9305      	str	r3, [sp, #20]
 80153c2:	4619      	mov	r1, r3
 80153c4:	250a      	movs	r5, #10
 80153c6:	4638      	mov	r0, r7
 80153c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80153cc:	3a30      	subs	r2, #48	; 0x30
 80153ce:	2a09      	cmp	r2, #9
 80153d0:	d903      	bls.n	80153da <_svfiprintf_r+0x196>
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d0c8      	beq.n	8015368 <_svfiprintf_r+0x124>
 80153d6:	9105      	str	r1, [sp, #20]
 80153d8:	e7c6      	b.n	8015368 <_svfiprintf_r+0x124>
 80153da:	fb05 2101 	mla	r1, r5, r1, r2
 80153de:	2301      	movs	r3, #1
 80153e0:	4607      	mov	r7, r0
 80153e2:	e7f0      	b.n	80153c6 <_svfiprintf_r+0x182>
 80153e4:	ab03      	add	r3, sp, #12
 80153e6:	9300      	str	r3, [sp, #0]
 80153e8:	4622      	mov	r2, r4
 80153ea:	4b11      	ldr	r3, [pc, #68]	; (8015430 <_svfiprintf_r+0x1ec>)
 80153ec:	a904      	add	r1, sp, #16
 80153ee:	4640      	mov	r0, r8
 80153f0:	f3af 8000 	nop.w
 80153f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80153f8:	4681      	mov	r9, r0
 80153fa:	d1d6      	bne.n	80153aa <_svfiprintf_r+0x166>
 80153fc:	89a3      	ldrh	r3, [r4, #12]
 80153fe:	065b      	lsls	r3, r3, #25
 8015400:	f53f af35 	bmi.w	801526e <_svfiprintf_r+0x2a>
 8015404:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015406:	b01d      	add	sp, #116	; 0x74
 8015408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801540c:	ab03      	add	r3, sp, #12
 801540e:	9300      	str	r3, [sp, #0]
 8015410:	4622      	mov	r2, r4
 8015412:	4b07      	ldr	r3, [pc, #28]	; (8015430 <_svfiprintf_r+0x1ec>)
 8015414:	a904      	add	r1, sp, #16
 8015416:	4640      	mov	r0, r8
 8015418:	f7ff fd2e 	bl	8014e78 <_printf_i>
 801541c:	e7ea      	b.n	80153f4 <_svfiprintf_r+0x1b0>
 801541e:	bf00      	nop
 8015420:	08015972 	.word	0x08015972
 8015424:	08015978 	.word	0x08015978
 8015428:	0801597c 	.word	0x0801597c
 801542c:	00000000 	.word	0x00000000
 8015430:	0801518f 	.word	0x0801518f

08015434 <_malloc_usable_size_r>:
 8015434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015438:	1f18      	subs	r0, r3, #4
 801543a:	2b00      	cmp	r3, #0
 801543c:	bfbc      	itt	lt
 801543e:	580b      	ldrlt	r3, [r1, r0]
 8015440:	18c0      	addlt	r0, r0, r3
 8015442:	4770      	bx	lr

08015444 <_init>:
 8015444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015446:	bf00      	nop
 8015448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801544a:	bc08      	pop	{r3}
 801544c:	469e      	mov	lr, r3
 801544e:	4770      	bx	lr

08015450 <_fini>:
 8015450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015452:	bf00      	nop
 8015454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015456:	bc08      	pop	{r3}
 8015458:	469e      	mov	lr, r3
 801545a:	4770      	bx	lr
