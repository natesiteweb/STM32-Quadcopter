
f4Quadcopter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b294  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800b424  0800b424  0001b424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4d8  0800b4d8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4d8  0800b4d8  0001b4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4e0  0800b4e0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4e0  0800b4e0  0001b4e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4e4  0800b4e4  0001b4e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b4e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b30  200001e8  0800b6d0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d18  0800b6d0  00021d18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e629  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000402e  00000000  00000000  0003e841  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001578  00000000  00000000  00042870  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001390  00000000  00000000  00043de8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000245aa  00000000  00000000  00045178  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001643d  00000000  00000000  00069722  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8ea1  00000000  00000000  0007fb5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00148a00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b78  00000000  00000000  00148a7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b40c 	.word	0x0800b40c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800b40c 	.word	0x0800b40c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <MX_DMA_Init+0x3c>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a0b      	ldr	r2, [pc, #44]	; (80005bc <MX_DMA_Init+0x3c>)
 8000590:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b09      	ldr	r3, [pc, #36]	; (80005bc <MX_DMA_Init+0x3c>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2100      	movs	r1, #0
 80005a6:	202f      	movs	r0, #47	; 0x2f
 80005a8:	f001 f873 	bl	8001692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80005ac:	202f      	movs	r0, #47	; 0x2f
 80005ae:	f001 f88c 	bl	80016ca <HAL_NVIC_EnableIRQ>

}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40023800 	.word	0x40023800

080005c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08a      	sub	sp, #40	; 0x28
 80005c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
 80005da:	4b31      	ldr	r3, [pc, #196]	; (80006a0 <MX_GPIO_Init+0xe0>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a30      	ldr	r2, [pc, #192]	; (80006a0 <MX_GPIO_Init+0xe0>)
 80005e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <MX_GPIO_Init+0xe0>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ee:	613b      	str	r3, [r7, #16]
 80005f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	4b2a      	ldr	r3, [pc, #168]	; (80006a0 <MX_GPIO_Init+0xe0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a29      	ldr	r2, [pc, #164]	; (80006a0 <MX_GPIO_Init+0xe0>)
 80005fc:	f043 0304 	orr.w	r3, r3, #4
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b27      	ldr	r3, [pc, #156]	; (80006a0 <MX_GPIO_Init+0xe0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0304 	and.w	r3, r3, #4
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	4b23      	ldr	r3, [pc, #140]	; (80006a0 <MX_GPIO_Init+0xe0>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a22      	ldr	r2, [pc, #136]	; (80006a0 <MX_GPIO_Init+0xe0>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <MX_GPIO_Init+0xe0>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <MX_GPIO_Init+0xe0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a1b      	ldr	r2, [pc, #108]	; (80006a0 <MX_GPIO_Init+0xe0>)
 8000634:	f043 0302 	orr.w	r3, r3, #2
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <MX_GPIO_Init+0xe0>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0302 	and.w	r3, r3, #2
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2106      	movs	r1, #6
 800064a:	4816      	ldr	r0, [pc, #88]	; (80006a4 <MX_GPIO_Init+0xe4>)
 800064c:	f001 fd9c 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000656:	4814      	ldr	r0, [pc, #80]	; (80006a8 <MX_GPIO_Init+0xe8>)
 8000658:	f001 fd96 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800065c:	2306      	movs	r3, #6
 800065e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000660:	2301      	movs	r3, #1
 8000662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000668:	2300      	movs	r3, #0
 800066a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	4619      	mov	r1, r3
 8000672:	480c      	ldr	r0, [pc, #48]	; (80006a4 <MX_GPIO_Init+0xe4>)
 8000674:	f001 fbee 	bl	8001e54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000678:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800067c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067e:	2301      	movs	r3, #1
 8000680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000686:	2300      	movs	r3, #0
 8000688:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4619      	mov	r1, r3
 8000690:	4805      	ldr	r0, [pc, #20]	; (80006a8 <MX_GPIO_Init+0xe8>)
 8000692:	f001 fbdf 	bl	8001e54 <HAL_GPIO_Init>

}
 8000696:	bf00      	nop
 8000698:	3728      	adds	r7, #40	; 0x28
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020800 	.word	0x40020800
 80006a8:	40020400 	.word	0x40020400

080006ac <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_I2C1_Init+0x50>)
 80006b2:	4a13      	ldr	r2, [pc, #76]	; (8000700 <MX_I2C1_Init+0x54>)
 80006b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_I2C1_Init+0x50>)
 80006b8:	4a12      	ldr	r2, [pc, #72]	; (8000704 <MX_I2C1_Init+0x58>)
 80006ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_I2C1_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_I2C1_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_I2C1_Init+0x50>)
 80006ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <MX_I2C1_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_I2C1_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <MX_I2C1_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_I2C1_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <MX_I2C1_Init+0x50>)
 80006ea:	f001 fd67 	bl	80021bc <HAL_I2C_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006f4:	f000 f9a4 	bl	8000a40 <Error_Handler>
  }

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	2000021c 	.word	0x2000021c
 8000700:	40005400 	.word	0x40005400
 8000704:	00061a80 	.word	0x00061a80

08000708 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_I2C2_Init+0x50>)
 800070e:	4a13      	ldr	r2, [pc, #76]	; (800075c <MX_I2C2_Init+0x54>)
 8000710:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_I2C2_Init+0x50>)
 8000714:	4a12      	ldr	r2, [pc, #72]	; (8000760 <MX_I2C2_Init+0x58>)
 8000716:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_I2C2_Init+0x50>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_I2C2_Init+0x50>)
 8000720:	2200      	movs	r2, #0
 8000722:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_I2C2_Init+0x50>)
 8000726:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800072a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800072c:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <MX_I2C2_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_I2C2_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000738:	4b07      	ldr	r3, [pc, #28]	; (8000758 <MX_I2C2_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800073e:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_I2C2_Init+0x50>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <MX_I2C2_Init+0x50>)
 8000746:	f001 fd39 	bl	80021bc <HAL_I2C_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000750:	f000 f976 	bl	8000a40 <Error_Handler>
  }

}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000270 	.word	0x20000270
 800075c:	40005800 	.word	0x40005800
 8000760:	00061a80 	.word	0x00061a80

08000764 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08c      	sub	sp, #48	; 0x30
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076c:	f107 031c 	add.w	r3, r7, #28
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a51      	ldr	r2, [pc, #324]	; (80008c8 <HAL_I2C_MspInit+0x164>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d134      	bne.n	80007f0 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
 800078a:	4b50      	ldr	r3, [pc, #320]	; (80008cc <HAL_I2C_MspInit+0x168>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a4f      	ldr	r2, [pc, #316]	; (80008cc <HAL_I2C_MspInit+0x168>)
 8000790:	f043 0302 	orr.w	r3, r3, #2
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b4d      	ldr	r3, [pc, #308]	; (80008cc <HAL_I2C_MspInit+0x168>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0302 	and.w	r3, r3, #2
 800079e:	61bb      	str	r3, [r7, #24]
 80007a0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007a2:	23c0      	movs	r3, #192	; 0xc0
 80007a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007a6:	2312      	movs	r3, #18
 80007a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ae:	2303      	movs	r3, #3
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007b2:	2304      	movs	r3, #4
 80007b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4619      	mov	r1, r3
 80007bc:	4844      	ldr	r0, [pc, #272]	; (80008d0 <HAL_I2C_MspInit+0x16c>)
 80007be:	f001 fb49 	bl	8001e54 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	4b41      	ldr	r3, [pc, #260]	; (80008cc <HAL_I2C_MspInit+0x168>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ca:	4a40      	ldr	r2, [pc, #256]	; (80008cc <HAL_I2C_MspInit+0x168>)
 80007cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007d0:	6413      	str	r3, [r2, #64]	; 0x40
 80007d2:	4b3e      	ldr	r3, [pc, #248]	; (80008cc <HAL_I2C_MspInit+0x168>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	201f      	movs	r0, #31
 80007e4:	f000 ff55 	bl	8001692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80007e8:	201f      	movs	r0, #31
 80007ea:	f000 ff6e 	bl	80016ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80007ee:	e067      	b.n	80008c0 <HAL_I2C_MspInit+0x15c>
  else if(i2cHandle->Instance==I2C2)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a37      	ldr	r2, [pc, #220]	; (80008d4 <HAL_I2C_MspInit+0x170>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d162      	bne.n	80008c0 <HAL_I2C_MspInit+0x15c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	4b33      	ldr	r3, [pc, #204]	; (80008cc <HAL_I2C_MspInit+0x168>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a32      	ldr	r2, [pc, #200]	; (80008cc <HAL_I2C_MspInit+0x168>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b30      	ldr	r3, [pc, #192]	; (80008cc <HAL_I2C_MspInit+0x168>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000816:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800081a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800081c:	2312      	movs	r3, #18
 800081e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000820:	2301      	movs	r3, #1
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000824:	2303      	movs	r3, #3
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000828:	2304      	movs	r3, #4
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	4827      	ldr	r0, [pc, #156]	; (80008d0 <HAL_I2C_MspInit+0x16c>)
 8000834:	f001 fb0e 	bl	8001e54 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	4b23      	ldr	r3, [pc, #140]	; (80008cc <HAL_I2C_MspInit+0x168>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	4a22      	ldr	r2, [pc, #136]	; (80008cc <HAL_I2C_MspInit+0x168>)
 8000842:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000846:	6413      	str	r3, [r2, #64]	; 0x40
 8000848:	4b20      	ldr	r3, [pc, #128]	; (80008cc <HAL_I2C_MspInit+0x168>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8000854:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <HAL_I2C_MspInit+0x174>)
 8000856:	4a21      	ldr	r2, [pc, #132]	; (80008dc <HAL_I2C_MspInit+0x178>)
 8000858:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 800085a:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <HAL_I2C_MspInit+0x174>)
 800085c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000860:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000862:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <HAL_I2C_MspInit+0x174>)
 8000864:	2240      	movs	r2, #64	; 0x40
 8000866:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000868:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <HAL_I2C_MspInit+0x174>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <HAL_I2C_MspInit+0x174>)
 8000870:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000874:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <HAL_I2C_MspInit+0x174>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800087c:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <HAL_I2C_MspInit+0x174>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <HAL_I2C_MspInit+0x174>)
 8000884:	2200      	movs	r2, #0
 8000886:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000888:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <HAL_I2C_MspInit+0x174>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_I2C_MspInit+0x174>)
 8000890:	2200      	movs	r2, #0
 8000892:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8000894:	4810      	ldr	r0, [pc, #64]	; (80008d8 <HAL_I2C_MspInit+0x174>)
 8000896:	f000 ff33 	bl	8001700 <HAL_DMA_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <HAL_I2C_MspInit+0x140>
      Error_Handler();
 80008a0:	f000 f8ce 	bl	8000a40 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a0c      	ldr	r2, [pc, #48]	; (80008d8 <HAL_I2C_MspInit+0x174>)
 80008a8:	635a      	str	r2, [r3, #52]	; 0x34
 80008aa:	4a0b      	ldr	r2, [pc, #44]	; (80008d8 <HAL_I2C_MspInit+0x174>)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2100      	movs	r1, #0
 80008b4:	2021      	movs	r0, #33	; 0x21
 80008b6:	f000 feec 	bl	8001692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80008ba:	2021      	movs	r0, #33	; 0x21
 80008bc:	f000 ff05 	bl	80016ca <HAL_NVIC_EnableIRQ>
}
 80008c0:	bf00      	nop
 80008c2:	3730      	adds	r7, #48	; 0x30
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40005400 	.word	0x40005400
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020400 	.word	0x40020400
 80008d4:	40005800 	.word	0x40005800
 80008d8:	200002c4 	.word	0x200002c4
 80008dc:	400260b8 	.word	0x400260b8

080008e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e4:	f000 fd66 	bl	80013b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e8:	f000 f818 	bl	800091c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ec:	f7ff fe68 	bl	80005c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80008f0:	f7ff fe46 	bl	8000580 <MX_DMA_Init>
  MX_I2C1_Init();
 80008f4:	f7ff feda 	bl	80006ac <MX_I2C1_Init>
  MX_I2C2_Init();
 80008f8:	f7ff ff06 	bl	8000708 <MX_I2C2_Init>
  MX_RTC_Init();
 80008fc:	f000 f980 	bl	8000c00 <MX_RTC_Init>
  MX_TIM3_Init();
 8000900:	f000 fa84 	bl	8000e0c <MX_TIM3_Init>
  MX_TIM5_Init();
 8000904:	f000 fafc 	bl	8000f00 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000908:	f000 fb58 	bl	8000fbc <MX_TIM8_Init>
  MX_USB_DEVICE_Init();
 800090c:	f009 fc36 	bl	800a17c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  main_setup();
 8000910:	f000 f89e 	bl	8000a50 <main_setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  main_loop();
 8000914:	f000 f920 	bl	8000b58 <main_loop>
 8000918:	e7fc      	b.n	8000914 <main+0x34>
	...

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b098      	sub	sp, #96	; 0x60
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000926:	2230      	movs	r2, #48	; 0x30
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f00a f960 	bl	800abf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	4b31      	ldr	r3, [pc, #196]	; (8000a18 <SystemClock_Config+0xfc>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	4a30      	ldr	r2, [pc, #192]	; (8000a18 <SystemClock_Config+0xfc>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
 800095e:	4b2e      	ldr	r3, [pc, #184]	; (8000a18 <SystemClock_Config+0xfc>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b2b      	ldr	r3, [pc, #172]	; (8000a1c <SystemClock_Config+0x100>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a2a      	ldr	r2, [pc, #168]	; (8000a1c <SystemClock_Config+0x100>)
 8000974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000978:	6013      	str	r3, [r2, #0]
 800097a:	4b28      	ldr	r3, [pc, #160]	; (8000a1c <SystemClock_Config+0x100>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000986:	2309      	movs	r3, #9
 8000988:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800098a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800098e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000990:	2301      	movs	r3, #1
 8000992:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000994:	2302      	movs	r3, #2
 8000996:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000998:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800099c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800099e:	2310      	movs	r3, #16
 80009a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009a2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009a6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a8:	2302      	movs	r3, #2
 80009aa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009ac:	2307      	movs	r3, #7
 80009ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009b4:	4618      	mov	r0, r3
 80009b6:	f004 ff97 	bl	80058e8 <HAL_RCC_OscConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80009c0:	f000 f83e 	bl	8000a40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c4:	230f      	movs	r3, #15
 80009c6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c8:	2302      	movs	r3, #2
 80009ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	2105      	movs	r1, #5
 80009e2:	4618      	mov	r0, r3
 80009e4:	f005 f9f0 	bl	8005dc8 <HAL_RCC_ClockConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80009ee:	f000 f827 	bl	8000a40 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80009f2:	2302      	movs	r3, #2
 80009f4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80009f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009fa:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	4618      	mov	r0, r3
 8000a02:	f005 fbbd 	bl	8006180 <HAL_RCCEx_PeriphCLKConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000a0c:	f000 f818 	bl	8000a40 <Error_Handler>
  }
}
 8000a10:	bf00      	nop
 8000a12:	3760      	adds	r7, #96	; 0x60
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40007000 	.word	0x40007000

08000a20 <HAL_I2C_MemRxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	read_flag = 1;
 8000a28:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <HAL_I2C_MemRxCpltCallback+0x1c>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	701a      	strb	r2, [r3, #0]
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	20000208 	.word	0x20000208

08000a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
	...

08000a50 <main_setup>:

uint8_t read_flag = 0;
uint8_t send_buffer[2] = { 0x01, 0x01 };

void main_setup()
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af02      	add	r7, sp, #8
	HAL_Delay(6000);
 8000a56:	f241 7070 	movw	r0, #6000	; 0x1770
 8000a5a:	f000 fd1d 	bl	8001498 <HAL_Delay>

	buf[0] = 0x6B;
 8000a5e:	4b3a      	ldr	r3, [pc, #232]	; (8000b48 <main_setup+0xf8>)
 8000a60:	226b      	movs	r2, #107	; 0x6b
 8000a62:	701a      	strb	r2, [r3, #0]
	buf[1] = 0x00;
 8000a64:	4b38      	ldr	r3, [pc, #224]	; (8000b48 <main_setup+0xf8>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, buf, 2, HAL_MAX_DELAY);
 8000a6a:	23d0      	movs	r3, #208	; 0xd0
 8000a6c:	b299      	uxth	r1, r3
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	2302      	movs	r3, #2
 8000a76:	4a34      	ldr	r2, [pc, #208]	; (8000b48 <main_setup+0xf8>)
 8000a78:	4834      	ldr	r0, [pc, #208]	; (8000b4c <main_setup+0xfc>)
 8000a7a:	f001 fcd7 	bl	800242c <HAL_I2C_Master_Transmit>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b33      	ldr	r3, [pc, #204]	; (8000b50 <main_setup+0x100>)
 8000a84:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK)
 8000a86:	4b32      	ldr	r3, [pc, #200]	; (8000b50 <main_setup+0x100>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d008      	beq.n	8000aa0 <main_setup+0x50>
	{
		strcpy((char*)buf, "Error Tx\r\n");
 8000a8e:	4a2e      	ldr	r2, [pc, #184]	; (8000b48 <main_setup+0xf8>)
 8000a90:	4b30      	ldr	r3, [pc, #192]	; (8000b54 <main_setup+0x104>)
 8000a92:	cb03      	ldmia	r3!, {r0, r1}
 8000a94:	6010      	str	r0, [r2, #0]
 8000a96:	6051      	str	r1, [r2, #4]
 8000a98:	8819      	ldrh	r1, [r3, #0]
 8000a9a:	789b      	ldrb	r3, [r3, #2]
 8000a9c:	8111      	strh	r1, [r2, #8]
 8000a9e:	7293      	strb	r3, [r2, #10]
	}

	HAL_Delay(10);
 8000aa0:	200a      	movs	r0, #10
 8000aa2:	f000 fcf9 	bl	8001498 <HAL_Delay>

	buf[0] = 0x1B;
 8000aa6:	4b28      	ldr	r3, [pc, #160]	; (8000b48 <main_setup+0xf8>)
 8000aa8:	221b      	movs	r2, #27
 8000aaa:	701a      	strb	r2, [r3, #0]
	buf[1] = 0x08;
 8000aac:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <main_setup+0xf8>)
 8000aae:	2208      	movs	r2, #8
 8000ab0:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, buf, 2, HAL_MAX_DELAY);
 8000ab2:	23d0      	movs	r3, #208	; 0xd0
 8000ab4:	b299      	uxth	r1, r3
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	2302      	movs	r3, #2
 8000abe:	4a22      	ldr	r2, [pc, #136]	; (8000b48 <main_setup+0xf8>)
 8000ac0:	4822      	ldr	r0, [pc, #136]	; (8000b4c <main_setup+0xfc>)
 8000ac2:	f001 fcb3 	bl	800242c <HAL_I2C_Master_Transmit>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b21      	ldr	r3, [pc, #132]	; (8000b50 <main_setup+0x100>)
 8000acc:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK)
 8000ace:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <main_setup+0x100>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d008      	beq.n	8000ae8 <main_setup+0x98>
	{
		strcpy((char*)buf, "Error Tx\r\n");
 8000ad6:	4a1c      	ldr	r2, [pc, #112]	; (8000b48 <main_setup+0xf8>)
 8000ad8:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <main_setup+0x104>)
 8000ada:	cb03      	ldmia	r3!, {r0, r1}
 8000adc:	6010      	str	r0, [r2, #0]
 8000ade:	6051      	str	r1, [r2, #4]
 8000ae0:	8819      	ldrh	r1, [r3, #0]
 8000ae2:	789b      	ldrb	r3, [r3, #2]
 8000ae4:	8111      	strh	r1, [r2, #8]
 8000ae6:	7293      	strb	r3, [r2, #10]
	}

	HAL_Delay(10);
 8000ae8:	200a      	movs	r0, #10
 8000aea:	f000 fcd5 	bl	8001498 <HAL_Delay>

	buf[0] = 0x1A;
 8000aee:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <main_setup+0xf8>)
 8000af0:	221a      	movs	r2, #26
 8000af2:	701a      	strb	r2, [r3, #0]
	buf[1] = 0x03;
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <main_setup+0xf8>)
 8000af6:	2203      	movs	r2, #3
 8000af8:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, buf, 2, HAL_MAX_DELAY);
 8000afa:	23d0      	movs	r3, #208	; 0xd0
 8000afc:	b299      	uxth	r1, r3
 8000afe:	f04f 33ff 	mov.w	r3, #4294967295
 8000b02:	9300      	str	r3, [sp, #0]
 8000b04:	2302      	movs	r3, #2
 8000b06:	4a10      	ldr	r2, [pc, #64]	; (8000b48 <main_setup+0xf8>)
 8000b08:	4810      	ldr	r0, [pc, #64]	; (8000b4c <main_setup+0xfc>)
 8000b0a:	f001 fc8f 	bl	800242c <HAL_I2C_Master_Transmit>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <main_setup+0x100>)
 8000b14:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK)
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <main_setup+0x100>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d008      	beq.n	8000b30 <main_setup+0xe0>
	{
		strcpy((char*)buf, "Error Tx\r\n");
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <main_setup+0xf8>)
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <main_setup+0x104>)
 8000b22:	cb03      	ldmia	r3!, {r0, r1}
 8000b24:	6010      	str	r0, [r2, #0]
 8000b26:	6051      	str	r1, [r2, #4]
 8000b28:	8819      	ldrh	r1, [r3, #0]
 8000b2a:	789b      	ldrb	r3, [r3, #2]
 8000b2c:	8111      	strh	r1, [r2, #8]
 8000b2e:	7293      	strb	r3, [r2, #10]
	}

	CDC_Transmit_FS(buf, strlen((char*)buf));
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <main_setup+0xf8>)
 8000b32:	f7ff fb4d 	bl	80001d0 <strlen>
 8000b36:	4603      	mov	r3, r0
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4802      	ldr	r0, [pc, #8]	; (8000b48 <main_setup+0xf8>)
 8000b3e:	f009 fbdb 	bl	800a2f8 <CDC_Transmit_FS>
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	2000032c 	.word	0x2000032c
 8000b4c:	2000021c 	.word	0x2000021c
 8000b50:	20000354 	.word	0x20000354
 8000b54:	0800b424 	.word	0x0800b424

08000b58 <main_loop>:

void main_loop()
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af02      	add	r7, sp, #8
	HAL_Delay(50);
 8000b5e:	2032      	movs	r0, #50	; 0x32
 8000b60:	f000 fc9a 	bl	8001498 <HAL_Delay>

	if(read_flag == 1)
 8000b64:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <main_loop+0x84>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d128      	bne.n	8000bbe <main_loop+0x66>
	{
		read_flag = 0;
 8000b6c:	4b1b      	ldr	r3, [pc, #108]	; (8000bdc <main_loop+0x84>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]

		i2c_transmit_timer = HAL_GetTick();
 8000b72:	f000 fc85 	bl	8001480 <HAL_GetTick>
 8000b76:	4602      	mov	r2, r0
 8000b78:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <main_loop+0x88>)
 8000b7a:	601a      	str	r2, [r3, #0]
		//i2c_transmit_timer = DWT->CYCCNT * (HAL_RCC_GetHCLKFreq() / 1000000);
		//HAL_Delay(10);
		HAL_I2C_Master_Transmit_DMA(&hi2c2, (uint8_t)(0x04 << 1), (uint8_t *)send_buffer, 2);
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	4a19      	ldr	r2, [pc, #100]	; (8000be4 <main_loop+0x8c>)
 8000b80:	2108      	movs	r1, #8
 8000b82:	4819      	ldr	r0, [pc, #100]	; (8000be8 <main_loop+0x90>)
 8000b84:	f001 fd50 	bl	8002628 <HAL_I2C_Master_Transmit_DMA>
		//HAL_I2C_Master_Transmit();
		//HAL_I2C_Master_Transmit_IT();
		//HAL_Delay(5);
		//val = ((DWT->CYCCNT * (HAL_RCC_GetHCLKFreq() / 1000000)) - i2c_transmit_timer);
		val = (HAL_GetTick() - i2c_transmit_timer);
 8000b88:	f000 fc7a 	bl	8001480 <HAL_GetTick>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <main_loop+0x88>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	1ad3      	subs	r3, r2, r3
 8000b94:	4a15      	ldr	r2, [pc, #84]	; (8000bec <main_loop+0x94>)
 8000b96:	6013      	str	r3, [r2, #0]
		}
		else
		{
			sprintf((char*)buf, "%s", "0\r\n");
		}*/
		sprintf((char*)buf, "%lu%s", val, "\r\n");
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <main_loop+0x94>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <main_loop+0x98>)
 8000b9e:	4915      	ldr	r1, [pc, #84]	; (8000bf4 <main_loop+0x9c>)
 8000ba0:	4815      	ldr	r0, [pc, #84]	; (8000bf8 <main_loop+0xa0>)
 8000ba2:	f00a f8e5 	bl	800ad70 <siprintf>
		//snprintf((char*)buf, 0, "%lu%s", val, "\r\n");

		CDC_Transmit_FS(buf, strlen((char*)buf));
 8000ba6:	4814      	ldr	r0, [pc, #80]	; (8000bf8 <main_loop+0xa0>)
 8000ba8:	f7ff fb12 	bl	80001d0 <strlen>
 8000bac:	4603      	mov	r3, r0
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4811      	ldr	r0, [pc, #68]	; (8000bf8 <main_loop+0xa0>)
 8000bb4:	f009 fba0 	bl	800a2f8 <CDC_Transmit_FS>
		HAL_Delay(10);
 8000bb8:	200a      	movs	r0, #10
 8000bba:	f000 fc6d 	bl	8001498 <HAL_Delay>
		//i2c_transmit_timer = DWT->CYCCNT * (HAL_RCC_GetHCLKFreq() / 1000000);
		//HAL_I2C_Master_Receive_IT(hi2c, DevAddress, pData, Size)
	}

	//ret = HAL_I2C_Mem_Read(&hi2c1, GYRO_ADDR, 0x43, 1, buf, 2, HAL_MAX_DELAY);
	HAL_I2C_Mem_Read_IT(&hi2c1, GYRO_ADDR, 0x43, 1, buf, 2);
 8000bbe:	23d0      	movs	r3, #208	; 0xd0
 8000bc0:	b299      	uxth	r1, r3
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	9301      	str	r3, [sp, #4]
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <main_loop+0xa0>)
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	2301      	movs	r3, #1
 8000bcc:	2243      	movs	r2, #67	; 0x43
 8000bce:	480b      	ldr	r0, [pc, #44]	; (8000bfc <main_loop+0xa4>)
 8000bd0:	f001 fe40 	bl	8002854 <HAL_I2C_Mem_Read_IT>
		val = (int16_t)((buf[0] << 8) | (buf[1]));
		gyro_x = val;
		itoa(val, buf, 10);
		sprintf((char*)buf, "%s%s", buf, "\r\n");
	}*/
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000208 	.word	0x20000208
 8000be0:	20000204 	.word	0x20000204
 8000be4:	20000000 	.word	0x20000000
 8000be8:	20000270 	.word	0x20000270
 8000bec:	20000324 	.word	0x20000324
 8000bf0:	0800b430 	.word	0x0800b430
 8000bf4:	0800b434 	.word	0x0800b434
 8000bf8:	2000032c 	.word	0x2000032c
 8000bfc:	2000021c 	.word	0x2000021c

08000c00 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <MX_RTC_Init+0x44>)
 8000c06:	4a10      	ldr	r2, [pc, #64]	; (8000c48 <MX_RTC_Init+0x48>)
 8000c08:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <MX_RTC_Init+0x44>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_RTC_Init+0x44>)
 8000c12:	227f      	movs	r2, #127	; 0x7f
 8000c14:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <MX_RTC_Init+0x44>)
 8000c18:	22ff      	movs	r2, #255	; 0xff
 8000c1a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_RTC_Init+0x44>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <MX_RTC_Init+0x44>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <MX_RTC_Init+0x44>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_RTC_Init+0x44>)
 8000c30:	f005 fb88 	bl	8006344 <HAL_RTC_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000c3a:	f7ff ff01 	bl	8000a40 <Error_Handler>
  }

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000358 	.word	0x20000358
 8000c48:	40002800 	.word	0x40002800

08000c4c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <HAL_RTC_MspInit+0x24>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d102      	bne.n	8000c64 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c5e:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <HAL_RTC_MspInit+0x28>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	40002800 	.word	0x40002800
 8000c74:	42470e3c 	.word	0x42470e3c

08000c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	4a0f      	ldr	r2, [pc, #60]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	4a08      	ldr	r2, [pc, #32]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	40023800 	.word	0x40023800

08000cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <HardFault_Handler+0x4>

08000cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <MemManage_Handler+0x4>

08000ce2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <UsageFault_Handler+0x4>

08000cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1c:	f000 fb9c 	bl	8001458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <I2C1_EV_IRQHandler+0x10>)
 8000d2a:	f001 fe51 	bl	80029d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	2000021c 	.word	0x2000021c

08000d38 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000d3c:	4802      	ldr	r0, [pc, #8]	; (8000d48 <I2C2_EV_IRQHandler+0x10>)
 8000d3e:	f001 fe47 	bl	80029d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000270 	.word	0x20000270

08000d4c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8000d50:	4802      	ldr	r0, [pc, #8]	; (8000d5c <DMA1_Stream7_IRQHandler+0x10>)
 8000d52:	f000 fdfd 	bl	8001950 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200002c4 	.word	0x200002c4

08000d60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d64:	4802      	ldr	r0, [pc, #8]	; (8000d70 <OTG_FS_IRQHandler+0x10>)
 8000d66:	f003 fd8c 	bl	8004882 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	2000190c 	.word	0x2000190c

08000d74 <_sbrk>:
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	4a14      	ldr	r2, [pc, #80]	; (8000dd0 <_sbrk+0x5c>)
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <_sbrk+0x60>)
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d102      	bne.n	8000d96 <_sbrk+0x22>
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <_sbrk+0x64>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <_sbrk+0x68>)
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d207      	bcs.n	8000db4 <_sbrk+0x40>
 8000da4:	f009 feea 	bl	800ab7c <__errno>
 8000da8:	4602      	mov	r2, r0
 8000daa:	230c      	movs	r3, #12
 8000dac:	6013      	str	r3, [r2, #0]
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
 8000db2:	e009      	b.n	8000dc8 <_sbrk+0x54>
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <_sbrk+0x64>)
 8000dc4:	6013      	str	r3, [r2, #0]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20020000 	.word	0x20020000
 8000dd4:	00000400 	.word	0x00000400
 8000dd8:	2000020c 	.word	0x2000020c
 8000ddc:	20001d18 	.word	0x20001d18

08000de0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <SystemInit+0x28>)
 8000de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dea:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <SystemInit+0x28>)
 8000dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <SystemInit+0x28>)
 8000df6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dfa:	609a      	str	r2, [r3, #8]
#endif
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <MX_TIM3_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e12:	f107 0320 	add.w	r3, r7, #32
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]
 8000e28:	611a      	str	r2, [r3, #16]
 8000e2a:	615a      	str	r2, [r3, #20]
 8000e2c:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8000e2e:	4b32      	ldr	r3, [pc, #200]	; (8000ef8 <MX_TIM3_Init+0xec>)
 8000e30:	4a32      	ldr	r2, [pc, #200]	; (8000efc <MX_TIM3_Init+0xf0>)
 8000e32:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e34:	4b30      	ldr	r3, [pc, #192]	; (8000ef8 <MX_TIM3_Init+0xec>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3a:	4b2f      	ldr	r3, [pc, #188]	; (8000ef8 <MX_TIM3_Init+0xec>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e40:	4b2d      	ldr	r3, [pc, #180]	; (8000ef8 <MX_TIM3_Init+0xec>)
 8000e42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e48:	4b2b      	ldr	r3, [pc, #172]	; (8000ef8 <MX_TIM3_Init+0xec>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4e:	4b2a      	ldr	r3, [pc, #168]	; (8000ef8 <MX_TIM3_Init+0xec>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000e54:	4828      	ldr	r0, [pc, #160]	; (8000ef8 <MX_TIM3_Init+0xec>)
 8000e56:	f005 fb85 	bl	8006564 <HAL_TIM_OC_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000e60:	f7ff fdee 	bl	8000a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e64:	2300      	movs	r3, #0
 8000e66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e6c:	f107 0320 	add.w	r3, r7, #32
 8000e70:	4619      	mov	r1, r3
 8000e72:	4821      	ldr	r0, [pc, #132]	; (8000ef8 <MX_TIM3_Init+0xec>)
 8000e74:	f006 f994 	bl	80071a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000e7e:	f7ff fddf 	bl	8000a40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2200      	movs	r2, #0
 8000e96:	4619      	mov	r1, r3
 8000e98:	4817      	ldr	r0, [pc, #92]	; (8000ef8 <MX_TIM3_Init+0xec>)
 8000e9a:	f005 fbb9 	bl	8006610 <HAL_TIM_OC_ConfigChannel>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000ea4:	f7ff fdcc 	bl	8000a40 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2204      	movs	r2, #4
 8000eac:	4619      	mov	r1, r3
 8000eae:	4812      	ldr	r0, [pc, #72]	; (8000ef8 <MX_TIM3_Init+0xec>)
 8000eb0:	f005 fbae 	bl	8006610 <HAL_TIM_OC_ConfigChannel>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000eba:	f7ff fdc1 	bl	8000a40 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	2208      	movs	r2, #8
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <MX_TIM3_Init+0xec>)
 8000ec6:	f005 fba3 	bl	8006610 <HAL_TIM_OC_ConfigChannel>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000ed0:	f7ff fdb6 	bl	8000a40 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <MX_TIM3_Init+0xec>)
 8000edc:	f005 fb98 	bl	8006610 <HAL_TIM_OC_ConfigChannel>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000ee6:	f7ff fdab 	bl	8000a40 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000eea:	4803      	ldr	r0, [pc, #12]	; (8000ef8 <MX_TIM3_Init+0xec>)
 8000eec:	f000 f9b6 	bl	800125c <HAL_TIM_MspPostInit>

}
 8000ef0:	bf00      	nop
 8000ef2:	3728      	adds	r7, #40	; 0x28
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	200003f8 	.word	0x200003f8
 8000efc:	40000400 	.word	0x40000400

08000f00 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f06:	f107 0310 	add.w	r3, r7, #16
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f10:	463b      	mov	r3, r7
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]

  htim5.Instance = TIM5;
 8000f1c:	4b25      	ldr	r3, [pc, #148]	; (8000fb4 <MX_TIM5_Init+0xb4>)
 8000f1e:	4a26      	ldr	r2, [pc, #152]	; (8000fb8 <MX_TIM5_Init+0xb8>)
 8000f20:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f22:	4b24      	ldr	r3, [pc, #144]	; (8000fb4 <MX_TIM5_Init+0xb4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f28:	4b22      	ldr	r3, [pc, #136]	; (8000fb4 <MX_TIM5_Init+0xb4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000f2e:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <MX_TIM5_Init+0xb4>)
 8000f30:	f04f 32ff 	mov.w	r2, #4294967295
 8000f34:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f36:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <MX_TIM5_Init+0xb4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3c:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <MX_TIM5_Init+0xb4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000f42:	481c      	ldr	r0, [pc, #112]	; (8000fb4 <MX_TIM5_Init+0xb4>)
 8000f44:	f005 fb39 	bl	80065ba <HAL_TIM_IC_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000f4e:	f7ff fd77 	bl	8000a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f5a:	f107 0310 	add.w	r3, r7, #16
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4814      	ldr	r0, [pc, #80]	; (8000fb4 <MX_TIM5_Init+0xb4>)
 8000f62:	f006 f91d 	bl	80071a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000f6c:	f7ff fd68 	bl	8000a40 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f70:	2300      	movs	r3, #0
 8000f72:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f74:	2301      	movs	r3, #1
 8000f76:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f80:	463b      	mov	r3, r7
 8000f82:	2200      	movs	r2, #0
 8000f84:	4619      	mov	r1, r3
 8000f86:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <MX_TIM5_Init+0xb4>)
 8000f88:	f005 fba2 	bl	80066d0 <HAL_TIM_IC_ConfigChannel>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8000f92:	f7ff fd55 	bl	8000a40 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000f96:	463b      	mov	r3, r7
 8000f98:	2204      	movs	r2, #4
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <MX_TIM5_Init+0xb4>)
 8000f9e:	f005 fb97 	bl	80066d0 <HAL_TIM_IC_ConfigChannel>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 8000fa8:	f7ff fd4a 	bl	8000a40 <Error_Handler>
  }

}
 8000fac:	bf00      	nop
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200003b8 	.word	0x200003b8
 8000fb8:	40000c00 	.word	0x40000c00

08000fbc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b096      	sub	sp, #88	; 0x58
 8000fc0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	611a      	str	r2, [r3, #16]
 8000fea:	615a      	str	r2, [r3, #20]
 8000fec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	2220      	movs	r2, #32
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f009 fdfb 	bl	800abf0 <memset>

  htim8.Instance = TIM8;
 8000ffa:	4b50      	ldr	r3, [pc, #320]	; (800113c <MX_TIM8_Init+0x180>)
 8000ffc:	4a50      	ldr	r2, [pc, #320]	; (8001140 <MX_TIM8_Init+0x184>)
 8000ffe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001000:	4b4e      	ldr	r3, [pc, #312]	; (800113c <MX_TIM8_Init+0x180>)
 8001002:	2200      	movs	r2, #0
 8001004:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001006:	4b4d      	ldr	r3, [pc, #308]	; (800113c <MX_TIM8_Init+0x180>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800100c:	4b4b      	ldr	r3, [pc, #300]	; (800113c <MX_TIM8_Init+0x180>)
 800100e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001012:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001014:	4b49      	ldr	r3, [pc, #292]	; (800113c <MX_TIM8_Init+0x180>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800101a:	4b48      	ldr	r3, [pc, #288]	; (800113c <MX_TIM8_Init+0x180>)
 800101c:	2200      	movs	r2, #0
 800101e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001020:	4b46      	ldr	r3, [pc, #280]	; (800113c <MX_TIM8_Init+0x180>)
 8001022:	2200      	movs	r2, #0
 8001024:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001026:	4845      	ldr	r0, [pc, #276]	; (800113c <MX_TIM8_Init+0x180>)
 8001028:	f005 fa71 	bl	800650e <HAL_TIM_Base_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001032:	f7ff fd05 	bl	8000a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001036:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800103c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001040:	4619      	mov	r1, r3
 8001042:	483e      	ldr	r0, [pc, #248]	; (800113c <MX_TIM8_Init+0x180>)
 8001044:	f005 fbe0 	bl	8006808 <HAL_TIM_ConfigClockSource>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800104e:	f7ff fcf7 	bl	8000a40 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001052:	483a      	ldr	r0, [pc, #232]	; (800113c <MX_TIM8_Init+0x180>)
 8001054:	f005 fa86 	bl	8006564 <HAL_TIM_OC_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800105e:	f7ff fcef 	bl	8000a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001062:	2300      	movs	r3, #0
 8001064:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001066:	2300      	movs	r3, #0
 8001068:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800106a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800106e:	4619      	mov	r1, r3
 8001070:	4832      	ldr	r0, [pc, #200]	; (800113c <MX_TIM8_Init+0x180>)
 8001072:	f006 f895 	bl	80071a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800107c:	f7ff fce0 	bl	8000a40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001080:	2300      	movs	r3, #0
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001088:	2300      	movs	r3, #0
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800108c:	2300      	movs	r3, #0
 800108e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001090:	2300      	movs	r3, #0
 8001092:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001094:	2300      	movs	r3, #0
 8001096:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001098:	2300      	movs	r3, #0
 800109a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800109c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a0:	2200      	movs	r2, #0
 80010a2:	4619      	mov	r1, r3
 80010a4:	4825      	ldr	r0, [pc, #148]	; (800113c <MX_TIM8_Init+0x180>)
 80010a6:	f005 fab3 	bl	8006610 <HAL_TIM_OC_ConfigChannel>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80010b0:	f7ff fcc6 	bl	8000a40 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b8:	2204      	movs	r2, #4
 80010ba:	4619      	mov	r1, r3
 80010bc:	481f      	ldr	r0, [pc, #124]	; (800113c <MX_TIM8_Init+0x180>)
 80010be:	f005 faa7 	bl	8006610 <HAL_TIM_OC_ConfigChannel>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80010c8:	f7ff fcba 	bl	8000a40 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d0:	2208      	movs	r2, #8
 80010d2:	4619      	mov	r1, r3
 80010d4:	4819      	ldr	r0, [pc, #100]	; (800113c <MX_TIM8_Init+0x180>)
 80010d6:	f005 fa9b 	bl	8006610 <HAL_TIM_OC_ConfigChannel>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 80010e0:	f7ff fcae 	bl	8000a40 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e8:	220c      	movs	r2, #12
 80010ea:	4619      	mov	r1, r3
 80010ec:	4813      	ldr	r0, [pc, #76]	; (800113c <MX_TIM8_Init+0x180>)
 80010ee:	f005 fa8f 	bl	8006610 <HAL_TIM_OC_ConfigChannel>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 80010f8:	f7ff fca2 	bl	8000a40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001110:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001114:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001116:	2300      	movs	r3, #0
 8001118:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	4619      	mov	r1, r3
 800111e:	4807      	ldr	r0, [pc, #28]	; (800113c <MX_TIM8_Init+0x180>)
 8001120:	f006 f8ba 	bl	8007298 <HAL_TIMEx_ConfigBreakDeadTime>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 800112a:	f7ff fc89 	bl	8000a40 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 800112e:	4803      	ldr	r0, [pc, #12]	; (800113c <MX_TIM8_Init+0x180>)
 8001130:	f000 f894 	bl	800125c <HAL_TIM_MspPostInit>

}
 8001134:	bf00      	nop
 8001136:	3758      	adds	r7, #88	; 0x58
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000378 	.word	0x20000378
 8001140:	40010400 	.word	0x40010400

08001144 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM3)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <HAL_TIM_OC_MspInit+0x3c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d10d      	bne.n	8001172 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <HAL_TIM_OC_MspInit+0x40>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	4a09      	ldr	r2, [pc, #36]	; (8001184 <HAL_TIM_OC_MspInit+0x40>)
 8001160:	f043 0302 	orr.w	r3, r3, #2
 8001164:	6413      	str	r3, [r2, #64]	; 0x40
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <HAL_TIM_OC_MspInit+0x40>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001172:	bf00      	nop
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40000400 	.word	0x40000400
 8001184:	40023800 	.word	0x40023800

08001188 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM5)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a19      	ldr	r2, [pc, #100]	; (800120c <HAL_TIM_IC_MspInit+0x84>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d12b      	bne.n	8001202 <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	4b18      	ldr	r3, [pc, #96]	; (8001210 <HAL_TIM_IC_MspInit+0x88>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	4a17      	ldr	r2, [pc, #92]	; (8001210 <HAL_TIM_IC_MspInit+0x88>)
 80011b4:	f043 0308 	orr.w	r3, r3, #8
 80011b8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <HAL_TIM_IC_MspInit+0x88>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <HAL_TIM_IC_MspInit+0x88>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a10      	ldr	r2, [pc, #64]	; (8001210 <HAL_TIM_IC_MspInit+0x88>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <HAL_TIM_IC_MspInit+0x88>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011e2:	2303      	movs	r3, #3
 80011e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80011f2:	2302      	movs	r3, #2
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <HAL_TIM_IC_MspInit+0x8c>)
 80011fe:	f000 fe29 	bl	8001e54 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001202:	bf00      	nop
 8001204:	3728      	adds	r7, #40	; 0x28
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40000c00 	.word	0x40000c00
 8001210:	40023800 	.word	0x40023800
 8001214:	40020000 	.word	0x40020000

08001218 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0b      	ldr	r2, [pc, #44]	; (8001254 <HAL_TIM_Base_MspInit+0x3c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d10d      	bne.n	8001246 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <HAL_TIM_Base_MspInit+0x40>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	4a09      	ldr	r2, [pc, #36]	; (8001258 <HAL_TIM_Base_MspInit+0x40>)
 8001234:	f043 0302 	orr.w	r3, r3, #2
 8001238:	6453      	str	r3, [r2, #68]	; 0x44
 800123a:	4b07      	ldr	r3, [pc, #28]	; (8001258 <HAL_TIM_Base_MspInit+0x40>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001246:	bf00      	nop
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40010400 	.word	0x40010400
 8001258:	40023800 	.word	0x40023800

0800125c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	; 0x28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a33      	ldr	r2, [pc, #204]	; (8001348 <HAL_TIM_MspPostInit+0xec>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d13c      	bne.n	80012f8 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	4b32      	ldr	r3, [pc, #200]	; (800134c <HAL_TIM_MspPostInit+0xf0>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a31      	ldr	r2, [pc, #196]	; (800134c <HAL_TIM_MspPostInit+0xf0>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b2f      	ldr	r3, [pc, #188]	; (800134c <HAL_TIM_MspPostInit+0xf0>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	4b2b      	ldr	r3, [pc, #172]	; (800134c <HAL_TIM_MspPostInit+0xf0>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a2a      	ldr	r2, [pc, #168]	; (800134c <HAL_TIM_MspPostInit+0xf0>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b28      	ldr	r3, [pc, #160]	; (800134c <HAL_TIM_MspPostInit+0xf0>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012b6:	23c0      	movs	r3, #192	; 0xc0
 80012b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012c6:	2302      	movs	r3, #2
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	481f      	ldr	r0, [pc, #124]	; (8001350 <HAL_TIM_MspPostInit+0xf4>)
 80012d2:	f000 fdbf 	bl	8001e54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012d6:	2303      	movs	r3, #3
 80012d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	2300      	movs	r3, #0
 80012e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012e6:	2302      	movs	r3, #2
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	4818      	ldr	r0, [pc, #96]	; (8001354 <HAL_TIM_MspPostInit+0xf8>)
 80012f2:	f000 fdaf 	bl	8001e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80012f6:	e023      	b.n	8001340 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM8)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a16      	ldr	r2, [pc, #88]	; (8001358 <HAL_TIM_MspPostInit+0xfc>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d11e      	bne.n	8001340 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <HAL_TIM_MspPostInit+0xf0>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a10      	ldr	r2, [pc, #64]	; (800134c <HAL_TIM_MspPostInit+0xf0>)
 800130c:	f043 0304 	orr.w	r3, r3, #4
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <HAL_TIM_MspPostInit+0xf0>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0304 	and.w	r3, r3, #4
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800131e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001330:	2303      	movs	r3, #3
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	4619      	mov	r1, r3
 800133a:	4808      	ldr	r0, [pc, #32]	; (800135c <HAL_TIM_MspPostInit+0x100>)
 800133c:	f000 fd8a 	bl	8001e54 <HAL_GPIO_Init>
}
 8001340:	bf00      	nop
 8001342:	3728      	adds	r7, #40	; 0x28
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40000400 	.word	0x40000400
 800134c:	40023800 	.word	0x40023800
 8001350:	40020000 	.word	0x40020000
 8001354:	40020400 	.word	0x40020400
 8001358:	40010400 	.word	0x40010400
 800135c:	40020800 	.word	0x40020800

08001360 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001360:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001398 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001364:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001366:	e003      	b.n	8001370 <LoopCopyDataInit>

08001368 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800136a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800136c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800136e:	3104      	adds	r1, #4

08001370 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001370:	480b      	ldr	r0, [pc, #44]	; (80013a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001374:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001376:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001378:	d3f6      	bcc.n	8001368 <CopyDataInit>
  ldr  r2, =_sbss
 800137a:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800137c:	e002      	b.n	8001384 <LoopFillZerobss>

0800137e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800137e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001380:	f842 3b04 	str.w	r3, [r2], #4

08001384 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001386:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001388:	d3f9      	bcc.n	800137e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800138a:	f7ff fd29 	bl	8000de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800138e:	f009 fbfb 	bl	800ab88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001392:	f7ff faa5 	bl	80008e0 <main>
  bx  lr    
 8001396:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001398:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800139c:	0800b4e8 	.word	0x0800b4e8
  ldr  r0, =_sdata
 80013a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80013a4:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 80013a8:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 80013ac:	20001d18 	.word	0x20001d18

080013b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b0:	e7fe      	b.n	80013b0 <ADC_IRQHandler>
	...

080013b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013b8:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <HAL_Init+0x40>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0d      	ldr	r2, [pc, #52]	; (80013f4 <HAL_Init+0x40>)
 80013be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <HAL_Init+0x40>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <HAL_Init+0x40>)
 80013ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d0:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <HAL_Init+0x40>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a07      	ldr	r2, [pc, #28]	; (80013f4 <HAL_Init+0x40>)
 80013d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013dc:	2003      	movs	r0, #3
 80013de:	f000 f94d 	bl	800167c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e2:	2000      	movs	r0, #0
 80013e4:	f000 f808 	bl	80013f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e8:	f7ff fc46 	bl	8000c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023c00 	.word	0x40023c00

080013f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_InitTick+0x54>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <HAL_InitTick+0x58>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001412:	fbb2 f3f3 	udiv	r3, r2, r3
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f965 	bl	80016e6 <HAL_SYSTICK_Config>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e00e      	b.n	8001444 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b0f      	cmp	r3, #15
 800142a:	d80a      	bhi.n	8001442 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800142c:	2200      	movs	r2, #0
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f000 f92d 	bl	8001692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001438:	4a06      	ldr	r2, [pc, #24]	; (8001454 <HAL_InitTick+0x5c>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	e000      	b.n	8001444 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000004 	.word	0x20000004
 8001450:	2000000c 	.word	0x2000000c
 8001454:	20000008 	.word	0x20000008

08001458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_IncTick+0x20>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_IncTick+0x24>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4413      	add	r3, r2
 8001468:	4a04      	ldr	r2, [pc, #16]	; (800147c <HAL_IncTick+0x24>)
 800146a:	6013      	str	r3, [r2, #0]
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	2000000c 	.word	0x2000000c
 800147c:	20000438 	.word	0x20000438

08001480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return uwTick;
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <HAL_GetTick+0x14>)
 8001486:	681b      	ldr	r3, [r3, #0]
}
 8001488:	4618      	mov	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20000438 	.word	0x20000438

08001498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a0:	f7ff ffee 	bl	8001480 <HAL_GetTick>
 80014a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b0:	d005      	beq.n	80014be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_Delay+0x40>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	461a      	mov	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4413      	add	r3, r2
 80014bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014be:	bf00      	nop
 80014c0:	f7ff ffde 	bl	8001480 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d8f7      	bhi.n	80014c0 <HAL_Delay+0x28>
  {
  }
}
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	2000000c 	.word	0x2000000c

080014dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f8:	4013      	ands	r3, r2
 80014fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001504:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800150e:	4a04      	ldr	r2, [pc, #16]	; (8001520 <__NVIC_SetPriorityGrouping+0x44>)
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	60d3      	str	r3, [r2, #12]
}
 8001514:	bf00      	nop
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <__NVIC_GetPriorityGrouping+0x18>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	0a1b      	lsrs	r3, r3, #8
 800152e:	f003 0307 	and.w	r3, r3, #7
}
 8001532:	4618      	mov	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	2b00      	cmp	r3, #0
 8001550:	db0b      	blt.n	800156a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	f003 021f 	and.w	r2, r3, #31
 8001558:	4907      	ldr	r1, [pc, #28]	; (8001578 <__NVIC_EnableIRQ+0x38>)
 800155a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155e:	095b      	lsrs	r3, r3, #5
 8001560:	2001      	movs	r0, #1
 8001562:	fa00 f202 	lsl.w	r2, r0, r2
 8001566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000e100 	.word	0xe000e100

0800157c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	2b00      	cmp	r3, #0
 800158e:	db0a      	blt.n	80015a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	b2da      	uxtb	r2, r3
 8001594:	490c      	ldr	r1, [pc, #48]	; (80015c8 <__NVIC_SetPriority+0x4c>)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	0112      	lsls	r2, r2, #4
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	440b      	add	r3, r1
 80015a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a4:	e00a      	b.n	80015bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4908      	ldr	r1, [pc, #32]	; (80015cc <__NVIC_SetPriority+0x50>)
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	3b04      	subs	r3, #4
 80015b4:	0112      	lsls	r2, r2, #4
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	440b      	add	r3, r1
 80015ba:	761a      	strb	r2, [r3, #24]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000e100 	.word	0xe000e100
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b089      	sub	sp, #36	; 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f1c3 0307 	rsb	r3, r3, #7
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	bf28      	it	cs
 80015ee:	2304      	movcs	r3, #4
 80015f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3304      	adds	r3, #4
 80015f6:	2b06      	cmp	r3, #6
 80015f8:	d902      	bls.n	8001600 <NVIC_EncodePriority+0x30>
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3b03      	subs	r3, #3
 80015fe:	e000      	b.n	8001602 <NVIC_EncodePriority+0x32>
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	f04f 32ff 	mov.w	r2, #4294967295
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43da      	mvns	r2, r3
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	401a      	ands	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001618:	f04f 31ff 	mov.w	r1, #4294967295
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	43d9      	mvns	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	4313      	orrs	r3, r2
         );
}
 800162a:	4618      	mov	r0, r3
 800162c:	3724      	adds	r7, #36	; 0x24
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3b01      	subs	r3, #1
 8001644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001648:	d301      	bcc.n	800164e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800164a:	2301      	movs	r3, #1
 800164c:	e00f      	b.n	800166e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164e:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <SysTick_Config+0x40>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001656:	210f      	movs	r1, #15
 8001658:	f04f 30ff 	mov.w	r0, #4294967295
 800165c:	f7ff ff8e 	bl	800157c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <SysTick_Config+0x40>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001666:	4b04      	ldr	r3, [pc, #16]	; (8001678 <SysTick_Config+0x40>)
 8001668:	2207      	movs	r2, #7
 800166a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	e000e010 	.word	0xe000e010

0800167c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ff29 	bl	80014dc <__NVIC_SetPriorityGrouping>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001692:	b580      	push	{r7, lr}
 8001694:	b086      	sub	sp, #24
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
 800169e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a4:	f7ff ff3e 	bl	8001524 <__NVIC_GetPriorityGrouping>
 80016a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	6978      	ldr	r0, [r7, #20]
 80016b0:	f7ff ff8e 	bl	80015d0 <NVIC_EncodePriority>
 80016b4:	4602      	mov	r2, r0
 80016b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff5d 	bl	800157c <__NVIC_SetPriority>
}
 80016c2:	bf00      	nop
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	4603      	mov	r3, r0
 80016d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff31 	bl	8001540 <__NVIC_EnableIRQ>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff ffa2 	bl	8001638 <SysTick_Config>
 80016f4:	4603      	mov	r3, r0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800170c:	f7ff feb8 	bl	8001480 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e099      	b.n	8001850 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2202      	movs	r2, #2
 8001728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0201 	bic.w	r2, r2, #1
 800173a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800173c:	e00f      	b.n	800175e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800173e:	f7ff fe9f 	bl	8001480 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b05      	cmp	r3, #5
 800174a:	d908      	bls.n	800175e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2220      	movs	r2, #32
 8001750:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2203      	movs	r2, #3
 8001756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e078      	b.n	8001850 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1e8      	bne.n	800173e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	4b38      	ldr	r3, [pc, #224]	; (8001858 <HAL_DMA_Init+0x158>)
 8001778:	4013      	ands	r3, r2
 800177a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800178a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001796:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	2b04      	cmp	r3, #4
 80017b6:	d107      	bne.n	80017c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c0:	4313      	orrs	r3, r2
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	f023 0307 	bic.w	r3, r3, #7
 80017de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	d117      	bne.n	8001822 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00e      	beq.n	8001822 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 faab 	bl	8001d60 <DMA_CheckFifoParam>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d008      	beq.n	8001822 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2240      	movs	r2, #64	; 0x40
 8001814:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800181e:	2301      	movs	r3, #1
 8001820:	e016      	b.n	8001850 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 fa62 	bl	8001cf4 <DMA_CalcBaseAndBitshift>
 8001830:	4603      	mov	r3, r0
 8001832:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001838:	223f      	movs	r2, #63	; 0x3f
 800183a:	409a      	lsls	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	f010803f 	.word	0xf010803f

0800185c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
 8001868:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800186a:	2300      	movs	r3, #0
 800186c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001872:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800187a:	2b01      	cmp	r3, #1
 800187c:	d101      	bne.n	8001882 <HAL_DMA_Start_IT+0x26>
 800187e:	2302      	movs	r3, #2
 8001880:	e040      	b.n	8001904 <HAL_DMA_Start_IT+0xa8>
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b01      	cmp	r3, #1
 8001894:	d12f      	bne.n	80018f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2202      	movs	r2, #2
 800189a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	68b9      	ldr	r1, [r7, #8]
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f000 f9f4 	bl	8001c98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b4:	223f      	movs	r2, #63	; 0x3f
 80018b6:	409a      	lsls	r2, r3
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f042 0216 	orr.w	r2, r2, #22
 80018ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d007      	beq.n	80018e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 0208 	orr.w	r2, r2, #8
 80018e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 0201 	orr.w	r2, r2, #1
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	e005      	b.n	8001902 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80018fe:	2302      	movs	r3, #2
 8001900:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001902:	7dfb      	ldrb	r3, [r7, #23]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d004      	beq.n	800192a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2280      	movs	r2, #128	; 0x80
 8001924:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e00c      	b.n	8001944 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2205      	movs	r2, #5
 800192e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 0201 	bic.w	r2, r2, #1
 8001940:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800195c:	4b92      	ldr	r3, [pc, #584]	; (8001ba8 <HAL_DMA_IRQHandler+0x258>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a92      	ldr	r2, [pc, #584]	; (8001bac <HAL_DMA_IRQHandler+0x25c>)
 8001962:	fba2 2303 	umull	r2, r3, r2, r3
 8001966:	0a9b      	lsrs	r3, r3, #10
 8001968:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197a:	2208      	movs	r2, #8
 800197c:	409a      	lsls	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4013      	ands	r3, r2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d01a      	beq.n	80019bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b00      	cmp	r3, #0
 8001992:	d013      	beq.n	80019bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 0204 	bic.w	r2, r2, #4
 80019a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a8:	2208      	movs	r2, #8
 80019aa:	409a      	lsls	r2, r3
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b4:	f043 0201 	orr.w	r2, r3, #1
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c0:	2201      	movs	r2, #1
 80019c2:	409a      	lsls	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4013      	ands	r3, r2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d012      	beq.n	80019f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00b      	beq.n	80019f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019de:	2201      	movs	r2, #1
 80019e0:	409a      	lsls	r2, r3
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ea:	f043 0202 	orr.w	r2, r3, #2
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f6:	2204      	movs	r2, #4
 80019f8:	409a      	lsls	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4013      	ands	r3, r2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d012      	beq.n	8001a28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00b      	beq.n	8001a28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a14:	2204      	movs	r2, #4
 8001a16:	409a      	lsls	r2, r3
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a20:	f043 0204 	orr.w	r2, r3, #4
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2c:	2210      	movs	r2, #16
 8001a2e:	409a      	lsls	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4013      	ands	r3, r2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d043      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d03c      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4a:	2210      	movs	r2, #16
 8001a4c:	409a      	lsls	r2, r3
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d018      	beq.n	8001a92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d108      	bne.n	8001a80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d024      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	4798      	blx	r3
 8001a7e:	e01f      	b.n	8001ac0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d01b      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	4798      	blx	r3
 8001a90:	e016      	b.n	8001ac0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d107      	bne.n	8001ab0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 0208 	bic.w	r2, r2, #8
 8001aae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4013      	ands	r3, r2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 808e 	beq.w	8001bee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0310 	and.w	r3, r3, #16
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 8086 	beq.w	8001bee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	409a      	lsls	r2, r3
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b05      	cmp	r3, #5
 8001af8:	d136      	bne.n	8001b68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 0216 	bic.w	r2, r2, #22
 8001b08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	695a      	ldr	r2, [r3, #20]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d103      	bne.n	8001b2a <HAL_DMA_IRQHandler+0x1da>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d007      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 0208 	bic.w	r2, r2, #8
 8001b38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b3e:	223f      	movs	r2, #63	; 0x3f
 8001b40:	409a      	lsls	r2, r3
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d07d      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	4798      	blx	r3
        }
        return;
 8001b66:	e078      	b.n	8001c5a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d01c      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d108      	bne.n	8001b96 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d030      	beq.n	8001bee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	4798      	blx	r3
 8001b94:	e02b      	b.n	8001bee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d027      	beq.n	8001bee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	4798      	blx	r3
 8001ba6:	e022      	b.n	8001bee <HAL_DMA_IRQHandler+0x29e>
 8001ba8:	20000004 	.word	0x20000004
 8001bac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10f      	bne.n	8001bde <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0210 	bic.w	r2, r2, #16
 8001bcc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d032      	beq.n	8001c5c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d022      	beq.n	8001c48 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2205      	movs	r2, #5
 8001c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0201 	bic.w	r2, r2, #1
 8001c18:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d307      	bcc.n	8001c36 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1f2      	bne.n	8001c1a <HAL_DMA_IRQHandler+0x2ca>
 8001c34:	e000      	b.n	8001c38 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001c36:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	4798      	blx	r3
 8001c58:	e000      	b.n	8001c5c <HAL_DMA_IRQHandler+0x30c>
        return;
 8001c5a:	bf00      	nop
    }
  }
}
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop

08001c64 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c72:	b2db      	uxtb	r3, r3
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
 8001ca4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cb4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2b40      	cmp	r3, #64	; 0x40
 8001cc4:	d108      	bne.n	8001cd8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001cd6:	e007      	b.n	8001ce8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	60da      	str	r2, [r3, #12]
}
 8001ce8:	bf00      	nop
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	3b10      	subs	r3, #16
 8001d04:	4a14      	ldr	r2, [pc, #80]	; (8001d58 <DMA_CalcBaseAndBitshift+0x64>)
 8001d06:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0a:	091b      	lsrs	r3, r3, #4
 8001d0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d0e:	4a13      	ldr	r2, [pc, #76]	; (8001d5c <DMA_CalcBaseAndBitshift+0x68>)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4413      	add	r3, r2
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	461a      	mov	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2b03      	cmp	r3, #3
 8001d20:	d909      	bls.n	8001d36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d2a:	f023 0303 	bic.w	r3, r3, #3
 8001d2e:	1d1a      	adds	r2, r3, #4
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	659a      	str	r2, [r3, #88]	; 0x58
 8001d34:	e007      	b.n	8001d46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d3e:	f023 0303 	bic.w	r3, r3, #3
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	aaaaaaab 	.word	0xaaaaaaab
 8001d5c:	0800b49c 	.word	0x0800b49c

08001d60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d11f      	bne.n	8001dba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d855      	bhi.n	8001e2c <DMA_CheckFifoParam+0xcc>
 8001d80:	a201      	add	r2, pc, #4	; (adr r2, 8001d88 <DMA_CheckFifoParam+0x28>)
 8001d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d86:	bf00      	nop
 8001d88:	08001d99 	.word	0x08001d99
 8001d8c:	08001dab 	.word	0x08001dab
 8001d90:	08001d99 	.word	0x08001d99
 8001d94:	08001e2d 	.word	0x08001e2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d045      	beq.n	8001e30 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001da8:	e042      	b.n	8001e30 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001db2:	d13f      	bne.n	8001e34 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001db8:	e03c      	b.n	8001e34 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dc2:	d121      	bne.n	8001e08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	d836      	bhi.n	8001e38 <DMA_CheckFifoParam+0xd8>
 8001dca:	a201      	add	r2, pc, #4	; (adr r2, 8001dd0 <DMA_CheckFifoParam+0x70>)
 8001dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd0:	08001de1 	.word	0x08001de1
 8001dd4:	08001de7 	.word	0x08001de7
 8001dd8:	08001de1 	.word	0x08001de1
 8001ddc:	08001df9 	.word	0x08001df9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	73fb      	strb	r3, [r7, #15]
      break;
 8001de4:	e02f      	b.n	8001e46 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d024      	beq.n	8001e3c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001df6:	e021      	b.n	8001e3c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e00:	d11e      	bne.n	8001e40 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e06:	e01b      	b.n	8001e40 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d902      	bls.n	8001e14 <DMA_CheckFifoParam+0xb4>
 8001e0e:	2b03      	cmp	r3, #3
 8001e10:	d003      	beq.n	8001e1a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e12:	e018      	b.n	8001e46 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	73fb      	strb	r3, [r7, #15]
      break;
 8001e18:	e015      	b.n	8001e46 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00e      	beq.n	8001e44 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	73fb      	strb	r3, [r7, #15]
      break;
 8001e2a:	e00b      	b.n	8001e44 <DMA_CheckFifoParam+0xe4>
      break;
 8001e2c:	bf00      	nop
 8001e2e:	e00a      	b.n	8001e46 <DMA_CheckFifoParam+0xe6>
      break;
 8001e30:	bf00      	nop
 8001e32:	e008      	b.n	8001e46 <DMA_CheckFifoParam+0xe6>
      break;
 8001e34:	bf00      	nop
 8001e36:	e006      	b.n	8001e46 <DMA_CheckFifoParam+0xe6>
      break;
 8001e38:	bf00      	nop
 8001e3a:	e004      	b.n	8001e46 <DMA_CheckFifoParam+0xe6>
      break;
 8001e3c:	bf00      	nop
 8001e3e:	e002      	b.n	8001e46 <DMA_CheckFifoParam+0xe6>
      break;   
 8001e40:	bf00      	nop
 8001e42:	e000      	b.n	8001e46 <DMA_CheckFifoParam+0xe6>
      break;
 8001e44:	bf00      	nop
    }
  } 
  
  return status; 
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b089      	sub	sp, #36	; 0x24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
 8001e6e:	e16b      	b.n	8002148 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e70:	2201      	movs	r2, #1
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	f040 815a 	bne.w	8002142 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d00b      	beq.n	8001eae <HAL_GPIO_Init+0x5a>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d007      	beq.n	8001eae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ea2:	2b11      	cmp	r3, #17
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b12      	cmp	r3, #18
 8001eac:	d130      	bne.n	8001f10 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	2203      	movs	r2, #3
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	091b      	lsrs	r3, r3, #4
 8001efa:	f003 0201 	and.w	r2, r3, #1
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d003      	beq.n	8001f50 <HAL_GPIO_Init+0xfc>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b12      	cmp	r3, #18
 8001f4e:	d123      	bne.n	8001f98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	08da      	lsrs	r2, r3, #3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3208      	adds	r2, #8
 8001f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	220f      	movs	r2, #15
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	691a      	ldr	r2, [r3, #16]
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	08da      	lsrs	r2, r3, #3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3208      	adds	r2, #8
 8001f92:	69b9      	ldr	r1, [r7, #24]
 8001f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 0203 	and.w	r2, r3, #3
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 80b4 	beq.w	8002142 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	4b5f      	ldr	r3, [pc, #380]	; (800215c <HAL_GPIO_Init+0x308>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	4a5e      	ldr	r2, [pc, #376]	; (800215c <HAL_GPIO_Init+0x308>)
 8001fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fea:	4b5c      	ldr	r3, [pc, #368]	; (800215c <HAL_GPIO_Init+0x308>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ff6:	4a5a      	ldr	r2, [pc, #360]	; (8002160 <HAL_GPIO_Init+0x30c>)
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	089b      	lsrs	r3, r3, #2
 8001ffc:	3302      	adds	r3, #2
 8001ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	220f      	movs	r2, #15
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4013      	ands	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a51      	ldr	r2, [pc, #324]	; (8002164 <HAL_GPIO_Init+0x310>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d02b      	beq.n	800207a <HAL_GPIO_Init+0x226>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a50      	ldr	r2, [pc, #320]	; (8002168 <HAL_GPIO_Init+0x314>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d025      	beq.n	8002076 <HAL_GPIO_Init+0x222>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a4f      	ldr	r2, [pc, #316]	; (800216c <HAL_GPIO_Init+0x318>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d01f      	beq.n	8002072 <HAL_GPIO_Init+0x21e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a4e      	ldr	r2, [pc, #312]	; (8002170 <HAL_GPIO_Init+0x31c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d019      	beq.n	800206e <HAL_GPIO_Init+0x21a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a4d      	ldr	r2, [pc, #308]	; (8002174 <HAL_GPIO_Init+0x320>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d013      	beq.n	800206a <HAL_GPIO_Init+0x216>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a4c      	ldr	r2, [pc, #304]	; (8002178 <HAL_GPIO_Init+0x324>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d00d      	beq.n	8002066 <HAL_GPIO_Init+0x212>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a4b      	ldr	r2, [pc, #300]	; (800217c <HAL_GPIO_Init+0x328>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d007      	beq.n	8002062 <HAL_GPIO_Init+0x20e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a4a      	ldr	r2, [pc, #296]	; (8002180 <HAL_GPIO_Init+0x32c>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d101      	bne.n	800205e <HAL_GPIO_Init+0x20a>
 800205a:	2307      	movs	r3, #7
 800205c:	e00e      	b.n	800207c <HAL_GPIO_Init+0x228>
 800205e:	2308      	movs	r3, #8
 8002060:	e00c      	b.n	800207c <HAL_GPIO_Init+0x228>
 8002062:	2306      	movs	r3, #6
 8002064:	e00a      	b.n	800207c <HAL_GPIO_Init+0x228>
 8002066:	2305      	movs	r3, #5
 8002068:	e008      	b.n	800207c <HAL_GPIO_Init+0x228>
 800206a:	2304      	movs	r3, #4
 800206c:	e006      	b.n	800207c <HAL_GPIO_Init+0x228>
 800206e:	2303      	movs	r3, #3
 8002070:	e004      	b.n	800207c <HAL_GPIO_Init+0x228>
 8002072:	2302      	movs	r3, #2
 8002074:	e002      	b.n	800207c <HAL_GPIO_Init+0x228>
 8002076:	2301      	movs	r3, #1
 8002078:	e000      	b.n	800207c <HAL_GPIO_Init+0x228>
 800207a:	2300      	movs	r3, #0
 800207c:	69fa      	ldr	r2, [r7, #28]
 800207e:	f002 0203 	and.w	r2, r2, #3
 8002082:	0092      	lsls	r2, r2, #2
 8002084:	4093      	lsls	r3, r2
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800208c:	4934      	ldr	r1, [pc, #208]	; (8002160 <HAL_GPIO_Init+0x30c>)
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	089b      	lsrs	r3, r3, #2
 8002092:	3302      	adds	r3, #2
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800209a:	4b3a      	ldr	r3, [pc, #232]	; (8002184 <HAL_GPIO_Init+0x330>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020be:	4a31      	ldr	r2, [pc, #196]	; (8002184 <HAL_GPIO_Init+0x330>)
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020c4:	4b2f      	ldr	r3, [pc, #188]	; (8002184 <HAL_GPIO_Init+0x330>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4013      	ands	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020e8:	4a26      	ldr	r2, [pc, #152]	; (8002184 <HAL_GPIO_Init+0x330>)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ee:	4b25      	ldr	r3, [pc, #148]	; (8002184 <HAL_GPIO_Init+0x330>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4013      	ands	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002112:	4a1c      	ldr	r2, [pc, #112]	; (8002184 <HAL_GPIO_Init+0x330>)
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002118:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <HAL_GPIO_Init+0x330>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800213c:	4a11      	ldr	r2, [pc, #68]	; (8002184 <HAL_GPIO_Init+0x330>)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3301      	adds	r3, #1
 8002146:	61fb      	str	r3, [r7, #28]
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	2b0f      	cmp	r3, #15
 800214c:	f67f ae90 	bls.w	8001e70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002150:	bf00      	nop
 8002152:	3724      	adds	r7, #36	; 0x24
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	40023800 	.word	0x40023800
 8002160:	40013800 	.word	0x40013800
 8002164:	40020000 	.word	0x40020000
 8002168:	40020400 	.word	0x40020400
 800216c:	40020800 	.word	0x40020800
 8002170:	40020c00 	.word	0x40020c00
 8002174:	40021000 	.word	0x40021000
 8002178:	40021400 	.word	0x40021400
 800217c:	40021800 	.word	0x40021800
 8002180:	40021c00 	.word	0x40021c00
 8002184:	40013c00 	.word	0x40013c00

08002188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	807b      	strh	r3, [r7, #2]
 8002194:	4613      	mov	r3, r2
 8002196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002198:	787b      	ldrb	r3, [r7, #1]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800219e:	887a      	ldrh	r2, [r7, #2]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021a4:	e003      	b.n	80021ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021a6:	887b      	ldrh	r3, [r7, #2]
 80021a8:	041a      	lsls	r2, r3, #16
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	619a      	str	r2, [r3, #24]
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e11f      	b.n	800240e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d106      	bne.n	80021e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7fe fabe 	bl	8000764 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2224      	movs	r2, #36	; 0x24
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0201 	bic.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800220e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800221e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002220:	f003 ff9a 	bl	8006158 <HAL_RCC_GetPCLK1Freq>
 8002224:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4a7b      	ldr	r2, [pc, #492]	; (8002418 <HAL_I2C_Init+0x25c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d807      	bhi.n	8002240 <HAL_I2C_Init+0x84>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4a7a      	ldr	r2, [pc, #488]	; (800241c <HAL_I2C_Init+0x260>)
 8002234:	4293      	cmp	r3, r2
 8002236:	bf94      	ite	ls
 8002238:	2301      	movls	r3, #1
 800223a:	2300      	movhi	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	e006      	b.n	800224e <HAL_I2C_Init+0x92>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4a77      	ldr	r2, [pc, #476]	; (8002420 <HAL_I2C_Init+0x264>)
 8002244:	4293      	cmp	r3, r2
 8002246:	bf94      	ite	ls
 8002248:	2301      	movls	r3, #1
 800224a:	2300      	movhi	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e0db      	b.n	800240e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4a72      	ldr	r2, [pc, #456]	; (8002424 <HAL_I2C_Init+0x268>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	0c9b      	lsrs	r3, r3, #18
 8002260:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	430a      	orrs	r2, r1
 8002274:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	4a64      	ldr	r2, [pc, #400]	; (8002418 <HAL_I2C_Init+0x25c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d802      	bhi.n	8002290 <HAL_I2C_Init+0xd4>
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	3301      	adds	r3, #1
 800228e:	e009      	b.n	80022a4 <HAL_I2C_Init+0xe8>
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002296:	fb02 f303 	mul.w	r3, r2, r3
 800229a:	4a63      	ldr	r2, [pc, #396]	; (8002428 <HAL_I2C_Init+0x26c>)
 800229c:	fba2 2303 	umull	r2, r3, r2, r3
 80022a0:	099b      	lsrs	r3, r3, #6
 80022a2:	3301      	adds	r3, #1
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	430b      	orrs	r3, r1
 80022aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	4956      	ldr	r1, [pc, #344]	; (8002418 <HAL_I2C_Init+0x25c>)
 80022c0:	428b      	cmp	r3, r1
 80022c2:	d80d      	bhi.n	80022e0 <HAL_I2C_Init+0x124>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	1e59      	subs	r1, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80022d2:	3301      	adds	r3, #1
 80022d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d8:	2b04      	cmp	r3, #4
 80022da:	bf38      	it	cc
 80022dc:	2304      	movcc	r3, #4
 80022de:	e04f      	b.n	8002380 <HAL_I2C_Init+0x1c4>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d111      	bne.n	800230c <HAL_I2C_Init+0x150>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	1e58      	subs	r0, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6859      	ldr	r1, [r3, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	440b      	add	r3, r1
 80022f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022fa:	3301      	adds	r3, #1
 80022fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002300:	2b00      	cmp	r3, #0
 8002302:	bf0c      	ite	eq
 8002304:	2301      	moveq	r3, #1
 8002306:	2300      	movne	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	e012      	b.n	8002332 <HAL_I2C_Init+0x176>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	1e58      	subs	r0, r3, #1
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6859      	ldr	r1, [r3, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	0099      	lsls	r1, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002322:	3301      	adds	r3, #1
 8002324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002328:	2b00      	cmp	r3, #0
 800232a:	bf0c      	ite	eq
 800232c:	2301      	moveq	r3, #1
 800232e:	2300      	movne	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_I2C_Init+0x17e>
 8002336:	2301      	movs	r3, #1
 8002338:	e022      	b.n	8002380 <HAL_I2C_Init+0x1c4>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10e      	bne.n	8002360 <HAL_I2C_Init+0x1a4>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	1e58      	subs	r0, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6859      	ldr	r1, [r3, #4]
 800234a:	460b      	mov	r3, r1
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	440b      	add	r3, r1
 8002350:	fbb0 f3f3 	udiv	r3, r0, r3
 8002354:	3301      	adds	r3, #1
 8002356:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800235a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800235e:	e00f      	b.n	8002380 <HAL_I2C_Init+0x1c4>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1e58      	subs	r0, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6859      	ldr	r1, [r3, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	0099      	lsls	r1, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	fbb0 f3f3 	udiv	r3, r0, r3
 8002376:	3301      	adds	r3, #1
 8002378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800237c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	6809      	ldr	r1, [r1, #0]
 8002384:	4313      	orrs	r3, r2
 8002386:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69da      	ldr	r2, [r3, #28]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6911      	ldr	r1, [r2, #16]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	68d2      	ldr	r2, [r2, #12]
 80023ba:	4311      	orrs	r1, r2
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	430b      	orrs	r3, r1
 80023c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695a      	ldr	r2, [r3, #20]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f042 0201 	orr.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2220      	movs	r2, #32
 80023fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	000186a0 	.word	0x000186a0
 800241c:	001e847f 	.word	0x001e847f
 8002420:	003d08ff 	.word	0x003d08ff
 8002424:	431bde83 	.word	0x431bde83
 8002428:	10624dd3 	.word	0x10624dd3

0800242c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b088      	sub	sp, #32
 8002430:	af02      	add	r7, sp, #8
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	461a      	mov	r2, r3
 8002438:	460b      	mov	r3, r1
 800243a:	817b      	strh	r3, [r7, #10]
 800243c:	4613      	mov	r3, r2
 800243e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002440:	f7ff f81e 	bl	8001480 <HAL_GetTick>
 8002444:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b20      	cmp	r3, #32
 8002450:	f040 80e0 	bne.w	8002614 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	2319      	movs	r3, #25
 800245a:	2201      	movs	r2, #1
 800245c:	4970      	ldr	r1, [pc, #448]	; (8002620 <HAL_I2C_Master_Transmit+0x1f4>)
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f001 ff1d 	bl	800429e <I2C_WaitOnFlagUntilTimeout>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800246a:	2302      	movs	r3, #2
 800246c:	e0d3      	b.n	8002616 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <HAL_I2C_Master_Transmit+0x50>
 8002478:	2302      	movs	r3, #2
 800247a:	e0cc      	b.n	8002616 <HAL_I2C_Master_Transmit+0x1ea>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b01      	cmp	r3, #1
 8002490:	d007      	beq.n	80024a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f042 0201 	orr.w	r2, r2, #1
 80024a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2221      	movs	r2, #33	; 0x21
 80024b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2210      	movs	r2, #16
 80024be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	893a      	ldrh	r2, [r7, #8]
 80024d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d8:	b29a      	uxth	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4a50      	ldr	r2, [pc, #320]	; (8002624 <HAL_I2C_Master_Transmit+0x1f8>)
 80024e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024e4:	8979      	ldrh	r1, [r7, #10]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	6a3a      	ldr	r2, [r7, #32]
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f001 fcc4 	bl	8003e78 <I2C_MasterRequestWrite>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e08d      	b.n	8002616 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002510:	e066      	b.n	80025e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	6a39      	ldr	r1, [r7, #32]
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f001 ff97 	bl	800444a <I2C_WaitOnTXEFlagUntilTimeout>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00d      	beq.n	800253e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	2b04      	cmp	r3, #4
 8002528:	d107      	bne.n	800253a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002538:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e06b      	b.n	8002616 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	781a      	ldrb	r2, [r3, #0]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	1c5a      	adds	r2, r3, #1
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002558:	b29b      	uxth	r3, r3
 800255a:	3b01      	subs	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002566:	3b01      	subs	r3, #1
 8002568:	b29a      	uxth	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b04      	cmp	r3, #4
 800257a:	d11b      	bne.n	80025b4 <HAL_I2C_Master_Transmit+0x188>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002580:	2b00      	cmp	r3, #0
 8002582:	d017      	beq.n	80025b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	781a      	ldrb	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259e:	b29b      	uxth	r3, r3
 80025a0:	3b01      	subs	r3, #1
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ac:	3b01      	subs	r3, #1
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	6a39      	ldr	r1, [r7, #32]
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f001 ff87 	bl	80044cc <I2C_WaitOnBTFFlagUntilTimeout>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00d      	beq.n	80025e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d107      	bne.n	80025dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e01a      	b.n	8002616 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d194      	bne.n	8002512 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2220      	movs	r2, #32
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	e000      	b.n	8002616 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002614:	2302      	movs	r3, #2
  }
}
 8002616:	4618      	mov	r0, r3
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	00100002 	.word	0x00100002
 8002624:	ffff0000 	.word	0xffff0000

08002628 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	607a      	str	r2, [r7, #4]
 8002632:	461a      	mov	r2, r3
 8002634:	460b      	mov	r3, r1
 8002636:	817b      	strh	r3, [r7, #10]
 8002638:	4613      	mov	r3, r2
 800263a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b20      	cmp	r3, #32
 800264a:	f040 80f4 	bne.w	8002836 <HAL_I2C_Master_Transmit_DMA+0x20e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800264e:	4b7c      	ldr	r3, [pc, #496]	; (8002840 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	08db      	lsrs	r3, r3, #3
 8002654:	4a7b      	ldr	r2, [pc, #492]	; (8002844 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8002656:	fba2 2303 	umull	r2, r3, r2, r3
 800265a:	0a1a      	lsrs	r2, r3, #8
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	009a      	lsls	r2, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	3b01      	subs	r3, #1
 800266c:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d116      	bne.n	80026a2 <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2220      	movs	r2, #32
 800267e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f043 0220 	orr.w	r2, r3, #32
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e0ca      	b.n	8002838 <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d0db      	beq.n	8002668 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_I2C_Master_Transmit_DMA+0x96>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e0bc      	b.n	8002838 <HAL_I2C_Master_Transmit_DMA+0x210>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d007      	beq.n	80026e4 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0201 	orr.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2221      	movs	r2, #33	; 0x21
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2210      	movs	r2, #16
 8002700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	893a      	ldrh	r2, [r7, #8]
 8002714:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271a:	b29a      	uxth	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4a49      	ldr	r2, [pc, #292]	; (8002848 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8002724:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002726:	897a      	ldrh	r2, [r7, #10]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002730:	2b00      	cmp	r3, #0
 8002732:	d062      	beq.n	80027fa <HAL_I2C_Master_Transmit_DMA+0x1d2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002738:	4a44      	ldr	r2, [pc, #272]	; (800284c <HAL_I2C_Master_Transmit_DMA+0x224>)
 800273a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002740:	4a43      	ldr	r2, [pc, #268]	; (8002850 <HAL_I2C_Master_Transmit_DMA+0x228>)
 8002742:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002748:	2200      	movs	r2, #0
 800274a:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002750:	2200      	movs	r2, #0
 8002752:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002758:	2200      	movs	r2, #0
 800275a:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002760:	2200      	movs	r2, #0
 8002762:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	4619      	mov	r1, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	3310      	adds	r3, #16
 8002774:	461a      	mov	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277a:	f7ff f86f 	bl	800185c <HAL_DMA_Start_IT>
 800277e:	4603      	mov	r3, r0
 8002780:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 8002782:	7dfb      	ldrb	r3, [r7, #23]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d124      	bne.n	80027d2 <HAL_I2C_Master_Transmit_DMA+0x1aa>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002796:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027a6:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80027be:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027ce:	605a      	str	r2, [r3, #4]
 80027d0:	e02f      	b.n	8002832 <HAL_I2C_Master_Transmit_DMA+0x20a>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2220      	movs	r2, #32
 80027d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	f043 0210 	orr.w	r2, r3, #16
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e01e      	b.n	8002838 <HAL_I2C_Master_Transmit_DMA+0x210>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002808:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002818:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002830:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	e000      	b.n	8002838 <HAL_I2C_Master_Transmit_DMA+0x210>
  }
  else
  {
    return HAL_BUSY;
 8002836:	2302      	movs	r3, #2
  }
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	20000004 	.word	0x20000004
 8002844:	14f8b589 	.word	0x14f8b589
 8002848:	ffff0000 	.word	0xffff0000
 800284c:	08003f7d 	.word	0x08003f7d
 8002850:	08004127 	.word	0x08004127

08002854 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002854:	b480      	push	{r7}
 8002856:	b087      	sub	sp, #28
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	4608      	mov	r0, r1
 800285e:	4611      	mov	r1, r2
 8002860:	461a      	mov	r2, r3
 8002862:	4603      	mov	r3, r0
 8002864:	817b      	strh	r3, [r7, #10]
 8002866:	460b      	mov	r3, r1
 8002868:	813b      	strh	r3, [r7, #8]
 800286a:	4613      	mov	r3, r2
 800286c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b20      	cmp	r3, #32
 800287c:	f040 809a 	bne.w	80029b4 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002880:	4b50      	ldr	r3, [pc, #320]	; (80029c4 <HAL_I2C_Mem_Read_IT+0x170>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	08db      	lsrs	r3, r3, #3
 8002886:	4a50      	ldr	r2, [pc, #320]	; (80029c8 <HAL_I2C_Mem_Read_IT+0x174>)
 8002888:	fba2 2303 	umull	r2, r3, r2, r3
 800288c:	0a1a      	lsrs	r2, r3, #8
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	009a      	lsls	r2, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	3b01      	subs	r3, #1
 800289e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d116      	bne.n	80028d4 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	f043 0220 	orr.w	r2, r3, #32
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e070      	b.n	80029b6 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d0db      	beq.n	800289a <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d101      	bne.n	80028f0 <HAL_I2C_Mem_Read_IT+0x9c>
 80028ec:	2302      	movs	r3, #2
 80028ee:	e062      	b.n	80029b6 <HAL_I2C_Mem_Read_IT+0x162>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b01      	cmp	r3, #1
 8002904:	d007      	beq.n	8002916 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f042 0201 	orr.w	r2, r2, #1
 8002914:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002924:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2222      	movs	r2, #34	; 0x22
 800292a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2240      	movs	r2, #64	; 0x40
 8002932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a3a      	ldr	r2, [r7, #32]
 8002940:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002946:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	4a1d      	ldr	r2, [pc, #116]	; (80029cc <HAL_I2C_Mem_Read_IT+0x178>)
 8002956:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002958:	897a      	ldrh	r2, [r7, #10]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800295e:	893a      	ldrh	r2, [r7, #8]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002964:	88fa      	ldrh	r2, [r7, #6]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800297e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800298e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299c:	2b00      	cmp	r3, #0
 800299e:	d007      	beq.n	80029b0 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80029ae:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 80029b0:	2300      	movs	r3, #0
 80029b2:	e000      	b.n	80029b6 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 80029b4:	2302      	movs	r3, #2
  }
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	371c      	adds	r7, #28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20000004 	.word	0x20000004
 80029c8:	14f8b589 	.word	0x14f8b589
 80029cc:	ffff0000 	.word	0xffff0000

080029d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029f0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	2b10      	cmp	r3, #16
 80029fe:	d003      	beq.n	8002a08 <HAL_I2C_EV_IRQHandler+0x38>
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	2b40      	cmp	r3, #64	; 0x40
 8002a04:	f040 80b6 	bne.w	8002b74 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10d      	bne.n	8002a3e <HAL_I2C_EV_IRQHandler+0x6e>
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002a28:	d003      	beq.n	8002a32 <HAL_I2C_EV_IRQHandler+0x62>
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002a30:	d101      	bne.n	8002a36 <HAL_I2C_EV_IRQHandler+0x66>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <HAL_I2C_EV_IRQHandler+0x68>
 8002a36:	2300      	movs	r3, #0
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	f000 8127 	beq.w	8002c8c <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00c      	beq.n	8002a62 <HAL_I2C_EV_IRQHandler+0x92>
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	0a5b      	lsrs	r3, r3, #9
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d006      	beq.n	8002a62 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f001 fda9 	bl	80045ac <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 fc6b 	bl	8003336 <I2C_Master_SB>
 8002a60:	e087      	b.n	8002b72 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	08db      	lsrs	r3, r3, #3
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d009      	beq.n	8002a82 <HAL_I2C_EV_IRQHandler+0xb2>
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	0a5b      	lsrs	r3, r3, #9
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 fce1 	bl	8003442 <I2C_Master_ADD10>
 8002a80:	e077      	b.n	8002b72 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	085b      	lsrs	r3, r3, #1
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d009      	beq.n	8002aa2 <HAL_I2C_EV_IRQHandler+0xd2>
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	0a5b      	lsrs	r3, r3, #9
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 fcfb 	bl	8003496 <I2C_Master_ADDR>
 8002aa0:	e067      	b.n	8002b72 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	089b      	lsrs	r3, r3, #2
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d030      	beq.n	8002b10 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ab8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002abc:	f000 80e8 	beq.w	8002c90 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	09db      	lsrs	r3, r3, #7
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00f      	beq.n	8002aec <HAL_I2C_EV_IRQHandler+0x11c>
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	0a9b      	lsrs	r3, r3, #10
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d009      	beq.n	8002aec <HAL_I2C_EV_IRQHandler+0x11c>
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	089b      	lsrs	r3, r3, #2
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d103      	bne.n	8002aec <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f937 	bl	8002d58 <I2C_MasterTransmit_TXE>
 8002aea:	e042      	b.n	8002b72 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	089b      	lsrs	r3, r3, #2
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 80cb 	beq.w	8002c90 <HAL_I2C_EV_IRQHandler+0x2c0>
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	0a5b      	lsrs	r3, r3, #9
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 80c4 	beq.w	8002c90 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f9c1 	bl	8002e90 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b0e:	e0bf      	b.n	8002c90 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b1e:	f000 80b7 	beq.w	8002c90 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	099b      	lsrs	r3, r3, #6
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00f      	beq.n	8002b4e <HAL_I2C_EV_IRQHandler+0x17e>
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	0a9b      	lsrs	r3, r3, #10
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d009      	beq.n	8002b4e <HAL_I2C_EV_IRQHandler+0x17e>
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	089b      	lsrs	r3, r3, #2
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d103      	bne.n	8002b4e <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 fa89 	bl	800305e <I2C_MasterReceive_RXNE>
 8002b4c:	e011      	b.n	8002b72 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	089b      	lsrs	r3, r3, #2
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 809a 	beq.w	8002c90 <HAL_I2C_EV_IRQHandler+0x2c0>
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	0a5b      	lsrs	r3, r3, #9
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 8093 	beq.w	8002c90 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 faf9 	bl	8003162 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b70:	e08e      	b.n	8002c90 <HAL_I2C_EV_IRQHandler+0x2c0>
 8002b72:	e08d      	b.n	8002c90 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d004      	beq.n	8002b86 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	61fb      	str	r3, [r7, #28]
 8002b84:	e007      	b.n	8002b96 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	085b      	lsrs	r3, r3, #1
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d012      	beq.n	8002bc8 <HAL_I2C_EV_IRQHandler+0x1f8>
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	0a5b      	lsrs	r3, r3, #9
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00c      	beq.n	8002bc8 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002bbe:	69b9      	ldr	r1, [r7, #24]
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 feb7 	bl	8003934 <I2C_Slave_ADDR>
 8002bc6:	e066      	b.n	8002c96 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	091b      	lsrs	r3, r3, #4
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d009      	beq.n	8002be8 <HAL_I2C_EV_IRQHandler+0x218>
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	0a5b      	lsrs	r3, r3, #9
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 feeb 	bl	80039bc <I2C_Slave_STOPF>
 8002be6:	e056      	b.n	8002c96 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002be8:	7bbb      	ldrb	r3, [r7, #14]
 8002bea:	2b21      	cmp	r3, #33	; 0x21
 8002bec:	d002      	beq.n	8002bf4 <HAL_I2C_EV_IRQHandler+0x224>
 8002bee:	7bbb      	ldrb	r3, [r7, #14]
 8002bf0:	2b29      	cmp	r3, #41	; 0x29
 8002bf2:	d125      	bne.n	8002c40 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	09db      	lsrs	r3, r3, #7
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00f      	beq.n	8002c20 <HAL_I2C_EV_IRQHandler+0x250>
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	0a9b      	lsrs	r3, r3, #10
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d009      	beq.n	8002c20 <HAL_I2C_EV_IRQHandler+0x250>
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	089b      	lsrs	r3, r3, #2
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d103      	bne.n	8002c20 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 fdcd 	bl	80037b8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c1e:	e039      	b.n	8002c94 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	089b      	lsrs	r3, r3, #2
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d033      	beq.n	8002c94 <HAL_I2C_EV_IRQHandler+0x2c4>
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	0a5b      	lsrs	r3, r3, #9
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d02d      	beq.n	8002c94 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 fdfa 	bl	8003832 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c3e:	e029      	b.n	8002c94 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	099b      	lsrs	r3, r3, #6
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00f      	beq.n	8002c6c <HAL_I2C_EV_IRQHandler+0x29c>
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	0a9b      	lsrs	r3, r3, #10
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d009      	beq.n	8002c6c <HAL_I2C_EV_IRQHandler+0x29c>
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	089b      	lsrs	r3, r3, #2
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d103      	bne.n	8002c6c <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 fe05 	bl	8003874 <I2C_SlaveReceive_RXNE>
 8002c6a:	e014      	b.n	8002c96 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	089b      	lsrs	r3, r3, #2
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00e      	beq.n	8002c96 <HAL_I2C_EV_IRQHandler+0x2c6>
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	0a5b      	lsrs	r3, r3, #9
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d008      	beq.n	8002c96 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 fe33 	bl	80038f0 <I2C_SlaveReceive_BTF>
 8002c8a:	e004      	b.n	8002c96 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8002c8c:	bf00      	nop
 8002c8e:	e002      	b.n	8002c96 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c90:	bf00      	nop
 8002c92:	e000      	b.n	8002c96 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c94:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002c96:	3720      	adds	r7, #32
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	70fb      	strb	r3, [r7, #3]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d66:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d6e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d150      	bne.n	8002e20 <I2C_MasterTransmit_TXE+0xc8>
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
 8002d80:	2b21      	cmp	r3, #33	; 0x21
 8002d82:	d14d      	bne.n	8002e20 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b08      	cmp	r3, #8
 8002d88:	d01d      	beq.n	8002dc6 <I2C_MasterTransmit_TXE+0x6e>
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b20      	cmp	r3, #32
 8002d8e:	d01a      	beq.n	8002dc6 <I2C_MasterTransmit_TXE+0x6e>
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d96:	d016      	beq.n	8002dc6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002da6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2211      	movs	r2, #17
 8002dac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2220      	movs	r2, #32
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff ff6c 	bl	8002c9c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002dc4:	e060      	b.n	8002e88 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002dd4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b40      	cmp	r3, #64	; 0x40
 8002dfe:	d107      	bne.n	8002e10 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7ff ff87 	bl	8002d1c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e0e:	e03b      	b.n	8002e88 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff ff3f 	bl	8002c9c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002e1e:	e033      	b.n	8002e88 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	2b21      	cmp	r3, #33	; 0x21
 8002e24:	d005      	beq.n	8002e32 <I2C_MasterTransmit_TXE+0xda>
 8002e26:	7bbb      	ldrb	r3, [r7, #14]
 8002e28:	2b40      	cmp	r3, #64	; 0x40
 8002e2a:	d12d      	bne.n	8002e88 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	2b22      	cmp	r3, #34	; 0x22
 8002e30:	d12a      	bne.n	8002e88 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d108      	bne.n	8002e4e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e4a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002e4c:	e01c      	b.n	8002e88 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b40      	cmp	r3, #64	; 0x40
 8002e58:	d103      	bne.n	8002e62 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f898 	bl	8002f90 <I2C_MemoryTransmit_TXE_BTF>
}
 8002e60:	e012      	b.n	8002e88 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	781a      	ldrb	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	1c5a      	adds	r2, r3, #1
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e86:	e7ff      	b.n	8002e88 <I2C_MasterTransmit_TXE+0x130>
 8002e88:	bf00      	nop
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b21      	cmp	r3, #33	; 0x21
 8002ea8:	d165      	bne.n	8002f76 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d012      	beq.n	8002eda <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	781a      	ldrb	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002ed8:	e056      	b.n	8002f88 <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d01d      	beq.n	8002f1c <I2C_MasterTransmit_BTF+0x8c>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2b20      	cmp	r3, #32
 8002ee4:	d01a      	beq.n	8002f1c <I2C_MasterTransmit_BTF+0x8c>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002eec:	d016      	beq.n	8002f1c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002efc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2211      	movs	r2, #17
 8002f02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f7ff fec1 	bl	8002c9c <HAL_I2C_MasterTxCpltCallback>
}
 8002f1a:	e035      	b.n	8002f88 <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f2a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f3a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2220      	movs	r2, #32
 8002f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b40      	cmp	r3, #64	; 0x40
 8002f54:	d107      	bne.n	8002f66 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7ff fedc 	bl	8002d1c <HAL_I2C_MemTxCpltCallback>
}
 8002f64:	e010      	b.n	8002f88 <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff fe94 	bl	8002c9c <HAL_I2C_MasterTxCpltCallback>
}
 8002f74:	e008      	b.n	8002f88 <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b40      	cmp	r3, #64	; 0x40
 8002f80:	d102      	bne.n	8002f88 <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f804 	bl	8002f90 <I2C_MemoryTransmit_TXE_BTF>
}
 8002f88:	bf00      	nop
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d11d      	bne.n	8002fdc <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d10b      	bne.n	8002fc0 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb8:	1c9a      	adds	r2, r3, #2
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002fbe:	e048      	b.n	8003052 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	121b      	asrs	r3, r3, #8
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002fda:	e03a      	b.n	8003052 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d10b      	bne.n	8002ffc <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff4:	1c5a      	adds	r2, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002ffa:	e02a      	b.n	8003052 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003000:	2b02      	cmp	r3, #2
 8003002:	d126      	bne.n	8003052 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b22      	cmp	r3, #34	; 0x22
 800300e:	d108      	bne.n	8003022 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800301e:	601a      	str	r2, [r3, #0]
}
 8003020:	e017      	b.n	8003052 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b21      	cmp	r3, #33	; 0x21
 800302c:	d111      	bne.n	8003052 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	781a      	ldrb	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	1c5a      	adds	r2, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003048:	b29b      	uxth	r3, r3
 800304a:	3b01      	subs	r3, #1
 800304c:	b29a      	uxth	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b22      	cmp	r3, #34	; 0x22
 8003070:	d173      	bne.n	800315a <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003076:	b29b      	uxth	r3, r3
 8003078:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2b03      	cmp	r3, #3
 800307e:	d920      	bls.n	80030c2 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	1c5a      	adds	r2, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309c:	b29b      	uxth	r3, r3
 800309e:	3b01      	subs	r3, #1
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d154      	bne.n	800315a <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030be:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80030c0:	e04b      	b.n	800315a <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d047      	beq.n	800315a <I2C_MasterReceive_RXNE+0xfc>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d002      	beq.n	80030d6 <I2C_MasterReceive_RXNE+0x78>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d141      	bne.n	800315a <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030e4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80030f4:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	691a      	ldr	r2, [r3, #16]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	b2d2      	uxtb	r2, r2
 8003102:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003112:	b29b      	uxth	r3, r3
 8003114:	3b01      	subs	r3, #1
 8003116:	b29a      	uxth	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b40      	cmp	r3, #64	; 0x40
 800312e:	d10a      	bne.n	8003146 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7fd fc6e 	bl	8000a20 <HAL_I2C_MemRxCpltCallback>
}
 8003144:	e009      	b.n	800315a <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2212      	movs	r2, #18
 8003152:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7ff fdab 	bl	8002cb0 <HAL_I2C_MasterRxCpltCallback>
}
 800315a:	bf00      	nop
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b084      	sub	sp, #16
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003174:	b29b      	uxth	r3, r3
 8003176:	2b04      	cmp	r3, #4
 8003178:	d11b      	bne.n	80031b2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003188:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	691a      	ldr	r2, [r3, #16]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80031b0:	e0bd      	b.n	800332e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	2b03      	cmp	r3, #3
 80031ba:	d129      	bne.n	8003210 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ca:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d00a      	beq.n	80031e8 <I2C_MasterReceive_BTF+0x86>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d007      	beq.n	80031e8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	691a      	ldr	r2, [r3, #16]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003204:	b29b      	uxth	r3, r3
 8003206:	3b01      	subs	r3, #1
 8003208:	b29a      	uxth	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800320e:	e08e      	b.n	800332e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003214:	b29b      	uxth	r3, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d176      	bne.n	8003308 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d002      	beq.n	8003226 <I2C_MasterReceive_BTF+0xc4>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2b10      	cmp	r3, #16
 8003224:	d108      	bne.n	8003238 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	e019      	b.n	800326c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2b04      	cmp	r3, #4
 800323c:	d002      	beq.n	8003244 <I2C_MasterReceive_BTF+0xe2>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2b02      	cmp	r3, #2
 8003242:	d108      	bne.n	8003256 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	e00a      	b.n	800326c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2b10      	cmp	r3, #16
 800325a:	d007      	beq.n	800326c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800326a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691a      	ldr	r2, [r3, #16]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	1c5a      	adds	r2, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003288:	b29b      	uxth	r3, r3
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	691a      	ldr	r2, [r3, #16]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80032c6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b40      	cmp	r3, #64	; 0x40
 80032da:	d10a      	bne.n	80032f2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7fd fb98 	bl	8000a20 <HAL_I2C_MemRxCpltCallback>
}
 80032f0:	e01d      	b.n	800332e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2212      	movs	r2, #18
 80032fe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f7ff fcd5 	bl	8002cb0 <HAL_I2C_MasterRxCpltCallback>
}
 8003306:	e012      	b.n	800332e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691a      	ldr	r2, [r3, #16]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003324:	b29b      	uxth	r3, r3
 8003326:	3b01      	subs	r3, #1
 8003328:	b29a      	uxth	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800332e:	bf00      	nop
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b40      	cmp	r3, #64	; 0x40
 8003348:	d117      	bne.n	800337a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800334e:	2b00      	cmp	r3, #0
 8003350:	d109      	bne.n	8003366 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	b2db      	uxtb	r3, r3
 8003358:	461a      	mov	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003362:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003364:	e067      	b.n	8003436 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	b2db      	uxtb	r3, r3
 800336c:	f043 0301 	orr.w	r3, r3, #1
 8003370:	b2da      	uxtb	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	611a      	str	r2, [r3, #16]
}
 8003378:	e05d      	b.n	8003436 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003382:	d133      	bne.n	80033ec <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b21      	cmp	r3, #33	; 0x21
 800338e:	d109      	bne.n	80033a4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003394:	b2db      	uxtb	r3, r3
 8003396:	461a      	mov	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033a0:	611a      	str	r2, [r3, #16]
 80033a2:	e008      	b.n	80033b6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	f043 0301 	orr.w	r3, r3, #1
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d004      	beq.n	80033c8 <I2C_Master_SB+0x92>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d108      	bne.n	80033da <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d032      	beq.n	8003436 <I2C_Master_SB+0x100>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d02d      	beq.n	8003436 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033e8:	605a      	str	r2, [r3, #4]
}
 80033ea:	e024      	b.n	8003436 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10e      	bne.n	8003412 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	11db      	asrs	r3, r3, #7
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	f003 0306 	and.w	r3, r3, #6
 8003402:	b2db      	uxtb	r3, r3
 8003404:	f063 030f 	orn	r3, r3, #15
 8003408:	b2da      	uxtb	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	611a      	str	r2, [r3, #16]
}
 8003410:	e011      	b.n	8003436 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003416:	2b01      	cmp	r3, #1
 8003418:	d10d      	bne.n	8003436 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341e:	b29b      	uxth	r3, r3
 8003420:	11db      	asrs	r3, r3, #7
 8003422:	b2db      	uxtb	r3, r3
 8003424:	f003 0306 	and.w	r3, r3, #6
 8003428:	b2db      	uxtb	r3, r3
 800342a:	f063 030e 	orn	r3, r3, #14
 800342e:	b2da      	uxtb	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	611a      	str	r2, [r3, #16]
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344e:	b2da      	uxtb	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345a:	2b00      	cmp	r3, #0
 800345c:	d103      	bne.n	8003466 <I2C_Master_ADD10+0x24>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003462:	2b00      	cmp	r3, #0
 8003464:	d011      	beq.n	800348a <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346c:	2b00      	cmp	r3, #0
 800346e:	d104      	bne.n	800347a <I2C_Master_ADD10+0x38>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003476:	2b00      	cmp	r3, #0
 8003478:	d007      	beq.n	800348a <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003488:	605a      	str	r2, [r3, #4]
    }
  }
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003496:	b480      	push	{r7}
 8003498:	b091      	sub	sp, #68	; 0x44
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ac:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b22      	cmp	r3, #34	; 0x22
 80034be:	f040 8169 	bne.w	8003794 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10f      	bne.n	80034ea <I2C_Master_ADDR+0x54>
 80034ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80034ce:	2b40      	cmp	r3, #64	; 0x40
 80034d0:	d10b      	bne.n	80034ea <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034d2:	2300      	movs	r3, #0
 80034d4:	633b      	str	r3, [r7, #48]	; 0x30
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	633b      	str	r3, [r7, #48]	; 0x30
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	633b      	str	r3, [r7, #48]	; 0x30
 80034e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e8:	e160      	b.n	80037ac <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d11d      	bne.n	800352e <I2C_Master_ADDR+0x98>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80034fa:	d118      	bne.n	800352e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034fc:	2300      	movs	r3, #0
 80034fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003510:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003520:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003526:	1c5a      	adds	r2, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	651a      	str	r2, [r3, #80]	; 0x50
 800352c:	e13e      	b.n	80037ac <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003532:	b29b      	uxth	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d113      	bne.n	8003560 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003538:	2300      	movs	r3, #0
 800353a:	62bb      	str	r3, [r7, #40]	; 0x28
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	695b      	ldr	r3, [r3, #20]
 8003542:	62bb      	str	r3, [r7, #40]	; 0x28
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	62bb      	str	r3, [r7, #40]	; 0x28
 800354c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	e115      	b.n	800378c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003564:	b29b      	uxth	r3, r3
 8003566:	2b01      	cmp	r3, #1
 8003568:	f040 808a 	bne.w	8003680 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800356c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003572:	d137      	bne.n	80035e4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003582:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800358e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003592:	d113      	bne.n	80035bc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035a2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035a4:	2300      	movs	r3, #0
 80035a6:	627b      	str	r3, [r7, #36]	; 0x24
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	627b      	str	r3, [r7, #36]	; 0x24
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	e0e7      	b.n	800378c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035bc:	2300      	movs	r3, #0
 80035be:	623b      	str	r3, [r7, #32]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	623b      	str	r3, [r7, #32]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	623b      	str	r3, [r7, #32]
 80035d0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	e0d3      	b.n	800378c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80035e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e6:	2b08      	cmp	r3, #8
 80035e8:	d02e      	beq.n	8003648 <I2C_Master_ADDR+0x1b2>
 80035ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ec:	2b20      	cmp	r3, #32
 80035ee:	d02b      	beq.n	8003648 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80035f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f2:	2b12      	cmp	r3, #18
 80035f4:	d102      	bne.n	80035fc <I2C_Master_ADDR+0x166>
 80035f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d125      	bne.n	8003648 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80035fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d00e      	beq.n	8003620 <I2C_Master_ADDR+0x18a>
 8003602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003604:	2b02      	cmp	r3, #2
 8003606:	d00b      	beq.n	8003620 <I2C_Master_ADDR+0x18a>
 8003608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360a:	2b10      	cmp	r3, #16
 800360c:	d008      	beq.n	8003620 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	e007      	b.n	8003630 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800362e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003630:	2300      	movs	r3, #0
 8003632:	61fb      	str	r3, [r7, #28]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	61fb      	str	r3, [r7, #28]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	61fb      	str	r3, [r7, #28]
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	e0a1      	b.n	800378c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003656:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003658:	2300      	movs	r3, #0
 800365a:	61bb      	str	r3, [r7, #24]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	61bb      	str	r3, [r7, #24]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	61bb      	str	r3, [r7, #24]
 800366c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	e085      	b.n	800378c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d14d      	bne.n	8003726 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800368a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368c:	2b04      	cmp	r3, #4
 800368e:	d016      	beq.n	80036be <I2C_Master_ADDR+0x228>
 8003690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003692:	2b02      	cmp	r3, #2
 8003694:	d013      	beq.n	80036be <I2C_Master_ADDR+0x228>
 8003696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003698:	2b10      	cmp	r3, #16
 800369a:	d010      	beq.n	80036be <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036aa:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	e007      	b.n	80036ce <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036cc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036dc:	d117      	bne.n	800370e <I2C_Master_ADDR+0x278>
 80036de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036e4:	d00b      	beq.n	80036fe <I2C_Master_ADDR+0x268>
 80036e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d008      	beq.n	80036fe <I2C_Master_ADDR+0x268>
 80036ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d005      	beq.n	80036fe <I2C_Master_ADDR+0x268>
 80036f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f4:	2b10      	cmp	r3, #16
 80036f6:	d002      	beq.n	80036fe <I2C_Master_ADDR+0x268>
 80036f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036fa:	2b20      	cmp	r3, #32
 80036fc:	d107      	bne.n	800370e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800370c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800370e:	2300      	movs	r3, #0
 8003710:	617b      	str	r3, [r7, #20]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	617b      	str	r3, [r7, #20]
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	e032      	b.n	800378c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003734:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003740:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003744:	d117      	bne.n	8003776 <I2C_Master_ADDR+0x2e0>
 8003746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003748:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800374c:	d00b      	beq.n	8003766 <I2C_Master_ADDR+0x2d0>
 800374e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003750:	2b01      	cmp	r3, #1
 8003752:	d008      	beq.n	8003766 <I2C_Master_ADDR+0x2d0>
 8003754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003756:	2b08      	cmp	r3, #8
 8003758:	d005      	beq.n	8003766 <I2C_Master_ADDR+0x2d0>
 800375a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800375c:	2b10      	cmp	r3, #16
 800375e:	d002      	beq.n	8003766 <I2C_Master_ADDR+0x2d0>
 8003760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003762:	2b20      	cmp	r3, #32
 8003764:	d107      	bne.n	8003776 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003774:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003776:	2300      	movs	r3, #0
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	613b      	str	r3, [r7, #16]
 800378a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003792:	e00b      	b.n	80037ac <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]
}
 80037aa:	e7ff      	b.n	80037ac <I2C_Master_ADDR+0x316>
 80037ac:	bf00      	nop
 80037ae:	3744      	adds	r7, #68	; 0x44
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d02b      	beq.n	800382a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	781a      	ldrb	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d114      	bne.n	800382a <I2C_SlaveTransmit_TXE+0x72>
 8003800:	7bfb      	ldrb	r3, [r7, #15]
 8003802:	2b29      	cmp	r3, #41	; 0x29
 8003804:	d111      	bne.n	800382a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003814:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2221      	movs	r2, #33	; 0x21
 800381a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2228      	movs	r2, #40	; 0x28
 8003820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7ff fa4d 	bl	8002cc4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800382a:	bf00      	nop
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383e:	b29b      	uxth	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	d011      	beq.n	8003868 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	781a      	ldrb	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385e:	b29b      	uxth	r3, r3
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003882:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d02c      	beq.n	80038e8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	691a      	ldr	r2, [r3, #16]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	b2d2      	uxtb	r2, r2
 800389a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d114      	bne.n	80038e8 <I2C_SlaveReceive_RXNE+0x74>
 80038be:	7bfb      	ldrb	r3, [r7, #15]
 80038c0:	2b2a      	cmp	r3, #42	; 0x2a
 80038c2:	d111      	bne.n	80038e8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038d2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2222      	movs	r2, #34	; 0x22
 80038d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2228      	movs	r2, #40	; 0x28
 80038de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7ff f9f8 	bl	8002cd8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80038e8:	bf00      	nop
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d012      	beq.n	8003928 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800393e:	2300      	movs	r3, #0
 8003940:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003948:	b2db      	uxtb	r3, r3
 800394a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800394e:	2b28      	cmp	r3, #40	; 0x28
 8003950:	d127      	bne.n	80039a2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003960:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	089b      	lsrs	r3, r3, #2
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800396e:	2301      	movs	r3, #1
 8003970:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	09db      	lsrs	r3, r3, #7
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d103      	bne.n	8003986 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	81bb      	strh	r3, [r7, #12]
 8003984:	e002      	b.n	800398c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003994:	89ba      	ldrh	r2, [r7, #12]
 8003996:	7bfb      	ldrb	r3, [r7, #15]
 8003998:	4619      	mov	r1, r3
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7ff f9a6 	bl	8002cec <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80039a0:	e008      	b.n	80039b4 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f06f 0202 	mvn.w	r2, #2
 80039aa:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80039b4:	bf00      	nop
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ca:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039da:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80039dc:	2300      	movs	r3, #0
 80039de:	60bb      	str	r3, [r7, #8]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	60bb      	str	r3, [r7, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0201 	orr.w	r2, r2, #1
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a08:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a18:	d172      	bne.n	8003b00 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	2b22      	cmp	r3, #34	; 0x22
 8003a1e:	d002      	beq.n	8003a26 <I2C_Slave_STOPF+0x6a>
 8003a20:	7bfb      	ldrb	r3, [r7, #15]
 8003a22:	2b2a      	cmp	r3, #42	; 0x2a
 8003a24:	d135      	bne.n	8003a92 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d005      	beq.n	8003a4a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	f043 0204 	orr.w	r2, r3, #4
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a58:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fe f900 	bl	8001c64 <HAL_DMA_GetState>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d049      	beq.n	8003afe <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6e:	4a69      	ldr	r2, [pc, #420]	; (8003c14 <I2C_Slave_STOPF+0x258>)
 8003a70:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fd ff48 	bl	800190c <HAL_DMA_Abort_IT>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d03d      	beq.n	8003afe <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a90:	e035      	b.n	8003afe <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d005      	beq.n	8003ab6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	f043 0204 	orr.w	r2, r3, #4
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ac4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fe f8ca 	bl	8001c64 <HAL_DMA_GetState>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d014      	beq.n	8003b00 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ada:	4a4e      	ldr	r2, [pc, #312]	; (8003c14 <I2C_Slave_STOPF+0x258>)
 8003adc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fd ff12 	bl	800190c <HAL_DMA_Abort_IT>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d008      	beq.n	8003b00 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003af8:	4610      	mov	r0, r2
 8003afa:	4798      	blx	r3
 8003afc:	e000      	b.n	8003b00 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003afe:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d03e      	beq.n	8003b88 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d112      	bne.n	8003b3e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691a      	ldr	r2, [r3, #16]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b48:	2b40      	cmp	r3, #64	; 0x40
 8003b4a:	d112      	bne.n	8003b72 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	691a      	ldr	r2, [r3, #16]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d005      	beq.n	8003b88 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	f043 0204 	orr.w	r2, r3, #4
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d003      	beq.n	8003b98 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f843 	bl	8003c1c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003b96:	e039      	b.n	8003c0c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003b98:	7bfb      	ldrb	r3, [r7, #15]
 8003b9a:	2b2a      	cmp	r3, #42	; 0x2a
 8003b9c:	d109      	bne.n	8003bb2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2228      	movs	r2, #40	; 0x28
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7ff f893 	bl	8002cd8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b28      	cmp	r3, #40	; 0x28
 8003bbc:	d111      	bne.n	8003be2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a15      	ldr	r2, [pc, #84]	; (8003c18 <I2C_Slave_STOPF+0x25c>)
 8003bc2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7ff f894 	bl	8002d08 <HAL_I2C_ListenCpltCallback>
}
 8003be0:	e014      	b.n	8003c0c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	2b22      	cmp	r3, #34	; 0x22
 8003be8:	d002      	beq.n	8003bf0 <I2C_Slave_STOPF+0x234>
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
 8003bec:	2b22      	cmp	r3, #34	; 0x22
 8003bee:	d10d      	bne.n	8003c0c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7ff f866 	bl	8002cd8 <HAL_I2C_SlaveRxCpltCallback>
}
 8003c0c:	bf00      	nop
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	080041a1 	.word	0x080041a1
 8003c18:	ffff0000 	.word	0xffff0000

08003c1c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b10      	cmp	r3, #16
 8003c36:	d10a      	bne.n	8003c4e <I2C_ITError+0x32>
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	2b22      	cmp	r3, #34	; 0x22
 8003c3c:	d107      	bne.n	8003c4e <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c4c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c54:	2b28      	cmp	r3, #40	; 0x28
 8003c56:	d107      	bne.n	8003c68 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2228      	movs	r2, #40	; 0x28
 8003c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003c66:	e015      	b.n	8003c94 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c76:	d006      	beq.n	8003c86 <I2C_ITError+0x6a>
 8003c78:	7bfb      	ldrb	r3, [r7, #15]
 8003c7a:	2b60      	cmp	r3, #96	; 0x60
 8003c7c:	d003      	beq.n	8003c86 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2220      	movs	r2, #32
 8003c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ca2:	d162      	bne.n	8003d6a <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cb2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d020      	beq.n	8003d04 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc6:	4a6a      	ldr	r2, [pc, #424]	; (8003e70 <I2C_ITError+0x254>)
 8003cc8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fd fe1c 	bl	800190c <HAL_DMA_Abort_IT>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 8089 	beq.w	8003dee <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0201 	bic.w	r2, r2, #1
 8003cea:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cfe:	4610      	mov	r0, r2
 8003d00:	4798      	blx	r3
 8003d02:	e074      	b.n	8003dee <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d08:	4a59      	ldr	r2, [pc, #356]	; (8003e70 <I2C_ITError+0x254>)
 8003d0a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fd fdfb 	bl	800190c <HAL_DMA_Abort_IT>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d068      	beq.n	8003dee <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d26:	2b40      	cmp	r3, #64	; 0x40
 8003d28:	d10b      	bne.n	8003d42 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	691a      	ldr	r2, [r3, #16]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	b2d2      	uxtb	r2, r2
 8003d36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0201 	bic.w	r2, r2, #1
 8003d50:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2220      	movs	r2, #32
 8003d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d64:	4610      	mov	r0, r2
 8003d66:	4798      	blx	r3
 8003d68:	e041      	b.n	8003dee <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b60      	cmp	r3, #96	; 0x60
 8003d74:	d125      	bne.n	8003dc2 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8e:	2b40      	cmp	r3, #64	; 0x40
 8003d90:	d10b      	bne.n	8003daa <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0201 	bic.w	r2, r2, #1
 8003db8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7fe ffc2 	bl	8002d44 <HAL_I2C_AbortCpltCallback>
 8003dc0:	e015      	b.n	8003dee <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dcc:	2b40      	cmp	r3, #64	; 0x40
 8003dce:	d10b      	bne.n	8003de8 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	691a      	ldr	r2, [r3, #16]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7fe ffa1 	bl	8002d30 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10e      	bne.n	8003e1c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d109      	bne.n	8003e1c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d104      	bne.n	8003e1c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d007      	beq.n	8003e2c <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e2a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e32:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	d113      	bne.n	8003e68 <I2C_ITError+0x24c>
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
 8003e42:	2b28      	cmp	r3, #40	; 0x28
 8003e44:	d110      	bne.n	8003e68 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a0a      	ldr	r2, [pc, #40]	; (8003e74 <I2C_ITError+0x258>)
 8003e4a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2220      	movs	r2, #32
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fe ff50 	bl	8002d08 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e68:	bf00      	nop
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	080041a1 	.word	0x080041a1
 8003e74:	ffff0000 	.word	0xffff0000

08003e78 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b088      	sub	sp, #32
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	607a      	str	r2, [r7, #4]
 8003e82:	603b      	str	r3, [r7, #0]
 8003e84:	460b      	mov	r3, r1
 8003e86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d006      	beq.n	8003ea2 <I2C_MasterRequestWrite+0x2a>
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d003      	beq.n	8003ea2 <I2C_MasterRequestWrite+0x2a>
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ea0:	d108      	bne.n	8003eb4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	e00b      	b.n	8003ecc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb8:	2b12      	cmp	r3, #18
 8003eba:	d107      	bne.n	8003ecc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 f9e0 	bl	800429e <I2C_WaitOnFlagUntilTimeout>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00c      	beq.n	8003efe <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ef8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e035      	b.n	8003f6a <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f06:	d108      	bne.n	8003f1a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f08:	897b      	ldrh	r3, [r7, #10]
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f16:	611a      	str	r2, [r3, #16]
 8003f18:	e01b      	b.n	8003f52 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f1a:	897b      	ldrh	r3, [r7, #10]
 8003f1c:	11db      	asrs	r3, r3, #7
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	f003 0306 	and.w	r3, r3, #6
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	f063 030f 	orn	r3, r3, #15
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	490f      	ldr	r1, [pc, #60]	; (8003f74 <I2C_MasterRequestWrite+0xfc>)
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 fa07 	bl	800434c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e010      	b.n	8003f6a <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f48:	897b      	ldrh	r3, [r7, #10]
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	4908      	ldr	r1, [pc, #32]	; (8003f78 <I2C_MasterRequestWrite+0x100>)
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 f9f7 	bl	800434c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e000      	b.n	8003f6a <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	00010008 	.word	0x00010008
 8003f78:	00010002 	.word	0x00010002

08003f7c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f88:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f90:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f98:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003fae:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	2200      	movs	r2, #0
 8003fce:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003fd0:	7cfb      	ldrb	r3, [r7, #19]
 8003fd2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003fd6:	2b21      	cmp	r3, #33	; 0x21
 8003fd8:	d007      	beq.n	8003fea <I2C_DMAXferCplt+0x6e>
 8003fda:	7cfb      	ldrb	r3, [r7, #19]
 8003fdc:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8003fe0:	2b22      	cmp	r3, #34	; 0x22
 8003fe2:	d131      	bne.n	8004048 <I2C_DMAXferCplt+0xcc>
 8003fe4:	7cbb      	ldrb	r3, [r7, #18]
 8003fe6:	2b20      	cmp	r3, #32
 8003fe8:	d12e      	bne.n	8004048 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ff8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004000:	7cfb      	ldrb	r3, [r7, #19]
 8004002:	2b29      	cmp	r3, #41	; 0x29
 8004004:	d10a      	bne.n	800401c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2221      	movs	r2, #33	; 0x21
 800400a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	2228      	movs	r2, #40	; 0x28
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004014:	6978      	ldr	r0, [r7, #20]
 8004016:	f7fe fe55 	bl	8002cc4 <HAL_I2C_SlaveTxCpltCallback>
 800401a:	e00c      	b.n	8004036 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800401c:	7cfb      	ldrb	r3, [r7, #19]
 800401e:	2b2a      	cmp	r3, #42	; 0x2a
 8004020:	d109      	bne.n	8004036 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2222      	movs	r2, #34	; 0x22
 8004026:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	2228      	movs	r2, #40	; 0x28
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004030:	6978      	ldr	r0, [r7, #20]
 8004032:	f7fe fe51 	bl	8002cd8 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004044:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004046:	e06a      	b.n	800411e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d064      	beq.n	800411e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004058:	b29b      	uxth	r3, r3
 800405a:	2b01      	cmp	r3, #1
 800405c:	d107      	bne.n	800406e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800406c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800407c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004084:	d009      	beq.n	800409a <I2C_DMAXferCplt+0x11e>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2b08      	cmp	r3, #8
 800408a:	d006      	beq.n	800409a <I2C_DMAXferCplt+0x11e>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004092:	d002      	beq.n	800409a <I2C_DMAXferCplt+0x11e>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2b20      	cmp	r3, #32
 8004098:	d107      	bne.n	80040aa <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040b8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040c8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2200      	movs	r2, #0
 80040ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80040d8:	6978      	ldr	r0, [r7, #20]
 80040da:	f7fe fe29 	bl	8002d30 <HAL_I2C_ErrorCallback>
}
 80040de:	e01e      	b.n	800411e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b40      	cmp	r3, #64	; 0x40
 80040f2:	d10a      	bne.n	800410a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	2200      	movs	r2, #0
 8004100:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004102:	6978      	ldr	r0, [r7, #20]
 8004104:	f7fc fc8c 	bl	8000a20 <HAL_I2C_MemRxCpltCallback>
}
 8004108:	e009      	b.n	800411e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2212      	movs	r2, #18
 8004116:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004118:	6978      	ldr	r0, [r7, #20]
 800411a:	f7fe fdc9 	bl	8002cb0 <HAL_I2C_MasterRxCpltCallback>
}
 800411e:	bf00      	nop
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b084      	sub	sp, #16
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004132:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004140:	2200      	movs	r2, #0
 8004142:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004150:	2200      	movs	r2, #0
 8004152:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f7fd fd93 	bl	8001c80 <HAL_DMA_GetError>
 800415a:	4603      	mov	r3, r0
 800415c:	2b02      	cmp	r3, #2
 800415e:	d01b      	beq.n	8004198 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800416e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2220      	movs	r2, #32
 800417a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	f043 0210 	orr.w	r2, r3, #16
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f7fe fdcc 	bl	8002d30 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004198:	bf00      	nop
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ac:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b4:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c2:	2200      	movs	r2, #0
 80041c4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d2:	2200      	movs	r2, #0
 80041d4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041e4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f8:	2200      	movs	r2, #0
 80041fa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004208:	2200      	movs	r2, #0
 800420a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0201 	bic.w	r2, r2, #1
 800421a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b60      	cmp	r3, #96	; 0x60
 8004226:	d10e      	bne.n	8004246 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f7fe fd80 	bl	8002d44 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004244:	e027      	b.n	8004296 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004246:	7afb      	ldrb	r3, [r7, #11]
 8004248:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800424c:	2b28      	cmp	r3, #40	; 0x28
 800424e:	d117      	bne.n	8004280 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800426e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2228      	movs	r2, #40	; 0x28
 800427a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800427e:	e007      	b.n	8004290 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f7fe fd4d 	bl	8002d30 <HAL_I2C_ErrorCallback>
}
 8004296:	bf00      	nop
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	60f8      	str	r0, [r7, #12]
 80042a6:	60b9      	str	r1, [r7, #8]
 80042a8:	603b      	str	r3, [r7, #0]
 80042aa:	4613      	mov	r3, r2
 80042ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042ae:	e025      	b.n	80042fc <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b6:	d021      	beq.n	80042fc <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b8:	f7fd f8e2 	bl	8001480 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d302      	bcc.n	80042ce <I2C_WaitOnFlagUntilTimeout+0x30>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d116      	bne.n	80042fc <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	f043 0220 	orr.w	r2, r3, #32
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e023      	b.n	8004344 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	0c1b      	lsrs	r3, r3, #16
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b01      	cmp	r3, #1
 8004304:	d10d      	bne.n	8004322 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	43da      	mvns	r2, r3
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	4013      	ands	r3, r2
 8004312:	b29b      	uxth	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	bf0c      	ite	eq
 8004318:	2301      	moveq	r3, #1
 800431a:	2300      	movne	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	461a      	mov	r2, r3
 8004320:	e00c      	b.n	800433c <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	43da      	mvns	r2, r3
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	4013      	ands	r3, r2
 800432e:	b29b      	uxth	r3, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	bf0c      	ite	eq
 8004334:	2301      	moveq	r3, #1
 8004336:	2300      	movne	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	461a      	mov	r2, r3
 800433c:	79fb      	ldrb	r3, [r7, #7]
 800433e:	429a      	cmp	r2, r3
 8004340:	d0b6      	beq.n	80042b0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
 8004358:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800435a:	e051      	b.n	8004400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800436a:	d123      	bne.n	80043b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800437a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004384:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2220      	movs	r2, #32
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	f043 0204 	orr.w	r2, r3, #4
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e046      	b.n	8004442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ba:	d021      	beq.n	8004400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043bc:	f7fd f860 	bl	8001480 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d302      	bcc.n	80043d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d116      	bne.n	8004400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ec:	f043 0220 	orr.w	r2, r3, #32
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e020      	b.n	8004442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	0c1b      	lsrs	r3, r3, #16
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b01      	cmp	r3, #1
 8004408:	d10c      	bne.n	8004424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	43da      	mvns	r2, r3
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	4013      	ands	r3, r2
 8004416:	b29b      	uxth	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	bf14      	ite	ne
 800441c:	2301      	movne	r3, #1
 800441e:	2300      	moveq	r3, #0
 8004420:	b2db      	uxtb	r3, r3
 8004422:	e00b      	b.n	800443c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	43da      	mvns	r2, r3
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	4013      	ands	r3, r2
 8004430:	b29b      	uxth	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	bf14      	ite	ne
 8004436:	2301      	movne	r3, #1
 8004438:	2300      	moveq	r3, #0
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	d18d      	bne.n	800435c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b084      	sub	sp, #16
 800444e:	af00      	add	r7, sp, #0
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004456:	e02d      	b.n	80044b4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 f878 	bl	800454e <I2C_IsAcknowledgeFailed>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e02d      	b.n	80044c4 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446e:	d021      	beq.n	80044b4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004470:	f7fd f806 	bl	8001480 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	429a      	cmp	r2, r3
 800447e:	d302      	bcc.n	8004486 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d116      	bne.n	80044b4 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a0:	f043 0220 	orr.w	r2, r3, #32
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e007      	b.n	80044c4 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044be:	2b80      	cmp	r3, #128	; 0x80
 80044c0:	d1ca      	bne.n	8004458 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044d8:	e02d      	b.n	8004536 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 f837 	bl	800454e <I2C_IsAcknowledgeFailed>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e02d      	b.n	8004546 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f0:	d021      	beq.n	8004536 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f2:	f7fc ffc5 	bl	8001480 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d302      	bcc.n	8004508 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d116      	bne.n	8004536 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2220      	movs	r2, #32
 8004512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	f043 0220 	orr.w	r2, r3, #32
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e007      	b.n	8004546 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b04      	cmp	r3, #4
 8004542:	d1ca      	bne.n	80044da <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004564:	d11b      	bne.n	800459e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800456e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2220      	movs	r2, #32
 800457a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	f043 0204 	orr.w	r2, r3, #4
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80045bc:	d103      	bne.n	80045c6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80045c4:	e007      	b.n	80045d6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ca:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80045ce:	d102      	bne.n	80045d6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2208      	movs	r2, #8
 80045d4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80045e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045e4:	b08f      	sub	sp, #60	; 0x3c
 80045e6:	af0a      	add	r7, sp, #40	; 0x28
 80045e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e10f      	b.n	8004814 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f005 ffb8 	bl	800a584 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2203      	movs	r2, #3
 8004618:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004624:	2b00      	cmp	r3, #0
 8004626:	d102      	bne.n	800462e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f002 ff97 	bl	8007566 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	603b      	str	r3, [r7, #0]
 800463e:	687e      	ldr	r6, [r7, #4]
 8004640:	466d      	mov	r5, sp
 8004642:	f106 0410 	add.w	r4, r6, #16
 8004646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800464a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800464c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800464e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004652:	e885 0003 	stmia.w	r5, {r0, r1}
 8004656:	1d33      	adds	r3, r6, #4
 8004658:	cb0e      	ldmia	r3, {r1, r2, r3}
 800465a:	6838      	ldr	r0, [r7, #0]
 800465c:	f002 fe6e 	bl	800733c <USB_CoreInit>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d005      	beq.n	8004672 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2202      	movs	r2, #2
 800466a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e0d0      	b.n	8004814 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2100      	movs	r1, #0
 8004678:	4618      	mov	r0, r3
 800467a:	f002 ff85 	bl	8007588 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800467e:	2300      	movs	r3, #0
 8004680:	73fb      	strb	r3, [r7, #15]
 8004682:	e04a      	b.n	800471a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004684:	7bfa      	ldrb	r2, [r7, #15]
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	4613      	mov	r3, r2
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	1a9b      	subs	r3, r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	333d      	adds	r3, #61	; 0x3d
 8004694:	2201      	movs	r2, #1
 8004696:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004698:	7bfa      	ldrb	r2, [r7, #15]
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	1a9b      	subs	r3, r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	333c      	adds	r3, #60	; 0x3c
 80046a8:	7bfa      	ldrb	r2, [r7, #15]
 80046aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80046ac:	7bfa      	ldrb	r2, [r7, #15]
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
 80046b0:	b298      	uxth	r0, r3
 80046b2:	6879      	ldr	r1, [r7, #4]
 80046b4:	4613      	mov	r3, r2
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	1a9b      	subs	r3, r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	440b      	add	r3, r1
 80046be:	3342      	adds	r3, #66	; 0x42
 80046c0:	4602      	mov	r2, r0
 80046c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80046c4:	7bfa      	ldrb	r2, [r7, #15]
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	4613      	mov	r3, r2
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	1a9b      	subs	r3, r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	440b      	add	r3, r1
 80046d2:	333f      	adds	r3, #63	; 0x3f
 80046d4:	2200      	movs	r2, #0
 80046d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80046d8:	7bfa      	ldrb	r2, [r7, #15]
 80046da:	6879      	ldr	r1, [r7, #4]
 80046dc:	4613      	mov	r3, r2
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	1a9b      	subs	r3, r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	440b      	add	r3, r1
 80046e6:	3344      	adds	r3, #68	; 0x44
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80046ec:	7bfa      	ldrb	r2, [r7, #15]
 80046ee:	6879      	ldr	r1, [r7, #4]
 80046f0:	4613      	mov	r3, r2
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	1a9b      	subs	r3, r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	440b      	add	r3, r1
 80046fa:	3348      	adds	r3, #72	; 0x48
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004700:	7bfa      	ldrb	r2, [r7, #15]
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	4613      	mov	r3, r2
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	3350      	adds	r3, #80	; 0x50
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004714:	7bfb      	ldrb	r3, [r7, #15]
 8004716:	3301      	adds	r3, #1
 8004718:	73fb      	strb	r3, [r7, #15]
 800471a:	7bfa      	ldrb	r2, [r7, #15]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	429a      	cmp	r2, r3
 8004722:	d3af      	bcc.n	8004684 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004724:	2300      	movs	r3, #0
 8004726:	73fb      	strb	r3, [r7, #15]
 8004728:	e044      	b.n	80047b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800472a:	7bfa      	ldrb	r2, [r7, #15]
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	4613      	mov	r3, r2
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	1a9b      	subs	r3, r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	440b      	add	r3, r1
 8004738:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800473c:	2200      	movs	r2, #0
 800473e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004740:	7bfa      	ldrb	r2, [r7, #15]
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	4613      	mov	r3, r2
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	1a9b      	subs	r3, r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004752:	7bfa      	ldrb	r2, [r7, #15]
 8004754:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004756:	7bfa      	ldrb	r2, [r7, #15]
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	4613      	mov	r3, r2
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	1a9b      	subs	r3, r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	440b      	add	r3, r1
 8004764:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004768:	2200      	movs	r2, #0
 800476a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800476c:	7bfa      	ldrb	r2, [r7, #15]
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	4613      	mov	r3, r2
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	1a9b      	subs	r3, r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800477e:	2200      	movs	r2, #0
 8004780:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004782:	7bfa      	ldrb	r2, [r7, #15]
 8004784:	6879      	ldr	r1, [r7, #4]
 8004786:	4613      	mov	r3, r2
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	1a9b      	subs	r3, r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	440b      	add	r3, r1
 8004790:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004798:	7bfa      	ldrb	r2, [r7, #15]
 800479a:	6879      	ldr	r1, [r7, #4]
 800479c:	4613      	mov	r3, r2
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	1a9b      	subs	r3, r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	440b      	add	r3, r1
 80047a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80047aa:	2200      	movs	r2, #0
 80047ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
 80047b0:	3301      	adds	r3, #1
 80047b2:	73fb      	strb	r3, [r7, #15]
 80047b4:	7bfa      	ldrb	r2, [r7, #15]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d3b5      	bcc.n	800472a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	603b      	str	r3, [r7, #0]
 80047c4:	687e      	ldr	r6, [r7, #4]
 80047c6:	466d      	mov	r5, sp
 80047c8:	f106 0410 	add.w	r4, r6, #16
 80047cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80047dc:	1d33      	adds	r3, r6, #4
 80047de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047e0:	6838      	ldr	r0, [r7, #0]
 80047e2:	f002 fefb 	bl	80075dc <USB_DevInit>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e00d      	b.n	8004814 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f003 ff3a 	bl	8008686 <USB_DevDisconnect>

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800481c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004830:	2b01      	cmp	r3, #1
 8004832:	d101      	bne.n	8004838 <HAL_PCD_Start+0x1c>
 8004834:	2302      	movs	r3, #2
 8004836:	e020      	b.n	800487a <HAL_PCD_Start+0x5e>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004844:	2b01      	cmp	r3, #1
 8004846:	d109      	bne.n	800485c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800484c:	2b01      	cmp	r3, #1
 800484e:	d005      	beq.n	800485c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004854:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4618      	mov	r0, r3
 8004862:	f003 fef8 	bl	8008656 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4618      	mov	r0, r3
 800486c:	f002 fe6a 	bl	8007544 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004882:	b590      	push	{r4, r7, lr}
 8004884:	b08d      	sub	sp, #52	; 0x34
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4618      	mov	r0, r3
 800489a:	f003 ff9f 	bl	80087dc <USB_GetMode>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f040 839d 	bne.w	8004fe0 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f003 ff03 	bl	80086b6 <USB_ReadInterrupts>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 8393 	beq.w	8004fde <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4618      	mov	r0, r3
 80048be:	f003 fefa 	bl	80086b6 <USB_ReadInterrupts>
 80048c2:	4603      	mov	r3, r0
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d107      	bne.n	80048dc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	695a      	ldr	r2, [r3, #20]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f002 0202 	and.w	r2, r2, #2
 80048da:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f003 fee8 	bl	80086b6 <USB_ReadInterrupts>
 80048e6:	4603      	mov	r3, r0
 80048e8:	f003 0310 	and.w	r3, r3, #16
 80048ec:	2b10      	cmp	r3, #16
 80048ee:	d161      	bne.n	80049b4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699a      	ldr	r2, [r3, #24]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 0210 	bic.w	r2, r2, #16
 80048fe:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	f003 020f 	and.w	r2, r3, #15
 800490c:	4613      	mov	r3, r2
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	1a9b      	subs	r3, r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	4413      	add	r3, r2
 800491c:	3304      	adds	r3, #4
 800491e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	0c5b      	lsrs	r3, r3, #17
 8004924:	f003 030f 	and.w	r3, r3, #15
 8004928:	2b02      	cmp	r3, #2
 800492a:	d124      	bne.n	8004976 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004932:	4013      	ands	r3, r2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d035      	beq.n	80049a4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	091b      	lsrs	r3, r3, #4
 8004940:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004942:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004946:	b29b      	uxth	r3, r3
 8004948:	461a      	mov	r2, r3
 800494a:	6a38      	ldr	r0, [r7, #32]
 800494c:	f003 fd60 	bl	8008410 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	68da      	ldr	r2, [r3, #12]
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	091b      	lsrs	r3, r3, #4
 8004958:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800495c:	441a      	add	r2, r3
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	699a      	ldr	r2, [r3, #24]
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	091b      	lsrs	r3, r3, #4
 800496a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800496e:	441a      	add	r2, r3
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	619a      	str	r2, [r3, #24]
 8004974:	e016      	b.n	80049a4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	0c5b      	lsrs	r3, r3, #17
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	2b06      	cmp	r3, #6
 8004980:	d110      	bne.n	80049a4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004988:	2208      	movs	r2, #8
 800498a:	4619      	mov	r1, r3
 800498c:	6a38      	ldr	r0, [r7, #32]
 800498e:	f003 fd3f 	bl	8008410 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	699a      	ldr	r2, [r3, #24]
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	091b      	lsrs	r3, r3, #4
 800499a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800499e:	441a      	add	r2, r3
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	699a      	ldr	r2, [r3, #24]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0210 	orr.w	r2, r2, #16
 80049b2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f003 fe7c 	bl	80086b6 <USB_ReadInterrupts>
 80049be:	4603      	mov	r3, r0
 80049c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80049c8:	d16e      	bne.n	8004aa8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f003 fe82 	bl	80086dc <USB_ReadDevAllOutEpInterrupt>
 80049d8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80049da:	e062      	b.n	8004aa2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80049dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d057      	beq.n	8004a96 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ec:	b2d2      	uxtb	r2, r2
 80049ee:	4611      	mov	r1, r2
 80049f0:	4618      	mov	r0, r3
 80049f2:	f003 fea7 	bl	8008744 <USB_ReadDevOutEPInterrupt>
 80049f6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00c      	beq.n	8004a1c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	015a      	lsls	r2, r3, #5
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	4413      	add	r3, r2
 8004a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a0e:	461a      	mov	r2, r3
 8004a10:	2301      	movs	r3, #1
 8004a12:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004a14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fdb0 	bl	800557c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00c      	beq.n	8004a40 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	015a      	lsls	r2, r3, #5
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a32:	461a      	mov	r2, r3
 8004a34:	2308      	movs	r3, #8
 8004a36:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004a38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 feaa 	bl	8005794 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	f003 0310 	and.w	r3, r3, #16
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d008      	beq.n	8004a5c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a56:	461a      	mov	r2, r3
 8004a58:	2310      	movs	r3, #16
 8004a5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	f003 0320 	and.w	r3, r3, #32
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d008      	beq.n	8004a78 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	015a      	lsls	r2, r3, #5
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a72:	461a      	mov	r2, r3
 8004a74:	2320      	movs	r3, #32
 8004a76:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d009      	beq.n	8004a96 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a8e:	461a      	mov	r2, r3
 8004a90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a94:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	3301      	adds	r3, #1
 8004a9a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9e:	085b      	lsrs	r3, r3, #1
 8004aa0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d199      	bne.n	80049dc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f003 fe02 	bl	80086b6 <USB_ReadInterrupts>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ab8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004abc:	f040 80c0 	bne.w	8004c40 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f003 fe23 	bl	8008710 <USB_ReadDevAllInEpInterrupt>
 8004aca:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004ad0:	e0b2      	b.n	8004c38 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 80a7 	beq.w	8004c2c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae4:	b2d2      	uxtb	r2, r2
 8004ae6:	4611      	mov	r1, r2
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f003 fe49 	bl	8008780 <USB_ReadDevInEPInterrupt>
 8004aee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d057      	beq.n	8004baa <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	f003 030f 	and.w	r3, r3, #15
 8004b00:	2201      	movs	r2, #1
 8004b02:	fa02 f303 	lsl.w	r3, r2, r3
 8004b06:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	43db      	mvns	r3, r3
 8004b14:	69f9      	ldr	r1, [r7, #28]
 8004b16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d132      	bne.n	8004b9e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004b38:	6879      	ldr	r1, [r7, #4]
 8004b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	1a9b      	subs	r3, r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	440b      	add	r3, r1
 8004b46:	3348      	adds	r3, #72	; 0x48
 8004b48:	6819      	ldr	r1, [r3, #0]
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b4e:	4613      	mov	r3, r2
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	1a9b      	subs	r3, r3, r2
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4403      	add	r3, r0
 8004b58:	3344      	adds	r3, #68	; 0x44
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4419      	add	r1, r3
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b62:	4613      	mov	r3, r2
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	1a9b      	subs	r3, r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4403      	add	r3, r0
 8004b6c:	3348      	adds	r3, #72	; 0x48
 8004b6e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d113      	bne.n	8004b9e <HAL_PCD_IRQHandler+0x31c>
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	00db      	lsls	r3, r3, #3
 8004b7e:	1a9b      	subs	r3, r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	440b      	add	r3, r1
 8004b84:	3350      	adds	r3, #80	; 0x50
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d108      	bne.n	8004b9e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6818      	ldr	r0, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004b96:	461a      	mov	r2, r3
 8004b98:	2101      	movs	r1, #1
 8004b9a:	f003 fe51 	bl	8008840 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f005 fd6e 	bl	800a686 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f003 0308 	and.w	r3, r3, #8
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d008      	beq.n	8004bc6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	2308      	movs	r3, #8
 8004bc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	f003 0310 	and.w	r3, r3, #16
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d008      	beq.n	8004be2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bdc:	461a      	mov	r2, r3
 8004bde:	2310      	movs	r3, #16
 8004be0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d008      	beq.n	8004bfe <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	015a      	lsls	r2, r3, #5
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	2340      	movs	r3, #64	; 0x40
 8004bfc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d008      	beq.n	8004c1a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c14:	461a      	mov	r2, r3
 8004c16:	2302      	movs	r3, #2
 8004c18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004c24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fc1b 	bl	8005462 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	3301      	adds	r3, #1
 8004c30:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c34:	085b      	lsrs	r3, r3, #1
 8004c36:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f47f af49 	bne.w	8004ad2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f003 fd36 	bl	80086b6 <USB_ReadInterrupts>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c54:	d122      	bne.n	8004c9c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	69fa      	ldr	r2, [r7, #28]
 8004c60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c64:	f023 0301 	bic.w	r3, r3, #1
 8004c68:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d108      	bne.n	8004c86 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fe26 	bl	80058d0 <HAL_PCDEx_LPM_Callback>
 8004c84:	e002      	b.n	8004c8c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f005 fd74 	bl	800a774 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	695a      	ldr	r2, [r3, #20]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004c9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f003 fd08 	bl	80086b6 <USB_ReadInterrupts>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cb0:	d112      	bne.n	8004cd8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d102      	bne.n	8004cc8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f005 fd30 	bl	800a728 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	695a      	ldr	r2, [r3, #20]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004cd6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f003 fcea 	bl	80086b6 <USB_ReadInterrupts>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cec:	f040 80c7 	bne.w	8004e7e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	69fa      	ldr	r2, [r7, #28]
 8004cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cfe:	f023 0301 	bic.w	r3, r3, #1
 8004d02:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2110      	movs	r1, #16
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f002 fdca 	bl	80078a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d10:	2300      	movs	r3, #0
 8004d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d14:	e056      	b.n	8004dc4 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d22:	461a      	mov	r2, r3
 8004d24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d28:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2c:	015a      	lsls	r2, r3, #5
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d3a:	0151      	lsls	r1, r2, #5
 8004d3c:	69fa      	ldr	r2, [r7, #28]
 8004d3e:	440a      	add	r2, r1
 8004d40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d48:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d5a:	0151      	lsls	r1, r2, #5
 8004d5c:	69fa      	ldr	r2, [r7, #28]
 8004d5e:	440a      	add	r2, r1
 8004d60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d68:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d76:	461a      	mov	r2, r3
 8004d78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d7c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d8e:	0151      	lsls	r1, r2, #5
 8004d90:	69fa      	ldr	r2, [r7, #28]
 8004d92:	440a      	add	r2, r1
 8004d94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d9c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dae:	0151      	lsls	r1, r2, #5
 8004db0:	69fa      	ldr	r2, [r7, #28]
 8004db2:	440a      	add	r2, r1
 8004db4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004db8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004dbc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d3a3      	bcc.n	8004d16 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	69fa      	ldr	r2, [r7, #28]
 8004dd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ddc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004de0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d016      	beq.n	8004e18 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004df4:	69fa      	ldr	r2, [r7, #28]
 8004df6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dfa:	f043 030b 	orr.w	r3, r3, #11
 8004dfe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0a:	69fa      	ldr	r2, [r7, #28]
 8004e0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e10:	f043 030b 	orr.w	r3, r3, #11
 8004e14:	6453      	str	r3, [r2, #68]	; 0x44
 8004e16:	e015      	b.n	8004e44 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1e:	695b      	ldr	r3, [r3, #20]
 8004e20:	69fa      	ldr	r2, [r7, #28]
 8004e22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e26:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004e2a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004e2e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	69fa      	ldr	r2, [r7, #28]
 8004e3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e3e:	f043 030b 	orr.w	r3, r3, #11
 8004e42:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	69fa      	ldr	r2, [r7, #28]
 8004e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e52:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004e56:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6818      	ldr	r0, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e68:	461a      	mov	r2, r3
 8004e6a:	f003 fce9 	bl	8008840 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	695a      	ldr	r2, [r3, #20]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004e7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f003 fc17 	bl	80086b6 <USB_ReadInterrupts>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e92:	d124      	bne.n	8004ede <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f003 fcad 	bl	80087f8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f002 fd5f 	bl	8007966 <USB_GetDevSpeed>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	461a      	mov	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681c      	ldr	r4, [r3, #0]
 8004eb4:	f001 f944 	bl	8006140 <HAL_RCC_GetHCLKFreq>
 8004eb8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	f002 fa9c 	bl	8007400 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f005 fc04 	bl	800a6d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	695a      	ldr	r2, [r3, #20]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004edc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f003 fbe7 	bl	80086b6 <USB_ReadInterrupts>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	f003 0308 	and.w	r3, r3, #8
 8004eee:	2b08      	cmp	r3, #8
 8004ef0:	d10a      	bne.n	8004f08 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f005 fbe1 	bl	800a6ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	695a      	ldr	r2, [r3, #20]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f002 0208 	and.w	r2, r2, #8
 8004f06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f003 fbd2 	bl	80086b6 <USB_ReadInterrupts>
 8004f12:	4603      	mov	r3, r0
 8004f14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f1c:	d10f      	bne.n	8004f3e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	4619      	mov	r1, r3
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f005 fc43 	bl	800a7b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	695a      	ldr	r2, [r3, #20]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004f3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f003 fbb7 	bl	80086b6 <USB_ReadInterrupts>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f52:	d10f      	bne.n	8004f74 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f005 fc16 	bl	800a790 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	695a      	ldr	r2, [r3, #20]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004f72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f003 fb9c 	bl	80086b6 <USB_ReadInterrupts>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f88:	d10a      	bne.n	8004fa0 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f005 fc24 	bl	800a7d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	695a      	ldr	r2, [r3, #20]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004f9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f003 fb86 	bl	80086b6 <USB_ReadInterrupts>
 8004faa:	4603      	mov	r3, r0
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d115      	bne.n	8004fe0 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	f003 0304 	and.w	r3, r3, #4
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d002      	beq.n	8004fcc <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f005 fc14 	bl	800a7f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6859      	ldr	r1, [r3, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	605a      	str	r2, [r3, #4]
 8004fdc:	e000      	b.n	8004fe0 <HAL_PCD_IRQHandler+0x75e>
      return;
 8004fde:	bf00      	nop
    }
  }
}
 8004fe0:	3734      	adds	r7, #52	; 0x34
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd90      	pop	{r4, r7, pc}

08004fe6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b082      	sub	sp, #8
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	460b      	mov	r3, r1
 8004ff0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d101      	bne.n	8005000 <HAL_PCD_SetAddress+0x1a>
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	e013      	b.n	8005028 <HAL_PCD_SetAddress+0x42>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	78fa      	ldrb	r2, [r7, #3]
 800500c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	78fa      	ldrb	r2, [r7, #3]
 8005016:	4611      	mov	r1, r2
 8005018:	4618      	mov	r0, r3
 800501a:	f003 faf6 	bl	800860a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3708      	adds	r7, #8
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	4608      	mov	r0, r1
 800503a:	4611      	mov	r1, r2
 800503c:	461a      	mov	r2, r3
 800503e:	4603      	mov	r3, r0
 8005040:	70fb      	strb	r3, [r7, #3]
 8005042:	460b      	mov	r3, r1
 8005044:	803b      	strh	r3, [r7, #0]
 8005046:	4613      	mov	r3, r2
 8005048:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800504a:	2300      	movs	r3, #0
 800504c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800504e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005052:	2b00      	cmp	r3, #0
 8005054:	da0f      	bge.n	8005076 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005056:	78fb      	ldrb	r3, [r7, #3]
 8005058:	f003 020f 	and.w	r2, r3, #15
 800505c:	4613      	mov	r3, r2
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	1a9b      	subs	r3, r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	3338      	adds	r3, #56	; 0x38
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	4413      	add	r3, r2
 800506a:	3304      	adds	r3, #4
 800506c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2201      	movs	r2, #1
 8005072:	705a      	strb	r2, [r3, #1]
 8005074:	e00f      	b.n	8005096 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005076:	78fb      	ldrb	r3, [r7, #3]
 8005078:	f003 020f 	and.w	r2, r3, #15
 800507c:	4613      	mov	r3, r2
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	1a9b      	subs	r3, r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	4413      	add	r3, r2
 800508c:	3304      	adds	r3, #4
 800508e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005096:	78fb      	ldrb	r3, [r7, #3]
 8005098:	f003 030f 	and.w	r3, r3, #15
 800509c:	b2da      	uxtb	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80050a2:	883a      	ldrh	r2, [r7, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	78ba      	ldrb	r2, [r7, #2]
 80050ac:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	785b      	ldrb	r3, [r3, #1]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d004      	beq.n	80050c0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80050c0:	78bb      	ldrb	r3, [r7, #2]
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d102      	bne.n	80050cc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d101      	bne.n	80050da <HAL_PCD_EP_Open+0xaa>
 80050d6:	2302      	movs	r3, #2
 80050d8:	e00e      	b.n	80050f8 <HAL_PCD_EP_Open+0xc8>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68f9      	ldr	r1, [r7, #12]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f002 fc61 	bl	80079b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80050f6:	7afb      	ldrb	r3, [r7, #11]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	460b      	mov	r3, r1
 800510a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800510c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005110:	2b00      	cmp	r3, #0
 8005112:	da0f      	bge.n	8005134 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005114:	78fb      	ldrb	r3, [r7, #3]
 8005116:	f003 020f 	and.w	r2, r3, #15
 800511a:	4613      	mov	r3, r2
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	1a9b      	subs	r3, r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	3338      	adds	r3, #56	; 0x38
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	4413      	add	r3, r2
 8005128:	3304      	adds	r3, #4
 800512a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2201      	movs	r2, #1
 8005130:	705a      	strb	r2, [r3, #1]
 8005132:	e00f      	b.n	8005154 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005134:	78fb      	ldrb	r3, [r7, #3]
 8005136:	f003 020f 	and.w	r2, r3, #15
 800513a:	4613      	mov	r3, r2
 800513c:	00db      	lsls	r3, r3, #3
 800513e:	1a9b      	subs	r3, r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	4413      	add	r3, r2
 800514a:	3304      	adds	r3, #4
 800514c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005154:	78fb      	ldrb	r3, [r7, #3]
 8005156:	f003 030f 	and.w	r3, r3, #15
 800515a:	b2da      	uxtb	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005166:	2b01      	cmp	r3, #1
 8005168:	d101      	bne.n	800516e <HAL_PCD_EP_Close+0x6e>
 800516a:	2302      	movs	r3, #2
 800516c:	e00e      	b.n	800518c <HAL_PCD_EP_Close+0x8c>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68f9      	ldr	r1, [r7, #12]
 800517c:	4618      	mov	r0, r3
 800517e:	f002 fc9f 	bl	8007ac0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b086      	sub	sp, #24
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	607a      	str	r2, [r7, #4]
 800519e:	603b      	str	r3, [r7, #0]
 80051a0:	460b      	mov	r3, r1
 80051a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051a4:	7afb      	ldrb	r3, [r7, #11]
 80051a6:	f003 020f 	and.w	r2, r3, #15
 80051aa:	4613      	mov	r3, r2
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	1a9b      	subs	r3, r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	4413      	add	r3, r2
 80051ba:	3304      	adds	r3, #4
 80051bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2200      	movs	r2, #0
 80051ce:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	2200      	movs	r2, #0
 80051d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051d6:	7afb      	ldrb	r3, [r7, #11]
 80051d8:	f003 030f 	and.w	r3, r3, #15
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d102      	bne.n	80051f0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80051f0:	7afb      	ldrb	r3, [r7, #11]
 80051f2:	f003 030f 	and.w	r3, r3, #15
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d109      	bne.n	800520e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6818      	ldr	r0, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	b2db      	uxtb	r3, r3
 8005204:	461a      	mov	r2, r3
 8005206:	6979      	ldr	r1, [r7, #20]
 8005208:	f002 ff7a 	bl	8008100 <USB_EP0StartXfer>
 800520c:	e008      	b.n	8005220 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6818      	ldr	r0, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	b2db      	uxtb	r3, r3
 8005218:	461a      	mov	r2, r3
 800521a:	6979      	ldr	r1, [r7, #20]
 800521c:	f002 fd2c 	bl	8007c78 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800522a:	b480      	push	{r7}
 800522c:	b083      	sub	sp, #12
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	460b      	mov	r3, r1
 8005234:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005236:	78fb      	ldrb	r3, [r7, #3]
 8005238:	f003 020f 	and.w	r2, r3, #15
 800523c:	6879      	ldr	r1, [r7, #4]
 800523e:	4613      	mov	r3, r2
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	1a9b      	subs	r3, r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	440b      	add	r3, r1
 8005248:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800524c:	681b      	ldr	r3, [r3, #0]
}
 800524e:	4618      	mov	r0, r3
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b086      	sub	sp, #24
 800525e:	af00      	add	r7, sp, #0
 8005260:	60f8      	str	r0, [r7, #12]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	603b      	str	r3, [r7, #0]
 8005266:	460b      	mov	r3, r1
 8005268:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800526a:	7afb      	ldrb	r3, [r7, #11]
 800526c:	f003 020f 	and.w	r2, r3, #15
 8005270:	4613      	mov	r3, r2
 8005272:	00db      	lsls	r3, r3, #3
 8005274:	1a9b      	subs	r3, r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	3338      	adds	r3, #56	; 0x38
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	4413      	add	r3, r2
 800527e:	3304      	adds	r3, #4
 8005280:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2200      	movs	r2, #0
 8005292:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	2201      	movs	r2, #1
 8005298:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800529a:	7afb      	ldrb	r3, [r7, #11]
 800529c:	f003 030f 	and.w	r3, r3, #15
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d102      	bne.n	80052b4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80052b4:	7afb      	ldrb	r3, [r7, #11]
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d109      	bne.n	80052d2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6818      	ldr	r0, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	461a      	mov	r2, r3
 80052ca:	6979      	ldr	r1, [r7, #20]
 80052cc:	f002 ff18 	bl	8008100 <USB_EP0StartXfer>
 80052d0:	e008      	b.n	80052e4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6818      	ldr	r0, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	461a      	mov	r2, r3
 80052de:	6979      	ldr	r1, [r7, #20]
 80052e0:	f002 fcca 	bl	8007c78 <USB_EPStartXfer>
  }

  return HAL_OK;
 80052e4:	2300      	movs	r3, #0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b084      	sub	sp, #16
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	460b      	mov	r3, r1
 80052f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80052fa:	78fb      	ldrb	r3, [r7, #3]
 80052fc:	f003 020f 	and.w	r2, r3, #15
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	429a      	cmp	r2, r3
 8005306:	d901      	bls.n	800530c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e050      	b.n	80053ae <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800530c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005310:	2b00      	cmp	r3, #0
 8005312:	da0f      	bge.n	8005334 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005314:	78fb      	ldrb	r3, [r7, #3]
 8005316:	f003 020f 	and.w	r2, r3, #15
 800531a:	4613      	mov	r3, r2
 800531c:	00db      	lsls	r3, r3, #3
 800531e:	1a9b      	subs	r3, r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	3338      	adds	r3, #56	; 0x38
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	4413      	add	r3, r2
 8005328:	3304      	adds	r3, #4
 800532a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2201      	movs	r2, #1
 8005330:	705a      	strb	r2, [r3, #1]
 8005332:	e00d      	b.n	8005350 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005334:	78fa      	ldrb	r2, [r7, #3]
 8005336:	4613      	mov	r3, r2
 8005338:	00db      	lsls	r3, r3, #3
 800533a:	1a9b      	subs	r3, r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	4413      	add	r3, r2
 8005346:	3304      	adds	r3, #4
 8005348:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2201      	movs	r2, #1
 8005354:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005356:	78fb      	ldrb	r3, [r7, #3]
 8005358:	f003 030f 	and.w	r3, r3, #15
 800535c:	b2da      	uxtb	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005368:	2b01      	cmp	r3, #1
 800536a:	d101      	bne.n	8005370 <HAL_PCD_EP_SetStall+0x82>
 800536c:	2302      	movs	r3, #2
 800536e:	e01e      	b.n	80053ae <HAL_PCD_EP_SetStall+0xc0>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68f9      	ldr	r1, [r7, #12]
 800537e:	4618      	mov	r0, r3
 8005380:	f003 f86f 	bl	8008462 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005384:	78fb      	ldrb	r3, [r7, #3]
 8005386:	f003 030f 	and.w	r3, r3, #15
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10a      	bne.n	80053a4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6818      	ldr	r0, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	b2d9      	uxtb	r1, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800539e:	461a      	mov	r2, r3
 80053a0:	f003 fa4e 	bl	8008840 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b084      	sub	sp, #16
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	460b      	mov	r3, r1
 80053c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80053c2:	78fb      	ldrb	r3, [r7, #3]
 80053c4:	f003 020f 	and.w	r2, r3, #15
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d901      	bls.n	80053d4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e042      	b.n	800545a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80053d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	da0f      	bge.n	80053fc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053dc:	78fb      	ldrb	r3, [r7, #3]
 80053de:	f003 020f 	and.w	r2, r3, #15
 80053e2:	4613      	mov	r3, r2
 80053e4:	00db      	lsls	r3, r3, #3
 80053e6:	1a9b      	subs	r3, r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	3338      	adds	r3, #56	; 0x38
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	4413      	add	r3, r2
 80053f0:	3304      	adds	r3, #4
 80053f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2201      	movs	r2, #1
 80053f8:	705a      	strb	r2, [r3, #1]
 80053fa:	e00f      	b.n	800541c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053fc:	78fb      	ldrb	r3, [r7, #3]
 80053fe:	f003 020f 	and.w	r2, r3, #15
 8005402:	4613      	mov	r3, r2
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	1a9b      	subs	r3, r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	4413      	add	r3, r2
 8005412:	3304      	adds	r3, #4
 8005414:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005422:	78fb      	ldrb	r3, [r7, #3]
 8005424:	f003 030f 	and.w	r3, r3, #15
 8005428:	b2da      	uxtb	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <HAL_PCD_EP_ClrStall+0x86>
 8005438:	2302      	movs	r3, #2
 800543a:	e00e      	b.n	800545a <HAL_PCD_EP_ClrStall+0xa4>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68f9      	ldr	r1, [r7, #12]
 800544a:	4618      	mov	r0, r3
 800544c:	f003 f877 	bl	800853e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b08a      	sub	sp, #40	; 0x28
 8005466:	af02      	add	r7, sp, #8
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	4613      	mov	r3, r2
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	1a9b      	subs	r3, r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	3338      	adds	r3, #56	; 0x38
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	4413      	add	r3, r2
 8005486:	3304      	adds	r3, #4
 8005488:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	699a      	ldr	r2, [r3, #24]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	429a      	cmp	r2, r3
 8005494:	d901      	bls.n	800549a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e06c      	b.n	8005574 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	695a      	ldr	r2, [r3, #20]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	69fa      	ldr	r2, [r7, #28]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d902      	bls.n	80054b6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	3303      	adds	r3, #3
 80054ba:	089b      	lsrs	r3, r3, #2
 80054bc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80054be:	e02b      	b.n	8005518 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	695a      	ldr	r2, [r3, #20]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	69fa      	ldr	r2, [r7, #28]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d902      	bls.n	80054dc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	3303      	adds	r3, #3
 80054e0:	089b      	lsrs	r3, r3, #2
 80054e2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	68d9      	ldr	r1, [r3, #12]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	4603      	mov	r3, r0
 80054fa:	6978      	ldr	r0, [r7, #20]
 80054fc:	f002 ff53 	bl	80083a6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	68da      	ldr	r2, [r3, #12]
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	441a      	add	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	699a      	ldr	r2, [r3, #24]
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	441a      	add	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	4413      	add	r3, r2
 8005520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	b29b      	uxth	r3, r3
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	429a      	cmp	r2, r3
 800552c:	d809      	bhi.n	8005542 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	699a      	ldr	r2, [r3, #24]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005536:	429a      	cmp	r2, r3
 8005538:	d203      	bcs.n	8005542 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1be      	bne.n	80054c0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	695a      	ldr	r2, [r3, #20]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	429a      	cmp	r2, r3
 800554c:	d811      	bhi.n	8005572 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	f003 030f 	and.w	r3, r3, #15
 8005554:	2201      	movs	r2, #1
 8005556:	fa02 f303 	lsl.w	r3, r2, r3
 800555a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005562:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	43db      	mvns	r3, r3
 8005568:	6939      	ldr	r1, [r7, #16]
 800556a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800556e:	4013      	ands	r3, r2
 8005570:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3720      	adds	r7, #32
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	333c      	adds	r3, #60	; 0x3c
 8005594:	3304      	adds	r3, #4
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	f040 80a0 	bne.w	80056f4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f003 0308 	and.w	r3, r3, #8
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d015      	beq.n	80055ea <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	4a72      	ldr	r2, [pc, #456]	; (800578c <PCD_EP_OutXfrComplete_int+0x210>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	f240 80dd 	bls.w	8005782 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 80d7 	beq.w	8005782 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e0:	461a      	mov	r2, r3
 80055e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055e6:	6093      	str	r3, [r2, #8]
 80055e8:	e0cb      	b.n	8005782 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	f003 0320 	and.w	r3, r3, #32
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d009      	beq.n	8005608 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005600:	461a      	mov	r2, r3
 8005602:	2320      	movs	r3, #32
 8005604:	6093      	str	r3, [r2, #8]
 8005606:	e0bc      	b.n	8005782 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800560e:	2b00      	cmp	r3, #0
 8005610:	f040 80b7 	bne.w	8005782 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4a5d      	ldr	r2, [pc, #372]	; (800578c <PCD_EP_OutXfrComplete_int+0x210>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d90f      	bls.n	800563c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00a      	beq.n	800563c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	4413      	add	r3, r2
 800562e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005632:	461a      	mov	r2, r3
 8005634:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005638:	6093      	str	r3, [r2, #8]
 800563a:	e0a2      	b.n	8005782 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800563c:	6879      	ldr	r1, [r7, #4]
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	4613      	mov	r3, r2
 8005642:	00db      	lsls	r3, r3, #3
 8005644:	1a9b      	subs	r3, r3, r2
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	440b      	add	r3, r1
 800564a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800564e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	0159      	lsls	r1, r3, #5
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	440b      	add	r3, r1
 8005658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005662:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	4613      	mov	r3, r2
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	1a9b      	subs	r3, r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4403      	add	r3, r0
 8005672:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005676:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005678:	6879      	ldr	r1, [r7, #4]
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	4613      	mov	r3, r2
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	1a9b      	subs	r3, r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	440b      	add	r3, r1
 8005686:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800568a:	6819      	ldr	r1, [r3, #0]
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	4613      	mov	r3, r2
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	1a9b      	subs	r3, r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4403      	add	r3, r0
 800569a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4419      	add	r1, r3
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	4613      	mov	r3, r2
 80056a8:	00db      	lsls	r3, r3, #3
 80056aa:	1a9b      	subs	r3, r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4403      	add	r3, r0
 80056b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80056b4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d114      	bne.n	80056e6 <PCD_EP_OutXfrComplete_int+0x16a>
 80056bc:	6879      	ldr	r1, [r7, #4]
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	4613      	mov	r3, r2
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	1a9b      	subs	r3, r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	440b      	add	r3, r1
 80056ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d108      	bne.n	80056e6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6818      	ldr	r0, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80056de:	461a      	mov	r2, r3
 80056e0:	2101      	movs	r1, #1
 80056e2:	f003 f8ad 	bl	8008840 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	4619      	mov	r1, r3
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f004 ffaf 	bl	800a650 <HAL_PCD_DataOutStageCallback>
 80056f2:	e046      	b.n	8005782 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4a26      	ldr	r2, [pc, #152]	; (8005790 <PCD_EP_OutXfrComplete_int+0x214>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d124      	bne.n	8005746 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00a      	beq.n	800571c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	4413      	add	r3, r2
 800570e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005712:	461a      	mov	r2, r3
 8005714:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005718:	6093      	str	r3, [r2, #8]
 800571a:	e032      	b.n	8005782 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f003 0320 	and.w	r3, r3, #32
 8005722:	2b00      	cmp	r3, #0
 8005724:	d008      	beq.n	8005738 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	4413      	add	r3, r2
 800572e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005732:	461a      	mov	r2, r3
 8005734:	2320      	movs	r3, #32
 8005736:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	b2db      	uxtb	r3, r3
 800573c:	4619      	mov	r1, r3
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f004 ff86 	bl	800a650 <HAL_PCD_DataOutStageCallback>
 8005744:	e01d      	b.n	8005782 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d114      	bne.n	8005776 <PCD_EP_OutXfrComplete_int+0x1fa>
 800574c:	6879      	ldr	r1, [r7, #4]
 800574e:	683a      	ldr	r2, [r7, #0]
 8005750:	4613      	mov	r3, r2
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	1a9b      	subs	r3, r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	440b      	add	r3, r1
 800575a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d108      	bne.n	8005776 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6818      	ldr	r0, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800576e:	461a      	mov	r2, r3
 8005770:	2100      	movs	r1, #0
 8005772:	f003 f865 	bl	8008840 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	b2db      	uxtb	r3, r3
 800577a:	4619      	mov	r1, r3
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f004 ff67 	bl	800a650 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3718      	adds	r7, #24
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	4f54300a 	.word	0x4f54300a
 8005790:	4f54310a 	.word	0x4f54310a

08005794 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	333c      	adds	r3, #60	; 0x3c
 80057ac:	3304      	adds	r3, #4
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	015a      	lsls	r2, r3, #5
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	4413      	add	r3, r2
 80057ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	4a15      	ldr	r2, [pc, #84]	; (800581c <PCD_EP_OutSetupPacket_int+0x88>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d90e      	bls.n	80057e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d009      	beq.n	80057e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e0:	461a      	mov	r2, r3
 80057e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f004 ff1f 	bl	800a62c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4a0a      	ldr	r2, [pc, #40]	; (800581c <PCD_EP_OutSetupPacket_int+0x88>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d90c      	bls.n	8005810 <PCD_EP_OutSetupPacket_int+0x7c>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d108      	bne.n	8005810 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6818      	ldr	r0, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005808:	461a      	mov	r2, r3
 800580a:	2101      	movs	r1, #1
 800580c:	f003 f818 	bl	8008840 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3718      	adds	r7, #24
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	4f54300a 	.word	0x4f54300a

08005820 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	460b      	mov	r3, r1
 800582a:	70fb      	strb	r3, [r7, #3]
 800582c:	4613      	mov	r3, r2
 800582e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005836:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005838:	78fb      	ldrb	r3, [r7, #3]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d107      	bne.n	800584e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800583e:	883b      	ldrh	r3, [r7, #0]
 8005840:	0419      	lsls	r1, r3, #16
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	430a      	orrs	r2, r1
 800584a:	629a      	str	r2, [r3, #40]	; 0x28
 800584c:	e028      	b.n	80058a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005854:	0c1b      	lsrs	r3, r3, #16
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	4413      	add	r3, r2
 800585a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800585c:	2300      	movs	r3, #0
 800585e:	73fb      	strb	r3, [r7, #15]
 8005860:	e00d      	b.n	800587e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	7bfb      	ldrb	r3, [r7, #15]
 8005868:	3340      	adds	r3, #64	; 0x40
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	0c1b      	lsrs	r3, r3, #16
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	4413      	add	r3, r2
 8005876:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005878:	7bfb      	ldrb	r3, [r7, #15]
 800587a:	3301      	adds	r3, #1
 800587c:	73fb      	strb	r3, [r7, #15]
 800587e:	7bfa      	ldrb	r2, [r7, #15]
 8005880:	78fb      	ldrb	r3, [r7, #3]
 8005882:	3b01      	subs	r3, #1
 8005884:	429a      	cmp	r2, r3
 8005886:	d3ec      	bcc.n	8005862 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005888:	883b      	ldrh	r3, [r7, #0]
 800588a:	0418      	lsls	r0, r3, #16
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6819      	ldr	r1, [r3, #0]
 8005890:	78fb      	ldrb	r3, [r7, #3]
 8005892:	3b01      	subs	r3, #1
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	4302      	orrs	r2, r0
 8005898:	3340      	adds	r3, #64	; 0x40
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	440b      	add	r3, r1
 800589e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b083      	sub	sp, #12
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
 80058b6:	460b      	mov	r3, r1
 80058b8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	887a      	ldrh	r2, [r7, #2]
 80058c0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	460b      	mov	r3, r1
 80058da:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e25b      	b.n	8005db2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d075      	beq.n	80059f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005906:	4ba3      	ldr	r3, [pc, #652]	; (8005b94 <HAL_RCC_OscConfig+0x2ac>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f003 030c 	and.w	r3, r3, #12
 800590e:	2b04      	cmp	r3, #4
 8005910:	d00c      	beq.n	800592c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005912:	4ba0      	ldr	r3, [pc, #640]	; (8005b94 <HAL_RCC_OscConfig+0x2ac>)
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800591a:	2b08      	cmp	r3, #8
 800591c:	d112      	bne.n	8005944 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800591e:	4b9d      	ldr	r3, [pc, #628]	; (8005b94 <HAL_RCC_OscConfig+0x2ac>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005926:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800592a:	d10b      	bne.n	8005944 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800592c:	4b99      	ldr	r3, [pc, #612]	; (8005b94 <HAL_RCC_OscConfig+0x2ac>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d05b      	beq.n	80059f0 <HAL_RCC_OscConfig+0x108>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d157      	bne.n	80059f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e236      	b.n	8005db2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800594c:	d106      	bne.n	800595c <HAL_RCC_OscConfig+0x74>
 800594e:	4b91      	ldr	r3, [pc, #580]	; (8005b94 <HAL_RCC_OscConfig+0x2ac>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a90      	ldr	r2, [pc, #576]	; (8005b94 <HAL_RCC_OscConfig+0x2ac>)
 8005954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005958:	6013      	str	r3, [r2, #0]
 800595a:	e01d      	b.n	8005998 <HAL_RCC_OscConfig+0xb0>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005964:	d10c      	bne.n	8005980 <HAL_RCC_OscConfig+0x98>
 8005966:	4b8b      	ldr	r3, [pc, #556]	; (8005b94 <HAL_RCC_OscConfig+0x2ac>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a8a      	ldr	r2, [pc, #552]	; (8005b94 <HAL_RCC_OscConfig+0x2ac>)
 800596c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005970:	6013      	str	r3, [r2, #0]
 8005972:	4b88      	ldr	r3, [pc, #544]	; (8005b94 <HAL_RCC_OscConfig+0x2ac>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a87      	ldr	r2, [pc, #540]	; (8005b94 <HAL_RCC_OscConfig+0x2ac>)
 8005978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800597c:	6013      	str	r3, [r2, #0]
 800597e:	e00b      	b.n	8005998 <HAL_RCC_OscConfig+0xb0>
 8005980:	4b84      	ldr	r3, [pc, #528]	; (8005b94 <HAL_RCC_OscConfig+0x2ac>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a83      	ldr	r2, [pc, #524]	; (8005b94 <HAL_RCC_OscConfig+0x2ac>)
 8005986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800598a:	6013      	str	r3, [r2, #0]
 800598c:	4b81      	ldr	r3, [pc, #516]	; (8005b94 <HAL_RCC_OscConfig+0x2ac>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a80      	ldr	r2, [pc, #512]	; (8005b94 <HAL_RCC_OscConfig+0x2ac>)
 8005992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005996:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d013      	beq.n	80059c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a0:	f7fb fd6e 	bl	8001480 <HAL_GetTick>
 80059a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059a6:	e008      	b.n	80059ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059a8:	f7fb fd6a 	bl	8001480 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b64      	cmp	r3, #100	; 0x64
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e1fb      	b.n	8005db2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ba:	4b76      	ldr	r3, [pc, #472]	; (8005b94 <HAL_RCC_OscConfig+0x2ac>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d0f0      	beq.n	80059a8 <HAL_RCC_OscConfig+0xc0>
 80059c6:	e014      	b.n	80059f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c8:	f7fb fd5a 	bl	8001480 <HAL_GetTick>
 80059cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059ce:	e008      	b.n	80059e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059d0:	f7fb fd56 	bl	8001480 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b64      	cmp	r3, #100	; 0x64
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e1e7      	b.n	8005db2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059e2:	4b6c      	ldr	r3, [pc, #432]	; (8005b94 <HAL_RCC_OscConfig+0x2ac>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1f0      	bne.n	80059d0 <HAL_RCC_OscConfig+0xe8>
 80059ee:	e000      	b.n	80059f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d063      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80059fe:	4b65      	ldr	r3, [pc, #404]	; (8005b94 <HAL_RCC_OscConfig+0x2ac>)
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f003 030c 	and.w	r3, r3, #12
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00b      	beq.n	8005a22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a0a:	4b62      	ldr	r3, [pc, #392]	; (8005b94 <HAL_RCC_OscConfig+0x2ac>)
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a12:	2b08      	cmp	r3, #8
 8005a14:	d11c      	bne.n	8005a50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a16:	4b5f      	ldr	r3, [pc, #380]	; (8005b94 <HAL_RCC_OscConfig+0x2ac>)
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d116      	bne.n	8005a50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a22:	4b5c      	ldr	r3, [pc, #368]	; (8005b94 <HAL_RCC_OscConfig+0x2ac>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d005      	beq.n	8005a3a <HAL_RCC_OscConfig+0x152>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d001      	beq.n	8005a3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e1bb      	b.n	8005db2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a3a:	4b56      	ldr	r3, [pc, #344]	; (8005b94 <HAL_RCC_OscConfig+0x2ac>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	4952      	ldr	r1, [pc, #328]	; (8005b94 <HAL_RCC_OscConfig+0x2ac>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a4e:	e03a      	b.n	8005ac6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d020      	beq.n	8005a9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a58:	4b4f      	ldr	r3, [pc, #316]	; (8005b98 <HAL_RCC_OscConfig+0x2b0>)
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a5e:	f7fb fd0f 	bl	8001480 <HAL_GetTick>
 8005a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a64:	e008      	b.n	8005a78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a66:	f7fb fd0b 	bl	8001480 <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d901      	bls.n	8005a78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e19c      	b.n	8005db2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a78:	4b46      	ldr	r3, [pc, #280]	; (8005b94 <HAL_RCC_OscConfig+0x2ac>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d0f0      	beq.n	8005a66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a84:	4b43      	ldr	r3, [pc, #268]	; (8005b94 <HAL_RCC_OscConfig+0x2ac>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	4940      	ldr	r1, [pc, #256]	; (8005b94 <HAL_RCC_OscConfig+0x2ac>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	600b      	str	r3, [r1, #0]
 8005a98:	e015      	b.n	8005ac6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a9a:	4b3f      	ldr	r3, [pc, #252]	; (8005b98 <HAL_RCC_OscConfig+0x2b0>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa0:	f7fb fcee 	bl	8001480 <HAL_GetTick>
 8005aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aa6:	e008      	b.n	8005aba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005aa8:	f7fb fcea 	bl	8001480 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e17b      	b.n	8005db2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aba:	4b36      	ldr	r3, [pc, #216]	; (8005b94 <HAL_RCC_OscConfig+0x2ac>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1f0      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0308 	and.w	r3, r3, #8
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d030      	beq.n	8005b34 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d016      	beq.n	8005b08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ada:	4b30      	ldr	r3, [pc, #192]	; (8005b9c <HAL_RCC_OscConfig+0x2b4>)
 8005adc:	2201      	movs	r2, #1
 8005ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae0:	f7fb fcce 	bl	8001480 <HAL_GetTick>
 8005ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ae6:	e008      	b.n	8005afa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ae8:	f7fb fcca 	bl	8001480 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e15b      	b.n	8005db2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005afa:	4b26      	ldr	r3, [pc, #152]	; (8005b94 <HAL_RCC_OscConfig+0x2ac>)
 8005afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0f0      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x200>
 8005b06:	e015      	b.n	8005b34 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b08:	4b24      	ldr	r3, [pc, #144]	; (8005b9c <HAL_RCC_OscConfig+0x2b4>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b0e:	f7fb fcb7 	bl	8001480 <HAL_GetTick>
 8005b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b14:	e008      	b.n	8005b28 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b16:	f7fb fcb3 	bl	8001480 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d901      	bls.n	8005b28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e144      	b.n	8005db2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b28:	4b1a      	ldr	r3, [pc, #104]	; (8005b94 <HAL_RCC_OscConfig+0x2ac>)
 8005b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1f0      	bne.n	8005b16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0304 	and.w	r3, r3, #4
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f000 80a0 	beq.w	8005c82 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b42:	2300      	movs	r3, #0
 8005b44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b46:	4b13      	ldr	r3, [pc, #76]	; (8005b94 <HAL_RCC_OscConfig+0x2ac>)
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10f      	bne.n	8005b72 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b52:	2300      	movs	r3, #0
 8005b54:	60bb      	str	r3, [r7, #8]
 8005b56:	4b0f      	ldr	r3, [pc, #60]	; (8005b94 <HAL_RCC_OscConfig+0x2ac>)
 8005b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5a:	4a0e      	ldr	r2, [pc, #56]	; (8005b94 <HAL_RCC_OscConfig+0x2ac>)
 8005b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b60:	6413      	str	r3, [r2, #64]	; 0x40
 8005b62:	4b0c      	ldr	r3, [pc, #48]	; (8005b94 <HAL_RCC_OscConfig+0x2ac>)
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b6a:	60bb      	str	r3, [r7, #8]
 8005b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b72:	4b0b      	ldr	r3, [pc, #44]	; (8005ba0 <HAL_RCC_OscConfig+0x2b8>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d121      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b7e:	4b08      	ldr	r3, [pc, #32]	; (8005ba0 <HAL_RCC_OscConfig+0x2b8>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a07      	ldr	r2, [pc, #28]	; (8005ba0 <HAL_RCC_OscConfig+0x2b8>)
 8005b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b8a:	f7fb fc79 	bl	8001480 <HAL_GetTick>
 8005b8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b90:	e011      	b.n	8005bb6 <HAL_RCC_OscConfig+0x2ce>
 8005b92:	bf00      	nop
 8005b94:	40023800 	.word	0x40023800
 8005b98:	42470000 	.word	0x42470000
 8005b9c:	42470e80 	.word	0x42470e80
 8005ba0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ba4:	f7fb fc6c 	bl	8001480 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e0fd      	b.n	8005db2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bb6:	4b81      	ldr	r3, [pc, #516]	; (8005dbc <HAL_RCC_OscConfig+0x4d4>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0f0      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d106      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x2f0>
 8005bca:	4b7d      	ldr	r3, [pc, #500]	; (8005dc0 <HAL_RCC_OscConfig+0x4d8>)
 8005bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bce:	4a7c      	ldr	r2, [pc, #496]	; (8005dc0 <HAL_RCC_OscConfig+0x4d8>)
 8005bd0:	f043 0301 	orr.w	r3, r3, #1
 8005bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8005bd6:	e01c      	b.n	8005c12 <HAL_RCC_OscConfig+0x32a>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	2b05      	cmp	r3, #5
 8005bde:	d10c      	bne.n	8005bfa <HAL_RCC_OscConfig+0x312>
 8005be0:	4b77      	ldr	r3, [pc, #476]	; (8005dc0 <HAL_RCC_OscConfig+0x4d8>)
 8005be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be4:	4a76      	ldr	r2, [pc, #472]	; (8005dc0 <HAL_RCC_OscConfig+0x4d8>)
 8005be6:	f043 0304 	orr.w	r3, r3, #4
 8005bea:	6713      	str	r3, [r2, #112]	; 0x70
 8005bec:	4b74      	ldr	r3, [pc, #464]	; (8005dc0 <HAL_RCC_OscConfig+0x4d8>)
 8005bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf0:	4a73      	ldr	r2, [pc, #460]	; (8005dc0 <HAL_RCC_OscConfig+0x4d8>)
 8005bf2:	f043 0301 	orr.w	r3, r3, #1
 8005bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8005bf8:	e00b      	b.n	8005c12 <HAL_RCC_OscConfig+0x32a>
 8005bfa:	4b71      	ldr	r3, [pc, #452]	; (8005dc0 <HAL_RCC_OscConfig+0x4d8>)
 8005bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfe:	4a70      	ldr	r2, [pc, #448]	; (8005dc0 <HAL_RCC_OscConfig+0x4d8>)
 8005c00:	f023 0301 	bic.w	r3, r3, #1
 8005c04:	6713      	str	r3, [r2, #112]	; 0x70
 8005c06:	4b6e      	ldr	r3, [pc, #440]	; (8005dc0 <HAL_RCC_OscConfig+0x4d8>)
 8005c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0a:	4a6d      	ldr	r2, [pc, #436]	; (8005dc0 <HAL_RCC_OscConfig+0x4d8>)
 8005c0c:	f023 0304 	bic.w	r3, r3, #4
 8005c10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d015      	beq.n	8005c46 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c1a:	f7fb fc31 	bl	8001480 <HAL_GetTick>
 8005c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c20:	e00a      	b.n	8005c38 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c22:	f7fb fc2d 	bl	8001480 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d901      	bls.n	8005c38 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e0bc      	b.n	8005db2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c38:	4b61      	ldr	r3, [pc, #388]	; (8005dc0 <HAL_RCC_OscConfig+0x4d8>)
 8005c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d0ee      	beq.n	8005c22 <HAL_RCC_OscConfig+0x33a>
 8005c44:	e014      	b.n	8005c70 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c46:	f7fb fc1b 	bl	8001480 <HAL_GetTick>
 8005c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c4c:	e00a      	b.n	8005c64 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c4e:	f7fb fc17 	bl	8001480 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d901      	bls.n	8005c64 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e0a6      	b.n	8005db2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c64:	4b56      	ldr	r3, [pc, #344]	; (8005dc0 <HAL_RCC_OscConfig+0x4d8>)
 8005c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1ee      	bne.n	8005c4e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c70:	7dfb      	ldrb	r3, [r7, #23]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d105      	bne.n	8005c82 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c76:	4b52      	ldr	r3, [pc, #328]	; (8005dc0 <HAL_RCC_OscConfig+0x4d8>)
 8005c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7a:	4a51      	ldr	r2, [pc, #324]	; (8005dc0 <HAL_RCC_OscConfig+0x4d8>)
 8005c7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f000 8092 	beq.w	8005db0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c8c:	4b4c      	ldr	r3, [pc, #304]	; (8005dc0 <HAL_RCC_OscConfig+0x4d8>)
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	f003 030c 	and.w	r3, r3, #12
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	d05c      	beq.n	8005d52 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d141      	bne.n	8005d24 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ca0:	4b48      	ldr	r3, [pc, #288]	; (8005dc4 <HAL_RCC_OscConfig+0x4dc>)
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ca6:	f7fb fbeb 	bl	8001480 <HAL_GetTick>
 8005caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cac:	e008      	b.n	8005cc0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cae:	f7fb fbe7 	bl	8001480 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d901      	bls.n	8005cc0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e078      	b.n	8005db2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cc0:	4b3f      	ldr	r3, [pc, #252]	; (8005dc0 <HAL_RCC_OscConfig+0x4d8>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1f0      	bne.n	8005cae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	69da      	ldr	r2, [r3, #28]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a1b      	ldr	r3, [r3, #32]
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	019b      	lsls	r3, r3, #6
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce2:	085b      	lsrs	r3, r3, #1
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	041b      	lsls	r3, r3, #16
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cee:	061b      	lsls	r3, r3, #24
 8005cf0:	4933      	ldr	r1, [pc, #204]	; (8005dc0 <HAL_RCC_OscConfig+0x4d8>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cf6:	4b33      	ldr	r3, [pc, #204]	; (8005dc4 <HAL_RCC_OscConfig+0x4dc>)
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cfc:	f7fb fbc0 	bl	8001480 <HAL_GetTick>
 8005d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d02:	e008      	b.n	8005d16 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d04:	f7fb fbbc 	bl	8001480 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e04d      	b.n	8005db2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d16:	4b2a      	ldr	r3, [pc, #168]	; (8005dc0 <HAL_RCC_OscConfig+0x4d8>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d0f0      	beq.n	8005d04 <HAL_RCC_OscConfig+0x41c>
 8005d22:	e045      	b.n	8005db0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d24:	4b27      	ldr	r3, [pc, #156]	; (8005dc4 <HAL_RCC_OscConfig+0x4dc>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d2a:	f7fb fba9 	bl	8001480 <HAL_GetTick>
 8005d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d30:	e008      	b.n	8005d44 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d32:	f7fb fba5 	bl	8001480 <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d901      	bls.n	8005d44 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e036      	b.n	8005db2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d44:	4b1e      	ldr	r3, [pc, #120]	; (8005dc0 <HAL_RCC_OscConfig+0x4d8>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1f0      	bne.n	8005d32 <HAL_RCC_OscConfig+0x44a>
 8005d50:	e02e      	b.n	8005db0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d101      	bne.n	8005d5e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e029      	b.n	8005db2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d5e:	4b18      	ldr	r3, [pc, #96]	; (8005dc0 <HAL_RCC_OscConfig+0x4d8>)
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d11c      	bne.n	8005dac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d115      	bne.n	8005dac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d86:	4013      	ands	r3, r2
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d10d      	bne.n	8005dac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d106      	bne.n	8005dac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d001      	beq.n	8005db0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e000      	b.n	8005db2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3718      	adds	r7, #24
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	40007000 	.word	0x40007000
 8005dc0:	40023800 	.word	0x40023800
 8005dc4:	42470060 	.word	0x42470060

08005dc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d101      	bne.n	8005ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e0cc      	b.n	8005f76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ddc:	4b68      	ldr	r3, [pc, #416]	; (8005f80 <HAL_RCC_ClockConfig+0x1b8>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 030f 	and.w	r3, r3, #15
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d90c      	bls.n	8005e04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dea:	4b65      	ldr	r3, [pc, #404]	; (8005f80 <HAL_RCC_ClockConfig+0x1b8>)
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	b2d2      	uxtb	r2, r2
 8005df0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005df2:	4b63      	ldr	r3, [pc, #396]	; (8005f80 <HAL_RCC_ClockConfig+0x1b8>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 030f 	and.w	r3, r3, #15
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d001      	beq.n	8005e04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e0b8      	b.n	8005f76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0302 	and.w	r3, r3, #2
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d020      	beq.n	8005e52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0304 	and.w	r3, r3, #4
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d005      	beq.n	8005e28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e1c:	4b59      	ldr	r3, [pc, #356]	; (8005f84 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	4a58      	ldr	r2, [pc, #352]	; (8005f84 <HAL_RCC_ClockConfig+0x1bc>)
 8005e22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0308 	and.w	r3, r3, #8
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d005      	beq.n	8005e40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e34:	4b53      	ldr	r3, [pc, #332]	; (8005f84 <HAL_RCC_ClockConfig+0x1bc>)
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	4a52      	ldr	r2, [pc, #328]	; (8005f84 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e40:	4b50      	ldr	r3, [pc, #320]	; (8005f84 <HAL_RCC_ClockConfig+0x1bc>)
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	494d      	ldr	r1, [pc, #308]	; (8005f84 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d044      	beq.n	8005ee8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d107      	bne.n	8005e76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e66:	4b47      	ldr	r3, [pc, #284]	; (8005f84 <HAL_RCC_ClockConfig+0x1bc>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d119      	bne.n	8005ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e07f      	b.n	8005f76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d003      	beq.n	8005e86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e82:	2b03      	cmp	r3, #3
 8005e84:	d107      	bne.n	8005e96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e86:	4b3f      	ldr	r3, [pc, #252]	; (8005f84 <HAL_RCC_ClockConfig+0x1bc>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d109      	bne.n	8005ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e06f      	b.n	8005f76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e96:	4b3b      	ldr	r3, [pc, #236]	; (8005f84 <HAL_RCC_ClockConfig+0x1bc>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 0302 	and.w	r3, r3, #2
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e067      	b.n	8005f76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ea6:	4b37      	ldr	r3, [pc, #220]	; (8005f84 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f023 0203 	bic.w	r2, r3, #3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	4934      	ldr	r1, [pc, #208]	; (8005f84 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005eb8:	f7fb fae2 	bl	8001480 <HAL_GetTick>
 8005ebc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ebe:	e00a      	b.n	8005ed6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ec0:	f7fb fade 	bl	8001480 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e04f      	b.n	8005f76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ed6:	4b2b      	ldr	r3, [pc, #172]	; (8005f84 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f003 020c 	and.w	r2, r3, #12
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d1eb      	bne.n	8005ec0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ee8:	4b25      	ldr	r3, [pc, #148]	; (8005f80 <HAL_RCC_ClockConfig+0x1b8>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 030f 	and.w	r3, r3, #15
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d20c      	bcs.n	8005f10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ef6:	4b22      	ldr	r3, [pc, #136]	; (8005f80 <HAL_RCC_ClockConfig+0x1b8>)
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	b2d2      	uxtb	r2, r2
 8005efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005efe:	4b20      	ldr	r3, [pc, #128]	; (8005f80 <HAL_RCC_ClockConfig+0x1b8>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 030f 	and.w	r3, r3, #15
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d001      	beq.n	8005f10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e032      	b.n	8005f76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0304 	and.w	r3, r3, #4
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d008      	beq.n	8005f2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f1c:	4b19      	ldr	r3, [pc, #100]	; (8005f84 <HAL_RCC_ClockConfig+0x1bc>)
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	4916      	ldr	r1, [pc, #88]	; (8005f84 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0308 	and.w	r3, r3, #8
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d009      	beq.n	8005f4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f3a:	4b12      	ldr	r3, [pc, #72]	; (8005f84 <HAL_RCC_ClockConfig+0x1bc>)
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	490e      	ldr	r1, [pc, #56]	; (8005f84 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f4e:	f000 f821 	bl	8005f94 <HAL_RCC_GetSysClockFreq>
 8005f52:	4601      	mov	r1, r0
 8005f54:	4b0b      	ldr	r3, [pc, #44]	; (8005f84 <HAL_RCC_ClockConfig+0x1bc>)
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	091b      	lsrs	r3, r3, #4
 8005f5a:	f003 030f 	and.w	r3, r3, #15
 8005f5e:	4a0a      	ldr	r2, [pc, #40]	; (8005f88 <HAL_RCC_ClockConfig+0x1c0>)
 8005f60:	5cd3      	ldrb	r3, [r2, r3]
 8005f62:	fa21 f303 	lsr.w	r3, r1, r3
 8005f66:	4a09      	ldr	r2, [pc, #36]	; (8005f8c <HAL_RCC_ClockConfig+0x1c4>)
 8005f68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f6a:	4b09      	ldr	r3, [pc, #36]	; (8005f90 <HAL_RCC_ClockConfig+0x1c8>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7fb fa42 	bl	80013f8 <HAL_InitTick>

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	40023c00 	.word	0x40023c00
 8005f84:	40023800 	.word	0x40023800
 8005f88:	0800b484 	.word	0x0800b484
 8005f8c:	20000004 	.word	0x20000004
 8005f90:	20000008 	.word	0x20000008

08005f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	607b      	str	r3, [r7, #4]
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	60fb      	str	r3, [r7, #12]
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005faa:	4b63      	ldr	r3, [pc, #396]	; (8006138 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f003 030c 	and.w	r3, r3, #12
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	d007      	beq.n	8005fc6 <HAL_RCC_GetSysClockFreq+0x32>
 8005fb6:	2b08      	cmp	r3, #8
 8005fb8:	d008      	beq.n	8005fcc <HAL_RCC_GetSysClockFreq+0x38>
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f040 80b4 	bne.w	8006128 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005fc0:	4b5e      	ldr	r3, [pc, #376]	; (800613c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005fc2:	60bb      	str	r3, [r7, #8]
       break;
 8005fc4:	e0b3      	b.n	800612e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005fc6:	4b5d      	ldr	r3, [pc, #372]	; (800613c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005fc8:	60bb      	str	r3, [r7, #8]
      break;
 8005fca:	e0b0      	b.n	800612e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fcc:	4b5a      	ldr	r3, [pc, #360]	; (8006138 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fd4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fd6:	4b58      	ldr	r3, [pc, #352]	; (8006138 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d04a      	beq.n	8006078 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fe2:	4b55      	ldr	r3, [pc, #340]	; (8006138 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	099b      	lsrs	r3, r3, #6
 8005fe8:	f04f 0400 	mov.w	r4, #0
 8005fec:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005ff0:	f04f 0200 	mov.w	r2, #0
 8005ff4:	ea03 0501 	and.w	r5, r3, r1
 8005ff8:	ea04 0602 	and.w	r6, r4, r2
 8005ffc:	4629      	mov	r1, r5
 8005ffe:	4632      	mov	r2, r6
 8006000:	f04f 0300 	mov.w	r3, #0
 8006004:	f04f 0400 	mov.w	r4, #0
 8006008:	0154      	lsls	r4, r2, #5
 800600a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800600e:	014b      	lsls	r3, r1, #5
 8006010:	4619      	mov	r1, r3
 8006012:	4622      	mov	r2, r4
 8006014:	1b49      	subs	r1, r1, r5
 8006016:	eb62 0206 	sbc.w	r2, r2, r6
 800601a:	f04f 0300 	mov.w	r3, #0
 800601e:	f04f 0400 	mov.w	r4, #0
 8006022:	0194      	lsls	r4, r2, #6
 8006024:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006028:	018b      	lsls	r3, r1, #6
 800602a:	1a5b      	subs	r3, r3, r1
 800602c:	eb64 0402 	sbc.w	r4, r4, r2
 8006030:	f04f 0100 	mov.w	r1, #0
 8006034:	f04f 0200 	mov.w	r2, #0
 8006038:	00e2      	lsls	r2, r4, #3
 800603a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800603e:	00d9      	lsls	r1, r3, #3
 8006040:	460b      	mov	r3, r1
 8006042:	4614      	mov	r4, r2
 8006044:	195b      	adds	r3, r3, r5
 8006046:	eb44 0406 	adc.w	r4, r4, r6
 800604a:	f04f 0100 	mov.w	r1, #0
 800604e:	f04f 0200 	mov.w	r2, #0
 8006052:	02a2      	lsls	r2, r4, #10
 8006054:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006058:	0299      	lsls	r1, r3, #10
 800605a:	460b      	mov	r3, r1
 800605c:	4614      	mov	r4, r2
 800605e:	4618      	mov	r0, r3
 8006060:	4621      	mov	r1, r4
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f04f 0400 	mov.w	r4, #0
 8006068:	461a      	mov	r2, r3
 800606a:	4623      	mov	r3, r4
 800606c:	f7fa f908 	bl	8000280 <__aeabi_uldivmod>
 8006070:	4603      	mov	r3, r0
 8006072:	460c      	mov	r4, r1
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	e049      	b.n	800610c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006078:	4b2f      	ldr	r3, [pc, #188]	; (8006138 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	099b      	lsrs	r3, r3, #6
 800607e:	f04f 0400 	mov.w	r4, #0
 8006082:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006086:	f04f 0200 	mov.w	r2, #0
 800608a:	ea03 0501 	and.w	r5, r3, r1
 800608e:	ea04 0602 	and.w	r6, r4, r2
 8006092:	4629      	mov	r1, r5
 8006094:	4632      	mov	r2, r6
 8006096:	f04f 0300 	mov.w	r3, #0
 800609a:	f04f 0400 	mov.w	r4, #0
 800609e:	0154      	lsls	r4, r2, #5
 80060a0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80060a4:	014b      	lsls	r3, r1, #5
 80060a6:	4619      	mov	r1, r3
 80060a8:	4622      	mov	r2, r4
 80060aa:	1b49      	subs	r1, r1, r5
 80060ac:	eb62 0206 	sbc.w	r2, r2, r6
 80060b0:	f04f 0300 	mov.w	r3, #0
 80060b4:	f04f 0400 	mov.w	r4, #0
 80060b8:	0194      	lsls	r4, r2, #6
 80060ba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80060be:	018b      	lsls	r3, r1, #6
 80060c0:	1a5b      	subs	r3, r3, r1
 80060c2:	eb64 0402 	sbc.w	r4, r4, r2
 80060c6:	f04f 0100 	mov.w	r1, #0
 80060ca:	f04f 0200 	mov.w	r2, #0
 80060ce:	00e2      	lsls	r2, r4, #3
 80060d0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80060d4:	00d9      	lsls	r1, r3, #3
 80060d6:	460b      	mov	r3, r1
 80060d8:	4614      	mov	r4, r2
 80060da:	195b      	adds	r3, r3, r5
 80060dc:	eb44 0406 	adc.w	r4, r4, r6
 80060e0:	f04f 0100 	mov.w	r1, #0
 80060e4:	f04f 0200 	mov.w	r2, #0
 80060e8:	02a2      	lsls	r2, r4, #10
 80060ea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80060ee:	0299      	lsls	r1, r3, #10
 80060f0:	460b      	mov	r3, r1
 80060f2:	4614      	mov	r4, r2
 80060f4:	4618      	mov	r0, r3
 80060f6:	4621      	mov	r1, r4
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f04f 0400 	mov.w	r4, #0
 80060fe:	461a      	mov	r2, r3
 8006100:	4623      	mov	r3, r4
 8006102:	f7fa f8bd 	bl	8000280 <__aeabi_uldivmod>
 8006106:	4603      	mov	r3, r0
 8006108:	460c      	mov	r4, r1
 800610a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800610c:	4b0a      	ldr	r3, [pc, #40]	; (8006138 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	0c1b      	lsrs	r3, r3, #16
 8006112:	f003 0303 	and.w	r3, r3, #3
 8006116:	3301      	adds	r3, #1
 8006118:	005b      	lsls	r3, r3, #1
 800611a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	fbb2 f3f3 	udiv	r3, r2, r3
 8006124:	60bb      	str	r3, [r7, #8]
      break;
 8006126:	e002      	b.n	800612e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006128:	4b04      	ldr	r3, [pc, #16]	; (800613c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800612a:	60bb      	str	r3, [r7, #8]
      break;
 800612c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800612e:	68bb      	ldr	r3, [r7, #8]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3714      	adds	r7, #20
 8006134:	46bd      	mov	sp, r7
 8006136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006138:	40023800 	.word	0x40023800
 800613c:	00f42400 	.word	0x00f42400

08006140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006140:	b480      	push	{r7}
 8006142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006144:	4b03      	ldr	r3, [pc, #12]	; (8006154 <HAL_RCC_GetHCLKFreq+0x14>)
 8006146:	681b      	ldr	r3, [r3, #0]
}
 8006148:	4618      	mov	r0, r3
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	20000004 	.word	0x20000004

08006158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800615c:	f7ff fff0 	bl	8006140 <HAL_RCC_GetHCLKFreq>
 8006160:	4601      	mov	r1, r0
 8006162:	4b05      	ldr	r3, [pc, #20]	; (8006178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	0a9b      	lsrs	r3, r3, #10
 8006168:	f003 0307 	and.w	r3, r3, #7
 800616c:	4a03      	ldr	r2, [pc, #12]	; (800617c <HAL_RCC_GetPCLK1Freq+0x24>)
 800616e:	5cd3      	ldrb	r3, [r2, r3]
 8006170:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006174:	4618      	mov	r0, r3
 8006176:	bd80      	pop	{r7, pc}
 8006178:	40023800 	.word	0x40023800
 800617c:	0800b494 	.word	0x0800b494

08006180 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006188:	2300      	movs	r3, #0
 800618a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0301 	and.w	r3, r3, #1
 8006198:	2b00      	cmp	r3, #0
 800619a:	d105      	bne.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d035      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80061a8:	4b62      	ldr	r3, [pc, #392]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80061ae:	f7fb f967 	bl	8001480 <HAL_GetTick>
 80061b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061b4:	e008      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80061b6:	f7fb f963 	bl	8001480 <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d901      	bls.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e0b0      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061c8:	4b5b      	ldr	r3, [pc, #364]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1f0      	bne.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	019a      	lsls	r2, r3, #6
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	071b      	lsls	r3, r3, #28
 80061e0:	4955      	ldr	r1, [pc, #340]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80061e8:	4b52      	ldr	r3, [pc, #328]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80061ea:	2201      	movs	r2, #1
 80061ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80061ee:	f7fb f947 	bl	8001480 <HAL_GetTick>
 80061f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80061f4:	e008      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80061f6:	f7fb f943 	bl	8001480 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	2b02      	cmp	r3, #2
 8006202:	d901      	bls.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e090      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006208:	4b4b      	ldr	r3, [pc, #300]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d0f0      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 8083 	beq.w	8006328 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006222:	2300      	movs	r3, #0
 8006224:	60fb      	str	r3, [r7, #12]
 8006226:	4b44      	ldr	r3, [pc, #272]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622a:	4a43      	ldr	r2, [pc, #268]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800622c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006230:	6413      	str	r3, [r2, #64]	; 0x40
 8006232:	4b41      	ldr	r3, [pc, #260]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800623e:	4b3f      	ldr	r3, [pc, #252]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a3e      	ldr	r2, [pc, #248]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006248:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800624a:	f7fb f919 	bl	8001480 <HAL_GetTick>
 800624e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006250:	e008      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006252:	f7fb f915 	bl	8001480 <HAL_GetTick>
 8006256:	4602      	mov	r2, r0
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	2b02      	cmp	r3, #2
 800625e:	d901      	bls.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	e062      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006264:	4b35      	ldr	r3, [pc, #212]	; (800633c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626c:	2b00      	cmp	r3, #0
 800626e:	d0f0      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006270:	4b31      	ldr	r3, [pc, #196]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006274:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006278:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d02f      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	429a      	cmp	r2, r3
 800628c:	d028      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800628e:	4b2a      	ldr	r3, [pc, #168]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006296:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006298:	4b29      	ldr	r3, [pc, #164]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800629a:	2201      	movs	r2, #1
 800629c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800629e:	4b28      	ldr	r3, [pc, #160]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80062a0:	2200      	movs	r2, #0
 80062a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80062a4:	4a24      	ldr	r2, [pc, #144]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80062aa:	4b23      	ldr	r3, [pc, #140]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d114      	bne.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80062b6:	f7fb f8e3 	bl	8001480 <HAL_GetTick>
 80062ba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062bc:	e00a      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062be:	f7fb f8df 	bl	8001480 <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d901      	bls.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e02a      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062d4:	4b18      	ldr	r3, [pc, #96]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d8:	f003 0302 	and.w	r3, r3, #2
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d0ee      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062ec:	d10d      	bne.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80062ee:	4b12      	ldr	r3, [pc, #72]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80062fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006302:	490d      	ldr	r1, [pc, #52]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006304:	4313      	orrs	r3, r2
 8006306:	608b      	str	r3, [r1, #8]
 8006308:	e005      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800630a:	4b0b      	ldr	r3, [pc, #44]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	4a0a      	ldr	r2, [pc, #40]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006310:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006314:	6093      	str	r3, [r2, #8]
 8006316:	4b08      	ldr	r3, [pc, #32]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006318:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006322:	4905      	ldr	r1, [pc, #20]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006324:	4313      	orrs	r3, r2
 8006326:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3718      	adds	r7, #24
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	42470068 	.word	0x42470068
 8006338:	40023800 	.word	0x40023800
 800633c:	40007000 	.word	0x40007000
 8006340:	42470e40 	.word	0x42470e40

08006344 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d101      	bne.n	8006356 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e083      	b.n	800645e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	7f5b      	ldrb	r3, [r3, #29]
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b00      	cmp	r3, #0
 800635e:	d105      	bne.n	800636c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7fa fc70 	bl	8000c4c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2202      	movs	r2, #2
 8006370:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	22ca      	movs	r2, #202	; 0xca
 8006378:	625a      	str	r2, [r3, #36]	; 0x24
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2253      	movs	r2, #83	; 0x53
 8006380:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f897 	bl	80064b6 <RTC_EnterInitMode>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d008      	beq.n	80063a0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	22ff      	movs	r2, #255	; 0xff
 8006394:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2204      	movs	r2, #4
 800639a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e05e      	b.n	800645e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	6812      	ldr	r2, [r2, #0]
 80063aa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80063ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063b2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6899      	ldr	r1, [r3, #8]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	431a      	orrs	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	431a      	orrs	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	430a      	orrs	r2, r1
 80063d0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	68d2      	ldr	r2, [r2, #12]
 80063da:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6919      	ldr	r1, [r3, #16]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	041a      	lsls	r2, r3, #16
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	430a      	orrs	r2, r1
 80063ee:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68da      	ldr	r2, [r3, #12]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063fe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f003 0320 	and.w	r3, r3, #32
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10e      	bne.n	800642c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f829 	bl	8006466 <HAL_RTC_WaitForSynchro>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d008      	beq.n	800642c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	22ff      	movs	r2, #255	; 0xff
 8006420:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2204      	movs	r2, #4
 8006426:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e018      	b.n	800645e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800643a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	699a      	ldr	r2, [r3, #24]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	430a      	orrs	r2, r1
 800644c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	22ff      	movs	r2, #255	; 0xff
 8006454:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2201      	movs	r2, #1
 800645a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800645c:	2300      	movs	r3, #0
  }
}
 800645e:	4618      	mov	r0, r3
 8006460:	3708      	adds	r7, #8
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b084      	sub	sp, #16
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68da      	ldr	r2, [r3, #12]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006480:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006482:	f7fa fffd 	bl	8001480 <HAL_GetTick>
 8006486:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006488:	e009      	b.n	800649e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800648a:	f7fa fff9 	bl	8001480 <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006498:	d901      	bls.n	800649e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e007      	b.n	80064ae <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	f003 0320 	and.w	r3, r3, #32
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d0ee      	beq.n	800648a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b084      	sub	sp, #16
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d119      	bne.n	8006504 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f04f 32ff 	mov.w	r2, #4294967295
 80064d8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80064da:	f7fa ffd1 	bl	8001480 <HAL_GetTick>
 80064de:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80064e0:	e009      	b.n	80064f6 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80064e2:	f7fa ffcd 	bl	8001480 <HAL_GetTick>
 80064e6:	4602      	mov	r2, r0
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064f0:	d901      	bls.n	80064f6 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e007      	b.n	8006506 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006500:	2b00      	cmp	r3, #0
 8006502:	d0ee      	beq.n	80064e2 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b082      	sub	sp, #8
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e01d      	b.n	800655c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006526:	b2db      	uxtb	r3, r3
 8006528:	2b00      	cmp	r3, #0
 800652a:	d106      	bne.n	800653a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f7fa fe6f 	bl	8001218 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2202      	movs	r2, #2
 800653e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	3304      	adds	r3, #4
 800654a:	4619      	mov	r1, r3
 800654c:	4610      	mov	r0, r2
 800654e:	f000 fa13 	bl	8006978 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e01d      	b.n	80065b2 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d106      	bne.n	8006590 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f7fa fdda 	bl	8001144 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2202      	movs	r2, #2
 8006594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	3304      	adds	r3, #4
 80065a0:	4619      	mov	r1, r3
 80065a2:	4610      	mov	r0, r2
 80065a4:	f000 f9e8 	bl	8006978 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3708      	adds	r7, #8
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b082      	sub	sp, #8
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d101      	bne.n	80065cc <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e01d      	b.n	8006608 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d106      	bne.n	80065e6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7fa fdd1 	bl	8001188 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2202      	movs	r2, #2
 80065ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	3304      	adds	r3, #4
 80065f6:	4619      	mov	r1, r3
 80065f8:	4610      	mov	r0, r2
 80065fa:	f000 f9bd 	bl	8006978 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	3708      	adds	r7, #8
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006622:	2b01      	cmp	r3, #1
 8006624:	d101      	bne.n	800662a <HAL_TIM_OC_ConfigChannel+0x1a>
 8006626:	2302      	movs	r3, #2
 8006628:	e04e      	b.n	80066c8 <HAL_TIM_OC_ConfigChannel+0xb8>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2202      	movs	r2, #2
 8006636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b0c      	cmp	r3, #12
 800663e:	d839      	bhi.n	80066b4 <HAL_TIM_OC_ConfigChannel+0xa4>
 8006640:	a201      	add	r2, pc, #4	; (adr r2, 8006648 <HAL_TIM_OC_ConfigChannel+0x38>)
 8006642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006646:	bf00      	nop
 8006648:	0800667d 	.word	0x0800667d
 800664c:	080066b5 	.word	0x080066b5
 8006650:	080066b5 	.word	0x080066b5
 8006654:	080066b5 	.word	0x080066b5
 8006658:	0800668b 	.word	0x0800668b
 800665c:	080066b5 	.word	0x080066b5
 8006660:	080066b5 	.word	0x080066b5
 8006664:	080066b5 	.word	0x080066b5
 8006668:	08006699 	.word	0x08006699
 800666c:	080066b5 	.word	0x080066b5
 8006670:	080066b5 	.word	0x080066b5
 8006674:	080066b5 	.word	0x080066b5
 8006678:	080066a7 	.word	0x080066a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68b9      	ldr	r1, [r7, #8]
 8006682:	4618      	mov	r0, r3
 8006684:	f000 fa18 	bl	8006ab8 <TIM_OC1_SetConfig>
      break;
 8006688:	e015      	b.n	80066b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68b9      	ldr	r1, [r7, #8]
 8006690:	4618      	mov	r0, r3
 8006692:	f000 fa81 	bl	8006b98 <TIM_OC2_SetConfig>
      break;
 8006696:	e00e      	b.n	80066b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68b9      	ldr	r1, [r7, #8]
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 faf0 	bl	8006c84 <TIM_OC3_SetConfig>
      break;
 80066a4:	e007      	b.n	80066b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68b9      	ldr	r1, [r7, #8]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 fb5d 	bl	8006d6c <TIM_OC4_SetConfig>
      break;
 80066b2:	e000      	b.n	80066b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80066b4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d101      	bne.n	80066ea <HAL_TIM_IC_ConfigChannel+0x1a>
 80066e6:	2302      	movs	r3, #2
 80066e8:	e08a      	b.n	8006800 <HAL_TIM_IC_ConfigChannel+0x130>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2202      	movs	r2, #2
 80066f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d11b      	bne.n	8006738 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6818      	ldr	r0, [r3, #0]
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	6819      	ldr	r1, [r3, #0]
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	f000 fb82 	bl	8006e18 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	699a      	ldr	r2, [r3, #24]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 020c 	bic.w	r2, r2, #12
 8006722:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6999      	ldr	r1, [r3, #24]
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	689a      	ldr	r2, [r3, #8]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	430a      	orrs	r2, r1
 8006734:	619a      	str	r2, [r3, #24]
 8006736:	e05a      	b.n	80067ee <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b04      	cmp	r3, #4
 800673c:	d11c      	bne.n	8006778 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6818      	ldr	r0, [r3, #0]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	6819      	ldr	r1, [r3, #0]
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f000 fc06 	bl	8006f5e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	699a      	ldr	r2, [r3, #24]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006760:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	6999      	ldr	r1, [r3, #24]
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	021a      	lsls	r2, r3, #8
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	430a      	orrs	r2, r1
 8006774:	619a      	str	r2, [r3, #24]
 8006776:	e03a      	b.n	80067ee <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b08      	cmp	r3, #8
 800677c:	d11b      	bne.n	80067b6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6818      	ldr	r0, [r3, #0]
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	6819      	ldr	r1, [r3, #0]
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	685a      	ldr	r2, [r3, #4]
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	f000 fc53 	bl	8007038 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	69da      	ldr	r2, [r3, #28]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f022 020c 	bic.w	r2, r2, #12
 80067a0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	69d9      	ldr	r1, [r3, #28]
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	61da      	str	r2, [r3, #28]
 80067b4:	e01b      	b.n	80067ee <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6818      	ldr	r0, [r3, #0]
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	6819      	ldr	r1, [r3, #0]
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	685a      	ldr	r2, [r3, #4]
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	f000 fc73 	bl	80070b0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	69da      	ldr	r2, [r3, #28]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80067d8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	69d9      	ldr	r1, [r3, #28]
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	021a      	lsls	r2, r3, #8
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	430a      	orrs	r2, r1
 80067ec:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006818:	2b01      	cmp	r3, #1
 800681a:	d101      	bne.n	8006820 <HAL_TIM_ConfigClockSource+0x18>
 800681c:	2302      	movs	r3, #2
 800681e:	e0a6      	b.n	800696e <HAL_TIM_ConfigClockSource+0x166>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2202      	movs	r2, #2
 800682c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800683e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006846:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2b40      	cmp	r3, #64	; 0x40
 8006856:	d067      	beq.n	8006928 <HAL_TIM_ConfigClockSource+0x120>
 8006858:	2b40      	cmp	r3, #64	; 0x40
 800685a:	d80b      	bhi.n	8006874 <HAL_TIM_ConfigClockSource+0x6c>
 800685c:	2b10      	cmp	r3, #16
 800685e:	d073      	beq.n	8006948 <HAL_TIM_ConfigClockSource+0x140>
 8006860:	2b10      	cmp	r3, #16
 8006862:	d802      	bhi.n	800686a <HAL_TIM_ConfigClockSource+0x62>
 8006864:	2b00      	cmp	r3, #0
 8006866:	d06f      	beq.n	8006948 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006868:	e078      	b.n	800695c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800686a:	2b20      	cmp	r3, #32
 800686c:	d06c      	beq.n	8006948 <HAL_TIM_ConfigClockSource+0x140>
 800686e:	2b30      	cmp	r3, #48	; 0x30
 8006870:	d06a      	beq.n	8006948 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006872:	e073      	b.n	800695c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006874:	2b70      	cmp	r3, #112	; 0x70
 8006876:	d00d      	beq.n	8006894 <HAL_TIM_ConfigClockSource+0x8c>
 8006878:	2b70      	cmp	r3, #112	; 0x70
 800687a:	d804      	bhi.n	8006886 <HAL_TIM_ConfigClockSource+0x7e>
 800687c:	2b50      	cmp	r3, #80	; 0x50
 800687e:	d033      	beq.n	80068e8 <HAL_TIM_ConfigClockSource+0xe0>
 8006880:	2b60      	cmp	r3, #96	; 0x60
 8006882:	d041      	beq.n	8006908 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006884:	e06a      	b.n	800695c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800688a:	d066      	beq.n	800695a <HAL_TIM_ConfigClockSource+0x152>
 800688c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006890:	d017      	beq.n	80068c2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006892:	e063      	b.n	800695c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6818      	ldr	r0, [r3, #0]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	6899      	ldr	r1, [r3, #8]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	f000 fc5c 	bl	8007160 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068b6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	609a      	str	r2, [r3, #8]
      break;
 80068c0:	e04c      	b.n	800695c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6818      	ldr	r0, [r3, #0]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	6899      	ldr	r1, [r3, #8]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	685a      	ldr	r2, [r3, #4]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	f000 fc45 	bl	8007160 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	689a      	ldr	r2, [r3, #8]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068e4:	609a      	str	r2, [r3, #8]
      break;
 80068e6:	e039      	b.n	800695c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6818      	ldr	r0, [r3, #0]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	6859      	ldr	r1, [r3, #4]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	461a      	mov	r2, r3
 80068f6:	f000 fb03 	bl	8006f00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2150      	movs	r1, #80	; 0x50
 8006900:	4618      	mov	r0, r3
 8006902:	f000 fc12 	bl	800712a <TIM_ITRx_SetConfig>
      break;
 8006906:	e029      	b.n	800695c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6818      	ldr	r0, [r3, #0]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	6859      	ldr	r1, [r3, #4]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	461a      	mov	r2, r3
 8006916:	f000 fb5f 	bl	8006fd8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2160      	movs	r1, #96	; 0x60
 8006920:	4618      	mov	r0, r3
 8006922:	f000 fc02 	bl	800712a <TIM_ITRx_SetConfig>
      break;
 8006926:	e019      	b.n	800695c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6818      	ldr	r0, [r3, #0]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	6859      	ldr	r1, [r3, #4]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	461a      	mov	r2, r3
 8006936:	f000 fae3 	bl	8006f00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2140      	movs	r1, #64	; 0x40
 8006940:	4618      	mov	r0, r3
 8006942:	f000 fbf2 	bl	800712a <TIM_ITRx_SetConfig>
      break;
 8006946:	e009      	b.n	800695c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4619      	mov	r1, r3
 8006952:	4610      	mov	r0, r2
 8006954:	f000 fbe9 	bl	800712a <TIM_ITRx_SetConfig>
      break;
 8006958:	e000      	b.n	800695c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800695a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
	...

08006978 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a40      	ldr	r2, [pc, #256]	; (8006a8c <TIM_Base_SetConfig+0x114>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d013      	beq.n	80069b8 <TIM_Base_SetConfig+0x40>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006996:	d00f      	beq.n	80069b8 <TIM_Base_SetConfig+0x40>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a3d      	ldr	r2, [pc, #244]	; (8006a90 <TIM_Base_SetConfig+0x118>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d00b      	beq.n	80069b8 <TIM_Base_SetConfig+0x40>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a3c      	ldr	r2, [pc, #240]	; (8006a94 <TIM_Base_SetConfig+0x11c>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d007      	beq.n	80069b8 <TIM_Base_SetConfig+0x40>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a3b      	ldr	r2, [pc, #236]	; (8006a98 <TIM_Base_SetConfig+0x120>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d003      	beq.n	80069b8 <TIM_Base_SetConfig+0x40>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a3a      	ldr	r2, [pc, #232]	; (8006a9c <TIM_Base_SetConfig+0x124>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d108      	bne.n	80069ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a2f      	ldr	r2, [pc, #188]	; (8006a8c <TIM_Base_SetConfig+0x114>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d02b      	beq.n	8006a2a <TIM_Base_SetConfig+0xb2>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069d8:	d027      	beq.n	8006a2a <TIM_Base_SetConfig+0xb2>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a2c      	ldr	r2, [pc, #176]	; (8006a90 <TIM_Base_SetConfig+0x118>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d023      	beq.n	8006a2a <TIM_Base_SetConfig+0xb2>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a2b      	ldr	r2, [pc, #172]	; (8006a94 <TIM_Base_SetConfig+0x11c>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d01f      	beq.n	8006a2a <TIM_Base_SetConfig+0xb2>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a2a      	ldr	r2, [pc, #168]	; (8006a98 <TIM_Base_SetConfig+0x120>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d01b      	beq.n	8006a2a <TIM_Base_SetConfig+0xb2>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a29      	ldr	r2, [pc, #164]	; (8006a9c <TIM_Base_SetConfig+0x124>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d017      	beq.n	8006a2a <TIM_Base_SetConfig+0xb2>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a28      	ldr	r2, [pc, #160]	; (8006aa0 <TIM_Base_SetConfig+0x128>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d013      	beq.n	8006a2a <TIM_Base_SetConfig+0xb2>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a27      	ldr	r2, [pc, #156]	; (8006aa4 <TIM_Base_SetConfig+0x12c>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d00f      	beq.n	8006a2a <TIM_Base_SetConfig+0xb2>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a26      	ldr	r2, [pc, #152]	; (8006aa8 <TIM_Base_SetConfig+0x130>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d00b      	beq.n	8006a2a <TIM_Base_SetConfig+0xb2>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a25      	ldr	r2, [pc, #148]	; (8006aac <TIM_Base_SetConfig+0x134>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d007      	beq.n	8006a2a <TIM_Base_SetConfig+0xb2>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a24      	ldr	r2, [pc, #144]	; (8006ab0 <TIM_Base_SetConfig+0x138>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d003      	beq.n	8006a2a <TIM_Base_SetConfig+0xb2>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a23      	ldr	r2, [pc, #140]	; (8006ab4 <TIM_Base_SetConfig+0x13c>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d108      	bne.n	8006a3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	689a      	ldr	r2, [r3, #8]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a0a      	ldr	r2, [pc, #40]	; (8006a8c <TIM_Base_SetConfig+0x114>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d003      	beq.n	8006a70 <TIM_Base_SetConfig+0xf8>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a0c      	ldr	r2, [pc, #48]	; (8006a9c <TIM_Base_SetConfig+0x124>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d103      	bne.n	8006a78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	691a      	ldr	r2, [r3, #16]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	615a      	str	r2, [r3, #20]
}
 8006a7e:	bf00      	nop
 8006a80:	3714      	adds	r7, #20
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	40010000 	.word	0x40010000
 8006a90:	40000400 	.word	0x40000400
 8006a94:	40000800 	.word	0x40000800
 8006a98:	40000c00 	.word	0x40000c00
 8006a9c:	40010400 	.word	0x40010400
 8006aa0:	40014000 	.word	0x40014000
 8006aa4:	40014400 	.word	0x40014400
 8006aa8:	40014800 	.word	0x40014800
 8006aac:	40001800 	.word	0x40001800
 8006ab0:	40001c00 	.word	0x40001c00
 8006ab4:	40002000 	.word	0x40002000

08006ab8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b087      	sub	sp, #28
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	f023 0201 	bic.w	r2, r3, #1
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 0303 	bic.w	r3, r3, #3
 8006aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f023 0302 	bic.w	r3, r3, #2
 8006b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a20      	ldr	r2, [pc, #128]	; (8006b90 <TIM_OC1_SetConfig+0xd8>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d003      	beq.n	8006b1c <TIM_OC1_SetConfig+0x64>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a1f      	ldr	r2, [pc, #124]	; (8006b94 <TIM_OC1_SetConfig+0xdc>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d10c      	bne.n	8006b36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f023 0308 	bic.w	r3, r3, #8
 8006b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f023 0304 	bic.w	r3, r3, #4
 8006b34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a15      	ldr	r2, [pc, #84]	; (8006b90 <TIM_OC1_SetConfig+0xd8>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d003      	beq.n	8006b46 <TIM_OC1_SetConfig+0x8e>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a14      	ldr	r2, [pc, #80]	; (8006b94 <TIM_OC1_SetConfig+0xdc>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d111      	bne.n	8006b6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	693a      	ldr	r2, [r7, #16]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	693a      	ldr	r2, [r7, #16]
 8006b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	621a      	str	r2, [r3, #32]
}
 8006b84:	bf00      	nop
 8006b86:	371c      	adds	r7, #28
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr
 8006b90:	40010000 	.word	0x40010000
 8006b94:	40010400 	.word	0x40010400

08006b98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b087      	sub	sp, #28
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a1b      	ldr	r3, [r3, #32]
 8006ba6:	f023 0210 	bic.w	r2, r3, #16
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	021b      	lsls	r3, r3, #8
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	f023 0320 	bic.w	r3, r3, #32
 8006be2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	011b      	lsls	r3, r3, #4
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a22      	ldr	r2, [pc, #136]	; (8006c7c <TIM_OC2_SetConfig+0xe4>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d003      	beq.n	8006c00 <TIM_OC2_SetConfig+0x68>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a21      	ldr	r2, [pc, #132]	; (8006c80 <TIM_OC2_SetConfig+0xe8>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d10d      	bne.n	8006c1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	011b      	lsls	r3, r3, #4
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a17      	ldr	r2, [pc, #92]	; (8006c7c <TIM_OC2_SetConfig+0xe4>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d003      	beq.n	8006c2c <TIM_OC2_SetConfig+0x94>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a16      	ldr	r2, [pc, #88]	; (8006c80 <TIM_OC2_SetConfig+0xe8>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d113      	bne.n	8006c54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	693a      	ldr	r2, [r7, #16]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	621a      	str	r2, [r3, #32]
}
 8006c6e:	bf00      	nop
 8006c70:	371c      	adds	r7, #28
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	40010000 	.word	0x40010000
 8006c80:	40010400 	.word	0x40010400

08006c84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b087      	sub	sp, #28
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f023 0303 	bic.w	r3, r3, #3
 8006cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	021b      	lsls	r3, r3, #8
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a21      	ldr	r2, [pc, #132]	; (8006d64 <TIM_OC3_SetConfig+0xe0>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d003      	beq.n	8006cea <TIM_OC3_SetConfig+0x66>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a20      	ldr	r2, [pc, #128]	; (8006d68 <TIM_OC3_SetConfig+0xe4>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d10d      	bne.n	8006d06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	021b      	lsls	r3, r3, #8
 8006cf8:	697a      	ldr	r2, [r7, #20]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a16      	ldr	r2, [pc, #88]	; (8006d64 <TIM_OC3_SetConfig+0xe0>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d003      	beq.n	8006d16 <TIM_OC3_SetConfig+0x92>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a15      	ldr	r2, [pc, #84]	; (8006d68 <TIM_OC3_SetConfig+0xe4>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d113      	bne.n	8006d3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	011b      	lsls	r3, r3, #4
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	011b      	lsls	r3, r3, #4
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	697a      	ldr	r2, [r7, #20]
 8006d56:	621a      	str	r2, [r3, #32]
}
 8006d58:	bf00      	nop
 8006d5a:	371c      	adds	r7, #28
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr
 8006d64:	40010000 	.word	0x40010000
 8006d68:	40010400 	.word	0x40010400

08006d6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b087      	sub	sp, #28
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	69db      	ldr	r3, [r3, #28]
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	021b      	lsls	r3, r3, #8
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006db6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	031b      	lsls	r3, r3, #12
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a12      	ldr	r2, [pc, #72]	; (8006e10 <TIM_OC4_SetConfig+0xa4>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d003      	beq.n	8006dd4 <TIM_OC4_SetConfig+0x68>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a11      	ldr	r2, [pc, #68]	; (8006e14 <TIM_OC4_SetConfig+0xa8>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d109      	bne.n	8006de8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	695b      	ldr	r3, [r3, #20]
 8006de0:	019b      	lsls	r3, r3, #6
 8006de2:	697a      	ldr	r2, [r7, #20]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	621a      	str	r2, [r3, #32]
}
 8006e02:	bf00      	nop
 8006e04:	371c      	adds	r7, #28
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	40010000 	.word	0x40010000
 8006e14:	40010400 	.word	0x40010400

08006e18 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b087      	sub	sp, #28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
 8006e24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	f023 0201 	bic.w	r2, r3, #1
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	4a28      	ldr	r2, [pc, #160]	; (8006ee4 <TIM_TI1_SetConfig+0xcc>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d01b      	beq.n	8006e7e <TIM_TI1_SetConfig+0x66>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e4c:	d017      	beq.n	8006e7e <TIM_TI1_SetConfig+0x66>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	4a25      	ldr	r2, [pc, #148]	; (8006ee8 <TIM_TI1_SetConfig+0xd0>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d013      	beq.n	8006e7e <TIM_TI1_SetConfig+0x66>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	4a24      	ldr	r2, [pc, #144]	; (8006eec <TIM_TI1_SetConfig+0xd4>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d00f      	beq.n	8006e7e <TIM_TI1_SetConfig+0x66>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	4a23      	ldr	r2, [pc, #140]	; (8006ef0 <TIM_TI1_SetConfig+0xd8>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d00b      	beq.n	8006e7e <TIM_TI1_SetConfig+0x66>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	4a22      	ldr	r2, [pc, #136]	; (8006ef4 <TIM_TI1_SetConfig+0xdc>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d007      	beq.n	8006e7e <TIM_TI1_SetConfig+0x66>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	4a21      	ldr	r2, [pc, #132]	; (8006ef8 <TIM_TI1_SetConfig+0xe0>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d003      	beq.n	8006e7e <TIM_TI1_SetConfig+0x66>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	4a20      	ldr	r2, [pc, #128]	; (8006efc <TIM_TI1_SetConfig+0xe4>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d101      	bne.n	8006e82 <TIM_TI1_SetConfig+0x6a>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e000      	b.n	8006e84 <TIM_TI1_SetConfig+0x6c>
 8006e82:	2300      	movs	r3, #0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d008      	beq.n	8006e9a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f023 0303 	bic.w	r3, r3, #3
 8006e8e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	617b      	str	r3, [r7, #20]
 8006e98:	e003      	b.n	8006ea2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	f043 0301 	orr.w	r3, r3, #1
 8006ea0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ea8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	011b      	lsls	r3, r3, #4
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	f023 030a 	bic.w	r3, r3, #10
 8006ebc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	f003 030a 	and.w	r3, r3, #10
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	693a      	ldr	r2, [r7, #16]
 8006ed4:	621a      	str	r2, [r3, #32]
}
 8006ed6:	bf00      	nop
 8006ed8:	371c      	adds	r7, #28
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	40010000 	.word	0x40010000
 8006ee8:	40000400 	.word	0x40000400
 8006eec:	40000800 	.word	0x40000800
 8006ef0:	40000c00 	.word	0x40000c00
 8006ef4:	40010400 	.word	0x40010400
 8006ef8:	40014000 	.word	0x40014000
 8006efc:	40001800 	.word	0x40001800

08006f00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b087      	sub	sp, #28
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6a1b      	ldr	r3, [r3, #32]
 8006f10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	f023 0201 	bic.w	r2, r3, #1
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	011b      	lsls	r3, r3, #4
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f023 030a 	bic.w	r3, r3, #10
 8006f3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	621a      	str	r2, [r3, #32]
}
 8006f52:	bf00      	nop
 8006f54:	371c      	adds	r7, #28
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b087      	sub	sp, #28
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	60f8      	str	r0, [r7, #12]
 8006f66:	60b9      	str	r1, [r7, #8]
 8006f68:	607a      	str	r2, [r7, #4]
 8006f6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
 8006f70:	f023 0210 	bic.w	r2, r3, #16
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	021b      	lsls	r3, r3, #8
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	031b      	lsls	r3, r3, #12
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fb0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	011b      	lsls	r3, r3, #4
 8006fb6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006fba:	693a      	ldr	r2, [r7, #16]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	621a      	str	r2, [r3, #32]
}
 8006fcc:	bf00      	nop
 8006fce:	371c      	adds	r7, #28
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b087      	sub	sp, #28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6a1b      	ldr	r3, [r3, #32]
 8006fe8:	f023 0210 	bic.w	r2, r3, #16
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007002:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	031b      	lsls	r3, r3, #12
 8007008:	697a      	ldr	r2, [r7, #20]
 800700a:	4313      	orrs	r3, r2
 800700c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007014:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	011b      	lsls	r3, r3, #4
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	4313      	orrs	r3, r2
 800701e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	697a      	ldr	r2, [r7, #20]
 8007024:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	621a      	str	r2, [r3, #32]
}
 800702c:	bf00      	nop
 800702e:	371c      	adds	r7, #28
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007038:	b480      	push	{r7}
 800703a:	b087      	sub	sp, #28
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
 8007044:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	69db      	ldr	r3, [r3, #28]
 8007056:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6a1b      	ldr	r3, [r3, #32]
 800705c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	f023 0303 	bic.w	r3, r3, #3
 8007064:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007066:	697a      	ldr	r2, [r7, #20]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4313      	orrs	r3, r2
 800706c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007074:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	011b      	lsls	r3, r3, #4
 800707a:	b2db      	uxtb	r3, r3
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	4313      	orrs	r3, r2
 8007080:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007088:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	021b      	lsls	r3, r3, #8
 800708e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007092:	693a      	ldr	r2, [r7, #16]
 8007094:	4313      	orrs	r3, r2
 8007096:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	697a      	ldr	r2, [r7, #20]
 800709c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	621a      	str	r2, [r3, #32]
}
 80070a4:	bf00      	nop
 80070a6:	371c      	adds	r7, #28
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b087      	sub	sp, #28
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
 80070bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	69db      	ldr	r3, [r3, #28]
 80070ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6a1b      	ldr	r3, [r3, #32]
 80070d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	021b      	lsls	r3, r3, #8
 80070e2:	697a      	ldr	r2, [r7, #20]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070ee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	031b      	lsls	r3, r3, #12
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007102:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	031b      	lsls	r3, r3, #12
 8007108:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	4313      	orrs	r3, r2
 8007110:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	693a      	ldr	r2, [r7, #16]
 800711c:	621a      	str	r2, [r3, #32]
}
 800711e:	bf00      	nop
 8007120:	371c      	adds	r7, #28
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800712a:	b480      	push	{r7}
 800712c:	b085      	sub	sp, #20
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
 8007132:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007140:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	4313      	orrs	r3, r2
 8007148:	f043 0307 	orr.w	r3, r3, #7
 800714c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	609a      	str	r2, [r3, #8]
}
 8007154:	bf00      	nop
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007160:	b480      	push	{r7}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
 800716c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800717a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	021a      	lsls	r2, r3, #8
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	431a      	orrs	r2, r3
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	4313      	orrs	r3, r2
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	4313      	orrs	r3, r2
 800718c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	609a      	str	r2, [r3, #8]
}
 8007194:	bf00      	nop
 8007196:	371c      	adds	r7, #28
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d101      	bne.n	80071b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071b4:	2302      	movs	r3, #2
 80071b6:	e05a      	b.n	800726e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2202      	movs	r2, #2
 80071c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a21      	ldr	r2, [pc, #132]	; (800727c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d022      	beq.n	8007242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007204:	d01d      	beq.n	8007242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a1d      	ldr	r2, [pc, #116]	; (8007280 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d018      	beq.n	8007242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a1b      	ldr	r2, [pc, #108]	; (8007284 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d013      	beq.n	8007242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a1a      	ldr	r2, [pc, #104]	; (8007288 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d00e      	beq.n	8007242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a18      	ldr	r2, [pc, #96]	; (800728c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d009      	beq.n	8007242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a17      	ldr	r2, [pc, #92]	; (8007290 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d004      	beq.n	8007242 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a15      	ldr	r2, [pc, #84]	; (8007294 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d10c      	bne.n	800725c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007248:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	4313      	orrs	r3, r2
 8007252:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3714      	adds	r7, #20
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	40010000 	.word	0x40010000
 8007280:	40000400 	.word	0x40000400
 8007284:	40000800 	.word	0x40000800
 8007288:	40000c00 	.word	0x40000c00
 800728c:	40010400 	.word	0x40010400
 8007290:	40014000 	.word	0x40014000
 8007294:	40001800 	.word	0x40001800

08007298 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80072a2:	2300      	movs	r3, #0
 80072a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d101      	bne.n	80072b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80072b0:	2302      	movs	r3, #2
 80072b2:	e03d      	b.n	8007330 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	4313      	orrs	r3, r2
 8007300:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	695b      	ldr	r3, [r3, #20]
 800730c:	4313      	orrs	r3, r2
 800730e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	69db      	ldr	r3, [r3, #28]
 800731a:	4313      	orrs	r3, r2
 800731c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3714      	adds	r7, #20
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800733c:	b084      	sub	sp, #16
 800733e:	b580      	push	{r7, lr}
 8007340:	b084      	sub	sp, #16
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
 8007346:	f107 001c 	add.w	r0, r7, #28
 800734a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800734e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007350:	2b01      	cmp	r3, #1
 8007352:	d122      	bne.n	800739a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007358:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007368:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800737c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800737e:	2b01      	cmp	r3, #1
 8007380:	d105      	bne.n	800738e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f001 fab4 	bl	80088fc <USB_CoreReset>
 8007394:	4603      	mov	r3, r0
 8007396:	73fb      	strb	r3, [r7, #15]
 8007398:	e01a      	b.n	80073d0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f001 faa8 	bl	80088fc <USB_CoreReset>
 80073ac:	4603      	mov	r3, r0
 80073ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80073b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d106      	bne.n	80073c4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	639a      	str	r2, [r3, #56]	; 0x38
 80073c2:	e005      	b.n	80073d0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80073d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d10b      	bne.n	80073ee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f043 0206 	orr.w	r2, r3, #6
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	f043 0220 	orr.w	r2, r3, #32
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80073ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3710      	adds	r7, #16
 80073f4:	46bd      	mov	sp, r7
 80073f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073fa:	b004      	add	sp, #16
 80073fc:	4770      	bx	lr
	...

08007400 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007400:	b480      	push	{r7}
 8007402:	b087      	sub	sp, #28
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	4613      	mov	r3, r2
 800740c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800740e:	79fb      	ldrb	r3, [r7, #7]
 8007410:	2b02      	cmp	r3, #2
 8007412:	d165      	bne.n	80074e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	4a41      	ldr	r2, [pc, #260]	; (800751c <USB_SetTurnaroundTime+0x11c>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d906      	bls.n	800742a <USB_SetTurnaroundTime+0x2a>
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	4a40      	ldr	r2, [pc, #256]	; (8007520 <USB_SetTurnaroundTime+0x120>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d802      	bhi.n	800742a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007424:	230f      	movs	r3, #15
 8007426:	617b      	str	r3, [r7, #20]
 8007428:	e062      	b.n	80074f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	4a3c      	ldr	r2, [pc, #240]	; (8007520 <USB_SetTurnaroundTime+0x120>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d906      	bls.n	8007440 <USB_SetTurnaroundTime+0x40>
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	4a3b      	ldr	r2, [pc, #236]	; (8007524 <USB_SetTurnaroundTime+0x124>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d802      	bhi.n	8007440 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800743a:	230e      	movs	r3, #14
 800743c:	617b      	str	r3, [r7, #20]
 800743e:	e057      	b.n	80074f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	4a38      	ldr	r2, [pc, #224]	; (8007524 <USB_SetTurnaroundTime+0x124>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d906      	bls.n	8007456 <USB_SetTurnaroundTime+0x56>
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	4a37      	ldr	r2, [pc, #220]	; (8007528 <USB_SetTurnaroundTime+0x128>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d802      	bhi.n	8007456 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007450:	230d      	movs	r3, #13
 8007452:	617b      	str	r3, [r7, #20]
 8007454:	e04c      	b.n	80074f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	4a33      	ldr	r2, [pc, #204]	; (8007528 <USB_SetTurnaroundTime+0x128>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d906      	bls.n	800746c <USB_SetTurnaroundTime+0x6c>
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	4a32      	ldr	r2, [pc, #200]	; (800752c <USB_SetTurnaroundTime+0x12c>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d802      	bhi.n	800746c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007466:	230c      	movs	r3, #12
 8007468:	617b      	str	r3, [r7, #20]
 800746a:	e041      	b.n	80074f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	4a2f      	ldr	r2, [pc, #188]	; (800752c <USB_SetTurnaroundTime+0x12c>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d906      	bls.n	8007482 <USB_SetTurnaroundTime+0x82>
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	4a2e      	ldr	r2, [pc, #184]	; (8007530 <USB_SetTurnaroundTime+0x130>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d802      	bhi.n	8007482 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800747c:	230b      	movs	r3, #11
 800747e:	617b      	str	r3, [r7, #20]
 8007480:	e036      	b.n	80074f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	4a2a      	ldr	r2, [pc, #168]	; (8007530 <USB_SetTurnaroundTime+0x130>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d906      	bls.n	8007498 <USB_SetTurnaroundTime+0x98>
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	4a29      	ldr	r2, [pc, #164]	; (8007534 <USB_SetTurnaroundTime+0x134>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d802      	bhi.n	8007498 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007492:	230a      	movs	r3, #10
 8007494:	617b      	str	r3, [r7, #20]
 8007496:	e02b      	b.n	80074f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	4a26      	ldr	r2, [pc, #152]	; (8007534 <USB_SetTurnaroundTime+0x134>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d906      	bls.n	80074ae <USB_SetTurnaroundTime+0xae>
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	4a25      	ldr	r2, [pc, #148]	; (8007538 <USB_SetTurnaroundTime+0x138>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d802      	bhi.n	80074ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80074a8:	2309      	movs	r3, #9
 80074aa:	617b      	str	r3, [r7, #20]
 80074ac:	e020      	b.n	80074f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	4a21      	ldr	r2, [pc, #132]	; (8007538 <USB_SetTurnaroundTime+0x138>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d906      	bls.n	80074c4 <USB_SetTurnaroundTime+0xc4>
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	4a20      	ldr	r2, [pc, #128]	; (800753c <USB_SetTurnaroundTime+0x13c>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d802      	bhi.n	80074c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80074be:	2308      	movs	r3, #8
 80074c0:	617b      	str	r3, [r7, #20]
 80074c2:	e015      	b.n	80074f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	4a1d      	ldr	r2, [pc, #116]	; (800753c <USB_SetTurnaroundTime+0x13c>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d906      	bls.n	80074da <USB_SetTurnaroundTime+0xda>
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	4a1c      	ldr	r2, [pc, #112]	; (8007540 <USB_SetTurnaroundTime+0x140>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d802      	bhi.n	80074da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80074d4:	2307      	movs	r3, #7
 80074d6:	617b      	str	r3, [r7, #20]
 80074d8:	e00a      	b.n	80074f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80074da:	2306      	movs	r3, #6
 80074dc:	617b      	str	r3, [r7, #20]
 80074de:	e007      	b.n	80074f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80074e0:	79fb      	ldrb	r3, [r7, #7]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d102      	bne.n	80074ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80074e6:	2309      	movs	r3, #9
 80074e8:	617b      	str	r3, [r7, #20]
 80074ea:	e001      	b.n	80074f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80074ec:	2309      	movs	r3, #9
 80074ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	68da      	ldr	r2, [r3, #12]
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	029b      	lsls	r3, r3, #10
 8007504:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007508:	431a      	orrs	r2, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	371c      	adds	r7, #28
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr
 800751c:	00d8acbf 	.word	0x00d8acbf
 8007520:	00e4e1bf 	.word	0x00e4e1bf
 8007524:	00f423ff 	.word	0x00f423ff
 8007528:	0106737f 	.word	0x0106737f
 800752c:	011a499f 	.word	0x011a499f
 8007530:	01312cff 	.word	0x01312cff
 8007534:	014ca43f 	.word	0x014ca43f
 8007538:	016e35ff 	.word	0x016e35ff
 800753c:	01a6ab1f 	.word	0x01a6ab1f
 8007540:	01e847ff 	.word	0x01e847ff

08007544 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f043 0201 	orr.w	r2, r3, #1
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr

08007566 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007566:	b480      	push	{r7}
 8007568:	b083      	sub	sp, #12
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f023 0201 	bic.w	r2, r3, #1
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	460b      	mov	r3, r1
 8007592:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80075a0:	78fb      	ldrb	r3, [r7, #3]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d106      	bne.n	80075b4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	60da      	str	r2, [r3, #12]
 80075b2:	e00b      	b.n	80075cc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80075b4:	78fb      	ldrb	r3, [r7, #3]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d106      	bne.n	80075c8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	60da      	str	r2, [r3, #12]
 80075c6:	e001      	b.n	80075cc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e003      	b.n	80075d4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80075cc:	2032      	movs	r0, #50	; 0x32
 80075ce:	f7f9 ff63 	bl	8001498 <HAL_Delay>

  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3708      	adds	r7, #8
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075dc:	b084      	sub	sp, #16
 80075de:	b580      	push	{r7, lr}
 80075e0:	b086      	sub	sp, #24
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80075ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80075f6:	2300      	movs	r3, #0
 80075f8:	613b      	str	r3, [r7, #16]
 80075fa:	e009      	b.n	8007610 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	3340      	adds	r3, #64	; 0x40
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4413      	add	r3, r2
 8007606:	2200      	movs	r2, #0
 8007608:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	3301      	adds	r3, #1
 800760e:	613b      	str	r3, [r7, #16]
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	2b0e      	cmp	r3, #14
 8007614:	d9f2      	bls.n	80075fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007618:	2b00      	cmp	r3, #0
 800761a:	d11c      	bne.n	8007656 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800762a:	f043 0302 	orr.w	r3, r3, #2
 800762e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007634:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007640:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	639a      	str	r2, [r3, #56]	; 0x38
 8007654:	e00b      	b.n	800766e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007666:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007674:	461a      	mov	r2, r3
 8007676:	2300      	movs	r3, #0
 8007678:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007680:	4619      	mov	r1, r3
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007688:	461a      	mov	r2, r3
 800768a:	680b      	ldr	r3, [r1, #0]
 800768c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800768e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007690:	2b01      	cmp	r3, #1
 8007692:	d10c      	bne.n	80076ae <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007696:	2b00      	cmp	r3, #0
 8007698:	d104      	bne.n	80076a4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800769a:	2100      	movs	r1, #0
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f949 	bl	8007934 <USB_SetDevSpeed>
 80076a2:	e008      	b.n	80076b6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80076a4:	2101      	movs	r1, #1
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f944 	bl	8007934 <USB_SetDevSpeed>
 80076ac:	e003      	b.n	80076b6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80076ae:	2103      	movs	r1, #3
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f93f 	bl	8007934 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80076b6:	2110      	movs	r1, #16
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f8f3 	bl	80078a4 <USB_FlushTxFifo>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d001      	beq.n	80076c8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 f911 	bl	80078f0 <USB_FlushRxFifo>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d001      	beq.n	80076d8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076de:	461a      	mov	r2, r3
 80076e0:	2300      	movs	r3, #0
 80076e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ea:	461a      	mov	r2, r3
 80076ec:	2300      	movs	r3, #0
 80076ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076f6:	461a      	mov	r2, r3
 80076f8:	2300      	movs	r3, #0
 80076fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076fc:	2300      	movs	r3, #0
 80076fe:	613b      	str	r3, [r7, #16]
 8007700:	e043      	b.n	800778a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	015a      	lsls	r2, r3, #5
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	4413      	add	r3, r2
 800770a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007714:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007718:	d118      	bne.n	800774c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d10a      	bne.n	8007736 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	015a      	lsls	r2, r3, #5
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	4413      	add	r3, r2
 8007728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800772c:	461a      	mov	r2, r3
 800772e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007732:	6013      	str	r3, [r2, #0]
 8007734:	e013      	b.n	800775e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	015a      	lsls	r2, r3, #5
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	4413      	add	r3, r2
 800773e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007742:	461a      	mov	r2, r3
 8007744:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007748:	6013      	str	r3, [r2, #0]
 800774a:	e008      	b.n	800775e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	015a      	lsls	r2, r3, #5
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	4413      	add	r3, r2
 8007754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007758:	461a      	mov	r2, r3
 800775a:	2300      	movs	r3, #0
 800775c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	015a      	lsls	r2, r3, #5
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	4413      	add	r3, r2
 8007766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800776a:	461a      	mov	r2, r3
 800776c:	2300      	movs	r3, #0
 800776e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	4413      	add	r3, r2
 8007778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800777c:	461a      	mov	r2, r3
 800777e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007782:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	3301      	adds	r3, #1
 8007788:	613b      	str	r3, [r7, #16]
 800778a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778c:	693a      	ldr	r2, [r7, #16]
 800778e:	429a      	cmp	r2, r3
 8007790:	d3b7      	bcc.n	8007702 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007792:	2300      	movs	r3, #0
 8007794:	613b      	str	r3, [r7, #16]
 8007796:	e043      	b.n	8007820 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	015a      	lsls	r2, r3, #5
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	4413      	add	r3, r2
 80077a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077ae:	d118      	bne.n	80077e2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d10a      	bne.n	80077cc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	015a      	lsls	r2, r3, #5
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	4413      	add	r3, r2
 80077be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c2:	461a      	mov	r2, r3
 80077c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80077c8:	6013      	str	r3, [r2, #0]
 80077ca:	e013      	b.n	80077f4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	015a      	lsls	r2, r3, #5
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	4413      	add	r3, r2
 80077d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d8:	461a      	mov	r2, r3
 80077da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80077de:	6013      	str	r3, [r2, #0]
 80077e0:	e008      	b.n	80077f4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	015a      	lsls	r2, r3, #5
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	4413      	add	r3, r2
 80077ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ee:	461a      	mov	r2, r3
 80077f0:	2300      	movs	r3, #0
 80077f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	015a      	lsls	r2, r3, #5
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	4413      	add	r3, r2
 80077fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007800:	461a      	mov	r2, r3
 8007802:	2300      	movs	r3, #0
 8007804:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	015a      	lsls	r2, r3, #5
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	4413      	add	r3, r2
 800780e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007812:	461a      	mov	r2, r3
 8007814:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007818:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	3301      	adds	r3, #1
 800781e:	613b      	str	r3, [r7, #16]
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	429a      	cmp	r2, r3
 8007826:	d3b7      	bcc.n	8007798 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007836:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800783a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007848:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800784a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784c:	2b00      	cmp	r3, #0
 800784e:	d105      	bne.n	800785c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	699b      	ldr	r3, [r3, #24]
 8007854:	f043 0210 	orr.w	r2, r3, #16
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	699a      	ldr	r2, [r3, #24]
 8007860:	4b0f      	ldr	r3, [pc, #60]	; (80078a0 <USB_DevInit+0x2c4>)
 8007862:	4313      	orrs	r3, r2
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800786a:	2b00      	cmp	r3, #0
 800786c:	d005      	beq.n	800787a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	f043 0208 	orr.w	r2, r3, #8
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800787a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800787c:	2b01      	cmp	r3, #1
 800787e:	d107      	bne.n	8007890 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007888:	f043 0304 	orr.w	r3, r3, #4
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007890:	7dfb      	ldrb	r3, [r7, #23]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3718      	adds	r7, #24
 8007896:	46bd      	mov	sp, r7
 8007898:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800789c:	b004      	add	sp, #16
 800789e:	4770      	bx	lr
 80078a0:	803c3800 	.word	0x803c3800

080078a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80078ae:	2300      	movs	r3, #0
 80078b0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	019b      	lsls	r3, r3, #6
 80078b6:	f043 0220 	orr.w	r2, r3, #32
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	3301      	adds	r3, #1
 80078c2:	60fb      	str	r3, [r7, #12]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	4a09      	ldr	r2, [pc, #36]	; (80078ec <USB_FlushTxFifo+0x48>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d901      	bls.n	80078d0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80078cc:	2303      	movs	r3, #3
 80078ce:	e006      	b.n	80078de <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	f003 0320 	and.w	r3, r3, #32
 80078d8:	2b20      	cmp	r3, #32
 80078da:	d0f0      	beq.n	80078be <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3714      	adds	r7, #20
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	00030d40 	.word	0x00030d40

080078f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b085      	sub	sp, #20
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80078f8:	2300      	movs	r3, #0
 80078fa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2210      	movs	r2, #16
 8007900:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	3301      	adds	r3, #1
 8007906:	60fb      	str	r3, [r7, #12]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	4a09      	ldr	r2, [pc, #36]	; (8007930 <USB_FlushRxFifo+0x40>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d901      	bls.n	8007914 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e006      	b.n	8007922 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	f003 0310 	and.w	r3, r3, #16
 800791c:	2b10      	cmp	r3, #16
 800791e:	d0f0      	beq.n	8007902 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3714      	adds	r7, #20
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	00030d40 	.word	0x00030d40

08007934 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	460b      	mov	r3, r1
 800793e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	78fb      	ldrb	r3, [r7, #3]
 800794e:	68f9      	ldr	r1, [r7, #12]
 8007950:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007954:	4313      	orrs	r3, r2
 8007956:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3714      	adds	r7, #20
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007966:	b480      	push	{r7}
 8007968:	b087      	sub	sp, #28
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	f003 0306 	and.w	r3, r3, #6
 800797e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d102      	bne.n	800798c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007986:	2300      	movs	r3, #0
 8007988:	75fb      	strb	r3, [r7, #23]
 800798a:	e00a      	b.n	80079a2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2b02      	cmp	r3, #2
 8007990:	d002      	beq.n	8007998 <USB_GetDevSpeed+0x32>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2b06      	cmp	r3, #6
 8007996:	d102      	bne.n	800799e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007998:	2302      	movs	r3, #2
 800799a:	75fb      	strb	r3, [r7, #23]
 800799c:	e001      	b.n	80079a2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800799e:	230f      	movs	r3, #15
 80079a0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80079a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	371c      	adds	r7, #28
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	785b      	ldrb	r3, [r3, #1]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d13a      	bne.n	8007a42 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d2:	69da      	ldr	r2, [r3, #28]
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	f003 030f 	and.w	r3, r3, #15
 80079dc:	2101      	movs	r1, #1
 80079de:	fa01 f303 	lsl.w	r3, r1, r3
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	68f9      	ldr	r1, [r7, #12]
 80079e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079ea:	4313      	orrs	r3, r2
 80079ec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	015a      	lsls	r2, r3, #5
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	4413      	add	r3, r2
 80079f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d155      	bne.n	8007ab0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	015a      	lsls	r2, r3, #5
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	78db      	ldrb	r3, [r3, #3]
 8007a1e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007a20:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	059b      	lsls	r3, r3, #22
 8007a26:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	0151      	lsls	r1, r2, #5
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	440a      	add	r2, r1
 8007a32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a3e:	6013      	str	r3, [r2, #0]
 8007a40:	e036      	b.n	8007ab0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a48:	69da      	ldr	r2, [r3, #28]
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	f003 030f 	and.w	r3, r3, #15
 8007a52:	2101      	movs	r1, #1
 8007a54:	fa01 f303 	lsl.w	r3, r1, r3
 8007a58:	041b      	lsls	r3, r3, #16
 8007a5a:	68f9      	ldr	r1, [r7, #12]
 8007a5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a60:	4313      	orrs	r3, r2
 8007a62:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d11a      	bne.n	8007ab0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	015a      	lsls	r2, r3, #5
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	4413      	add	r3, r2
 8007a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	78db      	ldrb	r3, [r3, #3]
 8007a94:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007a96:	430b      	orrs	r3, r1
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	0151      	lsls	r1, r2, #5
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	440a      	add	r2, r1
 8007aa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3714      	adds	r7, #20
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
	...

08007ac0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	785b      	ldrb	r3, [r3, #1]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d161      	bne.n	8007ba0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	015a      	lsls	r2, r3, #5
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007aee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007af2:	d11f      	bne.n	8007b34 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	015a      	lsls	r2, r3, #5
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	4413      	add	r3, r2
 8007afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	0151      	lsls	r1, r2, #5
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	440a      	add	r2, r1
 8007b0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b12:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	015a      	lsls	r2, r3, #5
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68ba      	ldr	r2, [r7, #8]
 8007b24:	0151      	lsls	r1, r2, #5
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	440a      	add	r2, r1
 8007b2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	f003 030f 	and.w	r3, r3, #15
 8007b44:	2101      	movs	r1, #1
 8007b46:	fa01 f303 	lsl.w	r3, r1, r3
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	43db      	mvns	r3, r3
 8007b4e:	68f9      	ldr	r1, [r7, #12]
 8007b50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b54:	4013      	ands	r3, r2
 8007b56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b5e:	69da      	ldr	r2, [r3, #28]
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	f003 030f 	and.w	r3, r3, #15
 8007b68:	2101      	movs	r1, #1
 8007b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	43db      	mvns	r3, r3
 8007b72:	68f9      	ldr	r1, [r7, #12]
 8007b74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b78:	4013      	ands	r3, r2
 8007b7a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	015a      	lsls	r2, r3, #5
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	4413      	add	r3, r2
 8007b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	0159      	lsls	r1, r3, #5
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	440b      	add	r3, r1
 8007b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b96:	4619      	mov	r1, r3
 8007b98:	4b35      	ldr	r3, [pc, #212]	; (8007c70 <USB_DeactivateEndpoint+0x1b0>)
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	600b      	str	r3, [r1, #0]
 8007b9e:	e060      	b.n	8007c62 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bb6:	d11f      	bne.n	8007bf8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	015a      	lsls	r2, r3, #5
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68ba      	ldr	r2, [r7, #8]
 8007bc8:	0151      	lsls	r1, r2, #5
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	440a      	add	r2, r1
 8007bce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007bd6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	015a      	lsls	r2, r3, #5
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	4413      	add	r3, r2
 8007be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	0151      	lsls	r1, r2, #5
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	440a      	add	r2, r1
 8007bee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bf2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bf6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	f003 030f 	and.w	r3, r3, #15
 8007c08:	2101      	movs	r1, #1
 8007c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c0e:	041b      	lsls	r3, r3, #16
 8007c10:	43db      	mvns	r3, r3
 8007c12:	68f9      	ldr	r1, [r7, #12]
 8007c14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c18:	4013      	ands	r3, r2
 8007c1a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c22:	69da      	ldr	r2, [r3, #28]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	f003 030f 	and.w	r3, r3, #15
 8007c2c:	2101      	movs	r1, #1
 8007c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c32:	041b      	lsls	r3, r3, #16
 8007c34:	43db      	mvns	r3, r3
 8007c36:	68f9      	ldr	r1, [r7, #12]
 8007c38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	015a      	lsls	r2, r3, #5
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	4413      	add	r3, r2
 8007c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	0159      	lsls	r1, r3, #5
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	440b      	add	r3, r1
 8007c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	4b05      	ldr	r3, [pc, #20]	; (8007c74 <USB_DeactivateEndpoint+0x1b4>)
 8007c5e:	4013      	ands	r3, r2
 8007c60:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3714      	adds	r7, #20
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr
 8007c70:	ec337800 	.word	0xec337800
 8007c74:	eff37800 	.word	0xeff37800

08007c78 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08a      	sub	sp, #40	; 0x28
 8007c7c:	af02      	add	r7, sp, #8
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	4613      	mov	r3, r2
 8007c84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	785b      	ldrb	r3, [r3, #1]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	f040 815c 	bne.w	8007f52 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	695b      	ldr	r3, [r3, #20]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d132      	bne.n	8007d08 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ca2:	69bb      	ldr	r3, [r7, #24]
 8007ca4:	015a      	lsls	r2, r3, #5
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	4413      	add	r3, r2
 8007caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cae:	691b      	ldr	r3, [r3, #16]
 8007cb0:	69ba      	ldr	r2, [r7, #24]
 8007cb2:	0151      	lsls	r1, r2, #5
 8007cb4:	69fa      	ldr	r2, [r7, #28]
 8007cb6:	440a      	add	r2, r1
 8007cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cbc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007cc0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007cc4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	015a      	lsls	r2, r3, #5
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	4413      	add	r3, r2
 8007cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	69ba      	ldr	r2, [r7, #24]
 8007cd6:	0151      	lsls	r1, r2, #5
 8007cd8:	69fa      	ldr	r2, [r7, #28]
 8007cda:	440a      	add	r2, r1
 8007cdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ce0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ce4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	015a      	lsls	r2, r3, #5
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	4413      	add	r3, r2
 8007cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	69ba      	ldr	r2, [r7, #24]
 8007cf6:	0151      	lsls	r1, r2, #5
 8007cf8:	69fa      	ldr	r2, [r7, #28]
 8007cfa:	440a      	add	r2, r1
 8007cfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d00:	0cdb      	lsrs	r3, r3, #19
 8007d02:	04db      	lsls	r3, r3, #19
 8007d04:	6113      	str	r3, [r2, #16]
 8007d06:	e074      	b.n	8007df2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	015a      	lsls	r2, r3, #5
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	4413      	add	r3, r2
 8007d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	69ba      	ldr	r2, [r7, #24]
 8007d18:	0151      	lsls	r1, r2, #5
 8007d1a:	69fa      	ldr	r2, [r7, #28]
 8007d1c:	440a      	add	r2, r1
 8007d1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d22:	0cdb      	lsrs	r3, r3, #19
 8007d24:	04db      	lsls	r3, r3, #19
 8007d26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	015a      	lsls	r2, r3, #5
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	4413      	add	r3, r2
 8007d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	69ba      	ldr	r2, [r7, #24]
 8007d38:	0151      	lsls	r1, r2, #5
 8007d3a:	69fa      	ldr	r2, [r7, #28]
 8007d3c:	440a      	add	r2, r1
 8007d3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	015a      	lsls	r2, r3, #5
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	4413      	add	r3, r2
 8007d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d58:	691a      	ldr	r2, [r3, #16]
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	6959      	ldr	r1, [r3, #20]
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	440b      	add	r3, r1
 8007d64:	1e59      	subs	r1, r3, #1
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8007d6e:	04d9      	lsls	r1, r3, #19
 8007d70:	4b9d      	ldr	r3, [pc, #628]	; (8007fe8 <USB_EPStartXfer+0x370>)
 8007d72:	400b      	ands	r3, r1
 8007d74:	69b9      	ldr	r1, [r7, #24]
 8007d76:	0148      	lsls	r0, r1, #5
 8007d78:	69f9      	ldr	r1, [r7, #28]
 8007d7a:	4401      	add	r1, r0
 8007d7c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007d80:	4313      	orrs	r3, r2
 8007d82:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	015a      	lsls	r2, r3, #5
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d90:	691a      	ldr	r2, [r3, #16]
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d9a:	69b9      	ldr	r1, [r7, #24]
 8007d9c:	0148      	lsls	r0, r1, #5
 8007d9e:	69f9      	ldr	r1, [r7, #28]
 8007da0:	4401      	add	r1, r0
 8007da2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007da6:	4313      	orrs	r3, r2
 8007da8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	78db      	ldrb	r3, [r3, #3]
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d11f      	bne.n	8007df2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	015a      	lsls	r2, r3, #5
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	4413      	add	r3, r2
 8007dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	69ba      	ldr	r2, [r7, #24]
 8007dc2:	0151      	lsls	r1, r2, #5
 8007dc4:	69fa      	ldr	r2, [r7, #28]
 8007dc6:	440a      	add	r2, r1
 8007dc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dcc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007dd0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	015a      	lsls	r2, r3, #5
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	4413      	add	r3, r2
 8007dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	69ba      	ldr	r2, [r7, #24]
 8007de2:	0151      	lsls	r1, r2, #5
 8007de4:	69fa      	ldr	r2, [r7, #28]
 8007de6:	440a      	add	r2, r1
 8007de8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007df0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007df2:	79fb      	ldrb	r3, [r7, #7]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d14b      	bne.n	8007e90 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d009      	beq.n	8007e14 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	015a      	lsls	r2, r3, #5
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	4413      	add	r3, r2
 8007e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	78db      	ldrb	r3, [r3, #3]
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d128      	bne.n	8007e6e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d110      	bne.n	8007e4e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	015a      	lsls	r2, r3, #5
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	4413      	add	r3, r2
 8007e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	69ba      	ldr	r2, [r7, #24]
 8007e3c:	0151      	lsls	r1, r2, #5
 8007e3e:	69fa      	ldr	r2, [r7, #28]
 8007e40:	440a      	add	r2, r1
 8007e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e4a:	6013      	str	r3, [r2, #0]
 8007e4c:	e00f      	b.n	8007e6e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	015a      	lsls	r2, r3, #5
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	4413      	add	r3, r2
 8007e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	69ba      	ldr	r2, [r7, #24]
 8007e5e:	0151      	lsls	r1, r2, #5
 8007e60:	69fa      	ldr	r2, [r7, #28]
 8007e62:	440a      	add	r2, r1
 8007e64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e6c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	015a      	lsls	r2, r3, #5
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	4413      	add	r3, r2
 8007e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	69ba      	ldr	r2, [r7, #24]
 8007e7e:	0151      	lsls	r1, r2, #5
 8007e80:	69fa      	ldr	r2, [r7, #28]
 8007e82:	440a      	add	r2, r1
 8007e84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e8c:	6013      	str	r3, [r2, #0]
 8007e8e:	e12f      	b.n	80080f0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	015a      	lsls	r2, r3, #5
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	4413      	add	r3, r2
 8007e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	69ba      	ldr	r2, [r7, #24]
 8007ea0:	0151      	lsls	r1, r2, #5
 8007ea2:	69fa      	ldr	r2, [r7, #28]
 8007ea4:	440a      	add	r2, r1
 8007ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eaa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007eae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	78db      	ldrb	r3, [r3, #3]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d015      	beq.n	8007ee4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	695b      	ldr	r3, [r3, #20]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f000 8117 	beq.w	80080f0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	f003 030f 	and.w	r3, r3, #15
 8007ed2:	2101      	movs	r1, #1
 8007ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ed8:	69f9      	ldr	r1, [r7, #28]
 8007eda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	634b      	str	r3, [r1, #52]	; 0x34
 8007ee2:	e105      	b.n	80080f0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d110      	bne.n	8007f16 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	015a      	lsls	r2, r3, #5
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	4413      	add	r3, r2
 8007efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	69ba      	ldr	r2, [r7, #24]
 8007f04:	0151      	lsls	r1, r2, #5
 8007f06:	69fa      	ldr	r2, [r7, #28]
 8007f08:	440a      	add	r2, r1
 8007f0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f12:	6013      	str	r3, [r2, #0]
 8007f14:	e00f      	b.n	8007f36 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	015a      	lsls	r2, r3, #5
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	69ba      	ldr	r2, [r7, #24]
 8007f26:	0151      	lsls	r1, r2, #5
 8007f28:	69fa      	ldr	r2, [r7, #28]
 8007f2a:	440a      	add	r2, r1
 8007f2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f34:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	68d9      	ldr	r1, [r3, #12]
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	781a      	ldrb	r2, [r3, #0]
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	695b      	ldr	r3, [r3, #20]
 8007f42:	b298      	uxth	r0, r3
 8007f44:	79fb      	ldrb	r3, [r7, #7]
 8007f46:	9300      	str	r3, [sp, #0]
 8007f48:	4603      	mov	r3, r0
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f000 fa2b 	bl	80083a6 <USB_WritePacket>
 8007f50:	e0ce      	b.n	80080f0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007f52:	69bb      	ldr	r3, [r7, #24]
 8007f54:	015a      	lsls	r2, r3, #5
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	4413      	add	r3, r2
 8007f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	69ba      	ldr	r2, [r7, #24]
 8007f62:	0151      	lsls	r1, r2, #5
 8007f64:	69fa      	ldr	r2, [r7, #28]
 8007f66:	440a      	add	r2, r1
 8007f68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f6c:	0cdb      	lsrs	r3, r3, #19
 8007f6e:	04db      	lsls	r3, r3, #19
 8007f70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	015a      	lsls	r2, r3, #5
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	4413      	add	r3, r2
 8007f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	69ba      	ldr	r2, [r7, #24]
 8007f82:	0151      	lsls	r1, r2, #5
 8007f84:	69fa      	ldr	r2, [r7, #28]
 8007f86:	440a      	add	r2, r1
 8007f88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007f90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007f94:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d126      	bne.n	8007fec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	015a      	lsls	r2, r3, #5
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	4413      	add	r3, r2
 8007fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007faa:	691a      	ldr	r2, [r3, #16]
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fb4:	69b9      	ldr	r1, [r7, #24]
 8007fb6:	0148      	lsls	r0, r1, #5
 8007fb8:	69f9      	ldr	r1, [r7, #28]
 8007fba:	4401      	add	r1, r0
 8007fbc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	015a      	lsls	r2, r3, #5
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	4413      	add	r3, r2
 8007fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	69ba      	ldr	r2, [r7, #24]
 8007fd4:	0151      	lsls	r1, r2, #5
 8007fd6:	69fa      	ldr	r2, [r7, #28]
 8007fd8:	440a      	add	r2, r1
 8007fda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007fe2:	6113      	str	r3, [r2, #16]
 8007fe4:	e036      	b.n	8008054 <USB_EPStartXfer+0x3dc>
 8007fe6:	bf00      	nop
 8007fe8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	695a      	ldr	r2, [r3, #20]
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	1e5a      	subs	r2, r3, #1
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008000:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	015a      	lsls	r2, r3, #5
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	4413      	add	r3, r2
 800800a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800800e:	691a      	ldr	r2, [r3, #16]
 8008010:	8afb      	ldrh	r3, [r7, #22]
 8008012:	04d9      	lsls	r1, r3, #19
 8008014:	4b39      	ldr	r3, [pc, #228]	; (80080fc <USB_EPStartXfer+0x484>)
 8008016:	400b      	ands	r3, r1
 8008018:	69b9      	ldr	r1, [r7, #24]
 800801a:	0148      	lsls	r0, r1, #5
 800801c:	69f9      	ldr	r1, [r7, #28]
 800801e:	4401      	add	r1, r0
 8008020:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008024:	4313      	orrs	r3, r2
 8008026:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	015a      	lsls	r2, r3, #5
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	4413      	add	r3, r2
 8008030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008034:	691a      	ldr	r2, [r3, #16]
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	8af9      	ldrh	r1, [r7, #22]
 800803c:	fb01 f303 	mul.w	r3, r1, r3
 8008040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008044:	69b9      	ldr	r1, [r7, #24]
 8008046:	0148      	lsls	r0, r1, #5
 8008048:	69f9      	ldr	r1, [r7, #28]
 800804a:	4401      	add	r1, r0
 800804c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008050:	4313      	orrs	r3, r2
 8008052:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008054:	79fb      	ldrb	r3, [r7, #7]
 8008056:	2b01      	cmp	r3, #1
 8008058:	d10d      	bne.n	8008076 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d009      	beq.n	8008076 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	68d9      	ldr	r1, [r3, #12]
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	015a      	lsls	r2, r3, #5
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	4413      	add	r3, r2
 800806e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008072:	460a      	mov	r2, r1
 8008074:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	78db      	ldrb	r3, [r3, #3]
 800807a:	2b01      	cmp	r3, #1
 800807c:	d128      	bne.n	80080d0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800808a:	2b00      	cmp	r3, #0
 800808c:	d110      	bne.n	80080b0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	015a      	lsls	r2, r3, #5
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	4413      	add	r3, r2
 8008096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	69ba      	ldr	r2, [r7, #24]
 800809e:	0151      	lsls	r1, r2, #5
 80080a0:	69fa      	ldr	r2, [r7, #28]
 80080a2:	440a      	add	r2, r1
 80080a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80080ac:	6013      	str	r3, [r2, #0]
 80080ae:	e00f      	b.n	80080d0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	015a      	lsls	r2, r3, #5
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	4413      	add	r3, r2
 80080b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	69ba      	ldr	r2, [r7, #24]
 80080c0:	0151      	lsls	r1, r2, #5
 80080c2:	69fa      	ldr	r2, [r7, #28]
 80080c4:	440a      	add	r2, r1
 80080c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	015a      	lsls	r2, r3, #5
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	4413      	add	r3, r2
 80080d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	69ba      	ldr	r2, [r7, #24]
 80080e0:	0151      	lsls	r1, r2, #5
 80080e2:	69fa      	ldr	r2, [r7, #28]
 80080e4:	440a      	add	r2, r1
 80080e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80080ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3720      	adds	r7, #32
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	1ff80000 	.word	0x1ff80000

08008100 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008100:	b480      	push	{r7}
 8008102:	b087      	sub	sp, #28
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	4613      	mov	r3, r2
 800810c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	785b      	ldrb	r3, [r3, #1]
 800811c:	2b01      	cmp	r3, #1
 800811e:	f040 80cd 	bne.w	80082bc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d132      	bne.n	8008190 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	015a      	lsls	r2, r3, #5
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	4413      	add	r3, r2
 8008132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	0151      	lsls	r1, r2, #5
 800813c:	697a      	ldr	r2, [r7, #20]
 800813e:	440a      	add	r2, r1
 8008140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008144:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008148:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800814c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	4413      	add	r3, r2
 8008156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	693a      	ldr	r2, [r7, #16]
 800815e:	0151      	lsls	r1, r2, #5
 8008160:	697a      	ldr	r2, [r7, #20]
 8008162:	440a      	add	r2, r1
 8008164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008168:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800816c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	015a      	lsls	r2, r3, #5
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	4413      	add	r3, r2
 8008176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	693a      	ldr	r2, [r7, #16]
 800817e:	0151      	lsls	r1, r2, #5
 8008180:	697a      	ldr	r2, [r7, #20]
 8008182:	440a      	add	r2, r1
 8008184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008188:	0cdb      	lsrs	r3, r3, #19
 800818a:	04db      	lsls	r3, r3, #19
 800818c:	6113      	str	r3, [r2, #16]
 800818e:	e04e      	b.n	800822e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	015a      	lsls	r2, r3, #5
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	4413      	add	r3, r2
 8008198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	693a      	ldr	r2, [r7, #16]
 80081a0:	0151      	lsls	r1, r2, #5
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	440a      	add	r2, r1
 80081a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081aa:	0cdb      	lsrs	r3, r3, #19
 80081ac:	04db      	lsls	r3, r3, #19
 80081ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	015a      	lsls	r2, r3, #5
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	4413      	add	r3, r2
 80081b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	693a      	ldr	r2, [r7, #16]
 80081c0:	0151      	lsls	r1, r2, #5
 80081c2:	697a      	ldr	r2, [r7, #20]
 80081c4:	440a      	add	r2, r1
 80081c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80081ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80081d2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	695a      	ldr	r2, [r3, #20]
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d903      	bls.n	80081e8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	689a      	ldr	r2, [r3, #8]
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	015a      	lsls	r2, r3, #5
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	4413      	add	r3, r2
 80081f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	693a      	ldr	r2, [r7, #16]
 80081f8:	0151      	lsls	r1, r2, #5
 80081fa:	697a      	ldr	r2, [r7, #20]
 80081fc:	440a      	add	r2, r1
 80081fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008202:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008206:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	015a      	lsls	r2, r3, #5
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	4413      	add	r3, r2
 8008210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008214:	691a      	ldr	r2, [r3, #16]
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	695b      	ldr	r3, [r3, #20]
 800821a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800821e:	6939      	ldr	r1, [r7, #16]
 8008220:	0148      	lsls	r0, r1, #5
 8008222:	6979      	ldr	r1, [r7, #20]
 8008224:	4401      	add	r1, r0
 8008226:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800822a:	4313      	orrs	r3, r2
 800822c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800822e:	79fb      	ldrb	r3, [r7, #7]
 8008230:	2b01      	cmp	r3, #1
 8008232:	d11e      	bne.n	8008272 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d009      	beq.n	8008250 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	015a      	lsls	r2, r3, #5
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	4413      	add	r3, r2
 8008244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008248:	461a      	mov	r2, r3
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	015a      	lsls	r2, r3, #5
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	4413      	add	r3, r2
 8008258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	693a      	ldr	r2, [r7, #16]
 8008260:	0151      	lsls	r1, r2, #5
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	440a      	add	r2, r1
 8008266:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800826a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800826e:	6013      	str	r3, [r2, #0]
 8008270:	e092      	b.n	8008398 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	015a      	lsls	r2, r3, #5
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	4413      	add	r3, r2
 800827a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	693a      	ldr	r2, [r7, #16]
 8008282:	0151      	lsls	r1, r2, #5
 8008284:	697a      	ldr	r2, [r7, #20]
 8008286:	440a      	add	r2, r1
 8008288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800828c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008290:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d07e      	beq.n	8008398 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	f003 030f 	and.w	r3, r3, #15
 80082aa:	2101      	movs	r1, #1
 80082ac:	fa01 f303 	lsl.w	r3, r1, r3
 80082b0:	6979      	ldr	r1, [r7, #20]
 80082b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082b6:	4313      	orrs	r3, r2
 80082b8:	634b      	str	r3, [r1, #52]	; 0x34
 80082ba:	e06d      	b.n	8008398 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	015a      	lsls	r2, r3, #5
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	4413      	add	r3, r2
 80082c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	693a      	ldr	r2, [r7, #16]
 80082cc:	0151      	lsls	r1, r2, #5
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	440a      	add	r2, r1
 80082d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082d6:	0cdb      	lsrs	r3, r3, #19
 80082d8:	04db      	lsls	r3, r3, #19
 80082da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	015a      	lsls	r2, r3, #5
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	4413      	add	r3, r2
 80082e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	693a      	ldr	r2, [r7, #16]
 80082ec:	0151      	lsls	r1, r2, #5
 80082ee:	697a      	ldr	r2, [r7, #20]
 80082f0:	440a      	add	r2, r1
 80082f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80082fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80082fe:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	695b      	ldr	r3, [r3, #20]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d003      	beq.n	8008310 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	689a      	ldr	r2, [r3, #8]
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	015a      	lsls	r2, r3, #5
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	4413      	add	r3, r2
 8008318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	693a      	ldr	r2, [r7, #16]
 8008320:	0151      	lsls	r1, r2, #5
 8008322:	697a      	ldr	r2, [r7, #20]
 8008324:	440a      	add	r2, r1
 8008326:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800832a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800832e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	015a      	lsls	r2, r3, #5
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	4413      	add	r3, r2
 8008338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800833c:	691a      	ldr	r2, [r3, #16]
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008346:	6939      	ldr	r1, [r7, #16]
 8008348:	0148      	lsls	r0, r1, #5
 800834a:	6979      	ldr	r1, [r7, #20]
 800834c:	4401      	add	r1, r0
 800834e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008352:	4313      	orrs	r3, r2
 8008354:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008356:	79fb      	ldrb	r3, [r7, #7]
 8008358:	2b01      	cmp	r3, #1
 800835a:	d10d      	bne.n	8008378 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d009      	beq.n	8008378 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	68d9      	ldr	r1, [r3, #12]
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	015a      	lsls	r2, r3, #5
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	4413      	add	r3, r2
 8008370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008374:	460a      	mov	r2, r1
 8008376:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	015a      	lsls	r2, r3, #5
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	4413      	add	r3, r2
 8008380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	693a      	ldr	r2, [r7, #16]
 8008388:	0151      	lsls	r1, r2, #5
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	440a      	add	r2, r1
 800838e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008392:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008396:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	371c      	adds	r7, #28
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr

080083a6 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80083a6:	b480      	push	{r7}
 80083a8:	b089      	sub	sp, #36	; 0x24
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	60f8      	str	r0, [r7, #12]
 80083ae:	60b9      	str	r1, [r7, #8]
 80083b0:	4611      	mov	r1, r2
 80083b2:	461a      	mov	r2, r3
 80083b4:	460b      	mov	r3, r1
 80083b6:	71fb      	strb	r3, [r7, #7]
 80083b8:	4613      	mov	r3, r2
 80083ba:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80083c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d11a      	bne.n	8008402 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80083cc:	88bb      	ldrh	r3, [r7, #4]
 80083ce:	3303      	adds	r3, #3
 80083d0:	089b      	lsrs	r3, r3, #2
 80083d2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80083d4:	2300      	movs	r3, #0
 80083d6:	61bb      	str	r3, [r7, #24]
 80083d8:	e00f      	b.n	80083fa <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80083da:	79fb      	ldrb	r3, [r7, #7]
 80083dc:	031a      	lsls	r2, r3, #12
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	4413      	add	r3, r2
 80083e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083e6:	461a      	mov	r2, r3
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	6013      	str	r3, [r2, #0]
      pSrc++;
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	3304      	adds	r3, #4
 80083f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	3301      	adds	r3, #1
 80083f8:	61bb      	str	r3, [r7, #24]
 80083fa:	69ba      	ldr	r2, [r7, #24]
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d3eb      	bcc.n	80083da <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	3724      	adds	r7, #36	; 0x24
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008410:	b480      	push	{r7}
 8008412:	b089      	sub	sp, #36	; 0x24
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	4613      	mov	r3, r2
 800841c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008426:	88fb      	ldrh	r3, [r7, #6]
 8008428:	3303      	adds	r3, #3
 800842a:	089b      	lsrs	r3, r3, #2
 800842c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800842e:	2300      	movs	r3, #0
 8008430:	61bb      	str	r3, [r7, #24]
 8008432:	e00b      	b.n	800844c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	3304      	adds	r3, #4
 8008444:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	3301      	adds	r3, #1
 800844a:	61bb      	str	r3, [r7, #24]
 800844c:	69ba      	ldr	r2, [r7, #24]
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	429a      	cmp	r2, r3
 8008452:	d3ef      	bcc.n	8008434 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008454:	69fb      	ldr	r3, [r7, #28]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3724      	adds	r7, #36	; 0x24
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008462:	b480      	push	{r7}
 8008464:	b085      	sub	sp, #20
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
 800846a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	785b      	ldrb	r3, [r3, #1]
 800847a:	2b01      	cmp	r3, #1
 800847c:	d12c      	bne.n	80084d8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	015a      	lsls	r2, r3, #5
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	4413      	add	r3, r2
 8008486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	db12      	blt.n	80084b6 <USB_EPSetStall+0x54>
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00f      	beq.n	80084b6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	015a      	lsls	r2, r3, #5
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	4413      	add	r3, r2
 800849e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	0151      	lsls	r1, r2, #5
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	440a      	add	r2, r1
 80084ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80084b4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	015a      	lsls	r2, r3, #5
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	4413      	add	r3, r2
 80084be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	68ba      	ldr	r2, [r7, #8]
 80084c6:	0151      	lsls	r1, r2, #5
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	440a      	add	r2, r1
 80084cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80084d4:	6013      	str	r3, [r2, #0]
 80084d6:	e02b      	b.n	8008530 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	db12      	blt.n	8008510 <USB_EPSetStall+0xae>
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00f      	beq.n	8008510 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	015a      	lsls	r2, r3, #5
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	4413      	add	r3, r2
 80084f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68ba      	ldr	r2, [r7, #8]
 8008500:	0151      	lsls	r1, r2, #5
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	440a      	add	r2, r1
 8008506:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800850a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800850e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	015a      	lsls	r2, r3, #5
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	4413      	add	r3, r2
 8008518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68ba      	ldr	r2, [r7, #8]
 8008520:	0151      	lsls	r1, r2, #5
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	440a      	add	r2, r1
 8008526:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800852a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800852e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800853e:	b480      	push	{r7}
 8008540:	b085      	sub	sp, #20
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	785b      	ldrb	r3, [r3, #1]
 8008556:	2b01      	cmp	r3, #1
 8008558:	d128      	bne.n	80085ac <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	015a      	lsls	r2, r3, #5
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	4413      	add	r3, r2
 8008562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68ba      	ldr	r2, [r7, #8]
 800856a:	0151      	lsls	r1, r2, #5
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	440a      	add	r2, r1
 8008570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008574:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008578:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	78db      	ldrb	r3, [r3, #3]
 800857e:	2b03      	cmp	r3, #3
 8008580:	d003      	beq.n	800858a <USB_EPClearStall+0x4c>
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	78db      	ldrb	r3, [r3, #3]
 8008586:	2b02      	cmp	r3, #2
 8008588:	d138      	bne.n	80085fc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	015a      	lsls	r2, r3, #5
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	4413      	add	r3, r2
 8008592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	68ba      	ldr	r2, [r7, #8]
 800859a:	0151      	lsls	r1, r2, #5
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	440a      	add	r2, r1
 80085a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085a8:	6013      	str	r3, [r2, #0]
 80085aa:	e027      	b.n	80085fc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	015a      	lsls	r2, r3, #5
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	4413      	add	r3, r2
 80085b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68ba      	ldr	r2, [r7, #8]
 80085bc:	0151      	lsls	r1, r2, #5
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	440a      	add	r2, r1
 80085c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80085ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	78db      	ldrb	r3, [r3, #3]
 80085d0:	2b03      	cmp	r3, #3
 80085d2:	d003      	beq.n	80085dc <USB_EPClearStall+0x9e>
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	78db      	ldrb	r3, [r3, #3]
 80085d8:	2b02      	cmp	r3, #2
 80085da:	d10f      	bne.n	80085fc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	015a      	lsls	r2, r3, #5
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	4413      	add	r3, r2
 80085e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68ba      	ldr	r2, [r7, #8]
 80085ec:	0151      	lsls	r1, r2, #5
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	440a      	add	r2, r1
 80085f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085fa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3714      	adds	r7, #20
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr

0800860a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800860a:	b480      	push	{r7}
 800860c:	b085      	sub	sp, #20
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
 8008612:	460b      	mov	r3, r1
 8008614:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008628:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800862c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	78fb      	ldrb	r3, [r7, #3]
 8008638:	011b      	lsls	r3, r3, #4
 800863a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800863e:	68f9      	ldr	r1, [r7, #12]
 8008640:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008644:	4313      	orrs	r3, r2
 8008646:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3714      	adds	r7, #20
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr

08008656 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b084      	sub	sp, #16
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	68fa      	ldr	r2, [r7, #12]
 800866c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008670:	f023 0302 	bic.w	r3, r3, #2
 8008674:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008676:	2003      	movs	r0, #3
 8008678:	f7f8 ff0e 	bl	8001498 <HAL_Delay>

  return HAL_OK;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b084      	sub	sp, #16
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086a0:	f043 0302 	orr.w	r3, r3, #2
 80086a4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80086a6:	2003      	movs	r0, #3
 80086a8:	f7f8 fef6 	bl	8001498 <HAL_Delay>

  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80086b6:	b480      	push	{r7}
 80086b8:	b085      	sub	sp, #20
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	695b      	ldr	r3, [r3, #20]
 80086c2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	699b      	ldr	r3, [r3, #24]
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	4013      	ands	r3, r2
 80086cc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80086ce:	68fb      	ldr	r3, [r7, #12]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3714      	adds	r7, #20
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ee:	699b      	ldr	r3, [r3, #24]
 80086f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086f8:	69db      	ldr	r3, [r3, #28]
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	4013      	ands	r3, r2
 80086fe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	0c1b      	lsrs	r3, r3, #16
}
 8008704:	4618      	mov	r0, r3
 8008706:	3714      	adds	r7, #20
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008722:	699b      	ldr	r3, [r3, #24]
 8008724:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800872c:	69db      	ldr	r3, [r3, #28]
 800872e:	68ba      	ldr	r2, [r7, #8]
 8008730:	4013      	ands	r3, r2
 8008732:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	b29b      	uxth	r3, r3
}
 8008738:	4618      	mov	r0, r3
 800873a:	3714      	adds	r7, #20
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	460b      	mov	r3, r1
 800874e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008754:	78fb      	ldrb	r3, [r7, #3]
 8008756:	015a      	lsls	r2, r3, #5
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	4413      	add	r3, r2
 800875c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800876a:	695b      	ldr	r3, [r3, #20]
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	4013      	ands	r3, r2
 8008770:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008772:	68bb      	ldr	r3, [r7, #8]
}
 8008774:	4618      	mov	r0, r3
 8008776:	3714      	adds	r7, #20
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008780:	b480      	push	{r7}
 8008782:	b087      	sub	sp, #28
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	460b      	mov	r3, r1
 800878a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087a2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80087a4:	78fb      	ldrb	r3, [r7, #3]
 80087a6:	f003 030f 	and.w	r3, r3, #15
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	fa22 f303 	lsr.w	r3, r2, r3
 80087b0:	01db      	lsls	r3, r3, #7
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	693a      	ldr	r2, [r7, #16]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80087ba:	78fb      	ldrb	r3, [r7, #3]
 80087bc:	015a      	lsls	r2, r3, #5
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	4413      	add	r3, r2
 80087c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	4013      	ands	r3, r2
 80087cc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80087ce:	68bb      	ldr	r3, [r7, #8]
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	371c      	adds	r7, #28
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	695b      	ldr	r3, [r3, #20]
 80087e8:	f003 0301 	and.w	r3, r3, #1
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008812:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008816:	f023 0307 	bic.w	r3, r3, #7
 800881a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	68fa      	ldr	r2, [r7, #12]
 8008826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800882a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800882e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3714      	adds	r7, #20
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
	...

08008840 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008840:	b480      	push	{r7}
 8008842:	b087      	sub	sp, #28
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	460b      	mov	r3, r1
 800884a:	607a      	str	r2, [r7, #4]
 800884c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	333c      	adds	r3, #60	; 0x3c
 8008856:	3304      	adds	r3, #4
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	4a26      	ldr	r2, [pc, #152]	; (80088f8 <USB_EP0_OutStart+0xb8>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d90a      	bls.n	800887a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008870:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008874:	d101      	bne.n	800887a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008876:	2300      	movs	r3, #0
 8008878:	e037      	b.n	80088ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008880:	461a      	mov	r2, r3
 8008882:	2300      	movs	r3, #0
 8008884:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	697a      	ldr	r2, [r7, #20]
 8008890:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008894:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008898:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088a8:	f043 0318 	orr.w	r3, r3, #24
 80088ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	697a      	ldr	r2, [r7, #20]
 80088b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088bc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80088c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80088c2:	7afb      	ldrb	r3, [r7, #11]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d10f      	bne.n	80088e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ce:	461a      	mov	r2, r3
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	697a      	ldr	r2, [r7, #20]
 80088de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088e2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80088e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	371c      	adds	r7, #28
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop
 80088f8:	4f54300a 	.word	0x4f54300a

080088fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008904:	2300      	movs	r3, #0
 8008906:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	3301      	adds	r3, #1
 800890c:	60fb      	str	r3, [r7, #12]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	4a13      	ldr	r2, [pc, #76]	; (8008960 <USB_CoreReset+0x64>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d901      	bls.n	800891a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008916:	2303      	movs	r3, #3
 8008918:	e01b      	b.n	8008952 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	2b00      	cmp	r3, #0
 8008920:	daf2      	bge.n	8008908 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008922:	2300      	movs	r3, #0
 8008924:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	691b      	ldr	r3, [r3, #16]
 800892a:	f043 0201 	orr.w	r2, r3, #1
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	3301      	adds	r3, #1
 8008936:	60fb      	str	r3, [r7, #12]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	4a09      	ldr	r2, [pc, #36]	; (8008960 <USB_CoreReset+0x64>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d901      	bls.n	8008944 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008940:	2303      	movs	r3, #3
 8008942:	e006      	b.n	8008952 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	f003 0301 	and.w	r3, r3, #1
 800894c:	2b01      	cmp	r3, #1
 800894e:	d0f0      	beq.n	8008932 <USB_CoreReset+0x36>

  return HAL_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3714      	adds	r7, #20
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	00030d40 	.word	0x00030d40

08008964 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	460b      	mov	r3, r1
 800896e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008970:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008974:	f002 f92c 	bl	800abd0 <malloc>
 8008978:	4603      	mov	r3, r0
 800897a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d105      	bne.n	800898e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800898a:	2302      	movs	r3, #2
 800898c:	e066      	b.n	8008a5c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	68fa      	ldr	r2, [r7, #12]
 8008992:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	7c1b      	ldrb	r3, [r3, #16]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d119      	bne.n	80089d2 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800899e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089a2:	2202      	movs	r2, #2
 80089a4:	2181      	movs	r1, #129	; 0x81
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f001 ff99 	bl	800a8de <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80089b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089b6:	2202      	movs	r2, #2
 80089b8:	2101      	movs	r1, #1
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f001 ff8f 	bl	800a8de <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2210      	movs	r2, #16
 80089cc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80089d0:	e016      	b.n	8008a00 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80089d2:	2340      	movs	r3, #64	; 0x40
 80089d4:	2202      	movs	r2, #2
 80089d6:	2181      	movs	r1, #129	; 0x81
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f001 ff80 	bl	800a8de <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2201      	movs	r2, #1
 80089e2:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80089e4:	2340      	movs	r3, #64	; 0x40
 80089e6:	2202      	movs	r2, #2
 80089e8:	2101      	movs	r1, #1
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f001 ff77 	bl	800a8de <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2210      	movs	r2, #16
 80089fc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008a00:	2308      	movs	r3, #8
 8008a02:	2203      	movs	r2, #3
 8008a04:	2182      	movs	r1, #130	; 0x82
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f001 ff69 	bl	800a8de <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	7c1b      	ldrb	r3, [r3, #16]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d109      	bne.n	8008a4a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a40:	2101      	movs	r1, #1
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f002 f83a 	bl	800aabc <USBD_LL_PrepareReceive>
 8008a48:	e007      	b.n	8008a5a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a50:	2340      	movs	r3, #64	; 0x40
 8008a52:	2101      	movs	r1, #1
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f002 f831 	bl	800aabc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8008a70:	2300      	movs	r3, #0
 8008a72:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008a74:	2181      	movs	r1, #129	; 0x81
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f001 ff57 	bl	800a92a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008a82:	2101      	movs	r1, #1
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f001 ff50 	bl	800a92a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008a92:	2182      	movs	r1, #130	; 0x82
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f001 ff48 	bl	800a92a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00e      	beq.n	8008ad2 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f002 f88b 	bl	800abe0 <free>
    pdev->pClassData = NULL;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8008ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008aec:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008aee:	2300      	movs	r3, #0
 8008af0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008af2:	2300      	movs	r3, #0
 8008af4:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8008af6:	2300      	movs	r3, #0
 8008af8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d03a      	beq.n	8008b7c <USBD_CDC_Setup+0xa0>
 8008b06:	2b20      	cmp	r3, #32
 8008b08:	f040 8097 	bne.w	8008c3a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	88db      	ldrh	r3, [r3, #6]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d029      	beq.n	8008b68 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	b25b      	sxtb	r3, r3
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	da11      	bge.n	8008b42 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	683a      	ldr	r2, [r7, #0]
 8008b28:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8008b2a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b2c:	683a      	ldr	r2, [r7, #0]
 8008b2e:	88d2      	ldrh	r2, [r2, #6]
 8008b30:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008b32:	6939      	ldr	r1, [r7, #16]
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	88db      	ldrh	r3, [r3, #6]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f001 fa9d 	bl	800a07a <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8008b40:	e082      	b.n	8008c48 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	785a      	ldrb	r2, [r3, #1]
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	88db      	ldrh	r3, [r3, #6]
 8008b50:	b2da      	uxtb	r2, r3
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008b58:	6939      	ldr	r1, [r7, #16]
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	88db      	ldrh	r3, [r3, #6]
 8008b5e:	461a      	mov	r2, r3
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f001 fab6 	bl	800a0d2 <USBD_CtlPrepareRx>
    break;
 8008b66:	e06f      	b.n	8008c48 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	683a      	ldr	r2, [r7, #0]
 8008b72:	7850      	ldrb	r0, [r2, #1]
 8008b74:	2200      	movs	r2, #0
 8008b76:	6839      	ldr	r1, [r7, #0]
 8008b78:	4798      	blx	r3
    break;
 8008b7a:	e065      	b.n	8008c48 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	785b      	ldrb	r3, [r3, #1]
 8008b80:	2b0b      	cmp	r3, #11
 8008b82:	d84f      	bhi.n	8008c24 <USBD_CDC_Setup+0x148>
 8008b84:	a201      	add	r2, pc, #4	; (adr r2, 8008b8c <USBD_CDC_Setup+0xb0>)
 8008b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b8a:	bf00      	nop
 8008b8c:	08008bbd 	.word	0x08008bbd
 8008b90:	08008c33 	.word	0x08008c33
 8008b94:	08008c25 	.word	0x08008c25
 8008b98:	08008c25 	.word	0x08008c25
 8008b9c:	08008c25 	.word	0x08008c25
 8008ba0:	08008c25 	.word	0x08008c25
 8008ba4:	08008c25 	.word	0x08008c25
 8008ba8:	08008c25 	.word	0x08008c25
 8008bac:	08008c25 	.word	0x08008c25
 8008bb0:	08008c25 	.word	0x08008c25
 8008bb4:	08008be5 	.word	0x08008be5
 8008bb8:	08008c0d 	.word	0x08008c0d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bc2:	2b03      	cmp	r3, #3
 8008bc4:	d107      	bne.n	8008bd6 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008bc6:	f107 030c 	add.w	r3, r7, #12
 8008bca:	2202      	movs	r2, #2
 8008bcc:	4619      	mov	r1, r3
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f001 fa53 	bl	800a07a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008bd4:	e030      	b.n	8008c38 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8008bd6:	6839      	ldr	r1, [r7, #0]
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f001 f9dd 	bl	8009f98 <USBD_CtlError>
        ret = USBD_FAIL;
 8008bde:	2303      	movs	r3, #3
 8008be0:	75fb      	strb	r3, [r7, #23]
      break;
 8008be2:	e029      	b.n	8008c38 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bea:	2b03      	cmp	r3, #3
 8008bec:	d107      	bne.n	8008bfe <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008bee:	f107 030f 	add.w	r3, r7, #15
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f001 fa3f 	bl	800a07a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008bfc:	e01c      	b.n	8008c38 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8008bfe:	6839      	ldr	r1, [r7, #0]
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f001 f9c9 	bl	8009f98 <USBD_CtlError>
        ret = USBD_FAIL;
 8008c06:	2303      	movs	r3, #3
 8008c08:	75fb      	strb	r3, [r7, #23]
      break;
 8008c0a:	e015      	b.n	8008c38 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c12:	2b03      	cmp	r3, #3
 8008c14:	d00f      	beq.n	8008c36 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8008c16:	6839      	ldr	r1, [r7, #0]
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f001 f9bd 	bl	8009f98 <USBD_CtlError>
        ret = USBD_FAIL;
 8008c1e:	2303      	movs	r3, #3
 8008c20:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008c22:	e008      	b.n	8008c36 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8008c24:	6839      	ldr	r1, [r7, #0]
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f001 f9b6 	bl	8009f98 <USBD_CtlError>
      ret = USBD_FAIL;
 8008c2c:	2303      	movs	r3, #3
 8008c2e:	75fb      	strb	r3, [r7, #23]
      break;
 8008c30:	e002      	b.n	8008c38 <USBD_CDC_Setup+0x15c>
      break;
 8008c32:	bf00      	nop
 8008c34:	e008      	b.n	8008c48 <USBD_CDC_Setup+0x16c>
      break;
 8008c36:	bf00      	nop
    }
    break;
 8008c38:	e006      	b.n	8008c48 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8008c3a:	6839      	ldr	r1, [r7, #0]
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f001 f9ab 	bl	8009f98 <USBD_CtlError>
    ret = USBD_FAIL;
 8008c42:	2303      	movs	r3, #3
 8008c44:	75fb      	strb	r3, [r7, #23]
    break;
 8008c46:	bf00      	nop
  }

  return (uint8_t)ret;
 8008c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3718      	adds	r7, #24
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop

08008c54 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c66:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d101      	bne.n	8008c76 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008c72:	2303      	movs	r3, #3
 8008c74:	e049      	b.n	8008d0a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c7c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008c7e:	78fa      	ldrb	r2, [r7, #3]
 8008c80:	6879      	ldr	r1, [r7, #4]
 8008c82:	4613      	mov	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4413      	add	r3, r2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	440b      	add	r3, r1
 8008c8c:	3318      	adds	r3, #24
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d029      	beq.n	8008ce8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008c94:	78fa      	ldrb	r2, [r7, #3]
 8008c96:	6879      	ldr	r1, [r7, #4]
 8008c98:	4613      	mov	r3, r2
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4413      	add	r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	440b      	add	r3, r1
 8008ca2:	3318      	adds	r3, #24
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	78f9      	ldrb	r1, [r7, #3]
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	460b      	mov	r3, r1
 8008cac:	00db      	lsls	r3, r3, #3
 8008cae:	1a5b      	subs	r3, r3, r1
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	4403      	add	r3, r0
 8008cb4:	3344      	adds	r3, #68	; 0x44
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	fbb2 f1f3 	udiv	r1, r2, r3
 8008cbc:	fb03 f301 	mul.w	r3, r3, r1
 8008cc0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d110      	bne.n	8008ce8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008cc6:	78fa      	ldrb	r2, [r7, #3]
 8008cc8:	6879      	ldr	r1, [r7, #4]
 8008cca:	4613      	mov	r3, r2
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	4413      	add	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	440b      	add	r3, r1
 8008cd4:	3318      	adds	r3, #24
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008cda:	78f9      	ldrb	r1, [r7, #3]
 8008cdc:	2300      	movs	r3, #0
 8008cde:	2200      	movs	r2, #0
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f001 feca 	bl	800aa7a <USBD_LL_Transmit>
 8008ce6:	e00f      	b.n	8008d08 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cf6:	691b      	ldr	r3, [r3, #16]
 8008cf8:	68ba      	ldr	r2, [r7, #8]
 8008cfa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008cfe:	68ba      	ldr	r2, [r7, #8]
 8008d00:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008d04:	78fa      	ldrb	r2, [r7, #3]
 8008d06:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3710      	adds	r7, #16
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b084      	sub	sp, #16
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d24:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d101      	bne.n	8008d34 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008d30:	2303      	movs	r3, #3
 8008d32:	e015      	b.n	8008d60 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008d34:	78fb      	ldrb	r3, [r7, #3]
 8008d36:	4619      	mov	r1, r3
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f001 fee0 	bl	800aafe <USBD_LL_GetRxDataSize>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008d5a:	4611      	mov	r1, r2
 8008d5c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d76:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d015      	beq.n	8008dae <USBD_CDC_EP0_RxReady+0x46>
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008d88:	2bff      	cmp	r3, #255	; 0xff
 8008d8a:	d010      	beq.n	8008dae <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008d9a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008da2:	b292      	uxth	r2, r2
 8008da4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	22ff      	movs	r2, #255	; 0xff
 8008daa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8008dae:	2300      	movs	r3, #0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2243      	movs	r2, #67	; 0x43
 8008dc4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008dc6:	4b03      	ldr	r3, [pc, #12]	; (8008dd4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr
 8008dd4:	20000098 	.word	0x20000098

08008dd8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2243      	movs	r2, #67	; 0x43
 8008de4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008de6:	4b03      	ldr	r3, [pc, #12]	; (8008df4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr
 8008df4:	20000054 	.word	0x20000054

08008df8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2243      	movs	r2, #67	; 0x43
 8008e04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008e06:	4b03      	ldr	r3, [pc, #12]	; (8008e14 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr
 8008e14:	200000dc 	.word	0x200000dc

08008e18 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	220a      	movs	r2, #10
 8008e24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008e26:	4b03      	ldr	r3, [pc, #12]	; (8008e34 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	370c      	adds	r7, #12
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr
 8008e34:	20000010 	.word	0x20000010

08008e38 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d101      	bne.n	8008e4c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008e48:	2303      	movs	r3, #3
 8008e4a:	e004      	b.n	8008e56 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	683a      	ldr	r2, [r7, #0]
 8008e50:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	370c      	adds	r7, #12
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr

08008e62 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008e62:	b480      	push	{r7}
 8008e64:	b087      	sub	sp, #28
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	60f8      	str	r0, [r7, #12]
 8008e6a:	60b9      	str	r1, [r7, #8]
 8008e6c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e74:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	68ba      	ldr	r2, [r7, #8]
 8008e7a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	371c      	adds	r7, #28
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b085      	sub	sp, #20
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ea4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	683a      	ldr	r2, [r7, #0]
 8008eaa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3714      	adds	r7, #20
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008eca:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d101      	bne.n	8008ede <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008eda:	2303      	movs	r3, #3
 8008edc:	e01a      	b.n	8008f14 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d114      	bne.n	8008f12 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	2201      	movs	r2, #1
 8008eec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008f06:	2181      	movs	r1, #129	; 0x81
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f001 fdb6 	bl	800aa7a <USBD_LL_Transmit>

    ret = USBD_OK;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d101      	bne.n	8008f3a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008f36:	2303      	movs	r3, #3
 8008f38:	e016      	b.n	8008f68 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	7c1b      	ldrb	r3, [r3, #16]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d109      	bne.n	8008f56 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f4c:	2101      	movs	r1, #1
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f001 fdb4 	bl	800aabc <USBD_LL_PrepareReceive>
 8008f54:	e007      	b.n	8008f66 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f5c:	2340      	movs	r3, #64	; 0x40
 8008f5e:	2101      	movs	r1, #1
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f001 fdab 	bl	800aabc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008f66:	2300      	movs	r3, #0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b086      	sub	sp, #24
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	60f8      	str	r0, [r7, #12]
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	4613      	mov	r3, r2
 8008f7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d101      	bne.n	8008f88 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008f84:	2303      	movs	r3, #3
 8008f86:	e025      	b.n	8008fd4 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d003      	beq.n	8008f9a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d003      	beq.n	8008fac <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d003      	beq.n	8008fba <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	68ba      	ldr	r2, [r7, #8]
 8008fb6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	79fa      	ldrb	r2, [r7, #7]
 8008fc6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008fc8:	68f8      	ldr	r0, [r7, #12]
 8008fca:	f001 fc21 	bl	800a810 <USBD_LL_Init>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3718      	adds	r7, #24
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d101      	bne.n	8008ff4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	e010      	b.n	8009016 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	683a      	ldr	r2, [r7, #0]
 8008ff8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009004:	f107 020e 	add.w	r2, r7, #14
 8009008:	4610      	mov	r0, r2
 800900a:	4798      	blx	r3
 800900c:	4602      	mov	r2, r0
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b082      	sub	sp, #8
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f001 fc3e 	bl	800a8a8 <USBD_LL_Start>
 800902c:	4603      	mov	r3, r0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009036:	b480      	push	{r7}
 8009038:	b083      	sub	sp, #12
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	460b      	mov	r3, r1
 8009056:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009058:	2303      	movs	r3, #3
 800905a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009062:	2b00      	cmp	r3, #0
 8009064:	d009      	beq.n	800907a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	78fa      	ldrb	r2, [r7, #3]
 8009070:	4611      	mov	r1, r2
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	4798      	blx	r3
 8009076:	4603      	mov	r3, r0
 8009078:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800907a:	7bfb      	ldrb	r3, [r7, #15]
}
 800907c:	4618      	mov	r0, r3
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	460b      	mov	r3, r1
 800908e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009096:	2b00      	cmp	r3, #0
 8009098:	d007      	beq.n	80090aa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	78fa      	ldrb	r2, [r7, #3]
 80090a4:	4611      	mov	r1, r2
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	4798      	blx	r3
  }

  return USBD_OK;
 80090aa:	2300      	movs	r3, #0
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3708      	adds	r7, #8
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80090c4:	6839      	ldr	r1, [r7, #0]
 80090c6:	4618      	mov	r0, r3
 80090c8:	f000 ff2c 	bl	8009f24 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80090da:	461a      	mov	r2, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80090e8:	f003 031f 	and.w	r3, r3, #31
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d00e      	beq.n	800910e <USBD_LL_SetupStage+0x5a>
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d302      	bcc.n	80090fa <USBD_LL_SetupStage+0x46>
 80090f4:	2b02      	cmp	r3, #2
 80090f6:	d014      	beq.n	8009122 <USBD_LL_SetupStage+0x6e>
 80090f8:	e01d      	b.n	8009136 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009100:	4619      	mov	r1, r3
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 fa18 	bl	8009538 <USBD_StdDevReq>
 8009108:	4603      	mov	r3, r0
 800910a:	73fb      	strb	r3, [r7, #15]
      break;
 800910c:	e020      	b.n	8009150 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009114:	4619      	mov	r1, r3
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fa7c 	bl	8009614 <USBD_StdItfReq>
 800911c:	4603      	mov	r3, r0
 800911e:	73fb      	strb	r3, [r7, #15]
      break;
 8009120:	e016      	b.n	8009150 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009128:	4619      	mov	r1, r3
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fab8 	bl	80096a0 <USBD_StdEPReq>
 8009130:	4603      	mov	r3, r0
 8009132:	73fb      	strb	r3, [r7, #15]
      break;
 8009134:	e00c      	b.n	8009150 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800913c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009140:	b2db      	uxtb	r3, r3
 8009142:	4619      	mov	r1, r3
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f001 fc0f 	bl	800a968 <USBD_LL_StallEP>
 800914a:	4603      	mov	r3, r0
 800914c:	73fb      	strb	r3, [r7, #15]
      break;
 800914e:	bf00      	nop
  }

  return ret;
 8009150:	7bfb      	ldrb	r3, [r7, #15]
}
 8009152:	4618      	mov	r0, r3
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b086      	sub	sp, #24
 800915e:	af00      	add	r7, sp, #0
 8009160:	60f8      	str	r0, [r7, #12]
 8009162:	460b      	mov	r3, r1
 8009164:	607a      	str	r2, [r7, #4]
 8009166:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009168:	7afb      	ldrb	r3, [r7, #11]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d137      	bne.n	80091de <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009174:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800917c:	2b03      	cmp	r3, #3
 800917e:	d14a      	bne.n	8009216 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	689a      	ldr	r2, [r3, #8]
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	429a      	cmp	r2, r3
 800918a:	d913      	bls.n	80091b4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	689a      	ldr	r2, [r3, #8]
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	1ad2      	subs	r2, r2, r3
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	68da      	ldr	r2, [r3, #12]
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	4293      	cmp	r3, r2
 80091a4:	bf28      	it	cs
 80091a6:	4613      	movcs	r3, r2
 80091a8:	461a      	mov	r2, r3
 80091aa:	6879      	ldr	r1, [r7, #4]
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f000 ffad 	bl	800a10c <USBD_CtlContinueRx>
 80091b2:	e030      	b.n	8009216 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091ba:	691b      	ldr	r3, [r3, #16]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00a      	beq.n	80091d6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80091c6:	2b03      	cmp	r3, #3
 80091c8:	d105      	bne.n	80091d6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091d0:	691b      	ldr	r3, [r3, #16]
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80091d6:	68f8      	ldr	r0, [r7, #12]
 80091d8:	f000 ffa9 	bl	800a12e <USBD_CtlSendStatus>
 80091dc:	e01b      	b.n	8009216 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091e4:	699b      	ldr	r3, [r3, #24]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d013      	beq.n	8009212 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80091f0:	2b03      	cmp	r3, #3
 80091f2:	d10e      	bne.n	8009212 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091fa:	699b      	ldr	r3, [r3, #24]
 80091fc:	7afa      	ldrb	r2, [r7, #11]
 80091fe:	4611      	mov	r1, r2
 8009200:	68f8      	ldr	r0, [r7, #12]
 8009202:	4798      	blx	r3
 8009204:	4603      	mov	r3, r0
 8009206:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8009208:	7dfb      	ldrb	r3, [r7, #23]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d003      	beq.n	8009216 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800920e:	7dfb      	ldrb	r3, [r7, #23]
 8009210:	e002      	b.n	8009218 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009212:	2303      	movs	r3, #3
 8009214:	e000      	b.n	8009218 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3718      	adds	r7, #24
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b086      	sub	sp, #24
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	460b      	mov	r3, r1
 800922a:	607a      	str	r2, [r7, #4]
 800922c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800922e:	7afb      	ldrb	r3, [r7, #11]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d16a      	bne.n	800930a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	3314      	adds	r3, #20
 8009238:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009240:	2b02      	cmp	r3, #2
 8009242:	d155      	bne.n	80092f0 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	689a      	ldr	r2, [r3, #8]
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	429a      	cmp	r2, r3
 800924e:	d914      	bls.n	800927a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	689a      	ldr	r2, [r3, #8]
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	1ad2      	subs	r2, r2, r3
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	461a      	mov	r2, r3
 8009264:	6879      	ldr	r1, [r7, #4]
 8009266:	68f8      	ldr	r0, [r7, #12]
 8009268:	f000 ff22 	bl	800a0b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800926c:	2300      	movs	r3, #0
 800926e:	2200      	movs	r2, #0
 8009270:	2100      	movs	r1, #0
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f001 fc22 	bl	800aabc <USBD_LL_PrepareReceive>
 8009278:	e03a      	b.n	80092f0 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	68da      	ldr	r2, [r3, #12]
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	429a      	cmp	r2, r3
 8009284:	d11c      	bne.n	80092c0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	685a      	ldr	r2, [r3, #4]
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800928e:	429a      	cmp	r2, r3
 8009290:	d316      	bcc.n	80092c0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	685a      	ldr	r2, [r3, #4]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800929c:	429a      	cmp	r2, r3
 800929e:	d20f      	bcs.n	80092c0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80092a0:	2200      	movs	r2, #0
 80092a2:	2100      	movs	r1, #0
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f000 ff03 	bl	800a0b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2200      	movs	r2, #0
 80092ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092b2:	2300      	movs	r3, #0
 80092b4:	2200      	movs	r2, #0
 80092b6:	2100      	movs	r1, #0
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f001 fbff 	bl	800aabc <USBD_LL_PrepareReceive>
 80092be:	e017      	b.n	80092f0 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00a      	beq.n	80092e2 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80092d2:	2b03      	cmp	r3, #3
 80092d4:	d105      	bne.n	80092e2 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80092e2:	2180      	movs	r1, #128	; 0x80
 80092e4:	68f8      	ldr	r0, [r7, #12]
 80092e6:	f001 fb3f 	bl	800a968 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80092ea:	68f8      	ldr	r0, [r7, #12]
 80092ec:	f000 ff32 	bl	800a154 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d123      	bne.n	8009342 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f7ff fe9b 	bl	8009036 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2200      	movs	r2, #0
 8009304:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009308:	e01b      	b.n	8009342 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009310:	695b      	ldr	r3, [r3, #20]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d013      	beq.n	800933e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800931c:	2b03      	cmp	r3, #3
 800931e:	d10e      	bne.n	800933e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009326:	695b      	ldr	r3, [r3, #20]
 8009328:	7afa      	ldrb	r2, [r7, #11]
 800932a:	4611      	mov	r1, r2
 800932c:	68f8      	ldr	r0, [r7, #12]
 800932e:	4798      	blx	r3
 8009330:	4603      	mov	r3, r0
 8009332:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8009334:	7dfb      	ldrb	r3, [r7, #23]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d003      	beq.n	8009342 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800933a:	7dfb      	ldrb	r3, [r7, #23]
 800933c:	e002      	b.n	8009344 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800933e:	2303      	movs	r3, #3
 8009340:	e000      	b.n	8009344 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8009342:	2300      	movs	r3, #0
}
 8009344:	4618      	mov	r0, r3
 8009346:	3718      	adds	r7, #24
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2201      	movs	r2, #1
 8009358:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009378:	2b00      	cmp	r3, #0
 800937a:	d009      	beq.n	8009390 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	6852      	ldr	r2, [r2, #4]
 8009388:	b2d2      	uxtb	r2, r2
 800938a:	4611      	mov	r1, r2
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009390:	2340      	movs	r3, #64	; 0x40
 8009392:	2200      	movs	r2, #0
 8009394:	2100      	movs	r1, #0
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f001 faa1 	bl	800a8de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2201      	movs	r2, #1
 80093a0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2240      	movs	r2, #64	; 0x40
 80093a8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80093ac:	2340      	movs	r3, #64	; 0x40
 80093ae:	2200      	movs	r2, #0
 80093b0:	2180      	movs	r1, #128	; 0x80
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f001 fa93 	bl	800a8de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2240      	movs	r2, #64	; 0x40
 80093c2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3708      	adds	r7, #8
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80093ce:	b480      	push	{r7}
 80093d0:	b083      	sub	sp, #12
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
 80093d6:	460b      	mov	r3, r1
 80093d8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	78fa      	ldrb	r2, [r7, #3]
 80093de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	370c      	adds	r7, #12
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr

080093ee <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80093ee:	b480      	push	{r7}
 80093f0:	b083      	sub	sp, #12
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2204      	movs	r2, #4
 8009406:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009426:	2b04      	cmp	r3, #4
 8009428:	d105      	bne.n	8009436 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009436:	2300      	movs	r3, #0
}
 8009438:	4618      	mov	r0, r3
 800943a:	370c      	adds	r7, #12
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009452:	2b03      	cmp	r3, #3
 8009454:	d10b      	bne.n	800946e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800945c:	69db      	ldr	r3, [r3, #28]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d005      	beq.n	800946e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009468:	69db      	ldr	r3, [r3, #28]
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800946e:	2300      	movs	r3, #0
}
 8009470:	4618      	mov	r0, r3
 8009472:	3708      	adds	r7, #8
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	460b      	mov	r3, r1
 8009482:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	370c      	adds	r7, #12
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr

08009492 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009492:	b480      	push	{r7}
 8009494:	b083      	sub	sp, #12
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
 800949a:	460b      	mov	r3, r1
 800949c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800949e:	2300      	movs	r3, #0
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	370c      	adds	r7, #12
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr

080094c2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b082      	sub	sp, #8
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2201      	movs	r2, #1
 80094ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d009      	beq.n	80094f0 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	6852      	ldr	r2, [r2, #4]
 80094e8:	b2d2      	uxtb	r2, r2
 80094ea:	4611      	mov	r1, r2
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	4798      	blx	r3
  }

  return USBD_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3708      	adds	r7, #8
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80094fa:	b480      	push	{r7}
 80094fc:	b087      	sub	sp, #28
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	3301      	adds	r3, #1
 8009510:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009518:	8a3b      	ldrh	r3, [r7, #16]
 800951a:	021b      	lsls	r3, r3, #8
 800951c:	b21a      	sxth	r2, r3
 800951e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009522:	4313      	orrs	r3, r2
 8009524:	b21b      	sxth	r3, r3
 8009526:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009528:	89fb      	ldrh	r3, [r7, #14]
}
 800952a:	4618      	mov	r0, r3
 800952c:	371c      	adds	r7, #28
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr
	...

08009538 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009542:	2300      	movs	r3, #0
 8009544:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800954e:	2b20      	cmp	r3, #32
 8009550:	d004      	beq.n	800955c <USBD_StdDevReq+0x24>
 8009552:	2b40      	cmp	r3, #64	; 0x40
 8009554:	d002      	beq.n	800955c <USBD_StdDevReq+0x24>
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00a      	beq.n	8009570 <USBD_StdDevReq+0x38>
 800955a:	e050      	b.n	80095fe <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	6839      	ldr	r1, [r7, #0]
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	4798      	blx	r3
 800956a:	4603      	mov	r3, r0
 800956c:	73fb      	strb	r3, [r7, #15]
    break;
 800956e:	e04b      	b.n	8009608 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	785b      	ldrb	r3, [r3, #1]
 8009574:	2b09      	cmp	r3, #9
 8009576:	d83c      	bhi.n	80095f2 <USBD_StdDevReq+0xba>
 8009578:	a201      	add	r2, pc, #4	; (adr r2, 8009580 <USBD_StdDevReq+0x48>)
 800957a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800957e:	bf00      	nop
 8009580:	080095d5 	.word	0x080095d5
 8009584:	080095e9 	.word	0x080095e9
 8009588:	080095f3 	.word	0x080095f3
 800958c:	080095df 	.word	0x080095df
 8009590:	080095f3 	.word	0x080095f3
 8009594:	080095b3 	.word	0x080095b3
 8009598:	080095a9 	.word	0x080095a9
 800959c:	080095f3 	.word	0x080095f3
 80095a0:	080095cb 	.word	0x080095cb
 80095a4:	080095bd 	.word	0x080095bd
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80095a8:	6839      	ldr	r1, [r7, #0]
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 f9ce 	bl	800994c <USBD_GetDescriptor>
      break;
 80095b0:	e024      	b.n	80095fc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80095b2:	6839      	ldr	r1, [r7, #0]
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 fb33 	bl	8009c20 <USBD_SetAddress>
      break;
 80095ba:	e01f      	b.n	80095fc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80095bc:	6839      	ldr	r1, [r7, #0]
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 fb70 	bl	8009ca4 <USBD_SetConfig>
 80095c4:	4603      	mov	r3, r0
 80095c6:	73fb      	strb	r3, [r7, #15]
      break;
 80095c8:	e018      	b.n	80095fc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80095ca:	6839      	ldr	r1, [r7, #0]
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 fc0d 	bl	8009dec <USBD_GetConfig>
      break;
 80095d2:	e013      	b.n	80095fc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80095d4:	6839      	ldr	r1, [r7, #0]
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 fc3c 	bl	8009e54 <USBD_GetStatus>
      break;
 80095dc:	e00e      	b.n	80095fc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80095de:	6839      	ldr	r1, [r7, #0]
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 fc6a 	bl	8009eba <USBD_SetFeature>
      break;
 80095e6:	e009      	b.n	80095fc <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80095e8:	6839      	ldr	r1, [r7, #0]
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 fc79 	bl	8009ee2 <USBD_ClrFeature>
      break;
 80095f0:	e004      	b.n	80095fc <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80095f2:	6839      	ldr	r1, [r7, #0]
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 fccf 	bl	8009f98 <USBD_CtlError>
      break;
 80095fa:	bf00      	nop
    }
    break;
 80095fc:	e004      	b.n	8009608 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80095fe:	6839      	ldr	r1, [r7, #0]
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 fcc9 	bl	8009f98 <USBD_CtlError>
    break;
 8009606:	bf00      	nop
  }

  return ret;
 8009608:	7bfb      	ldrb	r3, [r7, #15]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop

08009614 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800961e:	2300      	movs	r3, #0
 8009620:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800962a:	2b20      	cmp	r3, #32
 800962c:	d003      	beq.n	8009636 <USBD_StdItfReq+0x22>
 800962e:	2b40      	cmp	r3, #64	; 0x40
 8009630:	d001      	beq.n	8009636 <USBD_StdItfReq+0x22>
 8009632:	2b00      	cmp	r3, #0
 8009634:	d12a      	bne.n	800968c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800963c:	3b01      	subs	r3, #1
 800963e:	2b02      	cmp	r3, #2
 8009640:	d81d      	bhi.n	800967e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	889b      	ldrh	r3, [r3, #4]
 8009646:	b2db      	uxtb	r3, r3
 8009648:	2b01      	cmp	r3, #1
 800964a:	d813      	bhi.n	8009674 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	6839      	ldr	r1, [r7, #0]
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	4798      	blx	r3
 800965a:	4603      	mov	r3, r0
 800965c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	88db      	ldrh	r3, [r3, #6]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d110      	bne.n	8009688 <USBD_StdItfReq+0x74>
 8009666:	7bfb      	ldrb	r3, [r7, #15]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d10d      	bne.n	8009688 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 fd5e 	bl	800a12e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8009672:	e009      	b.n	8009688 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8009674:	6839      	ldr	r1, [r7, #0]
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 fc8e 	bl	8009f98 <USBD_CtlError>
      break;
 800967c:	e004      	b.n	8009688 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800967e:	6839      	ldr	r1, [r7, #0]
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 fc89 	bl	8009f98 <USBD_CtlError>
      break;
 8009686:	e000      	b.n	800968a <USBD_StdItfReq+0x76>
      break;
 8009688:	bf00      	nop
    }
    break;
 800968a:	e004      	b.n	8009696 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800968c:	6839      	ldr	r1, [r7, #0]
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 fc82 	bl	8009f98 <USBD_CtlError>
    break;
 8009694:	bf00      	nop
  }

  return ret;
 8009696:	7bfb      	ldrb	r3, [r7, #15]
}
 8009698:	4618      	mov	r0, r3
 800969a:	3710      	adds	r7, #16
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	889b      	ldrh	r3, [r3, #4]
 80096b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096bc:	2b20      	cmp	r3, #32
 80096be:	d004      	beq.n	80096ca <USBD_StdEPReq+0x2a>
 80096c0:	2b40      	cmp	r3, #64	; 0x40
 80096c2:	d002      	beq.n	80096ca <USBD_StdEPReq+0x2a>
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d00a      	beq.n	80096de <USBD_StdEPReq+0x3e>
 80096c8:	e135      	b.n	8009936 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	6839      	ldr	r1, [r7, #0]
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	4798      	blx	r3
 80096d8:	4603      	mov	r3, r0
 80096da:	73fb      	strb	r3, [r7, #15]
    break;
 80096dc:	e130      	b.n	8009940 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	785b      	ldrb	r3, [r3, #1]
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d03e      	beq.n	8009764 <USBD_StdEPReq+0xc4>
 80096e6:	2b03      	cmp	r3, #3
 80096e8:	d002      	beq.n	80096f0 <USBD_StdEPReq+0x50>
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d077      	beq.n	80097de <USBD_StdEPReq+0x13e>
 80096ee:	e11c      	b.n	800992a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d002      	beq.n	8009700 <USBD_StdEPReq+0x60>
 80096fa:	2b03      	cmp	r3, #3
 80096fc:	d015      	beq.n	800972a <USBD_StdEPReq+0x8a>
 80096fe:	e02b      	b.n	8009758 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009700:	7bbb      	ldrb	r3, [r7, #14]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00c      	beq.n	8009720 <USBD_StdEPReq+0x80>
 8009706:	7bbb      	ldrb	r3, [r7, #14]
 8009708:	2b80      	cmp	r3, #128	; 0x80
 800970a:	d009      	beq.n	8009720 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800970c:	7bbb      	ldrb	r3, [r7, #14]
 800970e:	4619      	mov	r1, r3
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f001 f929 	bl	800a968 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009716:	2180      	movs	r1, #128	; 0x80
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f001 f925 	bl	800a968 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800971e:	e020      	b.n	8009762 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8009720:	6839      	ldr	r1, [r7, #0]
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 fc38 	bl	8009f98 <USBD_CtlError>
        break;
 8009728:	e01b      	b.n	8009762 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	885b      	ldrh	r3, [r3, #2]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d10e      	bne.n	8009750 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009732:	7bbb      	ldrb	r3, [r7, #14]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d00b      	beq.n	8009750 <USBD_StdEPReq+0xb0>
 8009738:	7bbb      	ldrb	r3, [r7, #14]
 800973a:	2b80      	cmp	r3, #128	; 0x80
 800973c:	d008      	beq.n	8009750 <USBD_StdEPReq+0xb0>
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	88db      	ldrh	r3, [r3, #6]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d104      	bne.n	8009750 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8009746:	7bbb      	ldrb	r3, [r7, #14]
 8009748:	4619      	mov	r1, r3
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f001 f90c 	bl	800a968 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 fcec 	bl	800a12e <USBD_CtlSendStatus>

        break;
 8009756:	e004      	b.n	8009762 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8009758:	6839      	ldr	r1, [r7, #0]
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 fc1c 	bl	8009f98 <USBD_CtlError>
        break;
 8009760:	bf00      	nop
      }
      break;
 8009762:	e0e7      	b.n	8009934 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800976a:	2b02      	cmp	r3, #2
 800976c:	d002      	beq.n	8009774 <USBD_StdEPReq+0xd4>
 800976e:	2b03      	cmp	r3, #3
 8009770:	d015      	beq.n	800979e <USBD_StdEPReq+0xfe>
 8009772:	e02d      	b.n	80097d0 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009774:	7bbb      	ldrb	r3, [r7, #14]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00c      	beq.n	8009794 <USBD_StdEPReq+0xf4>
 800977a:	7bbb      	ldrb	r3, [r7, #14]
 800977c:	2b80      	cmp	r3, #128	; 0x80
 800977e:	d009      	beq.n	8009794 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009780:	7bbb      	ldrb	r3, [r7, #14]
 8009782:	4619      	mov	r1, r3
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f001 f8ef 	bl	800a968 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800978a:	2180      	movs	r1, #128	; 0x80
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f001 f8eb 	bl	800a968 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8009792:	e023      	b.n	80097dc <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8009794:	6839      	ldr	r1, [r7, #0]
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 fbfe 	bl	8009f98 <USBD_CtlError>
        break;
 800979c:	e01e      	b.n	80097dc <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	885b      	ldrh	r3, [r3, #2]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d119      	bne.n	80097da <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80097a6:	7bbb      	ldrb	r3, [r7, #14]
 80097a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d004      	beq.n	80097ba <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80097b0:	7bbb      	ldrb	r3, [r7, #14]
 80097b2:	4619      	mov	r1, r3
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f001 f8f6 	bl	800a9a6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 fcb7 	bl	800a12e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	6839      	ldr	r1, [r7, #0]
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	4798      	blx	r3
        }
        break;
 80097ce:	e004      	b.n	80097da <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80097d0:	6839      	ldr	r1, [r7, #0]
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 fbe0 	bl	8009f98 <USBD_CtlError>
        break;
 80097d8:	e000      	b.n	80097dc <USBD_StdEPReq+0x13c>
        break;
 80097da:	bf00      	nop
      }
      break;
 80097dc:	e0aa      	b.n	8009934 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097e4:	2b02      	cmp	r3, #2
 80097e6:	d002      	beq.n	80097ee <USBD_StdEPReq+0x14e>
 80097e8:	2b03      	cmp	r3, #3
 80097ea:	d032      	beq.n	8009852 <USBD_StdEPReq+0x1b2>
 80097ec:	e097      	b.n	800991e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097ee:	7bbb      	ldrb	r3, [r7, #14]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d007      	beq.n	8009804 <USBD_StdEPReq+0x164>
 80097f4:	7bbb      	ldrb	r3, [r7, #14]
 80097f6:	2b80      	cmp	r3, #128	; 0x80
 80097f8:	d004      	beq.n	8009804 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80097fa:	6839      	ldr	r1, [r7, #0]
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 fbcb 	bl	8009f98 <USBD_CtlError>
          break;
 8009802:	e091      	b.n	8009928 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009804:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009808:	2b00      	cmp	r3, #0
 800980a:	da0b      	bge.n	8009824 <USBD_StdEPReq+0x184>
 800980c:	7bbb      	ldrb	r3, [r7, #14]
 800980e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009812:	4613      	mov	r3, r2
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	4413      	add	r3, r2
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	3310      	adds	r3, #16
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	4413      	add	r3, r2
 8009820:	3304      	adds	r3, #4
 8009822:	e00b      	b.n	800983c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8009824:	7bbb      	ldrb	r3, [r7, #14]
 8009826:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800982a:	4613      	mov	r3, r2
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	4413      	add	r3, r2
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	4413      	add	r3, r2
 800983a:	3304      	adds	r3, #4
 800983c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	2200      	movs	r2, #0
 8009842:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	2202      	movs	r2, #2
 8009848:	4619      	mov	r1, r3
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 fc15 	bl	800a07a <USBD_CtlSendData>
        break;
 8009850:	e06a      	b.n	8009928 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8009852:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009856:	2b00      	cmp	r3, #0
 8009858:	da11      	bge.n	800987e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800985a:	7bbb      	ldrb	r3, [r7, #14]
 800985c:	f003 020f 	and.w	r2, r3, #15
 8009860:	6879      	ldr	r1, [r7, #4]
 8009862:	4613      	mov	r3, r2
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	4413      	add	r3, r2
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	440b      	add	r3, r1
 800986c:	3324      	adds	r3, #36	; 0x24
 800986e:	881b      	ldrh	r3, [r3, #0]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d117      	bne.n	80098a4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8009874:	6839      	ldr	r1, [r7, #0]
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 fb8e 	bl	8009f98 <USBD_CtlError>
            break;
 800987c:	e054      	b.n	8009928 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800987e:	7bbb      	ldrb	r3, [r7, #14]
 8009880:	f003 020f 	and.w	r2, r3, #15
 8009884:	6879      	ldr	r1, [r7, #4]
 8009886:	4613      	mov	r3, r2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	4413      	add	r3, r2
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	440b      	add	r3, r1
 8009890:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009894:	881b      	ldrh	r3, [r3, #0]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d104      	bne.n	80098a4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800989a:	6839      	ldr	r1, [r7, #0]
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 fb7b 	bl	8009f98 <USBD_CtlError>
            break;
 80098a2:	e041      	b.n	8009928 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	da0b      	bge.n	80098c4 <USBD_StdEPReq+0x224>
 80098ac:	7bbb      	ldrb	r3, [r7, #14]
 80098ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098b2:	4613      	mov	r3, r2
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	4413      	add	r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	3310      	adds	r3, #16
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	4413      	add	r3, r2
 80098c0:	3304      	adds	r3, #4
 80098c2:	e00b      	b.n	80098dc <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80098c4:	7bbb      	ldrb	r3, [r7, #14]
 80098c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098ca:	4613      	mov	r3, r2
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	4413      	add	r3, r2
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	4413      	add	r3, r2
 80098da:	3304      	adds	r3, #4
 80098dc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80098de:	7bbb      	ldrb	r3, [r7, #14]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d002      	beq.n	80098ea <USBD_StdEPReq+0x24a>
 80098e4:	7bbb      	ldrb	r3, [r7, #14]
 80098e6:	2b80      	cmp	r3, #128	; 0x80
 80098e8:	d103      	bne.n	80098f2 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	2200      	movs	r2, #0
 80098ee:	601a      	str	r2, [r3, #0]
 80098f0:	e00e      	b.n	8009910 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80098f2:	7bbb      	ldrb	r3, [r7, #14]
 80098f4:	4619      	mov	r1, r3
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f001 f874 	bl	800a9e4 <USBD_LL_IsStallEP>
 80098fc:	4603      	mov	r3, r0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d003      	beq.n	800990a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	2201      	movs	r2, #1
 8009906:	601a      	str	r2, [r3, #0]
 8009908:	e002      	b.n	8009910 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	2200      	movs	r2, #0
 800990e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	2202      	movs	r2, #2
 8009914:	4619      	mov	r1, r3
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 fbaf 	bl	800a07a <USBD_CtlSendData>
          break;
 800991c:	e004      	b.n	8009928 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800991e:	6839      	ldr	r1, [r7, #0]
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 fb39 	bl	8009f98 <USBD_CtlError>
        break;
 8009926:	bf00      	nop
      }
      break;
 8009928:	e004      	b.n	8009934 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800992a:	6839      	ldr	r1, [r7, #0]
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 fb33 	bl	8009f98 <USBD_CtlError>
      break;
 8009932:	bf00      	nop
    }
    break;
 8009934:	e004      	b.n	8009940 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8009936:	6839      	ldr	r1, [r7, #0]
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 fb2d 	bl	8009f98 <USBD_CtlError>
    break;
 800993e:	bf00      	nop
  }

  return ret;
 8009940:	7bfb      	ldrb	r3, [r7, #15]
}
 8009942:	4618      	mov	r0, r3
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
	...

0800994c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009956:	2300      	movs	r3, #0
 8009958:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800995a:	2300      	movs	r3, #0
 800995c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800995e:	2300      	movs	r3, #0
 8009960:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	885b      	ldrh	r3, [r3, #2]
 8009966:	0a1b      	lsrs	r3, r3, #8
 8009968:	b29b      	uxth	r3, r3
 800996a:	3b01      	subs	r3, #1
 800996c:	2b06      	cmp	r3, #6
 800996e:	f200 8128 	bhi.w	8009bc2 <USBD_GetDescriptor+0x276>
 8009972:	a201      	add	r2, pc, #4	; (adr r2, 8009978 <USBD_GetDescriptor+0x2c>)
 8009974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009978:	08009995 	.word	0x08009995
 800997c:	080099ad 	.word	0x080099ad
 8009980:	080099ed 	.word	0x080099ed
 8009984:	08009bc3 	.word	0x08009bc3
 8009988:	08009bc3 	.word	0x08009bc3
 800998c:	08009b63 	.word	0x08009b63
 8009990:	08009b8f 	.word	0x08009b8f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	7c12      	ldrb	r2, [r2, #16]
 80099a0:	f107 0108 	add.w	r1, r7, #8
 80099a4:	4610      	mov	r0, r2
 80099a6:	4798      	blx	r3
 80099a8:	60f8      	str	r0, [r7, #12]
    break;
 80099aa:	e112      	b.n	8009bd2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	7c1b      	ldrb	r3, [r3, #16]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d10d      	bne.n	80099d0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099bc:	f107 0208 	add.w	r2, r7, #8
 80099c0:	4610      	mov	r0, r2
 80099c2:	4798      	blx	r3
 80099c4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	3301      	adds	r3, #1
 80099ca:	2202      	movs	r2, #2
 80099cc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80099ce:	e100      	b.n	8009bd2 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d8:	f107 0208 	add.w	r2, r7, #8
 80099dc:	4610      	mov	r0, r2
 80099de:	4798      	blx	r3
 80099e0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	3301      	adds	r3, #1
 80099e6:	2202      	movs	r2, #2
 80099e8:	701a      	strb	r2, [r3, #0]
    break;
 80099ea:	e0f2      	b.n	8009bd2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	885b      	ldrh	r3, [r3, #2]
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	2b05      	cmp	r3, #5
 80099f4:	f200 80ac 	bhi.w	8009b50 <USBD_GetDescriptor+0x204>
 80099f8:	a201      	add	r2, pc, #4	; (adr r2, 8009a00 <USBD_GetDescriptor+0xb4>)
 80099fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fe:	bf00      	nop
 8009a00:	08009a19 	.word	0x08009a19
 8009a04:	08009a4d 	.word	0x08009a4d
 8009a08:	08009a81 	.word	0x08009a81
 8009a0c:	08009ab5 	.word	0x08009ab5
 8009a10:	08009ae9 	.word	0x08009ae9
 8009a14:	08009b1d 	.word	0x08009b1d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d00b      	beq.n	8009a3c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	7c12      	ldrb	r2, [r2, #16]
 8009a30:	f107 0108 	add.w	r1, r7, #8
 8009a34:	4610      	mov	r0, r2
 8009a36:	4798      	blx	r3
 8009a38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a3a:	e091      	b.n	8009b60 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009a3c:	6839      	ldr	r1, [r7, #0]
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 faaa 	bl	8009f98 <USBD_CtlError>
        err++;
 8009a44:	7afb      	ldrb	r3, [r7, #11]
 8009a46:	3301      	adds	r3, #1
 8009a48:	72fb      	strb	r3, [r7, #11]
      break;
 8009a4a:	e089      	b.n	8009b60 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d00b      	beq.n	8009a70 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	7c12      	ldrb	r2, [r2, #16]
 8009a64:	f107 0108 	add.w	r1, r7, #8
 8009a68:	4610      	mov	r0, r2
 8009a6a:	4798      	blx	r3
 8009a6c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a6e:	e077      	b.n	8009b60 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009a70:	6839      	ldr	r1, [r7, #0]
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 fa90 	bl	8009f98 <USBD_CtlError>
        err++;
 8009a78:	7afb      	ldrb	r3, [r7, #11]
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	72fb      	strb	r3, [r7, #11]
      break;
 8009a7e:	e06f      	b.n	8009b60 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d00b      	beq.n	8009aa4 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	7c12      	ldrb	r2, [r2, #16]
 8009a98:	f107 0108 	add.w	r1, r7, #8
 8009a9c:	4610      	mov	r0, r2
 8009a9e:	4798      	blx	r3
 8009aa0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009aa2:	e05d      	b.n	8009b60 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009aa4:	6839      	ldr	r1, [r7, #0]
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 fa76 	bl	8009f98 <USBD_CtlError>
        err++;
 8009aac:	7afb      	ldrb	r3, [r7, #11]
 8009aae:	3301      	adds	r3, #1
 8009ab0:	72fb      	strb	r3, [r7, #11]
      break;
 8009ab2:	e055      	b.n	8009b60 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00b      	beq.n	8009ad8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ac6:	691b      	ldr	r3, [r3, #16]
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	7c12      	ldrb	r2, [r2, #16]
 8009acc:	f107 0108 	add.w	r1, r7, #8
 8009ad0:	4610      	mov	r0, r2
 8009ad2:	4798      	blx	r3
 8009ad4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ad6:	e043      	b.n	8009b60 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009ad8:	6839      	ldr	r1, [r7, #0]
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fa5c 	bl	8009f98 <USBD_CtlError>
        err++;
 8009ae0:	7afb      	ldrb	r3, [r7, #11]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	72fb      	strb	r3, [r7, #11]
      break;
 8009ae6:	e03b      	b.n	8009b60 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aee:	695b      	ldr	r3, [r3, #20]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d00b      	beq.n	8009b0c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009afa:	695b      	ldr	r3, [r3, #20]
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	7c12      	ldrb	r2, [r2, #16]
 8009b00:	f107 0108 	add.w	r1, r7, #8
 8009b04:	4610      	mov	r0, r2
 8009b06:	4798      	blx	r3
 8009b08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b0a:	e029      	b.n	8009b60 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009b0c:	6839      	ldr	r1, [r7, #0]
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 fa42 	bl	8009f98 <USBD_CtlError>
        err++;
 8009b14:	7afb      	ldrb	r3, [r7, #11]
 8009b16:	3301      	adds	r3, #1
 8009b18:	72fb      	strb	r3, [r7, #11]
      break;
 8009b1a:	e021      	b.n	8009b60 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b22:	699b      	ldr	r3, [r3, #24]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d00b      	beq.n	8009b40 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b2e:	699b      	ldr	r3, [r3, #24]
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	7c12      	ldrb	r2, [r2, #16]
 8009b34:	f107 0108 	add.w	r1, r7, #8
 8009b38:	4610      	mov	r0, r2
 8009b3a:	4798      	blx	r3
 8009b3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b3e:	e00f      	b.n	8009b60 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009b40:	6839      	ldr	r1, [r7, #0]
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 fa28 	bl	8009f98 <USBD_CtlError>
        err++;
 8009b48:	7afb      	ldrb	r3, [r7, #11]
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	72fb      	strb	r3, [r7, #11]
      break;
 8009b4e:	e007      	b.n	8009b60 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8009b50:	6839      	ldr	r1, [r7, #0]
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 fa20 	bl	8009f98 <USBD_CtlError>
      err++;
 8009b58:	7afb      	ldrb	r3, [r7, #11]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8009b5e:	bf00      	nop
    }
    break;
 8009b60:	e037      	b.n	8009bd2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	7c1b      	ldrb	r3, [r3, #16]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d109      	bne.n	8009b7e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b72:	f107 0208 	add.w	r2, r7, #8
 8009b76:	4610      	mov	r0, r2
 8009b78:	4798      	blx	r3
 8009b7a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009b7c:	e029      	b.n	8009bd2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8009b7e:	6839      	ldr	r1, [r7, #0]
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 fa09 	bl	8009f98 <USBD_CtlError>
      err++;
 8009b86:	7afb      	ldrb	r3, [r7, #11]
 8009b88:	3301      	adds	r3, #1
 8009b8a:	72fb      	strb	r3, [r7, #11]
    break;
 8009b8c:	e021      	b.n	8009bd2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	7c1b      	ldrb	r3, [r3, #16]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d10d      	bne.n	8009bb2 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b9e:	f107 0208 	add.w	r2, r7, #8
 8009ba2:	4610      	mov	r0, r2
 8009ba4:	4798      	blx	r3
 8009ba6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	3301      	adds	r3, #1
 8009bac:	2207      	movs	r2, #7
 8009bae:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009bb0:	e00f      	b.n	8009bd2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8009bb2:	6839      	ldr	r1, [r7, #0]
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 f9ef 	bl	8009f98 <USBD_CtlError>
      err++;
 8009bba:	7afb      	ldrb	r3, [r7, #11]
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	72fb      	strb	r3, [r7, #11]
    break;
 8009bc0:	e007      	b.n	8009bd2 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8009bc2:	6839      	ldr	r1, [r7, #0]
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 f9e7 	bl	8009f98 <USBD_CtlError>
    err++;
 8009bca:	7afb      	ldrb	r3, [r7, #11]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	72fb      	strb	r3, [r7, #11]
    break;
 8009bd0:	bf00      	nop
  }

  if (err != 0U)
 8009bd2:	7afb      	ldrb	r3, [r7, #11]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d11e      	bne.n	8009c16 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	88db      	ldrh	r3, [r3, #6]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d016      	beq.n	8009c0e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8009be0:	893b      	ldrh	r3, [r7, #8]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00e      	beq.n	8009c04 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	88da      	ldrh	r2, [r3, #6]
 8009bea:	893b      	ldrh	r3, [r7, #8]
 8009bec:	4293      	cmp	r3, r2
 8009bee:	bf28      	it	cs
 8009bf0:	4613      	movcs	r3, r2
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8009bf6:	893b      	ldrh	r3, [r7, #8]
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	68f9      	ldr	r1, [r7, #12]
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 fa3c 	bl	800a07a <USBD_CtlSendData>
 8009c02:	e009      	b.n	8009c18 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8009c04:	6839      	ldr	r1, [r7, #0]
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 f9c6 	bl	8009f98 <USBD_CtlError>
 8009c0c:	e004      	b.n	8009c18 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fa8d 	bl	800a12e <USBD_CtlSendStatus>
 8009c14:	e000      	b.n	8009c18 <USBD_GetDescriptor+0x2cc>
    return;
 8009c16:	bf00      	nop
    }
  }
}
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop

08009c20 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	889b      	ldrh	r3, [r3, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d130      	bne.n	8009c94 <USBD_SetAddress+0x74>
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	88db      	ldrh	r3, [r3, #6]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d12c      	bne.n	8009c94 <USBD_SetAddress+0x74>
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	885b      	ldrh	r3, [r3, #2]
 8009c3e:	2b7f      	cmp	r3, #127	; 0x7f
 8009c40:	d828      	bhi.n	8009c94 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	885b      	ldrh	r3, [r3, #2]
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c4c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c54:	2b03      	cmp	r3, #3
 8009c56:	d104      	bne.n	8009c62 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009c58:	6839      	ldr	r1, [r7, #0]
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 f99c 	bl	8009f98 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c60:	e01c      	b.n	8009c9c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	7bfa      	ldrb	r2, [r7, #15]
 8009c66:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009c6a:	7bfb      	ldrb	r3, [r7, #15]
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 fee4 	bl	800aa3c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 fa5a 	bl	800a12e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009c7a:	7bfb      	ldrb	r3, [r7, #15]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d004      	beq.n	8009c8a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2202      	movs	r2, #2
 8009c84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c88:	e008      	b.n	8009c9c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c92:	e003      	b.n	8009c9c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009c94:	6839      	ldr	r1, [r7, #0]
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 f97e 	bl	8009f98 <USBD_CtlError>
  }
}
 8009c9c:	bf00      	nop
 8009c9e:	3710      	adds	r7, #16
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	885b      	ldrh	r3, [r3, #2]
 8009cb6:	b2da      	uxtb	r2, r3
 8009cb8:	4b4b      	ldr	r3, [pc, #300]	; (8009de8 <USBD_SetConfig+0x144>)
 8009cba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009cbc:	4b4a      	ldr	r3, [pc, #296]	; (8009de8 <USBD_SetConfig+0x144>)
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d905      	bls.n	8009cd0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009cc4:	6839      	ldr	r1, [r7, #0]
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 f966 	bl	8009f98 <USBD_CtlError>
    return USBD_FAIL;
 8009ccc:	2303      	movs	r3, #3
 8009cce:	e087      	b.n	8009de0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cd6:	2b02      	cmp	r3, #2
 8009cd8:	d002      	beq.n	8009ce0 <USBD_SetConfig+0x3c>
 8009cda:	2b03      	cmp	r3, #3
 8009cdc:	d025      	beq.n	8009d2a <USBD_SetConfig+0x86>
 8009cde:	e071      	b.n	8009dc4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8009ce0:	4b41      	ldr	r3, [pc, #260]	; (8009de8 <USBD_SetConfig+0x144>)
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d01c      	beq.n	8009d22 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8009ce8:	4b3f      	ldr	r3, [pc, #252]	; (8009de8 <USBD_SetConfig+0x144>)
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	461a      	mov	r2, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009cf2:	4b3d      	ldr	r3, [pc, #244]	; (8009de8 <USBD_SetConfig+0x144>)
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f7ff f9a7 	bl	800904c <USBD_SetClassConfig>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8009d02:	7bfb      	ldrb	r3, [r7, #15]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d004      	beq.n	8009d12 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8009d08:	6839      	ldr	r1, [r7, #0]
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 f944 	bl	8009f98 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009d10:	e065      	b.n	8009dde <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 fa0b 	bl	800a12e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2203      	movs	r2, #3
 8009d1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009d20:	e05d      	b.n	8009dde <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 fa03 	bl	800a12e <USBD_CtlSendStatus>
    break;
 8009d28:	e059      	b.n	8009dde <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8009d2a:	4b2f      	ldr	r3, [pc, #188]	; (8009de8 <USBD_SetConfig+0x144>)
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d112      	bne.n	8009d58 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2202      	movs	r2, #2
 8009d36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8009d3a:	4b2b      	ldr	r3, [pc, #172]	; (8009de8 <USBD_SetConfig+0x144>)
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	461a      	mov	r2, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d44:	4b28      	ldr	r3, [pc, #160]	; (8009de8 <USBD_SetConfig+0x144>)
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	4619      	mov	r1, r3
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f7ff f99a 	bl	8009084 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 f9ec 	bl	800a12e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009d56:	e042      	b.n	8009dde <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009d58:	4b23      	ldr	r3, [pc, #140]	; (8009de8 <USBD_SetConfig+0x144>)
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d02a      	beq.n	8009dbc <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f7ff f988 	bl	8009084 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8009d74:	4b1c      	ldr	r3, [pc, #112]	; (8009de8 <USBD_SetConfig+0x144>)
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	461a      	mov	r2, r3
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d7e:	4b1a      	ldr	r3, [pc, #104]	; (8009de8 <USBD_SetConfig+0x144>)
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	4619      	mov	r1, r3
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f7ff f961 	bl	800904c <USBD_SetClassConfig>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8009d8e:	7bfb      	ldrb	r3, [r7, #15]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d00f      	beq.n	8009db4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8009d94:	6839      	ldr	r1, [r7, #0]
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f000 f8fe 	bl	8009f98 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	b2db      	uxtb	r3, r3
 8009da2:	4619      	mov	r1, r3
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f7ff f96d 	bl	8009084 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2202      	movs	r2, #2
 8009dae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009db2:	e014      	b.n	8009dde <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 f9ba 	bl	800a12e <USBD_CtlSendStatus>
    break;
 8009dba:	e010      	b.n	8009dde <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 f9b6 	bl	800a12e <USBD_CtlSendStatus>
    break;
 8009dc2:	e00c      	b.n	8009dde <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8009dc4:	6839      	ldr	r1, [r7, #0]
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 f8e6 	bl	8009f98 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009dcc:	4b06      	ldr	r3, [pc, #24]	; (8009de8 <USBD_SetConfig+0x144>)
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f7ff f956 	bl	8009084 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8009dd8:	2303      	movs	r3, #3
 8009dda:	73fb      	strb	r3, [r7, #15]
    break;
 8009ddc:	bf00      	nop
  }

  return ret;
 8009dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3710      	adds	r7, #16
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	20000210 	.word	0x20000210

08009dec <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	88db      	ldrh	r3, [r3, #6]
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d004      	beq.n	8009e08 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009dfe:	6839      	ldr	r1, [r7, #0]
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 f8c9 	bl	8009f98 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8009e06:	e021      	b.n	8009e4c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	db17      	blt.n	8009e42 <USBD_GetConfig+0x56>
 8009e12:	2b02      	cmp	r3, #2
 8009e14:	dd02      	ble.n	8009e1c <USBD_GetConfig+0x30>
 8009e16:	2b03      	cmp	r3, #3
 8009e18:	d00b      	beq.n	8009e32 <USBD_GetConfig+0x46>
 8009e1a:	e012      	b.n	8009e42 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	3308      	adds	r3, #8
 8009e26:	2201      	movs	r2, #1
 8009e28:	4619      	mov	r1, r3
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 f925 	bl	800a07a <USBD_CtlSendData>
      break;
 8009e30:	e00c      	b.n	8009e4c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	3304      	adds	r3, #4
 8009e36:	2201      	movs	r2, #1
 8009e38:	4619      	mov	r1, r3
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 f91d 	bl	800a07a <USBD_CtlSendData>
      break;
 8009e40:	e004      	b.n	8009e4c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8009e42:	6839      	ldr	r1, [r7, #0]
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 f8a7 	bl	8009f98 <USBD_CtlError>
      break;
 8009e4a:	bf00      	nop
}
 8009e4c:	bf00      	nop
 8009e4e:	3708      	adds	r7, #8
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b082      	sub	sp, #8
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e64:	3b01      	subs	r3, #1
 8009e66:	2b02      	cmp	r3, #2
 8009e68:	d81e      	bhi.n	8009ea8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	88db      	ldrh	r3, [r3, #6]
 8009e6e:	2b02      	cmp	r3, #2
 8009e70:	d004      	beq.n	8009e7c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009e72:	6839      	ldr	r1, [r7, #0]
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 f88f 	bl	8009f98 <USBD_CtlError>
      break;
 8009e7a:	e01a      	b.n	8009eb2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d005      	beq.n	8009e98 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	f043 0202 	orr.w	r2, r3, #2
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	330c      	adds	r3, #12
 8009e9c:	2202      	movs	r2, #2
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 f8ea 	bl	800a07a <USBD_CtlSendData>
    break;
 8009ea6:	e004      	b.n	8009eb2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009ea8:	6839      	ldr	r1, [r7, #0]
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 f874 	bl	8009f98 <USBD_CtlError>
    break;
 8009eb0:	bf00      	nop
  }
}
 8009eb2:	bf00      	nop
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}

08009eba <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b082      	sub	sp, #8
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
 8009ec2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	885b      	ldrh	r3, [r3, #2]
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d106      	bne.n	8009eda <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 f92a 	bl	800a12e <USBD_CtlSendStatus>
  }
}
 8009eda:	bf00      	nop
 8009edc:	3708      	adds	r7, #8
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b082      	sub	sp, #8
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
 8009eea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ef2:	3b01      	subs	r3, #1
 8009ef4:	2b02      	cmp	r3, #2
 8009ef6:	d80b      	bhi.n	8009f10 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	885b      	ldrh	r3, [r3, #2]
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d10c      	bne.n	8009f1a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 f910 	bl	800a12e <USBD_CtlSendStatus>
      }
      break;
 8009f0e:	e004      	b.n	8009f1a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009f10:	6839      	ldr	r1, [r7, #0]
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 f840 	bl	8009f98 <USBD_CtlError>
      break;
 8009f18:	e000      	b.n	8009f1c <USBD_ClrFeature+0x3a>
      break;
 8009f1a:	bf00      	nop
  }
}
 8009f1c:	bf00      	nop
 8009f1e:	3708      	adds	r7, #8
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	781a      	ldrb	r2, [r3, #0]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	781a      	ldrb	r2, [r3, #0]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009f4e:	68f8      	ldr	r0, [r7, #12]
 8009f50:	f7ff fad3 	bl	80094fa <SWAPBYTE>
 8009f54:	4603      	mov	r3, r0
 8009f56:	461a      	mov	r2, r3
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	3301      	adds	r3, #1
 8009f60:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	3301      	adds	r3, #1
 8009f66:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009f68:	68f8      	ldr	r0, [r7, #12]
 8009f6a:	f7ff fac6 	bl	80094fa <SWAPBYTE>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	461a      	mov	r2, r3
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	3301      	adds	r3, #1
 8009f7a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	3301      	adds	r3, #1
 8009f80:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009f82:	68f8      	ldr	r0, [r7, #12]
 8009f84:	f7ff fab9 	bl	80094fa <SWAPBYTE>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	80da      	strh	r2, [r3, #6]
}
 8009f90:	bf00      	nop
 8009f92:	3710      	adds	r7, #16
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009fa2:	2180      	movs	r1, #128	; 0x80
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f000 fcdf 	bl	800a968 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009faa:	2100      	movs	r1, #0
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 fcdb 	bl	800a968 <USBD_LL_StallEP>
}
 8009fb2:	bf00      	nop
 8009fb4:	3708      	adds	r7, #8
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b086      	sub	sp, #24
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	60f8      	str	r0, [r7, #12]
 8009fc2:	60b9      	str	r1, [r7, #8]
 8009fc4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d036      	beq.n	800a03e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009fd4:	6938      	ldr	r0, [r7, #16]
 8009fd6:	f000 f836 	bl	800a046 <USBD_GetLen>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	3301      	adds	r3, #1
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	005b      	lsls	r3, r3, #1
 8009fe2:	b29a      	uxth	r2, r3
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009fe8:	7dfb      	ldrb	r3, [r7, #23]
 8009fea:	68ba      	ldr	r2, [r7, #8]
 8009fec:	4413      	add	r3, r2
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	7812      	ldrb	r2, [r2, #0]
 8009ff2:	701a      	strb	r2, [r3, #0]
  idx++;
 8009ff4:	7dfb      	ldrb	r3, [r7, #23]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009ffa:	7dfb      	ldrb	r3, [r7, #23]
 8009ffc:	68ba      	ldr	r2, [r7, #8]
 8009ffe:	4413      	add	r3, r2
 800a000:	2203      	movs	r2, #3
 800a002:	701a      	strb	r2, [r3, #0]
  idx++;
 800a004:	7dfb      	ldrb	r3, [r7, #23]
 800a006:	3301      	adds	r3, #1
 800a008:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a00a:	e013      	b.n	800a034 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a00c:	7dfb      	ldrb	r3, [r7, #23]
 800a00e:	68ba      	ldr	r2, [r7, #8]
 800a010:	4413      	add	r3, r2
 800a012:	693a      	ldr	r2, [r7, #16]
 800a014:	7812      	ldrb	r2, [r2, #0]
 800a016:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	3301      	adds	r3, #1
 800a01c:	613b      	str	r3, [r7, #16]
    idx++;
 800a01e:	7dfb      	ldrb	r3, [r7, #23]
 800a020:	3301      	adds	r3, #1
 800a022:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a024:	7dfb      	ldrb	r3, [r7, #23]
 800a026:	68ba      	ldr	r2, [r7, #8]
 800a028:	4413      	add	r3, r2
 800a02a:	2200      	movs	r2, #0
 800a02c:	701a      	strb	r2, [r3, #0]
    idx++;
 800a02e:	7dfb      	ldrb	r3, [r7, #23]
 800a030:	3301      	adds	r3, #1
 800a032:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	781b      	ldrb	r3, [r3, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d1e7      	bne.n	800a00c <USBD_GetString+0x52>
 800a03c:	e000      	b.n	800a040 <USBD_GetString+0x86>
    return;
 800a03e:	bf00      	nop
  }
}
 800a040:	3718      	adds	r7, #24
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a046:	b480      	push	{r7}
 800a048:	b085      	sub	sp, #20
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a04e:	2300      	movs	r3, #0
 800a050:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a056:	e005      	b.n	800a064 <USBD_GetLen+0x1e>
  {
    len++;
 800a058:	7bfb      	ldrb	r3, [r7, #15]
 800a05a:	3301      	adds	r3, #1
 800a05c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	3301      	adds	r3, #1
 800a062:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d1f5      	bne.n	800a058 <USBD_GetLen+0x12>
  }

  return len;
 800a06c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3714      	adds	r7, #20
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr

0800a07a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b084      	sub	sp, #16
 800a07e:	af00      	add	r7, sp, #0
 800a080:	60f8      	str	r0, [r7, #12]
 800a082:	60b9      	str	r1, [r7, #8]
 800a084:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2202      	movs	r2, #2
 800a08a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	68ba      	ldr	r2, [r7, #8]
 800a09e:	2100      	movs	r1, #0
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	f000 fcea 	bl	800aa7a <USBD_LL_Transmit>

  return USBD_OK;
 800a0a6:	2300      	movs	r3, #0
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3710      	adds	r7, #16
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	68ba      	ldr	r2, [r7, #8]
 800a0c0:	2100      	movs	r1, #0
 800a0c2:	68f8      	ldr	r0, [r7, #12]
 800a0c4:	f000 fcd9 	bl	800aa7a <USBD_LL_Transmit>

  return USBD_OK;
 800a0c8:	2300      	movs	r3, #0
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b084      	sub	sp, #16
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	60f8      	str	r0, [r7, #12]
 800a0da:	60b9      	str	r1, [r7, #8]
 800a0dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2203      	movs	r2, #3
 800a0e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	68ba      	ldr	r2, [r7, #8]
 800a0fa:	2100      	movs	r1, #0
 800a0fc:	68f8      	ldr	r0, [r7, #12]
 800a0fe:	f000 fcdd 	bl	800aabc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a102:	2300      	movs	r3, #0
}
 800a104:	4618      	mov	r0, r3
 800a106:	3710      	adds	r7, #16
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	60f8      	str	r0, [r7, #12]
 800a114:	60b9      	str	r1, [r7, #8]
 800a116:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	68ba      	ldr	r2, [r7, #8]
 800a11c:	2100      	movs	r1, #0
 800a11e:	68f8      	ldr	r0, [r7, #12]
 800a120:	f000 fccc 	bl	800aabc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	3710      	adds	r7, #16
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b082      	sub	sp, #8
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2204      	movs	r2, #4
 800a13a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a13e:	2300      	movs	r3, #0
 800a140:	2200      	movs	r2, #0
 800a142:	2100      	movs	r1, #0
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 fc98 	bl	800aa7a <USBD_LL_Transmit>

  return USBD_OK;
 800a14a:	2300      	movs	r3, #0
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3708      	adds	r7, #8
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2205      	movs	r2, #5
 800a160:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a164:	2300      	movs	r3, #0
 800a166:	2200      	movs	r2, #0
 800a168:	2100      	movs	r1, #0
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 fca6 	bl	800aabc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a170:	2300      	movs	r3, #0
}
 800a172:	4618      	mov	r0, r3
 800a174:	3708      	adds	r7, #8
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
	...

0800a17c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a180:	2200      	movs	r2, #0
 800a182:	4912      	ldr	r1, [pc, #72]	; (800a1cc <MX_USB_DEVICE_Init+0x50>)
 800a184:	4812      	ldr	r0, [pc, #72]	; (800a1d0 <MX_USB_DEVICE_Init+0x54>)
 800a186:	f7fe fef3 	bl	8008f70 <USBD_Init>
 800a18a:	4603      	mov	r3, r0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d001      	beq.n	800a194 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a190:	f7f6 fc56 	bl	8000a40 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a194:	490f      	ldr	r1, [pc, #60]	; (800a1d4 <MX_USB_DEVICE_Init+0x58>)
 800a196:	480e      	ldr	r0, [pc, #56]	; (800a1d0 <MX_USB_DEVICE_Init+0x54>)
 800a198:	f7fe ff20 	bl	8008fdc <USBD_RegisterClass>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d001      	beq.n	800a1a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a1a2:	f7f6 fc4d 	bl	8000a40 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a1a6:	490c      	ldr	r1, [pc, #48]	; (800a1d8 <MX_USB_DEVICE_Init+0x5c>)
 800a1a8:	4809      	ldr	r0, [pc, #36]	; (800a1d0 <MX_USB_DEVICE_Init+0x54>)
 800a1aa:	f7fe fe45 	bl	8008e38 <USBD_CDC_RegisterInterface>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d001      	beq.n	800a1b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a1b4:	f7f6 fc44 	bl	8000a40 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a1b8:	4805      	ldr	r0, [pc, #20]	; (800a1d0 <MX_USB_DEVICE_Init+0x54>)
 800a1ba:	f7fe ff30 	bl	800901e <USBD_Start>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d001      	beq.n	800a1c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a1c4:	f7f6 fc3c 	bl	8000a40 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a1c8:	bf00      	nop
 800a1ca:	bd80      	pop	{r7, pc}
 800a1cc:	20000134 	.word	0x20000134
 800a1d0:	2000043c 	.word	0x2000043c
 800a1d4:	2000001c 	.word	0x2000001c
 800a1d8:	20000120 	.word	0x20000120

0800a1dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	4905      	ldr	r1, [pc, #20]	; (800a1f8 <CDC_Init_FS+0x1c>)
 800a1e4:	4805      	ldr	r0, [pc, #20]	; (800a1fc <CDC_Init_FS+0x20>)
 800a1e6:	f7fe fe3c 	bl	8008e62 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a1ea:	4905      	ldr	r1, [pc, #20]	; (800a200 <CDC_Init_FS+0x24>)
 800a1ec:	4803      	ldr	r0, [pc, #12]	; (800a1fc <CDC_Init_FS+0x20>)
 800a1ee:	f7fe fe51 	bl	8008e94 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a1f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	20000f0c 	.word	0x20000f0c
 800a1fc:	2000043c 	.word	0x2000043c
 800a200:	2000070c 	.word	0x2000070c

0800a204 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a204:	b480      	push	{r7}
 800a206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a208:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
 800a21a:	4603      	mov	r3, r0
 800a21c:	6039      	str	r1, [r7, #0]
 800a21e:	71fb      	strb	r3, [r7, #7]
 800a220:	4613      	mov	r3, r2
 800a222:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a224:	79fb      	ldrb	r3, [r7, #7]
 800a226:	2b23      	cmp	r3, #35	; 0x23
 800a228:	d84a      	bhi.n	800a2c0 <CDC_Control_FS+0xac>
 800a22a:	a201      	add	r2, pc, #4	; (adr r2, 800a230 <CDC_Control_FS+0x1c>)
 800a22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a230:	0800a2c1 	.word	0x0800a2c1
 800a234:	0800a2c1 	.word	0x0800a2c1
 800a238:	0800a2c1 	.word	0x0800a2c1
 800a23c:	0800a2c1 	.word	0x0800a2c1
 800a240:	0800a2c1 	.word	0x0800a2c1
 800a244:	0800a2c1 	.word	0x0800a2c1
 800a248:	0800a2c1 	.word	0x0800a2c1
 800a24c:	0800a2c1 	.word	0x0800a2c1
 800a250:	0800a2c1 	.word	0x0800a2c1
 800a254:	0800a2c1 	.word	0x0800a2c1
 800a258:	0800a2c1 	.word	0x0800a2c1
 800a25c:	0800a2c1 	.word	0x0800a2c1
 800a260:	0800a2c1 	.word	0x0800a2c1
 800a264:	0800a2c1 	.word	0x0800a2c1
 800a268:	0800a2c1 	.word	0x0800a2c1
 800a26c:	0800a2c1 	.word	0x0800a2c1
 800a270:	0800a2c1 	.word	0x0800a2c1
 800a274:	0800a2c1 	.word	0x0800a2c1
 800a278:	0800a2c1 	.word	0x0800a2c1
 800a27c:	0800a2c1 	.word	0x0800a2c1
 800a280:	0800a2c1 	.word	0x0800a2c1
 800a284:	0800a2c1 	.word	0x0800a2c1
 800a288:	0800a2c1 	.word	0x0800a2c1
 800a28c:	0800a2c1 	.word	0x0800a2c1
 800a290:	0800a2c1 	.word	0x0800a2c1
 800a294:	0800a2c1 	.word	0x0800a2c1
 800a298:	0800a2c1 	.word	0x0800a2c1
 800a29c:	0800a2c1 	.word	0x0800a2c1
 800a2a0:	0800a2c1 	.word	0x0800a2c1
 800a2a4:	0800a2c1 	.word	0x0800a2c1
 800a2a8:	0800a2c1 	.word	0x0800a2c1
 800a2ac:	0800a2c1 	.word	0x0800a2c1
 800a2b0:	0800a2c1 	.word	0x0800a2c1
 800a2b4:	0800a2c1 	.word	0x0800a2c1
 800a2b8:	0800a2c1 	.word	0x0800a2c1
 800a2bc:	0800a2c1 	.word	0x0800a2c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a2c0:	bf00      	nop
  }

  return (USBD_OK);
 800a2c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	370c      	adds	r7, #12
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a2da:	6879      	ldr	r1, [r7, #4]
 800a2dc:	4805      	ldr	r0, [pc, #20]	; (800a2f4 <CDC_Receive_FS+0x24>)
 800a2de:	f7fe fdd9 	bl	8008e94 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a2e2:	4804      	ldr	r0, [pc, #16]	; (800a2f4 <CDC_Receive_FS+0x24>)
 800a2e4:	f7fe fe1a 	bl	8008f1c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a2e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3708      	adds	r7, #8
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	2000043c 	.word	0x2000043c

0800a2f8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	460b      	mov	r3, r1
 800a302:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a304:	2300      	movs	r3, #0
 800a306:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a308:	4b0d      	ldr	r3, [pc, #52]	; (800a340 <CDC_Transmit_FS+0x48>)
 800a30a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a30e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a316:	2b00      	cmp	r3, #0
 800a318:	d001      	beq.n	800a31e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a31a:	2301      	movs	r3, #1
 800a31c:	e00b      	b.n	800a336 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a31e:	887b      	ldrh	r3, [r7, #2]
 800a320:	461a      	mov	r2, r3
 800a322:	6879      	ldr	r1, [r7, #4]
 800a324:	4806      	ldr	r0, [pc, #24]	; (800a340 <CDC_Transmit_FS+0x48>)
 800a326:	f7fe fd9c 	bl	8008e62 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a32a:	4805      	ldr	r0, [pc, #20]	; (800a340 <CDC_Transmit_FS+0x48>)
 800a32c:	f7fe fdc6 	bl	8008ebc <USBD_CDC_TransmitPacket>
 800a330:	4603      	mov	r3, r0
 800a332:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a334:	7bfb      	ldrb	r3, [r7, #15]
}
 800a336:	4618      	mov	r0, r3
 800a338:	3710      	adds	r7, #16
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	2000043c 	.word	0x2000043c

0800a344 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a344:	b480      	push	{r7}
 800a346:	b087      	sub	sp, #28
 800a348:	af00      	add	r7, sp, #0
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	60b9      	str	r1, [r7, #8]
 800a34e:	4613      	mov	r3, r2
 800a350:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a352:	2300      	movs	r3, #0
 800a354:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a356:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	371c      	adds	r7, #28
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr
	...

0800a368 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a368:	b480      	push	{r7}
 800a36a:	b083      	sub	sp, #12
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	4603      	mov	r3, r0
 800a370:	6039      	str	r1, [r7, #0]
 800a372:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	2212      	movs	r2, #18
 800a378:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a37a:	4b03      	ldr	r3, [pc, #12]	; (800a388 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	370c      	adds	r7, #12
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr
 800a388:	20000150 	.word	0x20000150

0800a38c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	4603      	mov	r3, r0
 800a394:	6039      	str	r1, [r7, #0]
 800a396:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	2204      	movs	r2, #4
 800a39c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a39e:	4b03      	ldr	r3, [pc, #12]	; (800a3ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	370c      	adds	r7, #12
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr
 800a3ac:	20000164 	.word	0x20000164

0800a3b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	6039      	str	r1, [r7, #0]
 800a3ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a3bc:	79fb      	ldrb	r3, [r7, #7]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d105      	bne.n	800a3ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a3c2:	683a      	ldr	r2, [r7, #0]
 800a3c4:	4907      	ldr	r1, [pc, #28]	; (800a3e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a3c6:	4808      	ldr	r0, [pc, #32]	; (800a3e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a3c8:	f7ff fdf7 	bl	8009fba <USBD_GetString>
 800a3cc:	e004      	b.n	800a3d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a3ce:	683a      	ldr	r2, [r7, #0]
 800a3d0:	4904      	ldr	r1, [pc, #16]	; (800a3e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a3d2:	4805      	ldr	r0, [pc, #20]	; (800a3e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a3d4:	f7ff fdf1 	bl	8009fba <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3d8:	4b02      	ldr	r3, [pc, #8]	; (800a3e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3708      	adds	r7, #8
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	2000170c 	.word	0x2000170c
 800a3e8:	0800b43c 	.word	0x0800b43c

0800a3ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b082      	sub	sp, #8
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	6039      	str	r1, [r7, #0]
 800a3f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a3f8:	683a      	ldr	r2, [r7, #0]
 800a3fa:	4904      	ldr	r1, [pc, #16]	; (800a40c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a3fc:	4804      	ldr	r0, [pc, #16]	; (800a410 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a3fe:	f7ff fddc 	bl	8009fba <USBD_GetString>
  return USBD_StrDesc;
 800a402:	4b02      	ldr	r3, [pc, #8]	; (800a40c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a404:	4618      	mov	r0, r3
 800a406:	3708      	adds	r7, #8
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	2000170c 	.word	0x2000170c
 800a410:	0800b454 	.word	0x0800b454

0800a414 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
 800a41a:	4603      	mov	r3, r0
 800a41c:	6039      	str	r1, [r7, #0]
 800a41e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	221a      	movs	r2, #26
 800a424:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a426:	f000 f843 	bl	800a4b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a42a:	4b02      	ldr	r3, [pc, #8]	; (800a434 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3708      	adds	r7, #8
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	20000168 	.word	0x20000168

0800a438 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b082      	sub	sp, #8
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	4603      	mov	r3, r0
 800a440:	6039      	str	r1, [r7, #0]
 800a442:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a444:	79fb      	ldrb	r3, [r7, #7]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d105      	bne.n	800a456 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a44a:	683a      	ldr	r2, [r7, #0]
 800a44c:	4907      	ldr	r1, [pc, #28]	; (800a46c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a44e:	4808      	ldr	r0, [pc, #32]	; (800a470 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a450:	f7ff fdb3 	bl	8009fba <USBD_GetString>
 800a454:	e004      	b.n	800a460 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a456:	683a      	ldr	r2, [r7, #0]
 800a458:	4904      	ldr	r1, [pc, #16]	; (800a46c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a45a:	4805      	ldr	r0, [pc, #20]	; (800a470 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a45c:	f7ff fdad 	bl	8009fba <USBD_GetString>
  }
  return USBD_StrDesc;
 800a460:	4b02      	ldr	r3, [pc, #8]	; (800a46c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a462:	4618      	mov	r0, r3
 800a464:	3708      	adds	r7, #8
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	2000170c 	.word	0x2000170c
 800a470:	0800b468 	.word	0x0800b468

0800a474 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	4603      	mov	r3, r0
 800a47c:	6039      	str	r1, [r7, #0]
 800a47e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a480:	79fb      	ldrb	r3, [r7, #7]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d105      	bne.n	800a492 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a486:	683a      	ldr	r2, [r7, #0]
 800a488:	4907      	ldr	r1, [pc, #28]	; (800a4a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a48a:	4808      	ldr	r0, [pc, #32]	; (800a4ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a48c:	f7ff fd95 	bl	8009fba <USBD_GetString>
 800a490:	e004      	b.n	800a49c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a492:	683a      	ldr	r2, [r7, #0]
 800a494:	4904      	ldr	r1, [pc, #16]	; (800a4a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a496:	4805      	ldr	r0, [pc, #20]	; (800a4ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a498:	f7ff fd8f 	bl	8009fba <USBD_GetString>
  }
  return USBD_StrDesc;
 800a49c:	4b02      	ldr	r3, [pc, #8]	; (800a4a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3708      	adds	r7, #8
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	2000170c 	.word	0x2000170c
 800a4ac:	0800b474 	.word	0x0800b474

0800a4b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a4b6:	4b0f      	ldr	r3, [pc, #60]	; (800a4f4 <Get_SerialNum+0x44>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a4bc:	4b0e      	ldr	r3, [pc, #56]	; (800a4f8 <Get_SerialNum+0x48>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a4c2:	4b0e      	ldr	r3, [pc, #56]	; (800a4fc <Get_SerialNum+0x4c>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a4c8:	68fa      	ldr	r2, [r7, #12]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d009      	beq.n	800a4ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a4d6:	2208      	movs	r2, #8
 800a4d8:	4909      	ldr	r1, [pc, #36]	; (800a500 <Get_SerialNum+0x50>)
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f000 f814 	bl	800a508 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a4e0:	2204      	movs	r2, #4
 800a4e2:	4908      	ldr	r1, [pc, #32]	; (800a504 <Get_SerialNum+0x54>)
 800a4e4:	68b8      	ldr	r0, [r7, #8]
 800a4e6:	f000 f80f 	bl	800a508 <IntToUnicode>
  }
}
 800a4ea:	bf00      	nop
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	1fff7a10 	.word	0x1fff7a10
 800a4f8:	1fff7a14 	.word	0x1fff7a14
 800a4fc:	1fff7a18 	.word	0x1fff7a18
 800a500:	2000016a 	.word	0x2000016a
 800a504:	2000017a 	.word	0x2000017a

0800a508 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a508:	b480      	push	{r7}
 800a50a:	b087      	sub	sp, #28
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	4613      	mov	r3, r2
 800a514:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a516:	2300      	movs	r3, #0
 800a518:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a51a:	2300      	movs	r3, #0
 800a51c:	75fb      	strb	r3, [r7, #23]
 800a51e:	e027      	b.n	800a570 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	0f1b      	lsrs	r3, r3, #28
 800a524:	2b09      	cmp	r3, #9
 800a526:	d80b      	bhi.n	800a540 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	0f1b      	lsrs	r3, r3, #28
 800a52c:	b2da      	uxtb	r2, r3
 800a52e:	7dfb      	ldrb	r3, [r7, #23]
 800a530:	005b      	lsls	r3, r3, #1
 800a532:	4619      	mov	r1, r3
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	440b      	add	r3, r1
 800a538:	3230      	adds	r2, #48	; 0x30
 800a53a:	b2d2      	uxtb	r2, r2
 800a53c:	701a      	strb	r2, [r3, #0]
 800a53e:	e00a      	b.n	800a556 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	0f1b      	lsrs	r3, r3, #28
 800a544:	b2da      	uxtb	r2, r3
 800a546:	7dfb      	ldrb	r3, [r7, #23]
 800a548:	005b      	lsls	r3, r3, #1
 800a54a:	4619      	mov	r1, r3
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	440b      	add	r3, r1
 800a550:	3237      	adds	r2, #55	; 0x37
 800a552:	b2d2      	uxtb	r2, r2
 800a554:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	011b      	lsls	r3, r3, #4
 800a55a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a55c:	7dfb      	ldrb	r3, [r7, #23]
 800a55e:	005b      	lsls	r3, r3, #1
 800a560:	3301      	adds	r3, #1
 800a562:	68ba      	ldr	r2, [r7, #8]
 800a564:	4413      	add	r3, r2
 800a566:	2200      	movs	r2, #0
 800a568:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a56a:	7dfb      	ldrb	r3, [r7, #23]
 800a56c:	3301      	adds	r3, #1
 800a56e:	75fb      	strb	r3, [r7, #23]
 800a570:	7dfa      	ldrb	r2, [r7, #23]
 800a572:	79fb      	ldrb	r3, [r7, #7]
 800a574:	429a      	cmp	r2, r3
 800a576:	d3d3      	bcc.n	800a520 <IntToUnicode+0x18>
  }
}
 800a578:	bf00      	nop
 800a57a:	371c      	adds	r7, #28
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b08a      	sub	sp, #40	; 0x28
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a58c:	f107 0314 	add.w	r3, r7, #20
 800a590:	2200      	movs	r2, #0
 800a592:	601a      	str	r2, [r3, #0]
 800a594:	605a      	str	r2, [r3, #4]
 800a596:	609a      	str	r2, [r3, #8]
 800a598:	60da      	str	r2, [r3, #12]
 800a59a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a5a4:	d13a      	bne.n	800a61c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	613b      	str	r3, [r7, #16]
 800a5aa:	4b1e      	ldr	r3, [pc, #120]	; (800a624 <HAL_PCD_MspInit+0xa0>)
 800a5ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ae:	4a1d      	ldr	r2, [pc, #116]	; (800a624 <HAL_PCD_MspInit+0xa0>)
 800a5b0:	f043 0301 	orr.w	r3, r3, #1
 800a5b4:	6313      	str	r3, [r2, #48]	; 0x30
 800a5b6:	4b1b      	ldr	r3, [pc, #108]	; (800a624 <HAL_PCD_MspInit+0xa0>)
 800a5b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ba:	f003 0301 	and.w	r3, r3, #1
 800a5be:	613b      	str	r3, [r7, #16]
 800a5c0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a5c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a5c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5c8:	2302      	movs	r3, #2
 800a5ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5d0:	2303      	movs	r3, #3
 800a5d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a5d4:	230a      	movs	r3, #10
 800a5d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5d8:	f107 0314 	add.w	r3, r7, #20
 800a5dc:	4619      	mov	r1, r3
 800a5de:	4812      	ldr	r0, [pc, #72]	; (800a628 <HAL_PCD_MspInit+0xa4>)
 800a5e0:	f7f7 fc38 	bl	8001e54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a5e4:	4b0f      	ldr	r3, [pc, #60]	; (800a624 <HAL_PCD_MspInit+0xa0>)
 800a5e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5e8:	4a0e      	ldr	r2, [pc, #56]	; (800a624 <HAL_PCD_MspInit+0xa0>)
 800a5ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5ee:	6353      	str	r3, [r2, #52]	; 0x34
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	60fb      	str	r3, [r7, #12]
 800a5f4:	4b0b      	ldr	r3, [pc, #44]	; (800a624 <HAL_PCD_MspInit+0xa0>)
 800a5f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5f8:	4a0a      	ldr	r2, [pc, #40]	; (800a624 <HAL_PCD_MspInit+0xa0>)
 800a5fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a5fe:	6453      	str	r3, [r2, #68]	; 0x44
 800a600:	4b08      	ldr	r3, [pc, #32]	; (800a624 <HAL_PCD_MspInit+0xa0>)
 800a602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a608:	60fb      	str	r3, [r7, #12]
 800a60a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a60c:	2200      	movs	r2, #0
 800a60e:	2100      	movs	r1, #0
 800a610:	2043      	movs	r0, #67	; 0x43
 800a612:	f7f7 f83e 	bl	8001692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a616:	2043      	movs	r0, #67	; 0x43
 800a618:	f7f7 f857 	bl	80016ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a61c:	bf00      	nop
 800a61e:	3728      	adds	r7, #40	; 0x28
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}
 800a624:	40023800 	.word	0x40023800
 800a628:	40020000 	.word	0x40020000

0800a62c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a640:	4619      	mov	r1, r3
 800a642:	4610      	mov	r0, r2
 800a644:	f7fe fd36 	bl	80090b4 <USBD_LL_SetupStage>
}
 800a648:	bf00      	nop
 800a64a:	3708      	adds	r7, #8
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	460b      	mov	r3, r1
 800a65a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a662:	78fa      	ldrb	r2, [r7, #3]
 800a664:	6879      	ldr	r1, [r7, #4]
 800a666:	4613      	mov	r3, r2
 800a668:	00db      	lsls	r3, r3, #3
 800a66a:	1a9b      	subs	r3, r3, r2
 800a66c:	009b      	lsls	r3, r3, #2
 800a66e:	440b      	add	r3, r1
 800a670:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	78fb      	ldrb	r3, [r7, #3]
 800a678:	4619      	mov	r1, r3
 800a67a:	f7fe fd6e 	bl	800915a <USBD_LL_DataOutStage>
}
 800a67e:	bf00      	nop
 800a680:	3708      	adds	r7, #8
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b082      	sub	sp, #8
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
 800a68e:	460b      	mov	r3, r1
 800a690:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800a698:	78fa      	ldrb	r2, [r7, #3]
 800a69a:	6879      	ldr	r1, [r7, #4]
 800a69c:	4613      	mov	r3, r2
 800a69e:	00db      	lsls	r3, r3, #3
 800a6a0:	1a9b      	subs	r3, r3, r2
 800a6a2:	009b      	lsls	r3, r3, #2
 800a6a4:	440b      	add	r3, r1
 800a6a6:	3348      	adds	r3, #72	; 0x48
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	78fb      	ldrb	r3, [r7, #3]
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	f7fe fdb7 	bl	8009220 <USBD_LL_DataInStage>
}
 800a6b2:	bf00      	nop
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}

0800a6ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6ba:	b580      	push	{r7, lr}
 800a6bc:	b082      	sub	sp, #8
 800a6be:	af00      	add	r7, sp, #0
 800a6c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f7fe febb 	bl	8009444 <USBD_LL_SOF>
}
 800a6ce:	bf00      	nop
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b084      	sub	sp, #16
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	68db      	ldr	r3, [r3, #12]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d102      	bne.n	800a6f0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	73fb      	strb	r3, [r7, #15]
 800a6ee:	e008      	b.n	800a702 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	2b02      	cmp	r3, #2
 800a6f6:	d102      	bne.n	800a6fe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	73fb      	strb	r3, [r7, #15]
 800a6fc:	e001      	b.n	800a702 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a6fe:	f7f6 f99f 	bl	8000a40 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a708:	7bfa      	ldrb	r2, [r7, #15]
 800a70a:	4611      	mov	r1, r2
 800a70c:	4618      	mov	r0, r3
 800a70e:	f7fe fe5e 	bl	80093ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a718:	4618      	mov	r0, r3
 800a71a:	f7fe fe17 	bl	800934c <USBD_LL_Reset>
}
 800a71e:	bf00      	nop
 800a720:	3710      	adds	r7, #16
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
	...

0800a728 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b082      	sub	sp, #8
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a736:	4618      	mov	r0, r3
 800a738:	f7fe fe59 	bl	80093ee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	6812      	ldr	r2, [r2, #0]
 800a74a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a74e:	f043 0301 	orr.w	r3, r3, #1
 800a752:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6a1b      	ldr	r3, [r3, #32]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d005      	beq.n	800a768 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a75c:	4b04      	ldr	r3, [pc, #16]	; (800a770 <HAL_PCD_SuspendCallback+0x48>)
 800a75e:	691b      	ldr	r3, [r3, #16]
 800a760:	4a03      	ldr	r2, [pc, #12]	; (800a770 <HAL_PCD_SuspendCallback+0x48>)
 800a762:	f043 0306 	orr.w	r3, r3, #6
 800a766:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a768:	bf00      	nop
 800a76a:	3708      	adds	r7, #8
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}
 800a770:	e000ed00 	.word	0xe000ed00

0800a774 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a782:	4618      	mov	r0, r3
 800a784:	f7fe fe48 	bl	8009418 <USBD_LL_Resume>
}
 800a788:	bf00      	nop
 800a78a:	3708      	adds	r7, #8
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	460b      	mov	r3, r1
 800a79a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a7a2:	78fa      	ldrb	r2, [r7, #3]
 800a7a4:	4611      	mov	r1, r2
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f7fe fe73 	bl	8009492 <USBD_LL_IsoOUTIncomplete>
}
 800a7ac:	bf00      	nop
 800a7ae:	3708      	adds	r7, #8
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b082      	sub	sp, #8
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	460b      	mov	r3, r1
 800a7be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a7c6:	78fa      	ldrb	r2, [r7, #3]
 800a7c8:	4611      	mov	r1, r2
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7fe fe54 	bl	8009478 <USBD_LL_IsoINIncomplete>
}
 800a7d0:	bf00      	nop
 800a7d2:	3708      	adds	r7, #8
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7fe fe60 	bl	80094ac <USBD_LL_DevConnected>
}
 800a7ec:	bf00      	nop
 800a7ee:	3708      	adds	r7, #8
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b082      	sub	sp, #8
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a802:	4618      	mov	r0, r3
 800a804:	f7fe fe5d 	bl	80094c2 <USBD_LL_DevDisconnected>
}
 800a808:	bf00      	nop
 800a80a:	3708      	adds	r7, #8
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b082      	sub	sp, #8
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d13c      	bne.n	800a89a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a820:	4a20      	ldr	r2, [pc, #128]	; (800a8a4 <USBD_LL_Init+0x94>)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	4a1e      	ldr	r2, [pc, #120]	; (800a8a4 <USBD_LL_Init+0x94>)
 800a82c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a830:	4b1c      	ldr	r3, [pc, #112]	; (800a8a4 <USBD_LL_Init+0x94>)
 800a832:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a836:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a838:	4b1a      	ldr	r3, [pc, #104]	; (800a8a4 <USBD_LL_Init+0x94>)
 800a83a:	2204      	movs	r2, #4
 800a83c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a83e:	4b19      	ldr	r3, [pc, #100]	; (800a8a4 <USBD_LL_Init+0x94>)
 800a840:	2202      	movs	r2, #2
 800a842:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a844:	4b17      	ldr	r3, [pc, #92]	; (800a8a4 <USBD_LL_Init+0x94>)
 800a846:	2200      	movs	r2, #0
 800a848:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a84a:	4b16      	ldr	r3, [pc, #88]	; (800a8a4 <USBD_LL_Init+0x94>)
 800a84c:	2202      	movs	r2, #2
 800a84e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a850:	4b14      	ldr	r3, [pc, #80]	; (800a8a4 <USBD_LL_Init+0x94>)
 800a852:	2200      	movs	r2, #0
 800a854:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a856:	4b13      	ldr	r3, [pc, #76]	; (800a8a4 <USBD_LL_Init+0x94>)
 800a858:	2200      	movs	r2, #0
 800a85a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a85c:	4b11      	ldr	r3, [pc, #68]	; (800a8a4 <USBD_LL_Init+0x94>)
 800a85e:	2200      	movs	r2, #0
 800a860:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a862:	4b10      	ldr	r3, [pc, #64]	; (800a8a4 <USBD_LL_Init+0x94>)
 800a864:	2200      	movs	r2, #0
 800a866:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a868:	4b0e      	ldr	r3, [pc, #56]	; (800a8a4 <USBD_LL_Init+0x94>)
 800a86a:	2200      	movs	r2, #0
 800a86c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a86e:	480d      	ldr	r0, [pc, #52]	; (800a8a4 <USBD_LL_Init+0x94>)
 800a870:	f7f9 feb7 	bl	80045e2 <HAL_PCD_Init>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	d001      	beq.n	800a87e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a87a:	f7f6 f8e1 	bl	8000a40 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a87e:	2180      	movs	r1, #128	; 0x80
 800a880:	4808      	ldr	r0, [pc, #32]	; (800a8a4 <USBD_LL_Init+0x94>)
 800a882:	f7fb f814 	bl	80058ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a886:	2240      	movs	r2, #64	; 0x40
 800a888:	2100      	movs	r1, #0
 800a88a:	4806      	ldr	r0, [pc, #24]	; (800a8a4 <USBD_LL_Init+0x94>)
 800a88c:	f7fa ffc8 	bl	8005820 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a890:	2280      	movs	r2, #128	; 0x80
 800a892:	2101      	movs	r1, #1
 800a894:	4803      	ldr	r0, [pc, #12]	; (800a8a4 <USBD_LL_Init+0x94>)
 800a896:	f7fa ffc3 	bl	8005820 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a89a:	2300      	movs	r3, #0
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3708      	adds	r7, #8
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}
 800a8a4:	2000190c 	.word	0x2000190c

0800a8a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7f9 ffac 	bl	800481c <HAL_PCD_Start>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8c8:	7bfb      	ldrb	r3, [r7, #15]
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f000 f92a 	bl	800ab24 <USBD_Get_USB_Status>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3710      	adds	r7, #16
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b084      	sub	sp, #16
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
 800a8e6:	4608      	mov	r0, r1
 800a8e8:	4611      	mov	r1, r2
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	70fb      	strb	r3, [r7, #3]
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	70bb      	strb	r3, [r7, #2]
 800a8f4:	4613      	mov	r3, r2
 800a8f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a906:	78bb      	ldrb	r3, [r7, #2]
 800a908:	883a      	ldrh	r2, [r7, #0]
 800a90a:	78f9      	ldrb	r1, [r7, #3]
 800a90c:	f7fa fb90 	bl	8005030 <HAL_PCD_EP_Open>
 800a910:	4603      	mov	r3, r0
 800a912:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a914:	7bfb      	ldrb	r3, [r7, #15]
 800a916:	4618      	mov	r0, r3
 800a918:	f000 f904 	bl	800ab24 <USBD_Get_USB_Status>
 800a91c:	4603      	mov	r3, r0
 800a91e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a920:	7bbb      	ldrb	r3, [r7, #14]
}
 800a922:	4618      	mov	r0, r3
 800a924:	3710      	adds	r7, #16
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}

0800a92a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a92a:	b580      	push	{r7, lr}
 800a92c:	b084      	sub	sp, #16
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
 800a932:	460b      	mov	r3, r1
 800a934:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a936:	2300      	movs	r3, #0
 800a938:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a93a:	2300      	movs	r3, #0
 800a93c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a944:	78fa      	ldrb	r2, [r7, #3]
 800a946:	4611      	mov	r1, r2
 800a948:	4618      	mov	r0, r3
 800a94a:	f7fa fbd9 	bl	8005100 <HAL_PCD_EP_Close>
 800a94e:	4603      	mov	r3, r0
 800a950:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a952:	7bfb      	ldrb	r3, [r7, #15]
 800a954:	4618      	mov	r0, r3
 800a956:	f000 f8e5 	bl	800ab24 <USBD_Get_USB_Status>
 800a95a:	4603      	mov	r3, r0
 800a95c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a95e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a960:	4618      	mov	r0, r3
 800a962:	3710      	adds	r7, #16
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	460b      	mov	r3, r1
 800a972:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a974:	2300      	movs	r3, #0
 800a976:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a978:	2300      	movs	r3, #0
 800a97a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a982:	78fa      	ldrb	r2, [r7, #3]
 800a984:	4611      	mov	r1, r2
 800a986:	4618      	mov	r0, r3
 800a988:	f7fa fcb1 	bl	80052ee <HAL_PCD_EP_SetStall>
 800a98c:	4603      	mov	r3, r0
 800a98e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a990:	7bfb      	ldrb	r3, [r7, #15]
 800a992:	4618      	mov	r0, r3
 800a994:	f000 f8c6 	bl	800ab24 <USBD_Get_USB_Status>
 800a998:	4603      	mov	r3, r0
 800a99a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a99c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3710      	adds	r7, #16
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}

0800a9a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9a6:	b580      	push	{r7, lr}
 800a9a8:	b084      	sub	sp, #16
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a9c0:	78fa      	ldrb	r2, [r7, #3]
 800a9c2:	4611      	mov	r1, r2
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7fa fcf6 	bl	80053b6 <HAL_PCD_EP_ClrStall>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9ce:	7bfb      	ldrb	r3, [r7, #15]
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f000 f8a7 	bl	800ab24 <USBD_Get_USB_Status>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9da:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3710      	adds	r7, #16
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b085      	sub	sp, #20
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a9f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a9f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	da0b      	bge.n	800aa18 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aa00:	78fb      	ldrb	r3, [r7, #3]
 800aa02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa06:	68f9      	ldr	r1, [r7, #12]
 800aa08:	4613      	mov	r3, r2
 800aa0a:	00db      	lsls	r3, r3, #3
 800aa0c:	1a9b      	subs	r3, r3, r2
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	440b      	add	r3, r1
 800aa12:	333e      	adds	r3, #62	; 0x3e
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	e00b      	b.n	800aa30 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aa18:	78fb      	ldrb	r3, [r7, #3]
 800aa1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa1e:	68f9      	ldr	r1, [r7, #12]
 800aa20:	4613      	mov	r3, r2
 800aa22:	00db      	lsls	r3, r3, #3
 800aa24:	1a9b      	subs	r3, r3, r2
 800aa26:	009b      	lsls	r3, r3, #2
 800aa28:	440b      	add	r3, r1
 800aa2a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aa2e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3714      	adds	r7, #20
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr

0800aa3c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	460b      	mov	r3, r1
 800aa46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800aa56:	78fa      	ldrb	r2, [r7, #3]
 800aa58:	4611      	mov	r1, r2
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7fa fac3 	bl	8004fe6 <HAL_PCD_SetAddress>
 800aa60:	4603      	mov	r3, r0
 800aa62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa64:	7bfb      	ldrb	r3, [r7, #15]
 800aa66:	4618      	mov	r0, r3
 800aa68:	f000 f85c 	bl	800ab24 <USBD_Get_USB_Status>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa70:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3710      	adds	r7, #16
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}

0800aa7a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aa7a:	b580      	push	{r7, lr}
 800aa7c:	b086      	sub	sp, #24
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	60f8      	str	r0, [r7, #12]
 800aa82:	607a      	str	r2, [r7, #4]
 800aa84:	603b      	str	r3, [r7, #0]
 800aa86:	460b      	mov	r3, r1
 800aa88:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800aa98:	7af9      	ldrb	r1, [r7, #11]
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	f7fa fbdc 	bl	800525a <HAL_PCD_EP_Transmit>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaa6:	7dfb      	ldrb	r3, [r7, #23]
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f000 f83b 	bl	800ab24 <USBD_Get_USB_Status>
 800aaae:	4603      	mov	r3, r0
 800aab0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aab2:	7dbb      	ldrb	r3, [r7, #22]
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3718      	adds	r7, #24
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b086      	sub	sp, #24
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	60f8      	str	r0, [r7, #12]
 800aac4:	607a      	str	r2, [r7, #4]
 800aac6:	603b      	str	r3, [r7, #0]
 800aac8:	460b      	mov	r3, r1
 800aaca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aacc:	2300      	movs	r3, #0
 800aace:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aad0:	2300      	movs	r3, #0
 800aad2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800aada:	7af9      	ldrb	r1, [r7, #11]
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	f7fa fb58 	bl	8005194 <HAL_PCD_EP_Receive>
 800aae4:	4603      	mov	r3, r0
 800aae6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aae8:	7dfb      	ldrb	r3, [r7, #23]
 800aaea:	4618      	mov	r0, r3
 800aaec:	f000 f81a 	bl	800ab24 <USBD_Get_USB_Status>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aaf4:	7dbb      	ldrb	r3, [r7, #22]
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3718      	adds	r7, #24
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b082      	sub	sp, #8
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
 800ab06:	460b      	mov	r3, r1
 800ab08:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ab10:	78fa      	ldrb	r2, [r7, #3]
 800ab12:	4611      	mov	r1, r2
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7fa fb88 	bl	800522a <HAL_PCD_EP_GetRxCount>
 800ab1a:	4603      	mov	r3, r0
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3708      	adds	r7, #8
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b085      	sub	sp, #20
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ab32:	79fb      	ldrb	r3, [r7, #7]
 800ab34:	2b03      	cmp	r3, #3
 800ab36:	d817      	bhi.n	800ab68 <USBD_Get_USB_Status+0x44>
 800ab38:	a201      	add	r2, pc, #4	; (adr r2, 800ab40 <USBD_Get_USB_Status+0x1c>)
 800ab3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab3e:	bf00      	nop
 800ab40:	0800ab51 	.word	0x0800ab51
 800ab44:	0800ab57 	.word	0x0800ab57
 800ab48:	0800ab5d 	.word	0x0800ab5d
 800ab4c:	0800ab63 	.word	0x0800ab63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ab50:	2300      	movs	r3, #0
 800ab52:	73fb      	strb	r3, [r7, #15]
    break;
 800ab54:	e00b      	b.n	800ab6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ab56:	2303      	movs	r3, #3
 800ab58:	73fb      	strb	r3, [r7, #15]
    break;
 800ab5a:	e008      	b.n	800ab6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	73fb      	strb	r3, [r7, #15]
    break;
 800ab60:	e005      	b.n	800ab6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ab62:	2303      	movs	r3, #3
 800ab64:	73fb      	strb	r3, [r7, #15]
    break;
 800ab66:	e002      	b.n	800ab6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ab68:	2303      	movs	r3, #3
 800ab6a:	73fb      	strb	r3, [r7, #15]
    break;
 800ab6c:	bf00      	nop
  }
  return usb_status;
 800ab6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3714      	adds	r7, #20
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <__errno>:
 800ab7c:	4b01      	ldr	r3, [pc, #4]	; (800ab84 <__errno+0x8>)
 800ab7e:	6818      	ldr	r0, [r3, #0]
 800ab80:	4770      	bx	lr
 800ab82:	bf00      	nop
 800ab84:	20000184 	.word	0x20000184

0800ab88 <__libc_init_array>:
 800ab88:	b570      	push	{r4, r5, r6, lr}
 800ab8a:	4e0d      	ldr	r6, [pc, #52]	; (800abc0 <__libc_init_array+0x38>)
 800ab8c:	4c0d      	ldr	r4, [pc, #52]	; (800abc4 <__libc_init_array+0x3c>)
 800ab8e:	1ba4      	subs	r4, r4, r6
 800ab90:	10a4      	asrs	r4, r4, #2
 800ab92:	2500      	movs	r5, #0
 800ab94:	42a5      	cmp	r5, r4
 800ab96:	d109      	bne.n	800abac <__libc_init_array+0x24>
 800ab98:	4e0b      	ldr	r6, [pc, #44]	; (800abc8 <__libc_init_array+0x40>)
 800ab9a:	4c0c      	ldr	r4, [pc, #48]	; (800abcc <__libc_init_array+0x44>)
 800ab9c:	f000 fc36 	bl	800b40c <_init>
 800aba0:	1ba4      	subs	r4, r4, r6
 800aba2:	10a4      	asrs	r4, r4, #2
 800aba4:	2500      	movs	r5, #0
 800aba6:	42a5      	cmp	r5, r4
 800aba8:	d105      	bne.n	800abb6 <__libc_init_array+0x2e>
 800abaa:	bd70      	pop	{r4, r5, r6, pc}
 800abac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800abb0:	4798      	blx	r3
 800abb2:	3501      	adds	r5, #1
 800abb4:	e7ee      	b.n	800ab94 <__libc_init_array+0xc>
 800abb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800abba:	4798      	blx	r3
 800abbc:	3501      	adds	r5, #1
 800abbe:	e7f2      	b.n	800aba6 <__libc_init_array+0x1e>
 800abc0:	0800b4e0 	.word	0x0800b4e0
 800abc4:	0800b4e0 	.word	0x0800b4e0
 800abc8:	0800b4e0 	.word	0x0800b4e0
 800abcc:	0800b4e4 	.word	0x0800b4e4

0800abd0 <malloc>:
 800abd0:	4b02      	ldr	r3, [pc, #8]	; (800abdc <malloc+0xc>)
 800abd2:	4601      	mov	r1, r0
 800abd4:	6818      	ldr	r0, [r3, #0]
 800abd6:	f000 b861 	b.w	800ac9c <_malloc_r>
 800abda:	bf00      	nop
 800abdc:	20000184 	.word	0x20000184

0800abe0 <free>:
 800abe0:	4b02      	ldr	r3, [pc, #8]	; (800abec <free+0xc>)
 800abe2:	4601      	mov	r1, r0
 800abe4:	6818      	ldr	r0, [r3, #0]
 800abe6:	f000 b80b 	b.w	800ac00 <_free_r>
 800abea:	bf00      	nop
 800abec:	20000184 	.word	0x20000184

0800abf0 <memset>:
 800abf0:	4402      	add	r2, r0
 800abf2:	4603      	mov	r3, r0
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d100      	bne.n	800abfa <memset+0xa>
 800abf8:	4770      	bx	lr
 800abfa:	f803 1b01 	strb.w	r1, [r3], #1
 800abfe:	e7f9      	b.n	800abf4 <memset+0x4>

0800ac00 <_free_r>:
 800ac00:	b538      	push	{r3, r4, r5, lr}
 800ac02:	4605      	mov	r5, r0
 800ac04:	2900      	cmp	r1, #0
 800ac06:	d045      	beq.n	800ac94 <_free_r+0x94>
 800ac08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac0c:	1f0c      	subs	r4, r1, #4
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	bfb8      	it	lt
 800ac12:	18e4      	addlt	r4, r4, r3
 800ac14:	f000 f8cc 	bl	800adb0 <__malloc_lock>
 800ac18:	4a1f      	ldr	r2, [pc, #124]	; (800ac98 <_free_r+0x98>)
 800ac1a:	6813      	ldr	r3, [r2, #0]
 800ac1c:	4610      	mov	r0, r2
 800ac1e:	b933      	cbnz	r3, 800ac2e <_free_r+0x2e>
 800ac20:	6063      	str	r3, [r4, #4]
 800ac22:	6014      	str	r4, [r2, #0]
 800ac24:	4628      	mov	r0, r5
 800ac26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac2a:	f000 b8c2 	b.w	800adb2 <__malloc_unlock>
 800ac2e:	42a3      	cmp	r3, r4
 800ac30:	d90c      	bls.n	800ac4c <_free_r+0x4c>
 800ac32:	6821      	ldr	r1, [r4, #0]
 800ac34:	1862      	adds	r2, r4, r1
 800ac36:	4293      	cmp	r3, r2
 800ac38:	bf04      	itt	eq
 800ac3a:	681a      	ldreq	r2, [r3, #0]
 800ac3c:	685b      	ldreq	r3, [r3, #4]
 800ac3e:	6063      	str	r3, [r4, #4]
 800ac40:	bf04      	itt	eq
 800ac42:	1852      	addeq	r2, r2, r1
 800ac44:	6022      	streq	r2, [r4, #0]
 800ac46:	6004      	str	r4, [r0, #0]
 800ac48:	e7ec      	b.n	800ac24 <_free_r+0x24>
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	685a      	ldr	r2, [r3, #4]
 800ac4e:	b10a      	cbz	r2, 800ac54 <_free_r+0x54>
 800ac50:	42a2      	cmp	r2, r4
 800ac52:	d9fa      	bls.n	800ac4a <_free_r+0x4a>
 800ac54:	6819      	ldr	r1, [r3, #0]
 800ac56:	1858      	adds	r0, r3, r1
 800ac58:	42a0      	cmp	r0, r4
 800ac5a:	d10b      	bne.n	800ac74 <_free_r+0x74>
 800ac5c:	6820      	ldr	r0, [r4, #0]
 800ac5e:	4401      	add	r1, r0
 800ac60:	1858      	adds	r0, r3, r1
 800ac62:	4282      	cmp	r2, r0
 800ac64:	6019      	str	r1, [r3, #0]
 800ac66:	d1dd      	bne.n	800ac24 <_free_r+0x24>
 800ac68:	6810      	ldr	r0, [r2, #0]
 800ac6a:	6852      	ldr	r2, [r2, #4]
 800ac6c:	605a      	str	r2, [r3, #4]
 800ac6e:	4401      	add	r1, r0
 800ac70:	6019      	str	r1, [r3, #0]
 800ac72:	e7d7      	b.n	800ac24 <_free_r+0x24>
 800ac74:	d902      	bls.n	800ac7c <_free_r+0x7c>
 800ac76:	230c      	movs	r3, #12
 800ac78:	602b      	str	r3, [r5, #0]
 800ac7a:	e7d3      	b.n	800ac24 <_free_r+0x24>
 800ac7c:	6820      	ldr	r0, [r4, #0]
 800ac7e:	1821      	adds	r1, r4, r0
 800ac80:	428a      	cmp	r2, r1
 800ac82:	bf04      	itt	eq
 800ac84:	6811      	ldreq	r1, [r2, #0]
 800ac86:	6852      	ldreq	r2, [r2, #4]
 800ac88:	6062      	str	r2, [r4, #4]
 800ac8a:	bf04      	itt	eq
 800ac8c:	1809      	addeq	r1, r1, r0
 800ac8e:	6021      	streq	r1, [r4, #0]
 800ac90:	605c      	str	r4, [r3, #4]
 800ac92:	e7c7      	b.n	800ac24 <_free_r+0x24>
 800ac94:	bd38      	pop	{r3, r4, r5, pc}
 800ac96:	bf00      	nop
 800ac98:	20000214 	.word	0x20000214

0800ac9c <_malloc_r>:
 800ac9c:	b570      	push	{r4, r5, r6, lr}
 800ac9e:	1ccd      	adds	r5, r1, #3
 800aca0:	f025 0503 	bic.w	r5, r5, #3
 800aca4:	3508      	adds	r5, #8
 800aca6:	2d0c      	cmp	r5, #12
 800aca8:	bf38      	it	cc
 800acaa:	250c      	movcc	r5, #12
 800acac:	2d00      	cmp	r5, #0
 800acae:	4606      	mov	r6, r0
 800acb0:	db01      	blt.n	800acb6 <_malloc_r+0x1a>
 800acb2:	42a9      	cmp	r1, r5
 800acb4:	d903      	bls.n	800acbe <_malloc_r+0x22>
 800acb6:	230c      	movs	r3, #12
 800acb8:	6033      	str	r3, [r6, #0]
 800acba:	2000      	movs	r0, #0
 800acbc:	bd70      	pop	{r4, r5, r6, pc}
 800acbe:	f000 f877 	bl	800adb0 <__malloc_lock>
 800acc2:	4a21      	ldr	r2, [pc, #132]	; (800ad48 <_malloc_r+0xac>)
 800acc4:	6814      	ldr	r4, [r2, #0]
 800acc6:	4621      	mov	r1, r4
 800acc8:	b991      	cbnz	r1, 800acf0 <_malloc_r+0x54>
 800acca:	4c20      	ldr	r4, [pc, #128]	; (800ad4c <_malloc_r+0xb0>)
 800accc:	6823      	ldr	r3, [r4, #0]
 800acce:	b91b      	cbnz	r3, 800acd8 <_malloc_r+0x3c>
 800acd0:	4630      	mov	r0, r6
 800acd2:	f000 f83d 	bl	800ad50 <_sbrk_r>
 800acd6:	6020      	str	r0, [r4, #0]
 800acd8:	4629      	mov	r1, r5
 800acda:	4630      	mov	r0, r6
 800acdc:	f000 f838 	bl	800ad50 <_sbrk_r>
 800ace0:	1c43      	adds	r3, r0, #1
 800ace2:	d124      	bne.n	800ad2e <_malloc_r+0x92>
 800ace4:	230c      	movs	r3, #12
 800ace6:	6033      	str	r3, [r6, #0]
 800ace8:	4630      	mov	r0, r6
 800acea:	f000 f862 	bl	800adb2 <__malloc_unlock>
 800acee:	e7e4      	b.n	800acba <_malloc_r+0x1e>
 800acf0:	680b      	ldr	r3, [r1, #0]
 800acf2:	1b5b      	subs	r3, r3, r5
 800acf4:	d418      	bmi.n	800ad28 <_malloc_r+0x8c>
 800acf6:	2b0b      	cmp	r3, #11
 800acf8:	d90f      	bls.n	800ad1a <_malloc_r+0x7e>
 800acfa:	600b      	str	r3, [r1, #0]
 800acfc:	50cd      	str	r5, [r1, r3]
 800acfe:	18cc      	adds	r4, r1, r3
 800ad00:	4630      	mov	r0, r6
 800ad02:	f000 f856 	bl	800adb2 <__malloc_unlock>
 800ad06:	f104 000b 	add.w	r0, r4, #11
 800ad0a:	1d23      	adds	r3, r4, #4
 800ad0c:	f020 0007 	bic.w	r0, r0, #7
 800ad10:	1ac3      	subs	r3, r0, r3
 800ad12:	d0d3      	beq.n	800acbc <_malloc_r+0x20>
 800ad14:	425a      	negs	r2, r3
 800ad16:	50e2      	str	r2, [r4, r3]
 800ad18:	e7d0      	b.n	800acbc <_malloc_r+0x20>
 800ad1a:	428c      	cmp	r4, r1
 800ad1c:	684b      	ldr	r3, [r1, #4]
 800ad1e:	bf16      	itet	ne
 800ad20:	6063      	strne	r3, [r4, #4]
 800ad22:	6013      	streq	r3, [r2, #0]
 800ad24:	460c      	movne	r4, r1
 800ad26:	e7eb      	b.n	800ad00 <_malloc_r+0x64>
 800ad28:	460c      	mov	r4, r1
 800ad2a:	6849      	ldr	r1, [r1, #4]
 800ad2c:	e7cc      	b.n	800acc8 <_malloc_r+0x2c>
 800ad2e:	1cc4      	adds	r4, r0, #3
 800ad30:	f024 0403 	bic.w	r4, r4, #3
 800ad34:	42a0      	cmp	r0, r4
 800ad36:	d005      	beq.n	800ad44 <_malloc_r+0xa8>
 800ad38:	1a21      	subs	r1, r4, r0
 800ad3a:	4630      	mov	r0, r6
 800ad3c:	f000 f808 	bl	800ad50 <_sbrk_r>
 800ad40:	3001      	adds	r0, #1
 800ad42:	d0cf      	beq.n	800ace4 <_malloc_r+0x48>
 800ad44:	6025      	str	r5, [r4, #0]
 800ad46:	e7db      	b.n	800ad00 <_malloc_r+0x64>
 800ad48:	20000214 	.word	0x20000214
 800ad4c:	20000218 	.word	0x20000218

0800ad50 <_sbrk_r>:
 800ad50:	b538      	push	{r3, r4, r5, lr}
 800ad52:	4c06      	ldr	r4, [pc, #24]	; (800ad6c <_sbrk_r+0x1c>)
 800ad54:	2300      	movs	r3, #0
 800ad56:	4605      	mov	r5, r0
 800ad58:	4608      	mov	r0, r1
 800ad5a:	6023      	str	r3, [r4, #0]
 800ad5c:	f7f6 f80a 	bl	8000d74 <_sbrk>
 800ad60:	1c43      	adds	r3, r0, #1
 800ad62:	d102      	bne.n	800ad6a <_sbrk_r+0x1a>
 800ad64:	6823      	ldr	r3, [r4, #0]
 800ad66:	b103      	cbz	r3, 800ad6a <_sbrk_r+0x1a>
 800ad68:	602b      	str	r3, [r5, #0]
 800ad6a:	bd38      	pop	{r3, r4, r5, pc}
 800ad6c:	20001d14 	.word	0x20001d14

0800ad70 <siprintf>:
 800ad70:	b40e      	push	{r1, r2, r3}
 800ad72:	b500      	push	{lr}
 800ad74:	b09c      	sub	sp, #112	; 0x70
 800ad76:	ab1d      	add	r3, sp, #116	; 0x74
 800ad78:	9002      	str	r0, [sp, #8]
 800ad7a:	9006      	str	r0, [sp, #24]
 800ad7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ad80:	4809      	ldr	r0, [pc, #36]	; (800ada8 <siprintf+0x38>)
 800ad82:	9107      	str	r1, [sp, #28]
 800ad84:	9104      	str	r1, [sp, #16]
 800ad86:	4909      	ldr	r1, [pc, #36]	; (800adac <siprintf+0x3c>)
 800ad88:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad8c:	9105      	str	r1, [sp, #20]
 800ad8e:	6800      	ldr	r0, [r0, #0]
 800ad90:	9301      	str	r3, [sp, #4]
 800ad92:	a902      	add	r1, sp, #8
 800ad94:	f000 f868 	bl	800ae68 <_svfiprintf_r>
 800ad98:	9b02      	ldr	r3, [sp, #8]
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	701a      	strb	r2, [r3, #0]
 800ad9e:	b01c      	add	sp, #112	; 0x70
 800ada0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ada4:	b003      	add	sp, #12
 800ada6:	4770      	bx	lr
 800ada8:	20000184 	.word	0x20000184
 800adac:	ffff0208 	.word	0xffff0208

0800adb0 <__malloc_lock>:
 800adb0:	4770      	bx	lr

0800adb2 <__malloc_unlock>:
 800adb2:	4770      	bx	lr

0800adb4 <__ssputs_r>:
 800adb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adb8:	688e      	ldr	r6, [r1, #8]
 800adba:	429e      	cmp	r6, r3
 800adbc:	4682      	mov	sl, r0
 800adbe:	460c      	mov	r4, r1
 800adc0:	4690      	mov	r8, r2
 800adc2:	4699      	mov	r9, r3
 800adc4:	d837      	bhi.n	800ae36 <__ssputs_r+0x82>
 800adc6:	898a      	ldrh	r2, [r1, #12]
 800adc8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800adcc:	d031      	beq.n	800ae32 <__ssputs_r+0x7e>
 800adce:	6825      	ldr	r5, [r4, #0]
 800add0:	6909      	ldr	r1, [r1, #16]
 800add2:	1a6f      	subs	r7, r5, r1
 800add4:	6965      	ldr	r5, [r4, #20]
 800add6:	2302      	movs	r3, #2
 800add8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800addc:	fb95 f5f3 	sdiv	r5, r5, r3
 800ade0:	f109 0301 	add.w	r3, r9, #1
 800ade4:	443b      	add	r3, r7
 800ade6:	429d      	cmp	r5, r3
 800ade8:	bf38      	it	cc
 800adea:	461d      	movcc	r5, r3
 800adec:	0553      	lsls	r3, r2, #21
 800adee:	d530      	bpl.n	800ae52 <__ssputs_r+0x9e>
 800adf0:	4629      	mov	r1, r5
 800adf2:	f7ff ff53 	bl	800ac9c <_malloc_r>
 800adf6:	4606      	mov	r6, r0
 800adf8:	b950      	cbnz	r0, 800ae10 <__ssputs_r+0x5c>
 800adfa:	230c      	movs	r3, #12
 800adfc:	f8ca 3000 	str.w	r3, [sl]
 800ae00:	89a3      	ldrh	r3, [r4, #12]
 800ae02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae06:	81a3      	strh	r3, [r4, #12]
 800ae08:	f04f 30ff 	mov.w	r0, #4294967295
 800ae0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae10:	463a      	mov	r2, r7
 800ae12:	6921      	ldr	r1, [r4, #16]
 800ae14:	f000 faa8 	bl	800b368 <memcpy>
 800ae18:	89a3      	ldrh	r3, [r4, #12]
 800ae1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae22:	81a3      	strh	r3, [r4, #12]
 800ae24:	6126      	str	r6, [r4, #16]
 800ae26:	6165      	str	r5, [r4, #20]
 800ae28:	443e      	add	r6, r7
 800ae2a:	1bed      	subs	r5, r5, r7
 800ae2c:	6026      	str	r6, [r4, #0]
 800ae2e:	60a5      	str	r5, [r4, #8]
 800ae30:	464e      	mov	r6, r9
 800ae32:	454e      	cmp	r6, r9
 800ae34:	d900      	bls.n	800ae38 <__ssputs_r+0x84>
 800ae36:	464e      	mov	r6, r9
 800ae38:	4632      	mov	r2, r6
 800ae3a:	4641      	mov	r1, r8
 800ae3c:	6820      	ldr	r0, [r4, #0]
 800ae3e:	f000 fa9e 	bl	800b37e <memmove>
 800ae42:	68a3      	ldr	r3, [r4, #8]
 800ae44:	1b9b      	subs	r3, r3, r6
 800ae46:	60a3      	str	r3, [r4, #8]
 800ae48:	6823      	ldr	r3, [r4, #0]
 800ae4a:	441e      	add	r6, r3
 800ae4c:	6026      	str	r6, [r4, #0]
 800ae4e:	2000      	movs	r0, #0
 800ae50:	e7dc      	b.n	800ae0c <__ssputs_r+0x58>
 800ae52:	462a      	mov	r2, r5
 800ae54:	f000 faac 	bl	800b3b0 <_realloc_r>
 800ae58:	4606      	mov	r6, r0
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	d1e2      	bne.n	800ae24 <__ssputs_r+0x70>
 800ae5e:	6921      	ldr	r1, [r4, #16]
 800ae60:	4650      	mov	r0, sl
 800ae62:	f7ff fecd 	bl	800ac00 <_free_r>
 800ae66:	e7c8      	b.n	800adfa <__ssputs_r+0x46>

0800ae68 <_svfiprintf_r>:
 800ae68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae6c:	461d      	mov	r5, r3
 800ae6e:	898b      	ldrh	r3, [r1, #12]
 800ae70:	061f      	lsls	r7, r3, #24
 800ae72:	b09d      	sub	sp, #116	; 0x74
 800ae74:	4680      	mov	r8, r0
 800ae76:	460c      	mov	r4, r1
 800ae78:	4616      	mov	r6, r2
 800ae7a:	d50f      	bpl.n	800ae9c <_svfiprintf_r+0x34>
 800ae7c:	690b      	ldr	r3, [r1, #16]
 800ae7e:	b96b      	cbnz	r3, 800ae9c <_svfiprintf_r+0x34>
 800ae80:	2140      	movs	r1, #64	; 0x40
 800ae82:	f7ff ff0b 	bl	800ac9c <_malloc_r>
 800ae86:	6020      	str	r0, [r4, #0]
 800ae88:	6120      	str	r0, [r4, #16]
 800ae8a:	b928      	cbnz	r0, 800ae98 <_svfiprintf_r+0x30>
 800ae8c:	230c      	movs	r3, #12
 800ae8e:	f8c8 3000 	str.w	r3, [r8]
 800ae92:	f04f 30ff 	mov.w	r0, #4294967295
 800ae96:	e0c8      	b.n	800b02a <_svfiprintf_r+0x1c2>
 800ae98:	2340      	movs	r3, #64	; 0x40
 800ae9a:	6163      	str	r3, [r4, #20]
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	9309      	str	r3, [sp, #36]	; 0x24
 800aea0:	2320      	movs	r3, #32
 800aea2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aea6:	2330      	movs	r3, #48	; 0x30
 800aea8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aeac:	9503      	str	r5, [sp, #12]
 800aeae:	f04f 0b01 	mov.w	fp, #1
 800aeb2:	4637      	mov	r7, r6
 800aeb4:	463d      	mov	r5, r7
 800aeb6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800aeba:	b10b      	cbz	r3, 800aec0 <_svfiprintf_r+0x58>
 800aebc:	2b25      	cmp	r3, #37	; 0x25
 800aebe:	d13e      	bne.n	800af3e <_svfiprintf_r+0xd6>
 800aec0:	ebb7 0a06 	subs.w	sl, r7, r6
 800aec4:	d00b      	beq.n	800aede <_svfiprintf_r+0x76>
 800aec6:	4653      	mov	r3, sl
 800aec8:	4632      	mov	r2, r6
 800aeca:	4621      	mov	r1, r4
 800aecc:	4640      	mov	r0, r8
 800aece:	f7ff ff71 	bl	800adb4 <__ssputs_r>
 800aed2:	3001      	adds	r0, #1
 800aed4:	f000 80a4 	beq.w	800b020 <_svfiprintf_r+0x1b8>
 800aed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeda:	4453      	add	r3, sl
 800aedc:	9309      	str	r3, [sp, #36]	; 0x24
 800aede:	783b      	ldrb	r3, [r7, #0]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	f000 809d 	beq.w	800b020 <_svfiprintf_r+0x1b8>
 800aee6:	2300      	movs	r3, #0
 800aee8:	f04f 32ff 	mov.w	r2, #4294967295
 800aeec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aef0:	9304      	str	r3, [sp, #16]
 800aef2:	9307      	str	r3, [sp, #28]
 800aef4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aef8:	931a      	str	r3, [sp, #104]	; 0x68
 800aefa:	462f      	mov	r7, r5
 800aefc:	2205      	movs	r2, #5
 800aefe:	f817 1b01 	ldrb.w	r1, [r7], #1
 800af02:	4850      	ldr	r0, [pc, #320]	; (800b044 <_svfiprintf_r+0x1dc>)
 800af04:	f7f5 f96c 	bl	80001e0 <memchr>
 800af08:	9b04      	ldr	r3, [sp, #16]
 800af0a:	b9d0      	cbnz	r0, 800af42 <_svfiprintf_r+0xda>
 800af0c:	06d9      	lsls	r1, r3, #27
 800af0e:	bf44      	itt	mi
 800af10:	2220      	movmi	r2, #32
 800af12:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800af16:	071a      	lsls	r2, r3, #28
 800af18:	bf44      	itt	mi
 800af1a:	222b      	movmi	r2, #43	; 0x2b
 800af1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800af20:	782a      	ldrb	r2, [r5, #0]
 800af22:	2a2a      	cmp	r2, #42	; 0x2a
 800af24:	d015      	beq.n	800af52 <_svfiprintf_r+0xea>
 800af26:	9a07      	ldr	r2, [sp, #28]
 800af28:	462f      	mov	r7, r5
 800af2a:	2000      	movs	r0, #0
 800af2c:	250a      	movs	r5, #10
 800af2e:	4639      	mov	r1, r7
 800af30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af34:	3b30      	subs	r3, #48	; 0x30
 800af36:	2b09      	cmp	r3, #9
 800af38:	d94d      	bls.n	800afd6 <_svfiprintf_r+0x16e>
 800af3a:	b1b8      	cbz	r0, 800af6c <_svfiprintf_r+0x104>
 800af3c:	e00f      	b.n	800af5e <_svfiprintf_r+0xf6>
 800af3e:	462f      	mov	r7, r5
 800af40:	e7b8      	b.n	800aeb4 <_svfiprintf_r+0x4c>
 800af42:	4a40      	ldr	r2, [pc, #256]	; (800b044 <_svfiprintf_r+0x1dc>)
 800af44:	1a80      	subs	r0, r0, r2
 800af46:	fa0b f000 	lsl.w	r0, fp, r0
 800af4a:	4318      	orrs	r0, r3
 800af4c:	9004      	str	r0, [sp, #16]
 800af4e:	463d      	mov	r5, r7
 800af50:	e7d3      	b.n	800aefa <_svfiprintf_r+0x92>
 800af52:	9a03      	ldr	r2, [sp, #12]
 800af54:	1d11      	adds	r1, r2, #4
 800af56:	6812      	ldr	r2, [r2, #0]
 800af58:	9103      	str	r1, [sp, #12]
 800af5a:	2a00      	cmp	r2, #0
 800af5c:	db01      	blt.n	800af62 <_svfiprintf_r+0xfa>
 800af5e:	9207      	str	r2, [sp, #28]
 800af60:	e004      	b.n	800af6c <_svfiprintf_r+0x104>
 800af62:	4252      	negs	r2, r2
 800af64:	f043 0302 	orr.w	r3, r3, #2
 800af68:	9207      	str	r2, [sp, #28]
 800af6a:	9304      	str	r3, [sp, #16]
 800af6c:	783b      	ldrb	r3, [r7, #0]
 800af6e:	2b2e      	cmp	r3, #46	; 0x2e
 800af70:	d10c      	bne.n	800af8c <_svfiprintf_r+0x124>
 800af72:	787b      	ldrb	r3, [r7, #1]
 800af74:	2b2a      	cmp	r3, #42	; 0x2a
 800af76:	d133      	bne.n	800afe0 <_svfiprintf_r+0x178>
 800af78:	9b03      	ldr	r3, [sp, #12]
 800af7a:	1d1a      	adds	r2, r3, #4
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	9203      	str	r2, [sp, #12]
 800af80:	2b00      	cmp	r3, #0
 800af82:	bfb8      	it	lt
 800af84:	f04f 33ff 	movlt.w	r3, #4294967295
 800af88:	3702      	adds	r7, #2
 800af8a:	9305      	str	r3, [sp, #20]
 800af8c:	4d2e      	ldr	r5, [pc, #184]	; (800b048 <_svfiprintf_r+0x1e0>)
 800af8e:	7839      	ldrb	r1, [r7, #0]
 800af90:	2203      	movs	r2, #3
 800af92:	4628      	mov	r0, r5
 800af94:	f7f5 f924 	bl	80001e0 <memchr>
 800af98:	b138      	cbz	r0, 800afaa <_svfiprintf_r+0x142>
 800af9a:	2340      	movs	r3, #64	; 0x40
 800af9c:	1b40      	subs	r0, r0, r5
 800af9e:	fa03 f000 	lsl.w	r0, r3, r0
 800afa2:	9b04      	ldr	r3, [sp, #16]
 800afa4:	4303      	orrs	r3, r0
 800afa6:	3701      	adds	r7, #1
 800afa8:	9304      	str	r3, [sp, #16]
 800afaa:	7839      	ldrb	r1, [r7, #0]
 800afac:	4827      	ldr	r0, [pc, #156]	; (800b04c <_svfiprintf_r+0x1e4>)
 800afae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afb2:	2206      	movs	r2, #6
 800afb4:	1c7e      	adds	r6, r7, #1
 800afb6:	f7f5 f913 	bl	80001e0 <memchr>
 800afba:	2800      	cmp	r0, #0
 800afbc:	d038      	beq.n	800b030 <_svfiprintf_r+0x1c8>
 800afbe:	4b24      	ldr	r3, [pc, #144]	; (800b050 <_svfiprintf_r+0x1e8>)
 800afc0:	bb13      	cbnz	r3, 800b008 <_svfiprintf_r+0x1a0>
 800afc2:	9b03      	ldr	r3, [sp, #12]
 800afc4:	3307      	adds	r3, #7
 800afc6:	f023 0307 	bic.w	r3, r3, #7
 800afca:	3308      	adds	r3, #8
 800afcc:	9303      	str	r3, [sp, #12]
 800afce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afd0:	444b      	add	r3, r9
 800afd2:	9309      	str	r3, [sp, #36]	; 0x24
 800afd4:	e76d      	b.n	800aeb2 <_svfiprintf_r+0x4a>
 800afd6:	fb05 3202 	mla	r2, r5, r2, r3
 800afda:	2001      	movs	r0, #1
 800afdc:	460f      	mov	r7, r1
 800afde:	e7a6      	b.n	800af2e <_svfiprintf_r+0xc6>
 800afe0:	2300      	movs	r3, #0
 800afe2:	3701      	adds	r7, #1
 800afe4:	9305      	str	r3, [sp, #20]
 800afe6:	4619      	mov	r1, r3
 800afe8:	250a      	movs	r5, #10
 800afea:	4638      	mov	r0, r7
 800afec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aff0:	3a30      	subs	r2, #48	; 0x30
 800aff2:	2a09      	cmp	r2, #9
 800aff4:	d903      	bls.n	800affe <_svfiprintf_r+0x196>
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d0c8      	beq.n	800af8c <_svfiprintf_r+0x124>
 800affa:	9105      	str	r1, [sp, #20]
 800affc:	e7c6      	b.n	800af8c <_svfiprintf_r+0x124>
 800affe:	fb05 2101 	mla	r1, r5, r1, r2
 800b002:	2301      	movs	r3, #1
 800b004:	4607      	mov	r7, r0
 800b006:	e7f0      	b.n	800afea <_svfiprintf_r+0x182>
 800b008:	ab03      	add	r3, sp, #12
 800b00a:	9300      	str	r3, [sp, #0]
 800b00c:	4622      	mov	r2, r4
 800b00e:	4b11      	ldr	r3, [pc, #68]	; (800b054 <_svfiprintf_r+0x1ec>)
 800b010:	a904      	add	r1, sp, #16
 800b012:	4640      	mov	r0, r8
 800b014:	f3af 8000 	nop.w
 800b018:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b01c:	4681      	mov	r9, r0
 800b01e:	d1d6      	bne.n	800afce <_svfiprintf_r+0x166>
 800b020:	89a3      	ldrh	r3, [r4, #12]
 800b022:	065b      	lsls	r3, r3, #25
 800b024:	f53f af35 	bmi.w	800ae92 <_svfiprintf_r+0x2a>
 800b028:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b02a:	b01d      	add	sp, #116	; 0x74
 800b02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b030:	ab03      	add	r3, sp, #12
 800b032:	9300      	str	r3, [sp, #0]
 800b034:	4622      	mov	r2, r4
 800b036:	4b07      	ldr	r3, [pc, #28]	; (800b054 <_svfiprintf_r+0x1ec>)
 800b038:	a904      	add	r1, sp, #16
 800b03a:	4640      	mov	r0, r8
 800b03c:	f000 f882 	bl	800b144 <_printf_i>
 800b040:	e7ea      	b.n	800b018 <_svfiprintf_r+0x1b0>
 800b042:	bf00      	nop
 800b044:	0800b4a4 	.word	0x0800b4a4
 800b048:	0800b4aa 	.word	0x0800b4aa
 800b04c:	0800b4ae 	.word	0x0800b4ae
 800b050:	00000000 	.word	0x00000000
 800b054:	0800adb5 	.word	0x0800adb5

0800b058 <_printf_common>:
 800b058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b05c:	4691      	mov	r9, r2
 800b05e:	461f      	mov	r7, r3
 800b060:	688a      	ldr	r2, [r1, #8]
 800b062:	690b      	ldr	r3, [r1, #16]
 800b064:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b068:	4293      	cmp	r3, r2
 800b06a:	bfb8      	it	lt
 800b06c:	4613      	movlt	r3, r2
 800b06e:	f8c9 3000 	str.w	r3, [r9]
 800b072:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b076:	4606      	mov	r6, r0
 800b078:	460c      	mov	r4, r1
 800b07a:	b112      	cbz	r2, 800b082 <_printf_common+0x2a>
 800b07c:	3301      	adds	r3, #1
 800b07e:	f8c9 3000 	str.w	r3, [r9]
 800b082:	6823      	ldr	r3, [r4, #0]
 800b084:	0699      	lsls	r1, r3, #26
 800b086:	bf42      	ittt	mi
 800b088:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b08c:	3302      	addmi	r3, #2
 800b08e:	f8c9 3000 	strmi.w	r3, [r9]
 800b092:	6825      	ldr	r5, [r4, #0]
 800b094:	f015 0506 	ands.w	r5, r5, #6
 800b098:	d107      	bne.n	800b0aa <_printf_common+0x52>
 800b09a:	f104 0a19 	add.w	sl, r4, #25
 800b09e:	68e3      	ldr	r3, [r4, #12]
 800b0a0:	f8d9 2000 	ldr.w	r2, [r9]
 800b0a4:	1a9b      	subs	r3, r3, r2
 800b0a6:	42ab      	cmp	r3, r5
 800b0a8:	dc28      	bgt.n	800b0fc <_printf_common+0xa4>
 800b0aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b0ae:	6822      	ldr	r2, [r4, #0]
 800b0b0:	3300      	adds	r3, #0
 800b0b2:	bf18      	it	ne
 800b0b4:	2301      	movne	r3, #1
 800b0b6:	0692      	lsls	r2, r2, #26
 800b0b8:	d42d      	bmi.n	800b116 <_printf_common+0xbe>
 800b0ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b0be:	4639      	mov	r1, r7
 800b0c0:	4630      	mov	r0, r6
 800b0c2:	47c0      	blx	r8
 800b0c4:	3001      	adds	r0, #1
 800b0c6:	d020      	beq.n	800b10a <_printf_common+0xb2>
 800b0c8:	6823      	ldr	r3, [r4, #0]
 800b0ca:	68e5      	ldr	r5, [r4, #12]
 800b0cc:	f8d9 2000 	ldr.w	r2, [r9]
 800b0d0:	f003 0306 	and.w	r3, r3, #6
 800b0d4:	2b04      	cmp	r3, #4
 800b0d6:	bf08      	it	eq
 800b0d8:	1aad      	subeq	r5, r5, r2
 800b0da:	68a3      	ldr	r3, [r4, #8]
 800b0dc:	6922      	ldr	r2, [r4, #16]
 800b0de:	bf0c      	ite	eq
 800b0e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0e4:	2500      	movne	r5, #0
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	bfc4      	itt	gt
 800b0ea:	1a9b      	subgt	r3, r3, r2
 800b0ec:	18ed      	addgt	r5, r5, r3
 800b0ee:	f04f 0900 	mov.w	r9, #0
 800b0f2:	341a      	adds	r4, #26
 800b0f4:	454d      	cmp	r5, r9
 800b0f6:	d11a      	bne.n	800b12e <_printf_common+0xd6>
 800b0f8:	2000      	movs	r0, #0
 800b0fa:	e008      	b.n	800b10e <_printf_common+0xb6>
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	4652      	mov	r2, sl
 800b100:	4639      	mov	r1, r7
 800b102:	4630      	mov	r0, r6
 800b104:	47c0      	blx	r8
 800b106:	3001      	adds	r0, #1
 800b108:	d103      	bne.n	800b112 <_printf_common+0xba>
 800b10a:	f04f 30ff 	mov.w	r0, #4294967295
 800b10e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b112:	3501      	adds	r5, #1
 800b114:	e7c3      	b.n	800b09e <_printf_common+0x46>
 800b116:	18e1      	adds	r1, r4, r3
 800b118:	1c5a      	adds	r2, r3, #1
 800b11a:	2030      	movs	r0, #48	; 0x30
 800b11c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b120:	4422      	add	r2, r4
 800b122:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b126:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b12a:	3302      	adds	r3, #2
 800b12c:	e7c5      	b.n	800b0ba <_printf_common+0x62>
 800b12e:	2301      	movs	r3, #1
 800b130:	4622      	mov	r2, r4
 800b132:	4639      	mov	r1, r7
 800b134:	4630      	mov	r0, r6
 800b136:	47c0      	blx	r8
 800b138:	3001      	adds	r0, #1
 800b13a:	d0e6      	beq.n	800b10a <_printf_common+0xb2>
 800b13c:	f109 0901 	add.w	r9, r9, #1
 800b140:	e7d8      	b.n	800b0f4 <_printf_common+0x9c>
	...

0800b144 <_printf_i>:
 800b144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b148:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b14c:	460c      	mov	r4, r1
 800b14e:	7e09      	ldrb	r1, [r1, #24]
 800b150:	b085      	sub	sp, #20
 800b152:	296e      	cmp	r1, #110	; 0x6e
 800b154:	4617      	mov	r7, r2
 800b156:	4606      	mov	r6, r0
 800b158:	4698      	mov	r8, r3
 800b15a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b15c:	f000 80b3 	beq.w	800b2c6 <_printf_i+0x182>
 800b160:	d822      	bhi.n	800b1a8 <_printf_i+0x64>
 800b162:	2963      	cmp	r1, #99	; 0x63
 800b164:	d036      	beq.n	800b1d4 <_printf_i+0x90>
 800b166:	d80a      	bhi.n	800b17e <_printf_i+0x3a>
 800b168:	2900      	cmp	r1, #0
 800b16a:	f000 80b9 	beq.w	800b2e0 <_printf_i+0x19c>
 800b16e:	2958      	cmp	r1, #88	; 0x58
 800b170:	f000 8083 	beq.w	800b27a <_printf_i+0x136>
 800b174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b178:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b17c:	e032      	b.n	800b1e4 <_printf_i+0xa0>
 800b17e:	2964      	cmp	r1, #100	; 0x64
 800b180:	d001      	beq.n	800b186 <_printf_i+0x42>
 800b182:	2969      	cmp	r1, #105	; 0x69
 800b184:	d1f6      	bne.n	800b174 <_printf_i+0x30>
 800b186:	6820      	ldr	r0, [r4, #0]
 800b188:	6813      	ldr	r3, [r2, #0]
 800b18a:	0605      	lsls	r5, r0, #24
 800b18c:	f103 0104 	add.w	r1, r3, #4
 800b190:	d52a      	bpl.n	800b1e8 <_printf_i+0xa4>
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	6011      	str	r1, [r2, #0]
 800b196:	2b00      	cmp	r3, #0
 800b198:	da03      	bge.n	800b1a2 <_printf_i+0x5e>
 800b19a:	222d      	movs	r2, #45	; 0x2d
 800b19c:	425b      	negs	r3, r3
 800b19e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b1a2:	486f      	ldr	r0, [pc, #444]	; (800b360 <_printf_i+0x21c>)
 800b1a4:	220a      	movs	r2, #10
 800b1a6:	e039      	b.n	800b21c <_printf_i+0xd8>
 800b1a8:	2973      	cmp	r1, #115	; 0x73
 800b1aa:	f000 809d 	beq.w	800b2e8 <_printf_i+0x1a4>
 800b1ae:	d808      	bhi.n	800b1c2 <_printf_i+0x7e>
 800b1b0:	296f      	cmp	r1, #111	; 0x6f
 800b1b2:	d020      	beq.n	800b1f6 <_printf_i+0xb2>
 800b1b4:	2970      	cmp	r1, #112	; 0x70
 800b1b6:	d1dd      	bne.n	800b174 <_printf_i+0x30>
 800b1b8:	6823      	ldr	r3, [r4, #0]
 800b1ba:	f043 0320 	orr.w	r3, r3, #32
 800b1be:	6023      	str	r3, [r4, #0]
 800b1c0:	e003      	b.n	800b1ca <_printf_i+0x86>
 800b1c2:	2975      	cmp	r1, #117	; 0x75
 800b1c4:	d017      	beq.n	800b1f6 <_printf_i+0xb2>
 800b1c6:	2978      	cmp	r1, #120	; 0x78
 800b1c8:	d1d4      	bne.n	800b174 <_printf_i+0x30>
 800b1ca:	2378      	movs	r3, #120	; 0x78
 800b1cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b1d0:	4864      	ldr	r0, [pc, #400]	; (800b364 <_printf_i+0x220>)
 800b1d2:	e055      	b.n	800b280 <_printf_i+0x13c>
 800b1d4:	6813      	ldr	r3, [r2, #0]
 800b1d6:	1d19      	adds	r1, r3, #4
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	6011      	str	r1, [r2, #0]
 800b1dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	e08c      	b.n	800b302 <_printf_i+0x1be>
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	6011      	str	r1, [r2, #0]
 800b1ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b1f0:	bf18      	it	ne
 800b1f2:	b21b      	sxthne	r3, r3
 800b1f4:	e7cf      	b.n	800b196 <_printf_i+0x52>
 800b1f6:	6813      	ldr	r3, [r2, #0]
 800b1f8:	6825      	ldr	r5, [r4, #0]
 800b1fa:	1d18      	adds	r0, r3, #4
 800b1fc:	6010      	str	r0, [r2, #0]
 800b1fe:	0628      	lsls	r0, r5, #24
 800b200:	d501      	bpl.n	800b206 <_printf_i+0xc2>
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	e002      	b.n	800b20c <_printf_i+0xc8>
 800b206:	0668      	lsls	r0, r5, #25
 800b208:	d5fb      	bpl.n	800b202 <_printf_i+0xbe>
 800b20a:	881b      	ldrh	r3, [r3, #0]
 800b20c:	4854      	ldr	r0, [pc, #336]	; (800b360 <_printf_i+0x21c>)
 800b20e:	296f      	cmp	r1, #111	; 0x6f
 800b210:	bf14      	ite	ne
 800b212:	220a      	movne	r2, #10
 800b214:	2208      	moveq	r2, #8
 800b216:	2100      	movs	r1, #0
 800b218:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b21c:	6865      	ldr	r5, [r4, #4]
 800b21e:	60a5      	str	r5, [r4, #8]
 800b220:	2d00      	cmp	r5, #0
 800b222:	f2c0 8095 	blt.w	800b350 <_printf_i+0x20c>
 800b226:	6821      	ldr	r1, [r4, #0]
 800b228:	f021 0104 	bic.w	r1, r1, #4
 800b22c:	6021      	str	r1, [r4, #0]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d13d      	bne.n	800b2ae <_printf_i+0x16a>
 800b232:	2d00      	cmp	r5, #0
 800b234:	f040 808e 	bne.w	800b354 <_printf_i+0x210>
 800b238:	4665      	mov	r5, ip
 800b23a:	2a08      	cmp	r2, #8
 800b23c:	d10b      	bne.n	800b256 <_printf_i+0x112>
 800b23e:	6823      	ldr	r3, [r4, #0]
 800b240:	07db      	lsls	r3, r3, #31
 800b242:	d508      	bpl.n	800b256 <_printf_i+0x112>
 800b244:	6923      	ldr	r3, [r4, #16]
 800b246:	6862      	ldr	r2, [r4, #4]
 800b248:	429a      	cmp	r2, r3
 800b24a:	bfde      	ittt	le
 800b24c:	2330      	movle	r3, #48	; 0x30
 800b24e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b252:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b256:	ebac 0305 	sub.w	r3, ip, r5
 800b25a:	6123      	str	r3, [r4, #16]
 800b25c:	f8cd 8000 	str.w	r8, [sp]
 800b260:	463b      	mov	r3, r7
 800b262:	aa03      	add	r2, sp, #12
 800b264:	4621      	mov	r1, r4
 800b266:	4630      	mov	r0, r6
 800b268:	f7ff fef6 	bl	800b058 <_printf_common>
 800b26c:	3001      	adds	r0, #1
 800b26e:	d14d      	bne.n	800b30c <_printf_i+0x1c8>
 800b270:	f04f 30ff 	mov.w	r0, #4294967295
 800b274:	b005      	add	sp, #20
 800b276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b27a:	4839      	ldr	r0, [pc, #228]	; (800b360 <_printf_i+0x21c>)
 800b27c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b280:	6813      	ldr	r3, [r2, #0]
 800b282:	6821      	ldr	r1, [r4, #0]
 800b284:	1d1d      	adds	r5, r3, #4
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	6015      	str	r5, [r2, #0]
 800b28a:	060a      	lsls	r2, r1, #24
 800b28c:	d50b      	bpl.n	800b2a6 <_printf_i+0x162>
 800b28e:	07ca      	lsls	r2, r1, #31
 800b290:	bf44      	itt	mi
 800b292:	f041 0120 	orrmi.w	r1, r1, #32
 800b296:	6021      	strmi	r1, [r4, #0]
 800b298:	b91b      	cbnz	r3, 800b2a2 <_printf_i+0x15e>
 800b29a:	6822      	ldr	r2, [r4, #0]
 800b29c:	f022 0220 	bic.w	r2, r2, #32
 800b2a0:	6022      	str	r2, [r4, #0]
 800b2a2:	2210      	movs	r2, #16
 800b2a4:	e7b7      	b.n	800b216 <_printf_i+0xd2>
 800b2a6:	064d      	lsls	r5, r1, #25
 800b2a8:	bf48      	it	mi
 800b2aa:	b29b      	uxthmi	r3, r3
 800b2ac:	e7ef      	b.n	800b28e <_printf_i+0x14a>
 800b2ae:	4665      	mov	r5, ip
 800b2b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b2b4:	fb02 3311 	mls	r3, r2, r1, r3
 800b2b8:	5cc3      	ldrb	r3, [r0, r3]
 800b2ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b2be:	460b      	mov	r3, r1
 800b2c0:	2900      	cmp	r1, #0
 800b2c2:	d1f5      	bne.n	800b2b0 <_printf_i+0x16c>
 800b2c4:	e7b9      	b.n	800b23a <_printf_i+0xf6>
 800b2c6:	6813      	ldr	r3, [r2, #0]
 800b2c8:	6825      	ldr	r5, [r4, #0]
 800b2ca:	6961      	ldr	r1, [r4, #20]
 800b2cc:	1d18      	adds	r0, r3, #4
 800b2ce:	6010      	str	r0, [r2, #0]
 800b2d0:	0628      	lsls	r0, r5, #24
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	d501      	bpl.n	800b2da <_printf_i+0x196>
 800b2d6:	6019      	str	r1, [r3, #0]
 800b2d8:	e002      	b.n	800b2e0 <_printf_i+0x19c>
 800b2da:	066a      	lsls	r2, r5, #25
 800b2dc:	d5fb      	bpl.n	800b2d6 <_printf_i+0x192>
 800b2de:	8019      	strh	r1, [r3, #0]
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	6123      	str	r3, [r4, #16]
 800b2e4:	4665      	mov	r5, ip
 800b2e6:	e7b9      	b.n	800b25c <_printf_i+0x118>
 800b2e8:	6813      	ldr	r3, [r2, #0]
 800b2ea:	1d19      	adds	r1, r3, #4
 800b2ec:	6011      	str	r1, [r2, #0]
 800b2ee:	681d      	ldr	r5, [r3, #0]
 800b2f0:	6862      	ldr	r2, [r4, #4]
 800b2f2:	2100      	movs	r1, #0
 800b2f4:	4628      	mov	r0, r5
 800b2f6:	f7f4 ff73 	bl	80001e0 <memchr>
 800b2fa:	b108      	cbz	r0, 800b300 <_printf_i+0x1bc>
 800b2fc:	1b40      	subs	r0, r0, r5
 800b2fe:	6060      	str	r0, [r4, #4]
 800b300:	6863      	ldr	r3, [r4, #4]
 800b302:	6123      	str	r3, [r4, #16]
 800b304:	2300      	movs	r3, #0
 800b306:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b30a:	e7a7      	b.n	800b25c <_printf_i+0x118>
 800b30c:	6923      	ldr	r3, [r4, #16]
 800b30e:	462a      	mov	r2, r5
 800b310:	4639      	mov	r1, r7
 800b312:	4630      	mov	r0, r6
 800b314:	47c0      	blx	r8
 800b316:	3001      	adds	r0, #1
 800b318:	d0aa      	beq.n	800b270 <_printf_i+0x12c>
 800b31a:	6823      	ldr	r3, [r4, #0]
 800b31c:	079b      	lsls	r3, r3, #30
 800b31e:	d413      	bmi.n	800b348 <_printf_i+0x204>
 800b320:	68e0      	ldr	r0, [r4, #12]
 800b322:	9b03      	ldr	r3, [sp, #12]
 800b324:	4298      	cmp	r0, r3
 800b326:	bfb8      	it	lt
 800b328:	4618      	movlt	r0, r3
 800b32a:	e7a3      	b.n	800b274 <_printf_i+0x130>
 800b32c:	2301      	movs	r3, #1
 800b32e:	464a      	mov	r2, r9
 800b330:	4639      	mov	r1, r7
 800b332:	4630      	mov	r0, r6
 800b334:	47c0      	blx	r8
 800b336:	3001      	adds	r0, #1
 800b338:	d09a      	beq.n	800b270 <_printf_i+0x12c>
 800b33a:	3501      	adds	r5, #1
 800b33c:	68e3      	ldr	r3, [r4, #12]
 800b33e:	9a03      	ldr	r2, [sp, #12]
 800b340:	1a9b      	subs	r3, r3, r2
 800b342:	42ab      	cmp	r3, r5
 800b344:	dcf2      	bgt.n	800b32c <_printf_i+0x1e8>
 800b346:	e7eb      	b.n	800b320 <_printf_i+0x1dc>
 800b348:	2500      	movs	r5, #0
 800b34a:	f104 0919 	add.w	r9, r4, #25
 800b34e:	e7f5      	b.n	800b33c <_printf_i+0x1f8>
 800b350:	2b00      	cmp	r3, #0
 800b352:	d1ac      	bne.n	800b2ae <_printf_i+0x16a>
 800b354:	7803      	ldrb	r3, [r0, #0]
 800b356:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b35a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b35e:	e76c      	b.n	800b23a <_printf_i+0xf6>
 800b360:	0800b4b5 	.word	0x0800b4b5
 800b364:	0800b4c6 	.word	0x0800b4c6

0800b368 <memcpy>:
 800b368:	b510      	push	{r4, lr}
 800b36a:	1e43      	subs	r3, r0, #1
 800b36c:	440a      	add	r2, r1
 800b36e:	4291      	cmp	r1, r2
 800b370:	d100      	bne.n	800b374 <memcpy+0xc>
 800b372:	bd10      	pop	{r4, pc}
 800b374:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b378:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b37c:	e7f7      	b.n	800b36e <memcpy+0x6>

0800b37e <memmove>:
 800b37e:	4288      	cmp	r0, r1
 800b380:	b510      	push	{r4, lr}
 800b382:	eb01 0302 	add.w	r3, r1, r2
 800b386:	d807      	bhi.n	800b398 <memmove+0x1a>
 800b388:	1e42      	subs	r2, r0, #1
 800b38a:	4299      	cmp	r1, r3
 800b38c:	d00a      	beq.n	800b3a4 <memmove+0x26>
 800b38e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b392:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b396:	e7f8      	b.n	800b38a <memmove+0xc>
 800b398:	4283      	cmp	r3, r0
 800b39a:	d9f5      	bls.n	800b388 <memmove+0xa>
 800b39c:	1881      	adds	r1, r0, r2
 800b39e:	1ad2      	subs	r2, r2, r3
 800b3a0:	42d3      	cmn	r3, r2
 800b3a2:	d100      	bne.n	800b3a6 <memmove+0x28>
 800b3a4:	bd10      	pop	{r4, pc}
 800b3a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b3aa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b3ae:	e7f7      	b.n	800b3a0 <memmove+0x22>

0800b3b0 <_realloc_r>:
 800b3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b2:	4607      	mov	r7, r0
 800b3b4:	4614      	mov	r4, r2
 800b3b6:	460e      	mov	r6, r1
 800b3b8:	b921      	cbnz	r1, 800b3c4 <_realloc_r+0x14>
 800b3ba:	4611      	mov	r1, r2
 800b3bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b3c0:	f7ff bc6c 	b.w	800ac9c <_malloc_r>
 800b3c4:	b922      	cbnz	r2, 800b3d0 <_realloc_r+0x20>
 800b3c6:	f7ff fc1b 	bl	800ac00 <_free_r>
 800b3ca:	4625      	mov	r5, r4
 800b3cc:	4628      	mov	r0, r5
 800b3ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3d0:	f000 f814 	bl	800b3fc <_malloc_usable_size_r>
 800b3d4:	42a0      	cmp	r0, r4
 800b3d6:	d20f      	bcs.n	800b3f8 <_realloc_r+0x48>
 800b3d8:	4621      	mov	r1, r4
 800b3da:	4638      	mov	r0, r7
 800b3dc:	f7ff fc5e 	bl	800ac9c <_malloc_r>
 800b3e0:	4605      	mov	r5, r0
 800b3e2:	2800      	cmp	r0, #0
 800b3e4:	d0f2      	beq.n	800b3cc <_realloc_r+0x1c>
 800b3e6:	4631      	mov	r1, r6
 800b3e8:	4622      	mov	r2, r4
 800b3ea:	f7ff ffbd 	bl	800b368 <memcpy>
 800b3ee:	4631      	mov	r1, r6
 800b3f0:	4638      	mov	r0, r7
 800b3f2:	f7ff fc05 	bl	800ac00 <_free_r>
 800b3f6:	e7e9      	b.n	800b3cc <_realloc_r+0x1c>
 800b3f8:	4635      	mov	r5, r6
 800b3fa:	e7e7      	b.n	800b3cc <_realloc_r+0x1c>

0800b3fc <_malloc_usable_size_r>:
 800b3fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b400:	1f18      	subs	r0, r3, #4
 800b402:	2b00      	cmp	r3, #0
 800b404:	bfbc      	itt	lt
 800b406:	580b      	ldrlt	r3, [r1, r0]
 800b408:	18c0      	addlt	r0, r0, r3
 800b40a:	4770      	bx	lr

0800b40c <_init>:
 800b40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b40e:	bf00      	nop
 800b410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b412:	bc08      	pop	{r3}
 800b414:	469e      	mov	lr, r3
 800b416:	4770      	bx	lr

0800b418 <_fini>:
 800b418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b41a:	bf00      	nop
 800b41c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b41e:	bc08      	pop	{r3}
 800b420:	469e      	mov	lr, r3
 800b422:	4770      	bx	lr
