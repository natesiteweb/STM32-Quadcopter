
f4Quadcopter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f80  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008108  08008108  00018108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008168  08008168  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008168  08008168  00018168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008170  08008170  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008170  08008170  00018170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008174  08008174  00018174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a94  200001e4  0800835c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c78  0800835c  00021c78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b5e9  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a8f  00000000  00000000  0003b7fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001480  00000000  00000000  0003f290  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012c8  00000000  00000000  00040710  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023cc9  00000000  00000000  000419d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014714  00000000  00000000  000656a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8a4d  00000000  00000000  00079db5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00142802  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000561c  00000000  00000000  00142880  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e4 	.word	0x200001e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080080f0 	.word	0x080080f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e8 	.word	0x200001e8
 80001c4:	080080f0 	.word	0x080080f0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08a      	sub	sp, #40	; 0x28
 80004cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 0314 	add.w	r3, r7, #20
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	613b      	str	r3, [r7, #16]
 80004e2:	4b31      	ldr	r3, [pc, #196]	; (80005a8 <MX_GPIO_Init+0xe0>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	4a30      	ldr	r2, [pc, #192]	; (80005a8 <MX_GPIO_Init+0xe0>)
 80004e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004ec:	6313      	str	r3, [r2, #48]	; 0x30
 80004ee:	4b2e      	ldr	r3, [pc, #184]	; (80005a8 <MX_GPIO_Init+0xe0>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004f6:	613b      	str	r3, [r7, #16]
 80004f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	4b2a      	ldr	r3, [pc, #168]	; (80005a8 <MX_GPIO_Init+0xe0>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	4a29      	ldr	r2, [pc, #164]	; (80005a8 <MX_GPIO_Init+0xe0>)
 8000504:	f043 0304 	orr.w	r3, r3, #4
 8000508:	6313      	str	r3, [r2, #48]	; 0x30
 800050a:	4b27      	ldr	r3, [pc, #156]	; (80005a8 <MX_GPIO_Init+0xe0>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	f003 0304 	and.w	r3, r3, #4
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	4b23      	ldr	r3, [pc, #140]	; (80005a8 <MX_GPIO_Init+0xe0>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a22      	ldr	r2, [pc, #136]	; (80005a8 <MX_GPIO_Init+0xe0>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
 8000526:	4b20      	ldr	r3, [pc, #128]	; (80005a8 <MX_GPIO_Init+0xe0>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	4b1c      	ldr	r3, [pc, #112]	; (80005a8 <MX_GPIO_Init+0xe0>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a1b      	ldr	r2, [pc, #108]	; (80005a8 <MX_GPIO_Init+0xe0>)
 800053c:	f043 0302 	orr.w	r3, r3, #2
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <MX_GPIO_Init+0xe0>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0302 	and.w	r3, r3, #2
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	2106      	movs	r1, #6
 8000552:	4816      	ldr	r0, [pc, #88]	; (80005ac <MX_GPIO_Init+0xe4>)
 8000554:	f001 f8b0 	bl	80016b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800055e:	4814      	ldr	r0, [pc, #80]	; (80005b0 <MX_GPIO_Init+0xe8>)
 8000560:	f001 f8aa 	bl	80016b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000564:	2306      	movs	r3, #6
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000568:	2301      	movs	r3, #1
 800056a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000570:	2300      	movs	r3, #0
 8000572:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	4619      	mov	r1, r3
 800057a:	480c      	ldr	r0, [pc, #48]	; (80005ac <MX_GPIO_Init+0xe4>)
 800057c:	f000 ff02 	bl	8001384 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000580:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000586:	2301      	movs	r3, #1
 8000588:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	2300      	movs	r3, #0
 800058c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058e:	2300      	movs	r3, #0
 8000590:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	4619      	mov	r1, r3
 8000598:	4805      	ldr	r0, [pc, #20]	; (80005b0 <MX_GPIO_Init+0xe8>)
 800059a:	f000 fef3 	bl	8001384 <HAL_GPIO_Init>

}
 800059e:	bf00      	nop
 80005a0:	3728      	adds	r7, #40	; 0x28
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40023800 	.word	0x40023800
 80005ac:	40020800 	.word	0x40020800
 80005b0:	40020400 	.word	0x40020400

080005b4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80005b8:	4b12      	ldr	r3, [pc, #72]	; (8000604 <MX_I2C1_Init+0x50>)
 80005ba:	4a13      	ldr	r2, [pc, #76]	; (8000608 <MX_I2C1_Init+0x54>)
 80005bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80005be:	4b11      	ldr	r3, [pc, #68]	; (8000604 <MX_I2C1_Init+0x50>)
 80005c0:	4a12      	ldr	r2, [pc, #72]	; (800060c <MX_I2C1_Init+0x58>)
 80005c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005c4:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <MX_I2C1_Init+0x50>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005ca:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <MX_I2C1_Init+0x50>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005d0:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <MX_I2C1_Init+0x50>)
 80005d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005d8:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <MX_I2C1_Init+0x50>)
 80005da:	2200      	movs	r2, #0
 80005dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <MX_I2C1_Init+0x50>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005e4:	4b07      	ldr	r3, [pc, #28]	; (8000604 <MX_I2C1_Init+0x50>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005ea:	4b06      	ldr	r3, [pc, #24]	; (8000604 <MX_I2C1_Init+0x50>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005f0:	4804      	ldr	r0, [pc, #16]	; (8000604 <MX_I2C1_Init+0x50>)
 80005f2:	f001 f87b 	bl	80016ec <HAL_I2C_Init>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005fc:	f000 f958 	bl	80008b0 <Error_Handler>
  }

}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000210 	.word	0x20000210
 8000608:	40005400 	.word	0x40005400
 800060c:	00061a80 	.word	0x00061a80

08000610 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_I2C2_Init+0x50>)
 8000616:	4a13      	ldr	r2, [pc, #76]	; (8000664 <MX_I2C2_Init+0x54>)
 8000618:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_I2C2_Init+0x50>)
 800061c:	4a12      	ldr	r2, [pc, #72]	; (8000668 <MX_I2C2_Init+0x58>)
 800061e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_I2C2_Init+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_I2C2_Init+0x50>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_I2C2_Init+0x50>)
 800062e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000632:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <MX_I2C2_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_I2C2_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <MX_I2C2_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_I2C2_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <MX_I2C2_Init+0x50>)
 800064e:	f001 f84d 	bl	80016ec <HAL_I2C_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000658:	f000 f92a 	bl	80008b0 <Error_Handler>
  }

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000264 	.word	0x20000264
 8000664:	40005800 	.word	0x40005800
 8000668:	00061a80 	.word	0x00061a80

0800066c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08c      	sub	sp, #48	; 0x30
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000674:	f107 031c 	add.w	r3, r7, #28
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a32      	ldr	r2, [pc, #200]	; (8000754 <HAL_I2C_MspInit+0xe8>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d12c      	bne.n	80006e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	61bb      	str	r3, [r7, #24]
 8000692:	4b31      	ldr	r3, [pc, #196]	; (8000758 <HAL_I2C_MspInit+0xec>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a30      	ldr	r2, [pc, #192]	; (8000758 <HAL_I2C_MspInit+0xec>)
 8000698:	f043 0302 	orr.w	r3, r3, #2
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b2e      	ldr	r3, [pc, #184]	; (8000758 <HAL_I2C_MspInit+0xec>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0302 	and.w	r3, r3, #2
 80006a6:	61bb      	str	r3, [r7, #24]
 80006a8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006aa:	23c0      	movs	r3, #192	; 0xc0
 80006ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ae:	2312      	movs	r3, #18
 80006b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006b2:	2301      	movs	r3, #1
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b6:	2303      	movs	r3, #3
 80006b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006ba:	2304      	movs	r3, #4
 80006bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	4619      	mov	r1, r3
 80006c4:	4825      	ldr	r0, [pc, #148]	; (800075c <HAL_I2C_MspInit+0xf0>)
 80006c6:	f000 fe5d 	bl	8001384 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	4b22      	ldr	r3, [pc, #136]	; (8000758 <HAL_I2C_MspInit+0xec>)
 80006d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d2:	4a21      	ldr	r2, [pc, #132]	; (8000758 <HAL_I2C_MspInit+0xec>)
 80006d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006d8:	6413      	str	r3, [r2, #64]	; 0x40
 80006da:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <HAL_I2C_MspInit+0xec>)
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006e2:	617b      	str	r3, [r7, #20]
 80006e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80006e6:	e031      	b.n	800074c <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a1c      	ldr	r2, [pc, #112]	; (8000760 <HAL_I2C_MspInit+0xf4>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d12c      	bne.n	800074c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	4b18      	ldr	r3, [pc, #96]	; (8000758 <HAL_I2C_MspInit+0xec>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a17      	ldr	r2, [pc, #92]	; (8000758 <HAL_I2C_MspInit+0xec>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b15      	ldr	r3, [pc, #84]	; (8000758 <HAL_I2C_MspInit+0xec>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800070e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000714:	2312      	movs	r3, #18
 8000716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000718:	2301      	movs	r3, #1
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071c:	2303      	movs	r3, #3
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000720:	2304      	movs	r3, #4
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4619      	mov	r1, r3
 800072a:	480c      	ldr	r0, [pc, #48]	; (800075c <HAL_I2C_MspInit+0xf0>)
 800072c:	f000 fe2a 	bl	8001384 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	4b08      	ldr	r3, [pc, #32]	; (8000758 <HAL_I2C_MspInit+0xec>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	4a07      	ldr	r2, [pc, #28]	; (8000758 <HAL_I2C_MspInit+0xec>)
 800073a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800073e:	6413      	str	r3, [r2, #64]	; 0x40
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <HAL_I2C_MspInit+0xec>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	68fb      	ldr	r3, [r7, #12]
}
 800074c:	bf00      	nop
 800074e:	3730      	adds	r7, #48	; 0x30
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40005400 	.word	0x40005400
 8000758:	40023800 	.word	0x40023800
 800075c:	40020400 	.word	0x40020400
 8000760:	40005800 	.word	0x40005800

08000764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  uint8_t data[2] = "hi";
 800076a:	f646 1368 	movw	r3, #26984	; 0x6968
 800076e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000770:	f000 fc62 	bl	8001038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000774:	f000 f81a 	bl	80007ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000778:	f7ff fea6 	bl	80004c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800077c:	f7ff ff1a 	bl	80005b4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000780:	f7ff ff46 	bl	8000610 <MX_I2C2_Init>
  MX_RTC_Init();
 8000784:	f000 f89c 	bl	80008c0 <MX_RTC_Init>
  MX_TIM3_Init();
 8000788:	f000 f982 	bl	8000a90 <MX_TIM3_Init>
  MX_TIM5_Init();
 800078c:	f000 f9fa 	bl	8000b84 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000790:	f000 fa56 	bl	8000c40 <MX_TIM8_Init>
  MX_USB_DEVICE_Init();
 8000794:	f006 feb0 	bl	80074f8 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(10000);
 8000798:	f242 7010 	movw	r0, #10000	; 0x2710
 800079c:	f000 fcbe 	bl	800111c <HAL_Delay>
	  CDC_Transmit_FS(data, 2);
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	2102      	movs	r1, #2
 80007a4:	4618      	mov	r0, r3
 80007a6:	f006 ff65 	bl	8007674 <CDC_Transmit_FS>
	  HAL_Delay(10000);
 80007aa:	e7f5      	b.n	8000798 <main+0x34>

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b098      	sub	sp, #96	; 0x60
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007b6:	2230      	movs	r2, #48	; 0x30
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f007 fbd6 	bl	8007f6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	f107 031c 	add.w	r3, r7, #28
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b31      	ldr	r3, [pc, #196]	; (80008a8 <SystemClock_Config+0xfc>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	4a30      	ldr	r2, [pc, #192]	; (80008a8 <SystemClock_Config+0xfc>)
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ec:	6413      	str	r3, [r2, #64]	; 0x40
 80007ee:	4b2e      	ldr	r3, [pc, #184]	; (80008a8 <SystemClock_Config+0xfc>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <SystemClock_Config+0x100>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a2a      	ldr	r2, [pc, #168]	; (80008ac <SystemClock_Config+0x100>)
 8000804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000808:	6013      	str	r3, [r2, #0]
 800080a:	4b28      	ldr	r3, [pc, #160]	; (80008ac <SystemClock_Config+0x100>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000816:	2309      	movs	r3, #9
 8000818:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800081a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800081e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000820:	2301      	movs	r3, #1
 8000822:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000824:	2302      	movs	r3, #2
 8000826:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000828:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800082c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800082e:	2310      	movs	r3, #16
 8000830:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000832:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000836:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000838:	2302      	movs	r3, #2
 800083a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800083c:	2307      	movs	r3, #7
 800083e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000840:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000844:	4618      	mov	r0, r3
 8000846:	f002 fa0d 	bl	8002c64 <HAL_RCC_OscConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000850:	f000 f82e 	bl	80008b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000854:	230f      	movs	r3, #15
 8000856:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000858:	2302      	movs	r3, #2
 800085a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000860:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000866:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	2105      	movs	r1, #5
 8000872:	4618      	mov	r0, r3
 8000874:	f002 fc66 	bl	8003144 <HAL_RCC_ClockConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800087e:	f000 f817 	bl	80008b0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000882:	2302      	movs	r3, #2
 8000884:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000886:	f44f 7300 	mov.w	r3, #512	; 0x200
 800088a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	4618      	mov	r0, r3
 8000892:	f002 fe33 	bl	80034fc <HAL_RCCEx_PeriphCLKConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800089c:	f000 f808 	bl	80008b0 <Error_Handler>
  }
}
 80008a0:	bf00      	nop
 80008a2:	3760      	adds	r7, #96	; 0x60
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40007000 	.word	0x40007000

080008b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
	...

080008c0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_RTC_Init+0x44>)
 80008c6:	4a10      	ldr	r2, [pc, #64]	; (8000908 <MX_RTC_Init+0x48>)
 80008c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_RTC_Init+0x44>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_RTC_Init+0x44>)
 80008d2:	227f      	movs	r2, #127	; 0x7f
 80008d4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_RTC_Init+0x44>)
 80008d8:	22ff      	movs	r2, #255	; 0xff
 80008da:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_RTC_Init+0x44>)
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_RTC_Init+0x44>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_RTC_Init+0x44>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_RTC_Init+0x44>)
 80008f0:	f002 fee6 	bl	80036c0 <HAL_RTC_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80008fa:	f7ff ffd9 	bl	80008b0 <Error_Handler>
  }

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200002b8 	.word	0x200002b8
 8000908:	40002800 	.word	0x40002800

0800090c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a05      	ldr	r2, [pc, #20]	; (8000930 <HAL_RTC_MspInit+0x24>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d102      	bne.n	8000924 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800091e:	4b05      	ldr	r3, [pc, #20]	; (8000934 <HAL_RTC_MspInit+0x28>)
 8000920:	2201      	movs	r2, #1
 8000922:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	40002800 	.word	0x40002800
 8000934:	42470e3c 	.word	0x42470e3c

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <HAL_MspInit+0x4c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	4a0f      	ldr	r2, [pc, #60]	; (8000984 <HAL_MspInit+0x4c>)
 8000948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800094c:	6453      	str	r3, [r2, #68]	; 0x44
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <HAL_MspInit+0x4c>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_MspInit+0x4c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <HAL_MspInit+0x4c>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000968:	6413      	str	r3, [r2, #64]	; 0x40
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <HardFault_Handler+0x4>

0800099c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <MemManage_Handler+0x4>

080009a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <BusFault_Handler+0x4>

080009a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <UsageFault_Handler+0x4>

080009ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009dc:	f000 fb7e 	bl	80010dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <OTG_FS_IRQHandler+0x10>)
 80009ea:	f001 f907 	bl	8001bfc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	2000186c 	.word	0x2000186c

080009f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a00:	4a14      	ldr	r2, [pc, #80]	; (8000a54 <_sbrk+0x5c>)
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <_sbrk+0x60>)
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <_sbrk+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d102      	bne.n	8000a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <_sbrk+0x64>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <_sbrk+0x68>)
 8000a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d207      	bcs.n	8000a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a28:	f007 fa66 	bl	8007ef8 <__errno>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	230c      	movs	r3, #12
 8000a30:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295
 8000a36:	e009      	b.n	8000a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <_sbrk+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <_sbrk+0x64>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <_sbrk+0x64>)
 8000a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20020000 	.word	0x20020000
 8000a58:	00000400 	.word	0x00000400
 8000a5c:	20000200 	.word	0x20000200
 8000a60:	20001c78 	.word	0x20001c78

08000a64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <SystemInit+0x28>)
 8000a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6e:	4a07      	ldr	r2, [pc, #28]	; (8000a8c <SystemInit+0x28>)
 8000a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <SystemInit+0x28>)
 8000a7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a7e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <MX_TIM3_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a96:	f107 0320 	add.w	r3, r7, #32
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]
 8000aae:	615a      	str	r2, [r3, #20]
 8000ab0:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8000ab2:	4b32      	ldr	r3, [pc, #200]	; (8000b7c <MX_TIM3_Init+0xec>)
 8000ab4:	4a32      	ldr	r2, [pc, #200]	; (8000b80 <MX_TIM3_Init+0xf0>)
 8000ab6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ab8:	4b30      	ldr	r3, [pc, #192]	; (8000b7c <MX_TIM3_Init+0xec>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000abe:	4b2f      	ldr	r3, [pc, #188]	; (8000b7c <MX_TIM3_Init+0xec>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ac4:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <MX_TIM3_Init+0xec>)
 8000ac6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000acc:	4b2b      	ldr	r3, [pc, #172]	; (8000b7c <MX_TIM3_Init+0xec>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad2:	4b2a      	ldr	r3, [pc, #168]	; (8000b7c <MX_TIM3_Init+0xec>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000ad8:	4828      	ldr	r0, [pc, #160]	; (8000b7c <MX_TIM3_Init+0xec>)
 8000ada:	f002 ff01 	bl	80038e0 <HAL_TIM_OC_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000ae4:	f7ff fee4 	bl	80008b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000af0:	f107 0320 	add.w	r3, r7, #32
 8000af4:	4619      	mov	r1, r3
 8000af6:	4821      	ldr	r0, [pc, #132]	; (8000b7c <MX_TIM3_Init+0xec>)
 8000af8:	f003 fd10 	bl	800451c <HAL_TIMEx_MasterConfigSynchronization>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000b02:	f7ff fed5 	bl	80008b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	2200      	movs	r2, #0
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4817      	ldr	r0, [pc, #92]	; (8000b7c <MX_TIM3_Init+0xec>)
 8000b1e:	f002 ff35 	bl	800398c <HAL_TIM_OC_ConfigChannel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000b28:	f7ff fec2 	bl	80008b0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	2204      	movs	r2, #4
 8000b30:	4619      	mov	r1, r3
 8000b32:	4812      	ldr	r0, [pc, #72]	; (8000b7c <MX_TIM3_Init+0xec>)
 8000b34:	f002 ff2a 	bl	800398c <HAL_TIM_OC_ConfigChannel>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000b3e:	f7ff feb7 	bl	80008b0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2208      	movs	r2, #8
 8000b46:	4619      	mov	r1, r3
 8000b48:	480c      	ldr	r0, [pc, #48]	; (8000b7c <MX_TIM3_Init+0xec>)
 8000b4a:	f002 ff1f 	bl	800398c <HAL_TIM_OC_ConfigChannel>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000b54:	f7ff feac 	bl	80008b0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4807      	ldr	r0, [pc, #28]	; (8000b7c <MX_TIM3_Init+0xec>)
 8000b60:	f002 ff14 	bl	800398c <HAL_TIM_OC_ConfigChannel>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000b6a:	f7ff fea1 	bl	80008b0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8000b6e:	4803      	ldr	r0, [pc, #12]	; (8000b7c <MX_TIM3_Init+0xec>)
 8000b70:	f000 f9b6 	bl	8000ee0 <HAL_TIM_MspPostInit>

}
 8000b74:	bf00      	nop
 8000b76:	3728      	adds	r7, #40	; 0x28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000358 	.word	0x20000358
 8000b80:	40000400 	.word	0x40000400

08000b84 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b8a:	f107 0310 	add.w	r3, r7, #16
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b94:	463b      	mov	r3, r7
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]

  htim5.Instance = TIM5;
 8000ba0:	4b25      	ldr	r3, [pc, #148]	; (8000c38 <MX_TIM5_Init+0xb4>)
 8000ba2:	4a26      	ldr	r2, [pc, #152]	; (8000c3c <MX_TIM5_Init+0xb8>)
 8000ba4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000ba6:	4b24      	ldr	r3, [pc, #144]	; (8000c38 <MX_TIM5_Init+0xb4>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bac:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <MX_TIM5_Init+0xb4>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000bb2:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <MX_TIM5_Init+0xb4>)
 8000bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bba:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <MX_TIM5_Init+0xb4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc0:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <MX_TIM5_Init+0xb4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000bc6:	481c      	ldr	r0, [pc, #112]	; (8000c38 <MX_TIM5_Init+0xb4>)
 8000bc8:	f002 feb5 	bl	8003936 <HAL_TIM_IC_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000bd2:	f7ff fe6d 	bl	80008b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000bde:	f107 0310 	add.w	r3, r7, #16
 8000be2:	4619      	mov	r1, r3
 8000be4:	4814      	ldr	r0, [pc, #80]	; (8000c38 <MX_TIM5_Init+0xb4>)
 8000be6:	f003 fc99 	bl	800451c <HAL_TIMEx_MasterConfigSynchronization>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000bf0:	f7ff fe5e 	bl	80008b0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c04:	463b      	mov	r3, r7
 8000c06:	2200      	movs	r2, #0
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480b      	ldr	r0, [pc, #44]	; (8000c38 <MX_TIM5_Init+0xb4>)
 8000c0c:	f002 ff1e 	bl	8003a4c <HAL_TIM_IC_ConfigChannel>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8000c16:	f7ff fe4b 	bl	80008b0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	2204      	movs	r2, #4
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4805      	ldr	r0, [pc, #20]	; (8000c38 <MX_TIM5_Init+0xb4>)
 8000c22:	f002 ff13 	bl	8003a4c <HAL_TIM_IC_ConfigChannel>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM5_Init+0xac>
  {
    Error_Handler();
 8000c2c:	f7ff fe40 	bl	80008b0 <Error_Handler>
  }

}
 8000c30:	bf00      	nop
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000318 	.word	0x20000318
 8000c3c:	40000c00 	.word	0x40000c00

08000c40 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b096      	sub	sp, #88	; 0x58
 8000c44:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	611a      	str	r2, [r3, #16]
 8000c6e:	615a      	str	r2, [r3, #20]
 8000c70:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	2220      	movs	r2, #32
 8000c76:	2100      	movs	r1, #0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f007 f977 	bl	8007f6c <memset>

  htim8.Instance = TIM8;
 8000c7e:	4b50      	ldr	r3, [pc, #320]	; (8000dc0 <MX_TIM8_Init+0x180>)
 8000c80:	4a50      	ldr	r2, [pc, #320]	; (8000dc4 <MX_TIM8_Init+0x184>)
 8000c82:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000c84:	4b4e      	ldr	r3, [pc, #312]	; (8000dc0 <MX_TIM8_Init+0x180>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8a:	4b4d      	ldr	r3, [pc, #308]	; (8000dc0 <MX_TIM8_Init+0x180>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000c90:	4b4b      	ldr	r3, [pc, #300]	; (8000dc0 <MX_TIM8_Init+0x180>)
 8000c92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c96:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c98:	4b49      	ldr	r3, [pc, #292]	; (8000dc0 <MX_TIM8_Init+0x180>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000c9e:	4b48      	ldr	r3, [pc, #288]	; (8000dc0 <MX_TIM8_Init+0x180>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca4:	4b46      	ldr	r3, [pc, #280]	; (8000dc0 <MX_TIM8_Init+0x180>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000caa:	4845      	ldr	r0, [pc, #276]	; (8000dc0 <MX_TIM8_Init+0x180>)
 8000cac:	f002 fded 	bl	800388a <HAL_TIM_Base_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000cb6:	f7ff fdfb 	bl	80008b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cbe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000cc0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	483e      	ldr	r0, [pc, #248]	; (8000dc0 <MX_TIM8_Init+0x180>)
 8000cc8:	f002 ff5c 	bl	8003b84 <HAL_TIM_ConfigClockSource>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000cd2:	f7ff fded 	bl	80008b0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8000cd6:	483a      	ldr	r0, [pc, #232]	; (8000dc0 <MX_TIM8_Init+0x180>)
 8000cd8:	f002 fe02 	bl	80038e0 <HAL_TIM_OC_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000ce2:	f7ff fde5 	bl	80008b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000cee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4832      	ldr	r0, [pc, #200]	; (8000dc0 <MX_TIM8_Init+0x180>)
 8000cf6:	f003 fc11 	bl	800451c <HAL_TIMEx_MasterConfigSynchronization>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000d00:	f7ff fdd6 	bl	80008b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000d04:	2300      	movs	r3, #0
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d10:	2300      	movs	r3, #0
 8000d12:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d24:	2200      	movs	r2, #0
 8000d26:	4619      	mov	r1, r3
 8000d28:	4825      	ldr	r0, [pc, #148]	; (8000dc0 <MX_TIM8_Init+0x180>)
 8000d2a:	f002 fe2f 	bl	800398c <HAL_TIM_OC_ConfigChannel>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000d34:	f7ff fdbc 	bl	80008b0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3c:	2204      	movs	r2, #4
 8000d3e:	4619      	mov	r1, r3
 8000d40:	481f      	ldr	r0, [pc, #124]	; (8000dc0 <MX_TIM8_Init+0x180>)
 8000d42:	f002 fe23 	bl	800398c <HAL_TIM_OC_ConfigChannel>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000d4c:	f7ff fdb0 	bl	80008b0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d54:	2208      	movs	r2, #8
 8000d56:	4619      	mov	r1, r3
 8000d58:	4819      	ldr	r0, [pc, #100]	; (8000dc0 <MX_TIM8_Init+0x180>)
 8000d5a:	f002 fe17 	bl	800398c <HAL_TIM_OC_ConfigChannel>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8000d64:	f7ff fda4 	bl	80008b0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6c:	220c      	movs	r2, #12
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4813      	ldr	r0, [pc, #76]	; (8000dc0 <MX_TIM8_Init+0x180>)
 8000d72:	f002 fe0b 	bl	800398c <HAL_TIM_OC_ConfigChannel>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8000d7c:	f7ff fd98 	bl	80008b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d98:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	4619      	mov	r1, r3
 8000da2:	4807      	ldr	r0, [pc, #28]	; (8000dc0 <MX_TIM8_Init+0x180>)
 8000da4:	f003 fc36 	bl	8004614 <HAL_TIMEx_ConfigBreakDeadTime>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8000dae:	f7ff fd7f 	bl	80008b0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8000db2:	4803      	ldr	r0, [pc, #12]	; (8000dc0 <MX_TIM8_Init+0x180>)
 8000db4:	f000 f894 	bl	8000ee0 <HAL_TIM_MspPostInit>

}
 8000db8:	bf00      	nop
 8000dba:	3758      	adds	r7, #88	; 0x58
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	200002d8 	.word	0x200002d8
 8000dc4:	40010400 	.word	0x40010400

08000dc8 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM3)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <HAL_TIM_OC_MspInit+0x3c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d10d      	bne.n	8000df6 <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <HAL_TIM_OC_MspInit+0x40>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	4a09      	ldr	r2, [pc, #36]	; (8000e08 <HAL_TIM_OC_MspInit+0x40>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <HAL_TIM_OC_MspInit+0x40>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000df6:	bf00      	nop
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	40000400 	.word	0x40000400
 8000e08:	40023800 	.word	0x40023800

08000e0c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM5)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a19      	ldr	r2, [pc, #100]	; (8000e90 <HAL_TIM_IC_MspInit+0x84>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d12b      	bne.n	8000e86 <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <HAL_TIM_IC_MspInit+0x88>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	4a17      	ldr	r2, [pc, #92]	; (8000e94 <HAL_TIM_IC_MspInit+0x88>)
 8000e38:	f043 0308 	orr.w	r3, r3, #8
 8000e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_TIM_IC_MspInit+0x88>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	f003 0308 	and.w	r3, r3, #8
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <HAL_TIM_IC_MspInit+0x88>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a10      	ldr	r2, [pc, #64]	; (8000e94 <HAL_TIM_IC_MspInit+0x88>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <HAL_TIM_IC_MspInit+0x88>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e66:	2303      	movs	r3, #3
 8000e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e76:	2302      	movs	r3, #2
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4805      	ldr	r0, [pc, #20]	; (8000e98 <HAL_TIM_IC_MspInit+0x8c>)
 8000e82:	f000 fa7f 	bl	8001384 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8000e86:	bf00      	nop
 8000e88:	3728      	adds	r7, #40	; 0x28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40000c00 	.word	0x40000c00
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020000 	.word	0x40020000

08000e9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <HAL_TIM_Base_MspInit+0x3c>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d10d      	bne.n	8000eca <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_TIM_Base_MspInit+0x40>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	4a09      	ldr	r2, [pc, #36]	; (8000edc <HAL_TIM_Base_MspInit+0x40>)
 8000eb8:	f043 0302 	orr.w	r3, r3, #2
 8000ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ebe:	4b07      	ldr	r3, [pc, #28]	; (8000edc <HAL_TIM_Base_MspInit+0x40>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40010400 	.word	0x40010400
 8000edc:	40023800 	.word	0x40023800

08000ee0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a33      	ldr	r2, [pc, #204]	; (8000fcc <HAL_TIM_MspPostInit+0xec>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d13c      	bne.n	8000f7c <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	4b32      	ldr	r3, [pc, #200]	; (8000fd0 <HAL_TIM_MspPostInit+0xf0>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a31      	ldr	r2, [pc, #196]	; (8000fd0 <HAL_TIM_MspPostInit+0xf0>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b2f      	ldr	r3, [pc, #188]	; (8000fd0 <HAL_TIM_MspPostInit+0xf0>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b2b      	ldr	r3, [pc, #172]	; (8000fd0 <HAL_TIM_MspPostInit+0xf0>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a2a      	ldr	r2, [pc, #168]	; (8000fd0 <HAL_TIM_MspPostInit+0xf0>)
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b28      	ldr	r3, [pc, #160]	; (8000fd0 <HAL_TIM_MspPostInit+0xf0>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f3a:	23c0      	movs	r3, #192	; 0xc0
 8000f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	481f      	ldr	r0, [pc, #124]	; (8000fd4 <HAL_TIM_MspPostInit+0xf4>)
 8000f56:	f000 fa15 	bl	8001384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	4818      	ldr	r0, [pc, #96]	; (8000fd8 <HAL_TIM_MspPostInit+0xf8>)
 8000f76:	f000 fa05 	bl	8001384 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000f7a:	e023      	b.n	8000fc4 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM8)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a16      	ldr	r2, [pc, #88]	; (8000fdc <HAL_TIM_MspPostInit+0xfc>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d11e      	bne.n	8000fc4 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <HAL_TIM_MspPostInit+0xf0>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a10      	ldr	r2, [pc, #64]	; (8000fd0 <HAL_TIM_MspPostInit+0xf0>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_TIM_MspPostInit+0xf0>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000fa2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4808      	ldr	r0, [pc, #32]	; (8000fe0 <HAL_TIM_MspPostInit+0x100>)
 8000fc0:	f000 f9e0 	bl	8001384 <HAL_GPIO_Init>
}
 8000fc4:	bf00      	nop
 8000fc6:	3728      	adds	r7, #40	; 0x28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40000400 	.word	0x40000400
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	40010400 	.word	0x40010400
 8000fe0:	40020800 	.word	0x40020800

08000fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800101c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fe8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fea:	e003      	b.n	8000ff4 <LoopCopyDataInit>

08000fec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ff0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ff2:	3104      	adds	r1, #4

08000ff4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ff4:	480b      	ldr	r0, [pc, #44]	; (8001024 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ff8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ffa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ffc:	d3f6      	bcc.n	8000fec <CopyDataInit>
  ldr  r2, =_sbss
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	; (800102c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001000:	e002      	b.n	8001008 <LoopFillZerobss>

08001002 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001002:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001004:	f842 3b04 	str.w	r3, [r2], #4

08001008 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001008:	4b09      	ldr	r3, [pc, #36]	; (8001030 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800100a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800100c:	d3f9      	bcc.n	8001002 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800100e:	f7ff fd29 	bl	8000a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001012:	f006 ff77 	bl	8007f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001016:	f7ff fba5 	bl	8000764 <main>
  bx  lr    
 800101a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800101c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001020:	08008178 	.word	0x08008178
  ldr  r0, =_sdata
 8001024:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001028:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 800102c:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8001030:	20001c78 	.word	0x20001c78

08001034 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <ADC_IRQHandler>
	...

08001038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800103c:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <HAL_Init+0x40>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0d      	ldr	r2, [pc, #52]	; (8001078 <HAL_Init+0x40>)
 8001042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001046:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001048:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <HAL_Init+0x40>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <HAL_Init+0x40>)
 800104e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001052:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a07      	ldr	r2, [pc, #28]	; (8001078 <HAL_Init+0x40>)
 800105a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001060:	2003      	movs	r0, #3
 8001062:	f000 f94d 	bl	8001300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001066:	2000      	movs	r0, #0
 8001068:	f000 f808 	bl	800107c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800106c:	f7ff fc64 	bl	8000938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40023c00 	.word	0x40023c00

0800107c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_InitTick+0x54>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_InitTick+0x58>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4619      	mov	r1, r3
 800108e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001092:	fbb3 f3f1 	udiv	r3, r3, r1
 8001096:	fbb2 f3f3 	udiv	r3, r2, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f965 	bl	800136a <HAL_SYSTICK_Config>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00e      	b.n	80010c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	d80a      	bhi.n	80010c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b0:	2200      	movs	r2, #0
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295
 80010b8:	f000 f92d 	bl	8001316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010bc:	4a06      	ldr	r2, [pc, #24]	; (80010d8 <HAL_InitTick+0x5c>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	e000      	b.n	80010c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000000 	.word	0x20000000
 80010d4:	20000008 	.word	0x20000008
 80010d8:	20000004 	.word	0x20000004

080010dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_IncTick+0x20>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_IncTick+0x24>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	4a04      	ldr	r2, [pc, #16]	; (8001100 <HAL_IncTick+0x24>)
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000008 	.word	0x20000008
 8001100:	20000398 	.word	0x20000398

08001104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <HAL_GetTick+0x14>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000398 	.word	0x20000398

0800111c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001124:	f7ff ffee 	bl	8001104 <HAL_GetTick>
 8001128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001134:	d005      	beq.n	8001142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <HAL_Delay+0x40>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4413      	add	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001142:	bf00      	nop
 8001144:	f7ff ffde 	bl	8001104 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	429a      	cmp	r2, r3
 8001152:	d8f7      	bhi.n	8001144 <HAL_Delay+0x28>
  {
  }
}
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000008 	.word	0x20000008

08001160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800117c:	4013      	ands	r3, r2
 800117e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800118c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001192:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	60d3      	str	r3, [r2, #12]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	0a1b      	lsrs	r3, r3, #8
 80011b2:	f003 0307 	and.w	r3, r3, #7
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	db0b      	blt.n	80011ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	f003 021f 	and.w	r2, r3, #31
 80011dc:	4907      	ldr	r1, [pc, #28]	; (80011fc <__NVIC_EnableIRQ+0x38>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	095b      	lsrs	r3, r3, #5
 80011e4:	2001      	movs	r0, #1
 80011e6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000e100 	.word	0xe000e100

08001200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	6039      	str	r1, [r7, #0]
 800120a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001210:	2b00      	cmp	r3, #0
 8001212:	db0a      	blt.n	800122a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	b2da      	uxtb	r2, r3
 8001218:	490c      	ldr	r1, [pc, #48]	; (800124c <__NVIC_SetPriority+0x4c>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	0112      	lsls	r2, r2, #4
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	440b      	add	r3, r1
 8001224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001228:	e00a      	b.n	8001240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4908      	ldr	r1, [pc, #32]	; (8001250 <__NVIC_SetPriority+0x50>)
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	3b04      	subs	r3, #4
 8001238:	0112      	lsls	r2, r2, #4
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	440b      	add	r3, r1
 800123e:	761a      	strb	r2, [r3, #24]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000e100 	.word	0xe000e100
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	; 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f1c3 0307 	rsb	r3, r3, #7
 800126e:	2b04      	cmp	r3, #4
 8001270:	bf28      	it	cs
 8001272:	2304      	movcs	r3, #4
 8001274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3304      	adds	r3, #4
 800127a:	2b06      	cmp	r3, #6
 800127c:	d902      	bls.n	8001284 <NVIC_EncodePriority+0x30>
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3b03      	subs	r3, #3
 8001282:	e000      	b.n	8001286 <NVIC_EncodePriority+0x32>
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	f04f 32ff 	mov.w	r2, #4294967295
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43da      	mvns	r2, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	401a      	ands	r2, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800129c:	f04f 31ff 	mov.w	r1, #4294967295
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	fa01 f303 	lsl.w	r3, r1, r3
 80012a6:	43d9      	mvns	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	4313      	orrs	r3, r2
         );
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3724      	adds	r7, #36	; 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012cc:	d301      	bcc.n	80012d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ce:	2301      	movs	r3, #1
 80012d0:	e00f      	b.n	80012f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d2:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <SysTick_Config+0x40>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012da:	210f      	movs	r1, #15
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295
 80012e0:	f7ff ff8e 	bl	8001200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <SysTick_Config+0x40>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ea:	4b04      	ldr	r3, [pc, #16]	; (80012fc <SysTick_Config+0x40>)
 80012ec:	2207      	movs	r2, #7
 80012ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	e000e010 	.word	0xe000e010

08001300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff ff29 	bl	8001160 <__NVIC_SetPriorityGrouping>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001316:	b580      	push	{r7, lr}
 8001318:	b086      	sub	sp, #24
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001328:	f7ff ff3e 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 800132c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	68b9      	ldr	r1, [r7, #8]
 8001332:	6978      	ldr	r0, [r7, #20]
 8001334:	f7ff ff8e 	bl	8001254 <NVIC_EncodePriority>
 8001338:	4602      	mov	r2, r0
 800133a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff5d 	bl	8001200 <__NVIC_SetPriority>
}
 8001346:	bf00      	nop
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	4603      	mov	r3, r0
 8001356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff31 	bl	80011c4 <__NVIC_EnableIRQ>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ffa2 	bl	80012bc <SysTick_Config>
 8001378:	4603      	mov	r3, r0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001384:	b480      	push	{r7}
 8001386:	b089      	sub	sp, #36	; 0x24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001396:	2300      	movs	r3, #0
 8001398:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
 800139e:	e16b      	b.n	8001678 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013a0:	2201      	movs	r2, #1
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	f040 815a 	bne.w	8001672 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d00b      	beq.n	80013de <HAL_GPIO_Init+0x5a>
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d007      	beq.n	80013de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013d2:	2b11      	cmp	r3, #17
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b12      	cmp	r3, #18
 80013dc:	d130      	bne.n	8001440 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	2203      	movs	r2, #3
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	68da      	ldr	r2, [r3, #12]
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001414:	2201      	movs	r2, #1
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	091b      	lsrs	r3, r3, #4
 800142a:	f003 0201 	and.w	r2, r3, #1
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	2203      	movs	r2, #3
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b02      	cmp	r3, #2
 8001476:	d003      	beq.n	8001480 <HAL_GPIO_Init+0xfc>
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b12      	cmp	r3, #18
 800147e:	d123      	bne.n	80014c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	08da      	lsrs	r2, r3, #3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3208      	adds	r2, #8
 8001488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800148c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	220f      	movs	r2, #15
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	691a      	ldr	r2, [r3, #16]
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	08da      	lsrs	r2, r3, #3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	3208      	adds	r2, #8
 80014c2:	69b9      	ldr	r1, [r7, #24]
 80014c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	2203      	movs	r2, #3
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4013      	ands	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 0203 	and.w	r2, r3, #3
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001504:	2b00      	cmp	r3, #0
 8001506:	f000 80b4 	beq.w	8001672 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	4b5f      	ldr	r3, [pc, #380]	; (800168c <HAL_GPIO_Init+0x308>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	4a5e      	ldr	r2, [pc, #376]	; (800168c <HAL_GPIO_Init+0x308>)
 8001514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001518:	6453      	str	r3, [r2, #68]	; 0x44
 800151a:	4b5c      	ldr	r3, [pc, #368]	; (800168c <HAL_GPIO_Init+0x308>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001526:	4a5a      	ldr	r2, [pc, #360]	; (8001690 <HAL_GPIO_Init+0x30c>)
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	089b      	lsrs	r3, r3, #2
 800152c:	3302      	adds	r3, #2
 800152e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001532:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	220f      	movs	r2, #15
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4013      	ands	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a51      	ldr	r2, [pc, #324]	; (8001694 <HAL_GPIO_Init+0x310>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d02b      	beq.n	80015aa <HAL_GPIO_Init+0x226>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a50      	ldr	r2, [pc, #320]	; (8001698 <HAL_GPIO_Init+0x314>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d025      	beq.n	80015a6 <HAL_GPIO_Init+0x222>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a4f      	ldr	r2, [pc, #316]	; (800169c <HAL_GPIO_Init+0x318>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d01f      	beq.n	80015a2 <HAL_GPIO_Init+0x21e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4e      	ldr	r2, [pc, #312]	; (80016a0 <HAL_GPIO_Init+0x31c>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d019      	beq.n	800159e <HAL_GPIO_Init+0x21a>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a4d      	ldr	r2, [pc, #308]	; (80016a4 <HAL_GPIO_Init+0x320>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d013      	beq.n	800159a <HAL_GPIO_Init+0x216>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a4c      	ldr	r2, [pc, #304]	; (80016a8 <HAL_GPIO_Init+0x324>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d00d      	beq.n	8001596 <HAL_GPIO_Init+0x212>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a4b      	ldr	r2, [pc, #300]	; (80016ac <HAL_GPIO_Init+0x328>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d007      	beq.n	8001592 <HAL_GPIO_Init+0x20e>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a4a      	ldr	r2, [pc, #296]	; (80016b0 <HAL_GPIO_Init+0x32c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d101      	bne.n	800158e <HAL_GPIO_Init+0x20a>
 800158a:	2307      	movs	r3, #7
 800158c:	e00e      	b.n	80015ac <HAL_GPIO_Init+0x228>
 800158e:	2308      	movs	r3, #8
 8001590:	e00c      	b.n	80015ac <HAL_GPIO_Init+0x228>
 8001592:	2306      	movs	r3, #6
 8001594:	e00a      	b.n	80015ac <HAL_GPIO_Init+0x228>
 8001596:	2305      	movs	r3, #5
 8001598:	e008      	b.n	80015ac <HAL_GPIO_Init+0x228>
 800159a:	2304      	movs	r3, #4
 800159c:	e006      	b.n	80015ac <HAL_GPIO_Init+0x228>
 800159e:	2303      	movs	r3, #3
 80015a0:	e004      	b.n	80015ac <HAL_GPIO_Init+0x228>
 80015a2:	2302      	movs	r3, #2
 80015a4:	e002      	b.n	80015ac <HAL_GPIO_Init+0x228>
 80015a6:	2301      	movs	r3, #1
 80015a8:	e000      	b.n	80015ac <HAL_GPIO_Init+0x228>
 80015aa:	2300      	movs	r3, #0
 80015ac:	69fa      	ldr	r2, [r7, #28]
 80015ae:	f002 0203 	and.w	r2, r2, #3
 80015b2:	0092      	lsls	r2, r2, #2
 80015b4:	4093      	lsls	r3, r2
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015bc:	4934      	ldr	r1, [pc, #208]	; (8001690 <HAL_GPIO_Init+0x30c>)
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	089b      	lsrs	r3, r3, #2
 80015c2:	3302      	adds	r3, #2
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015ca:	4b3a      	ldr	r3, [pc, #232]	; (80016b4 <HAL_GPIO_Init+0x330>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015ee:	4a31      	ldr	r2, [pc, #196]	; (80016b4 <HAL_GPIO_Init+0x330>)
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015f4:	4b2f      	ldr	r3, [pc, #188]	; (80016b4 <HAL_GPIO_Init+0x330>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001618:	4a26      	ldr	r2, [pc, #152]	; (80016b4 <HAL_GPIO_Init+0x330>)
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800161e:	4b25      	ldr	r3, [pc, #148]	; (80016b4 <HAL_GPIO_Init+0x330>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	43db      	mvns	r3, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4013      	ands	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001642:	4a1c      	ldr	r2, [pc, #112]	; (80016b4 <HAL_GPIO_Init+0x330>)
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001648:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <HAL_GPIO_Init+0x330>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800166c:	4a11      	ldr	r2, [pc, #68]	; (80016b4 <HAL_GPIO_Init+0x330>)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3301      	adds	r3, #1
 8001676:	61fb      	str	r3, [r7, #28]
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	2b0f      	cmp	r3, #15
 800167c:	f67f ae90 	bls.w	80013a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001680:	bf00      	nop
 8001682:	3724      	adds	r7, #36	; 0x24
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	40023800 	.word	0x40023800
 8001690:	40013800 	.word	0x40013800
 8001694:	40020000 	.word	0x40020000
 8001698:	40020400 	.word	0x40020400
 800169c:	40020800 	.word	0x40020800
 80016a0:	40020c00 	.word	0x40020c00
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40021400 	.word	0x40021400
 80016ac:	40021800 	.word	0x40021800
 80016b0:	40021c00 	.word	0x40021c00
 80016b4:	40013c00 	.word	0x40013c00

080016b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	807b      	strh	r3, [r7, #2]
 80016c4:	4613      	mov	r3, r2
 80016c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c8:	787b      	ldrb	r3, [r7, #1]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ce:	887a      	ldrh	r2, [r7, #2]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016d4:	e003      	b.n	80016de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016d6:	887b      	ldrh	r3, [r7, #2]
 80016d8:	041a      	lsls	r2, r3, #16
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	619a      	str	r2, [r3, #24]
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e11f      	b.n	800193e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d106      	bne.n	8001718 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7fe ffaa 	bl	800066c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2224      	movs	r2, #36	; 0x24
 800171c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0201 	bic.w	r2, r2, #1
 800172e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800173e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800174e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001750:	f001 fec0 	bl	80034d4 <HAL_RCC_GetPCLK1Freq>
 8001754:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	4a7b      	ldr	r2, [pc, #492]	; (8001948 <HAL_I2C_Init+0x25c>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d807      	bhi.n	8001770 <HAL_I2C_Init+0x84>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4a7a      	ldr	r2, [pc, #488]	; (800194c <HAL_I2C_Init+0x260>)
 8001764:	4293      	cmp	r3, r2
 8001766:	bf94      	ite	ls
 8001768:	2301      	movls	r3, #1
 800176a:	2300      	movhi	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	e006      	b.n	800177e <HAL_I2C_Init+0x92>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4a77      	ldr	r2, [pc, #476]	; (8001950 <HAL_I2C_Init+0x264>)
 8001774:	4293      	cmp	r3, r2
 8001776:	bf94      	ite	ls
 8001778:	2301      	movls	r3, #1
 800177a:	2300      	movhi	r3, #0
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e0db      	b.n	800193e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4a72      	ldr	r2, [pc, #456]	; (8001954 <HAL_I2C_Init+0x268>)
 800178a:	fba2 2303 	umull	r2, r3, r2, r3
 800178e:	0c9b      	lsrs	r3, r3, #18
 8001790:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68ba      	ldr	r2, [r7, #8]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	4a64      	ldr	r2, [pc, #400]	; (8001948 <HAL_I2C_Init+0x25c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d802      	bhi.n	80017c0 <HAL_I2C_Init+0xd4>
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	3301      	adds	r3, #1
 80017be:	e009      	b.n	80017d4 <HAL_I2C_Init+0xe8>
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017c6:	fb02 f303 	mul.w	r3, r2, r3
 80017ca:	4a63      	ldr	r2, [pc, #396]	; (8001958 <HAL_I2C_Init+0x26c>)
 80017cc:	fba2 2303 	umull	r2, r3, r2, r3
 80017d0:	099b      	lsrs	r3, r3, #6
 80017d2:	3301      	adds	r3, #1
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	6812      	ldr	r2, [r2, #0]
 80017d8:	430b      	orrs	r3, r1
 80017da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	4956      	ldr	r1, [pc, #344]	; (8001948 <HAL_I2C_Init+0x25c>)
 80017f0:	428b      	cmp	r3, r1
 80017f2:	d80d      	bhi.n	8001810 <HAL_I2C_Init+0x124>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	1e59      	subs	r1, r3, #1
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001802:	3301      	adds	r3, #1
 8001804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001808:	2b04      	cmp	r3, #4
 800180a:	bf38      	it	cc
 800180c:	2304      	movcc	r3, #4
 800180e:	e04f      	b.n	80018b0 <HAL_I2C_Init+0x1c4>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d111      	bne.n	800183c <HAL_I2C_Init+0x150>
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	1e58      	subs	r0, r3, #1
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6859      	ldr	r1, [r3, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	440b      	add	r3, r1
 8001826:	fbb0 f3f3 	udiv	r3, r0, r3
 800182a:	3301      	adds	r3, #1
 800182c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001830:	2b00      	cmp	r3, #0
 8001832:	bf0c      	ite	eq
 8001834:	2301      	moveq	r3, #1
 8001836:	2300      	movne	r3, #0
 8001838:	b2db      	uxtb	r3, r3
 800183a:	e012      	b.n	8001862 <HAL_I2C_Init+0x176>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	1e58      	subs	r0, r3, #1
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6859      	ldr	r1, [r3, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	440b      	add	r3, r1
 800184a:	0099      	lsls	r1, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001852:	3301      	adds	r3, #1
 8001854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001858:	2b00      	cmp	r3, #0
 800185a:	bf0c      	ite	eq
 800185c:	2301      	moveq	r3, #1
 800185e:	2300      	movne	r3, #0
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <HAL_I2C_Init+0x17e>
 8001866:	2301      	movs	r3, #1
 8001868:	e022      	b.n	80018b0 <HAL_I2C_Init+0x1c4>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10e      	bne.n	8001890 <HAL_I2C_Init+0x1a4>
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	1e58      	subs	r0, r3, #1
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6859      	ldr	r1, [r3, #4]
 800187a:	460b      	mov	r3, r1
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	440b      	add	r3, r1
 8001880:	fbb0 f3f3 	udiv	r3, r0, r3
 8001884:	3301      	adds	r3, #1
 8001886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800188a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800188e:	e00f      	b.n	80018b0 <HAL_I2C_Init+0x1c4>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	1e58      	subs	r0, r3, #1
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6859      	ldr	r1, [r3, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	0099      	lsls	r1, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018a6:	3301      	adds	r3, #1
 80018a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	6809      	ldr	r1, [r1, #0]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69da      	ldr	r2, [r3, #28]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6911      	ldr	r1, [r2, #16]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	68d2      	ldr	r2, [r2, #12]
 80018ea:	4311      	orrs	r1, r2
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6812      	ldr	r2, [r2, #0]
 80018f0:	430b      	orrs	r3, r1
 80018f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	695a      	ldr	r2, [r3, #20]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f042 0201 	orr.w	r2, r2, #1
 800191e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2220      	movs	r2, #32
 800192a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	000186a0 	.word	0x000186a0
 800194c:	001e847f 	.word	0x001e847f
 8001950:	003d08ff 	.word	0x003d08ff
 8001954:	431bde83 	.word	0x431bde83
 8001958:	10624dd3 	.word	0x10624dd3

0800195c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800195c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800195e:	b08f      	sub	sp, #60	; 0x3c
 8001960:	af0a      	add	r7, sp, #40	; 0x28
 8001962:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e10f      	b.n	8001b8e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	d106      	bne.n	800198e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f005 ffb9 	bl	8007900 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2203      	movs	r2, #3
 8001992:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800199a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d102      	bne.n	80019a8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f002 ff98 	bl	80048e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	603b      	str	r3, [r7, #0]
 80019b8:	687e      	ldr	r6, [r7, #4]
 80019ba:	466d      	mov	r5, sp
 80019bc:	f106 0410 	add.w	r4, r6, #16
 80019c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80019d0:	1d33      	adds	r3, r6, #4
 80019d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019d4:	6838      	ldr	r0, [r7, #0]
 80019d6:	f002 fe6f 	bl	80046b8 <USB_CoreInit>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d005      	beq.n	80019ec <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2202      	movs	r2, #2
 80019e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0d0      	b.n	8001b8e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2100      	movs	r1, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f002 ff86 	bl	8004904 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019f8:	2300      	movs	r3, #0
 80019fa:	73fb      	strb	r3, [r7, #15]
 80019fc:	e04a      	b.n	8001a94 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019fe:	7bfa      	ldrb	r2, [r7, #15]
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	4613      	mov	r3, r2
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	1a9b      	subs	r3, r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	333d      	adds	r3, #61	; 0x3d
 8001a0e:	2201      	movs	r2, #1
 8001a10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a12:	7bfa      	ldrb	r2, [r7, #15]
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	1a9b      	subs	r3, r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	440b      	add	r3, r1
 8001a20:	333c      	adds	r3, #60	; 0x3c
 8001a22:	7bfa      	ldrb	r2, [r7, #15]
 8001a24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a26:	7bfa      	ldrb	r2, [r7, #15]
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	b298      	uxth	r0, r3
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	1a9b      	subs	r3, r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	440b      	add	r3, r1
 8001a38:	3342      	adds	r3, #66	; 0x42
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a3e:	7bfa      	ldrb	r2, [r7, #15]
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	1a9b      	subs	r3, r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	333f      	adds	r3, #63	; 0x3f
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a52:	7bfa      	ldrb	r2, [r7, #15]
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	4613      	mov	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	1a9b      	subs	r3, r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	440b      	add	r3, r1
 8001a60:	3344      	adds	r3, #68	; 0x44
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a66:	7bfa      	ldrb	r2, [r7, #15]
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	1a9b      	subs	r3, r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	440b      	add	r3, r1
 8001a74:	3348      	adds	r3, #72	; 0x48
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a7a:	7bfa      	ldrb	r2, [r7, #15]
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	1a9b      	subs	r3, r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	440b      	add	r3, r1
 8001a88:	3350      	adds	r3, #80	; 0x50
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
 8001a90:	3301      	adds	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
 8001a94:	7bfa      	ldrb	r2, [r7, #15]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d3af      	bcc.n	80019fe <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	73fb      	strb	r3, [r7, #15]
 8001aa2:	e044      	b.n	8001b2e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001aa4:	7bfa      	ldrb	r2, [r7, #15]
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	1a9b      	subs	r3, r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001aba:	7bfa      	ldrb	r2, [r7, #15]
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	1a9b      	subs	r3, r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001acc:	7bfa      	ldrb	r2, [r7, #15]
 8001ace:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ad0:	7bfa      	ldrb	r2, [r7, #15]
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	1a9b      	subs	r3, r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ae6:	7bfa      	ldrb	r2, [r7, #15]
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	1a9b      	subs	r3, r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	440b      	add	r3, r1
 8001af4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001afc:	7bfa      	ldrb	r2, [r7, #15]
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	1a9b      	subs	r3, r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b12:	7bfa      	ldrb	r2, [r7, #15]
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	1a9b      	subs	r3, r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	440b      	add	r3, r1
 8001b20:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	73fb      	strb	r3, [r7, #15]
 8001b2e:	7bfa      	ldrb	r2, [r7, #15]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d3b5      	bcc.n	8001aa4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	603b      	str	r3, [r7, #0]
 8001b3e:	687e      	ldr	r6, [r7, #4]
 8001b40:	466d      	mov	r5, sp
 8001b42:	f106 0410 	add.w	r4, r6, #16
 8001b46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b52:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b56:	1d33      	adds	r3, r6, #4
 8001b58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b5a:	6838      	ldr	r0, [r7, #0]
 8001b5c:	f002 fefc 	bl	8004958 <USB_DevInit>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d005      	beq.n	8001b72 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2202      	movs	r2, #2
 8001b6a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e00d      	b.n	8001b8e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f003 ff3b 	bl	8005a02 <USB_DevDisconnect>

  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3714      	adds	r7, #20
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b96 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b084      	sub	sp, #16
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d101      	bne.n	8001bb2 <HAL_PCD_Start+0x1c>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e020      	b.n	8001bf4 <HAL_PCD_Start+0x5e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d109      	bne.n	8001bd6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d005      	beq.n	8001bd6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f003 fef9 	bl	80059d2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f002 fe6b 	bl	80048c0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001bfc:	b590      	push	{r4, r7, lr}
 8001bfe:	b08d      	sub	sp, #52	; 0x34
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c0a:	6a3b      	ldr	r3, [r7, #32]
 8001c0c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f003 ffa0 	bl	8005b58 <USB_GetMode>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f040 839d 	bne.w	800235a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f003 ff04 	bl	8005a32 <USB_ReadInterrupts>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 8393 	beq.w	8002358 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f003 fefb 	bl	8005a32 <USB_ReadInterrupts>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d107      	bne.n	8001c56 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	695a      	ldr	r2, [r3, #20]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f002 0202 	and.w	r2, r2, #2
 8001c54:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f003 fee9 	bl	8005a32 <USB_ReadInterrupts>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f003 0310 	and.w	r3, r3, #16
 8001c66:	2b10      	cmp	r3, #16
 8001c68:	d161      	bne.n	8001d2e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	699a      	ldr	r2, [r3, #24]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0210 	bic.w	r2, r2, #16
 8001c78:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001c7a:	6a3b      	ldr	r3, [r7, #32]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	f003 020f 	and.w	r2, r3, #15
 8001c86:	4613      	mov	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	1a9b      	subs	r3, r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	4413      	add	r3, r2
 8001c96:	3304      	adds	r3, #4
 8001c98:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	0c5b      	lsrs	r3, r3, #17
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d124      	bne.n	8001cf0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001cac:	4013      	ands	r3, r2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d035      	beq.n	8001d1e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	091b      	lsrs	r3, r3, #4
 8001cba:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001cbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	6a38      	ldr	r0, [r7, #32]
 8001cc6:	f003 fd61 	bl	800578c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cd6:	441a      	add	r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	699a      	ldr	r2, [r3, #24]
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	091b      	lsrs	r3, r3, #4
 8001ce4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ce8:	441a      	add	r2, r3
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	619a      	str	r2, [r3, #24]
 8001cee:	e016      	b.n	8001d1e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	0c5b      	lsrs	r3, r3, #17
 8001cf4:	f003 030f 	and.w	r3, r3, #15
 8001cf8:	2b06      	cmp	r3, #6
 8001cfa:	d110      	bne.n	8001d1e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d02:	2208      	movs	r2, #8
 8001d04:	4619      	mov	r1, r3
 8001d06:	6a38      	ldr	r0, [r7, #32]
 8001d08:	f003 fd40 	bl	800578c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	699a      	ldr	r2, [r3, #24]
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	091b      	lsrs	r3, r3, #4
 8001d14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d18:	441a      	add	r2, r3
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	699a      	ldr	r2, [r3, #24]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f042 0210 	orr.w	r2, r2, #16
 8001d2c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f003 fe7d 	bl	8005a32 <USB_ReadInterrupts>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d3e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001d42:	d16e      	bne.n	8001e22 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f003 fe83 	bl	8005a58 <USB_ReadDevAllOutEpInterrupt>
 8001d52:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001d54:	e062      	b.n	8001e1c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d057      	beq.n	8001e10 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	4611      	mov	r1, r2
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f003 fea8 	bl	8005ac0 <USB_ReadDevOutEPInterrupt>
 8001d70:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00c      	beq.n	8001d96 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	015a      	lsls	r2, r3, #5
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	4413      	add	r3, r2
 8001d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d88:	461a      	mov	r2, r3
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001d8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 fdb1 	bl	80028f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00c      	beq.n	8001dba <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	015a      	lsls	r2, r3, #5
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	4413      	add	r3, r2
 8001da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dac:	461a      	mov	r2, r3
 8001dae:	2308      	movs	r3, #8
 8001db0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001db2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 feab 	bl	8002b10 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	f003 0310 	and.w	r3, r3, #16
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d008      	beq.n	8001dd6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	015a      	lsls	r2, r3, #5
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	4413      	add	r3, r2
 8001dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	2310      	movs	r3, #16
 8001dd4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	f003 0320 	and.w	r3, r3, #32
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d008      	beq.n	8001df2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	015a      	lsls	r2, r3, #5
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	4413      	add	r3, r2
 8001de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dec:	461a      	mov	r2, r3
 8001dee:	2320      	movs	r3, #32
 8001df0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d009      	beq.n	8001e10 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	015a      	lsls	r2, r3, #5
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e08:	461a      	mov	r2, r3
 8001e0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e0e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	3301      	adds	r3, #1
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e18:	085b      	lsrs	r3, r3, #1
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d199      	bne.n	8001d56 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f003 fe03 	bl	8005a32 <USB_ReadInterrupts>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e36:	f040 80c0 	bne.w	8001fba <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f003 fe24 	bl	8005a8c <USB_ReadDevAllInEpInterrupt>
 8001e44:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001e4a:	e0b2      	b.n	8001fb2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 80a7 	beq.w	8001fa6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	4611      	mov	r1, r2
 8001e62:	4618      	mov	r0, r3
 8001e64:	f003 fe4a 	bl	8005afc <USB_ReadDevInEPInterrupt>
 8001e68:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d057      	beq.n	8001f24 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69f9      	ldr	r1, [r7, #28]
 8001e90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001e94:	4013      	ands	r3, r2
 8001e96:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	015a      	lsls	r2, r3, #5
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d132      	bne.n	8001f18 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	1a9b      	subs	r3, r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	3348      	adds	r3, #72	; 0x48
 8001ec2:	6819      	ldr	r1, [r3, #0]
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec8:	4613      	mov	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	1a9b      	subs	r3, r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4403      	add	r3, r0
 8001ed2:	3344      	adds	r3, #68	; 0x44
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4419      	add	r1, r3
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001edc:	4613      	mov	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	1a9b      	subs	r3, r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4403      	add	r3, r0
 8001ee6:	3348      	adds	r3, #72	; 0x48
 8001ee8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d113      	bne.n	8001f18 <HAL_PCD_IRQHandler+0x31c>
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	1a9b      	subs	r3, r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	3350      	adds	r3, #80	; 0x50
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d108      	bne.n	8001f18 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6818      	ldr	r0, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f10:	461a      	mov	r2, r3
 8001f12:	2101      	movs	r1, #1
 8001f14:	f003 fe52 	bl	8005bbc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f005 fd6f 	bl	8007a02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d008      	beq.n	8001f40 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	015a      	lsls	r2, r3, #5
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	4413      	add	r3, r2
 8001f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	2308      	movs	r3, #8
 8001f3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	f003 0310 	and.w	r3, r3, #16
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d008      	beq.n	8001f5c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	015a      	lsls	r2, r3, #5
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	4413      	add	r3, r2
 8001f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f56:	461a      	mov	r2, r3
 8001f58:	2310      	movs	r3, #16
 8001f5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d008      	beq.n	8001f78 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	015a      	lsls	r2, r3, #5
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f72:	461a      	mov	r2, r3
 8001f74:	2340      	movs	r3, #64	; 0x40
 8001f76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d008      	beq.n	8001f94 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	015a      	lsls	r2, r3, #5
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	4413      	add	r3, r2
 8001f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f8e:	461a      	mov	r2, r3
 8001f90:	2302      	movs	r3, #2
 8001f92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 fc1b 	bl	80027dc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	3301      	adds	r3, #1
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fae:	085b      	lsrs	r3, r3, #1
 8001fb0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f47f af49 	bne.w	8001e4c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f003 fd37 	bl	8005a32 <USB_ReadInterrupts>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001fca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001fce:	d122      	bne.n	8002016 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	69fa      	ldr	r2, [r7, #28]
 8001fda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fde:	f023 0301 	bic.w	r3, r3, #1
 8001fe2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d108      	bne.n	8002000 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 fe27 	bl	8002c4c <HAL_PCDEx_LPM_Callback>
 8001ffe:	e002      	b.n	8002006 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f005 fd75 	bl	8007af0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	695a      	ldr	r2, [r3, #20]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002014:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f003 fd09 	bl	8005a32 <USB_ReadInterrupts>
 8002020:	4603      	mov	r3, r0
 8002022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002026:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800202a:	d112      	bne.n	8002052 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b01      	cmp	r3, #1
 800203a:	d102      	bne.n	8002042 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f005 fd31 	bl	8007aa4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	695a      	ldr	r2, [r3, #20]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002050:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f003 fceb 	bl	8005a32 <USB_ReadInterrupts>
 800205c:	4603      	mov	r3, r0
 800205e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002066:	f040 80c7 	bne.w	80021f8 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	69fa      	ldr	r2, [r7, #28]
 8002074:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002078:	f023 0301 	bic.w	r3, r3, #1
 800207c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2110      	movs	r1, #16
 8002084:	4618      	mov	r0, r3
 8002086:	f002 fdcb 	bl	8004c20 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800208a:	2300      	movs	r3, #0
 800208c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800208e:	e056      	b.n	800213e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002092:	015a      	lsls	r2, r3, #5
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	4413      	add	r3, r2
 8002098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800209c:	461a      	mov	r2, r3
 800209e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80020a2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80020a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a6:	015a      	lsls	r2, r3, #5
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020b4:	0151      	lsls	r1, r2, #5
 80020b6:	69fa      	ldr	r2, [r7, #28]
 80020b8:	440a      	add	r2, r1
 80020ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80020be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020c2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80020c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c6:	015a      	lsls	r2, r3, #5
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	4413      	add	r3, r2
 80020cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020d4:	0151      	lsls	r1, r2, #5
 80020d6:	69fa      	ldr	r2, [r7, #28]
 80020d8:	440a      	add	r2, r1
 80020da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80020de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020e2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80020e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e6:	015a      	lsls	r2, r3, #5
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020f0:	461a      	mov	r2, r3
 80020f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80020f6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80020f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020fa:	015a      	lsls	r2, r3, #5
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	4413      	add	r3, r2
 8002100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002108:	0151      	lsls	r1, r2, #5
 800210a:	69fa      	ldr	r2, [r7, #28]
 800210c:	440a      	add	r2, r1
 800210e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002112:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002116:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211a:	015a      	lsls	r2, r3, #5
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	4413      	add	r3, r2
 8002120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002128:	0151      	lsls	r1, r2, #5
 800212a:	69fa      	ldr	r2, [r7, #28]
 800212c:	440a      	add	r2, r1
 800212e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002132:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002136:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213a:	3301      	adds	r3, #1
 800213c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002144:	429a      	cmp	r2, r3
 8002146:	d3a3      	bcc.n	8002090 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	69fa      	ldr	r2, [r7, #28]
 8002152:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002156:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800215a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	2b00      	cmp	r3, #0
 8002162:	d016      	beq.n	8002192 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800216a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800216e:	69fa      	ldr	r2, [r7, #28]
 8002170:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002174:	f043 030b 	orr.w	r3, r3, #11
 8002178:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002184:	69fa      	ldr	r2, [r7, #28]
 8002186:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800218a:	f043 030b 	orr.w	r3, r3, #11
 800218e:	6453      	str	r3, [r2, #68]	; 0x44
 8002190:	e015      	b.n	80021be <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	69fa      	ldr	r2, [r7, #28]
 800219c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021a4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80021a8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	69fa      	ldr	r2, [r7, #28]
 80021b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021b8:	f043 030b 	orr.w	r3, r3, #11
 80021bc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	69fa      	ldr	r2, [r7, #28]
 80021c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021cc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80021d0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6818      	ldr	r0, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80021e2:	461a      	mov	r2, r3
 80021e4:	f003 fcea 	bl	8005bbc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695a      	ldr	r2, [r3, #20]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80021f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f003 fc18 	bl	8005a32 <USB_ReadInterrupts>
 8002202:	4603      	mov	r3, r0
 8002204:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800220c:	d124      	bne.n	8002258 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f003 fcae 	bl	8005b74 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f002 fd60 	bl	8004ce2 <USB_GetDevSpeed>
 8002222:	4603      	mov	r3, r0
 8002224:	461a      	mov	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681c      	ldr	r4, [r3, #0]
 800222e:	f001 f945 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 8002232:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002238:	b2db      	uxtb	r3, r3
 800223a:	461a      	mov	r2, r3
 800223c:	4620      	mov	r0, r4
 800223e:	f002 fa9d 	bl	800477c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f005 fc05 	bl	8007a52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	695a      	ldr	r2, [r3, #20]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002256:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f003 fbe8 	bl	8005a32 <USB_ReadInterrupts>
 8002262:	4603      	mov	r3, r0
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	2b08      	cmp	r3, #8
 800226a:	d10a      	bne.n	8002282 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f005 fbe2 	bl	8007a36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695a      	ldr	r2, [r3, #20]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f002 0208 	and.w	r2, r2, #8
 8002280:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f003 fbd3 	bl	8005a32 <USB_ReadInterrupts>
 800228c:	4603      	mov	r3, r0
 800228e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002292:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002296:	d10f      	bne.n	80022b8 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	4619      	mov	r1, r3
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f005 fc44 	bl	8007b30 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	695a      	ldr	r2, [r3, #20]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80022b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f003 fbb8 	bl	8005a32 <USB_ReadInterrupts>
 80022c2:	4603      	mov	r3, r0
 80022c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022cc:	d10f      	bne.n	80022ee <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	4619      	mov	r1, r3
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f005 fc17 	bl	8007b0c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	695a      	ldr	r2, [r3, #20]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80022ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f003 fb9d 	bl	8005a32 <USB_ReadInterrupts>
 80022f8:	4603      	mov	r3, r0
 80022fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80022fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002302:	d10a      	bne.n	800231a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f005 fc25 	bl	8007b54 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	695a      	ldr	r2, [r3, #20]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002318:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f003 fb87 	bl	8005a32 <USB_ReadInterrupts>
 8002324:	4603      	mov	r3, r0
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	2b04      	cmp	r3, #4
 800232c:	d115      	bne.n	800235a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d002      	beq.n	8002346 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f005 fc15 	bl	8007b70 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6859      	ldr	r1, [r3, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	430a      	orrs	r2, r1
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	e000      	b.n	800235a <HAL_PCD_IRQHandler+0x75e>
      return;
 8002358:	bf00      	nop
    }
  }
}
 800235a:	3734      	adds	r7, #52	; 0x34
 800235c:	46bd      	mov	sp, r7
 800235e:	bd90      	pop	{r4, r7, pc}

08002360 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002372:	2b01      	cmp	r3, #1
 8002374:	d101      	bne.n	800237a <HAL_PCD_SetAddress+0x1a>
 8002376:	2302      	movs	r3, #2
 8002378:	e013      	b.n	80023a2 <HAL_PCD_SetAddress+0x42>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	78fa      	ldrb	r2, [r7, #3]
 8002386:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	78fa      	ldrb	r2, [r7, #3]
 8002390:	4611      	mov	r1, r2
 8002392:	4618      	mov	r0, r3
 8002394:	f003 faf7 	bl	8005986 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b084      	sub	sp, #16
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	4608      	mov	r0, r1
 80023b4:	4611      	mov	r1, r2
 80023b6:	461a      	mov	r2, r3
 80023b8:	4603      	mov	r3, r0
 80023ba:	70fb      	strb	r3, [r7, #3]
 80023bc:	460b      	mov	r3, r1
 80023be:	803b      	strh	r3, [r7, #0]
 80023c0:	4613      	mov	r3, r2
 80023c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	da0f      	bge.n	80023f0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023d0:	78fb      	ldrb	r3, [r7, #3]
 80023d2:	f003 020f 	and.w	r2, r3, #15
 80023d6:	4613      	mov	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	1a9b      	subs	r3, r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	3338      	adds	r3, #56	; 0x38
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	4413      	add	r3, r2
 80023e4:	3304      	adds	r3, #4
 80023e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2201      	movs	r2, #1
 80023ec:	705a      	strb	r2, [r3, #1]
 80023ee:	e00f      	b.n	8002410 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	f003 020f 	and.w	r2, r3, #15
 80023f6:	4613      	mov	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	1a9b      	subs	r3, r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	3304      	adds	r3, #4
 8002408:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002410:	78fb      	ldrb	r3, [r7, #3]
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	b2da      	uxtb	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800241c:	883a      	ldrh	r2, [r7, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	78ba      	ldrb	r2, [r7, #2]
 8002426:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	785b      	ldrb	r3, [r3, #1]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d004      	beq.n	800243a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800243a:	78bb      	ldrb	r3, [r7, #2]
 800243c:	2b02      	cmp	r3, #2
 800243e:	d102      	bne.n	8002446 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800244c:	2b01      	cmp	r3, #1
 800244e:	d101      	bne.n	8002454 <HAL_PCD_EP_Open+0xaa>
 8002450:	2302      	movs	r3, #2
 8002452:	e00e      	b.n	8002472 <HAL_PCD_EP_Open+0xc8>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68f9      	ldr	r1, [r7, #12]
 8002462:	4618      	mov	r0, r3
 8002464:	f002 fc62 	bl	8004d2c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002470:	7afb      	ldrb	r3, [r7, #11]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b084      	sub	sp, #16
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	460b      	mov	r3, r1
 8002484:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002486:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800248a:	2b00      	cmp	r3, #0
 800248c:	da0f      	bge.n	80024ae <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800248e:	78fb      	ldrb	r3, [r7, #3]
 8002490:	f003 020f 	and.w	r2, r3, #15
 8002494:	4613      	mov	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	1a9b      	subs	r3, r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	3338      	adds	r3, #56	; 0x38
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	4413      	add	r3, r2
 80024a2:	3304      	adds	r3, #4
 80024a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2201      	movs	r2, #1
 80024aa:	705a      	strb	r2, [r3, #1]
 80024ac:	e00f      	b.n	80024ce <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024ae:	78fb      	ldrb	r3, [r7, #3]
 80024b0:	f003 020f 	and.w	r2, r3, #15
 80024b4:	4613      	mov	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	1a9b      	subs	r3, r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	4413      	add	r3, r2
 80024c4:	3304      	adds	r3, #4
 80024c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80024ce:	78fb      	ldrb	r3, [r7, #3]
 80024d0:	f003 030f 	and.w	r3, r3, #15
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_PCD_EP_Close+0x6e>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e00e      	b.n	8002506 <HAL_PCD_EP_Close+0x8c>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68f9      	ldr	r1, [r7, #12]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f002 fca0 	bl	8004e3c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b086      	sub	sp, #24
 8002512:	af00      	add	r7, sp, #0
 8002514:	60f8      	str	r0, [r7, #12]
 8002516:	607a      	str	r2, [r7, #4]
 8002518:	603b      	str	r3, [r7, #0]
 800251a:	460b      	mov	r3, r1
 800251c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800251e:	7afb      	ldrb	r3, [r7, #11]
 8002520:	f003 020f 	and.w	r2, r3, #15
 8002524:	4613      	mov	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	4413      	add	r3, r2
 8002534:	3304      	adds	r3, #4
 8002536:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	2200      	movs	r2, #0
 8002548:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2200      	movs	r2, #0
 800254e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002550:	7afb      	ldrb	r3, [r7, #11]
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	b2da      	uxtb	r2, r3
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d102      	bne.n	800256a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800256a:	7afb      	ldrb	r3, [r7, #11]
 800256c:	f003 030f 	and.w	r3, r3, #15
 8002570:	2b00      	cmp	r3, #0
 8002572:	d109      	bne.n	8002588 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	6979      	ldr	r1, [r7, #20]
 8002582:	f002 ff7b 	bl	800547c <USB_EP0StartXfer>
 8002586:	e008      	b.n	800259a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6818      	ldr	r0, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	b2db      	uxtb	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	6979      	ldr	r1, [r7, #20]
 8002596:	f002 fd2d 	bl	8004ff4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80025b0:	78fb      	ldrb	r3, [r7, #3]
 80025b2:	f003 020f 	and.w	r2, r3, #15
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	4613      	mov	r3, r2
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	1a9b      	subs	r3, r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80025c6:	681b      	ldr	r3, [r3, #0]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	607a      	str	r2, [r7, #4]
 80025de:	603b      	str	r3, [r7, #0]
 80025e0:	460b      	mov	r3, r1
 80025e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025e4:	7afb      	ldrb	r3, [r7, #11]
 80025e6:	f003 020f 	and.w	r2, r3, #15
 80025ea:	4613      	mov	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	1a9b      	subs	r3, r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	3338      	adds	r3, #56	; 0x38
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	4413      	add	r3, r2
 80025f8:	3304      	adds	r3, #4
 80025fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	2200      	movs	r2, #0
 800260c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	2201      	movs	r2, #1
 8002612:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002614:	7afb      	ldrb	r3, [r7, #11]
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	b2da      	uxtb	r2, r3
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d102      	bne.n	800262e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800262e:	7afb      	ldrb	r3, [r7, #11]
 8002630:	f003 030f 	and.w	r3, r3, #15
 8002634:	2b00      	cmp	r3, #0
 8002636:	d109      	bne.n	800264c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	461a      	mov	r2, r3
 8002644:	6979      	ldr	r1, [r7, #20]
 8002646:	f002 ff19 	bl	800547c <USB_EP0StartXfer>
 800264a:	e008      	b.n	800265e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6818      	ldr	r0, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	b2db      	uxtb	r3, r3
 8002656:	461a      	mov	r2, r3
 8002658:	6979      	ldr	r1, [r7, #20]
 800265a:	f002 fccb 	bl	8004ff4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002674:	78fb      	ldrb	r3, [r7, #3]
 8002676:	f003 020f 	and.w	r2, r3, #15
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	429a      	cmp	r2, r3
 8002680:	d901      	bls.n	8002686 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e050      	b.n	8002728 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002686:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800268a:	2b00      	cmp	r3, #0
 800268c:	da0f      	bge.n	80026ae <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800268e:	78fb      	ldrb	r3, [r7, #3]
 8002690:	f003 020f 	and.w	r2, r3, #15
 8002694:	4613      	mov	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	1a9b      	subs	r3, r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	3338      	adds	r3, #56	; 0x38
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	3304      	adds	r3, #4
 80026a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2201      	movs	r2, #1
 80026aa:	705a      	strb	r2, [r3, #1]
 80026ac:	e00d      	b.n	80026ca <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026ae:	78fa      	ldrb	r2, [r7, #3]
 80026b0:	4613      	mov	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	1a9b      	subs	r3, r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	4413      	add	r3, r2
 80026c0:	3304      	adds	r3, #4
 80026c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2201      	movs	r2, #1
 80026ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026d0:	78fb      	ldrb	r3, [r7, #3]
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d101      	bne.n	80026ea <HAL_PCD_EP_SetStall+0x82>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e01e      	b.n	8002728 <HAL_PCD_EP_SetStall+0xc0>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68f9      	ldr	r1, [r7, #12]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f003 f870 	bl	80057de <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026fe:	78fb      	ldrb	r3, [r7, #3]
 8002700:	f003 030f 	and.w	r3, r3, #15
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10a      	bne.n	800271e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6818      	ldr	r0, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	b2d9      	uxtb	r1, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002718:	461a      	mov	r2, r3
 800271a:	f003 fa4f 	bl	8005bbc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800273c:	78fb      	ldrb	r3, [r7, #3]
 800273e:	f003 020f 	and.w	r2, r3, #15
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	429a      	cmp	r2, r3
 8002748:	d901      	bls.n	800274e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e042      	b.n	80027d4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800274e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002752:	2b00      	cmp	r3, #0
 8002754:	da0f      	bge.n	8002776 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002756:	78fb      	ldrb	r3, [r7, #3]
 8002758:	f003 020f 	and.w	r2, r3, #15
 800275c:	4613      	mov	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	3338      	adds	r3, #56	; 0x38
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	4413      	add	r3, r2
 800276a:	3304      	adds	r3, #4
 800276c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2201      	movs	r2, #1
 8002772:	705a      	strb	r2, [r3, #1]
 8002774:	e00f      	b.n	8002796 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002776:	78fb      	ldrb	r3, [r7, #3]
 8002778:	f003 020f 	and.w	r2, r3, #15
 800277c:	4613      	mov	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	1a9b      	subs	r3, r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	4413      	add	r3, r2
 800278c:	3304      	adds	r3, #4
 800278e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800279c:	78fb      	ldrb	r3, [r7, #3]
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d101      	bne.n	80027b6 <HAL_PCD_EP_ClrStall+0x86>
 80027b2:	2302      	movs	r3, #2
 80027b4:	e00e      	b.n	80027d4 <HAL_PCD_EP_ClrStall+0xa4>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68f9      	ldr	r1, [r7, #12]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f003 f878 	bl	80058ba <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08a      	sub	sp, #40	; 0x28
 80027e0:	af02      	add	r7, sp, #8
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	4613      	mov	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	1a9b      	subs	r3, r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	3338      	adds	r3, #56	; 0x38
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	4413      	add	r3, r2
 8002800:	3304      	adds	r3, #4
 8002802:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	699a      	ldr	r2, [r3, #24]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	429a      	cmp	r2, r3
 800280e:	d901      	bls.n	8002814 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e06c      	b.n	80028ee <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	695a      	ldr	r2, [r3, #20]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	69fa      	ldr	r2, [r7, #28]
 8002826:	429a      	cmp	r2, r3
 8002828:	d902      	bls.n	8002830 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	3303      	adds	r3, #3
 8002834:	089b      	lsrs	r3, r3, #2
 8002836:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002838:	e02b      	b.n	8002892 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	695a      	ldr	r2, [r3, #20]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	69fa      	ldr	r2, [r7, #28]
 800284c:	429a      	cmp	r2, r3
 800284e:	d902      	bls.n	8002856 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3303      	adds	r3, #3
 800285a:	089b      	lsrs	r3, r3, #2
 800285c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	68d9      	ldr	r1, [r3, #12]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	b2da      	uxtb	r2, r3
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800286e:	b2db      	uxtb	r3, r3
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	4603      	mov	r3, r0
 8002874:	6978      	ldr	r0, [r7, #20]
 8002876:	f002 ff54 	bl	8005722 <USB_WritePacket>

    ep->xfer_buff  += len;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	441a      	add	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	699a      	ldr	r2, [r3, #24]
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	441a      	add	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	015a      	lsls	r2, r3, #5
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4413      	add	r3, r2
 800289a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d809      	bhi.n	80028bc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	699a      	ldr	r2, [r3, #24]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d203      	bcs.n	80028bc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1be      	bne.n	800283a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	695a      	ldr	r2, [r3, #20]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d811      	bhi.n	80028ec <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	f003 030f 	and.w	r3, r3, #15
 80028ce:	2201      	movs	r2, #1
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	43db      	mvns	r3, r3
 80028e2:	6939      	ldr	r1, [r7, #16]
 80028e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80028e8:	4013      	ands	r3, r2
 80028ea:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3720      	adds	r7, #32
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	333c      	adds	r3, #60	; 0x3c
 8002910:	3304      	adds	r3, #4
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	015a      	lsls	r2, r3, #5
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4413      	add	r3, r2
 800291e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	2b01      	cmp	r3, #1
 800292c:	f040 80a0 	bne.w	8002a70 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b00      	cmp	r3, #0
 8002938:	d015      	beq.n	8002966 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4a72      	ldr	r2, [pc, #456]	; (8002b08 <PCD_EP_OutXfrComplete_int+0x210>)
 800293e:	4293      	cmp	r3, r2
 8002940:	f240 80dd 	bls.w	8002afe <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 80d7 	beq.w	8002afe <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4413      	add	r3, r2
 8002958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800295c:	461a      	mov	r2, r3
 800295e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002962:	6093      	str	r3, [r2, #8]
 8002964:	e0cb      	b.n	8002afe <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f003 0320 	and.w	r3, r3, #32
 800296c:	2b00      	cmp	r3, #0
 800296e:	d009      	beq.n	8002984 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	4413      	add	r3, r2
 8002978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800297c:	461a      	mov	r2, r3
 800297e:	2320      	movs	r3, #32
 8002980:	6093      	str	r3, [r2, #8]
 8002982:	e0bc      	b.n	8002afe <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800298a:	2b00      	cmp	r3, #0
 800298c:	f040 80b7 	bne.w	8002afe <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4a5d      	ldr	r2, [pc, #372]	; (8002b08 <PCD_EP_OutXfrComplete_int+0x210>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d90f      	bls.n	80029b8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	015a      	lsls	r2, r3, #5
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	4413      	add	r3, r2
 80029aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029ae:	461a      	mov	r2, r3
 80029b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029b4:	6093      	str	r3, [r2, #8]
 80029b6:	e0a2      	b.n	8002afe <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	4613      	mov	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80029ca:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	0159      	lsls	r1, r3, #5
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	440b      	add	r3, r1
 80029d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80029de:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	4613      	mov	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	1a9b      	subs	r3, r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4403      	add	r3, r0
 80029ee:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80029f2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	4613      	mov	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	1a9b      	subs	r3, r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a06:	6819      	ldr	r1, [r3, #0]
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	1a9b      	subs	r3, r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4403      	add	r3, r0
 8002a16:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4419      	add	r1, r3
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	4613      	mov	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	1a9b      	subs	r3, r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4403      	add	r3, r0
 8002a2c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a30:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d114      	bne.n	8002a62 <PCD_EP_OutXfrComplete_int+0x16a>
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d108      	bne.n	8002a62 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6818      	ldr	r0, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	f003 f8ad 	bl	8005bbc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	4619      	mov	r1, r3
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f004 ffaf 	bl	80079cc <HAL_PCD_DataOutStageCallback>
 8002a6e:	e046      	b.n	8002afe <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4a26      	ldr	r2, [pc, #152]	; (8002b0c <PCD_EP_OutXfrComplete_int+0x214>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d124      	bne.n	8002ac2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00a      	beq.n	8002a98 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	015a      	lsls	r2, r3, #5
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4413      	add	r3, r2
 8002a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a8e:	461a      	mov	r2, r3
 8002a90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a94:	6093      	str	r3, [r2, #8]
 8002a96:	e032      	b.n	8002afe <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f003 0320 	and.w	r3, r3, #32
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d008      	beq.n	8002ab4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aae:	461a      	mov	r2, r3
 8002ab0:	2320      	movs	r3, #32
 8002ab2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	4619      	mov	r1, r3
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f004 ff86 	bl	80079cc <HAL_PCD_DataOutStageCallback>
 8002ac0:	e01d      	b.n	8002afe <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d114      	bne.n	8002af2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	4613      	mov	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	1a9b      	subs	r3, r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d108      	bne.n	8002af2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6818      	ldr	r0, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002aea:	461a      	mov	r2, r3
 8002aec:	2100      	movs	r1, #0
 8002aee:	f003 f865 	bl	8005bbc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	4619      	mov	r1, r3
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f004 ff67 	bl	80079cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	4f54300a 	.word	0x4f54300a
 8002b0c:	4f54310a 	.word	0x4f54310a

08002b10 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	333c      	adds	r3, #60	; 0x3c
 8002b28:	3304      	adds	r3, #4
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4a15      	ldr	r2, [pc, #84]	; (8002b98 <PCD_EP_OutSetupPacket_int+0x88>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d90e      	bls.n	8002b64 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d009      	beq.n	8002b64 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b62:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f004 ff1f 	bl	80079a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4a0a      	ldr	r2, [pc, #40]	; (8002b98 <PCD_EP_OutSetupPacket_int+0x88>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d90c      	bls.n	8002b8c <PCD_EP_OutSetupPacket_int+0x7c>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d108      	bne.n	8002b8c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6818      	ldr	r0, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b84:	461a      	mov	r2, r3
 8002b86:	2101      	movs	r1, #1
 8002b88:	f003 f818 	bl	8005bbc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	4f54300a 	.word	0x4f54300a

08002b9c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	70fb      	strb	r3, [r7, #3]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d107      	bne.n	8002bca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002bba:	883b      	ldrh	r3, [r7, #0]
 8002bbc:	0419      	lsls	r1, r3, #16
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	629a      	str	r2, [r3, #40]	; 0x28
 8002bc8:	e028      	b.n	8002c1c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd0:	0c1b      	lsrs	r3, r3, #16
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002bd8:	2300      	movs	r3, #0
 8002bda:	73fb      	strb	r3, [r7, #15]
 8002bdc:	e00d      	b.n	8002bfa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	3340      	adds	r3, #64	; 0x40
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	0c1b      	lsrs	r3, r3, #16
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	73fb      	strb	r3, [r7, #15]
 8002bfa:	7bfa      	ldrb	r2, [r7, #15]
 8002bfc:	78fb      	ldrb	r3, [r7, #3]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d3ec      	bcc.n	8002bde <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002c04:	883b      	ldrh	r3, [r7, #0]
 8002c06:	0418      	lsls	r0, r3, #16
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6819      	ldr	r1, [r3, #0]
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	4302      	orrs	r2, r0
 8002c14:	3340      	adds	r3, #64	; 0x40
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	460b      	mov	r3, r1
 8002c34:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	887a      	ldrh	r2, [r7, #2]
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e25b      	b.n	800312e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d075      	beq.n	8002d6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c82:	4ba3      	ldr	r3, [pc, #652]	; (8002f10 <HAL_RCC_OscConfig+0x2ac>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 030c 	and.w	r3, r3, #12
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	d00c      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c8e:	4ba0      	ldr	r3, [pc, #640]	; (8002f10 <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d112      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c9a:	4b9d      	ldr	r3, [pc, #628]	; (8002f10 <HAL_RCC_OscConfig+0x2ac>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ca6:	d10b      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca8:	4b99      	ldr	r3, [pc, #612]	; (8002f10 <HAL_RCC_OscConfig+0x2ac>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d05b      	beq.n	8002d6c <HAL_RCC_OscConfig+0x108>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d157      	bne.n	8002d6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e236      	b.n	800312e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc8:	d106      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x74>
 8002cca:	4b91      	ldr	r3, [pc, #580]	; (8002f10 <HAL_RCC_OscConfig+0x2ac>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a90      	ldr	r2, [pc, #576]	; (8002f10 <HAL_RCC_OscConfig+0x2ac>)
 8002cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	e01d      	b.n	8002d14 <HAL_RCC_OscConfig+0xb0>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ce0:	d10c      	bne.n	8002cfc <HAL_RCC_OscConfig+0x98>
 8002ce2:	4b8b      	ldr	r3, [pc, #556]	; (8002f10 <HAL_RCC_OscConfig+0x2ac>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a8a      	ldr	r2, [pc, #552]	; (8002f10 <HAL_RCC_OscConfig+0x2ac>)
 8002ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	4b88      	ldr	r3, [pc, #544]	; (8002f10 <HAL_RCC_OscConfig+0x2ac>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a87      	ldr	r2, [pc, #540]	; (8002f10 <HAL_RCC_OscConfig+0x2ac>)
 8002cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	e00b      	b.n	8002d14 <HAL_RCC_OscConfig+0xb0>
 8002cfc:	4b84      	ldr	r3, [pc, #528]	; (8002f10 <HAL_RCC_OscConfig+0x2ac>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a83      	ldr	r2, [pc, #524]	; (8002f10 <HAL_RCC_OscConfig+0x2ac>)
 8002d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d06:	6013      	str	r3, [r2, #0]
 8002d08:	4b81      	ldr	r3, [pc, #516]	; (8002f10 <HAL_RCC_OscConfig+0x2ac>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a80      	ldr	r2, [pc, #512]	; (8002f10 <HAL_RCC_OscConfig+0x2ac>)
 8002d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d013      	beq.n	8002d44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1c:	f7fe f9f2 	bl	8001104 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d24:	f7fe f9ee 	bl	8001104 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b64      	cmp	r3, #100	; 0x64
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e1fb      	b.n	800312e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d36:	4b76      	ldr	r3, [pc, #472]	; (8002f10 <HAL_RCC_OscConfig+0x2ac>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0xc0>
 8002d42:	e014      	b.n	8002d6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d44:	f7fe f9de 	bl	8001104 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d4c:	f7fe f9da 	bl	8001104 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b64      	cmp	r3, #100	; 0x64
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e1e7      	b.n	800312e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d5e:	4b6c      	ldr	r3, [pc, #432]	; (8002f10 <HAL_RCC_OscConfig+0x2ac>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0xe8>
 8002d6a:	e000      	b.n	8002d6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d063      	beq.n	8002e42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d7a:	4b65      	ldr	r3, [pc, #404]	; (8002f10 <HAL_RCC_OscConfig+0x2ac>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00b      	beq.n	8002d9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d86:	4b62      	ldr	r3, [pc, #392]	; (8002f10 <HAL_RCC_OscConfig+0x2ac>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d11c      	bne.n	8002dcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d92:	4b5f      	ldr	r3, [pc, #380]	; (8002f10 <HAL_RCC_OscConfig+0x2ac>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d116      	bne.n	8002dcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d9e:	4b5c      	ldr	r3, [pc, #368]	; (8002f10 <HAL_RCC_OscConfig+0x2ac>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d005      	beq.n	8002db6 <HAL_RCC_OscConfig+0x152>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d001      	beq.n	8002db6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e1bb      	b.n	800312e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db6:	4b56      	ldr	r3, [pc, #344]	; (8002f10 <HAL_RCC_OscConfig+0x2ac>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4952      	ldr	r1, [pc, #328]	; (8002f10 <HAL_RCC_OscConfig+0x2ac>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dca:	e03a      	b.n	8002e42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d020      	beq.n	8002e16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dd4:	4b4f      	ldr	r3, [pc, #316]	; (8002f14 <HAL_RCC_OscConfig+0x2b0>)
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dda:	f7fe f993 	bl	8001104 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002de2:	f7fe f98f 	bl	8001104 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e19c      	b.n	800312e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df4:	4b46      	ldr	r3, [pc, #280]	; (8002f10 <HAL_RCC_OscConfig+0x2ac>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0f0      	beq.n	8002de2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e00:	4b43      	ldr	r3, [pc, #268]	; (8002f10 <HAL_RCC_OscConfig+0x2ac>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	4940      	ldr	r1, [pc, #256]	; (8002f10 <HAL_RCC_OscConfig+0x2ac>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	600b      	str	r3, [r1, #0]
 8002e14:	e015      	b.n	8002e42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e16:	4b3f      	ldr	r3, [pc, #252]	; (8002f14 <HAL_RCC_OscConfig+0x2b0>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1c:	f7fe f972 	bl	8001104 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e24:	f7fe f96e 	bl	8001104 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e17b      	b.n	800312e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e36:	4b36      	ldr	r3, [pc, #216]	; (8002f10 <HAL_RCC_OscConfig+0x2ac>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f0      	bne.n	8002e24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d030      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d016      	beq.n	8002e84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e56:	4b30      	ldr	r3, [pc, #192]	; (8002f18 <HAL_RCC_OscConfig+0x2b4>)
 8002e58:	2201      	movs	r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5c:	f7fe f952 	bl	8001104 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e64:	f7fe f94e 	bl	8001104 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e15b      	b.n	800312e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e76:	4b26      	ldr	r3, [pc, #152]	; (8002f10 <HAL_RCC_OscConfig+0x2ac>)
 8002e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0f0      	beq.n	8002e64 <HAL_RCC_OscConfig+0x200>
 8002e82:	e015      	b.n	8002eb0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e84:	4b24      	ldr	r3, [pc, #144]	; (8002f18 <HAL_RCC_OscConfig+0x2b4>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e8a:	f7fe f93b 	bl	8001104 <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e92:	f7fe f937 	bl	8001104 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e144      	b.n	800312e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea4:	4b1a      	ldr	r3, [pc, #104]	; (8002f10 <HAL_RCC_OscConfig+0x2ac>)
 8002ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1f0      	bne.n	8002e92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 80a0 	beq.w	8002ffe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ec2:	4b13      	ldr	r3, [pc, #76]	; (8002f10 <HAL_RCC_OscConfig+0x2ac>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10f      	bne.n	8002eee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60bb      	str	r3, [r7, #8]
 8002ed2:	4b0f      	ldr	r3, [pc, #60]	; (8002f10 <HAL_RCC_OscConfig+0x2ac>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	4a0e      	ldr	r2, [pc, #56]	; (8002f10 <HAL_RCC_OscConfig+0x2ac>)
 8002ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002edc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ede:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <HAL_RCC_OscConfig+0x2ac>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee6:	60bb      	str	r3, [r7, #8]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eea:	2301      	movs	r3, #1
 8002eec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eee:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <HAL_RCC_OscConfig+0x2b8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d121      	bne.n	8002f3e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002efa:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <HAL_RCC_OscConfig+0x2b8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a07      	ldr	r2, [pc, #28]	; (8002f1c <HAL_RCC_OscConfig+0x2b8>)
 8002f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f06:	f7fe f8fd 	bl	8001104 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0c:	e011      	b.n	8002f32 <HAL_RCC_OscConfig+0x2ce>
 8002f0e:	bf00      	nop
 8002f10:	40023800 	.word	0x40023800
 8002f14:	42470000 	.word	0x42470000
 8002f18:	42470e80 	.word	0x42470e80
 8002f1c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f20:	f7fe f8f0 	bl	8001104 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e0fd      	b.n	800312e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f32:	4b81      	ldr	r3, [pc, #516]	; (8003138 <HAL_RCC_OscConfig+0x4d4>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0f0      	beq.n	8002f20 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d106      	bne.n	8002f54 <HAL_RCC_OscConfig+0x2f0>
 8002f46:	4b7d      	ldr	r3, [pc, #500]	; (800313c <HAL_RCC_OscConfig+0x4d8>)
 8002f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4a:	4a7c      	ldr	r2, [pc, #496]	; (800313c <HAL_RCC_OscConfig+0x4d8>)
 8002f4c:	f043 0301 	orr.w	r3, r3, #1
 8002f50:	6713      	str	r3, [r2, #112]	; 0x70
 8002f52:	e01c      	b.n	8002f8e <HAL_RCC_OscConfig+0x32a>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b05      	cmp	r3, #5
 8002f5a:	d10c      	bne.n	8002f76 <HAL_RCC_OscConfig+0x312>
 8002f5c:	4b77      	ldr	r3, [pc, #476]	; (800313c <HAL_RCC_OscConfig+0x4d8>)
 8002f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f60:	4a76      	ldr	r2, [pc, #472]	; (800313c <HAL_RCC_OscConfig+0x4d8>)
 8002f62:	f043 0304 	orr.w	r3, r3, #4
 8002f66:	6713      	str	r3, [r2, #112]	; 0x70
 8002f68:	4b74      	ldr	r3, [pc, #464]	; (800313c <HAL_RCC_OscConfig+0x4d8>)
 8002f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6c:	4a73      	ldr	r2, [pc, #460]	; (800313c <HAL_RCC_OscConfig+0x4d8>)
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	6713      	str	r3, [r2, #112]	; 0x70
 8002f74:	e00b      	b.n	8002f8e <HAL_RCC_OscConfig+0x32a>
 8002f76:	4b71      	ldr	r3, [pc, #452]	; (800313c <HAL_RCC_OscConfig+0x4d8>)
 8002f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7a:	4a70      	ldr	r2, [pc, #448]	; (800313c <HAL_RCC_OscConfig+0x4d8>)
 8002f7c:	f023 0301 	bic.w	r3, r3, #1
 8002f80:	6713      	str	r3, [r2, #112]	; 0x70
 8002f82:	4b6e      	ldr	r3, [pc, #440]	; (800313c <HAL_RCC_OscConfig+0x4d8>)
 8002f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f86:	4a6d      	ldr	r2, [pc, #436]	; (800313c <HAL_RCC_OscConfig+0x4d8>)
 8002f88:	f023 0304 	bic.w	r3, r3, #4
 8002f8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d015      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f96:	f7fe f8b5 	bl	8001104 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f9c:	e00a      	b.n	8002fb4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f9e:	f7fe f8b1 	bl	8001104 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e0bc      	b.n	800312e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb4:	4b61      	ldr	r3, [pc, #388]	; (800313c <HAL_RCC_OscConfig+0x4d8>)
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0ee      	beq.n	8002f9e <HAL_RCC_OscConfig+0x33a>
 8002fc0:	e014      	b.n	8002fec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc2:	f7fe f89f 	bl	8001104 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fca:	f7fe f89b 	bl	8001104 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e0a6      	b.n	800312e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe0:	4b56      	ldr	r3, [pc, #344]	; (800313c <HAL_RCC_OscConfig+0x4d8>)
 8002fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1ee      	bne.n	8002fca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fec:	7dfb      	ldrb	r3, [r7, #23]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d105      	bne.n	8002ffe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff2:	4b52      	ldr	r3, [pc, #328]	; (800313c <HAL_RCC_OscConfig+0x4d8>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	4a51      	ldr	r2, [pc, #324]	; (800313c <HAL_RCC_OscConfig+0x4d8>)
 8002ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ffc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 8092 	beq.w	800312c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003008:	4b4c      	ldr	r3, [pc, #304]	; (800313c <HAL_RCC_OscConfig+0x4d8>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 030c 	and.w	r3, r3, #12
 8003010:	2b08      	cmp	r3, #8
 8003012:	d05c      	beq.n	80030ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d141      	bne.n	80030a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301c:	4b48      	ldr	r3, [pc, #288]	; (8003140 <HAL_RCC_OscConfig+0x4dc>)
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003022:	f7fe f86f 	bl	8001104 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800302a:	f7fe f86b 	bl	8001104 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e078      	b.n	800312e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303c:	4b3f      	ldr	r3, [pc, #252]	; (800313c <HAL_RCC_OscConfig+0x4d8>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1f0      	bne.n	800302a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69da      	ldr	r2, [r3, #28]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	431a      	orrs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	019b      	lsls	r3, r3, #6
 8003058:	431a      	orrs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305e:	085b      	lsrs	r3, r3, #1
 8003060:	3b01      	subs	r3, #1
 8003062:	041b      	lsls	r3, r3, #16
 8003064:	431a      	orrs	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306a:	061b      	lsls	r3, r3, #24
 800306c:	4933      	ldr	r1, [pc, #204]	; (800313c <HAL_RCC_OscConfig+0x4d8>)
 800306e:	4313      	orrs	r3, r2
 8003070:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003072:	4b33      	ldr	r3, [pc, #204]	; (8003140 <HAL_RCC_OscConfig+0x4dc>)
 8003074:	2201      	movs	r2, #1
 8003076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003078:	f7fe f844 	bl	8001104 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003080:	f7fe f840 	bl	8001104 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e04d      	b.n	800312e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003092:	4b2a      	ldr	r3, [pc, #168]	; (800313c <HAL_RCC_OscConfig+0x4d8>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0f0      	beq.n	8003080 <HAL_RCC_OscConfig+0x41c>
 800309e:	e045      	b.n	800312c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a0:	4b27      	ldr	r3, [pc, #156]	; (8003140 <HAL_RCC_OscConfig+0x4dc>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a6:	f7fe f82d 	bl	8001104 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ae:	f7fe f829 	bl	8001104 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e036      	b.n	800312e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c0:	4b1e      	ldr	r3, [pc, #120]	; (800313c <HAL_RCC_OscConfig+0x4d8>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1f0      	bne.n	80030ae <HAL_RCC_OscConfig+0x44a>
 80030cc:	e02e      	b.n	800312c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e029      	b.n	800312e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030da:	4b18      	ldr	r3, [pc, #96]	; (800313c <HAL_RCC_OscConfig+0x4d8>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d11c      	bne.n	8003128 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d115      	bne.n	8003128 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003102:	4013      	ands	r3, r2
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003108:	4293      	cmp	r3, r2
 800310a:	d10d      	bne.n	8003128 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003116:	429a      	cmp	r2, r3
 8003118:	d106      	bne.n	8003128 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003124:	429a      	cmp	r2, r3
 8003126:	d001      	beq.n	800312c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e000      	b.n	800312e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40007000 	.word	0x40007000
 800313c:	40023800 	.word	0x40023800
 8003140:	42470060 	.word	0x42470060

08003144 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e0cc      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003158:	4b68      	ldr	r3, [pc, #416]	; (80032fc <HAL_RCC_ClockConfig+0x1b8>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 030f 	and.w	r3, r3, #15
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d90c      	bls.n	8003180 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003166:	4b65      	ldr	r3, [pc, #404]	; (80032fc <HAL_RCC_ClockConfig+0x1b8>)
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800316e:	4b63      	ldr	r3, [pc, #396]	; (80032fc <HAL_RCC_ClockConfig+0x1b8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	429a      	cmp	r2, r3
 800317a:	d001      	beq.n	8003180 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e0b8      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d020      	beq.n	80031ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003198:	4b59      	ldr	r3, [pc, #356]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	4a58      	ldr	r2, [pc, #352]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0308 	and.w	r3, r3, #8
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031b0:	4b53      	ldr	r3, [pc, #332]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	4a52      	ldr	r2, [pc, #328]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031bc:	4b50      	ldr	r3, [pc, #320]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	494d      	ldr	r1, [pc, #308]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d044      	beq.n	8003264 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d107      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e2:	4b47      	ldr	r3, [pc, #284]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d119      	bne.n	8003222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e07f      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d003      	beq.n	8003202 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031fe:	2b03      	cmp	r3, #3
 8003200:	d107      	bne.n	8003212 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003202:	4b3f      	ldr	r3, [pc, #252]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d109      	bne.n	8003222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e06f      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003212:	4b3b      	ldr	r3, [pc, #236]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e067      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003222:	4b37      	ldr	r3, [pc, #220]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f023 0203 	bic.w	r2, r3, #3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	4934      	ldr	r1, [pc, #208]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 8003230:	4313      	orrs	r3, r2
 8003232:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003234:	f7fd ff66 	bl	8001104 <HAL_GetTick>
 8003238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323a:	e00a      	b.n	8003252 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800323c:	f7fd ff62 	bl	8001104 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	f241 3288 	movw	r2, #5000	; 0x1388
 800324a:	4293      	cmp	r3, r2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e04f      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003252:	4b2b      	ldr	r3, [pc, #172]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 020c 	and.w	r2, r3, #12
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	429a      	cmp	r2, r3
 8003262:	d1eb      	bne.n	800323c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003264:	4b25      	ldr	r3, [pc, #148]	; (80032fc <HAL_RCC_ClockConfig+0x1b8>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 030f 	and.w	r3, r3, #15
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d20c      	bcs.n	800328c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003272:	4b22      	ldr	r3, [pc, #136]	; (80032fc <HAL_RCC_ClockConfig+0x1b8>)
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800327a:	4b20      	ldr	r3, [pc, #128]	; (80032fc <HAL_RCC_ClockConfig+0x1b8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d001      	beq.n	800328c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e032      	b.n	80032f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b00      	cmp	r3, #0
 8003296:	d008      	beq.n	80032aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003298:	4b19      	ldr	r3, [pc, #100]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	4916      	ldr	r1, [pc, #88]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d009      	beq.n	80032ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032b6:	4b12      	ldr	r3, [pc, #72]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	490e      	ldr	r1, [pc, #56]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032ca:	f000 f821 	bl	8003310 <HAL_RCC_GetSysClockFreq>
 80032ce:	4601      	mov	r1, r0
 80032d0:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	091b      	lsrs	r3, r3, #4
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	4a0a      	ldr	r2, [pc, #40]	; (8003304 <HAL_RCC_ClockConfig+0x1c0>)
 80032dc:	5cd3      	ldrb	r3, [r2, r3]
 80032de:	fa21 f303 	lsr.w	r3, r1, r3
 80032e2:	4a09      	ldr	r2, [pc, #36]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80032e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032e6:	4b09      	ldr	r3, [pc, #36]	; (800330c <HAL_RCC_ClockConfig+0x1c8>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fd fec6 	bl	800107c <HAL_InitTick>

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40023c00 	.word	0x40023c00
 8003300:	40023800 	.word	0x40023800
 8003304:	08008150 	.word	0x08008150
 8003308:	20000000 	.word	0x20000000
 800330c:	20000004 	.word	0x20000004

08003310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	607b      	str	r3, [r7, #4]
 800331a:	2300      	movs	r3, #0
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	2300      	movs	r3, #0
 8003320:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003326:	4b63      	ldr	r3, [pc, #396]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	2b04      	cmp	r3, #4
 8003330:	d007      	beq.n	8003342 <HAL_RCC_GetSysClockFreq+0x32>
 8003332:	2b08      	cmp	r3, #8
 8003334:	d008      	beq.n	8003348 <HAL_RCC_GetSysClockFreq+0x38>
 8003336:	2b00      	cmp	r3, #0
 8003338:	f040 80b4 	bne.w	80034a4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800333c:	4b5e      	ldr	r3, [pc, #376]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800333e:	60bb      	str	r3, [r7, #8]
       break;
 8003340:	e0b3      	b.n	80034aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003342:	4b5d      	ldr	r3, [pc, #372]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003344:	60bb      	str	r3, [r7, #8]
      break;
 8003346:	e0b0      	b.n	80034aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003348:	4b5a      	ldr	r3, [pc, #360]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003350:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003352:	4b58      	ldr	r3, [pc, #352]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d04a      	beq.n	80033f4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800335e:	4b55      	ldr	r3, [pc, #340]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	099b      	lsrs	r3, r3, #6
 8003364:	f04f 0400 	mov.w	r4, #0
 8003368:	f240 11ff 	movw	r1, #511	; 0x1ff
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	ea03 0501 	and.w	r5, r3, r1
 8003374:	ea04 0602 	and.w	r6, r4, r2
 8003378:	4629      	mov	r1, r5
 800337a:	4632      	mov	r2, r6
 800337c:	f04f 0300 	mov.w	r3, #0
 8003380:	f04f 0400 	mov.w	r4, #0
 8003384:	0154      	lsls	r4, r2, #5
 8003386:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800338a:	014b      	lsls	r3, r1, #5
 800338c:	4619      	mov	r1, r3
 800338e:	4622      	mov	r2, r4
 8003390:	1b49      	subs	r1, r1, r5
 8003392:	eb62 0206 	sbc.w	r2, r2, r6
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	f04f 0400 	mov.w	r4, #0
 800339e:	0194      	lsls	r4, r2, #6
 80033a0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80033a4:	018b      	lsls	r3, r1, #6
 80033a6:	1a5b      	subs	r3, r3, r1
 80033a8:	eb64 0402 	sbc.w	r4, r4, r2
 80033ac:	f04f 0100 	mov.w	r1, #0
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	00e2      	lsls	r2, r4, #3
 80033b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80033ba:	00d9      	lsls	r1, r3, #3
 80033bc:	460b      	mov	r3, r1
 80033be:	4614      	mov	r4, r2
 80033c0:	195b      	adds	r3, r3, r5
 80033c2:	eb44 0406 	adc.w	r4, r4, r6
 80033c6:	f04f 0100 	mov.w	r1, #0
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	02a2      	lsls	r2, r4, #10
 80033d0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80033d4:	0299      	lsls	r1, r3, #10
 80033d6:	460b      	mov	r3, r1
 80033d8:	4614      	mov	r4, r2
 80033da:	4618      	mov	r0, r3
 80033dc:	4621      	mov	r1, r4
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f04f 0400 	mov.w	r4, #0
 80033e4:	461a      	mov	r2, r3
 80033e6:	4623      	mov	r3, r4
 80033e8:	f7fc feee 	bl	80001c8 <__aeabi_uldivmod>
 80033ec:	4603      	mov	r3, r0
 80033ee:	460c      	mov	r4, r1
 80033f0:	60fb      	str	r3, [r7, #12]
 80033f2:	e049      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033f4:	4b2f      	ldr	r3, [pc, #188]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	099b      	lsrs	r3, r3, #6
 80033fa:	f04f 0400 	mov.w	r4, #0
 80033fe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003402:	f04f 0200 	mov.w	r2, #0
 8003406:	ea03 0501 	and.w	r5, r3, r1
 800340a:	ea04 0602 	and.w	r6, r4, r2
 800340e:	4629      	mov	r1, r5
 8003410:	4632      	mov	r2, r6
 8003412:	f04f 0300 	mov.w	r3, #0
 8003416:	f04f 0400 	mov.w	r4, #0
 800341a:	0154      	lsls	r4, r2, #5
 800341c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003420:	014b      	lsls	r3, r1, #5
 8003422:	4619      	mov	r1, r3
 8003424:	4622      	mov	r2, r4
 8003426:	1b49      	subs	r1, r1, r5
 8003428:	eb62 0206 	sbc.w	r2, r2, r6
 800342c:	f04f 0300 	mov.w	r3, #0
 8003430:	f04f 0400 	mov.w	r4, #0
 8003434:	0194      	lsls	r4, r2, #6
 8003436:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800343a:	018b      	lsls	r3, r1, #6
 800343c:	1a5b      	subs	r3, r3, r1
 800343e:	eb64 0402 	sbc.w	r4, r4, r2
 8003442:	f04f 0100 	mov.w	r1, #0
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	00e2      	lsls	r2, r4, #3
 800344c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003450:	00d9      	lsls	r1, r3, #3
 8003452:	460b      	mov	r3, r1
 8003454:	4614      	mov	r4, r2
 8003456:	195b      	adds	r3, r3, r5
 8003458:	eb44 0406 	adc.w	r4, r4, r6
 800345c:	f04f 0100 	mov.w	r1, #0
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	02a2      	lsls	r2, r4, #10
 8003466:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800346a:	0299      	lsls	r1, r3, #10
 800346c:	460b      	mov	r3, r1
 800346e:	4614      	mov	r4, r2
 8003470:	4618      	mov	r0, r3
 8003472:	4621      	mov	r1, r4
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f04f 0400 	mov.w	r4, #0
 800347a:	461a      	mov	r2, r3
 800347c:	4623      	mov	r3, r4
 800347e:	f7fc fea3 	bl	80001c8 <__aeabi_uldivmod>
 8003482:	4603      	mov	r3, r0
 8003484:	460c      	mov	r4, r1
 8003486:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003488:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	0c1b      	lsrs	r3, r3, #16
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	3301      	adds	r3, #1
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a0:	60bb      	str	r3, [r7, #8]
      break;
 80034a2:	e002      	b.n	80034aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034a4:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80034a6:	60bb      	str	r3, [r7, #8]
      break;
 80034a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034aa:	68bb      	ldr	r3, [r7, #8]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034b4:	40023800 	.word	0x40023800
 80034b8:	00f42400 	.word	0x00f42400

080034bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c0:	4b03      	ldr	r3, [pc, #12]	; (80034d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034c2:	681b      	ldr	r3, [r3, #0]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	20000000 	.word	0x20000000

080034d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034d8:	f7ff fff0 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 80034dc:	4601      	mov	r1, r0
 80034de:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	0a9b      	lsrs	r3, r3, #10
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	4a03      	ldr	r2, [pc, #12]	; (80034f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ea:	5cd3      	ldrb	r3, [r2, r3]
 80034ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40023800 	.word	0x40023800
 80034f8:	08008160 	.word	0x08008160

080034fc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003508:	2300      	movs	r3, #0
 800350a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b00      	cmp	r3, #0
 8003516:	d105      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003520:	2b00      	cmp	r3, #0
 8003522:	d035      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003524:	4b62      	ldr	r3, [pc, #392]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800352a:	f7fd fdeb 	bl	8001104 <HAL_GetTick>
 800352e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003530:	e008      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003532:	f7fd fde7 	bl	8001104 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d901      	bls.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e0b0      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003544:	4b5b      	ldr	r3, [pc, #364]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1f0      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	019a      	lsls	r2, r3, #6
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	071b      	lsls	r3, r3, #28
 800355c:	4955      	ldr	r1, [pc, #340]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003564:	4b52      	ldr	r3, [pc, #328]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003566:	2201      	movs	r2, #1
 8003568:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800356a:	f7fd fdcb 	bl	8001104 <HAL_GetTick>
 800356e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003570:	e008      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003572:	f7fd fdc7 	bl	8001104 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e090      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003584:	4b4b      	ldr	r3, [pc, #300]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0f0      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 8083 	beq.w	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	4b44      	ldr	r3, [pc, #272]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	4a43      	ldr	r2, [pc, #268]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ac:	6413      	str	r3, [r2, #64]	; 0x40
 80035ae:	4b41      	ldr	r3, [pc, #260]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80035ba:	4b3f      	ldr	r3, [pc, #252]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a3e      	ldr	r2, [pc, #248]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80035c6:	f7fd fd9d 	bl	8001104 <HAL_GetTick>
 80035ca:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80035cc:	e008      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80035ce:	f7fd fd99 	bl	8001104 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d901      	bls.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e062      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80035e0:	4b35      	ldr	r3, [pc, #212]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0f0      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035ec:	4b31      	ldr	r3, [pc, #196]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d02f      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	429a      	cmp	r2, r3
 8003608:	d028      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800360a:	4b2a      	ldr	r3, [pc, #168]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800360c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003612:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003614:	4b29      	ldr	r3, [pc, #164]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003616:	2201      	movs	r2, #1
 8003618:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800361a:	4b28      	ldr	r3, [pc, #160]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003620:	4a24      	ldr	r2, [pc, #144]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003626:	4b23      	ldr	r3, [pc, #140]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b01      	cmp	r3, #1
 8003630:	d114      	bne.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003632:	f7fd fd67 	bl	8001104 <HAL_GetTick>
 8003636:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003638:	e00a      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800363a:	f7fd fd63 	bl	8001104 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	f241 3288 	movw	r2, #5000	; 0x1388
 8003648:	4293      	cmp	r3, r2
 800364a:	d901      	bls.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e02a      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003650:	4b18      	ldr	r3, [pc, #96]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0ee      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003664:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003668:	d10d      	bne.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800366a:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800367a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800367e:	490d      	ldr	r1, [pc, #52]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003680:	4313      	orrs	r3, r2
 8003682:	608b      	str	r3, [r1, #8]
 8003684:	e005      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003686:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	4a0a      	ldr	r2, [pc, #40]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800368c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003690:	6093      	str	r3, [r2, #8]
 8003692:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003694:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800369e:	4905      	ldr	r1, [pc, #20]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	42470068 	.word	0x42470068
 80036b4:	40023800 	.word	0x40023800
 80036b8:	40007000 	.word	0x40007000
 80036bc:	42470e40 	.word	0x42470e40

080036c0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e083      	b.n	80037da <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	7f5b      	ldrb	r3, [r3, #29]
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d105      	bne.n	80036e8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7fd f912 	bl	800090c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	22ca      	movs	r2, #202	; 0xca
 80036f4:	625a      	str	r2, [r3, #36]	; 0x24
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2253      	movs	r2, #83	; 0x53
 80036fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f897 	bl	8003832 <RTC_EnterInitMode>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d008      	beq.n	800371c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	22ff      	movs	r2, #255	; 0xff
 8003710:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2204      	movs	r2, #4
 8003716:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e05e      	b.n	80037da <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6812      	ldr	r2, [r2, #0]
 8003726:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800372a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800372e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6899      	ldr	r1, [r3, #8]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	431a      	orrs	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	68d2      	ldr	r2, [r2, #12]
 8003756:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6919      	ldr	r1, [r3, #16]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	041a      	lsls	r2, r3, #16
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800377a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10e      	bne.n	80037a8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f829 	bl	80037e2 <HAL_RTC_WaitForSynchro>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d008      	beq.n	80037a8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	22ff      	movs	r2, #255	; 0xff
 800379c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2204      	movs	r2, #4
 80037a2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e018      	b.n	80037da <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037b6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	699a      	ldr	r2, [r3, #24]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	22ff      	movs	r2, #255	; 0xff
 80037d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80037d8:	2300      	movs	r3, #0
  }
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b084      	sub	sp, #16
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68da      	ldr	r2, [r3, #12]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037fc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037fe:	f7fd fc81 	bl	8001104 <HAL_GetTick>
 8003802:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003804:	e009      	b.n	800381a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003806:	f7fd fc7d 	bl	8001104 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003814:	d901      	bls.n	800381a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e007      	b.n	800382a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f003 0320 	and.w	r3, r3, #32
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0ee      	beq.n	8003806 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b084      	sub	sp, #16
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800383a:	2300      	movs	r3, #0
 800383c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003848:	2b00      	cmp	r3, #0
 800384a:	d119      	bne.n	8003880 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f04f 32ff 	mov.w	r2, #4294967295
 8003854:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003856:	f7fd fc55 	bl	8001104 <HAL_GetTick>
 800385a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800385c:	e009      	b.n	8003872 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800385e:	f7fd fc51 	bl	8001104 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800386c:	d901      	bls.n	8003872 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e007      	b.n	8003882 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0ee      	beq.n	800385e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b082      	sub	sp, #8
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e01d      	b.n	80038d8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d106      	bne.n	80038b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7fd faf3 	bl	8000e9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2202      	movs	r2, #2
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3304      	adds	r3, #4
 80038c6:	4619      	mov	r1, r3
 80038c8:	4610      	mov	r0, r2
 80038ca:	f000 fa13 	bl	8003cf4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e01d      	b.n	800392e <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d106      	bne.n	800390c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7fd fa5e 	bl	8000dc8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3304      	adds	r3, #4
 800391c:	4619      	mov	r1, r3
 800391e:	4610      	mov	r0, r2
 8003920:	f000 f9e8 	bl	8003cf4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b082      	sub	sp, #8
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e01d      	b.n	8003984 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d106      	bne.n	8003962 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7fd fa55 	bl	8000e0c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2202      	movs	r2, #2
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3304      	adds	r3, #4
 8003972:	4619      	mov	r1, r3
 8003974:	4610      	mov	r0, r2
 8003976:	f000 f9bd 	bl	8003cf4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d101      	bne.n	80039a6 <HAL_TIM_OC_ConfigChannel+0x1a>
 80039a2:	2302      	movs	r3, #2
 80039a4:	e04e      	b.n	8003a44 <HAL_TIM_OC_ConfigChannel+0xb8>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2202      	movs	r2, #2
 80039b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b0c      	cmp	r3, #12
 80039ba:	d839      	bhi.n	8003a30 <HAL_TIM_OC_ConfigChannel+0xa4>
 80039bc:	a201      	add	r2, pc, #4	; (adr r2, 80039c4 <HAL_TIM_OC_ConfigChannel+0x38>)
 80039be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c2:	bf00      	nop
 80039c4:	080039f9 	.word	0x080039f9
 80039c8:	08003a31 	.word	0x08003a31
 80039cc:	08003a31 	.word	0x08003a31
 80039d0:	08003a31 	.word	0x08003a31
 80039d4:	08003a07 	.word	0x08003a07
 80039d8:	08003a31 	.word	0x08003a31
 80039dc:	08003a31 	.word	0x08003a31
 80039e0:	08003a31 	.word	0x08003a31
 80039e4:	08003a15 	.word	0x08003a15
 80039e8:	08003a31 	.word	0x08003a31
 80039ec:	08003a31 	.word	0x08003a31
 80039f0:	08003a31 	.word	0x08003a31
 80039f4:	08003a23 	.word	0x08003a23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68b9      	ldr	r1, [r7, #8]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fa18 	bl	8003e34 <TIM_OC1_SetConfig>
      break;
 8003a04:	e015      	b.n	8003a32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68b9      	ldr	r1, [r7, #8]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fa81 	bl	8003f14 <TIM_OC2_SetConfig>
      break;
 8003a12:	e00e      	b.n	8003a32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68b9      	ldr	r1, [r7, #8]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 faf0 	bl	8004000 <TIM_OC3_SetConfig>
      break;
 8003a20:	e007      	b.n	8003a32 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68b9      	ldr	r1, [r7, #8]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f000 fb5d 	bl	80040e8 <TIM_OC4_SetConfig>
      break;
 8003a2e:	e000      	b.n	8003a32 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8003a30:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d101      	bne.n	8003a66 <HAL_TIM_IC_ConfigChannel+0x1a>
 8003a62:	2302      	movs	r3, #2
 8003a64:	e08a      	b.n	8003b7c <HAL_TIM_IC_ConfigChannel+0x130>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2202      	movs	r2, #2
 8003a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d11b      	bne.n	8003ab4 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6818      	ldr	r0, [r3, #0]
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	6819      	ldr	r1, [r3, #0]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f000 fb82 	bl	8004194 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 020c 	bic.w	r2, r2, #12
 8003a9e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6999      	ldr	r1, [r3, #24]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	619a      	str	r2, [r3, #24]
 8003ab2:	e05a      	b.n	8003b6a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d11c      	bne.n	8003af4 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6818      	ldr	r0, [r3, #0]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	6819      	ldr	r1, [r3, #0]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f000 fc06 	bl	80042da <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699a      	ldr	r2, [r3, #24]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003adc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6999      	ldr	r1, [r3, #24]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	021a      	lsls	r2, r3, #8
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	619a      	str	r2, [r3, #24]
 8003af2:	e03a      	b.n	8003b6a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d11b      	bne.n	8003b32 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	6819      	ldr	r1, [r3, #0]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f000 fc53 	bl	80043b4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	69da      	ldr	r2, [r3, #28]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 020c 	bic.w	r2, r2, #12
 8003b1c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69d9      	ldr	r1, [r3, #28]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	61da      	str	r2, [r3, #28]
 8003b30:	e01b      	b.n	8003b6a <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	6819      	ldr	r1, [r3, #0]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	f000 fc73 	bl	800442c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	69da      	ldr	r2, [r3, #28]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b54:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	69d9      	ldr	r1, [r3, #28]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	021a      	lsls	r2, r3, #8
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_TIM_ConfigClockSource+0x18>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e0a6      	b.n	8003cea <HAL_TIM_ConfigClockSource+0x166>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bc2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b40      	cmp	r3, #64	; 0x40
 8003bd2:	d067      	beq.n	8003ca4 <HAL_TIM_ConfigClockSource+0x120>
 8003bd4:	2b40      	cmp	r3, #64	; 0x40
 8003bd6:	d80b      	bhi.n	8003bf0 <HAL_TIM_ConfigClockSource+0x6c>
 8003bd8:	2b10      	cmp	r3, #16
 8003bda:	d073      	beq.n	8003cc4 <HAL_TIM_ConfigClockSource+0x140>
 8003bdc:	2b10      	cmp	r3, #16
 8003bde:	d802      	bhi.n	8003be6 <HAL_TIM_ConfigClockSource+0x62>
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d06f      	beq.n	8003cc4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003be4:	e078      	b.n	8003cd8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003be6:	2b20      	cmp	r3, #32
 8003be8:	d06c      	beq.n	8003cc4 <HAL_TIM_ConfigClockSource+0x140>
 8003bea:	2b30      	cmp	r3, #48	; 0x30
 8003bec:	d06a      	beq.n	8003cc4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003bee:	e073      	b.n	8003cd8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003bf0:	2b70      	cmp	r3, #112	; 0x70
 8003bf2:	d00d      	beq.n	8003c10 <HAL_TIM_ConfigClockSource+0x8c>
 8003bf4:	2b70      	cmp	r3, #112	; 0x70
 8003bf6:	d804      	bhi.n	8003c02 <HAL_TIM_ConfigClockSource+0x7e>
 8003bf8:	2b50      	cmp	r3, #80	; 0x50
 8003bfa:	d033      	beq.n	8003c64 <HAL_TIM_ConfigClockSource+0xe0>
 8003bfc:	2b60      	cmp	r3, #96	; 0x60
 8003bfe:	d041      	beq.n	8003c84 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003c00:	e06a      	b.n	8003cd8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c06:	d066      	beq.n	8003cd6 <HAL_TIM_ConfigClockSource+0x152>
 8003c08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c0c:	d017      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003c0e:	e063      	b.n	8003cd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6818      	ldr	r0, [r3, #0]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	6899      	ldr	r1, [r3, #8]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	f000 fc5c 	bl	80044dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c32:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	609a      	str	r2, [r3, #8]
      break;
 8003c3c:	e04c      	b.n	8003cd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	6899      	ldr	r1, [r3, #8]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f000 fc45 	bl	80044dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c60:	609a      	str	r2, [r3, #8]
      break;
 8003c62:	e039      	b.n	8003cd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6818      	ldr	r0, [r3, #0]
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	6859      	ldr	r1, [r3, #4]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	461a      	mov	r2, r3
 8003c72:	f000 fb03 	bl	800427c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2150      	movs	r1, #80	; 0x50
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 fc12 	bl	80044a6 <TIM_ITRx_SetConfig>
      break;
 8003c82:	e029      	b.n	8003cd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6818      	ldr	r0, [r3, #0]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	6859      	ldr	r1, [r3, #4]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	461a      	mov	r2, r3
 8003c92:	f000 fb5f 	bl	8004354 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2160      	movs	r1, #96	; 0x60
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 fc02 	bl	80044a6 <TIM_ITRx_SetConfig>
      break;
 8003ca2:	e019      	b.n	8003cd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	6859      	ldr	r1, [r3, #4]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	f000 fae3 	bl	800427c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2140      	movs	r1, #64	; 0x40
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 fbf2 	bl	80044a6 <TIM_ITRx_SetConfig>
      break;
 8003cc2:	e009      	b.n	8003cd8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4610      	mov	r0, r2
 8003cd0:	f000 fbe9 	bl	80044a6 <TIM_ITRx_SetConfig>
      break;
 8003cd4:	e000      	b.n	8003cd8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003cd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
	...

08003cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a40      	ldr	r2, [pc, #256]	; (8003e08 <TIM_Base_SetConfig+0x114>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d013      	beq.n	8003d34 <TIM_Base_SetConfig+0x40>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d12:	d00f      	beq.n	8003d34 <TIM_Base_SetConfig+0x40>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a3d      	ldr	r2, [pc, #244]	; (8003e0c <TIM_Base_SetConfig+0x118>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d00b      	beq.n	8003d34 <TIM_Base_SetConfig+0x40>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a3c      	ldr	r2, [pc, #240]	; (8003e10 <TIM_Base_SetConfig+0x11c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d007      	beq.n	8003d34 <TIM_Base_SetConfig+0x40>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a3b      	ldr	r2, [pc, #236]	; (8003e14 <TIM_Base_SetConfig+0x120>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d003      	beq.n	8003d34 <TIM_Base_SetConfig+0x40>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a3a      	ldr	r2, [pc, #232]	; (8003e18 <TIM_Base_SetConfig+0x124>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d108      	bne.n	8003d46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a2f      	ldr	r2, [pc, #188]	; (8003e08 <TIM_Base_SetConfig+0x114>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d02b      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d54:	d027      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a2c      	ldr	r2, [pc, #176]	; (8003e0c <TIM_Base_SetConfig+0x118>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d023      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a2b      	ldr	r2, [pc, #172]	; (8003e10 <TIM_Base_SetConfig+0x11c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d01f      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a2a      	ldr	r2, [pc, #168]	; (8003e14 <TIM_Base_SetConfig+0x120>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d01b      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a29      	ldr	r2, [pc, #164]	; (8003e18 <TIM_Base_SetConfig+0x124>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d017      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a28      	ldr	r2, [pc, #160]	; (8003e1c <TIM_Base_SetConfig+0x128>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d013      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a27      	ldr	r2, [pc, #156]	; (8003e20 <TIM_Base_SetConfig+0x12c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00f      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a26      	ldr	r2, [pc, #152]	; (8003e24 <TIM_Base_SetConfig+0x130>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d00b      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a25      	ldr	r2, [pc, #148]	; (8003e28 <TIM_Base_SetConfig+0x134>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d007      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a24      	ldr	r2, [pc, #144]	; (8003e2c <TIM_Base_SetConfig+0x138>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d003      	beq.n	8003da6 <TIM_Base_SetConfig+0xb2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a23      	ldr	r2, [pc, #140]	; (8003e30 <TIM_Base_SetConfig+0x13c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d108      	bne.n	8003db8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a0a      	ldr	r2, [pc, #40]	; (8003e08 <TIM_Base_SetConfig+0x114>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d003      	beq.n	8003dec <TIM_Base_SetConfig+0xf8>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a0c      	ldr	r2, [pc, #48]	; (8003e18 <TIM_Base_SetConfig+0x124>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d103      	bne.n	8003df4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	691a      	ldr	r2, [r3, #16]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	615a      	str	r2, [r3, #20]
}
 8003dfa:	bf00      	nop
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40010000 	.word	0x40010000
 8003e0c:	40000400 	.word	0x40000400
 8003e10:	40000800 	.word	0x40000800
 8003e14:	40000c00 	.word	0x40000c00
 8003e18:	40010400 	.word	0x40010400
 8003e1c:	40014000 	.word	0x40014000
 8003e20:	40014400 	.word	0x40014400
 8003e24:	40014800 	.word	0x40014800
 8003e28:	40001800 	.word	0x40001800
 8003e2c:	40001c00 	.word	0x40001c00
 8003e30:	40002000 	.word	0x40002000

08003e34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	f023 0201 	bic.w	r2, r3, #1
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 0303 	bic.w	r3, r3, #3
 8003e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f023 0302 	bic.w	r3, r3, #2
 8003e7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a20      	ldr	r2, [pc, #128]	; (8003f0c <TIM_OC1_SetConfig+0xd8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d003      	beq.n	8003e98 <TIM_OC1_SetConfig+0x64>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a1f      	ldr	r2, [pc, #124]	; (8003f10 <TIM_OC1_SetConfig+0xdc>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d10c      	bne.n	8003eb2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f023 0308 	bic.w	r3, r3, #8
 8003e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f023 0304 	bic.w	r3, r3, #4
 8003eb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a15      	ldr	r2, [pc, #84]	; (8003f0c <TIM_OC1_SetConfig+0xd8>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d003      	beq.n	8003ec2 <TIM_OC1_SetConfig+0x8e>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a14      	ldr	r2, [pc, #80]	; (8003f10 <TIM_OC1_SetConfig+0xdc>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d111      	bne.n	8003ee6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	621a      	str	r2, [r3, #32]
}
 8003f00:	bf00      	nop
 8003f02:	371c      	adds	r7, #28
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	40010000 	.word	0x40010000
 8003f10:	40010400 	.word	0x40010400

08003f14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b087      	sub	sp, #28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	f023 0210 	bic.w	r2, r3, #16
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	021b      	lsls	r3, r3, #8
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f023 0320 	bic.w	r3, r3, #32
 8003f5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a22      	ldr	r2, [pc, #136]	; (8003ff8 <TIM_OC2_SetConfig+0xe4>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d003      	beq.n	8003f7c <TIM_OC2_SetConfig+0x68>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a21      	ldr	r2, [pc, #132]	; (8003ffc <TIM_OC2_SetConfig+0xe8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d10d      	bne.n	8003f98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a17      	ldr	r2, [pc, #92]	; (8003ff8 <TIM_OC2_SetConfig+0xe4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d003      	beq.n	8003fa8 <TIM_OC2_SetConfig+0x94>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a16      	ldr	r2, [pc, #88]	; (8003ffc <TIM_OC2_SetConfig+0xe8>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d113      	bne.n	8003fd0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	621a      	str	r2, [r3, #32]
}
 8003fea:	bf00      	nop
 8003fec:	371c      	adds	r7, #28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	40010000 	.word	0x40010000
 8003ffc:	40010400 	.word	0x40010400

08004000 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004000:	b480      	push	{r7}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0303 	bic.w	r3, r3, #3
 8004036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004048:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	021b      	lsls	r3, r3, #8
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	4313      	orrs	r3, r2
 8004054:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a21      	ldr	r2, [pc, #132]	; (80040e0 <TIM_OC3_SetConfig+0xe0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d003      	beq.n	8004066 <TIM_OC3_SetConfig+0x66>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a20      	ldr	r2, [pc, #128]	; (80040e4 <TIM_OC3_SetConfig+0xe4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d10d      	bne.n	8004082 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800406c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	021b      	lsls	r3, r3, #8
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	4313      	orrs	r3, r2
 8004078:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004080:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a16      	ldr	r2, [pc, #88]	; (80040e0 <TIM_OC3_SetConfig+0xe0>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d003      	beq.n	8004092 <TIM_OC3_SetConfig+0x92>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a15      	ldr	r2, [pc, #84]	; (80040e4 <TIM_OC3_SetConfig+0xe4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d113      	bne.n	80040ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	621a      	str	r2, [r3, #32]
}
 80040d4:	bf00      	nop
 80040d6:	371c      	adds	r7, #28
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	40010000 	.word	0x40010000
 80040e4:	40010400 	.word	0x40010400

080040e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b087      	sub	sp, #28
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800411e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	021b      	lsls	r3, r3, #8
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4313      	orrs	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004132:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	031b      	lsls	r3, r3, #12
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a12      	ldr	r2, [pc, #72]	; (800418c <TIM_OC4_SetConfig+0xa4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d003      	beq.n	8004150 <TIM_OC4_SetConfig+0x68>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a11      	ldr	r2, [pc, #68]	; (8004190 <TIM_OC4_SetConfig+0xa8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d109      	bne.n	8004164 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004156:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	019b      	lsls	r3, r3, #6
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	4313      	orrs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	621a      	str	r2, [r3, #32]
}
 800417e:	bf00      	nop
 8004180:	371c      	adds	r7, #28
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	40010000 	.word	0x40010000
 8004190:	40010400 	.word	0x40010400

08004194 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
 80041a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	f023 0201 	bic.w	r2, r3, #1
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	4a28      	ldr	r2, [pc, #160]	; (8004260 <TIM_TI1_SetConfig+0xcc>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d01b      	beq.n	80041fa <TIM_TI1_SetConfig+0x66>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c8:	d017      	beq.n	80041fa <TIM_TI1_SetConfig+0x66>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	4a25      	ldr	r2, [pc, #148]	; (8004264 <TIM_TI1_SetConfig+0xd0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d013      	beq.n	80041fa <TIM_TI1_SetConfig+0x66>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	4a24      	ldr	r2, [pc, #144]	; (8004268 <TIM_TI1_SetConfig+0xd4>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d00f      	beq.n	80041fa <TIM_TI1_SetConfig+0x66>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	4a23      	ldr	r2, [pc, #140]	; (800426c <TIM_TI1_SetConfig+0xd8>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d00b      	beq.n	80041fa <TIM_TI1_SetConfig+0x66>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4a22      	ldr	r2, [pc, #136]	; (8004270 <TIM_TI1_SetConfig+0xdc>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d007      	beq.n	80041fa <TIM_TI1_SetConfig+0x66>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4a21      	ldr	r2, [pc, #132]	; (8004274 <TIM_TI1_SetConfig+0xe0>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d003      	beq.n	80041fa <TIM_TI1_SetConfig+0x66>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4a20      	ldr	r2, [pc, #128]	; (8004278 <TIM_TI1_SetConfig+0xe4>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d101      	bne.n	80041fe <TIM_TI1_SetConfig+0x6a>
 80041fa:	2301      	movs	r3, #1
 80041fc:	e000      	b.n	8004200 <TIM_TI1_SetConfig+0x6c>
 80041fe:	2300      	movs	r3, #0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d008      	beq.n	8004216 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f023 0303 	bic.w	r3, r3, #3
 800420a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4313      	orrs	r3, r2
 8004212:	617b      	str	r3, [r7, #20]
 8004214:	e003      	b.n	800421e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004224:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	b2db      	uxtb	r3, r3
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	4313      	orrs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	f023 030a 	bic.w	r3, r3, #10
 8004238:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	f003 030a 	and.w	r3, r3, #10
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	4313      	orrs	r3, r2
 8004244:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	621a      	str	r2, [r3, #32]
}
 8004252:	bf00      	nop
 8004254:	371c      	adds	r7, #28
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	40010000 	.word	0x40010000
 8004264:	40000400 	.word	0x40000400
 8004268:	40000800 	.word	0x40000800
 800426c:	40000c00 	.word	0x40000c00
 8004270:	40010400 	.word	0x40010400
 8004274:	40014000 	.word	0x40014000
 8004278:	40001800 	.word	0x40001800

0800427c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	f023 0201 	bic.w	r2, r3, #1
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f023 030a 	bic.w	r3, r3, #10
 80042b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4313      	orrs	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	621a      	str	r2, [r3, #32]
}
 80042ce:	bf00      	nop
 80042d0:	371c      	adds	r7, #28
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80042da:	b480      	push	{r7}
 80042dc:	b087      	sub	sp, #28
 80042de:	af00      	add	r7, sp, #0
 80042e0:	60f8      	str	r0, [r7, #12]
 80042e2:	60b9      	str	r1, [r7, #8]
 80042e4:	607a      	str	r2, [r7, #4]
 80042e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	f023 0210 	bic.w	r2, r3, #16
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004306:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	021b      	lsls	r3, r3, #8
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	4313      	orrs	r3, r2
 8004310:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004318:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	031b      	lsls	r3, r3, #12
 800431e:	b29b      	uxth	r3, r3
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	4313      	orrs	r3, r2
 8004324:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800432c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	4313      	orrs	r3, r2
 800433a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	621a      	str	r2, [r3, #32]
}
 8004348:	bf00      	nop
 800434a:	371c      	adds	r7, #28
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004354:	b480      	push	{r7}
 8004356:	b087      	sub	sp, #28
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	f023 0210 	bic.w	r2, r3, #16
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800437e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	031b      	lsls	r3, r3, #12
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	4313      	orrs	r3, r2
 8004388:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004390:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	4313      	orrs	r3, r2
 800439a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	621a      	str	r2, [r3, #32]
}
 80043a8:	bf00      	nop
 80043aa:	371c      	adds	r7, #28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
 80043c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f023 0303 	bic.w	r3, r3, #3
 80043e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004404:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	021b      	lsls	r3, r3, #8
 800440a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	4313      	orrs	r3, r2
 8004412:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	621a      	str	r2, [r3, #32]
}
 8004420:	bf00      	nop
 8004422:	371c      	adds	r7, #28
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004458:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	021b      	lsls	r3, r3, #8
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	4313      	orrs	r3, r2
 8004462:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800446a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	031b      	lsls	r3, r3, #12
 8004470:	b29b      	uxth	r3, r3
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	4313      	orrs	r3, r2
 8004476:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800447e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	031b      	lsls	r3, r3, #12
 8004484:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	4313      	orrs	r3, r2
 800448c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	621a      	str	r2, [r3, #32]
}
 800449a:	bf00      	nop
 800449c:	371c      	adds	r7, #28
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b085      	sub	sp, #20
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
 80044ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	f043 0307 	orr.w	r3, r3, #7
 80044c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	609a      	str	r2, [r3, #8]
}
 80044d0:	bf00      	nop
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044dc:	b480      	push	{r7}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
 80044e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	021a      	lsls	r2, r3, #8
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	431a      	orrs	r2, r3
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	4313      	orrs	r3, r2
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	4313      	orrs	r3, r2
 8004508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	609a      	str	r2, [r3, #8]
}
 8004510:	bf00      	nop
 8004512:	371c      	adds	r7, #28
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800452c:	2b01      	cmp	r3, #1
 800452e:	d101      	bne.n	8004534 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004530:	2302      	movs	r3, #2
 8004532:	e05a      	b.n	80045ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a21      	ldr	r2, [pc, #132]	; (80045f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d022      	beq.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004580:	d01d      	beq.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a1d      	ldr	r2, [pc, #116]	; (80045fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d018      	beq.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a1b      	ldr	r2, [pc, #108]	; (8004600 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d013      	beq.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a1a      	ldr	r2, [pc, #104]	; (8004604 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d00e      	beq.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a18      	ldr	r2, [pc, #96]	; (8004608 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d009      	beq.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a17      	ldr	r2, [pc, #92]	; (800460c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d004      	beq.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a15      	ldr	r2, [pc, #84]	; (8004610 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d10c      	bne.n	80045d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	40010000 	.word	0x40010000
 80045fc:	40000400 	.word	0x40000400
 8004600:	40000800 	.word	0x40000800
 8004604:	40000c00 	.word	0x40000c00
 8004608:	40010400 	.word	0x40010400
 800460c:	40014000 	.word	0x40014000
 8004610:	40001800 	.word	0x40001800

08004614 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800461e:	2300      	movs	r3, #0
 8004620:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004628:	2b01      	cmp	r3, #1
 800462a:	d101      	bne.n	8004630 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800462c:	2302      	movs	r3, #2
 800462e:	e03d      	b.n	80046ac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	4313      	orrs	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	4313      	orrs	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4313      	orrs	r3, r2
 800466e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	4313      	orrs	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	4313      	orrs	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	4313      	orrs	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046b8:	b084      	sub	sp, #16
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b084      	sub	sp, #16
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
 80046c2:	f107 001c 	add.w	r0, r7, #28
 80046c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d122      	bne.n	8004716 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80046e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d105      	bne.n	800470a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f001 fab4 	bl	8005c78 <USB_CoreReset>
 8004710:	4603      	mov	r3, r0
 8004712:	73fb      	strb	r3, [r7, #15]
 8004714:	e01a      	b.n	800474c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f001 faa8 	bl	8005c78 <USB_CoreReset>
 8004728:	4603      	mov	r3, r0
 800472a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800472c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800472e:	2b00      	cmp	r3, #0
 8004730:	d106      	bne.n	8004740 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004736:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	639a      	str	r2, [r3, #56]	; 0x38
 800473e:	e005      	b.n	800474c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004744:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800474c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474e:	2b01      	cmp	r3, #1
 8004750:	d10b      	bne.n	800476a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f043 0206 	orr.w	r2, r3, #6
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f043 0220 	orr.w	r2, r3, #32
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800476a:	7bfb      	ldrb	r3, [r7, #15]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004776:	b004      	add	sp, #16
 8004778:	4770      	bx	lr
	...

0800477c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	4613      	mov	r3, r2
 8004788:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800478a:	79fb      	ldrb	r3, [r7, #7]
 800478c:	2b02      	cmp	r3, #2
 800478e:	d165      	bne.n	800485c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	4a41      	ldr	r2, [pc, #260]	; (8004898 <USB_SetTurnaroundTime+0x11c>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d906      	bls.n	80047a6 <USB_SetTurnaroundTime+0x2a>
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4a40      	ldr	r2, [pc, #256]	; (800489c <USB_SetTurnaroundTime+0x120>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d802      	bhi.n	80047a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80047a0:	230f      	movs	r3, #15
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	e062      	b.n	800486c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	4a3c      	ldr	r2, [pc, #240]	; (800489c <USB_SetTurnaroundTime+0x120>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d906      	bls.n	80047bc <USB_SetTurnaroundTime+0x40>
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	4a3b      	ldr	r2, [pc, #236]	; (80048a0 <USB_SetTurnaroundTime+0x124>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d802      	bhi.n	80047bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80047b6:	230e      	movs	r3, #14
 80047b8:	617b      	str	r3, [r7, #20]
 80047ba:	e057      	b.n	800486c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	4a38      	ldr	r2, [pc, #224]	; (80048a0 <USB_SetTurnaroundTime+0x124>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d906      	bls.n	80047d2 <USB_SetTurnaroundTime+0x56>
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	4a37      	ldr	r2, [pc, #220]	; (80048a4 <USB_SetTurnaroundTime+0x128>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d802      	bhi.n	80047d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80047cc:	230d      	movs	r3, #13
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	e04c      	b.n	800486c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	4a33      	ldr	r2, [pc, #204]	; (80048a4 <USB_SetTurnaroundTime+0x128>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d906      	bls.n	80047e8 <USB_SetTurnaroundTime+0x6c>
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	4a32      	ldr	r2, [pc, #200]	; (80048a8 <USB_SetTurnaroundTime+0x12c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d802      	bhi.n	80047e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80047e2:	230c      	movs	r3, #12
 80047e4:	617b      	str	r3, [r7, #20]
 80047e6:	e041      	b.n	800486c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4a2f      	ldr	r2, [pc, #188]	; (80048a8 <USB_SetTurnaroundTime+0x12c>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d906      	bls.n	80047fe <USB_SetTurnaroundTime+0x82>
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	4a2e      	ldr	r2, [pc, #184]	; (80048ac <USB_SetTurnaroundTime+0x130>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d802      	bhi.n	80047fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80047f8:	230b      	movs	r3, #11
 80047fa:	617b      	str	r3, [r7, #20]
 80047fc:	e036      	b.n	800486c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	4a2a      	ldr	r2, [pc, #168]	; (80048ac <USB_SetTurnaroundTime+0x130>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d906      	bls.n	8004814 <USB_SetTurnaroundTime+0x98>
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	4a29      	ldr	r2, [pc, #164]	; (80048b0 <USB_SetTurnaroundTime+0x134>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d802      	bhi.n	8004814 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800480e:	230a      	movs	r3, #10
 8004810:	617b      	str	r3, [r7, #20]
 8004812:	e02b      	b.n	800486c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4a26      	ldr	r2, [pc, #152]	; (80048b0 <USB_SetTurnaroundTime+0x134>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d906      	bls.n	800482a <USB_SetTurnaroundTime+0xae>
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	4a25      	ldr	r2, [pc, #148]	; (80048b4 <USB_SetTurnaroundTime+0x138>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d802      	bhi.n	800482a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004824:	2309      	movs	r3, #9
 8004826:	617b      	str	r3, [r7, #20]
 8004828:	e020      	b.n	800486c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	4a21      	ldr	r2, [pc, #132]	; (80048b4 <USB_SetTurnaroundTime+0x138>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d906      	bls.n	8004840 <USB_SetTurnaroundTime+0xc4>
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	4a20      	ldr	r2, [pc, #128]	; (80048b8 <USB_SetTurnaroundTime+0x13c>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d802      	bhi.n	8004840 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800483a:	2308      	movs	r3, #8
 800483c:	617b      	str	r3, [r7, #20]
 800483e:	e015      	b.n	800486c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	4a1d      	ldr	r2, [pc, #116]	; (80048b8 <USB_SetTurnaroundTime+0x13c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d906      	bls.n	8004856 <USB_SetTurnaroundTime+0xda>
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4a1c      	ldr	r2, [pc, #112]	; (80048bc <USB_SetTurnaroundTime+0x140>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d802      	bhi.n	8004856 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004850:	2307      	movs	r3, #7
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	e00a      	b.n	800486c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004856:	2306      	movs	r3, #6
 8004858:	617b      	str	r3, [r7, #20]
 800485a:	e007      	b.n	800486c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800485c:	79fb      	ldrb	r3, [r7, #7]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d102      	bne.n	8004868 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004862:	2309      	movs	r3, #9
 8004864:	617b      	str	r3, [r7, #20]
 8004866:	e001      	b.n	800486c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004868:	2309      	movs	r3, #9
 800486a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	68da      	ldr	r2, [r3, #12]
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	029b      	lsls	r3, r3, #10
 8004880:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004884:	431a      	orrs	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	371c      	adds	r7, #28
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	00d8acbf 	.word	0x00d8acbf
 800489c:	00e4e1bf 	.word	0x00e4e1bf
 80048a0:	00f423ff 	.word	0x00f423ff
 80048a4:	0106737f 	.word	0x0106737f
 80048a8:	011a499f 	.word	0x011a499f
 80048ac:	01312cff 	.word	0x01312cff
 80048b0:	014ca43f 	.word	0x014ca43f
 80048b4:	016e35ff 	.word	0x016e35ff
 80048b8:	01a6ab1f 	.word	0x01a6ab1f
 80048bc:	01e847ff 	.word	0x01e847ff

080048c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f043 0201 	orr.w	r2, r3, #1
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f023 0201 	bic.w	r2, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	460b      	mov	r3, r1
 800490e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800491c:	78fb      	ldrb	r3, [r7, #3]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d106      	bne.n	8004930 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	60da      	str	r2, [r3, #12]
 800492e:	e00b      	b.n	8004948 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004930:	78fb      	ldrb	r3, [r7, #3]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d106      	bne.n	8004944 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	60da      	str	r2, [r3, #12]
 8004942:	e001      	b.n	8004948 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e003      	b.n	8004950 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004948:	2032      	movs	r0, #50	; 0x32
 800494a:	f7fc fbe7 	bl	800111c <HAL_Delay>

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004958:	b084      	sub	sp, #16
 800495a:	b580      	push	{r7, lr}
 800495c:	b086      	sub	sp, #24
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004966:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800496a:	2300      	movs	r3, #0
 800496c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004972:	2300      	movs	r3, #0
 8004974:	613b      	str	r3, [r7, #16]
 8004976:	e009      	b.n	800498c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	3340      	adds	r3, #64	; 0x40
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	2200      	movs	r2, #0
 8004984:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	3301      	adds	r3, #1
 800498a:	613b      	str	r3, [r7, #16]
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	2b0e      	cmp	r3, #14
 8004990:	d9f2      	bls.n	8004978 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004994:	2b00      	cmp	r3, #0
 8004996:	d11c      	bne.n	80049d2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049a6:	f043 0302 	orr.w	r3, r3, #2
 80049aa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049bc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	639a      	str	r2, [r3, #56]	; 0x38
 80049d0:	e00b      	b.n	80049ea <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049f0:	461a      	mov	r2, r3
 80049f2:	2300      	movs	r3, #0
 80049f4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049fc:	4619      	mov	r1, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a04:	461a      	mov	r2, r3
 8004a06:	680b      	ldr	r3, [r1, #0]
 8004a08:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d10c      	bne.n	8004a2a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d104      	bne.n	8004a20 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a16:	2100      	movs	r1, #0
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f949 	bl	8004cb0 <USB_SetDevSpeed>
 8004a1e:	e008      	b.n	8004a32 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a20:	2101      	movs	r1, #1
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f944 	bl	8004cb0 <USB_SetDevSpeed>
 8004a28:	e003      	b.n	8004a32 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a2a:	2103      	movs	r1, #3
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f93f 	bl	8004cb0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a32:	2110      	movs	r1, #16
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f8f3 	bl	8004c20 <USB_FlushTxFifo>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f911 	bl	8004c6c <USB_FlushRxFifo>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a66:	461a      	mov	r2, r3
 8004a68:	2300      	movs	r3, #0
 8004a6a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a72:	461a      	mov	r2, r3
 8004a74:	2300      	movs	r3, #0
 8004a76:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a78:	2300      	movs	r3, #0
 8004a7a:	613b      	str	r3, [r7, #16]
 8004a7c:	e043      	b.n	8004b06 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	015a      	lsls	r2, r3, #5
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	4413      	add	r3, r2
 8004a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a94:	d118      	bne.n	8004ac8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10a      	bne.n	8004ab2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004aae:	6013      	str	r3, [r2, #0]
 8004ab0:	e013      	b.n	8004ada <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	e008      	b.n	8004ada <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	2300      	movs	r3, #0
 8004aea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	015a      	lsls	r2, r3, #5
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af8:	461a      	mov	r2, r3
 8004afa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004afe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	3301      	adds	r3, #1
 8004b04:	613b      	str	r3, [r7, #16]
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d3b7      	bcc.n	8004a7e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b0e:	2300      	movs	r3, #0
 8004b10:	613b      	str	r3, [r7, #16]
 8004b12:	e043      	b.n	8004b9c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b2a:	d118      	bne.n	8004b5e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10a      	bne.n	8004b48 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	015a      	lsls	r2, r3, #5
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b3e:	461a      	mov	r2, r3
 8004b40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	e013      	b.n	8004b70 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b54:	461a      	mov	r2, r3
 8004b56:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b5a:	6013      	str	r3, [r2, #0]
 8004b5c:	e008      	b.n	8004b70 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	2300      	movs	r3, #0
 8004b80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b8e:	461a      	mov	r2, r3
 8004b90:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b94:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	613b      	str	r3, [r7, #16]
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d3b7      	bcc.n	8004b14 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bb6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004bc4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d105      	bne.n	8004bd8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	f043 0210 	orr.w	r2, r3, #16
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	699a      	ldr	r2, [r3, #24]
 8004bdc:	4b0f      	ldr	r3, [pc, #60]	; (8004c1c <USB_DevInit+0x2c4>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d005      	beq.n	8004bf6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	f043 0208 	orr.w	r2, r3, #8
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d107      	bne.n	8004c0c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c04:	f043 0304 	orr.w	r3, r3, #4
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c18:	b004      	add	sp, #16
 8004c1a:	4770      	bx	lr
 8004c1c:	803c3800 	.word	0x803c3800

08004c20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	019b      	lsls	r3, r3, #6
 8004c32:	f043 0220 	orr.w	r2, r3, #32
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4a09      	ldr	r2, [pc, #36]	; (8004c68 <USB_FlushTxFifo+0x48>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d901      	bls.n	8004c4c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e006      	b.n	8004c5a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	f003 0320 	and.w	r3, r3, #32
 8004c54:	2b20      	cmp	r3, #32
 8004c56:	d0f0      	beq.n	8004c3a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	00030d40 	.word	0x00030d40

08004c6c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004c74:	2300      	movs	r3, #0
 8004c76:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2210      	movs	r2, #16
 8004c7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	3301      	adds	r3, #1
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4a09      	ldr	r2, [pc, #36]	; (8004cac <USB_FlushRxFifo+0x40>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d901      	bls.n	8004c90 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e006      	b.n	8004c9e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	f003 0310 	and.w	r3, r3, #16
 8004c98:	2b10      	cmp	r3, #16
 8004c9a:	d0f0      	beq.n	8004c7e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	00030d40 	.word	0x00030d40

08004cb0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	460b      	mov	r3, r1
 8004cba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	68f9      	ldr	r1, [r7, #12]
 8004ccc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b087      	sub	sp, #28
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f003 0306 	and.w	r3, r3, #6
 8004cfa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d102      	bne.n	8004d08 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004d02:	2300      	movs	r3, #0
 8004d04:	75fb      	strb	r3, [r7, #23]
 8004d06:	e00a      	b.n	8004d1e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d002      	beq.n	8004d14 <USB_GetDevSpeed+0x32>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2b06      	cmp	r3, #6
 8004d12:	d102      	bne.n	8004d1a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004d14:	2302      	movs	r3, #2
 8004d16:	75fb      	strb	r3, [r7, #23]
 8004d18:	e001      	b.n	8004d1e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004d1a:	230f      	movs	r3, #15
 8004d1c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	371c      	adds	r7, #28
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	785b      	ldrb	r3, [r3, #1]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d13a      	bne.n	8004dbe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4e:	69da      	ldr	r2, [r3, #28]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	f003 030f 	and.w	r3, r3, #15
 8004d58:	2101      	movs	r1, #1
 8004d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	68f9      	ldr	r1, [r7, #12]
 8004d62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d66:	4313      	orrs	r3, r2
 8004d68:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	015a      	lsls	r2, r3, #5
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	4413      	add	r3, r2
 8004d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d155      	bne.n	8004e2c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	78db      	ldrb	r3, [r3, #3]
 8004d9a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d9c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	059b      	lsls	r3, r3, #22
 8004da2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004da4:	4313      	orrs	r3, r2
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	0151      	lsls	r1, r2, #5
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	440a      	add	r2, r1
 8004dae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dba:	6013      	str	r3, [r2, #0]
 8004dbc:	e036      	b.n	8004e2c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc4:	69da      	ldr	r2, [r3, #28]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	2101      	movs	r1, #1
 8004dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd4:	041b      	lsls	r3, r3, #16
 8004dd6:	68f9      	ldr	r1, [r7, #12]
 8004dd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d11a      	bne.n	8004e2c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	78db      	ldrb	r3, [r3, #3]
 8004e10:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e12:	430b      	orrs	r3, r1
 8004e14:	4313      	orrs	r3, r2
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	0151      	lsls	r1, r2, #5
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	440a      	add	r2, r1
 8004e1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e2a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
	...

08004e3c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	785b      	ldrb	r3, [r3, #1]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d161      	bne.n	8004f1c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e6e:	d11f      	bne.n	8004eb0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	0151      	lsls	r1, r2, #5
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	440a      	add	r2, r1
 8004e86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e8e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	0151      	lsls	r1, r2, #5
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	440a      	add	r2, r1
 8004ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004eae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	f003 030f 	and.w	r3, r3, #15
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	43db      	mvns	r3, r3
 8004eca:	68f9      	ldr	r1, [r7, #12]
 8004ecc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eda:	69da      	ldr	r2, [r3, #28]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	f003 030f 	and.w	r3, r3, #15
 8004ee4:	2101      	movs	r1, #1
 8004ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	43db      	mvns	r3, r3
 8004eee:	68f9      	ldr	r1, [r7, #12]
 8004ef0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	0159      	lsls	r1, r3, #5
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	440b      	add	r3, r1
 8004f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f12:	4619      	mov	r1, r3
 8004f14:	4b35      	ldr	r3, [pc, #212]	; (8004fec <USB_DeactivateEndpoint+0x1b0>)
 8004f16:	4013      	ands	r3, r2
 8004f18:	600b      	str	r3, [r1, #0]
 8004f1a:	e060      	b.n	8004fde <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f32:	d11f      	bne.n	8004f74 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	015a      	lsls	r2, r3, #5
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	0151      	lsls	r1, r2, #5
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	440a      	add	r2, r1
 8004f4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f52:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	0151      	lsls	r1, r2, #5
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	440a      	add	r2, r1
 8004f6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	f003 030f 	and.w	r3, r3, #15
 8004f84:	2101      	movs	r1, #1
 8004f86:	fa01 f303 	lsl.w	r3, r1, r3
 8004f8a:	041b      	lsls	r3, r3, #16
 8004f8c:	43db      	mvns	r3, r3
 8004f8e:	68f9      	ldr	r1, [r7, #12]
 8004f90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f94:	4013      	ands	r3, r2
 8004f96:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9e:	69da      	ldr	r2, [r3, #28]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	f003 030f 	and.w	r3, r3, #15
 8004fa8:	2101      	movs	r1, #1
 8004faa:	fa01 f303 	lsl.w	r3, r1, r3
 8004fae:	041b      	lsls	r3, r3, #16
 8004fb0:	43db      	mvns	r3, r3
 8004fb2:	68f9      	ldr	r1, [r7, #12]
 8004fb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fb8:	4013      	ands	r3, r2
 8004fba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	0159      	lsls	r1, r3, #5
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	440b      	add	r3, r1
 8004fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	4b05      	ldr	r3, [pc, #20]	; (8004ff0 <USB_DeactivateEndpoint+0x1b4>)
 8004fda:	4013      	ands	r3, r2
 8004fdc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	ec337800 	.word	0xec337800
 8004ff0:	eff37800 	.word	0xeff37800

08004ff4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b08a      	sub	sp, #40	; 0x28
 8004ff8:	af02      	add	r7, sp, #8
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	4613      	mov	r3, r2
 8005000:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	785b      	ldrb	r3, [r3, #1]
 8005010:	2b01      	cmp	r3, #1
 8005012:	f040 815c 	bne.w	80052ce <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d132      	bne.n	8005084 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	4413      	add	r3, r2
 8005026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	0151      	lsls	r1, r2, #5
 8005030:	69fa      	ldr	r2, [r7, #28]
 8005032:	440a      	add	r2, r1
 8005034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005038:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800503c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005040:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	4413      	add	r3, r2
 800504a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	0151      	lsls	r1, r2, #5
 8005054:	69fa      	ldr	r2, [r7, #28]
 8005056:	440a      	add	r2, r1
 8005058:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800505c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005060:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	015a      	lsls	r2, r3, #5
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	4413      	add	r3, r2
 800506a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	0151      	lsls	r1, r2, #5
 8005074:	69fa      	ldr	r2, [r7, #28]
 8005076:	440a      	add	r2, r1
 8005078:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800507c:	0cdb      	lsrs	r3, r3, #19
 800507e:	04db      	lsls	r3, r3, #19
 8005080:	6113      	str	r3, [r2, #16]
 8005082:	e074      	b.n	800516e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	0151      	lsls	r1, r2, #5
 8005096:	69fa      	ldr	r2, [r7, #28]
 8005098:	440a      	add	r2, r1
 800509a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800509e:	0cdb      	lsrs	r3, r3, #19
 80050a0:	04db      	lsls	r3, r3, #19
 80050a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	015a      	lsls	r2, r3, #5
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	4413      	add	r3, r2
 80050ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	0151      	lsls	r1, r2, #5
 80050b6:	69fa      	ldr	r2, [r7, #28]
 80050b8:	440a      	add	r2, r1
 80050ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d4:	691a      	ldr	r2, [r3, #16]
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	6959      	ldr	r1, [r3, #20]
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	440b      	add	r3, r1
 80050e0:	1e59      	subs	r1, r3, #1
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80050ea:	04d9      	lsls	r1, r3, #19
 80050ec:	4b9d      	ldr	r3, [pc, #628]	; (8005364 <USB_EPStartXfer+0x370>)
 80050ee:	400b      	ands	r3, r1
 80050f0:	69b9      	ldr	r1, [r7, #24]
 80050f2:	0148      	lsls	r0, r1, #5
 80050f4:	69f9      	ldr	r1, [r7, #28]
 80050f6:	4401      	add	r1, r0
 80050f8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050fc:	4313      	orrs	r3, r2
 80050fe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	4413      	add	r3, r2
 8005108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510c:	691a      	ldr	r2, [r3, #16]
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005116:	69b9      	ldr	r1, [r7, #24]
 8005118:	0148      	lsls	r0, r1, #5
 800511a:	69f9      	ldr	r1, [r7, #28]
 800511c:	4401      	add	r1, r0
 800511e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005122:	4313      	orrs	r3, r2
 8005124:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	78db      	ldrb	r3, [r3, #3]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d11f      	bne.n	800516e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	4413      	add	r3, r2
 8005136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	0151      	lsls	r1, r2, #5
 8005140:	69fa      	ldr	r2, [r7, #28]
 8005142:	440a      	add	r2, r1
 8005144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005148:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800514c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	4413      	add	r3, r2
 8005156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	0151      	lsls	r1, r2, #5
 8005160:	69fa      	ldr	r2, [r7, #28]
 8005162:	440a      	add	r2, r1
 8005164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005168:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800516c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800516e:	79fb      	ldrb	r3, [r7, #7]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d14b      	bne.n	800520c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d009      	beq.n	8005190 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	4413      	add	r3, r2
 8005184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005188:	461a      	mov	r2, r3
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	78db      	ldrb	r3, [r3, #3]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d128      	bne.n	80051ea <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d110      	bne.n	80051ca <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	0151      	lsls	r1, r2, #5
 80051ba:	69fa      	ldr	r2, [r7, #28]
 80051bc:	440a      	add	r2, r1
 80051be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051c6:	6013      	str	r3, [r2, #0]
 80051c8:	e00f      	b.n	80051ea <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	0151      	lsls	r1, r2, #5
 80051dc:	69fa      	ldr	r2, [r7, #28]
 80051de:	440a      	add	r2, r1
 80051e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051e8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	0151      	lsls	r1, r2, #5
 80051fc:	69fa      	ldr	r2, [r7, #28]
 80051fe:	440a      	add	r2, r1
 8005200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005204:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005208:	6013      	str	r3, [r2, #0]
 800520a:	e12f      	b.n	800546c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	4413      	add	r3, r2
 8005214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	0151      	lsls	r1, r2, #5
 800521e:	69fa      	ldr	r2, [r7, #28]
 8005220:	440a      	add	r2, r1
 8005222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005226:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800522a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	78db      	ldrb	r3, [r3, #3]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d015      	beq.n	8005260 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 8117 	beq.w	800546c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005244:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	f003 030f 	and.w	r3, r3, #15
 800524e:	2101      	movs	r1, #1
 8005250:	fa01 f303 	lsl.w	r3, r1, r3
 8005254:	69f9      	ldr	r1, [r7, #28]
 8005256:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800525a:	4313      	orrs	r3, r2
 800525c:	634b      	str	r3, [r1, #52]	; 0x34
 800525e:	e105      	b.n	800546c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526c:	2b00      	cmp	r3, #0
 800526e:	d110      	bne.n	8005292 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	4413      	add	r3, r2
 8005278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	0151      	lsls	r1, r2, #5
 8005282:	69fa      	ldr	r2, [r7, #28]
 8005284:	440a      	add	r2, r1
 8005286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800528a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800528e:	6013      	str	r3, [r2, #0]
 8005290:	e00f      	b.n	80052b2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	4413      	add	r3, r2
 800529a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	0151      	lsls	r1, r2, #5
 80052a4:	69fa      	ldr	r2, [r7, #28]
 80052a6:	440a      	add	r2, r1
 80052a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	68d9      	ldr	r1, [r3, #12]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	781a      	ldrb	r2, [r3, #0]
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	b298      	uxth	r0, r3
 80052c0:	79fb      	ldrb	r3, [r7, #7]
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	4603      	mov	r3, r0
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f000 fa2b 	bl	8005722 <USB_WritePacket>
 80052cc:	e0ce      	b.n	800546c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	015a      	lsls	r2, r3, #5
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	4413      	add	r3, r2
 80052d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	0151      	lsls	r1, r2, #5
 80052e0:	69fa      	ldr	r2, [r7, #28]
 80052e2:	440a      	add	r2, r1
 80052e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052e8:	0cdb      	lsrs	r3, r3, #19
 80052ea:	04db      	lsls	r3, r3, #19
 80052ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	0151      	lsls	r1, r2, #5
 8005300:	69fa      	ldr	r2, [r7, #28]
 8005302:	440a      	add	r2, r1
 8005304:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005308:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800530c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005310:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d126      	bne.n	8005368 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	4413      	add	r3, r2
 8005322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005326:	691a      	ldr	r2, [r3, #16]
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005330:	69b9      	ldr	r1, [r7, #24]
 8005332:	0148      	lsls	r0, r1, #5
 8005334:	69f9      	ldr	r1, [r7, #28]
 8005336:	4401      	add	r1, r0
 8005338:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800533c:	4313      	orrs	r3, r2
 800533e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	0151      	lsls	r1, r2, #5
 8005352:	69fa      	ldr	r2, [r7, #28]
 8005354:	440a      	add	r2, r1
 8005356:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800535a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800535e:	6113      	str	r3, [r2, #16]
 8005360:	e036      	b.n	80053d0 <USB_EPStartXfer+0x3dc>
 8005362:	bf00      	nop
 8005364:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	695a      	ldr	r2, [r3, #20]
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	4413      	add	r3, r2
 8005372:	1e5a      	subs	r2, r3, #1
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	fbb2 f3f3 	udiv	r3, r2, r3
 800537c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	4413      	add	r3, r2
 8005386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538a:	691a      	ldr	r2, [r3, #16]
 800538c:	8afb      	ldrh	r3, [r7, #22]
 800538e:	04d9      	lsls	r1, r3, #19
 8005390:	4b39      	ldr	r3, [pc, #228]	; (8005478 <USB_EPStartXfer+0x484>)
 8005392:	400b      	ands	r3, r1
 8005394:	69b9      	ldr	r1, [r7, #24]
 8005396:	0148      	lsls	r0, r1, #5
 8005398:	69f9      	ldr	r1, [r7, #28]
 800539a:	4401      	add	r1, r0
 800539c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053a0:	4313      	orrs	r3, r2
 80053a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	015a      	lsls	r2, r3, #5
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	4413      	add	r3, r2
 80053ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b0:	691a      	ldr	r2, [r3, #16]
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	8af9      	ldrh	r1, [r7, #22]
 80053b8:	fb01 f303 	mul.w	r3, r1, r3
 80053bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053c0:	69b9      	ldr	r1, [r7, #24]
 80053c2:	0148      	lsls	r0, r1, #5
 80053c4:	69f9      	ldr	r1, [r7, #28]
 80053c6:	4401      	add	r1, r0
 80053c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053cc:	4313      	orrs	r3, r2
 80053ce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80053d0:	79fb      	ldrb	r3, [r7, #7]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d10d      	bne.n	80053f2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d009      	beq.n	80053f2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	68d9      	ldr	r1, [r3, #12]
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ee:	460a      	mov	r2, r1
 80053f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	78db      	ldrb	r3, [r3, #3]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d128      	bne.n	800544c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005406:	2b00      	cmp	r3, #0
 8005408:	d110      	bne.n	800542c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	4413      	add	r3, r2
 8005412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	0151      	lsls	r1, r2, #5
 800541c:	69fa      	ldr	r2, [r7, #28]
 800541e:	440a      	add	r2, r1
 8005420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005424:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005428:	6013      	str	r3, [r2, #0]
 800542a:	e00f      	b.n	800544c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	0151      	lsls	r1, r2, #5
 800543e:	69fa      	ldr	r2, [r7, #28]
 8005440:	440a      	add	r2, r1
 8005442:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800544a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	4413      	add	r3, r2
 8005454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	69ba      	ldr	r2, [r7, #24]
 800545c:	0151      	lsls	r1, r2, #5
 800545e:	69fa      	ldr	r2, [r7, #28]
 8005460:	440a      	add	r2, r1
 8005462:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005466:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800546a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3720      	adds	r7, #32
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	1ff80000 	.word	0x1ff80000

0800547c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800547c:	b480      	push	{r7}
 800547e:	b087      	sub	sp, #28
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	4613      	mov	r3, r2
 8005488:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	785b      	ldrb	r3, [r3, #1]
 8005498:	2b01      	cmp	r3, #1
 800549a:	f040 80cd 	bne.w	8005638 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d132      	bne.n	800550c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	0151      	lsls	r1, r2, #5
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	440a      	add	r2, r1
 80054bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	015a      	lsls	r2, r3, #5
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	0151      	lsls	r1, r2, #5
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	440a      	add	r2, r1
 80054e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	015a      	lsls	r2, r3, #5
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	0151      	lsls	r1, r2, #5
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	440a      	add	r2, r1
 8005500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005504:	0cdb      	lsrs	r3, r3, #19
 8005506:	04db      	lsls	r3, r3, #19
 8005508:	6113      	str	r3, [r2, #16]
 800550a:	e04e      	b.n	80055aa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	0151      	lsls	r1, r2, #5
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	440a      	add	r2, r1
 8005522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005526:	0cdb      	lsrs	r3, r3, #19
 8005528:	04db      	lsls	r3, r3, #19
 800552a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	4413      	add	r3, r2
 8005534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	0151      	lsls	r1, r2, #5
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	440a      	add	r2, r1
 8005542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005546:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800554a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800554e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	695a      	ldr	r2, [r3, #20]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	429a      	cmp	r2, r3
 800555a:	d903      	bls.n	8005564 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	0151      	lsls	r1, r2, #5
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	440a      	add	r2, r1
 800557a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800557e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005582:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005590:	691a      	ldr	r2, [r3, #16]
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800559a:	6939      	ldr	r1, [r7, #16]
 800559c:	0148      	lsls	r0, r1, #5
 800559e:	6979      	ldr	r1, [r7, #20]
 80055a0:	4401      	add	r1, r0
 80055a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80055a6:	4313      	orrs	r3, r2
 80055a8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80055aa:	79fb      	ldrb	r3, [r7, #7]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d11e      	bne.n	80055ee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d009      	beq.n	80055cc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c4:	461a      	mov	r2, r3
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	0151      	lsls	r1, r2, #5
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	440a      	add	r2, r1
 80055e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055ea:	6013      	str	r3, [r2, #0]
 80055ec:	e092      	b.n	8005714 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	015a      	lsls	r2, r3, #5
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	0151      	lsls	r1, r2, #5
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	440a      	add	r2, r1
 8005604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005608:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800560c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d07e      	beq.n	8005714 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	f003 030f 	and.w	r3, r3, #15
 8005626:	2101      	movs	r1, #1
 8005628:	fa01 f303 	lsl.w	r3, r1, r3
 800562c:	6979      	ldr	r1, [r7, #20]
 800562e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005632:	4313      	orrs	r3, r2
 8005634:	634b      	str	r3, [r1, #52]	; 0x34
 8005636:	e06d      	b.n	8005714 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	0151      	lsls	r1, r2, #5
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	440a      	add	r2, r1
 800564e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005652:	0cdb      	lsrs	r3, r3, #19
 8005654:	04db      	lsls	r3, r3, #19
 8005656:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	4413      	add	r3, r2
 8005660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	0151      	lsls	r1, r2, #5
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	440a      	add	r2, r1
 800566e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005672:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005676:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800567a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d003      	beq.n	800568c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	015a      	lsls	r2, r3, #5
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	4413      	add	r3, r2
 8005694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	0151      	lsls	r1, r2, #5
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	440a      	add	r2, r1
 80056a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b8:	691a      	ldr	r2, [r3, #16]
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056c2:	6939      	ldr	r1, [r7, #16]
 80056c4:	0148      	lsls	r0, r1, #5
 80056c6:	6979      	ldr	r1, [r7, #20]
 80056c8:	4401      	add	r1, r0
 80056ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056ce:	4313      	orrs	r3, r2
 80056d0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80056d2:	79fb      	ldrb	r3, [r7, #7]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d10d      	bne.n	80056f4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d009      	beq.n	80056f4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	68d9      	ldr	r1, [r3, #12]
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f0:	460a      	mov	r2, r1
 80056f2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	015a      	lsls	r2, r3, #5
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	4413      	add	r3, r2
 80056fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	0151      	lsls	r1, r2, #5
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	440a      	add	r2, r1
 800570a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800570e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005712:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	371c      	adds	r7, #28
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005722:	b480      	push	{r7}
 8005724:	b089      	sub	sp, #36	; 0x24
 8005726:	af00      	add	r7, sp, #0
 8005728:	60f8      	str	r0, [r7, #12]
 800572a:	60b9      	str	r1, [r7, #8]
 800572c:	4611      	mov	r1, r2
 800572e:	461a      	mov	r2, r3
 8005730:	460b      	mov	r3, r1
 8005732:	71fb      	strb	r3, [r7, #7]
 8005734:	4613      	mov	r3, r2
 8005736:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005740:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005744:	2b00      	cmp	r3, #0
 8005746:	d11a      	bne.n	800577e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005748:	88bb      	ldrh	r3, [r7, #4]
 800574a:	3303      	adds	r3, #3
 800574c:	089b      	lsrs	r3, r3, #2
 800574e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005750:	2300      	movs	r3, #0
 8005752:	61bb      	str	r3, [r7, #24]
 8005754:	e00f      	b.n	8005776 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005756:	79fb      	ldrb	r3, [r7, #7]
 8005758:	031a      	lsls	r2, r3, #12
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	4413      	add	r3, r2
 800575e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005762:	461a      	mov	r2, r3
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6013      	str	r3, [r2, #0]
      pSrc++;
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	3304      	adds	r3, #4
 800576e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	3301      	adds	r3, #1
 8005774:	61bb      	str	r3, [r7, #24]
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	429a      	cmp	r2, r3
 800577c:	d3eb      	bcc.n	8005756 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3724      	adds	r7, #36	; 0x24
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800578c:	b480      	push	{r7}
 800578e:	b089      	sub	sp, #36	; 0x24
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	4613      	mov	r3, r2
 8005798:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80057a2:	88fb      	ldrh	r3, [r7, #6]
 80057a4:	3303      	adds	r3, #3
 80057a6:	089b      	lsrs	r3, r3, #2
 80057a8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80057aa:	2300      	movs	r3, #0
 80057ac:	61bb      	str	r3, [r7, #24]
 80057ae:	e00b      	b.n	80057c8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	3304      	adds	r3, #4
 80057c0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	3301      	adds	r3, #1
 80057c6:	61bb      	str	r3, [r7, #24]
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d3ef      	bcc.n	80057b0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80057d0:	69fb      	ldr	r3, [r7, #28]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3724      	adds	r7, #36	; 0x24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057de:	b480      	push	{r7}
 80057e0:	b085      	sub	sp, #20
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	785b      	ldrb	r3, [r3, #1]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d12c      	bne.n	8005854 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	4413      	add	r3, r2
 8005802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	db12      	blt.n	8005832 <USB_EPSetStall+0x54>
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00f      	beq.n	8005832 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	4413      	add	r3, r2
 800581a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	0151      	lsls	r1, r2, #5
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	440a      	add	r2, r1
 8005828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800582c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005830:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4413      	add	r3, r2
 800583a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	0151      	lsls	r1, r2, #5
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	440a      	add	r2, r1
 8005848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800584c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005850:	6013      	str	r3, [r2, #0]
 8005852:	e02b      	b.n	80058ac <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	4413      	add	r3, r2
 800585c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	db12      	blt.n	800588c <USB_EPSetStall+0xae>
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00f      	beq.n	800588c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	0151      	lsls	r1, r2, #5
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	440a      	add	r2, r1
 8005882:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005886:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800588a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4413      	add	r3, r2
 8005894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	0151      	lsls	r1, r2, #5
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	440a      	add	r2, r1
 80058a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80058aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3714      	adds	r7, #20
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b085      	sub	sp, #20
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
 80058c2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	785b      	ldrb	r3, [r3, #1]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d128      	bne.n	8005928 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	015a      	lsls	r2, r3, #5
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	0151      	lsls	r1, r2, #5
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	440a      	add	r2, r1
 80058ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058f4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	78db      	ldrb	r3, [r3, #3]
 80058fa:	2b03      	cmp	r3, #3
 80058fc:	d003      	beq.n	8005906 <USB_EPClearStall+0x4c>
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	78db      	ldrb	r3, [r3, #3]
 8005902:	2b02      	cmp	r3, #2
 8005904:	d138      	bne.n	8005978 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	0151      	lsls	r1, r2, #5
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	440a      	add	r2, r1
 800591c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005924:	6013      	str	r3, [r2, #0]
 8005926:	e027      	b.n	8005978 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	0151      	lsls	r1, r2, #5
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	440a      	add	r2, r1
 800593e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005942:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005946:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	78db      	ldrb	r3, [r3, #3]
 800594c:	2b03      	cmp	r3, #3
 800594e:	d003      	beq.n	8005958 <USB_EPClearStall+0x9e>
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	78db      	ldrb	r3, [r3, #3]
 8005954:	2b02      	cmp	r3, #2
 8005956:	d10f      	bne.n	8005978 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	0151      	lsls	r1, r2, #5
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	440a      	add	r2, r1
 800596e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005976:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005986:	b480      	push	{r7}
 8005988:	b085      	sub	sp, #20
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	460b      	mov	r3, r1
 8005990:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059a4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80059a8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	78fb      	ldrb	r3, [r7, #3]
 80059b4:	011b      	lsls	r3, r3, #4
 80059b6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80059ba:	68f9      	ldr	r1, [r7, #12]
 80059bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059c0:	4313      	orrs	r3, r2
 80059c2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b084      	sub	sp, #16
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059ec:	f023 0302 	bic.w	r3, r3, #2
 80059f0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80059f2:	2003      	movs	r0, #3
 80059f4:	f7fb fb92 	bl	800111c <HAL_Delay>

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b084      	sub	sp, #16
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a1c:	f043 0302 	orr.w	r3, r3, #2
 8005a20:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005a22:	2003      	movs	r0, #3
 8005a24:	f7fb fb7a 	bl	800111c <HAL_Delay>

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b085      	sub	sp, #20
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	4013      	ands	r3, r2
 8005a48:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	4013      	ands	r3, r2
 8005a7a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	0c1b      	lsrs	r3, r3, #16
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa8:	69db      	ldr	r3, [r3, #28]
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	4013      	ands	r3, r2
 8005aae:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	b29b      	uxth	r3, r3
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	460b      	mov	r3, r1
 8005aca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005ad0:	78fb      	ldrb	r3, [r7, #3]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	4013      	ands	r3, r2
 8005aec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005aee:	68bb      	ldr	r3, [r7, #8]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b087      	sub	sp, #28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	460b      	mov	r3, r1
 8005b06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b1e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005b20:	78fb      	ldrb	r3, [r7, #3]
 8005b22:	f003 030f 	and.w	r3, r3, #15
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	fa22 f303 	lsr.w	r3, r2, r3
 8005b2c:	01db      	lsls	r3, r3, #7
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005b36:	78fb      	ldrb	r3, [r7, #3]
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	4013      	ands	r3, r2
 8005b48:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	371c      	adds	r7, #28
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	695b      	ldr	r3, [r3, #20]
 8005b64:	f003 0301 	and.w	r3, r3, #1
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b8e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005b92:	f023 0307 	bic.w	r3, r3, #7
 8005b96:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005baa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
	...

08005bbc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b087      	sub	sp, #28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	607a      	str	r2, [r7, #4]
 8005bc8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	333c      	adds	r3, #60	; 0x3c
 8005bd2:	3304      	adds	r3, #4
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	4a26      	ldr	r2, [pc, #152]	; (8005c74 <USB_EP0_OutStart+0xb8>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d90a      	bls.n	8005bf6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bf0:	d101      	bne.n	8005bf6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	e037      	b.n	8005c66 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	2300      	movs	r3, #0
 8005c00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c24:	f043 0318 	orr.w	r3, r3, #24
 8005c28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c38:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005c3c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005c3e:	7afb      	ldrb	r3, [r7, #11]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d10f      	bne.n	8005c64 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c5e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005c62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	371c      	adds	r7, #28
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	4f54300a 	.word	0x4f54300a

08005c78 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005c80:	2300      	movs	r3, #0
 8005c82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3301      	adds	r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	4a13      	ldr	r2, [pc, #76]	; (8005cdc <USB_CoreReset+0x64>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d901      	bls.n	8005c96 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e01b      	b.n	8005cce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	daf2      	bge.n	8005c84 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	f043 0201 	orr.w	r2, r3, #1
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	4a09      	ldr	r2, [pc, #36]	; (8005cdc <USB_CoreReset+0x64>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d901      	bls.n	8005cc0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e006      	b.n	8005cce <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d0f0      	beq.n	8005cae <USB_CoreReset+0x36>

  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	00030d40 	.word	0x00030d40

08005ce0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	460b      	mov	r3, r1
 8005cea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005cec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005cf0:	f002 f92c 	bl	8007f4c <malloc>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d105      	bne.n	8005d0a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005d06:	2302      	movs	r3, #2
 8005d08:	e066      	b.n	8005dd8 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	7c1b      	ldrb	r3, [r3, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d119      	bne.n	8005d4e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005d1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d1e:	2202      	movs	r2, #2
 8005d20:	2181      	movs	r1, #129	; 0x81
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f001 ff99 	bl	8007c5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005d2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d32:	2202      	movs	r2, #2
 8005d34:	2101      	movs	r1, #1
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f001 ff8f 	bl	8007c5a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2210      	movs	r2, #16
 8005d48:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005d4c:	e016      	b.n	8005d7c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005d4e:	2340      	movs	r3, #64	; 0x40
 8005d50:	2202      	movs	r2, #2
 8005d52:	2181      	movs	r1, #129	; 0x81
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f001 ff80 	bl	8007c5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005d60:	2340      	movs	r3, #64	; 0x40
 8005d62:	2202      	movs	r2, #2
 8005d64:	2101      	movs	r1, #1
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f001 ff77 	bl	8007c5a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2210      	movs	r2, #16
 8005d78:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005d7c:	2308      	movs	r3, #8
 8005d7e:	2203      	movs	r2, #3
 8005d80:	2182      	movs	r1, #130	; 0x82
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f001 ff69 	bl	8007c5a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	7c1b      	ldrb	r3, [r3, #16]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d109      	bne.n	8005dc6 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005db8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dbc:	2101      	movs	r1, #1
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f002 f83a 	bl	8007e38 <USBD_LL_PrepareReceive>
 8005dc4:	e007      	b.n	8005dd6 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005dcc:	2340      	movs	r3, #64	; 0x40
 8005dce:	2101      	movs	r1, #1
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f002 f831 	bl	8007e38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3710      	adds	r7, #16
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	460b      	mov	r3, r1
 8005dea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005df0:	2181      	movs	r1, #129	; 0x81
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f001 ff57 	bl	8007ca6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005dfe:	2101      	movs	r1, #1
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f001 ff50 	bl	8007ca6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005e0e:	2182      	movs	r1, #130	; 0x82
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f001 ff48 	bl	8007ca6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00e      	beq.n	8005e4e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e40:	4618      	mov	r0, r3
 8005e42:	f002 f88b 	bl	8007f5c <free>
    pdev->pClassData = NULL;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8005e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e68:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e72:	2300      	movs	r3, #0
 8005e74:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d03a      	beq.n	8005ef8 <USBD_CDC_Setup+0xa0>
 8005e82:	2b20      	cmp	r3, #32
 8005e84:	f040 8097 	bne.w	8005fb6 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	88db      	ldrh	r3, [r3, #6]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d029      	beq.n	8005ee4 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	b25b      	sxtb	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	da11      	bge.n	8005ebe <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	683a      	ldr	r2, [r7, #0]
 8005ea4:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005ea6:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ea8:	683a      	ldr	r2, [r7, #0]
 8005eaa:	88d2      	ldrh	r2, [r2, #6]
 8005eac:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005eae:	6939      	ldr	r1, [r7, #16]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	88db      	ldrh	r3, [r3, #6]
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f001 fa9d 	bl	80073f6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005ebc:	e082      	b.n	8005fc4 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	785a      	ldrb	r2, [r3, #1]
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	88db      	ldrh	r3, [r3, #6]
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005ed4:	6939      	ldr	r1, [r7, #16]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	88db      	ldrh	r3, [r3, #6]
 8005eda:	461a      	mov	r2, r3
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f001 fab6 	bl	800744e <USBD_CtlPrepareRx>
    break;
 8005ee2:	e06f      	b.n	8005fc4 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	683a      	ldr	r2, [r7, #0]
 8005eee:	7850      	ldrb	r0, [r2, #1]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	6839      	ldr	r1, [r7, #0]
 8005ef4:	4798      	blx	r3
    break;
 8005ef6:	e065      	b.n	8005fc4 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	785b      	ldrb	r3, [r3, #1]
 8005efc:	2b0b      	cmp	r3, #11
 8005efe:	d84f      	bhi.n	8005fa0 <USBD_CDC_Setup+0x148>
 8005f00:	a201      	add	r2, pc, #4	; (adr r2, 8005f08 <USBD_CDC_Setup+0xb0>)
 8005f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f06:	bf00      	nop
 8005f08:	08005f39 	.word	0x08005f39
 8005f0c:	08005faf 	.word	0x08005faf
 8005f10:	08005fa1 	.word	0x08005fa1
 8005f14:	08005fa1 	.word	0x08005fa1
 8005f18:	08005fa1 	.word	0x08005fa1
 8005f1c:	08005fa1 	.word	0x08005fa1
 8005f20:	08005fa1 	.word	0x08005fa1
 8005f24:	08005fa1 	.word	0x08005fa1
 8005f28:	08005fa1 	.word	0x08005fa1
 8005f2c:	08005fa1 	.word	0x08005fa1
 8005f30:	08005f61 	.word	0x08005f61
 8005f34:	08005f89 	.word	0x08005f89
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f3e:	2b03      	cmp	r3, #3
 8005f40:	d107      	bne.n	8005f52 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005f42:	f107 030c 	add.w	r3, r7, #12
 8005f46:	2202      	movs	r2, #2
 8005f48:	4619      	mov	r1, r3
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f001 fa53 	bl	80073f6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005f50:	e030      	b.n	8005fb4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005f52:	6839      	ldr	r1, [r7, #0]
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f001 f9dd 	bl	8007314 <USBD_CtlError>
        ret = USBD_FAIL;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	75fb      	strb	r3, [r7, #23]
      break;
 8005f5e:	e029      	b.n	8005fb4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f66:	2b03      	cmp	r3, #3
 8005f68:	d107      	bne.n	8005f7a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005f6a:	f107 030f 	add.w	r3, r7, #15
 8005f6e:	2201      	movs	r2, #1
 8005f70:	4619      	mov	r1, r3
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f001 fa3f 	bl	80073f6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005f78:	e01c      	b.n	8005fb4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005f7a:	6839      	ldr	r1, [r7, #0]
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f001 f9c9 	bl	8007314 <USBD_CtlError>
        ret = USBD_FAIL;
 8005f82:	2303      	movs	r3, #3
 8005f84:	75fb      	strb	r3, [r7, #23]
      break;
 8005f86:	e015      	b.n	8005fb4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f8e:	2b03      	cmp	r3, #3
 8005f90:	d00f      	beq.n	8005fb2 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8005f92:	6839      	ldr	r1, [r7, #0]
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f001 f9bd 	bl	8007314 <USBD_CtlError>
        ret = USBD_FAIL;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005f9e:	e008      	b.n	8005fb2 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005fa0:	6839      	ldr	r1, [r7, #0]
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f001 f9b6 	bl	8007314 <USBD_CtlError>
      ret = USBD_FAIL;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	75fb      	strb	r3, [r7, #23]
      break;
 8005fac:	e002      	b.n	8005fb4 <USBD_CDC_Setup+0x15c>
      break;
 8005fae:	bf00      	nop
 8005fb0:	e008      	b.n	8005fc4 <USBD_CDC_Setup+0x16c>
      break;
 8005fb2:	bf00      	nop
    }
    break;
 8005fb4:	e006      	b.n	8005fc4 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8005fb6:	6839      	ldr	r1, [r7, #0]
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f001 f9ab 	bl	8007314 <USBD_CtlError>
    ret = USBD_FAIL;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	75fb      	strb	r3, [r7, #23]
    break;
 8005fc2:	bf00      	nop
  }

  return (uint8_t)ret;
 8005fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3718      	adds	r7, #24
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop

08005fd0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	460b      	mov	r3, r1
 8005fda:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005fe2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e049      	b.n	8006086 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ff8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005ffa:	78fa      	ldrb	r2, [r7, #3]
 8005ffc:	6879      	ldr	r1, [r7, #4]
 8005ffe:	4613      	mov	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4413      	add	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	440b      	add	r3, r1
 8006008:	3318      	adds	r3, #24
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d029      	beq.n	8006064 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006010:	78fa      	ldrb	r2, [r7, #3]
 8006012:	6879      	ldr	r1, [r7, #4]
 8006014:	4613      	mov	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	440b      	add	r3, r1
 800601e:	3318      	adds	r3, #24
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	78f9      	ldrb	r1, [r7, #3]
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	460b      	mov	r3, r1
 8006028:	00db      	lsls	r3, r3, #3
 800602a:	1a5b      	subs	r3, r3, r1
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4403      	add	r3, r0
 8006030:	3344      	adds	r3, #68	; 0x44
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	fbb2 f1f3 	udiv	r1, r2, r3
 8006038:	fb03 f301 	mul.w	r3, r3, r1
 800603c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800603e:	2b00      	cmp	r3, #0
 8006040:	d110      	bne.n	8006064 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006042:	78fa      	ldrb	r2, [r7, #3]
 8006044:	6879      	ldr	r1, [r7, #4]
 8006046:	4613      	mov	r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4413      	add	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	440b      	add	r3, r1
 8006050:	3318      	adds	r3, #24
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006056:	78f9      	ldrb	r1, [r7, #3]
 8006058:	2300      	movs	r3, #0
 800605a:	2200      	movs	r2, #0
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f001 feca 	bl	8007df6 <USBD_LL_Transmit>
 8006062:	e00f      	b.n	8006084 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	2200      	movs	r2, #0
 8006068:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006080:	78fa      	ldrb	r2, [r7, #3]
 8006082:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b084      	sub	sp, #16
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
 8006096:	460b      	mov	r3, r1
 8006098:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e015      	b.n	80060dc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80060b0:	78fb      	ldrb	r3, [r7, #3]
 80060b2:	4619      	mov	r1, r3
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f001 fee0 	bl	8007e7a <USBD_LL_GetRxDataSize>
 80060ba:	4602      	mov	r2, r0
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80060d6:	4611      	mov	r1, r2
 80060d8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060f2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d015      	beq.n	800612a <USBD_CDC_EP0_RxReady+0x46>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006104:	2bff      	cmp	r3, #255	; 0xff
 8006106:	d010      	beq.n	800612a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006116:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800611e:	b292      	uxth	r2, r2
 8006120:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	22ff      	movs	r2, #255	; 0xff
 8006126:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2243      	movs	r2, #67	; 0x43
 8006140:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006142:	4b03      	ldr	r3, [pc, #12]	; (8006150 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006144:	4618      	mov	r0, r3
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr
 8006150:	20000094 	.word	0x20000094

08006154 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2243      	movs	r2, #67	; 0x43
 8006160:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006162:	4b03      	ldr	r3, [pc, #12]	; (8006170 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006164:	4618      	mov	r0, r3
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	20000050 	.word	0x20000050

08006174 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2243      	movs	r2, #67	; 0x43
 8006180:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006182:	4b03      	ldr	r3, [pc, #12]	; (8006190 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006184:	4618      	mov	r0, r3
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr
 8006190:	200000d8 	.word	0x200000d8

08006194 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	220a      	movs	r2, #10
 80061a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80061a2:	4b03      	ldr	r3, [pc, #12]	; (80061b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	2000000c 	.word	0x2000000c

080061b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d101      	bne.n	80061c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e004      	b.n	80061d2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80061de:	b480      	push	{r7}
 80061e0:	b087      	sub	sp, #28
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	60f8      	str	r0, [r7, #12]
 80061e6:	60b9      	str	r1, [r7, #8]
 80061e8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061f0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	371c      	adds	r7, #28
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006220:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	683a      	ldr	r2, [r7, #0]
 8006226:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3714      	adds	r7, #20
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006246:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006248:	2301      	movs	r3, #1
 800624a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006256:	2303      	movs	r3, #3
 8006258:	e01a      	b.n	8006290 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006260:	2b00      	cmp	r3, #0
 8006262:	d114      	bne.n	800628e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2201      	movs	r2, #1
 8006268:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006282:	2181      	movs	r1, #129	; 0x81
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f001 fdb6 	bl	8007df6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800628a:	2300      	movs	r3, #0
 800628c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800628e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006290:	4618      	mov	r0, r3
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e016      	b.n	80062e4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	7c1b      	ldrb	r3, [r3, #16]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d109      	bne.n	80062d2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062c8:	2101      	movs	r1, #1
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f001 fdb4 	bl	8007e38 <USBD_LL_PrepareReceive>
 80062d0:	e007      	b.n	80062e2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80062d8:	2340      	movs	r3, #64	; 0x40
 80062da:	2101      	movs	r1, #1
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f001 fdab 	bl	8007e38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3710      	adds	r7, #16
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b086      	sub	sp, #24
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	4613      	mov	r3, r2
 80062f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006300:	2303      	movs	r3, #3
 8006302:	e025      	b.n	8006350 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800631c:	2b00      	cmp	r3, #0
 800631e:	d003      	beq.n	8006328 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d003      	beq.n	8006336 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	79fa      	ldrb	r2, [r7, #7]
 8006342:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f001 fc21 	bl	8007b8c <USBD_LL_Init>
 800634a:	4603      	mov	r3, r0
 800634c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800634e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006350:	4618      	mov	r0, r3
 8006352:	3718      	adds	r7, #24
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006362:	2300      	movs	r3, #0
 8006364:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d101      	bne.n	8006370 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800636c:	2303      	movs	r3, #3
 800636e:	e010      	b.n	8006392 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800637e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006380:	f107 020e 	add.w	r2, r7, #14
 8006384:	4610      	mov	r0, r2
 8006386:	4798      	blx	r3
 8006388:	4602      	mov	r2, r0
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b082      	sub	sp, #8
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f001 fc3e 	bl	8007c24 <USBD_LL_Start>
 80063a8:	4603      	mov	r3, r0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b083      	sub	sp, #12
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	460b      	mov	r3, r1
 80063d2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80063d4:	2303      	movs	r3, #3
 80063d6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d009      	beq.n	80063f6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	78fa      	ldrb	r2, [r7, #3]
 80063ec:	4611      	mov	r1, r2
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	4798      	blx	r3
 80063f2:	4603      	mov	r3, r0
 80063f4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	460b      	mov	r3, r1
 800640a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006412:	2b00      	cmp	r3, #0
 8006414:	d007      	beq.n	8006426 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	78fa      	ldrb	r2, [r7, #3]
 8006420:	4611      	mov	r1, r2
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	4798      	blx	r3
  }

  return USBD_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3708      	adds	r7, #8
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006440:	6839      	ldr	r1, [r7, #0]
 8006442:	4618      	mov	r0, r3
 8006444:	f000 ff2c 	bl	80072a0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006456:	461a      	mov	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006464:	f003 031f 	and.w	r3, r3, #31
 8006468:	2b01      	cmp	r3, #1
 800646a:	d00e      	beq.n	800648a <USBD_LL_SetupStage+0x5a>
 800646c:	2b01      	cmp	r3, #1
 800646e:	d302      	bcc.n	8006476 <USBD_LL_SetupStage+0x46>
 8006470:	2b02      	cmp	r3, #2
 8006472:	d014      	beq.n	800649e <USBD_LL_SetupStage+0x6e>
 8006474:	e01d      	b.n	80064b2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800647c:	4619      	mov	r1, r3
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fa18 	bl	80068b4 <USBD_StdDevReq>
 8006484:	4603      	mov	r3, r0
 8006486:	73fb      	strb	r3, [r7, #15]
      break;
 8006488:	e020      	b.n	80064cc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006490:	4619      	mov	r1, r3
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 fa7c 	bl	8006990 <USBD_StdItfReq>
 8006498:	4603      	mov	r3, r0
 800649a:	73fb      	strb	r3, [r7, #15]
      break;
 800649c:	e016      	b.n	80064cc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80064a4:	4619      	mov	r1, r3
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fab8 	bl	8006a1c <USBD_StdEPReq>
 80064ac:	4603      	mov	r3, r0
 80064ae:	73fb      	strb	r3, [r7, #15]
      break;
 80064b0:	e00c      	b.n	80064cc <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80064b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	4619      	mov	r1, r3
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f001 fc0f 	bl	8007ce4 <USBD_LL_StallEP>
 80064c6:	4603      	mov	r3, r0
 80064c8:	73fb      	strb	r3, [r7, #15]
      break;
 80064ca:	bf00      	nop
  }

  return ret;
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b086      	sub	sp, #24
 80064da:	af00      	add	r7, sp, #0
 80064dc:	60f8      	str	r0, [r7, #12]
 80064de:	460b      	mov	r3, r1
 80064e0:	607a      	str	r2, [r7, #4]
 80064e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80064e4:	7afb      	ldrb	r3, [r7, #11]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d137      	bne.n	800655a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80064f0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064f8:	2b03      	cmp	r3, #3
 80064fa:	d14a      	bne.n	8006592 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	689a      	ldr	r2, [r3, #8]
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	429a      	cmp	r2, r3
 8006506:	d913      	bls.n	8006530 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	689a      	ldr	r2, [r3, #8]
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	1ad2      	subs	r2, r2, r3
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	68da      	ldr	r2, [r3, #12]
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	4293      	cmp	r3, r2
 8006520:	bf28      	it	cs
 8006522:	4613      	movcs	r3, r2
 8006524:	461a      	mov	r2, r3
 8006526:	6879      	ldr	r1, [r7, #4]
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f000 ffad 	bl	8007488 <USBD_CtlContinueRx>
 800652e:	e030      	b.n	8006592 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00a      	beq.n	8006552 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006542:	2b03      	cmp	r3, #3
 8006544:	d105      	bne.n	8006552 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 ffa9 	bl	80074aa <USBD_CtlSendStatus>
 8006558:	e01b      	b.n	8006592 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d013      	beq.n	800658e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800656c:	2b03      	cmp	r3, #3
 800656e:	d10e      	bne.n	800658e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	7afa      	ldrb	r2, [r7, #11]
 800657a:	4611      	mov	r1, r2
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	4798      	blx	r3
 8006580:	4603      	mov	r3, r0
 8006582:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006584:	7dfb      	ldrb	r3, [r7, #23]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800658a:	7dfb      	ldrb	r3, [r7, #23]
 800658c:	e002      	b.n	8006594 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800658e:	2303      	movs	r3, #3
 8006590:	e000      	b.n	8006594 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3718      	adds	r7, #24
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	460b      	mov	r3, r1
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80065aa:	7afb      	ldrb	r3, [r7, #11]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d16a      	bne.n	8006686 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	3314      	adds	r3, #20
 80065b4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d155      	bne.n	800666c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	689a      	ldr	r2, [r3, #8]
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d914      	bls.n	80065f6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	689a      	ldr	r2, [r3, #8]
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	1ad2      	subs	r2, r2, r3
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	461a      	mov	r2, r3
 80065e0:	6879      	ldr	r1, [r7, #4]
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f000 ff22 	bl	800742c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065e8:	2300      	movs	r3, #0
 80065ea:	2200      	movs	r2, #0
 80065ec:	2100      	movs	r1, #0
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f001 fc22 	bl	8007e38 <USBD_LL_PrepareReceive>
 80065f4:	e03a      	b.n	800666c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	68da      	ldr	r2, [r3, #12]
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d11c      	bne.n	800663c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800660a:	429a      	cmp	r2, r3
 800660c:	d316      	bcc.n	800663c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	685a      	ldr	r2, [r3, #4]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006618:	429a      	cmp	r2, r3
 800661a:	d20f      	bcs.n	800663c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800661c:	2200      	movs	r2, #0
 800661e:	2100      	movs	r1, #0
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f000 ff03 	bl	800742c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800662e:	2300      	movs	r3, #0
 8006630:	2200      	movs	r2, #0
 8006632:	2100      	movs	r1, #0
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f001 fbff 	bl	8007e38 <USBD_LL_PrepareReceive>
 800663a:	e017      	b.n	800666c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00a      	beq.n	800665e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800664e:	2b03      	cmp	r3, #3
 8006650:	d105      	bne.n	800665e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800665e:	2180      	movs	r1, #128	; 0x80
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f001 fb3f 	bl	8007ce4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f000 ff32 	bl	80074d0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006672:	2b01      	cmp	r3, #1
 8006674:	d123      	bne.n	80066be <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f7ff fe9b 	bl	80063b2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006684:	e01b      	b.n	80066be <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d013      	beq.n	80066ba <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006698:	2b03      	cmp	r3, #3
 800669a:	d10e      	bne.n	80066ba <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	7afa      	ldrb	r2, [r7, #11]
 80066a6:	4611      	mov	r1, r2
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	4798      	blx	r3
 80066ac:	4603      	mov	r3, r0
 80066ae:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80066b0:	7dfb      	ldrb	r3, [r7, #23]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d003      	beq.n	80066be <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80066b6:	7dfb      	ldrb	r3, [r7, #23]
 80066b8:	e002      	b.n	80066c0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e000      	b.n	80066c0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3718      	adds	r7, #24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d009      	beq.n	800670c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	6852      	ldr	r2, [r2, #4]
 8006704:	b2d2      	uxtb	r2, r2
 8006706:	4611      	mov	r1, r2
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800670c:	2340      	movs	r3, #64	; 0x40
 800670e:	2200      	movs	r2, #0
 8006710:	2100      	movs	r1, #0
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f001 faa1 	bl	8007c5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2240      	movs	r2, #64	; 0x40
 8006724:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006728:	2340      	movs	r3, #64	; 0x40
 800672a:	2200      	movs	r2, #0
 800672c:	2180      	movs	r1, #128	; 0x80
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f001 fa93 	bl	8007c5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2240      	movs	r2, #64	; 0x40
 800673e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800674a:	b480      	push	{r7}
 800674c:	b083      	sub	sp, #12
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
 8006752:	460b      	mov	r3, r1
 8006754:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	78fa      	ldrb	r2, [r7, #3]
 800675a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800676a:	b480      	push	{r7}
 800676c:	b083      	sub	sp, #12
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2204      	movs	r2, #4
 8006782:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067a2:	2b04      	cmp	r3, #4
 80067a4:	d105      	bne.n	80067b2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ce:	2b03      	cmp	r3, #3
 80067d0:	d10b      	bne.n	80067ea <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d005      	beq.n	80067ea <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e4:	69db      	ldr	r3, [r3, #28]
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3708      	adds	r7, #8
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	460b      	mov	r3, r1
 80067fe:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	370c      	adds	r7, #12
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800680e:	b480      	push	{r7}
 8006810:	b083      	sub	sp, #12
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	460b      	mov	r3, r1
 8006818:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b082      	sub	sp, #8
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006854:	2b00      	cmp	r3, #0
 8006856:	d009      	beq.n	800686c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	6852      	ldr	r2, [r2, #4]
 8006864:	b2d2      	uxtb	r2, r2
 8006866:	4611      	mov	r1, r2
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	4798      	blx	r3
  }

  return USBD_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006876:	b480      	push	{r7}
 8006878:	b087      	sub	sp, #28
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	3301      	adds	r3, #1
 800688c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006894:	8a3b      	ldrh	r3, [r7, #16]
 8006896:	021b      	lsls	r3, r3, #8
 8006898:	b21a      	sxth	r2, r3
 800689a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800689e:	4313      	orrs	r3, r2
 80068a0:	b21b      	sxth	r3, r3
 80068a2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80068a4:	89fb      	ldrh	r3, [r7, #14]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	371c      	adds	r7, #28
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
	...

080068b4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068be:	2300      	movs	r3, #0
 80068c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068ca:	2b20      	cmp	r3, #32
 80068cc:	d004      	beq.n	80068d8 <USBD_StdDevReq+0x24>
 80068ce:	2b40      	cmp	r3, #64	; 0x40
 80068d0:	d002      	beq.n	80068d8 <USBD_StdDevReq+0x24>
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00a      	beq.n	80068ec <USBD_StdDevReq+0x38>
 80068d6:	e050      	b.n	800697a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	6839      	ldr	r1, [r7, #0]
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	4798      	blx	r3
 80068e6:	4603      	mov	r3, r0
 80068e8:	73fb      	strb	r3, [r7, #15]
    break;
 80068ea:	e04b      	b.n	8006984 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	785b      	ldrb	r3, [r3, #1]
 80068f0:	2b09      	cmp	r3, #9
 80068f2:	d83c      	bhi.n	800696e <USBD_StdDevReq+0xba>
 80068f4:	a201      	add	r2, pc, #4	; (adr r2, 80068fc <USBD_StdDevReq+0x48>)
 80068f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fa:	bf00      	nop
 80068fc:	08006951 	.word	0x08006951
 8006900:	08006965 	.word	0x08006965
 8006904:	0800696f 	.word	0x0800696f
 8006908:	0800695b 	.word	0x0800695b
 800690c:	0800696f 	.word	0x0800696f
 8006910:	0800692f 	.word	0x0800692f
 8006914:	08006925 	.word	0x08006925
 8006918:	0800696f 	.word	0x0800696f
 800691c:	08006947 	.word	0x08006947
 8006920:	08006939 	.word	0x08006939
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006924:	6839      	ldr	r1, [r7, #0]
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f9ce 	bl	8006cc8 <USBD_GetDescriptor>
      break;
 800692c:	e024      	b.n	8006978 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800692e:	6839      	ldr	r1, [r7, #0]
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fb33 	bl	8006f9c <USBD_SetAddress>
      break;
 8006936:	e01f      	b.n	8006978 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006938:	6839      	ldr	r1, [r7, #0]
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 fb70 	bl	8007020 <USBD_SetConfig>
 8006940:	4603      	mov	r3, r0
 8006942:	73fb      	strb	r3, [r7, #15]
      break;
 8006944:	e018      	b.n	8006978 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006946:	6839      	ldr	r1, [r7, #0]
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fc0d 	bl	8007168 <USBD_GetConfig>
      break;
 800694e:	e013      	b.n	8006978 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006950:	6839      	ldr	r1, [r7, #0]
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fc3c 	bl	80071d0 <USBD_GetStatus>
      break;
 8006958:	e00e      	b.n	8006978 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800695a:	6839      	ldr	r1, [r7, #0]
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fc6a 	bl	8007236 <USBD_SetFeature>
      break;
 8006962:	e009      	b.n	8006978 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006964:	6839      	ldr	r1, [r7, #0]
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fc79 	bl	800725e <USBD_ClrFeature>
      break;
 800696c:	e004      	b.n	8006978 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800696e:	6839      	ldr	r1, [r7, #0]
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fccf 	bl	8007314 <USBD_CtlError>
      break;
 8006976:	bf00      	nop
    }
    break;
 8006978:	e004      	b.n	8006984 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800697a:	6839      	ldr	r1, [r7, #0]
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fcc9 	bl	8007314 <USBD_CtlError>
    break;
 8006982:	bf00      	nop
  }

  return ret;
 8006984:	7bfb      	ldrb	r3, [r7, #15]
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop

08006990 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069a6:	2b20      	cmp	r3, #32
 80069a8:	d003      	beq.n	80069b2 <USBD_StdItfReq+0x22>
 80069aa:	2b40      	cmp	r3, #64	; 0x40
 80069ac:	d001      	beq.n	80069b2 <USBD_StdItfReq+0x22>
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d12a      	bne.n	8006a08 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069b8:	3b01      	subs	r3, #1
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d81d      	bhi.n	80069fa <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	889b      	ldrh	r3, [r3, #4]
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d813      	bhi.n	80069f0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	6839      	ldr	r1, [r7, #0]
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	4798      	blx	r3
 80069d6:	4603      	mov	r3, r0
 80069d8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	88db      	ldrh	r3, [r3, #6]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d110      	bne.n	8006a04 <USBD_StdItfReq+0x74>
 80069e2:	7bfb      	ldrb	r3, [r7, #15]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10d      	bne.n	8006a04 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 fd5e 	bl	80074aa <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80069ee:	e009      	b.n	8006a04 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80069f0:	6839      	ldr	r1, [r7, #0]
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fc8e 	bl	8007314 <USBD_CtlError>
      break;
 80069f8:	e004      	b.n	8006a04 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fc89 	bl	8007314 <USBD_CtlError>
      break;
 8006a02:	e000      	b.n	8006a06 <USBD_StdItfReq+0x76>
      break;
 8006a04:	bf00      	nop
    }
    break;
 8006a06:	e004      	b.n	8006a12 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006a08:	6839      	ldr	r1, [r7, #0]
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 fc82 	bl	8007314 <USBD_CtlError>
    break;
 8006a10:	bf00      	nop
  }

  return ret;
 8006a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	889b      	ldrh	r3, [r3, #4]
 8006a2e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a38:	2b20      	cmp	r3, #32
 8006a3a:	d004      	beq.n	8006a46 <USBD_StdEPReq+0x2a>
 8006a3c:	2b40      	cmp	r3, #64	; 0x40
 8006a3e:	d002      	beq.n	8006a46 <USBD_StdEPReq+0x2a>
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00a      	beq.n	8006a5a <USBD_StdEPReq+0x3e>
 8006a44:	e135      	b.n	8006cb2 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	6839      	ldr	r1, [r7, #0]
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	4798      	blx	r3
 8006a54:	4603      	mov	r3, r0
 8006a56:	73fb      	strb	r3, [r7, #15]
    break;
 8006a58:	e130      	b.n	8006cbc <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	785b      	ldrb	r3, [r3, #1]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d03e      	beq.n	8006ae0 <USBD_StdEPReq+0xc4>
 8006a62:	2b03      	cmp	r3, #3
 8006a64:	d002      	beq.n	8006a6c <USBD_StdEPReq+0x50>
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d077      	beq.n	8006b5a <USBD_StdEPReq+0x13e>
 8006a6a:	e11c      	b.n	8006ca6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d002      	beq.n	8006a7c <USBD_StdEPReq+0x60>
 8006a76:	2b03      	cmp	r3, #3
 8006a78:	d015      	beq.n	8006aa6 <USBD_StdEPReq+0x8a>
 8006a7a:	e02b      	b.n	8006ad4 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a7c:	7bbb      	ldrb	r3, [r7, #14]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00c      	beq.n	8006a9c <USBD_StdEPReq+0x80>
 8006a82:	7bbb      	ldrb	r3, [r7, #14]
 8006a84:	2b80      	cmp	r3, #128	; 0x80
 8006a86:	d009      	beq.n	8006a9c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a88:	7bbb      	ldrb	r3, [r7, #14]
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f001 f929 	bl	8007ce4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a92:	2180      	movs	r1, #128	; 0x80
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f001 f925 	bl	8007ce4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006a9a:	e020      	b.n	8006ade <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006a9c:	6839      	ldr	r1, [r7, #0]
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fc38 	bl	8007314 <USBD_CtlError>
        break;
 8006aa4:	e01b      	b.n	8006ade <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	885b      	ldrh	r3, [r3, #2]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10e      	bne.n	8006acc <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006aae:	7bbb      	ldrb	r3, [r7, #14]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00b      	beq.n	8006acc <USBD_StdEPReq+0xb0>
 8006ab4:	7bbb      	ldrb	r3, [r7, #14]
 8006ab6:	2b80      	cmp	r3, #128	; 0x80
 8006ab8:	d008      	beq.n	8006acc <USBD_StdEPReq+0xb0>
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	88db      	ldrh	r3, [r3, #6]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d104      	bne.n	8006acc <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ac2:	7bbb      	ldrb	r3, [r7, #14]
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f001 f90c 	bl	8007ce4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fcec 	bl	80074aa <USBD_CtlSendStatus>

        break;
 8006ad2:	e004      	b.n	8006ade <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006ad4:	6839      	ldr	r1, [r7, #0]
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 fc1c 	bl	8007314 <USBD_CtlError>
        break;
 8006adc:	bf00      	nop
      }
      break;
 8006ade:	e0e7      	b.n	8006cb0 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d002      	beq.n	8006af0 <USBD_StdEPReq+0xd4>
 8006aea:	2b03      	cmp	r3, #3
 8006aec:	d015      	beq.n	8006b1a <USBD_StdEPReq+0xfe>
 8006aee:	e02d      	b.n	8006b4c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006af0:	7bbb      	ldrb	r3, [r7, #14]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00c      	beq.n	8006b10 <USBD_StdEPReq+0xf4>
 8006af6:	7bbb      	ldrb	r3, [r7, #14]
 8006af8:	2b80      	cmp	r3, #128	; 0x80
 8006afa:	d009      	beq.n	8006b10 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006afc:	7bbb      	ldrb	r3, [r7, #14]
 8006afe:	4619      	mov	r1, r3
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f001 f8ef 	bl	8007ce4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b06:	2180      	movs	r1, #128	; 0x80
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f001 f8eb 	bl	8007ce4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006b0e:	e023      	b.n	8006b58 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006b10:	6839      	ldr	r1, [r7, #0]
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 fbfe 	bl	8007314 <USBD_CtlError>
        break;
 8006b18:	e01e      	b.n	8006b58 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	885b      	ldrh	r3, [r3, #2]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d119      	bne.n	8006b56 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006b22:	7bbb      	ldrb	r3, [r7, #14]
 8006b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d004      	beq.n	8006b36 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006b2c:	7bbb      	ldrb	r3, [r7, #14]
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f001 f8f6 	bl	8007d22 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fcb7 	bl	80074aa <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	6839      	ldr	r1, [r7, #0]
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	4798      	blx	r3
        }
        break;
 8006b4a:	e004      	b.n	8006b56 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006b4c:	6839      	ldr	r1, [r7, #0]
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fbe0 	bl	8007314 <USBD_CtlError>
        break;
 8006b54:	e000      	b.n	8006b58 <USBD_StdEPReq+0x13c>
        break;
 8006b56:	bf00      	nop
      }
      break;
 8006b58:	e0aa      	b.n	8006cb0 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d002      	beq.n	8006b6a <USBD_StdEPReq+0x14e>
 8006b64:	2b03      	cmp	r3, #3
 8006b66:	d032      	beq.n	8006bce <USBD_StdEPReq+0x1b2>
 8006b68:	e097      	b.n	8006c9a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b6a:	7bbb      	ldrb	r3, [r7, #14]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d007      	beq.n	8006b80 <USBD_StdEPReq+0x164>
 8006b70:	7bbb      	ldrb	r3, [r7, #14]
 8006b72:	2b80      	cmp	r3, #128	; 0x80
 8006b74:	d004      	beq.n	8006b80 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8006b76:	6839      	ldr	r1, [r7, #0]
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fbcb 	bl	8007314 <USBD_CtlError>
          break;
 8006b7e:	e091      	b.n	8006ca4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	da0b      	bge.n	8006ba0 <USBD_StdEPReq+0x184>
 8006b88:	7bbb      	ldrb	r3, [r7, #14]
 8006b8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b8e:	4613      	mov	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4413      	add	r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	3310      	adds	r3, #16
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	e00b      	b.n	8006bb8 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006ba0:	7bbb      	ldrb	r3, [r7, #14]
 8006ba2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4413      	add	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	3304      	adds	r3, #4
 8006bb8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 fc15 	bl	80073f6 <USBD_CtlSendData>
        break;
 8006bcc:	e06a      	b.n	8006ca4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006bce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	da11      	bge.n	8006bfa <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006bd6:	7bbb      	ldrb	r3, [r7, #14]
 8006bd8:	f003 020f 	and.w	r2, r3, #15
 8006bdc:	6879      	ldr	r1, [r7, #4]
 8006bde:	4613      	mov	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4413      	add	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	440b      	add	r3, r1
 8006be8:	3324      	adds	r3, #36	; 0x24
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d117      	bne.n	8006c20 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006bf0:	6839      	ldr	r1, [r7, #0]
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 fb8e 	bl	8007314 <USBD_CtlError>
            break;
 8006bf8:	e054      	b.n	8006ca4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006bfa:	7bbb      	ldrb	r3, [r7, #14]
 8006bfc:	f003 020f 	and.w	r2, r3, #15
 8006c00:	6879      	ldr	r1, [r7, #4]
 8006c02:	4613      	mov	r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4413      	add	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	440b      	add	r3, r1
 8006c0c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006c10:	881b      	ldrh	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d104      	bne.n	8006c20 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006c16:	6839      	ldr	r1, [r7, #0]
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fb7b 	bl	8007314 <USBD_CtlError>
            break;
 8006c1e:	e041      	b.n	8006ca4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	da0b      	bge.n	8006c40 <USBD_StdEPReq+0x224>
 8006c28:	7bbb      	ldrb	r3, [r7, #14]
 8006c2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c2e:	4613      	mov	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	3310      	adds	r3, #16
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	3304      	adds	r3, #4
 8006c3e:	e00b      	b.n	8006c58 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006c40:	7bbb      	ldrb	r3, [r7, #14]
 8006c42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c46:	4613      	mov	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	4413      	add	r3, r2
 8006c56:	3304      	adds	r3, #4
 8006c58:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006c5a:	7bbb      	ldrb	r3, [r7, #14]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d002      	beq.n	8006c66 <USBD_StdEPReq+0x24a>
 8006c60:	7bbb      	ldrb	r3, [r7, #14]
 8006c62:	2b80      	cmp	r3, #128	; 0x80
 8006c64:	d103      	bne.n	8006c6e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	601a      	str	r2, [r3, #0]
 8006c6c:	e00e      	b.n	8006c8c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006c6e:	7bbb      	ldrb	r3, [r7, #14]
 8006c70:	4619      	mov	r1, r3
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f001 f874 	bl	8007d60 <USBD_LL_IsStallEP>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	2201      	movs	r2, #1
 8006c82:	601a      	str	r2, [r3, #0]
 8006c84:	e002      	b.n	8006c8c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	2202      	movs	r2, #2
 8006c90:	4619      	mov	r1, r3
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 fbaf 	bl	80073f6 <USBD_CtlSendData>
          break;
 8006c98:	e004      	b.n	8006ca4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fb39 	bl	8007314 <USBD_CtlError>
        break;
 8006ca2:	bf00      	nop
      }
      break;
 8006ca4:	e004      	b.n	8006cb0 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8006ca6:	6839      	ldr	r1, [r7, #0]
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fb33 	bl	8007314 <USBD_CtlError>
      break;
 8006cae:	bf00      	nop
    }
    break;
 8006cb0:	e004      	b.n	8006cbc <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fb2d 	bl	8007314 <USBD_CtlError>
    break;
 8006cba:	bf00      	nop
  }

  return ret;
 8006cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
	...

08006cc8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	885b      	ldrh	r3, [r3, #2]
 8006ce2:	0a1b      	lsrs	r3, r3, #8
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	2b06      	cmp	r3, #6
 8006cea:	f200 8128 	bhi.w	8006f3e <USBD_GetDescriptor+0x276>
 8006cee:	a201      	add	r2, pc, #4	; (adr r2, 8006cf4 <USBD_GetDescriptor+0x2c>)
 8006cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf4:	08006d11 	.word	0x08006d11
 8006cf8:	08006d29 	.word	0x08006d29
 8006cfc:	08006d69 	.word	0x08006d69
 8006d00:	08006f3f 	.word	0x08006f3f
 8006d04:	08006f3f 	.word	0x08006f3f
 8006d08:	08006edf 	.word	0x08006edf
 8006d0c:	08006f0b 	.word	0x08006f0b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	7c12      	ldrb	r2, [r2, #16]
 8006d1c:	f107 0108 	add.w	r1, r7, #8
 8006d20:	4610      	mov	r0, r2
 8006d22:	4798      	blx	r3
 8006d24:	60f8      	str	r0, [r7, #12]
    break;
 8006d26:	e112      	b.n	8006f4e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	7c1b      	ldrb	r3, [r3, #16]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d10d      	bne.n	8006d4c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d38:	f107 0208 	add.w	r2, r7, #8
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	4798      	blx	r3
 8006d40:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	3301      	adds	r3, #1
 8006d46:	2202      	movs	r2, #2
 8006d48:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006d4a:	e100      	b.n	8006f4e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d54:	f107 0208 	add.w	r2, r7, #8
 8006d58:	4610      	mov	r0, r2
 8006d5a:	4798      	blx	r3
 8006d5c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	3301      	adds	r3, #1
 8006d62:	2202      	movs	r2, #2
 8006d64:	701a      	strb	r2, [r3, #0]
    break;
 8006d66:	e0f2      	b.n	8006f4e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	885b      	ldrh	r3, [r3, #2]
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b05      	cmp	r3, #5
 8006d70:	f200 80ac 	bhi.w	8006ecc <USBD_GetDescriptor+0x204>
 8006d74:	a201      	add	r2, pc, #4	; (adr r2, 8006d7c <USBD_GetDescriptor+0xb4>)
 8006d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d7a:	bf00      	nop
 8006d7c:	08006d95 	.word	0x08006d95
 8006d80:	08006dc9 	.word	0x08006dc9
 8006d84:	08006dfd 	.word	0x08006dfd
 8006d88:	08006e31 	.word	0x08006e31
 8006d8c:	08006e65 	.word	0x08006e65
 8006d90:	08006e99 	.word	0x08006e99
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00b      	beq.n	8006db8 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	7c12      	ldrb	r2, [r2, #16]
 8006dac:	f107 0108 	add.w	r1, r7, #8
 8006db0:	4610      	mov	r0, r2
 8006db2:	4798      	blx	r3
 8006db4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006db6:	e091      	b.n	8006edc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006db8:	6839      	ldr	r1, [r7, #0]
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 faaa 	bl	8007314 <USBD_CtlError>
        err++;
 8006dc0:	7afb      	ldrb	r3, [r7, #11]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	72fb      	strb	r3, [r7, #11]
      break;
 8006dc6:	e089      	b.n	8006edc <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00b      	beq.n	8006dec <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	7c12      	ldrb	r2, [r2, #16]
 8006de0:	f107 0108 	add.w	r1, r7, #8
 8006de4:	4610      	mov	r0, r2
 8006de6:	4798      	blx	r3
 8006de8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006dea:	e077      	b.n	8006edc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006dec:	6839      	ldr	r1, [r7, #0]
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fa90 	bl	8007314 <USBD_CtlError>
        err++;
 8006df4:	7afb      	ldrb	r3, [r7, #11]
 8006df6:	3301      	adds	r3, #1
 8006df8:	72fb      	strb	r3, [r7, #11]
      break;
 8006dfa:	e06f      	b.n	8006edc <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00b      	beq.n	8006e20 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	7c12      	ldrb	r2, [r2, #16]
 8006e14:	f107 0108 	add.w	r1, r7, #8
 8006e18:	4610      	mov	r0, r2
 8006e1a:	4798      	blx	r3
 8006e1c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e1e:	e05d      	b.n	8006edc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006e20:	6839      	ldr	r1, [r7, #0]
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fa76 	bl	8007314 <USBD_CtlError>
        err++;
 8006e28:	7afb      	ldrb	r3, [r7, #11]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	72fb      	strb	r3, [r7, #11]
      break;
 8006e2e:	e055      	b.n	8006edc <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00b      	beq.n	8006e54 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	7c12      	ldrb	r2, [r2, #16]
 8006e48:	f107 0108 	add.w	r1, r7, #8
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	4798      	blx	r3
 8006e50:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e52:	e043      	b.n	8006edc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006e54:	6839      	ldr	r1, [r7, #0]
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 fa5c 	bl	8007314 <USBD_CtlError>
        err++;
 8006e5c:	7afb      	ldrb	r3, [r7, #11]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	72fb      	strb	r3, [r7, #11]
      break;
 8006e62:	e03b      	b.n	8006edc <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e6a:	695b      	ldr	r3, [r3, #20]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00b      	beq.n	8006e88 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e76:	695b      	ldr	r3, [r3, #20]
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	7c12      	ldrb	r2, [r2, #16]
 8006e7c:	f107 0108 	add.w	r1, r7, #8
 8006e80:	4610      	mov	r0, r2
 8006e82:	4798      	blx	r3
 8006e84:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e86:	e029      	b.n	8006edc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006e88:	6839      	ldr	r1, [r7, #0]
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fa42 	bl	8007314 <USBD_CtlError>
        err++;
 8006e90:	7afb      	ldrb	r3, [r7, #11]
 8006e92:	3301      	adds	r3, #1
 8006e94:	72fb      	strb	r3, [r7, #11]
      break;
 8006e96:	e021      	b.n	8006edc <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00b      	beq.n	8006ebc <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	7c12      	ldrb	r2, [r2, #16]
 8006eb0:	f107 0108 	add.w	r1, r7, #8
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	4798      	blx	r3
 8006eb8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006eba:	e00f      	b.n	8006edc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006ebc:	6839      	ldr	r1, [r7, #0]
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 fa28 	bl	8007314 <USBD_CtlError>
        err++;
 8006ec4:	7afb      	ldrb	r3, [r7, #11]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	72fb      	strb	r3, [r7, #11]
      break;
 8006eca:	e007      	b.n	8006edc <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006ecc:	6839      	ldr	r1, [r7, #0]
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 fa20 	bl	8007314 <USBD_CtlError>
      err++;
 8006ed4:	7afb      	ldrb	r3, [r7, #11]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006eda:	bf00      	nop
    }
    break;
 8006edc:	e037      	b.n	8006f4e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	7c1b      	ldrb	r3, [r3, #16]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d109      	bne.n	8006efa <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eee:	f107 0208 	add.w	r2, r7, #8
 8006ef2:	4610      	mov	r0, r2
 8006ef4:	4798      	blx	r3
 8006ef6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006ef8:	e029      	b.n	8006f4e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006efa:	6839      	ldr	r1, [r7, #0]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fa09 	bl	8007314 <USBD_CtlError>
      err++;
 8006f02:	7afb      	ldrb	r3, [r7, #11]
 8006f04:	3301      	adds	r3, #1
 8006f06:	72fb      	strb	r3, [r7, #11]
    break;
 8006f08:	e021      	b.n	8006f4e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	7c1b      	ldrb	r3, [r3, #16]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10d      	bne.n	8006f2e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1a:	f107 0208 	add.w	r2, r7, #8
 8006f1e:	4610      	mov	r0, r2
 8006f20:	4798      	blx	r3
 8006f22:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	3301      	adds	r3, #1
 8006f28:	2207      	movs	r2, #7
 8006f2a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006f2c:	e00f      	b.n	8006f4e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006f2e:	6839      	ldr	r1, [r7, #0]
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 f9ef 	bl	8007314 <USBD_CtlError>
      err++;
 8006f36:	7afb      	ldrb	r3, [r7, #11]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	72fb      	strb	r3, [r7, #11]
    break;
 8006f3c:	e007      	b.n	8006f4e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8006f3e:	6839      	ldr	r1, [r7, #0]
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f9e7 	bl	8007314 <USBD_CtlError>
    err++;
 8006f46:	7afb      	ldrb	r3, [r7, #11]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	72fb      	strb	r3, [r7, #11]
    break;
 8006f4c:	bf00      	nop
  }

  if (err != 0U)
 8006f4e:	7afb      	ldrb	r3, [r7, #11]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d11e      	bne.n	8006f92 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	88db      	ldrh	r3, [r3, #6]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d016      	beq.n	8006f8a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006f5c:	893b      	ldrh	r3, [r7, #8]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00e      	beq.n	8006f80 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	88da      	ldrh	r2, [r3, #6]
 8006f66:	893b      	ldrh	r3, [r7, #8]
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	bf28      	it	cs
 8006f6c:	4613      	movcs	r3, r2
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f72:	893b      	ldrh	r3, [r7, #8]
 8006f74:	461a      	mov	r2, r3
 8006f76:	68f9      	ldr	r1, [r7, #12]
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 fa3c 	bl	80073f6 <USBD_CtlSendData>
 8006f7e:	e009      	b.n	8006f94 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006f80:	6839      	ldr	r1, [r7, #0]
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 f9c6 	bl	8007314 <USBD_CtlError>
 8006f88:	e004      	b.n	8006f94 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fa8d 	bl	80074aa <USBD_CtlSendStatus>
 8006f90:	e000      	b.n	8006f94 <USBD_GetDescriptor+0x2cc>
    return;
 8006f92:	bf00      	nop
    }
  }
}
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop

08006f9c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	889b      	ldrh	r3, [r3, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d130      	bne.n	8007010 <USBD_SetAddress+0x74>
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	88db      	ldrh	r3, [r3, #6]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d12c      	bne.n	8007010 <USBD_SetAddress+0x74>
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	885b      	ldrh	r3, [r3, #2]
 8006fba:	2b7f      	cmp	r3, #127	; 0x7f
 8006fbc:	d828      	bhi.n	8007010 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	885b      	ldrh	r3, [r3, #2]
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fc8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fd0:	2b03      	cmp	r3, #3
 8006fd2:	d104      	bne.n	8006fde <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006fd4:	6839      	ldr	r1, [r7, #0]
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f99c 	bl	8007314 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fdc:	e01c      	b.n	8007018 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	7bfa      	ldrb	r2, [r7, #15]
 8006fe2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006fe6:	7bfb      	ldrb	r3, [r7, #15]
 8006fe8:	4619      	mov	r1, r3
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 fee4 	bl	8007db8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 fa5a 	bl	80074aa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006ff6:	7bfb      	ldrb	r3, [r7, #15]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d004      	beq.n	8007006 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2202      	movs	r2, #2
 8007000:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007004:	e008      	b.n	8007018 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2201      	movs	r2, #1
 800700a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800700e:	e003      	b.n	8007018 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f97e 	bl	8007314 <USBD_CtlError>
  }
}
 8007018:	bf00      	nop
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800702a:	2300      	movs	r3, #0
 800702c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	885b      	ldrh	r3, [r3, #2]
 8007032:	b2da      	uxtb	r2, r3
 8007034:	4b4b      	ldr	r3, [pc, #300]	; (8007164 <USBD_SetConfig+0x144>)
 8007036:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007038:	4b4a      	ldr	r3, [pc, #296]	; (8007164 <USBD_SetConfig+0x144>)
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d905      	bls.n	800704c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007040:	6839      	ldr	r1, [r7, #0]
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f966 	bl	8007314 <USBD_CtlError>
    return USBD_FAIL;
 8007048:	2303      	movs	r3, #3
 800704a:	e087      	b.n	800715c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007052:	2b02      	cmp	r3, #2
 8007054:	d002      	beq.n	800705c <USBD_SetConfig+0x3c>
 8007056:	2b03      	cmp	r3, #3
 8007058:	d025      	beq.n	80070a6 <USBD_SetConfig+0x86>
 800705a:	e071      	b.n	8007140 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800705c:	4b41      	ldr	r3, [pc, #260]	; (8007164 <USBD_SetConfig+0x144>)
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d01c      	beq.n	800709e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007064:	4b3f      	ldr	r3, [pc, #252]	; (8007164 <USBD_SetConfig+0x144>)
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	461a      	mov	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800706e:	4b3d      	ldr	r3, [pc, #244]	; (8007164 <USBD_SetConfig+0x144>)
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	4619      	mov	r1, r3
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7ff f9a7 	bl	80063c8 <USBD_SetClassConfig>
 800707a:	4603      	mov	r3, r0
 800707c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800707e:	7bfb      	ldrb	r3, [r7, #15]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d004      	beq.n	800708e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007084:	6839      	ldr	r1, [r7, #0]
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f944 	bl	8007314 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800708c:	e065      	b.n	800715a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fa0b 	bl	80074aa <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2203      	movs	r2, #3
 8007098:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800709c:	e05d      	b.n	800715a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fa03 	bl	80074aa <USBD_CtlSendStatus>
    break;
 80070a4:	e059      	b.n	800715a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80070a6:	4b2f      	ldr	r3, [pc, #188]	; (8007164 <USBD_SetConfig+0x144>)
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d112      	bne.n	80070d4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2202      	movs	r2, #2
 80070b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80070b6:	4b2b      	ldr	r3, [pc, #172]	; (8007164 <USBD_SetConfig+0x144>)
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	461a      	mov	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80070c0:	4b28      	ldr	r3, [pc, #160]	; (8007164 <USBD_SetConfig+0x144>)
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	4619      	mov	r1, r3
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7ff f99a 	bl	8006400 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 f9ec 	bl	80074aa <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80070d2:	e042      	b.n	800715a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80070d4:	4b23      	ldr	r3, [pc, #140]	; (8007164 <USBD_SetConfig+0x144>)
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	461a      	mov	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d02a      	beq.n	8007138 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	4619      	mov	r1, r3
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7ff f988 	bl	8006400 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80070f0:	4b1c      	ldr	r3, [pc, #112]	; (8007164 <USBD_SetConfig+0x144>)
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	461a      	mov	r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80070fa:	4b1a      	ldr	r3, [pc, #104]	; (8007164 <USBD_SetConfig+0x144>)
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	4619      	mov	r1, r3
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f7ff f961 	bl	80063c8 <USBD_SetClassConfig>
 8007106:	4603      	mov	r3, r0
 8007108:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800710a:	7bfb      	ldrb	r3, [r7, #15]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00f      	beq.n	8007130 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007110:	6839      	ldr	r1, [r7, #0]
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f8fe 	bl	8007314 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	b2db      	uxtb	r3, r3
 800711e:	4619      	mov	r1, r3
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f7ff f96d 	bl	8006400 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2202      	movs	r2, #2
 800712a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800712e:	e014      	b.n	800715a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 f9ba 	bl	80074aa <USBD_CtlSendStatus>
    break;
 8007136:	e010      	b.n	800715a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f9b6 	bl	80074aa <USBD_CtlSendStatus>
    break;
 800713e:	e00c      	b.n	800715a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007140:	6839      	ldr	r1, [r7, #0]
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f8e6 	bl	8007314 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007148:	4b06      	ldr	r3, [pc, #24]	; (8007164 <USBD_SetConfig+0x144>)
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	4619      	mov	r1, r3
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7ff f956 	bl	8006400 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007154:	2303      	movs	r3, #3
 8007156:	73fb      	strb	r3, [r7, #15]
    break;
 8007158:	bf00      	nop
  }

  return ret;
 800715a:	7bfb      	ldrb	r3, [r7, #15]
}
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	20000204 	.word	0x20000204

08007168 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	88db      	ldrh	r3, [r3, #6]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d004      	beq.n	8007184 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800717a:	6839      	ldr	r1, [r7, #0]
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 f8c9 	bl	8007314 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007182:	e021      	b.n	80071c8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800718a:	2b01      	cmp	r3, #1
 800718c:	db17      	blt.n	80071be <USBD_GetConfig+0x56>
 800718e:	2b02      	cmp	r3, #2
 8007190:	dd02      	ble.n	8007198 <USBD_GetConfig+0x30>
 8007192:	2b03      	cmp	r3, #3
 8007194:	d00b      	beq.n	80071ae <USBD_GetConfig+0x46>
 8007196:	e012      	b.n	80071be <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	3308      	adds	r3, #8
 80071a2:	2201      	movs	r2, #1
 80071a4:	4619      	mov	r1, r3
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f925 	bl	80073f6 <USBD_CtlSendData>
      break;
 80071ac:	e00c      	b.n	80071c8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	3304      	adds	r3, #4
 80071b2:	2201      	movs	r2, #1
 80071b4:	4619      	mov	r1, r3
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 f91d 	bl	80073f6 <USBD_CtlSendData>
      break;
 80071bc:	e004      	b.n	80071c8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80071be:	6839      	ldr	r1, [r7, #0]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f8a7 	bl	8007314 <USBD_CtlError>
      break;
 80071c6:	bf00      	nop
}
 80071c8:	bf00      	nop
 80071ca:	3708      	adds	r7, #8
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071e0:	3b01      	subs	r3, #1
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d81e      	bhi.n	8007224 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	88db      	ldrh	r3, [r3, #6]
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d004      	beq.n	80071f8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80071ee:	6839      	ldr	r1, [r7, #0]
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f88f 	bl	8007314 <USBD_CtlError>
      break;
 80071f6:	e01a      	b.n	800722e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007204:	2b00      	cmp	r3, #0
 8007206:	d005      	beq.n	8007214 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	f043 0202 	orr.w	r2, r3, #2
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	330c      	adds	r3, #12
 8007218:	2202      	movs	r2, #2
 800721a:	4619      	mov	r1, r3
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f8ea 	bl	80073f6 <USBD_CtlSendData>
    break;
 8007222:	e004      	b.n	800722e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007224:	6839      	ldr	r1, [r7, #0]
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f874 	bl	8007314 <USBD_CtlError>
    break;
 800722c:	bf00      	nop
  }
}
 800722e:	bf00      	nop
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b082      	sub	sp, #8
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
 800723e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	885b      	ldrh	r3, [r3, #2]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d106      	bne.n	8007256 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 f92a 	bl	80074aa <USBD_CtlSendStatus>
  }
}
 8007256:	bf00      	nop
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b082      	sub	sp, #8
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
 8007266:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800726e:	3b01      	subs	r3, #1
 8007270:	2b02      	cmp	r3, #2
 8007272:	d80b      	bhi.n	800728c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	885b      	ldrh	r3, [r3, #2]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d10c      	bne.n	8007296 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f910 	bl	80074aa <USBD_CtlSendStatus>
      }
      break;
 800728a:	e004      	b.n	8007296 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800728c:	6839      	ldr	r1, [r7, #0]
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f840 	bl	8007314 <USBD_CtlError>
      break;
 8007294:	e000      	b.n	8007298 <USBD_ClrFeature+0x3a>
      break;
 8007296:	bf00      	nop
  }
}
 8007298:	bf00      	nop
 800729a:	3708      	adds	r7, #8
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	781a      	ldrb	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	3301      	adds	r3, #1
 80072ba:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	781a      	ldrb	r2, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	3301      	adds	r3, #1
 80072c8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f7ff fad3 	bl	8006876 <SWAPBYTE>
 80072d0:	4603      	mov	r3, r0
 80072d2:	461a      	mov	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	3301      	adds	r3, #1
 80072dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	3301      	adds	r3, #1
 80072e2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f7ff fac6 	bl	8006876 <SWAPBYTE>
 80072ea:	4603      	mov	r3, r0
 80072ec:	461a      	mov	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	3301      	adds	r3, #1
 80072f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	3301      	adds	r3, #1
 80072fc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f7ff fab9 	bl	8006876 <SWAPBYTE>
 8007304:	4603      	mov	r3, r0
 8007306:	461a      	mov	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	80da      	strh	r2, [r3, #6]
}
 800730c:	bf00      	nop
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800731e:	2180      	movs	r1, #128	; 0x80
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 fcdf 	bl	8007ce4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007326:	2100      	movs	r1, #0
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 fcdb 	bl	8007ce4 <USBD_LL_StallEP>
}
 800732e:	bf00      	nop
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b086      	sub	sp, #24
 800733a:	af00      	add	r7, sp, #0
 800733c:	60f8      	str	r0, [r7, #12]
 800733e:	60b9      	str	r1, [r7, #8]
 8007340:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007342:	2300      	movs	r3, #0
 8007344:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d036      	beq.n	80073ba <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007350:	6938      	ldr	r0, [r7, #16]
 8007352:	f000 f836 	bl	80073c2 <USBD_GetLen>
 8007356:	4603      	mov	r3, r0
 8007358:	3301      	adds	r3, #1
 800735a:	b29b      	uxth	r3, r3
 800735c:	005b      	lsls	r3, r3, #1
 800735e:	b29a      	uxth	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007364:	7dfb      	ldrb	r3, [r7, #23]
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	4413      	add	r3, r2
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	7812      	ldrb	r2, [r2, #0]
 800736e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007370:	7dfb      	ldrb	r3, [r7, #23]
 8007372:	3301      	adds	r3, #1
 8007374:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007376:	7dfb      	ldrb	r3, [r7, #23]
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	4413      	add	r3, r2
 800737c:	2203      	movs	r2, #3
 800737e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007380:	7dfb      	ldrb	r3, [r7, #23]
 8007382:	3301      	adds	r3, #1
 8007384:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007386:	e013      	b.n	80073b0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007388:	7dfb      	ldrb	r3, [r7, #23]
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	4413      	add	r3, r2
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	7812      	ldrb	r2, [r2, #0]
 8007392:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	3301      	adds	r3, #1
 8007398:	613b      	str	r3, [r7, #16]
    idx++;
 800739a:	7dfb      	ldrb	r3, [r7, #23]
 800739c:	3301      	adds	r3, #1
 800739e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80073a0:	7dfb      	ldrb	r3, [r7, #23]
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	4413      	add	r3, r2
 80073a6:	2200      	movs	r2, #0
 80073a8:	701a      	strb	r2, [r3, #0]
    idx++;
 80073aa:	7dfb      	ldrb	r3, [r7, #23]
 80073ac:	3301      	adds	r3, #1
 80073ae:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d1e7      	bne.n	8007388 <USBD_GetString+0x52>
 80073b8:	e000      	b.n	80073bc <USBD_GetString+0x86>
    return;
 80073ba:	bf00      	nop
  }
}
 80073bc:	3718      	adds	r7, #24
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b085      	sub	sp, #20
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80073ca:	2300      	movs	r3, #0
 80073cc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80073d2:	e005      	b.n	80073e0 <USBD_GetLen+0x1e>
  {
    len++;
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
 80073d6:	3301      	adds	r3, #1
 80073d8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	3301      	adds	r3, #1
 80073de:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1f5      	bne.n	80073d4 <USBD_GetLen+0x12>
  }

  return len;
 80073e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3714      	adds	r7, #20
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b084      	sub	sp, #16
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	60f8      	str	r0, [r7, #12]
 80073fe:	60b9      	str	r1, [r7, #8]
 8007400:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2202      	movs	r2, #2
 8007406:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	2100      	movs	r1, #0
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f000 fcea 	bl	8007df6 <USBD_LL_Transmit>

  return USBD_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68ba      	ldr	r2, [r7, #8]
 800743c:	2100      	movs	r1, #0
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f000 fcd9 	bl	8007df6 <USBD_LL_Transmit>

  return USBD_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b084      	sub	sp, #16
 8007452:	af00      	add	r7, sp, #0
 8007454:	60f8      	str	r0, [r7, #12]
 8007456:	60b9      	str	r1, [r7, #8]
 8007458:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2203      	movs	r2, #3
 800745e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	2100      	movs	r1, #0
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f000 fcdd 	bl	8007e38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	2100      	movs	r1, #0
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f000 fccc 	bl	8007e38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b082      	sub	sp, #8
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2204      	movs	r2, #4
 80074b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80074ba:	2300      	movs	r3, #0
 80074bc:	2200      	movs	r2, #0
 80074be:	2100      	movs	r1, #0
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 fc98 	bl	8007df6 <USBD_LL_Transmit>

  return USBD_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2205      	movs	r2, #5
 80074dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074e0:	2300      	movs	r3, #0
 80074e2:	2200      	movs	r2, #0
 80074e4:	2100      	movs	r1, #0
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fca6 	bl	8007e38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
	...

080074f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80074fc:	2200      	movs	r2, #0
 80074fe:	4912      	ldr	r1, [pc, #72]	; (8007548 <MX_USB_DEVICE_Init+0x50>)
 8007500:	4812      	ldr	r0, [pc, #72]	; (800754c <MX_USB_DEVICE_Init+0x54>)
 8007502:	f7fe fef3 	bl	80062ec <USBD_Init>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d001      	beq.n	8007510 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800750c:	f7f9 f9d0 	bl	80008b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007510:	490f      	ldr	r1, [pc, #60]	; (8007550 <MX_USB_DEVICE_Init+0x58>)
 8007512:	480e      	ldr	r0, [pc, #56]	; (800754c <MX_USB_DEVICE_Init+0x54>)
 8007514:	f7fe ff20 	bl	8006358 <USBD_RegisterClass>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d001      	beq.n	8007522 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800751e:	f7f9 f9c7 	bl	80008b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007522:	490c      	ldr	r1, [pc, #48]	; (8007554 <MX_USB_DEVICE_Init+0x5c>)
 8007524:	4809      	ldr	r0, [pc, #36]	; (800754c <MX_USB_DEVICE_Init+0x54>)
 8007526:	f7fe fe45 	bl	80061b4 <USBD_CDC_RegisterInterface>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d001      	beq.n	8007534 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007530:	f7f9 f9be 	bl	80008b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007534:	4805      	ldr	r0, [pc, #20]	; (800754c <MX_USB_DEVICE_Init+0x54>)
 8007536:	f7fe ff30 	bl	800639a <USBD_Start>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d001      	beq.n	8007544 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007540:	f7f9 f9b6 	bl	80008b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007544:	bf00      	nop
 8007546:	bd80      	pop	{r7, pc}
 8007548:	20000130 	.word	0x20000130
 800754c:	2000039c 	.word	0x2000039c
 8007550:	20000018 	.word	0x20000018
 8007554:	2000011c 	.word	0x2000011c

08007558 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800755c:	2200      	movs	r2, #0
 800755e:	4905      	ldr	r1, [pc, #20]	; (8007574 <CDC_Init_FS+0x1c>)
 8007560:	4805      	ldr	r0, [pc, #20]	; (8007578 <CDC_Init_FS+0x20>)
 8007562:	f7fe fe3c 	bl	80061de <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007566:	4905      	ldr	r1, [pc, #20]	; (800757c <CDC_Init_FS+0x24>)
 8007568:	4803      	ldr	r0, [pc, #12]	; (8007578 <CDC_Init_FS+0x20>)
 800756a:	f7fe fe51 	bl	8006210 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800756e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007570:	4618      	mov	r0, r3
 8007572:	bd80      	pop	{r7, pc}
 8007574:	20000e6c 	.word	0x20000e6c
 8007578:	2000039c 	.word	0x2000039c
 800757c:	2000066c 	.word	0x2000066c

08007580 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007580:	b480      	push	{r7}
 8007582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007584:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007586:	4618      	mov	r0, r3
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	4603      	mov	r3, r0
 8007598:	6039      	str	r1, [r7, #0]
 800759a:	71fb      	strb	r3, [r7, #7]
 800759c:	4613      	mov	r3, r2
 800759e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80075a0:	79fb      	ldrb	r3, [r7, #7]
 80075a2:	2b23      	cmp	r3, #35	; 0x23
 80075a4:	d84a      	bhi.n	800763c <CDC_Control_FS+0xac>
 80075a6:	a201      	add	r2, pc, #4	; (adr r2, 80075ac <CDC_Control_FS+0x1c>)
 80075a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ac:	0800763d 	.word	0x0800763d
 80075b0:	0800763d 	.word	0x0800763d
 80075b4:	0800763d 	.word	0x0800763d
 80075b8:	0800763d 	.word	0x0800763d
 80075bc:	0800763d 	.word	0x0800763d
 80075c0:	0800763d 	.word	0x0800763d
 80075c4:	0800763d 	.word	0x0800763d
 80075c8:	0800763d 	.word	0x0800763d
 80075cc:	0800763d 	.word	0x0800763d
 80075d0:	0800763d 	.word	0x0800763d
 80075d4:	0800763d 	.word	0x0800763d
 80075d8:	0800763d 	.word	0x0800763d
 80075dc:	0800763d 	.word	0x0800763d
 80075e0:	0800763d 	.word	0x0800763d
 80075e4:	0800763d 	.word	0x0800763d
 80075e8:	0800763d 	.word	0x0800763d
 80075ec:	0800763d 	.word	0x0800763d
 80075f0:	0800763d 	.word	0x0800763d
 80075f4:	0800763d 	.word	0x0800763d
 80075f8:	0800763d 	.word	0x0800763d
 80075fc:	0800763d 	.word	0x0800763d
 8007600:	0800763d 	.word	0x0800763d
 8007604:	0800763d 	.word	0x0800763d
 8007608:	0800763d 	.word	0x0800763d
 800760c:	0800763d 	.word	0x0800763d
 8007610:	0800763d 	.word	0x0800763d
 8007614:	0800763d 	.word	0x0800763d
 8007618:	0800763d 	.word	0x0800763d
 800761c:	0800763d 	.word	0x0800763d
 8007620:	0800763d 	.word	0x0800763d
 8007624:	0800763d 	.word	0x0800763d
 8007628:	0800763d 	.word	0x0800763d
 800762c:	0800763d 	.word	0x0800763d
 8007630:	0800763d 	.word	0x0800763d
 8007634:	0800763d 	.word	0x0800763d
 8007638:	0800763d 	.word	0x0800763d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800763c:	bf00      	nop
  }

  return (USBD_OK);
 800763e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007640:	4618      	mov	r0, r3
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007656:	6879      	ldr	r1, [r7, #4]
 8007658:	4805      	ldr	r0, [pc, #20]	; (8007670 <CDC_Receive_FS+0x24>)
 800765a:	f7fe fdd9 	bl	8006210 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800765e:	4804      	ldr	r0, [pc, #16]	; (8007670 <CDC_Receive_FS+0x24>)
 8007660:	f7fe fe1a 	bl	8006298 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007664:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007666:	4618      	mov	r0, r3
 8007668:	3708      	adds	r7, #8
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	2000039c 	.word	0x2000039c

08007674 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	460b      	mov	r3, r1
 800767e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007680:	2300      	movs	r3, #0
 8007682:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007684:	4b0d      	ldr	r3, [pc, #52]	; (80076bc <CDC_Transmit_FS+0x48>)
 8007686:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800768a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007692:	2b00      	cmp	r3, #0
 8007694:	d001      	beq.n	800769a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007696:	2301      	movs	r3, #1
 8007698:	e00b      	b.n	80076b2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800769a:	887b      	ldrh	r3, [r7, #2]
 800769c:	461a      	mov	r2, r3
 800769e:	6879      	ldr	r1, [r7, #4]
 80076a0:	4806      	ldr	r0, [pc, #24]	; (80076bc <CDC_Transmit_FS+0x48>)
 80076a2:	f7fe fd9c 	bl	80061de <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80076a6:	4805      	ldr	r0, [pc, #20]	; (80076bc <CDC_Transmit_FS+0x48>)
 80076a8:	f7fe fdc6 	bl	8006238 <USBD_CDC_TransmitPacket>
 80076ac:	4603      	mov	r3, r0
 80076ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80076b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	2000039c 	.word	0x2000039c

080076c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b087      	sub	sp, #28
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	4613      	mov	r3, r2
 80076cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80076d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	371c      	adds	r7, #28
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
	...

080076e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	4603      	mov	r3, r0
 80076ec:	6039      	str	r1, [r7, #0]
 80076ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	2212      	movs	r2, #18
 80076f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80076f6:	4b03      	ldr	r3, [pc, #12]	; (8007704 <USBD_FS_DeviceDescriptor+0x20>)
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr
 8007704:	2000014c 	.word	0x2000014c

08007708 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	4603      	mov	r3, r0
 8007710:	6039      	str	r1, [r7, #0]
 8007712:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	2204      	movs	r2, #4
 8007718:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800771a:	4b03      	ldr	r3, [pc, #12]	; (8007728 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800771c:	4618      	mov	r0, r3
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr
 8007728:	20000160 	.word	0x20000160

0800772c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	4603      	mov	r3, r0
 8007734:	6039      	str	r1, [r7, #0]
 8007736:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007738:	79fb      	ldrb	r3, [r7, #7]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d105      	bne.n	800774a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800773e:	683a      	ldr	r2, [r7, #0]
 8007740:	4907      	ldr	r1, [pc, #28]	; (8007760 <USBD_FS_ProductStrDescriptor+0x34>)
 8007742:	4808      	ldr	r0, [pc, #32]	; (8007764 <USBD_FS_ProductStrDescriptor+0x38>)
 8007744:	f7ff fdf7 	bl	8007336 <USBD_GetString>
 8007748:	e004      	b.n	8007754 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	4904      	ldr	r1, [pc, #16]	; (8007760 <USBD_FS_ProductStrDescriptor+0x34>)
 800774e:	4805      	ldr	r0, [pc, #20]	; (8007764 <USBD_FS_ProductStrDescriptor+0x38>)
 8007750:	f7ff fdf1 	bl	8007336 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007754:	4b02      	ldr	r3, [pc, #8]	; (8007760 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007756:	4618      	mov	r0, r3
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	2000166c 	.word	0x2000166c
 8007764:	08008108 	.word	0x08008108

08007768 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	4603      	mov	r3, r0
 8007770:	6039      	str	r1, [r7, #0]
 8007772:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007774:	683a      	ldr	r2, [r7, #0]
 8007776:	4904      	ldr	r1, [pc, #16]	; (8007788 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007778:	4804      	ldr	r0, [pc, #16]	; (800778c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800777a:	f7ff fddc 	bl	8007336 <USBD_GetString>
  return USBD_StrDesc;
 800777e:	4b02      	ldr	r3, [pc, #8]	; (8007788 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007780:	4618      	mov	r0, r3
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	2000166c 	.word	0x2000166c
 800778c:	08008120 	.word	0x08008120

08007790 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	4603      	mov	r3, r0
 8007798:	6039      	str	r1, [r7, #0]
 800779a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	221a      	movs	r2, #26
 80077a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80077a2:	f000 f843 	bl	800782c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80077a6:	4b02      	ldr	r3, [pc, #8]	; (80077b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3708      	adds	r7, #8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	20000164 	.word	0x20000164

080077b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	4603      	mov	r3, r0
 80077bc:	6039      	str	r1, [r7, #0]
 80077be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80077c0:	79fb      	ldrb	r3, [r7, #7]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d105      	bne.n	80077d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80077c6:	683a      	ldr	r2, [r7, #0]
 80077c8:	4907      	ldr	r1, [pc, #28]	; (80077e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80077ca:	4808      	ldr	r0, [pc, #32]	; (80077ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80077cc:	f7ff fdb3 	bl	8007336 <USBD_GetString>
 80077d0:	e004      	b.n	80077dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80077d2:	683a      	ldr	r2, [r7, #0]
 80077d4:	4904      	ldr	r1, [pc, #16]	; (80077e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80077d6:	4805      	ldr	r0, [pc, #20]	; (80077ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80077d8:	f7ff fdad 	bl	8007336 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077dc:	4b02      	ldr	r3, [pc, #8]	; (80077e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	2000166c 	.word	0x2000166c
 80077ec:	08008134 	.word	0x08008134

080077f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	4603      	mov	r3, r0
 80077f8:	6039      	str	r1, [r7, #0]
 80077fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077fc:	79fb      	ldrb	r3, [r7, #7]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d105      	bne.n	800780e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	4907      	ldr	r1, [pc, #28]	; (8007824 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007806:	4808      	ldr	r0, [pc, #32]	; (8007828 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007808:	f7ff fd95 	bl	8007336 <USBD_GetString>
 800780c:	e004      	b.n	8007818 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	4904      	ldr	r1, [pc, #16]	; (8007824 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007812:	4805      	ldr	r0, [pc, #20]	; (8007828 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007814:	f7ff fd8f 	bl	8007336 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007818:	4b02      	ldr	r3, [pc, #8]	; (8007824 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800781a:	4618      	mov	r0, r3
 800781c:	3708      	adds	r7, #8
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	2000166c 	.word	0x2000166c
 8007828:	08008140 	.word	0x08008140

0800782c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007832:	4b0f      	ldr	r3, [pc, #60]	; (8007870 <Get_SerialNum+0x44>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007838:	4b0e      	ldr	r3, [pc, #56]	; (8007874 <Get_SerialNum+0x48>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800783e:	4b0e      	ldr	r3, [pc, #56]	; (8007878 <Get_SerialNum+0x4c>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4413      	add	r3, r2
 800784a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d009      	beq.n	8007866 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007852:	2208      	movs	r2, #8
 8007854:	4909      	ldr	r1, [pc, #36]	; (800787c <Get_SerialNum+0x50>)
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f000 f814 	bl	8007884 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800785c:	2204      	movs	r2, #4
 800785e:	4908      	ldr	r1, [pc, #32]	; (8007880 <Get_SerialNum+0x54>)
 8007860:	68b8      	ldr	r0, [r7, #8]
 8007862:	f000 f80f 	bl	8007884 <IntToUnicode>
  }
}
 8007866:	bf00      	nop
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	1fff7a10 	.word	0x1fff7a10
 8007874:	1fff7a14 	.word	0x1fff7a14
 8007878:	1fff7a18 	.word	0x1fff7a18
 800787c:	20000166 	.word	0x20000166
 8007880:	20000176 	.word	0x20000176

08007884 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007884:	b480      	push	{r7}
 8007886:	b087      	sub	sp, #28
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	4613      	mov	r3, r2
 8007890:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007892:	2300      	movs	r3, #0
 8007894:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007896:	2300      	movs	r3, #0
 8007898:	75fb      	strb	r3, [r7, #23]
 800789a:	e027      	b.n	80078ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	0f1b      	lsrs	r3, r3, #28
 80078a0:	2b09      	cmp	r3, #9
 80078a2:	d80b      	bhi.n	80078bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	0f1b      	lsrs	r3, r3, #28
 80078a8:	b2da      	uxtb	r2, r3
 80078aa:	7dfb      	ldrb	r3, [r7, #23]
 80078ac:	005b      	lsls	r3, r3, #1
 80078ae:	4619      	mov	r1, r3
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	440b      	add	r3, r1
 80078b4:	3230      	adds	r2, #48	; 0x30
 80078b6:	b2d2      	uxtb	r2, r2
 80078b8:	701a      	strb	r2, [r3, #0]
 80078ba:	e00a      	b.n	80078d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	0f1b      	lsrs	r3, r3, #28
 80078c0:	b2da      	uxtb	r2, r3
 80078c2:	7dfb      	ldrb	r3, [r7, #23]
 80078c4:	005b      	lsls	r3, r3, #1
 80078c6:	4619      	mov	r1, r3
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	440b      	add	r3, r1
 80078cc:	3237      	adds	r2, #55	; 0x37
 80078ce:	b2d2      	uxtb	r2, r2
 80078d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	011b      	lsls	r3, r3, #4
 80078d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80078d8:	7dfb      	ldrb	r3, [r7, #23]
 80078da:	005b      	lsls	r3, r3, #1
 80078dc:	3301      	adds	r3, #1
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	4413      	add	r3, r2
 80078e2:	2200      	movs	r2, #0
 80078e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80078e6:	7dfb      	ldrb	r3, [r7, #23]
 80078e8:	3301      	adds	r3, #1
 80078ea:	75fb      	strb	r3, [r7, #23]
 80078ec:	7dfa      	ldrb	r2, [r7, #23]
 80078ee:	79fb      	ldrb	r3, [r7, #7]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d3d3      	bcc.n	800789c <IntToUnicode+0x18>
  }
}
 80078f4:	bf00      	nop
 80078f6:	371c      	adds	r7, #28
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b08a      	sub	sp, #40	; 0x28
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007908:	f107 0314 	add.w	r3, r7, #20
 800790c:	2200      	movs	r2, #0
 800790e:	601a      	str	r2, [r3, #0]
 8007910:	605a      	str	r2, [r3, #4]
 8007912:	609a      	str	r2, [r3, #8]
 8007914:	60da      	str	r2, [r3, #12]
 8007916:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007920:	d13a      	bne.n	8007998 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007922:	2300      	movs	r3, #0
 8007924:	613b      	str	r3, [r7, #16]
 8007926:	4b1e      	ldr	r3, [pc, #120]	; (80079a0 <HAL_PCD_MspInit+0xa0>)
 8007928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792a:	4a1d      	ldr	r2, [pc, #116]	; (80079a0 <HAL_PCD_MspInit+0xa0>)
 800792c:	f043 0301 	orr.w	r3, r3, #1
 8007930:	6313      	str	r3, [r2, #48]	; 0x30
 8007932:	4b1b      	ldr	r3, [pc, #108]	; (80079a0 <HAL_PCD_MspInit+0xa0>)
 8007934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	613b      	str	r3, [r7, #16]
 800793c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800793e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007944:	2302      	movs	r3, #2
 8007946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007948:	2300      	movs	r3, #0
 800794a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800794c:	2303      	movs	r3, #3
 800794e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007950:	230a      	movs	r3, #10
 8007952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007954:	f107 0314 	add.w	r3, r7, #20
 8007958:	4619      	mov	r1, r3
 800795a:	4812      	ldr	r0, [pc, #72]	; (80079a4 <HAL_PCD_MspInit+0xa4>)
 800795c:	f7f9 fd12 	bl	8001384 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007960:	4b0f      	ldr	r3, [pc, #60]	; (80079a0 <HAL_PCD_MspInit+0xa0>)
 8007962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007964:	4a0e      	ldr	r2, [pc, #56]	; (80079a0 <HAL_PCD_MspInit+0xa0>)
 8007966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800796a:	6353      	str	r3, [r2, #52]	; 0x34
 800796c:	2300      	movs	r3, #0
 800796e:	60fb      	str	r3, [r7, #12]
 8007970:	4b0b      	ldr	r3, [pc, #44]	; (80079a0 <HAL_PCD_MspInit+0xa0>)
 8007972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007974:	4a0a      	ldr	r2, [pc, #40]	; (80079a0 <HAL_PCD_MspInit+0xa0>)
 8007976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800797a:	6453      	str	r3, [r2, #68]	; 0x44
 800797c:	4b08      	ldr	r3, [pc, #32]	; (80079a0 <HAL_PCD_MspInit+0xa0>)
 800797e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007984:	60fb      	str	r3, [r7, #12]
 8007986:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007988:	2200      	movs	r2, #0
 800798a:	2100      	movs	r1, #0
 800798c:	2043      	movs	r0, #67	; 0x43
 800798e:	f7f9 fcc2 	bl	8001316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007992:	2043      	movs	r0, #67	; 0x43
 8007994:	f7f9 fcdb 	bl	800134e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007998:	bf00      	nop
 800799a:	3728      	adds	r7, #40	; 0x28
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	40023800 	.word	0x40023800
 80079a4:	40020000 	.word	0x40020000

080079a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80079bc:	4619      	mov	r1, r3
 80079be:	4610      	mov	r0, r2
 80079c0:	f7fe fd36 	bl	8006430 <USBD_LL_SetupStage>
}
 80079c4:	bf00      	nop
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	460b      	mov	r3, r1
 80079d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80079de:	78fa      	ldrb	r2, [r7, #3]
 80079e0:	6879      	ldr	r1, [r7, #4]
 80079e2:	4613      	mov	r3, r2
 80079e4:	00db      	lsls	r3, r3, #3
 80079e6:	1a9b      	subs	r3, r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	440b      	add	r3, r1
 80079ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	78fb      	ldrb	r3, [r7, #3]
 80079f4:	4619      	mov	r1, r3
 80079f6:	f7fe fd6e 	bl	80064d6 <USBD_LL_DataOutStage>
}
 80079fa:	bf00      	nop
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b082      	sub	sp, #8
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007a14:	78fa      	ldrb	r2, [r7, #3]
 8007a16:	6879      	ldr	r1, [r7, #4]
 8007a18:	4613      	mov	r3, r2
 8007a1a:	00db      	lsls	r3, r3, #3
 8007a1c:	1a9b      	subs	r3, r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	440b      	add	r3, r1
 8007a22:	3348      	adds	r3, #72	; 0x48
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	78fb      	ldrb	r3, [r7, #3]
 8007a28:	4619      	mov	r1, r3
 8007a2a:	f7fe fdb7 	bl	800659c <USBD_LL_DataInStage>
}
 8007a2e:	bf00      	nop
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b082      	sub	sp, #8
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7fe febb 	bl	80067c0 <USBD_LL_SOF>
}
 8007a4a:	bf00      	nop
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b084      	sub	sp, #16
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d102      	bne.n	8007a6c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007a66:	2300      	movs	r3, #0
 8007a68:	73fb      	strb	r3, [r7, #15]
 8007a6a:	e008      	b.n	8007a7e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d102      	bne.n	8007a7a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007a74:	2301      	movs	r3, #1
 8007a76:	73fb      	strb	r3, [r7, #15]
 8007a78:	e001      	b.n	8007a7e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007a7a:	f7f8 ff19 	bl	80008b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a84:	7bfa      	ldrb	r2, [r7, #15]
 8007a86:	4611      	mov	r1, r2
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7fe fe5e 	bl	800674a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7fe fe17 	bl	80066c8 <USBD_LL_Reset>
}
 8007a9a:	bf00      	nop
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
	...

08007aa4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7fe fe59 	bl	800676a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	6812      	ldr	r2, [r2, #0]
 8007ac6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007aca:	f043 0301 	orr.w	r3, r3, #1
 8007ace:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a1b      	ldr	r3, [r3, #32]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d005      	beq.n	8007ae4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ad8:	4b04      	ldr	r3, [pc, #16]	; (8007aec <HAL_PCD_SuspendCallback+0x48>)
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	4a03      	ldr	r2, [pc, #12]	; (8007aec <HAL_PCD_SuspendCallback+0x48>)
 8007ade:	f043 0306 	orr.w	r3, r3, #6
 8007ae2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ae4:	bf00      	nop
 8007ae6:	3708      	adds	r7, #8
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	e000ed00 	.word	0xe000ed00

08007af0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7fe fe48 	bl	8006794 <USBD_LL_Resume>
}
 8007b04:	bf00      	nop
 8007b06:	3708      	adds	r7, #8
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	460b      	mov	r3, r1
 8007b16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b1e:	78fa      	ldrb	r2, [r7, #3]
 8007b20:	4611      	mov	r1, r2
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7fe fe73 	bl	800680e <USBD_LL_IsoOUTIncomplete>
}
 8007b28:	bf00      	nop
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b42:	78fa      	ldrb	r2, [r7, #3]
 8007b44:	4611      	mov	r1, r2
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7fe fe54 	bl	80067f4 <USBD_LL_IsoINIncomplete>
}
 8007b4c:	bf00      	nop
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7fe fe60 	bl	8006828 <USBD_LL_DevConnected>
}
 8007b68:	bf00      	nop
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7fe fe5d 	bl	800683e <USBD_LL_DevDisconnected>
}
 8007b84:	bf00      	nop
 8007b86:	3708      	adds	r7, #8
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d13c      	bne.n	8007c16 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007b9c:	4a20      	ldr	r2, [pc, #128]	; (8007c20 <USBD_LL_Init+0x94>)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a1e      	ldr	r2, [pc, #120]	; (8007c20 <USBD_LL_Init+0x94>)
 8007ba8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007bac:	4b1c      	ldr	r3, [pc, #112]	; (8007c20 <USBD_LL_Init+0x94>)
 8007bae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007bb2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007bb4:	4b1a      	ldr	r3, [pc, #104]	; (8007c20 <USBD_LL_Init+0x94>)
 8007bb6:	2204      	movs	r2, #4
 8007bb8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007bba:	4b19      	ldr	r3, [pc, #100]	; (8007c20 <USBD_LL_Init+0x94>)
 8007bbc:	2202      	movs	r2, #2
 8007bbe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007bc0:	4b17      	ldr	r3, [pc, #92]	; (8007c20 <USBD_LL_Init+0x94>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007bc6:	4b16      	ldr	r3, [pc, #88]	; (8007c20 <USBD_LL_Init+0x94>)
 8007bc8:	2202      	movs	r2, #2
 8007bca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007bcc:	4b14      	ldr	r3, [pc, #80]	; (8007c20 <USBD_LL_Init+0x94>)
 8007bce:	2200      	movs	r2, #0
 8007bd0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007bd2:	4b13      	ldr	r3, [pc, #76]	; (8007c20 <USBD_LL_Init+0x94>)
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007bd8:	4b11      	ldr	r3, [pc, #68]	; (8007c20 <USBD_LL_Init+0x94>)
 8007bda:	2200      	movs	r2, #0
 8007bdc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007bde:	4b10      	ldr	r3, [pc, #64]	; (8007c20 <USBD_LL_Init+0x94>)
 8007be0:	2200      	movs	r2, #0
 8007be2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007be4:	4b0e      	ldr	r3, [pc, #56]	; (8007c20 <USBD_LL_Init+0x94>)
 8007be6:	2200      	movs	r2, #0
 8007be8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007bea:	480d      	ldr	r0, [pc, #52]	; (8007c20 <USBD_LL_Init+0x94>)
 8007bec:	f7f9 feb6 	bl	800195c <HAL_PCD_Init>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d001      	beq.n	8007bfa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007bf6:	f7f8 fe5b 	bl	80008b0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007bfa:	2180      	movs	r1, #128	; 0x80
 8007bfc:	4808      	ldr	r0, [pc, #32]	; (8007c20 <USBD_LL_Init+0x94>)
 8007bfe:	f7fb f814 	bl	8002c2a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007c02:	2240      	movs	r2, #64	; 0x40
 8007c04:	2100      	movs	r1, #0
 8007c06:	4806      	ldr	r0, [pc, #24]	; (8007c20 <USBD_LL_Init+0x94>)
 8007c08:	f7fa ffc8 	bl	8002b9c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007c0c:	2280      	movs	r2, #128	; 0x80
 8007c0e:	2101      	movs	r1, #1
 8007c10:	4803      	ldr	r0, [pc, #12]	; (8007c20 <USBD_LL_Init+0x94>)
 8007c12:	f7fa ffc3 	bl	8002b9c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	2000186c 	.word	0x2000186c

08007c24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c30:	2300      	movs	r3, #0
 8007c32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7f9 ffab 	bl	8001b96 <HAL_PCD_Start>
 8007c40:	4603      	mov	r3, r0
 8007c42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c44:	7bfb      	ldrb	r3, [r7, #15]
 8007c46:	4618      	mov	r0, r3
 8007c48:	f000 f92a 	bl	8007ea0 <USBD_Get_USB_Status>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c50:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b084      	sub	sp, #16
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	4608      	mov	r0, r1
 8007c64:	4611      	mov	r1, r2
 8007c66:	461a      	mov	r2, r3
 8007c68:	4603      	mov	r3, r0
 8007c6a:	70fb      	strb	r3, [r7, #3]
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	70bb      	strb	r3, [r7, #2]
 8007c70:	4613      	mov	r3, r2
 8007c72:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c74:	2300      	movs	r3, #0
 8007c76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007c82:	78bb      	ldrb	r3, [r7, #2]
 8007c84:	883a      	ldrh	r2, [r7, #0]
 8007c86:	78f9      	ldrb	r1, [r7, #3]
 8007c88:	f7fa fb8f 	bl	80023aa <HAL_PCD_EP_Open>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c90:	7bfb      	ldrb	r3, [r7, #15]
 8007c92:	4618      	mov	r0, r3
 8007c94:	f000 f904 	bl	8007ea0 <USBD_Get_USB_Status>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b084      	sub	sp, #16
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
 8007cae:	460b      	mov	r3, r1
 8007cb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007cc0:	78fa      	ldrb	r2, [r7, #3]
 8007cc2:	4611      	mov	r1, r2
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f7fa fbd8 	bl	800247a <HAL_PCD_EP_Close>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cce:	7bfb      	ldrb	r3, [r7, #15]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f000 f8e5 	bl	8007ea0 <USBD_Get_USB_Status>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cda:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	460b      	mov	r3, r1
 8007cee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007cfe:	78fa      	ldrb	r2, [r7, #3]
 8007d00:	4611      	mov	r1, r2
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fa fcb0 	bl	8002668 <HAL_PCD_EP_SetStall>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d0c:	7bfb      	ldrb	r3, [r7, #15]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f000 f8c6 	bl	8007ea0 <USBD_Get_USB_Status>
 8007d14:	4603      	mov	r3, r0
 8007d16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d18:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}

08007d22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d22:	b580      	push	{r7, lr}
 8007d24:	b084      	sub	sp, #16
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d32:	2300      	movs	r3, #0
 8007d34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d3c:	78fa      	ldrb	r2, [r7, #3]
 8007d3e:	4611      	mov	r1, r2
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7fa fcf5 	bl	8002730 <HAL_PCD_EP_ClrStall>
 8007d46:	4603      	mov	r3, r0
 8007d48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d4a:	7bfb      	ldrb	r3, [r7, #15]
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f000 f8a7 	bl	8007ea0 <USBD_Get_USB_Status>
 8007d52:	4603      	mov	r3, r0
 8007d54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d56:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	460b      	mov	r3, r1
 8007d6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007d74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	da0b      	bge.n	8007d94 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d7c:	78fb      	ldrb	r3, [r7, #3]
 8007d7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d82:	68f9      	ldr	r1, [r7, #12]
 8007d84:	4613      	mov	r3, r2
 8007d86:	00db      	lsls	r3, r3, #3
 8007d88:	1a9b      	subs	r3, r3, r2
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	440b      	add	r3, r1
 8007d8e:	333e      	adds	r3, #62	; 0x3e
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	e00b      	b.n	8007dac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d94:	78fb      	ldrb	r3, [r7, #3]
 8007d96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d9a:	68f9      	ldr	r1, [r7, #12]
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	00db      	lsls	r3, r3, #3
 8007da0:	1a9b      	subs	r3, r3, r2
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	440b      	add	r3, r1
 8007da6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007daa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3714      	adds	r7, #20
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007dd2:	78fa      	ldrb	r2, [r7, #3]
 8007dd4:	4611      	mov	r1, r2
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7fa fac2 	bl	8002360 <HAL_PCD_SetAddress>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007de0:	7bfb      	ldrb	r3, [r7, #15]
 8007de2:	4618      	mov	r0, r3
 8007de4:	f000 f85c 	bl	8007ea0 <USBD_Get_USB_Status>
 8007de8:	4603      	mov	r3, r0
 8007dea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dec:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b086      	sub	sp, #24
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	60f8      	str	r0, [r7, #12]
 8007dfe:	607a      	str	r2, [r7, #4]
 8007e00:	603b      	str	r3, [r7, #0]
 8007e02:	460b      	mov	r3, r1
 8007e04:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e06:	2300      	movs	r3, #0
 8007e08:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007e14:	7af9      	ldrb	r1, [r7, #11]
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	f7fa fbdb 	bl	80025d4 <HAL_PCD_EP_Transmit>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e22:	7dfb      	ldrb	r3, [r7, #23]
 8007e24:	4618      	mov	r0, r3
 8007e26:	f000 f83b 	bl	8007ea0 <USBD_Get_USB_Status>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e2e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3718      	adds	r7, #24
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b086      	sub	sp, #24
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	607a      	str	r2, [r7, #4]
 8007e42:	603b      	str	r3, [r7, #0]
 8007e44:	460b      	mov	r3, r1
 8007e46:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007e56:	7af9      	ldrb	r1, [r7, #11]
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	f7fa fb57 	bl	800250e <HAL_PCD_EP_Receive>
 8007e60:	4603      	mov	r3, r0
 8007e62:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e64:	7dfb      	ldrb	r3, [r7, #23]
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 f81a 	bl	8007ea0 <USBD_Get_USB_Status>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e70:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3718      	adds	r7, #24
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b082      	sub	sp, #8
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
 8007e82:	460b      	mov	r3, r1
 8007e84:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e8c:	78fa      	ldrb	r2, [r7, #3]
 8007e8e:	4611      	mov	r1, r2
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7fa fb87 	bl	80025a4 <HAL_PCD_EP_GetRxCount>
 8007e96:	4603      	mov	r3, r0
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3708      	adds	r7, #8
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007eae:	79fb      	ldrb	r3, [r7, #7]
 8007eb0:	2b03      	cmp	r3, #3
 8007eb2:	d817      	bhi.n	8007ee4 <USBD_Get_USB_Status+0x44>
 8007eb4:	a201      	add	r2, pc, #4	; (adr r2, 8007ebc <USBD_Get_USB_Status+0x1c>)
 8007eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eba:	bf00      	nop
 8007ebc:	08007ecd 	.word	0x08007ecd
 8007ec0:	08007ed3 	.word	0x08007ed3
 8007ec4:	08007ed9 	.word	0x08007ed9
 8007ec8:	08007edf 	.word	0x08007edf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	73fb      	strb	r3, [r7, #15]
    break;
 8007ed0:	e00b      	b.n	8007eea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	73fb      	strb	r3, [r7, #15]
    break;
 8007ed6:	e008      	b.n	8007eea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	73fb      	strb	r3, [r7, #15]
    break;
 8007edc:	e005      	b.n	8007eea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	73fb      	strb	r3, [r7, #15]
    break;
 8007ee2:	e002      	b.n	8007eea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ee8:	bf00      	nop
  }
  return usb_status;
 8007eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3714      	adds	r7, #20
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <__errno>:
 8007ef8:	4b01      	ldr	r3, [pc, #4]	; (8007f00 <__errno+0x8>)
 8007efa:	6818      	ldr	r0, [r3, #0]
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	20000180 	.word	0x20000180

08007f04 <__libc_init_array>:
 8007f04:	b570      	push	{r4, r5, r6, lr}
 8007f06:	4e0d      	ldr	r6, [pc, #52]	; (8007f3c <__libc_init_array+0x38>)
 8007f08:	4c0d      	ldr	r4, [pc, #52]	; (8007f40 <__libc_init_array+0x3c>)
 8007f0a:	1ba4      	subs	r4, r4, r6
 8007f0c:	10a4      	asrs	r4, r4, #2
 8007f0e:	2500      	movs	r5, #0
 8007f10:	42a5      	cmp	r5, r4
 8007f12:	d109      	bne.n	8007f28 <__libc_init_array+0x24>
 8007f14:	4e0b      	ldr	r6, [pc, #44]	; (8007f44 <__libc_init_array+0x40>)
 8007f16:	4c0c      	ldr	r4, [pc, #48]	; (8007f48 <__libc_init_array+0x44>)
 8007f18:	f000 f8ea 	bl	80080f0 <_init>
 8007f1c:	1ba4      	subs	r4, r4, r6
 8007f1e:	10a4      	asrs	r4, r4, #2
 8007f20:	2500      	movs	r5, #0
 8007f22:	42a5      	cmp	r5, r4
 8007f24:	d105      	bne.n	8007f32 <__libc_init_array+0x2e>
 8007f26:	bd70      	pop	{r4, r5, r6, pc}
 8007f28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f2c:	4798      	blx	r3
 8007f2e:	3501      	adds	r5, #1
 8007f30:	e7ee      	b.n	8007f10 <__libc_init_array+0xc>
 8007f32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f36:	4798      	blx	r3
 8007f38:	3501      	adds	r5, #1
 8007f3a:	e7f2      	b.n	8007f22 <__libc_init_array+0x1e>
 8007f3c:	08008170 	.word	0x08008170
 8007f40:	08008170 	.word	0x08008170
 8007f44:	08008170 	.word	0x08008170
 8007f48:	08008174 	.word	0x08008174

08007f4c <malloc>:
 8007f4c:	4b02      	ldr	r3, [pc, #8]	; (8007f58 <malloc+0xc>)
 8007f4e:	4601      	mov	r1, r0
 8007f50:	6818      	ldr	r0, [r3, #0]
 8007f52:	f000 b861 	b.w	8008018 <_malloc_r>
 8007f56:	bf00      	nop
 8007f58:	20000180 	.word	0x20000180

08007f5c <free>:
 8007f5c:	4b02      	ldr	r3, [pc, #8]	; (8007f68 <free+0xc>)
 8007f5e:	4601      	mov	r1, r0
 8007f60:	6818      	ldr	r0, [r3, #0]
 8007f62:	f000 b80b 	b.w	8007f7c <_free_r>
 8007f66:	bf00      	nop
 8007f68:	20000180 	.word	0x20000180

08007f6c <memset>:
 8007f6c:	4402      	add	r2, r0
 8007f6e:	4603      	mov	r3, r0
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d100      	bne.n	8007f76 <memset+0xa>
 8007f74:	4770      	bx	lr
 8007f76:	f803 1b01 	strb.w	r1, [r3], #1
 8007f7a:	e7f9      	b.n	8007f70 <memset+0x4>

08007f7c <_free_r>:
 8007f7c:	b538      	push	{r3, r4, r5, lr}
 8007f7e:	4605      	mov	r5, r0
 8007f80:	2900      	cmp	r1, #0
 8007f82:	d045      	beq.n	8008010 <_free_r+0x94>
 8007f84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f88:	1f0c      	subs	r4, r1, #4
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	bfb8      	it	lt
 8007f8e:	18e4      	addlt	r4, r4, r3
 8007f90:	f000 f8ac 	bl	80080ec <__malloc_lock>
 8007f94:	4a1f      	ldr	r2, [pc, #124]	; (8008014 <_free_r+0x98>)
 8007f96:	6813      	ldr	r3, [r2, #0]
 8007f98:	4610      	mov	r0, r2
 8007f9a:	b933      	cbnz	r3, 8007faa <_free_r+0x2e>
 8007f9c:	6063      	str	r3, [r4, #4]
 8007f9e:	6014      	str	r4, [r2, #0]
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fa6:	f000 b8a2 	b.w	80080ee <__malloc_unlock>
 8007faa:	42a3      	cmp	r3, r4
 8007fac:	d90c      	bls.n	8007fc8 <_free_r+0x4c>
 8007fae:	6821      	ldr	r1, [r4, #0]
 8007fb0:	1862      	adds	r2, r4, r1
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	bf04      	itt	eq
 8007fb6:	681a      	ldreq	r2, [r3, #0]
 8007fb8:	685b      	ldreq	r3, [r3, #4]
 8007fba:	6063      	str	r3, [r4, #4]
 8007fbc:	bf04      	itt	eq
 8007fbe:	1852      	addeq	r2, r2, r1
 8007fc0:	6022      	streq	r2, [r4, #0]
 8007fc2:	6004      	str	r4, [r0, #0]
 8007fc4:	e7ec      	b.n	8007fa0 <_free_r+0x24>
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	685a      	ldr	r2, [r3, #4]
 8007fca:	b10a      	cbz	r2, 8007fd0 <_free_r+0x54>
 8007fcc:	42a2      	cmp	r2, r4
 8007fce:	d9fa      	bls.n	8007fc6 <_free_r+0x4a>
 8007fd0:	6819      	ldr	r1, [r3, #0]
 8007fd2:	1858      	adds	r0, r3, r1
 8007fd4:	42a0      	cmp	r0, r4
 8007fd6:	d10b      	bne.n	8007ff0 <_free_r+0x74>
 8007fd8:	6820      	ldr	r0, [r4, #0]
 8007fda:	4401      	add	r1, r0
 8007fdc:	1858      	adds	r0, r3, r1
 8007fde:	4282      	cmp	r2, r0
 8007fe0:	6019      	str	r1, [r3, #0]
 8007fe2:	d1dd      	bne.n	8007fa0 <_free_r+0x24>
 8007fe4:	6810      	ldr	r0, [r2, #0]
 8007fe6:	6852      	ldr	r2, [r2, #4]
 8007fe8:	605a      	str	r2, [r3, #4]
 8007fea:	4401      	add	r1, r0
 8007fec:	6019      	str	r1, [r3, #0]
 8007fee:	e7d7      	b.n	8007fa0 <_free_r+0x24>
 8007ff0:	d902      	bls.n	8007ff8 <_free_r+0x7c>
 8007ff2:	230c      	movs	r3, #12
 8007ff4:	602b      	str	r3, [r5, #0]
 8007ff6:	e7d3      	b.n	8007fa0 <_free_r+0x24>
 8007ff8:	6820      	ldr	r0, [r4, #0]
 8007ffa:	1821      	adds	r1, r4, r0
 8007ffc:	428a      	cmp	r2, r1
 8007ffe:	bf04      	itt	eq
 8008000:	6811      	ldreq	r1, [r2, #0]
 8008002:	6852      	ldreq	r2, [r2, #4]
 8008004:	6062      	str	r2, [r4, #4]
 8008006:	bf04      	itt	eq
 8008008:	1809      	addeq	r1, r1, r0
 800800a:	6021      	streq	r1, [r4, #0]
 800800c:	605c      	str	r4, [r3, #4]
 800800e:	e7c7      	b.n	8007fa0 <_free_r+0x24>
 8008010:	bd38      	pop	{r3, r4, r5, pc}
 8008012:	bf00      	nop
 8008014:	20000208 	.word	0x20000208

08008018 <_malloc_r>:
 8008018:	b570      	push	{r4, r5, r6, lr}
 800801a:	1ccd      	adds	r5, r1, #3
 800801c:	f025 0503 	bic.w	r5, r5, #3
 8008020:	3508      	adds	r5, #8
 8008022:	2d0c      	cmp	r5, #12
 8008024:	bf38      	it	cc
 8008026:	250c      	movcc	r5, #12
 8008028:	2d00      	cmp	r5, #0
 800802a:	4606      	mov	r6, r0
 800802c:	db01      	blt.n	8008032 <_malloc_r+0x1a>
 800802e:	42a9      	cmp	r1, r5
 8008030:	d903      	bls.n	800803a <_malloc_r+0x22>
 8008032:	230c      	movs	r3, #12
 8008034:	6033      	str	r3, [r6, #0]
 8008036:	2000      	movs	r0, #0
 8008038:	bd70      	pop	{r4, r5, r6, pc}
 800803a:	f000 f857 	bl	80080ec <__malloc_lock>
 800803e:	4a21      	ldr	r2, [pc, #132]	; (80080c4 <_malloc_r+0xac>)
 8008040:	6814      	ldr	r4, [r2, #0]
 8008042:	4621      	mov	r1, r4
 8008044:	b991      	cbnz	r1, 800806c <_malloc_r+0x54>
 8008046:	4c20      	ldr	r4, [pc, #128]	; (80080c8 <_malloc_r+0xb0>)
 8008048:	6823      	ldr	r3, [r4, #0]
 800804a:	b91b      	cbnz	r3, 8008054 <_malloc_r+0x3c>
 800804c:	4630      	mov	r0, r6
 800804e:	f000 f83d 	bl	80080cc <_sbrk_r>
 8008052:	6020      	str	r0, [r4, #0]
 8008054:	4629      	mov	r1, r5
 8008056:	4630      	mov	r0, r6
 8008058:	f000 f838 	bl	80080cc <_sbrk_r>
 800805c:	1c43      	adds	r3, r0, #1
 800805e:	d124      	bne.n	80080aa <_malloc_r+0x92>
 8008060:	230c      	movs	r3, #12
 8008062:	6033      	str	r3, [r6, #0]
 8008064:	4630      	mov	r0, r6
 8008066:	f000 f842 	bl	80080ee <__malloc_unlock>
 800806a:	e7e4      	b.n	8008036 <_malloc_r+0x1e>
 800806c:	680b      	ldr	r3, [r1, #0]
 800806e:	1b5b      	subs	r3, r3, r5
 8008070:	d418      	bmi.n	80080a4 <_malloc_r+0x8c>
 8008072:	2b0b      	cmp	r3, #11
 8008074:	d90f      	bls.n	8008096 <_malloc_r+0x7e>
 8008076:	600b      	str	r3, [r1, #0]
 8008078:	50cd      	str	r5, [r1, r3]
 800807a:	18cc      	adds	r4, r1, r3
 800807c:	4630      	mov	r0, r6
 800807e:	f000 f836 	bl	80080ee <__malloc_unlock>
 8008082:	f104 000b 	add.w	r0, r4, #11
 8008086:	1d23      	adds	r3, r4, #4
 8008088:	f020 0007 	bic.w	r0, r0, #7
 800808c:	1ac3      	subs	r3, r0, r3
 800808e:	d0d3      	beq.n	8008038 <_malloc_r+0x20>
 8008090:	425a      	negs	r2, r3
 8008092:	50e2      	str	r2, [r4, r3]
 8008094:	e7d0      	b.n	8008038 <_malloc_r+0x20>
 8008096:	428c      	cmp	r4, r1
 8008098:	684b      	ldr	r3, [r1, #4]
 800809a:	bf16      	itet	ne
 800809c:	6063      	strne	r3, [r4, #4]
 800809e:	6013      	streq	r3, [r2, #0]
 80080a0:	460c      	movne	r4, r1
 80080a2:	e7eb      	b.n	800807c <_malloc_r+0x64>
 80080a4:	460c      	mov	r4, r1
 80080a6:	6849      	ldr	r1, [r1, #4]
 80080a8:	e7cc      	b.n	8008044 <_malloc_r+0x2c>
 80080aa:	1cc4      	adds	r4, r0, #3
 80080ac:	f024 0403 	bic.w	r4, r4, #3
 80080b0:	42a0      	cmp	r0, r4
 80080b2:	d005      	beq.n	80080c0 <_malloc_r+0xa8>
 80080b4:	1a21      	subs	r1, r4, r0
 80080b6:	4630      	mov	r0, r6
 80080b8:	f000 f808 	bl	80080cc <_sbrk_r>
 80080bc:	3001      	adds	r0, #1
 80080be:	d0cf      	beq.n	8008060 <_malloc_r+0x48>
 80080c0:	6025      	str	r5, [r4, #0]
 80080c2:	e7db      	b.n	800807c <_malloc_r+0x64>
 80080c4:	20000208 	.word	0x20000208
 80080c8:	2000020c 	.word	0x2000020c

080080cc <_sbrk_r>:
 80080cc:	b538      	push	{r3, r4, r5, lr}
 80080ce:	4c06      	ldr	r4, [pc, #24]	; (80080e8 <_sbrk_r+0x1c>)
 80080d0:	2300      	movs	r3, #0
 80080d2:	4605      	mov	r5, r0
 80080d4:	4608      	mov	r0, r1
 80080d6:	6023      	str	r3, [r4, #0]
 80080d8:	f7f8 fc8e 	bl	80009f8 <_sbrk>
 80080dc:	1c43      	adds	r3, r0, #1
 80080de:	d102      	bne.n	80080e6 <_sbrk_r+0x1a>
 80080e0:	6823      	ldr	r3, [r4, #0]
 80080e2:	b103      	cbz	r3, 80080e6 <_sbrk_r+0x1a>
 80080e4:	602b      	str	r3, [r5, #0]
 80080e6:	bd38      	pop	{r3, r4, r5, pc}
 80080e8:	20001c74 	.word	0x20001c74

080080ec <__malloc_lock>:
 80080ec:	4770      	bx	lr

080080ee <__malloc_unlock>:
 80080ee:	4770      	bx	lr

080080f0 <_init>:
 80080f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f2:	bf00      	nop
 80080f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080f6:	bc08      	pop	{r3}
 80080f8:	469e      	mov	lr, r3
 80080fa:	4770      	bx	lr

080080fc <_fini>:
 80080fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080fe:	bf00      	nop
 8008100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008102:	bc08      	pop	{r3}
 8008104:	469e      	mov	lr, r3
 8008106:	4770      	bx	lr
