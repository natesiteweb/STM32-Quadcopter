
f4Quadcopter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013348  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  080134d8  080134d8  000234d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013830  08013830  0003022c  2**0
                  CONTENTS
  4 .ARM          00000008  08013830  08013830  00023830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013838  08013838  0003022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013838  08013838  00023838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801383c  0801383c  0002383c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  08013840  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004338  20000230  08013a6c  00030230  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004568  08013a6c  00034568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025132  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004c39  00000000  00000000  0005538e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001770  00000000  00000000  00059fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001538  00000000  00000000  0005b738  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000255ae  00000000  00000000  0005cc70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000195f4  00000000  00000000  0008221e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca9b2  00000000  00000000  0009b812  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001661c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ab8  00000000  00000000  00166240  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000230 	.word	0x20000230
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080134c0 	.word	0x080134c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000234 	.word	0x20000234
 80001cc:	080134c0 	.word	0x080134c0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_frsub>:
 8000c48:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c4c:	e002      	b.n	8000c54 <__addsf3>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_fsub>:
 8000c50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c54 <__addsf3>:
 8000c54:	0042      	lsls	r2, r0, #1
 8000c56:	bf1f      	itttt	ne
 8000c58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c5c:	ea92 0f03 	teqne	r2, r3
 8000c60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c68:	d06a      	beq.n	8000d40 <__addsf3+0xec>
 8000c6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c72:	bfc1      	itttt	gt
 8000c74:	18d2      	addgt	r2, r2, r3
 8000c76:	4041      	eorgt	r1, r0
 8000c78:	4048      	eorgt	r0, r1
 8000c7a:	4041      	eorgt	r1, r0
 8000c7c:	bfb8      	it	lt
 8000c7e:	425b      	neglt	r3, r3
 8000c80:	2b19      	cmp	r3, #25
 8000c82:	bf88      	it	hi
 8000c84:	4770      	bxhi	lr
 8000c86:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4240      	negne	r0, r0
 8000c96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c9a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c9e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4249      	negne	r1, r1
 8000ca6:	ea92 0f03 	teq	r2, r3
 8000caa:	d03f      	beq.n	8000d2c <__addsf3+0xd8>
 8000cac:	f1a2 0201 	sub.w	r2, r2, #1
 8000cb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cb4:	eb10 000c 	adds.w	r0, r0, ip
 8000cb8:	f1c3 0320 	rsb	r3, r3, #32
 8000cbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cc0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__addsf3+0x78>
 8000cc6:	4249      	negs	r1, r1
 8000cc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ccc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cd0:	d313      	bcc.n	8000cfa <__addsf3+0xa6>
 8000cd2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cd6:	d306      	bcc.n	8000ce6 <__addsf3+0x92>
 8000cd8:	0840      	lsrs	r0, r0, #1
 8000cda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cde:	f102 0201 	add.w	r2, r2, #1
 8000ce2:	2afe      	cmp	r2, #254	; 0xfe
 8000ce4:	d251      	bcs.n	8000d8a <__addsf3+0x136>
 8000ce6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cee:	bf08      	it	eq
 8000cf0:	f020 0001 	biceq.w	r0, r0, #1
 8000cf4:	ea40 0003 	orr.w	r0, r0, r3
 8000cf8:	4770      	bx	lr
 8000cfa:	0049      	lsls	r1, r1, #1
 8000cfc:	eb40 0000 	adc.w	r0, r0, r0
 8000d00:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000d04:	f1a2 0201 	sub.w	r2, r2, #1
 8000d08:	d1ed      	bne.n	8000ce6 <__addsf3+0x92>
 8000d0a:	fab0 fc80 	clz	ip, r0
 8000d0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d12:	ebb2 020c 	subs.w	r2, r2, ip
 8000d16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d1a:	bfaa      	itet	ge
 8000d1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d20:	4252      	neglt	r2, r2
 8000d22:	4318      	orrge	r0, r3
 8000d24:	bfbc      	itt	lt
 8000d26:	40d0      	lsrlt	r0, r2
 8000d28:	4318      	orrlt	r0, r3
 8000d2a:	4770      	bx	lr
 8000d2c:	f092 0f00 	teq	r2, #0
 8000d30:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d34:	bf06      	itte	eq
 8000d36:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d3a:	3201      	addeq	r2, #1
 8000d3c:	3b01      	subne	r3, #1
 8000d3e:	e7b5      	b.n	8000cac <__addsf3+0x58>
 8000d40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d48:	bf18      	it	ne
 8000d4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d4e:	d021      	beq.n	8000d94 <__addsf3+0x140>
 8000d50:	ea92 0f03 	teq	r2, r3
 8000d54:	d004      	beq.n	8000d60 <__addsf3+0x10c>
 8000d56:	f092 0f00 	teq	r2, #0
 8000d5a:	bf08      	it	eq
 8000d5c:	4608      	moveq	r0, r1
 8000d5e:	4770      	bx	lr
 8000d60:	ea90 0f01 	teq	r0, r1
 8000d64:	bf1c      	itt	ne
 8000d66:	2000      	movne	r0, #0
 8000d68:	4770      	bxne	lr
 8000d6a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d6e:	d104      	bne.n	8000d7a <__addsf3+0x126>
 8000d70:	0040      	lsls	r0, r0, #1
 8000d72:	bf28      	it	cs
 8000d74:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d78:	4770      	bx	lr
 8000d7a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d7e:	bf3c      	itt	cc
 8000d80:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d84:	4770      	bxcc	lr
 8000d86:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d8a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d98:	bf16      	itet	ne
 8000d9a:	4608      	movne	r0, r1
 8000d9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000da0:	4601      	movne	r1, r0
 8000da2:	0242      	lsls	r2, r0, #9
 8000da4:	bf06      	itte	eq
 8000da6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000daa:	ea90 0f01 	teqeq	r0, r1
 8000dae:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_ui2f>:
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e004      	b.n	8000dc4 <__aeabi_i2f+0x8>
 8000dba:	bf00      	nop

08000dbc <__aeabi_i2f>:
 8000dbc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dc0:	bf48      	it	mi
 8000dc2:	4240      	negmi	r0, r0
 8000dc4:	ea5f 0c00 	movs.w	ip, r0
 8000dc8:	bf08      	it	eq
 8000dca:	4770      	bxeq	lr
 8000dcc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dd0:	4601      	mov	r1, r0
 8000dd2:	f04f 0000 	mov.w	r0, #0
 8000dd6:	e01c      	b.n	8000e12 <__aeabi_l2f+0x2a>

08000dd8 <__aeabi_ul2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	e00a      	b.n	8000dfc <__aeabi_l2f+0x14>
 8000de6:	bf00      	nop

08000de8 <__aeabi_l2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000df4:	d502      	bpl.n	8000dfc <__aeabi_l2f+0x14>
 8000df6:	4240      	negs	r0, r0
 8000df8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dfc:	ea5f 0c01 	movs.w	ip, r1
 8000e00:	bf02      	ittt	eq
 8000e02:	4684      	moveq	ip, r0
 8000e04:	4601      	moveq	r1, r0
 8000e06:	2000      	moveq	r0, #0
 8000e08:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e0c:	bf08      	it	eq
 8000e0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e12:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e16:	fabc f28c 	clz	r2, ip
 8000e1a:	3a08      	subs	r2, #8
 8000e1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e20:	db10      	blt.n	8000e44 <__aeabi_l2f+0x5c>
 8000e22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e26:	4463      	add	r3, ip
 8000e28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2c:	f1c2 0220 	rsb	r2, r2, #32
 8000e30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e34:	fa20 f202 	lsr.w	r2, r0, r2
 8000e38:	eb43 0002 	adc.w	r0, r3, r2
 8000e3c:	bf08      	it	eq
 8000e3e:	f020 0001 	biceq.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	f102 0220 	add.w	r2, r2, #32
 8000e48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e4c:	f1c2 0220 	rsb	r2, r2, #32
 8000e50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e54:	fa21 f202 	lsr.w	r2, r1, r2
 8000e58:	eb43 0002 	adc.w	r0, r3, r2
 8000e5c:	bf08      	it	eq
 8000e5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e62:	4770      	bx	lr

08000e64 <__aeabi_ldivmod>:
 8000e64:	b97b      	cbnz	r3, 8000e86 <__aeabi_ldivmod+0x22>
 8000e66:	b972      	cbnz	r2, 8000e86 <__aeabi_ldivmod+0x22>
 8000e68:	2900      	cmp	r1, #0
 8000e6a:	bfbe      	ittt	lt
 8000e6c:	2000      	movlt	r0, #0
 8000e6e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000e72:	e006      	blt.n	8000e82 <__aeabi_ldivmod+0x1e>
 8000e74:	bf08      	it	eq
 8000e76:	2800      	cmpeq	r0, #0
 8000e78:	bf1c      	itt	ne
 8000e7a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000e7e:	f04f 30ff 	movne.w	r0, #4294967295
 8000e82:	f000 b9bd 	b.w	8001200 <__aeabi_idiv0>
 8000e86:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e8a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e8e:	2900      	cmp	r1, #0
 8000e90:	db09      	blt.n	8000ea6 <__aeabi_ldivmod+0x42>
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	db1a      	blt.n	8000ecc <__aeabi_ldivmod+0x68>
 8000e96:	f000 f84d 	bl	8000f34 <__udivmoddi4>
 8000e9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ea2:	b004      	add	sp, #16
 8000ea4:	4770      	bx	lr
 8000ea6:	4240      	negs	r0, r0
 8000ea8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db1b      	blt.n	8000ee8 <__aeabi_ldivmod+0x84>
 8000eb0:	f000 f840 	bl	8000f34 <__udivmoddi4>
 8000eb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ebc:	b004      	add	sp, #16
 8000ebe:	4240      	negs	r0, r0
 8000ec0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ec4:	4252      	negs	r2, r2
 8000ec6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000eca:	4770      	bx	lr
 8000ecc:	4252      	negs	r2, r2
 8000ece:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ed2:	f000 f82f 	bl	8000f34 <__udivmoddi4>
 8000ed6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ede:	b004      	add	sp, #16
 8000ee0:	4240      	negs	r0, r0
 8000ee2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ee6:	4770      	bx	lr
 8000ee8:	4252      	negs	r2, r2
 8000eea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000eee:	f000 f821 	bl	8000f34 <__udivmoddi4>
 8000ef2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ef6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000efa:	b004      	add	sp, #16
 8000efc:	4252      	negs	r2, r2
 8000efe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f02:	4770      	bx	lr

08000f04 <__aeabi_uldivmod>:
 8000f04:	b953      	cbnz	r3, 8000f1c <__aeabi_uldivmod+0x18>
 8000f06:	b94a      	cbnz	r2, 8000f1c <__aeabi_uldivmod+0x18>
 8000f08:	2900      	cmp	r1, #0
 8000f0a:	bf08      	it	eq
 8000f0c:	2800      	cmpeq	r0, #0
 8000f0e:	bf1c      	itt	ne
 8000f10:	f04f 31ff 	movne.w	r1, #4294967295
 8000f14:	f04f 30ff 	movne.w	r0, #4294967295
 8000f18:	f000 b972 	b.w	8001200 <__aeabi_idiv0>
 8000f1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f24:	f000 f806 	bl	8000f34 <__udivmoddi4>
 8000f28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f30:	b004      	add	sp, #16
 8000f32:	4770      	bx	lr

08000f34 <__udivmoddi4>:
 8000f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f38:	9e08      	ldr	r6, [sp, #32]
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	4688      	mov	r8, r1
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d14b      	bne.n	8000fda <__udivmoddi4+0xa6>
 8000f42:	428a      	cmp	r2, r1
 8000f44:	4615      	mov	r5, r2
 8000f46:	d967      	bls.n	8001018 <__udivmoddi4+0xe4>
 8000f48:	fab2 f282 	clz	r2, r2
 8000f4c:	b14a      	cbz	r2, 8000f62 <__udivmoddi4+0x2e>
 8000f4e:	f1c2 0720 	rsb	r7, r2, #32
 8000f52:	fa01 f302 	lsl.w	r3, r1, r2
 8000f56:	fa20 f707 	lsr.w	r7, r0, r7
 8000f5a:	4095      	lsls	r5, r2
 8000f5c:	ea47 0803 	orr.w	r8, r7, r3
 8000f60:	4094      	lsls	r4, r2
 8000f62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f66:	0c23      	lsrs	r3, r4, #16
 8000f68:	fbb8 f7fe 	udiv	r7, r8, lr
 8000f6c:	fa1f fc85 	uxth.w	ip, r5
 8000f70:	fb0e 8817 	mls	r8, lr, r7, r8
 8000f74:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f78:	fb07 f10c 	mul.w	r1, r7, ip
 8000f7c:	4299      	cmp	r1, r3
 8000f7e:	d909      	bls.n	8000f94 <__udivmoddi4+0x60>
 8000f80:	18eb      	adds	r3, r5, r3
 8000f82:	f107 30ff 	add.w	r0, r7, #4294967295
 8000f86:	f080 811b 	bcs.w	80011c0 <__udivmoddi4+0x28c>
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	f240 8118 	bls.w	80011c0 <__udivmoddi4+0x28c>
 8000f90:	3f02      	subs	r7, #2
 8000f92:	442b      	add	r3, r5
 8000f94:	1a5b      	subs	r3, r3, r1
 8000f96:	b2a4      	uxth	r4, r4
 8000f98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000fa8:	45a4      	cmp	ip, r4
 8000faa:	d909      	bls.n	8000fc0 <__udivmoddi4+0x8c>
 8000fac:	192c      	adds	r4, r5, r4
 8000fae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fb2:	f080 8107 	bcs.w	80011c4 <__udivmoddi4+0x290>
 8000fb6:	45a4      	cmp	ip, r4
 8000fb8:	f240 8104 	bls.w	80011c4 <__udivmoddi4+0x290>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	442c      	add	r4, r5
 8000fc0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000fc4:	eba4 040c 	sub.w	r4, r4, ip
 8000fc8:	2700      	movs	r7, #0
 8000fca:	b11e      	cbz	r6, 8000fd4 <__udivmoddi4+0xa0>
 8000fcc:	40d4      	lsrs	r4, r2
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e9c6 4300 	strd	r4, r3, [r6]
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fda:	428b      	cmp	r3, r1
 8000fdc:	d909      	bls.n	8000ff2 <__udivmoddi4+0xbe>
 8000fde:	2e00      	cmp	r6, #0
 8000fe0:	f000 80eb 	beq.w	80011ba <__udivmoddi4+0x286>
 8000fe4:	2700      	movs	r7, #0
 8000fe6:	e9c6 0100 	strd	r0, r1, [r6]
 8000fea:	4638      	mov	r0, r7
 8000fec:	4639      	mov	r1, r7
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	fab3 f783 	clz	r7, r3
 8000ff6:	2f00      	cmp	r7, #0
 8000ff8:	d147      	bne.n	800108a <__udivmoddi4+0x156>
 8000ffa:	428b      	cmp	r3, r1
 8000ffc:	d302      	bcc.n	8001004 <__udivmoddi4+0xd0>
 8000ffe:	4282      	cmp	r2, r0
 8001000:	f200 80fa 	bhi.w	80011f8 <__udivmoddi4+0x2c4>
 8001004:	1a84      	subs	r4, r0, r2
 8001006:	eb61 0303 	sbc.w	r3, r1, r3
 800100a:	2001      	movs	r0, #1
 800100c:	4698      	mov	r8, r3
 800100e:	2e00      	cmp	r6, #0
 8001010:	d0e0      	beq.n	8000fd4 <__udivmoddi4+0xa0>
 8001012:	e9c6 4800 	strd	r4, r8, [r6]
 8001016:	e7dd      	b.n	8000fd4 <__udivmoddi4+0xa0>
 8001018:	b902      	cbnz	r2, 800101c <__udivmoddi4+0xe8>
 800101a:	deff      	udf	#255	; 0xff
 800101c:	fab2 f282 	clz	r2, r2
 8001020:	2a00      	cmp	r2, #0
 8001022:	f040 808f 	bne.w	8001144 <__udivmoddi4+0x210>
 8001026:	1b49      	subs	r1, r1, r5
 8001028:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800102c:	fa1f f885 	uxth.w	r8, r5
 8001030:	2701      	movs	r7, #1
 8001032:	fbb1 fcfe 	udiv	ip, r1, lr
 8001036:	0c23      	lsrs	r3, r4, #16
 8001038:	fb0e 111c 	mls	r1, lr, ip, r1
 800103c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001040:	fb08 f10c 	mul.w	r1, r8, ip
 8001044:	4299      	cmp	r1, r3
 8001046:	d907      	bls.n	8001058 <__udivmoddi4+0x124>
 8001048:	18eb      	adds	r3, r5, r3
 800104a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800104e:	d202      	bcs.n	8001056 <__udivmoddi4+0x122>
 8001050:	4299      	cmp	r1, r3
 8001052:	f200 80cd 	bhi.w	80011f0 <__udivmoddi4+0x2bc>
 8001056:	4684      	mov	ip, r0
 8001058:	1a59      	subs	r1, r3, r1
 800105a:	b2a3      	uxth	r3, r4
 800105c:	fbb1 f0fe 	udiv	r0, r1, lr
 8001060:	fb0e 1410 	mls	r4, lr, r0, r1
 8001064:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001068:	fb08 f800 	mul.w	r8, r8, r0
 800106c:	45a0      	cmp	r8, r4
 800106e:	d907      	bls.n	8001080 <__udivmoddi4+0x14c>
 8001070:	192c      	adds	r4, r5, r4
 8001072:	f100 33ff 	add.w	r3, r0, #4294967295
 8001076:	d202      	bcs.n	800107e <__udivmoddi4+0x14a>
 8001078:	45a0      	cmp	r8, r4
 800107a:	f200 80b6 	bhi.w	80011ea <__udivmoddi4+0x2b6>
 800107e:	4618      	mov	r0, r3
 8001080:	eba4 0408 	sub.w	r4, r4, r8
 8001084:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001088:	e79f      	b.n	8000fca <__udivmoddi4+0x96>
 800108a:	f1c7 0c20 	rsb	ip, r7, #32
 800108e:	40bb      	lsls	r3, r7
 8001090:	fa22 fe0c 	lsr.w	lr, r2, ip
 8001094:	ea4e 0e03 	orr.w	lr, lr, r3
 8001098:	fa01 f407 	lsl.w	r4, r1, r7
 800109c:	fa20 f50c 	lsr.w	r5, r0, ip
 80010a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80010a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80010a8:	4325      	orrs	r5, r4
 80010aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80010ae:	0c2c      	lsrs	r4, r5, #16
 80010b0:	fb08 3319 	mls	r3, r8, r9, r3
 80010b4:	fa1f fa8e 	uxth.w	sl, lr
 80010b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80010bc:	fb09 f40a 	mul.w	r4, r9, sl
 80010c0:	429c      	cmp	r4, r3
 80010c2:	fa02 f207 	lsl.w	r2, r2, r7
 80010c6:	fa00 f107 	lsl.w	r1, r0, r7
 80010ca:	d90b      	bls.n	80010e4 <__udivmoddi4+0x1b0>
 80010cc:	eb1e 0303 	adds.w	r3, lr, r3
 80010d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80010d4:	f080 8087 	bcs.w	80011e6 <__udivmoddi4+0x2b2>
 80010d8:	429c      	cmp	r4, r3
 80010da:	f240 8084 	bls.w	80011e6 <__udivmoddi4+0x2b2>
 80010de:	f1a9 0902 	sub.w	r9, r9, #2
 80010e2:	4473      	add	r3, lr
 80010e4:	1b1b      	subs	r3, r3, r4
 80010e6:	b2ad      	uxth	r5, r5
 80010e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80010ec:	fb08 3310 	mls	r3, r8, r0, r3
 80010f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80010f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80010f8:	45a2      	cmp	sl, r4
 80010fa:	d908      	bls.n	800110e <__udivmoddi4+0x1da>
 80010fc:	eb1e 0404 	adds.w	r4, lr, r4
 8001100:	f100 33ff 	add.w	r3, r0, #4294967295
 8001104:	d26b      	bcs.n	80011de <__udivmoddi4+0x2aa>
 8001106:	45a2      	cmp	sl, r4
 8001108:	d969      	bls.n	80011de <__udivmoddi4+0x2aa>
 800110a:	3802      	subs	r0, #2
 800110c:	4474      	add	r4, lr
 800110e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001112:	fba0 8902 	umull	r8, r9, r0, r2
 8001116:	eba4 040a 	sub.w	r4, r4, sl
 800111a:	454c      	cmp	r4, r9
 800111c:	46c2      	mov	sl, r8
 800111e:	464b      	mov	r3, r9
 8001120:	d354      	bcc.n	80011cc <__udivmoddi4+0x298>
 8001122:	d051      	beq.n	80011c8 <__udivmoddi4+0x294>
 8001124:	2e00      	cmp	r6, #0
 8001126:	d069      	beq.n	80011fc <__udivmoddi4+0x2c8>
 8001128:	ebb1 050a 	subs.w	r5, r1, sl
 800112c:	eb64 0403 	sbc.w	r4, r4, r3
 8001130:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001134:	40fd      	lsrs	r5, r7
 8001136:	40fc      	lsrs	r4, r7
 8001138:	ea4c 0505 	orr.w	r5, ip, r5
 800113c:	e9c6 5400 	strd	r5, r4, [r6]
 8001140:	2700      	movs	r7, #0
 8001142:	e747      	b.n	8000fd4 <__udivmoddi4+0xa0>
 8001144:	f1c2 0320 	rsb	r3, r2, #32
 8001148:	fa20 f703 	lsr.w	r7, r0, r3
 800114c:	4095      	lsls	r5, r2
 800114e:	fa01 f002 	lsl.w	r0, r1, r2
 8001152:	fa21 f303 	lsr.w	r3, r1, r3
 8001156:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800115a:	4338      	orrs	r0, r7
 800115c:	0c01      	lsrs	r1, r0, #16
 800115e:	fbb3 f7fe 	udiv	r7, r3, lr
 8001162:	fa1f f885 	uxth.w	r8, r5
 8001166:	fb0e 3317 	mls	r3, lr, r7, r3
 800116a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800116e:	fb07 f308 	mul.w	r3, r7, r8
 8001172:	428b      	cmp	r3, r1
 8001174:	fa04 f402 	lsl.w	r4, r4, r2
 8001178:	d907      	bls.n	800118a <__udivmoddi4+0x256>
 800117a:	1869      	adds	r1, r5, r1
 800117c:	f107 3cff 	add.w	ip, r7, #4294967295
 8001180:	d22f      	bcs.n	80011e2 <__udivmoddi4+0x2ae>
 8001182:	428b      	cmp	r3, r1
 8001184:	d92d      	bls.n	80011e2 <__udivmoddi4+0x2ae>
 8001186:	3f02      	subs	r7, #2
 8001188:	4429      	add	r1, r5
 800118a:	1acb      	subs	r3, r1, r3
 800118c:	b281      	uxth	r1, r0
 800118e:	fbb3 f0fe 	udiv	r0, r3, lr
 8001192:	fb0e 3310 	mls	r3, lr, r0, r3
 8001196:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800119a:	fb00 f308 	mul.w	r3, r0, r8
 800119e:	428b      	cmp	r3, r1
 80011a0:	d907      	bls.n	80011b2 <__udivmoddi4+0x27e>
 80011a2:	1869      	adds	r1, r5, r1
 80011a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80011a8:	d217      	bcs.n	80011da <__udivmoddi4+0x2a6>
 80011aa:	428b      	cmp	r3, r1
 80011ac:	d915      	bls.n	80011da <__udivmoddi4+0x2a6>
 80011ae:	3802      	subs	r0, #2
 80011b0:	4429      	add	r1, r5
 80011b2:	1ac9      	subs	r1, r1, r3
 80011b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80011b8:	e73b      	b.n	8001032 <__udivmoddi4+0xfe>
 80011ba:	4637      	mov	r7, r6
 80011bc:	4630      	mov	r0, r6
 80011be:	e709      	b.n	8000fd4 <__udivmoddi4+0xa0>
 80011c0:	4607      	mov	r7, r0
 80011c2:	e6e7      	b.n	8000f94 <__udivmoddi4+0x60>
 80011c4:	4618      	mov	r0, r3
 80011c6:	e6fb      	b.n	8000fc0 <__udivmoddi4+0x8c>
 80011c8:	4541      	cmp	r1, r8
 80011ca:	d2ab      	bcs.n	8001124 <__udivmoddi4+0x1f0>
 80011cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80011d0:	eb69 020e 	sbc.w	r2, r9, lr
 80011d4:	3801      	subs	r0, #1
 80011d6:	4613      	mov	r3, r2
 80011d8:	e7a4      	b.n	8001124 <__udivmoddi4+0x1f0>
 80011da:	4660      	mov	r0, ip
 80011dc:	e7e9      	b.n	80011b2 <__udivmoddi4+0x27e>
 80011de:	4618      	mov	r0, r3
 80011e0:	e795      	b.n	800110e <__udivmoddi4+0x1da>
 80011e2:	4667      	mov	r7, ip
 80011e4:	e7d1      	b.n	800118a <__udivmoddi4+0x256>
 80011e6:	4681      	mov	r9, r0
 80011e8:	e77c      	b.n	80010e4 <__udivmoddi4+0x1b0>
 80011ea:	3802      	subs	r0, #2
 80011ec:	442c      	add	r4, r5
 80011ee:	e747      	b.n	8001080 <__udivmoddi4+0x14c>
 80011f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80011f4:	442b      	add	r3, r5
 80011f6:	e72f      	b.n	8001058 <__udivmoddi4+0x124>
 80011f8:	4638      	mov	r0, r7
 80011fa:	e708      	b.n	800100e <__udivmoddi4+0xda>
 80011fc:	4637      	mov	r7, r6
 80011fe:	e6e9      	b.n	8000fd4 <__udivmoddi4+0xa0>

08001200 <__aeabi_idiv0>:
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop

08001204 <Setup_BMP280>:

bmp280_calib_data _bmp280_calib;
int32_t t_fine;

void Setup_BMP280()
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af02      	add	r7, sp, #8
	uint8_t setup_data[4];
	setup_data[0] = 0xF5;
 800120a:	23f5      	movs	r3, #245	; 0xf5
 800120c:	713b      	strb	r3, [r7, #4]
	setup_data[1] = 0x10;
 800120e:	2310      	movs	r3, #16
 8001210:	717b      	strb	r3, [r7, #5]
	setup_data[2] = 0xF4;
 8001212:	23f4      	movs	r3, #244	; 0xf4
 8001214:	71bb      	strb	r3, [r7, #6]
	setup_data[3] = 0x57;
 8001216:	2357      	movs	r3, #87	; 0x57
 8001218:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, setup_data, 4, HAL_MAX_DELAY);
 800121a:	23ec      	movs	r3, #236	; 0xec
 800121c:	b299      	uxth	r1, r3
 800121e:	1d3a      	adds	r2, r7, #4
 8001220:	f04f 33ff 	mov.w	r3, #4294967295
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2304      	movs	r3, #4
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <Setup_BMP280+0x38>)
 800122a:	f005 feed 	bl	8007008 <HAL_I2C_Master_Transmit>
	Read_BMP280_Calibration_Data();
 800122e:	f000 f807 	bl	8001240 <Read_BMP280_Calibration_Data>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000dd8 	.word	0x20000dd8

08001240 <Read_BMP280_Calibration_Data>:

void Read_BMP280_Calibration_Data()
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, BMP280_ADDR, 0x88, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&_bmp280_calib, sizeof(bmp280_calib_data), HAL_MAX_DELAY);
 8001246:	23ec      	movs	r3, #236	; 0xec
 8001248:	b299      	uxth	r1, r3
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
 800124e:	9302      	str	r3, [sp, #8]
 8001250:	2318      	movs	r3, #24
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <Read_BMP280_Calibration_Data+0x28>)
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2301      	movs	r3, #1
 800125a:	2288      	movs	r2, #136	; 0x88
 800125c:	4803      	ldr	r0, [pc, #12]	; (800126c <Read_BMP280_Calibration_Data+0x2c>)
 800125e:	f005 ffd1 	bl	8007204 <HAL_I2C_Mem_Read>
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000338 	.word	0x20000338
 800126c:	20000dd8 	.word	0x20000dd8

08001270 <Read_BMP280_PressureTemperature>:

void Read_BMP280_PressureTemperature()
{
 8001270:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8001274:	b084      	sub	sp, #16
 8001276:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, BMP280_ADDR, 0xF7, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&pressure_temperature_buffer, 6, HAL_MAX_DELAY);
 8001278:	23ec      	movs	r3, #236	; 0xec
 800127a:	b299      	uxth	r1, r3
 800127c:	f04f 33ff 	mov.w	r3, #4294967295
 8001280:	9302      	str	r3, [sp, #8]
 8001282:	2306      	movs	r3, #6
 8001284:	9301      	str	r3, [sp, #4]
 8001286:	4bbb      	ldr	r3, [pc, #748]	; (8001574 <Read_BMP280_PressureTemperature+0x304>)
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	2301      	movs	r3, #1
 800128c:	22f7      	movs	r2, #247	; 0xf7
 800128e:	48ba      	ldr	r0, [pc, #744]	; (8001578 <Read_BMP280_PressureTemperature+0x308>)
 8001290:	f005 ffb8 	bl	8007204 <HAL_I2C_Mem_Read>

	adc_P = (pressure_temperature_buffer[0] << 16) | (pressure_temperature_buffer[1] << 8) | (pressure_temperature_buffer[2]);
 8001294:	4bb7      	ldr	r3, [pc, #732]	; (8001574 <Read_BMP280_PressureTemperature+0x304>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	041a      	lsls	r2, r3, #16
 800129a:	4bb6      	ldr	r3, [pc, #728]	; (8001574 <Read_BMP280_PressureTemperature+0x304>)
 800129c:	785b      	ldrb	r3, [r3, #1]
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	4313      	orrs	r3, r2
 80012a2:	4ab4      	ldr	r2, [pc, #720]	; (8001574 <Read_BMP280_PressureTemperature+0x304>)
 80012a4:	7892      	ldrb	r2, [r2, #2]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	4ab4      	ldr	r2, [pc, #720]	; (800157c <Read_BMP280_PressureTemperature+0x30c>)
 80012aa:	6013      	str	r3, [r2, #0]
	adc_P >>= 4;
 80012ac:	4bb3      	ldr	r3, [pc, #716]	; (800157c <Read_BMP280_PressureTemperature+0x30c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	111b      	asrs	r3, r3, #4
 80012b2:	4ab2      	ldr	r2, [pc, #712]	; (800157c <Read_BMP280_PressureTemperature+0x30c>)
 80012b4:	6013      	str	r3, [r2, #0]

	adc_T = (pressure_temperature_buffer[3] << 16) | (pressure_temperature_buffer[4] << 8) | (pressure_temperature_buffer[5]);
 80012b6:	4baf      	ldr	r3, [pc, #700]	; (8001574 <Read_BMP280_PressureTemperature+0x304>)
 80012b8:	78db      	ldrb	r3, [r3, #3]
 80012ba:	041a      	lsls	r2, r3, #16
 80012bc:	4bad      	ldr	r3, [pc, #692]	; (8001574 <Read_BMP280_PressureTemperature+0x304>)
 80012be:	791b      	ldrb	r3, [r3, #4]
 80012c0:	021b      	lsls	r3, r3, #8
 80012c2:	4313      	orrs	r3, r2
 80012c4:	4aab      	ldr	r2, [pc, #684]	; (8001574 <Read_BMP280_PressureTemperature+0x304>)
 80012c6:	7952      	ldrb	r2, [r2, #5]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	4aad      	ldr	r2, [pc, #692]	; (8001580 <Read_BMP280_PressureTemperature+0x310>)
 80012cc:	6013      	str	r3, [r2, #0]
	adc_T >>= 4;
 80012ce:	4bac      	ldr	r3, [pc, #688]	; (8001580 <Read_BMP280_PressureTemperature+0x310>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	111b      	asrs	r3, r3, #4
 80012d4:	4aaa      	ldr	r2, [pc, #680]	; (8001580 <Read_BMP280_PressureTemperature+0x310>)
 80012d6:	6013      	str	r3, [r2, #0]

	temperatureVar1 = ((((adc_T >> 3) - ((int32_t)_bmp280_calib.dig_T1 << 1))) * ((int32_t)_bmp280_calib.dig_T2)) >> 11;
 80012d8:	4ba9      	ldr	r3, [pc, #676]	; (8001580 <Read_BMP280_PressureTemperature+0x310>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	10da      	asrs	r2, r3, #3
 80012de:	4ba9      	ldr	r3, [pc, #676]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	4aa7      	ldr	r2, [pc, #668]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 80012e8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80012ec:	fb02 f303 	mul.w	r3, r2, r3
 80012f0:	12db      	asrs	r3, r3, #11
 80012f2:	4aa5      	ldr	r2, [pc, #660]	; (8001588 <Read_BMP280_PressureTemperature+0x318>)
 80012f4:	6013      	str	r3, [r2, #0]
	temperatureVar2 = (((((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1)) * ((adc_T >> 4) - ((int32_t)_bmp280_calib.dig_T1))) >> 12) * ((int32_t)_bmp280_calib.dig_T3)) >> 14;
 80012f6:	4ba2      	ldr	r3, [pc, #648]	; (8001580 <Read_BMP280_PressureTemperature+0x310>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	111b      	asrs	r3, r3, #4
 80012fc:	4aa1      	ldr	r2, [pc, #644]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 80012fe:	8812      	ldrh	r2, [r2, #0]
 8001300:	1a9b      	subs	r3, r3, r2
 8001302:	4a9f      	ldr	r2, [pc, #636]	; (8001580 <Read_BMP280_PressureTemperature+0x310>)
 8001304:	6812      	ldr	r2, [r2, #0]
 8001306:	1112      	asrs	r2, r2, #4
 8001308:	499e      	ldr	r1, [pc, #632]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 800130a:	8809      	ldrh	r1, [r1, #0]
 800130c:	1a52      	subs	r2, r2, r1
 800130e:	fb02 f303 	mul.w	r3, r2, r3
 8001312:	131b      	asrs	r3, r3, #12
 8001314:	4a9b      	ldr	r2, [pc, #620]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 8001316:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800131a:	fb02 f303 	mul.w	r3, r2, r3
 800131e:	139b      	asrs	r3, r3, #14
 8001320:	4a9a      	ldr	r2, [pc, #616]	; (800158c <Read_BMP280_PressureTemperature+0x31c>)
 8001322:	6013      	str	r3, [r2, #0]

	t_fine = temperatureVar1 + temperatureVar2;
 8001324:	4b98      	ldr	r3, [pc, #608]	; (8001588 <Read_BMP280_PressureTemperature+0x318>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b98      	ldr	r3, [pc, #608]	; (800158c <Read_BMP280_PressureTemperature+0x31c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4413      	add	r3, r2
 800132e:	4a98      	ldr	r2, [pc, #608]	; (8001590 <Read_BMP280_PressureTemperature+0x320>)
 8001330:	6013      	str	r3, [r2, #0]

	final_temperature = (float)((t_fine * 5 + 128) >> 8) / 100;
 8001332:	4b97      	ldr	r3, [pc, #604]	; (8001590 <Read_BMP280_PressureTemperature+0x320>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	3380      	adds	r3, #128	; 0x80
 800133e:	121b      	asrs	r3, r3, #8
 8001340:	ee07 3a90 	vmov	s15, r3
 8001344:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001348:	eddf 6a92 	vldr	s13, [pc, #584]	; 8001594 <Read_BMP280_PressureTemperature+0x324>
 800134c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001350:	4b91      	ldr	r3, [pc, #580]	; (8001598 <Read_BMP280_PressureTemperature+0x328>)
 8001352:	edc3 7a00 	vstr	s15, [r3]

	pressureVar1 = ((int64_t)t_fine) - 128000;
 8001356:	4b8e      	ldr	r3, [pc, #568]	; (8001590 <Read_BMP280_PressureTemperature+0x320>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4619      	mov	r1, r3
 800135c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001360:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8001364:	f142 34ff 	adc.w	r4, r2, #4294967295
 8001368:	4a8c      	ldr	r2, [pc, #560]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 800136a:	e9c2 3400 	strd	r3, r4, [r2]
	pressureVar2 = pressureVar1 * pressureVar1 * (int64_t)_bmp280_calib.dig_P6;
 800136e:	4b8b      	ldr	r3, [pc, #556]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 8001370:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001374:	4b89      	ldr	r3, [pc, #548]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 8001376:	e9d3 3400 	ldrd	r3, r4, [r3]
 800137a:	fb03 f502 	mul.w	r5, r3, r2
 800137e:	fb01 f004 	mul.w	r0, r1, r4
 8001382:	4428      	add	r0, r5
 8001384:	fba1 3403 	umull	r3, r4, r1, r3
 8001388:	1902      	adds	r2, r0, r4
 800138a:	4614      	mov	r4, r2
 800138c:	4a7d      	ldr	r2, [pc, #500]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 800138e:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001392:	b211      	sxth	r1, r2
 8001394:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001398:	fb01 f504 	mul.w	r5, r1, r4
 800139c:	fb03 f002 	mul.w	r0, r3, r2
 80013a0:	4428      	add	r0, r5
 80013a2:	fba3 3401 	umull	r3, r4, r3, r1
 80013a6:	1902      	adds	r2, r0, r4
 80013a8:	4614      	mov	r4, r2
 80013aa:	4a7d      	ldr	r2, [pc, #500]	; (80015a0 <Read_BMP280_PressureTemperature+0x330>)
 80013ac:	e9c2 3400 	strd	r3, r4, [r2]
	pressureVar2 = pressureVar2 + ((pressureVar1 * (int64_t)_bmp280_calib.dig_P5) << 17);
 80013b0:	4b74      	ldr	r3, [pc, #464]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 80013b2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80013b6:	b219      	sxth	r1, r3
 80013b8:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80013bc:	4b77      	ldr	r3, [pc, #476]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 80013be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013c2:	fb03 f502 	mul.w	r5, r3, r2
 80013c6:	fb01 f004 	mul.w	r0, r1, r4
 80013ca:	4428      	add	r0, r5
 80013cc:	fba1 1203 	umull	r1, r2, r1, r3
 80013d0:	1883      	adds	r3, r0, r2
 80013d2:	461a      	mov	r2, r3
 80013d4:	f04f 0500 	mov.w	r5, #0
 80013d8:	f04f 0600 	mov.w	r6, #0
 80013dc:	0456      	lsls	r6, r2, #17
 80013de:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 80013e2:	044d      	lsls	r5, r1, #17
 80013e4:	4a6e      	ldr	r2, [pc, #440]	; (80015a0 <Read_BMP280_PressureTemperature+0x330>)
 80013e6:	e9d2 1200 	ldrd	r1, r2, [r2]
 80013ea:	186b      	adds	r3, r5, r1
 80013ec:	eb46 0402 	adc.w	r4, r6, r2
 80013f0:	4a6b      	ldr	r2, [pc, #428]	; (80015a0 <Read_BMP280_PressureTemperature+0x330>)
 80013f2:	e9c2 3400 	strd	r3, r4, [r2]
	pressureVar2 = pressureVar2 + (((int64_t)_bmp280_calib.dig_P4) << 35);
 80013f6:	4b63      	ldr	r3, [pc, #396]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 80013f8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80013fc:	b219      	sxth	r1, r3
 80013fe:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001402:	f04f 0500 	mov.w	r5, #0
 8001406:	f04f 0600 	mov.w	r6, #0
 800140a:	00ce      	lsls	r6, r1, #3
 800140c:	2500      	movs	r5, #0
 800140e:	4a64      	ldr	r2, [pc, #400]	; (80015a0 <Read_BMP280_PressureTemperature+0x330>)
 8001410:	e9d2 1200 	ldrd	r1, r2, [r2]
 8001414:	186b      	adds	r3, r5, r1
 8001416:	eb46 0402 	adc.w	r4, r6, r2
 800141a:	4a61      	ldr	r2, [pc, #388]	; (80015a0 <Read_BMP280_PressureTemperature+0x330>)
 800141c:	e9c2 3400 	strd	r3, r4, [r2]
	pressureVar1 = ((pressureVar1 * pressureVar1 * (int64_t)_bmp280_calib.dig_P3) >> 8) + ((pressureVar1 * (int64_t)_bmp280_calib.dig_P2) << 12);
 8001420:	4b5e      	ldr	r3, [pc, #376]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 8001422:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001426:	4b5d      	ldr	r3, [pc, #372]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 8001428:	e9d3 3400 	ldrd	r3, r4, [r3]
 800142c:	fb03 f502 	mul.w	r5, r3, r2
 8001430:	fb01 f004 	mul.w	r0, r1, r4
 8001434:	4428      	add	r0, r5
 8001436:	fba1 3403 	umull	r3, r4, r1, r3
 800143a:	1902      	adds	r2, r0, r4
 800143c:	4614      	mov	r4, r2
 800143e:	4a51      	ldr	r2, [pc, #324]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 8001440:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8001444:	b211      	sxth	r1, r2
 8001446:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800144a:	fb01 f504 	mul.w	r5, r1, r4
 800144e:	fb03 f002 	mul.w	r0, r3, r2
 8001452:	4428      	add	r0, r5
 8001454:	fba3 3401 	umull	r3, r4, r3, r1
 8001458:	1902      	adds	r2, r0, r4
 800145a:	4614      	mov	r4, r2
 800145c:	f04f 0100 	mov.w	r1, #0
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	0a19      	lsrs	r1, r3, #8
 8001466:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 800146a:	1222      	asrs	r2, r4, #8
 800146c:	4b45      	ldr	r3, [pc, #276]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 800146e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001472:	b21d      	sxth	r5, r3
 8001474:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001478:	4b48      	ldr	r3, [pc, #288]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 800147a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800147e:	fb03 fc06 	mul.w	ip, r3, r6
 8001482:	fb05 f004 	mul.w	r0, r5, r4
 8001486:	4460      	add	r0, ip
 8001488:	fba5 5603 	umull	r5, r6, r5, r3
 800148c:	1983      	adds	r3, r0, r6
 800148e:	461e      	mov	r6, r3
 8001490:	f04f 0b00 	mov.w	fp, #0
 8001494:	f04f 0c00 	mov.w	ip, #0
 8001498:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 800149c:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 80014a0:	ea4f 3b05 	mov.w	fp, r5, lsl #12
 80014a4:	eb1b 0301 	adds.w	r3, fp, r1
 80014a8:	eb4c 0402 	adc.w	r4, ip, r2
 80014ac:	4a3b      	ldr	r2, [pc, #236]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 80014ae:	e9c2 3400 	strd	r3, r4, [r2]
	pressureVar1 = (((((int64_t)1) << 47) + pressureVar1)) * ((int64_t)_bmp280_calib.dig_P1) >> 33;
 80014b2:	4b3a      	ldr	r3, [pc, #232]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 80014b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80014b8:	1c19      	adds	r1, r3, #0
 80014ba:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 80014be:	4b31      	ldr	r3, [pc, #196]	; (8001584 <Read_BMP280_PressureTemperature+0x314>)
 80014c0:	88db      	ldrh	r3, [r3, #6]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	f04f 0400 	mov.w	r4, #0
 80014c8:	fb03 f502 	mul.w	r5, r3, r2
 80014cc:	fb01 f004 	mul.w	r0, r1, r4
 80014d0:	4428      	add	r0, r5
 80014d2:	fba1 3403 	umull	r3, r4, r1, r3
 80014d6:	1902      	adds	r2, r0, r4
 80014d8:	4614      	mov	r4, r2
 80014da:	f04f 0100 	mov.w	r1, #0
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	1061      	asrs	r1, r4, #1
 80014e4:	17e2      	asrs	r2, r4, #31
 80014e6:	4b2d      	ldr	r3, [pc, #180]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 80014e8:	e9c3 1200 	strd	r1, r2, [r3]

	if (pressureVar1 != 0)
 80014ec:	4b2b      	ldr	r3, [pc, #172]	; (800159c <Read_BMP280_PressureTemperature+0x32c>)
 80014ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80014f2:	4323      	orrs	r3, r4
 80014f4:	f000 8156 	beq.w	80017a4 <Read_BMP280_PressureTemperature+0x534>
	{
		pressureVarP = 1048576 - adc_P;
 80014f8:	4b20      	ldr	r3, [pc, #128]	; (800157c <Read_BMP280_PressureTemperature+0x30c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001500:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001504:	4a27      	ldr	r2, [pc, #156]	; (80015a4 <Read_BMP280_PressureTemperature+0x334>)
 8001506:	e9c2 3400 	strd	r3, r4, [r2]
		pressureVarP = (((pressureVarP << 31) - pressureVar2) * 3125) / pressureVar1;
 800150a:	4b26      	ldr	r3, [pc, #152]	; (80015a4 <Read_BMP280_PressureTemperature+0x334>)
 800150c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	f04f 0400 	mov.w	r4, #0
 8001518:	07d4      	lsls	r4, r2, #31
 800151a:	ea44 0451 	orr.w	r4, r4, r1, lsr #1
 800151e:	07cb      	lsls	r3, r1, #31
 8001520:	4a1f      	ldr	r2, [pc, #124]	; (80015a0 <Read_BMP280_PressureTemperature+0x330>)
 8001522:	e9d2 1200 	ldrd	r1, r2, [r2]
 8001526:	1a5b      	subs	r3, r3, r1
 8001528:	eb64 0402 	sbc.w	r4, r4, r2
 800152c:	461d      	mov	r5, r3
 800152e:	4626      	mov	r6, r4
 8001530:	46ab      	mov	fp, r5
 8001532:	46b4      	mov	ip, r6
 8001534:	eb1b 030b 	adds.w	r3, fp, fp
 8001538:	eb4c 040c 	adc.w	r4, ip, ip
 800153c:	469b      	mov	fp, r3
 800153e:	46a4      	mov	ip, r4
 8001540:	eb1b 0b05 	adds.w	fp, fp, r5
 8001544:	eb4c 0c06 	adc.w	ip, ip, r6
 8001548:	f04f 0100 	mov.w	r1, #0
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	ea4f 128c 	mov.w	r2, ip, lsl #6
 8001554:	ea42 629b 	orr.w	r2, r2, fp, lsr #26
 8001558:	ea4f 118b 	mov.w	r1, fp, lsl #6
 800155c:	eb1b 0b01 	adds.w	fp, fp, r1
 8001560:	eb4c 0c02 	adc.w	ip, ip, r2
 8001564:	f04f 0100 	mov.w	r1, #0
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8001570:	e01a      	b.n	80015a8 <Read_BMP280_PressureTemperature+0x338>
 8001572:	bf00      	nop
 8001574:	20000308 	.word	0x20000308
 8001578:	20000dd8 	.word	0x20000dd8
 800157c:	20000324 	.word	0x20000324
 8001580:	20000328 	.word	0x20000328
 8001584:	20000338 	.word	0x20000338
 8001588:	20000334 	.word	0x20000334
 800158c:	20000304 	.word	0x20000304
 8001590:	20000358 	.word	0x20000358
 8001594:	42c80000 	.word	0x42c80000
 8001598:	20000300 	.word	0x20000300
 800159c:	20000360 	.word	0x20000360
 80015a0:	20000318 	.word	0x20000318
 80015a4:	20000350 	.word	0x20000350
 80015a8:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 80015ac:	ea4f 018b 	mov.w	r1, fp, lsl #2
 80015b0:	468b      	mov	fp, r1
 80015b2:	4694      	mov	ip, r2
 80015b4:	eb1b 0b05 	adds.w	fp, fp, r5
 80015b8:	eb4c 0c06 	adc.w	ip, ip, r6
 80015bc:	f04f 0100 	mov.w	r1, #0
 80015c0:	f04f 0200 	mov.w	r2, #0
 80015c4:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80015c8:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 80015cc:	ea4f 018b 	mov.w	r1, fp, lsl #2
 80015d0:	468b      	mov	fp, r1
 80015d2:	4694      	mov	ip, r2
 80015d4:	eb1b 0005 	adds.w	r0, fp, r5
 80015d8:	eb4c 0106 	adc.w	r1, ip, r6
 80015dc:	4b78      	ldr	r3, [pc, #480]	; (80017c0 <Read_BMP280_PressureTemperature+0x550>)
 80015de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80015e2:	461a      	mov	r2, r3
 80015e4:	4623      	mov	r3, r4
 80015e6:	f7ff fc3d 	bl	8000e64 <__aeabi_ldivmod>
 80015ea:	4603      	mov	r3, r0
 80015ec:	460c      	mov	r4, r1
 80015ee:	4a75      	ldr	r2, [pc, #468]	; (80017c4 <Read_BMP280_PressureTemperature+0x554>)
 80015f0:	e9c2 3400 	strd	r3, r4, [r2]
		pressureVar1 = (((int64_t)_bmp280_calib.dig_P9) * (pressureVarP >> 13) * (pressureVarP >> 13)) >> 25;
 80015f4:	4b74      	ldr	r3, [pc, #464]	; (80017c8 <Read_BMP280_PressureTemperature+0x558>)
 80015f6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80015fa:	b219      	sxth	r1, r3
 80015fc:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001600:	4b70      	ldr	r3, [pc, #448]	; (80017c4 <Read_BMP280_PressureTemperature+0x554>)
 8001602:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001606:	f04f 0300 	mov.w	r3, #0
 800160a:	f04f 0400 	mov.w	r4, #0
 800160e:	0b6b      	lsrs	r3, r5, #13
 8001610:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001614:	1374      	asrs	r4, r6, #13
 8001616:	fb03 f502 	mul.w	r5, r3, r2
 800161a:	fb01 f004 	mul.w	r0, r1, r4
 800161e:	4428      	add	r0, r5
 8001620:	fba1 1203 	umull	r1, r2, r1, r3
 8001624:	1883      	adds	r3, r0, r2
 8001626:	461a      	mov	r2, r3
 8001628:	4b66      	ldr	r3, [pc, #408]	; (80017c4 <Read_BMP280_PressureTemperature+0x554>)
 800162a:	e9d3 5600 	ldrd	r5, r6, [r3]
 800162e:	f04f 0300 	mov.w	r3, #0
 8001632:	f04f 0400 	mov.w	r4, #0
 8001636:	0b6b      	lsrs	r3, r5, #13
 8001638:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 800163c:	1374      	asrs	r4, r6, #13
 800163e:	fb03 f502 	mul.w	r5, r3, r2
 8001642:	fb01 f004 	mul.w	r0, r1, r4
 8001646:	4428      	add	r0, r5
 8001648:	fba1 1203 	umull	r1, r2, r1, r3
 800164c:	1883      	adds	r3, r0, r2
 800164e:	461a      	mov	r2, r3
 8001650:	f04f 0300 	mov.w	r3, #0
 8001654:	f04f 0400 	mov.w	r4, #0
 8001658:	0e4b      	lsrs	r3, r1, #25
 800165a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800165e:	1654      	asrs	r4, r2, #25
 8001660:	4a57      	ldr	r2, [pc, #348]	; (80017c0 <Read_BMP280_PressureTemperature+0x550>)
 8001662:	e9c2 3400 	strd	r3, r4, [r2]
		pressureVar2 = (((int64_t)_bmp280_calib.dig_P8) * pressureVarP) >> 19;
 8001666:	4b58      	ldr	r3, [pc, #352]	; (80017c8 <Read_BMP280_PressureTemperature+0x558>)
 8001668:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800166c:	b219      	sxth	r1, r3
 800166e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001672:	4b54      	ldr	r3, [pc, #336]	; (80017c4 <Read_BMP280_PressureTemperature+0x554>)
 8001674:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001678:	fb03 f502 	mul.w	r5, r3, r2
 800167c:	fb01 f004 	mul.w	r0, r1, r4
 8001680:	4428      	add	r0, r5
 8001682:	fba1 1203 	umull	r1, r2, r1, r3
 8001686:	1883      	adds	r3, r0, r2
 8001688:	461a      	mov	r2, r3
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	f04f 0400 	mov.w	r4, #0
 8001692:	0ccb      	lsrs	r3, r1, #19
 8001694:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001698:	14d4      	asrs	r4, r2, #19
 800169a:	4a4c      	ldr	r2, [pc, #304]	; (80017cc <Read_BMP280_PressureTemperature+0x55c>)
 800169c:	e9c2 3400 	strd	r3, r4, [r2]

		pressureVarP = ((pressureVarP + pressureVar1 + pressureVar2) >> 8) + (((int64_t)_bmp280_calib.dig_P7) << 4);
 80016a0:	4b48      	ldr	r3, [pc, #288]	; (80017c4 <Read_BMP280_PressureTemperature+0x554>)
 80016a2:	e9d3 5600 	ldrd	r5, r6, [r3]
 80016a6:	4b46      	ldr	r3, [pc, #280]	; (80017c0 <Read_BMP280_PressureTemperature+0x550>)
 80016a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80016ac:	18e9      	adds	r1, r5, r3
 80016ae:	eb46 0204 	adc.w	r2, r6, r4
 80016b2:	4b46      	ldr	r3, [pc, #280]	; (80017cc <Read_BMP280_PressureTemperature+0x55c>)
 80016b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80016b8:	185d      	adds	r5, r3, r1
 80016ba:	eb44 0602 	adc.w	r6, r4, r2
 80016be:	f04f 0100 	mov.w	r1, #0
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	0a29      	lsrs	r1, r5, #8
 80016c8:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 80016cc:	1232      	asrs	r2, r6, #8
 80016ce:	4b3e      	ldr	r3, [pc, #248]	; (80017c8 <Read_BMP280_PressureTemperature+0x558>)
 80016d0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80016d4:	b21d      	sxth	r5, r3
 80016d6:	ea4f 76e5 	mov.w	r6, r5, asr #31
 80016da:	f04f 0b00 	mov.w	fp, #0
 80016de:	f04f 0c00 	mov.w	ip, #0
 80016e2:	ea4f 1c06 	mov.w	ip, r6, lsl #4
 80016e6:	ea4c 7c15 	orr.w	ip, ip, r5, lsr #28
 80016ea:	ea4f 1b05 	mov.w	fp, r5, lsl #4
 80016ee:	eb1b 0301 	adds.w	r3, fp, r1
 80016f2:	eb4c 0402 	adc.w	r4, ip, r2
 80016f6:	4a33      	ldr	r2, [pc, #204]	; (80017c4 <Read_BMP280_PressureTemperature+0x554>)
 80016f8:	e9c2 3400 	strd	r3, r4, [r2]

		final_pressure = (float)pressureVarP / 256;
 80016fc:	4b31      	ldr	r3, [pc, #196]	; (80017c4 <Read_BMP280_PressureTemperature+0x554>)
 80016fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001702:	4618      	mov	r0, r3
 8001704:	4621      	mov	r1, r4
 8001706:	f7ff fb6f 	bl	8000de8 <__aeabi_l2f>
 800170a:	ee06 0a90 	vmov	s13, r0
 800170e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80017d0 <Read_BMP280_PressureTemperature+0x560>
 8001712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001716:	4b2f      	ldr	r3, [pc, #188]	; (80017d4 <Read_BMP280_PressureTemperature+0x564>)
 8001718:	edc3 7a00 	vstr	s15, [r3]
		final_pressure /= 100;
 800171c:	4b2d      	ldr	r3, [pc, #180]	; (80017d4 <Read_BMP280_PressureTemperature+0x564>)
 800171e:	ed93 7a00 	vldr	s14, [r3]
 8001722:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80017d8 <Read_BMP280_PressureTemperature+0x568>
 8001726:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800172a:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <Read_BMP280_PressureTemperature+0x564>)
 800172c:	edc3 7a00 	vstr	s15, [r3]

		temp_altitude = (44330 * (1.0 - pow(final_pressure / seaLevelhPa, 0.1903)));
 8001730:	4b28      	ldr	r3, [pc, #160]	; (80017d4 <Read_BMP280_PressureTemperature+0x564>)
 8001732:	ed93 7a00 	vldr	s14, [r3]
 8001736:	4b29      	ldr	r3, [pc, #164]	; (80017dc <Read_BMP280_PressureTemperature+0x56c>)
 8001738:	edd3 7a00 	vldr	s15, [r3]
 800173c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001740:	ee16 0a90 	vmov	r0, s13
 8001744:	f7fe ff00 	bl	8000548 <__aeabi_f2d>
 8001748:	4603      	mov	r3, r0
 800174a:	460c      	mov	r4, r1
 800174c:	ed9f 1b18 	vldr	d1, [pc, #96]	; 80017b0 <Read_BMP280_PressureTemperature+0x540>
 8001750:	ec44 3b10 	vmov	d0, r3, r4
 8001754:	f00f fb30 	bl	8010db8 <pow>
 8001758:	ec54 3b10 	vmov	r3, r4, d0
 800175c:	461a      	mov	r2, r3
 800175e:	4623      	mov	r3, r4
 8001760:	f04f 0000 	mov.w	r0, #0
 8001764:	491e      	ldr	r1, [pc, #120]	; (80017e0 <Read_BMP280_PressureTemperature+0x570>)
 8001766:	f7fe fd8f 	bl	8000288 <__aeabi_dsub>
 800176a:	4603      	mov	r3, r0
 800176c:	460c      	mov	r4, r1
 800176e:	4618      	mov	r0, r3
 8001770:	4621      	mov	r1, r4
 8001772:	a311      	add	r3, pc, #68	; (adr r3, 80017b8 <Read_BMP280_PressureTemperature+0x548>)
 8001774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001778:	f7fe ff3e 	bl	80005f8 <__aeabi_dmul>
 800177c:	4603      	mov	r3, r0
 800177e:	460c      	mov	r4, r1
 8001780:	4618      	mov	r0, r3
 8001782:	4621      	mov	r1, r4
 8001784:	f7ff fa10 	bl	8000ba8 <__aeabi_d2f>
 8001788:	4602      	mov	r2, r0
 800178a:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <Read_BMP280_PressureTemperature+0x574>)
 800178c:	601a      	str	r2, [r3, #0]
		read_bmp_altitude = temp_altitude - altitude_calibration;
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <Read_BMP280_PressureTemperature+0x574>)
 8001790:	ed93 7a00 	vldr	s14, [r3]
 8001794:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <Read_BMP280_PressureTemperature+0x578>)
 8001796:	edd3 7a00 	vldr	s15, [r3]
 800179a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800179e:	4b13      	ldr	r3, [pc, #76]	; (80017ec <Read_BMP280_PressureTemperature+0x57c>)
 80017a0:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80017ac:	f3af 8000 	nop.w
 80017b0:	1a36e2eb 	.word	0x1a36e2eb
 80017b4:	3fc85bc0 	.word	0x3fc85bc0
 80017b8:	00000000 	.word	0x00000000
 80017bc:	40e5a540 	.word	0x40e5a540
 80017c0:	20000360 	.word	0x20000360
 80017c4:	20000350 	.word	0x20000350
 80017c8:	20000338 	.word	0x20000338
 80017cc:	20000318 	.word	0x20000318
 80017d0:	43800000 	.word	0x43800000
 80017d4:	20000330 	.word	0x20000330
 80017d8:	42c80000 	.word	0x42c80000
 80017dc:	20000000 	.word	0x20000000
 80017e0:	3ff00000 	.word	0x3ff00000
 80017e4:	2000032c 	.word	0x2000032c
 80017e8:	20000310 	.word	0x20000310
 80017ec:	20000320 	.word	0x20000320

080017f0 <Calibrate_BMP280>:

void Calibrate_BMP280()
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
	altitude_calibration = 0;
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <Calibrate_BMP280+0x5c>)
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < 30; i++)
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	e012      	b.n	800182a <Calibrate_BMP280+0x3a>
	{
		Read_BMP280_PressureTemperature();
 8001804:	f7ff fd34 	bl	8001270 <Read_BMP280_PressureTemperature>
		altitude_calibration += temp_altitude;
 8001808:	4b10      	ldr	r3, [pc, #64]	; (800184c <Calibrate_BMP280+0x5c>)
 800180a:	ed93 7a00 	vldr	s14, [r3]
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <Calibrate_BMP280+0x60>)
 8001810:	edd3 7a00 	vldr	s15, [r3]
 8001814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <Calibrate_BMP280+0x5c>)
 800181a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(50);
 800181e:	2032      	movs	r0, #50	; 0x32
 8001820:	f004 fc88 	bl	8006134 <HAL_Delay>
	for(int i = 0; i < 30; i++)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3301      	adds	r3, #1
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b1d      	cmp	r3, #29
 800182e:	dde9      	ble.n	8001804 <Calibrate_BMP280+0x14>
	}

	altitude_calibration /= 30.00;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <Calibrate_BMP280+0x5c>)
 8001832:	ed93 7a00 	vldr	s14, [r3]
 8001836:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 800183a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800183e:	4b03      	ldr	r3, [pc, #12]	; (800184c <Calibrate_BMP280+0x5c>)
 8001840:	edc3 7a00 	vstr	s15, [r3]
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000310 	.word	0x20000310
 8001850:	2000032c 	.word	0x2000032c

08001854 <Setup_Compass>:
float y_scale, z_scale;

float heading_difference_return = 0;

void Setup_Compass()
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af02      	add	r7, sp, #8
	uint8_t setup_data[4];
	setup_data[0] = 0x00;
 800185a:	2300      	movs	r3, #0
 800185c:	713b      	strb	r3, [r7, #4]
	setup_data[1] = 0x78;
 800185e:	2378      	movs	r3, #120	; 0x78
 8001860:	717b      	strb	r3, [r7, #5]
	setup_data[2] = 0x20;
 8001862:	2320      	movs	r3, #32
 8001864:	71bb      	strb	r3, [r7, #6]
	setup_data[3] = 0x00;
 8001866:	2300      	movs	r3, #0
 8001868:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Master_Transmit(&hi2c1, COMPASS_ADDR, setup_data, 4, HAL_MAX_DELAY);
 800186a:	233c      	movs	r3, #60	; 0x3c
 800186c:	b299      	uxth	r1, r3
 800186e:	1d3a      	adds	r2, r7, #4
 8001870:	f04f 33ff 	mov.w	r3, #4294967295
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	2304      	movs	r3, #4
 8001878:	4808      	ldr	r0, [pc, #32]	; (800189c <Setup_Compass+0x48>)
 800187a:	f005 fbc5 	bl	8007008 <HAL_I2C_Master_Transmit>
	Calculate_Compass_Calibration();
 800187e:	f000 fbd9 	bl	8002034 <Calculate_Compass_Calibration>

	HAL_Delay(5);
 8001882:	2005      	movs	r0, #5
 8001884:	f004 fc56 	bl	8006134 <HAL_Delay>

	Read_Compass();
 8001888:	f000 f80e 	bl	80018a8 <Read_Compass>

	gyro_z_angle = compass_heading;
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <Setup_Compass+0x4c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <Setup_Compass+0x50>)
 8001892:	6013      	str	r3, [r2, #0]
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000dd8 	.word	0x20000dd8
 80018a0:	20000258 	.word	0x20000258
 80018a4:	20000fd4 	.word	0x20000fd4

080018a8 <Read_Compass>:

void Read_Compass()
{
 80018a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018ac:	b084      	sub	sp, #16
 80018ae:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, COMPASS_ADDR, 0x03, I2C_MEMADD_SIZE_8BIT,  (uint8_t *)&raw_compass_data, 6, HAL_MAX_DELAY);
 80018b0:	233c      	movs	r3, #60	; 0x3c
 80018b2:	b299      	uxth	r1, r3
 80018b4:	f04f 33ff 	mov.w	r3, #4294967295
 80018b8:	9302      	str	r3, [sp, #8]
 80018ba:	2306      	movs	r3, #6
 80018bc:	9301      	str	r3, [sp, #4]
 80018be:	4bd2      	ldr	r3, [pc, #840]	; (8001c08 <Read_Compass+0x360>)
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2301      	movs	r3, #1
 80018c4:	2203      	movs	r2, #3
 80018c6:	48d1      	ldr	r0, [pc, #836]	; (8001c0c <Read_Compass+0x364>)
 80018c8:	f005 fc9c 	bl	8007204 <HAL_I2C_Mem_Read>

	compassY = (int16_t)((raw_compass_data[0] << 8) | raw_compass_data[1]);
 80018cc:	4bce      	ldr	r3, [pc, #824]	; (8001c08 <Read_Compass+0x360>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	021b      	lsls	r3, r3, #8
 80018d2:	b21a      	sxth	r2, r3
 80018d4:	4bcc      	ldr	r3, [pc, #816]	; (8001c08 <Read_Compass+0x360>)
 80018d6:	785b      	ldrb	r3, [r3, #1]
 80018d8:	b21b      	sxth	r3, r3
 80018da:	4313      	orrs	r3, r2
 80018dc:	b21a      	sxth	r2, r3
 80018de:	4bcc      	ldr	r3, [pc, #816]	; (8001c10 <Read_Compass+0x368>)
 80018e0:	801a      	strh	r2, [r3, #0]
	compassZ = (int16_t)((raw_compass_data[2] << 8) | raw_compass_data[3]);
 80018e2:	4bc9      	ldr	r3, [pc, #804]	; (8001c08 <Read_Compass+0x360>)
 80018e4:	789b      	ldrb	r3, [r3, #2]
 80018e6:	021b      	lsls	r3, r3, #8
 80018e8:	b21a      	sxth	r2, r3
 80018ea:	4bc7      	ldr	r3, [pc, #796]	; (8001c08 <Read_Compass+0x360>)
 80018ec:	78db      	ldrb	r3, [r3, #3]
 80018ee:	b21b      	sxth	r3, r3
 80018f0:	4313      	orrs	r3, r2
 80018f2:	b21a      	sxth	r2, r3
 80018f4:	4bc7      	ldr	r3, [pc, #796]	; (8001c14 <Read_Compass+0x36c>)
 80018f6:	801a      	strh	r2, [r3, #0]
	compassX = (int16_t)((raw_compass_data[4] << 8) | raw_compass_data[5]);
 80018f8:	4bc3      	ldr	r3, [pc, #780]	; (8001c08 <Read_Compass+0x360>)
 80018fa:	791b      	ldrb	r3, [r3, #4]
 80018fc:	021b      	lsls	r3, r3, #8
 80018fe:	b21a      	sxth	r2, r3
 8001900:	4bc1      	ldr	r3, [pc, #772]	; (8001c08 <Read_Compass+0x360>)
 8001902:	795b      	ldrb	r3, [r3, #5]
 8001904:	b21b      	sxth	r3, r3
 8001906:	4313      	orrs	r3, r2
 8001908:	b21a      	sxth	r2, r3
 800190a:	4bc3      	ldr	r3, [pc, #780]	; (8001c18 <Read_Compass+0x370>)
 800190c:	801a      	strh	r2, [r3, #0]

	compassY += compass_offset_y;
 800190e:	4bc0      	ldr	r3, [pc, #768]	; (8001c10 <Read_Compass+0x368>)
 8001910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001914:	ee07 3a90 	vmov	s15, r3
 8001918:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800191c:	4bbf      	ldr	r3, [pc, #764]	; (8001c1c <Read_Compass+0x374>)
 800191e:	edd3 7a00 	vldr	s15, [r3]
 8001922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001926:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800192a:	ee17 3a90 	vmov	r3, s15
 800192e:	b21a      	sxth	r2, r3
 8001930:	4bb7      	ldr	r3, [pc, #732]	; (8001c10 <Read_Compass+0x368>)
 8001932:	801a      	strh	r2, [r3, #0]
	compassY *= y_scale;
 8001934:	4bb6      	ldr	r3, [pc, #728]	; (8001c10 <Read_Compass+0x368>)
 8001936:	f9b3 3000 	ldrsh.w	r3, [r3]
 800193a:	ee07 3a90 	vmov	s15, r3
 800193e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001942:	4bb7      	ldr	r3, [pc, #732]	; (8001c20 <Read_Compass+0x378>)
 8001944:	edd3 7a00 	vldr	s15, [r3]
 8001948:	ee67 7a27 	vmul.f32	s15, s14, s15
 800194c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001950:	ee17 3a90 	vmov	r3, s15
 8001954:	b21a      	sxth	r2, r3
 8001956:	4bae      	ldr	r3, [pc, #696]	; (8001c10 <Read_Compass+0x368>)
 8001958:	801a      	strh	r2, [r3, #0]

	compassZ += compass_offset_z;
 800195a:	4bae      	ldr	r3, [pc, #696]	; (8001c14 <Read_Compass+0x36c>)
 800195c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001960:	ee07 3a90 	vmov	s15, r3
 8001964:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001968:	4bae      	ldr	r3, [pc, #696]	; (8001c24 <Read_Compass+0x37c>)
 800196a:	edd3 7a00 	vldr	s15, [r3]
 800196e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001972:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001976:	ee17 3a90 	vmov	r3, s15
 800197a:	b21a      	sxth	r2, r3
 800197c:	4ba5      	ldr	r3, [pc, #660]	; (8001c14 <Read_Compass+0x36c>)
 800197e:	801a      	strh	r2, [r3, #0]
	compassZ *= z_scale;
 8001980:	4ba4      	ldr	r3, [pc, #656]	; (8001c14 <Read_Compass+0x36c>)
 8001982:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001986:	ee07 3a90 	vmov	s15, r3
 800198a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800198e:	4ba6      	ldr	r3, [pc, #664]	; (8001c28 <Read_Compass+0x380>)
 8001990:	edd3 7a00 	vldr	s15, [r3]
 8001994:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001998:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800199c:	ee17 3a90 	vmov	r3, s15
 80019a0:	b21a      	sxth	r2, r3
 80019a2:	4b9c      	ldr	r3, [pc, #624]	; (8001c14 <Read_Compass+0x36c>)
 80019a4:	801a      	strh	r2, [r3, #0]

	compassX += compass_offset_x;
 80019a6:	4b9c      	ldr	r3, [pc, #624]	; (8001c18 <Read_Compass+0x370>)
 80019a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019b4:	4b9d      	ldr	r3, [pc, #628]	; (8001c2c <Read_Compass+0x384>)
 80019b6:	edd3 7a00 	vldr	s15, [r3]
 80019ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019c2:	ee17 3a90 	vmov	r3, s15
 80019c6:	b21a      	sxth	r2, r3
 80019c8:	4b93      	ldr	r3, [pc, #588]	; (8001c18 <Read_Compass+0x370>)
 80019ca:	801a      	strh	r2, [r3, #0]

	comX = ((float)compassX * cos((gyro_y_angle + 3.00) * 0.0174533)) + ((float)compassY * sin((gyro_x_angle + 2.00) * 0.0174533) * sin((gyro_y_angle + 3.00) * 0.0174533)) - ((float)compassZ * cos((gyro_x_angle + 2.00) * 0.0174533) * sin((gyro_y_angle + 3.00) * 0.0174533));
 80019cc:	4b92      	ldr	r3, [pc, #584]	; (8001c18 <Read_Compass+0x370>)
 80019ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019d2:	ee07 3a90 	vmov	s15, r3
 80019d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019da:	ee17 0a90 	vmov	r0, s15
 80019de:	f7fe fdb3 	bl	8000548 <__aeabi_f2d>
 80019e2:	4604      	mov	r4, r0
 80019e4:	460d      	mov	r5, r1
 80019e6:	4b92      	ldr	r3, [pc, #584]	; (8001c30 <Read_Compass+0x388>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fdac 	bl	8000548 <__aeabi_f2d>
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	4b8f      	ldr	r3, [pc, #572]	; (8001c34 <Read_Compass+0x38c>)
 80019f6:	f7fe fc49 	bl	800028c <__adddf3>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4610      	mov	r0, r2
 8001a00:	4619      	mov	r1, r3
 8001a02:	a37f      	add	r3, pc, #508	; (adr r3, 8001c00 <Read_Compass+0x358>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	f7fe fdf6 	bl	80005f8 <__aeabi_dmul>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	ec43 2b17 	vmov	d7, r2, r3
 8001a14:	eeb0 0a47 	vmov.f32	s0, s14
 8001a18:	eef0 0a67 	vmov.f32	s1, s15
 8001a1c:	f00f f89c 	bl	8010b58 <cos>
 8001a20:	ec53 2b10 	vmov	r2, r3, d0
 8001a24:	4620      	mov	r0, r4
 8001a26:	4629      	mov	r1, r5
 8001a28:	f7fe fde6 	bl	80005f8 <__aeabi_dmul>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	460c      	mov	r4, r1
 8001a30:	4625      	mov	r5, r4
 8001a32:	461c      	mov	r4, r3
 8001a34:	4b76      	ldr	r3, [pc, #472]	; (8001c10 <Read_Compass+0x368>)
 8001a36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a3a:	ee07 3a90 	vmov	s15, r3
 8001a3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a42:	ee17 0a90 	vmov	r0, s15
 8001a46:	f7fe fd7f 	bl	8000548 <__aeabi_f2d>
 8001a4a:	4680      	mov	r8, r0
 8001a4c:	4689      	mov	r9, r1
 8001a4e:	4b7a      	ldr	r3, [pc, #488]	; (8001c38 <Read_Compass+0x390>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fd78 	bl	8000548 <__aeabi_f2d>
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a60:	f7fe fc14 	bl	800028c <__adddf3>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	a364      	add	r3, pc, #400	; (adr r3, 8001c00 <Read_Compass+0x358>)
 8001a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a72:	f7fe fdc1 	bl	80005f8 <__aeabi_dmul>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	ec43 2b17 	vmov	d7, r2, r3
 8001a7e:	eeb0 0a47 	vmov.f32	s0, s14
 8001a82:	eef0 0a67 	vmov.f32	s1, s15
 8001a86:	f00f f8f7 	bl	8010c78 <sin>
 8001a8a:	ec53 2b10 	vmov	r2, r3, d0
 8001a8e:	4640      	mov	r0, r8
 8001a90:	4649      	mov	r1, r9
 8001a92:	f7fe fdb1 	bl	80005f8 <__aeabi_dmul>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4690      	mov	r8, r2
 8001a9c:	4699      	mov	r9, r3
 8001a9e:	4b64      	ldr	r3, [pc, #400]	; (8001c30 <Read_Compass+0x388>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fd50 	bl	8000548 <__aeabi_f2d>
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	4b61      	ldr	r3, [pc, #388]	; (8001c34 <Read_Compass+0x38c>)
 8001aae:	f7fe fbed 	bl	800028c <__adddf3>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	4619      	mov	r1, r3
 8001aba:	a351      	add	r3, pc, #324	; (adr r3, 8001c00 <Read_Compass+0x358>)
 8001abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac0:	f7fe fd9a 	bl	80005f8 <__aeabi_dmul>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	ec43 2b17 	vmov	d7, r2, r3
 8001acc:	eeb0 0a47 	vmov.f32	s0, s14
 8001ad0:	eef0 0a67 	vmov.f32	s1, s15
 8001ad4:	f00f f8d0 	bl	8010c78 <sin>
 8001ad8:	ec53 2b10 	vmov	r2, r3, d0
 8001adc:	4640      	mov	r0, r8
 8001ade:	4649      	mov	r1, r9
 8001ae0:	f7fe fd8a 	bl	80005f8 <__aeabi_dmul>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4620      	mov	r0, r4
 8001aea:	4629      	mov	r1, r5
 8001aec:	f7fe fbce 	bl	800028c <__adddf3>
 8001af0:	4603      	mov	r3, r0
 8001af2:	460c      	mov	r4, r1
 8001af4:	4625      	mov	r5, r4
 8001af6:	461c      	mov	r4, r3
 8001af8:	4b46      	ldr	r3, [pc, #280]	; (8001c14 <Read_Compass+0x36c>)
 8001afa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b06:	ee17 0a90 	vmov	r0, s15
 8001b0a:	f7fe fd1d 	bl	8000548 <__aeabi_f2d>
 8001b0e:	4680      	mov	r8, r0
 8001b10:	4689      	mov	r9, r1
 8001b12:	4b49      	ldr	r3, [pc, #292]	; (8001c38 <Read_Compass+0x390>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fd16 	bl	8000548 <__aeabi_f2d>
 8001b1c:	f04f 0200 	mov.w	r2, #0
 8001b20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b24:	f7fe fbb2 	bl	800028c <__adddf3>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	a333      	add	r3, pc, #204	; (adr r3, 8001c00 <Read_Compass+0x358>)
 8001b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b36:	f7fe fd5f 	bl	80005f8 <__aeabi_dmul>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	ec43 2b17 	vmov	d7, r2, r3
 8001b42:	eeb0 0a47 	vmov.f32	s0, s14
 8001b46:	eef0 0a67 	vmov.f32	s1, s15
 8001b4a:	f00f f805 	bl	8010b58 <cos>
 8001b4e:	ec53 2b10 	vmov	r2, r3, d0
 8001b52:	4640      	mov	r0, r8
 8001b54:	4649      	mov	r1, r9
 8001b56:	f7fe fd4f 	bl	80005f8 <__aeabi_dmul>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4690      	mov	r8, r2
 8001b60:	4699      	mov	r9, r3
 8001b62:	4b33      	ldr	r3, [pc, #204]	; (8001c30 <Read_Compass+0x388>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fcee 	bl	8000548 <__aeabi_f2d>
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	4b30      	ldr	r3, [pc, #192]	; (8001c34 <Read_Compass+0x38c>)
 8001b72:	f7fe fb8b 	bl	800028c <__adddf3>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	a320      	add	r3, pc, #128	; (adr r3, 8001c00 <Read_Compass+0x358>)
 8001b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b84:	f7fe fd38 	bl	80005f8 <__aeabi_dmul>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	ec43 2b17 	vmov	d7, r2, r3
 8001b90:	eeb0 0a47 	vmov.f32	s0, s14
 8001b94:	eef0 0a67 	vmov.f32	s1, s15
 8001b98:	f00f f86e 	bl	8010c78 <sin>
 8001b9c:	ec53 2b10 	vmov	r2, r3, d0
 8001ba0:	4640      	mov	r0, r8
 8001ba2:	4649      	mov	r1, r9
 8001ba4:	f7fe fd28 	bl	80005f8 <__aeabi_dmul>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4620      	mov	r0, r4
 8001bae:	4629      	mov	r1, r5
 8001bb0:	f7fe fb6a 	bl	8000288 <__aeabi_dsub>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	460c      	mov	r4, r1
 8001bb8:	4618      	mov	r0, r3
 8001bba:	4621      	mov	r1, r4
 8001bbc:	f7fe fff4 	bl	8000ba8 <__aeabi_d2f>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <Read_Compass+0x394>)
 8001bc4:	601a      	str	r2, [r3, #0]

	comY = ((float)compassY * cos((gyro_x_angle + 2.00) * 0.0174533)) + ((float)compassZ * sin((gyro_x_angle + 2.00) * 0.0174533));
 8001bc6:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <Read_Compass+0x368>)
 8001bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bcc:	ee07 3a90 	vmov	s15, r3
 8001bd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bd4:	ee17 0a90 	vmov	r0, s15
 8001bd8:	f7fe fcb6 	bl	8000548 <__aeabi_f2d>
 8001bdc:	4604      	mov	r4, r0
 8001bde:	460d      	mov	r5, r1
 8001be0:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <Read_Compass+0x390>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe fcaf 	bl	8000548 <__aeabi_f2d>
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bf2:	f7fe fb4b 	bl	800028c <__adddf3>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	e021      	b.n	8001c40 <Read_Compass+0x398>
 8001bfc:	f3af 8000 	nop.w
 8001c00:	22d4405f 	.word	0x22d4405f
 8001c04:	3f91df47 	.word	0x3f91df47
 8001c08:	20000368 	.word	0x20000368
 8001c0c:	20000dd8 	.word	0x20000dd8
 8001c10:	20000378 	.word	0x20000378
 8001c14:	200003a2 	.word	0x200003a2
 8001c18:	200003a4 	.word	0x200003a4
 8001c1c:	20000268 	.word	0x20000268
 8001c20:	20000374 	.word	0x20000374
 8001c24:	2000026c 	.word	0x2000026c
 8001c28:	20000370 	.word	0x20000370
 8001c2c:	20000264 	.word	0x20000264
 8001c30:	20000fb4 	.word	0x20000fb4
 8001c34:	40080000 	.word	0x40080000
 8001c38:	20000fa8 	.word	0x20000fa8
 8001c3c:	2000025c 	.word	0x2000025c
 8001c40:	4610      	mov	r0, r2
 8001c42:	4619      	mov	r1, r3
 8001c44:	a378      	add	r3, pc, #480	; (adr r3, 8001e28 <Read_Compass+0x580>)
 8001c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4a:	f7fe fcd5 	bl	80005f8 <__aeabi_dmul>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	ec43 2b17 	vmov	d7, r2, r3
 8001c56:	eeb0 0a47 	vmov.f32	s0, s14
 8001c5a:	eef0 0a67 	vmov.f32	s1, s15
 8001c5e:	f00e ff7b 	bl	8010b58 <cos>
 8001c62:	ec53 2b10 	vmov	r2, r3, d0
 8001c66:	4620      	mov	r0, r4
 8001c68:	4629      	mov	r1, r5
 8001c6a:	f7fe fcc5 	bl	80005f8 <__aeabi_dmul>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	460c      	mov	r4, r1
 8001c72:	4625      	mov	r5, r4
 8001c74:	461c      	mov	r4, r3
 8001c76:	4b70      	ldr	r3, [pc, #448]	; (8001e38 <Read_Compass+0x590>)
 8001c78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c7c:	ee07 3a90 	vmov	s15, r3
 8001c80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c84:	ee17 0a90 	vmov	r0, s15
 8001c88:	f7fe fc5e 	bl	8000548 <__aeabi_f2d>
 8001c8c:	4680      	mov	r8, r0
 8001c8e:	4689      	mov	r9, r1
 8001c90:	4b6a      	ldr	r3, [pc, #424]	; (8001e3c <Read_Compass+0x594>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fc57 	bl	8000548 <__aeabi_f2d>
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ca2:	f7fe faf3 	bl	800028c <__adddf3>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4610      	mov	r0, r2
 8001cac:	4619      	mov	r1, r3
 8001cae:	a35e      	add	r3, pc, #376	; (adr r3, 8001e28 <Read_Compass+0x580>)
 8001cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb4:	f7fe fca0 	bl	80005f8 <__aeabi_dmul>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	ec43 2b17 	vmov	d7, r2, r3
 8001cc0:	eeb0 0a47 	vmov.f32	s0, s14
 8001cc4:	eef0 0a67 	vmov.f32	s1, s15
 8001cc8:	f00e ffd6 	bl	8010c78 <sin>
 8001ccc:	ec53 2b10 	vmov	r2, r3, d0
 8001cd0:	4640      	mov	r0, r8
 8001cd2:	4649      	mov	r1, r9
 8001cd4:	f7fe fc90 	bl	80005f8 <__aeabi_dmul>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4620      	mov	r0, r4
 8001cde:	4629      	mov	r1, r5
 8001ce0:	f7fe fad4 	bl	800028c <__adddf3>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	460c      	mov	r4, r1
 8001ce8:	4618      	mov	r0, r3
 8001cea:	4621      	mov	r1, r4
 8001cec:	f7fe ff5c 	bl	8000ba8 <__aeabi_d2f>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	4b53      	ldr	r3, [pc, #332]	; (8001e40 <Read_Compass+0x598>)
 8001cf4:	601a      	str	r2, [r3, #0]

	if (comY < 0)
 8001cf6:	4b52      	ldr	r3, [pc, #328]	; (8001e40 <Read_Compass+0x598>)
 8001cf8:	edd3 7a00 	vldr	s15, [r3]
 8001cfc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d04:	d531      	bpl.n	8001d6a <Read_Compass+0x4c2>
		compass_heading = 180 + (180 + ((atan2f((float)comY, (float)comX)) * 57.29577));
 8001d06:	4b4e      	ldr	r3, [pc, #312]	; (8001e40 <Read_Compass+0x598>)
 8001d08:	edd3 7a00 	vldr	s15, [r3]
 8001d0c:	4b4d      	ldr	r3, [pc, #308]	; (8001e44 <Read_Compass+0x59c>)
 8001d0e:	ed93 7a00 	vldr	s14, [r3]
 8001d12:	eef0 0a47 	vmov.f32	s1, s14
 8001d16:	eeb0 0a67 	vmov.f32	s0, s15
 8001d1a:	f00f fa17 	bl	801114c <atan2f>
 8001d1e:	ee10 3a10 	vmov	r3, s0
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe fc10 	bl	8000548 <__aeabi_f2d>
 8001d28:	a341      	add	r3, pc, #260	; (adr r3, 8001e30 <Read_Compass+0x588>)
 8001d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2e:	f7fe fc63 	bl	80005f8 <__aeabi_dmul>
 8001d32:	4603      	mov	r3, r0
 8001d34:	460c      	mov	r4, r1
 8001d36:	4618      	mov	r0, r3
 8001d38:	4621      	mov	r1, r4
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	4b42      	ldr	r3, [pc, #264]	; (8001e48 <Read_Compass+0x5a0>)
 8001d40:	f7fe faa4 	bl	800028c <__adddf3>
 8001d44:	4603      	mov	r3, r0
 8001d46:	460c      	mov	r4, r1
 8001d48:	4618      	mov	r0, r3
 8001d4a:	4621      	mov	r1, r4
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	4b3d      	ldr	r3, [pc, #244]	; (8001e48 <Read_Compass+0x5a0>)
 8001d52:	f7fe fa9b 	bl	800028c <__adddf3>
 8001d56:	4603      	mov	r3, r0
 8001d58:	460c      	mov	r4, r1
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	4621      	mov	r1, r4
 8001d5e:	f7fe ff23 	bl	8000ba8 <__aeabi_d2f>
 8001d62:	4602      	mov	r2, r0
 8001d64:	4b39      	ldr	r3, [pc, #228]	; (8001e4c <Read_Compass+0x5a4>)
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	e01e      	b.n	8001da8 <Read_Compass+0x500>
	else
		compass_heading = atan2f((float)comY, (float)comX) * 57.29577;
 8001d6a:	4b35      	ldr	r3, [pc, #212]	; (8001e40 <Read_Compass+0x598>)
 8001d6c:	edd3 7a00 	vldr	s15, [r3]
 8001d70:	4b34      	ldr	r3, [pc, #208]	; (8001e44 <Read_Compass+0x59c>)
 8001d72:	ed93 7a00 	vldr	s14, [r3]
 8001d76:	eef0 0a47 	vmov.f32	s1, s14
 8001d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d7e:	f00f f9e5 	bl	801114c <atan2f>
 8001d82:	ee10 3a10 	vmov	r3, s0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fbde 	bl	8000548 <__aeabi_f2d>
 8001d8c:	a328      	add	r3, pc, #160	; (adr r3, 8001e30 <Read_Compass+0x588>)
 8001d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d92:	f7fe fc31 	bl	80005f8 <__aeabi_dmul>
 8001d96:	4603      	mov	r3, r0
 8001d98:	460c      	mov	r4, r1
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	4621      	mov	r1, r4
 8001d9e:	f7fe ff03 	bl	8000ba8 <__aeabi_d2f>
 8001da2:	4602      	mov	r2, r0
 8001da4:	4b29      	ldr	r3, [pc, #164]	; (8001e4c <Read_Compass+0x5a4>)
 8001da6:	601a      	str	r2, [r3, #0]

	compass_heading = -compass_heading;
 8001da8:	4b28      	ldr	r3, [pc, #160]	; (8001e4c <Read_Compass+0x5a4>)
 8001daa:	edd3 7a00 	vldr	s15, [r3]
 8001dae:	eef1 7a67 	vneg.f32	s15, s15
 8001db2:	4b26      	ldr	r3, [pc, #152]	; (8001e4c <Read_Compass+0x5a4>)
 8001db4:	edc3 7a00 	vstr	s15, [r3]
	compass_heading -= 5;
 8001db8:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <Read_Compass+0x5a4>)
 8001dba:	edd3 7a00 	vldr	s15, [r3]
 8001dbe:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001dc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001dc6:	4b21      	ldr	r3, [pc, #132]	; (8001e4c <Read_Compass+0x5a4>)
 8001dc8:	edc3 7a00 	vstr	s15, [r3]

	if (compass_heading < 0)
 8001dcc:	4b1f      	ldr	r3, [pc, #124]	; (8001e4c <Read_Compass+0x5a4>)
 8001dce:	edd3 7a00 	vldr	s15, [r3]
 8001dd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dda:	d50a      	bpl.n	8001df2 <Read_Compass+0x54a>
		compass_heading += 360;
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <Read_Compass+0x5a4>)
 8001dde:	edd3 7a00 	vldr	s15, [r3]
 8001de2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001e50 <Read_Compass+0x5a8>
 8001de6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dea:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <Read_Compass+0x5a4>)
 8001dec:	edc3 7a00 	vstr	s15, [r3]
	else if (compass_heading >= 360)
		compass_heading -= 360;
}
 8001df0:	e014      	b.n	8001e1c <Read_Compass+0x574>
	else if (compass_heading >= 360)
 8001df2:	4b16      	ldr	r3, [pc, #88]	; (8001e4c <Read_Compass+0x5a4>)
 8001df4:	edd3 7a00 	vldr	s15, [r3]
 8001df8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001e50 <Read_Compass+0x5a8>
 8001dfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e04:	da00      	bge.n	8001e08 <Read_Compass+0x560>
}
 8001e06:	e009      	b.n	8001e1c <Read_Compass+0x574>
		compass_heading -= 360;
 8001e08:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <Read_Compass+0x5a4>)
 8001e0a:	edd3 7a00 	vldr	s15, [r3]
 8001e0e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001e50 <Read_Compass+0x5a8>
 8001e12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e16:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <Read_Compass+0x5a4>)
 8001e18:	edc3 7a00 	vstr	s15, [r3]
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e24:	f3af 8000 	nop.w
 8001e28:	22d4405f 	.word	0x22d4405f
 8001e2c:	3f91df47 	.word	0x3f91df47
 8001e30:	ca9691a7 	.word	0xca9691a7
 8001e34:	404ca5db 	.word	0x404ca5db
 8001e38:	200003a2 	.word	0x200003a2
 8001e3c:	20000fa8 	.word	0x20000fa8
 8001e40:	20000260 	.word	0x20000260
 8001e44:	2000025c 	.word	0x2000025c
 8001e48:	40668000 	.word	0x40668000
 8001e4c:	20000258 	.word	0x20000258
 8001e50:	43b40000 	.word	0x43b40000

08001e54 <Calibrate_Compass>:

void Calibrate_Compass()
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af04      	add	r7, sp, #16
	compass_x_min = 0;
 8001e5a:	4b67      	ldr	r3, [pc, #412]	; (8001ff8 <Calibrate_Compass+0x1a4>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	801a      	strh	r2, [r3, #0]
	compass_x_max = 0;
 8001e60:	4b66      	ldr	r3, [pc, #408]	; (8001ffc <Calibrate_Compass+0x1a8>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	801a      	strh	r2, [r3, #0]
	compass_y_min = 0;
 8001e66:	4b66      	ldr	r3, [pc, #408]	; (8002000 <Calibrate_Compass+0x1ac>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	801a      	strh	r2, [r3, #0]
	compass_y_max = 0;
 8001e6c:	4b65      	ldr	r3, [pc, #404]	; (8002004 <Calibrate_Compass+0x1b0>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	801a      	strh	r2, [r3, #0]
	compass_z_min = 0;
 8001e72:	4b65      	ldr	r3, [pc, #404]	; (8002008 <Calibrate_Compass+0x1b4>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	801a      	strh	r2, [r3, #0]
	compass_z_max = 0;
 8001e78:	4b64      	ldr	r3, [pc, #400]	; (800200c <Calibrate_Compass+0x1b8>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	801a      	strh	r2, [r3, #0]

	calibrate_compass_timer = GetMillis();
 8001e7e:	f002 fe6d 	bl	8004b5c <GetMillis>
 8001e82:	4602      	mov	r2, r0
 8001e84:	4b62      	ldr	r3, [pc, #392]	; (8002010 <Calibrate_Compass+0x1bc>)
 8001e86:	601a      	str	r2, [r3, #0]

	while(GetMillisDifference(&calibrate_compass_timer) < 8000)
 8001e88:	e082      	b.n	8001f90 <Calibrate_Compass+0x13c>
	{
		HAL_I2C_Mem_Read(&hi2c1, COMPASS_ADDR, 0x03, I2C_MEMADD_SIZE_8BIT,  (uint8_t *)&raw_compass_data, 6, HAL_MAX_DELAY);
 8001e8a:	233c      	movs	r3, #60	; 0x3c
 8001e8c:	b299      	uxth	r1, r3
 8001e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e92:	9302      	str	r3, [sp, #8]
 8001e94:	2306      	movs	r3, #6
 8001e96:	9301      	str	r3, [sp, #4]
 8001e98:	4b5e      	ldr	r3, [pc, #376]	; (8002014 <Calibrate_Compass+0x1c0>)
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	485d      	ldr	r0, [pc, #372]	; (8002018 <Calibrate_Compass+0x1c4>)
 8001ea2:	f005 f9af 	bl	8007204 <HAL_I2C_Mem_Read>

		compassY = (int16_t)((raw_compass_data[0] << 8) | raw_compass_data[1]);
 8001ea6:	4b5b      	ldr	r3, [pc, #364]	; (8002014 <Calibrate_Compass+0x1c0>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	021b      	lsls	r3, r3, #8
 8001eac:	b21a      	sxth	r2, r3
 8001eae:	4b59      	ldr	r3, [pc, #356]	; (8002014 <Calibrate_Compass+0x1c0>)
 8001eb0:	785b      	ldrb	r3, [r3, #1]
 8001eb2:	b21b      	sxth	r3, r3
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	b21a      	sxth	r2, r3
 8001eb8:	4b58      	ldr	r3, [pc, #352]	; (800201c <Calibrate_Compass+0x1c8>)
 8001eba:	801a      	strh	r2, [r3, #0]
		compassZ = (int16_t)((raw_compass_data[2] << 8) | raw_compass_data[3]);
 8001ebc:	4b55      	ldr	r3, [pc, #340]	; (8002014 <Calibrate_Compass+0x1c0>)
 8001ebe:	789b      	ldrb	r3, [r3, #2]
 8001ec0:	021b      	lsls	r3, r3, #8
 8001ec2:	b21a      	sxth	r2, r3
 8001ec4:	4b53      	ldr	r3, [pc, #332]	; (8002014 <Calibrate_Compass+0x1c0>)
 8001ec6:	78db      	ldrb	r3, [r3, #3]
 8001ec8:	b21b      	sxth	r3, r3
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	b21a      	sxth	r2, r3
 8001ece:	4b54      	ldr	r3, [pc, #336]	; (8002020 <Calibrate_Compass+0x1cc>)
 8001ed0:	801a      	strh	r2, [r3, #0]
		compassX = (int16_t)((raw_compass_data[4] << 8) | raw_compass_data[5]);
 8001ed2:	4b50      	ldr	r3, [pc, #320]	; (8002014 <Calibrate_Compass+0x1c0>)
 8001ed4:	791b      	ldrb	r3, [r3, #4]
 8001ed6:	021b      	lsls	r3, r3, #8
 8001ed8:	b21a      	sxth	r2, r3
 8001eda:	4b4e      	ldr	r3, [pc, #312]	; (8002014 <Calibrate_Compass+0x1c0>)
 8001edc:	795b      	ldrb	r3, [r3, #5]
 8001ede:	b21b      	sxth	r3, r3
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	b21a      	sxth	r2, r3
 8001ee4:	4b4f      	ldr	r3, [pc, #316]	; (8002024 <Calibrate_Compass+0x1d0>)
 8001ee6:	801a      	strh	r2, [r3, #0]

		if (compassX > compass_x_max)
 8001ee8:	4b4e      	ldr	r3, [pc, #312]	; (8002024 <Calibrate_Compass+0x1d0>)
 8001eea:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001eee:	4b43      	ldr	r3, [pc, #268]	; (8001ffc <Calibrate_Compass+0x1a8>)
 8001ef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	dd05      	ble.n	8001f04 <Calibrate_Compass+0xb0>
			compass_x_max = compassX;
 8001ef8:	4b4a      	ldr	r3, [pc, #296]	; (8002024 <Calibrate_Compass+0x1d0>)
 8001efa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001efe:	4b3f      	ldr	r3, [pc, #252]	; (8001ffc <Calibrate_Compass+0x1a8>)
 8001f00:	801a      	strh	r2, [r3, #0]
 8001f02:	e00c      	b.n	8001f1e <Calibrate_Compass+0xca>
		else if (compassX < compass_x_min)
 8001f04:	4b47      	ldr	r3, [pc, #284]	; (8002024 <Calibrate_Compass+0x1d0>)
 8001f06:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f0a:	4b3b      	ldr	r3, [pc, #236]	; (8001ff8 <Calibrate_Compass+0x1a4>)
 8001f0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	da04      	bge.n	8001f1e <Calibrate_Compass+0xca>
			compass_x_min = compassX;
 8001f14:	4b43      	ldr	r3, [pc, #268]	; (8002024 <Calibrate_Compass+0x1d0>)
 8001f16:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f1a:	4b37      	ldr	r3, [pc, #220]	; (8001ff8 <Calibrate_Compass+0x1a4>)
 8001f1c:	801a      	strh	r2, [r3, #0]

		if (compassZ > compass_z_max)
 8001f1e:	4b40      	ldr	r3, [pc, #256]	; (8002020 <Calibrate_Compass+0x1cc>)
 8001f20:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f24:	4b39      	ldr	r3, [pc, #228]	; (800200c <Calibrate_Compass+0x1b8>)
 8001f26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	dd05      	ble.n	8001f3a <Calibrate_Compass+0xe6>
			compass_z_max = compassZ;
 8001f2e:	4b3c      	ldr	r3, [pc, #240]	; (8002020 <Calibrate_Compass+0x1cc>)
 8001f30:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f34:	4b35      	ldr	r3, [pc, #212]	; (800200c <Calibrate_Compass+0x1b8>)
 8001f36:	801a      	strh	r2, [r3, #0]
 8001f38:	e00c      	b.n	8001f54 <Calibrate_Compass+0x100>
		else if (compassZ < compass_z_min)
 8001f3a:	4b39      	ldr	r3, [pc, #228]	; (8002020 <Calibrate_Compass+0x1cc>)
 8001f3c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f40:	4b31      	ldr	r3, [pc, #196]	; (8002008 <Calibrate_Compass+0x1b4>)
 8001f42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	da04      	bge.n	8001f54 <Calibrate_Compass+0x100>
			compass_z_min = compassZ;
 8001f4a:	4b35      	ldr	r3, [pc, #212]	; (8002020 <Calibrate_Compass+0x1cc>)
 8001f4c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f50:	4b2d      	ldr	r3, [pc, #180]	; (8002008 <Calibrate_Compass+0x1b4>)
 8001f52:	801a      	strh	r2, [r3, #0]

		if (compassY > compass_y_max)
 8001f54:	4b31      	ldr	r3, [pc, #196]	; (800201c <Calibrate_Compass+0x1c8>)
 8001f56:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f5a:	4b2a      	ldr	r3, [pc, #168]	; (8002004 <Calibrate_Compass+0x1b0>)
 8001f5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	dd05      	ble.n	8001f70 <Calibrate_Compass+0x11c>
			compass_y_max = compassY;
 8001f64:	4b2d      	ldr	r3, [pc, #180]	; (800201c <Calibrate_Compass+0x1c8>)
 8001f66:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f6a:	4b26      	ldr	r3, [pc, #152]	; (8002004 <Calibrate_Compass+0x1b0>)
 8001f6c:	801a      	strh	r2, [r3, #0]
 8001f6e:	e00c      	b.n	8001f8a <Calibrate_Compass+0x136>
		else if (compassY < compass_y_min)
 8001f70:	4b2a      	ldr	r3, [pc, #168]	; (800201c <Calibrate_Compass+0x1c8>)
 8001f72:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f76:	4b22      	ldr	r3, [pc, #136]	; (8002000 <Calibrate_Compass+0x1ac>)
 8001f78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	da04      	bge.n	8001f8a <Calibrate_Compass+0x136>
			compass_y_min = compassY;
 8001f80:	4b26      	ldr	r3, [pc, #152]	; (800201c <Calibrate_Compass+0x1c8>)
 8001f82:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f86:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <Calibrate_Compass+0x1ac>)
 8001f88:	801a      	strh	r2, [r3, #0]

		HAL_Delay(5);
 8001f8a:	2005      	movs	r0, #5
 8001f8c:	f004 f8d2 	bl	8006134 <HAL_Delay>
	while(GetMillisDifference(&calibrate_compass_timer) < 8000)
 8001f90:	481f      	ldr	r0, [pc, #124]	; (8002010 <Calibrate_Compass+0x1bc>)
 8001f92:	f002 fdf5 	bl	8004b80 <GetMillisDifference>
 8001f96:	4603      	mov	r3, r0
 8001f98:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001f9c:	f4ff af75 	bcc.w	8001e8a <Calibrate_Compass+0x36>
	}

	EEPROM_Clear_Buffer();
 8001fa0:	f001 fc96 	bl	80038d0 <EEPROM_Clear_Buffer>
	eeprom_write_buffer_width = 2;
 8001fa4:	4b20      	ldr	r3, [pc, #128]	; (8002028 <Calibrate_Compass+0x1d4>)
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	701a      	strb	r2, [r3, #0]
	EEPROM_Write_Buffer((uint8_t *)&compass_x_min, 2);
 8001faa:	2102      	movs	r1, #2
 8001fac:	4812      	ldr	r0, [pc, #72]	; (8001ff8 <Calibrate_Compass+0x1a4>)
 8001fae:	f001 fcef 	bl	8003990 <EEPROM_Write_Buffer>
	EEPROM_Write_Buffer((uint8_t *)&compass_x_max, 2);
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	4811      	ldr	r0, [pc, #68]	; (8001ffc <Calibrate_Compass+0x1a8>)
 8001fb6:	f001 fceb 	bl	8003990 <EEPROM_Write_Buffer>
	EEPROM_Write_Buffer((uint8_t *)&compass_y_min, 2);
 8001fba:	2102      	movs	r1, #2
 8001fbc:	4810      	ldr	r0, [pc, #64]	; (8002000 <Calibrate_Compass+0x1ac>)
 8001fbe:	f001 fce7 	bl	8003990 <EEPROM_Write_Buffer>
	EEPROM_Write_Buffer((uint8_t *)&compass_y_max, 2);
 8001fc2:	2102      	movs	r1, #2
 8001fc4:	480f      	ldr	r0, [pc, #60]	; (8002004 <Calibrate_Compass+0x1b0>)
 8001fc6:	f001 fce3 	bl	8003990 <EEPROM_Write_Buffer>
	EEPROM_Write_Buffer((uint8_t *)&compass_z_min, 2);
 8001fca:	2102      	movs	r1, #2
 8001fcc:	480e      	ldr	r0, [pc, #56]	; (8002008 <Calibrate_Compass+0x1b4>)
 8001fce:	f001 fcdf 	bl	8003990 <EEPROM_Write_Buffer>
	EEPROM_Write_Buffer((uint8_t *)&compass_z_max, 2);
 8001fd2:	2102      	movs	r1, #2
 8001fd4:	480d      	ldr	r0, [pc, #52]	; (800200c <Calibrate_Compass+0x1b8>)
 8001fd6:	f001 fcdb 	bl	8003990 <EEPROM_Write_Buffer>
	EEPROM_Save_Page(64);
 8001fda:	2040      	movs	r0, #64	; 0x40
 8001fdc:	f001 fc92 	bl	8003904 <EEPROM_Save_Page>

	Calculate_Compass_Calibration();
 8001fe0:	f000 f828 	bl	8002034 <Calculate_Compass_Calibration>

	Read_Compass();
 8001fe4:	f7ff fc60 	bl	80018a8 <Read_Compass>

	gyro_z_angle = compass_heading;
 8001fe8:	4b10      	ldr	r3, [pc, #64]	; (800202c <Calibrate_Compass+0x1d8>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a10      	ldr	r2, [pc, #64]	; (8002030 <Calibrate_Compass+0x1dc>)
 8001fee:	6013      	str	r3, [r2, #0]
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	2000024c 	.word	0x2000024c
 8001ffc:	2000024e 	.word	0x2000024e
 8002000:	20000250 	.word	0x20000250
 8002004:	20000252 	.word	0x20000252
 8002008:	20000254 	.word	0x20000254
 800200c:	20000256 	.word	0x20000256
 8002010:	2000037c 	.word	0x2000037c
 8002014:	20000368 	.word	0x20000368
 8002018:	20000dd8 	.word	0x20000dd8
 800201c:	20000378 	.word	0x20000378
 8002020:	200003a2 	.word	0x200003a2
 8002024:	200003a4 	.word	0x200003a4
 8002028:	20000028 	.word	0x20000028
 800202c:	20000258 	.word	0x20000258
 8002030:	20000fd4 	.word	0x20000fd4

08002034 <Calculate_Compass_Calibration>:

void Calculate_Compass_Calibration()
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
    y_scale = (float)(compass_x_max - compass_x_min) / (float)(compass_y_max - compass_y_min);
 8002038:	4b4e      	ldr	r3, [pc, #312]	; (8002174 <Calculate_Compass_Calibration+0x140>)
 800203a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800203e:	461a      	mov	r2, r3
 8002040:	4b4d      	ldr	r3, [pc, #308]	; (8002178 <Calculate_Compass_Calibration+0x144>)
 8002042:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	ee07 3a90 	vmov	s15, r3
 800204c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002050:	4b4a      	ldr	r3, [pc, #296]	; (800217c <Calculate_Compass_Calibration+0x148>)
 8002052:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002056:	461a      	mov	r2, r3
 8002058:	4b49      	ldr	r3, [pc, #292]	; (8002180 <Calculate_Compass_Calibration+0x14c>)
 800205a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	ee07 3a90 	vmov	s15, r3
 8002064:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002068:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800206c:	4b45      	ldr	r3, [pc, #276]	; (8002184 <Calculate_Compass_Calibration+0x150>)
 800206e:	edc3 7a00 	vstr	s15, [r3]
    z_scale = (float)(compass_x_max - compass_x_min) / (float)(compass_z_max - compass_z_min);
 8002072:	4b40      	ldr	r3, [pc, #256]	; (8002174 <Calculate_Compass_Calibration+0x140>)
 8002074:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002078:	461a      	mov	r2, r3
 800207a:	4b3f      	ldr	r3, [pc, #252]	; (8002178 <Calculate_Compass_Calibration+0x144>)
 800207c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	ee07 3a90 	vmov	s15, r3
 8002086:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800208a:	4b3f      	ldr	r3, [pc, #252]	; (8002188 <Calculate_Compass_Calibration+0x154>)
 800208c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002090:	461a      	mov	r2, r3
 8002092:	4b3e      	ldr	r3, [pc, #248]	; (800218c <Calculate_Compass_Calibration+0x158>)
 8002094:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	ee07 3a90 	vmov	s15, r3
 800209e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020a6:	4b3a      	ldr	r3, [pc, #232]	; (8002190 <Calculate_Compass_Calibration+0x15c>)
 80020a8:	edc3 7a00 	vstr	s15, [r3]

    compass_offset_x = (float)(compass_x_max - compass_x_min) / 2 - compass_x_max;
 80020ac:	4b31      	ldr	r3, [pc, #196]	; (8002174 <Calculate_Compass_Calibration+0x140>)
 80020ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020b2:	461a      	mov	r2, r3
 80020b4:	4b30      	ldr	r3, [pc, #192]	; (8002178 <Calculate_Compass_Calibration+0x144>)
 80020b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	ee07 3a90 	vmov	s15, r3
 80020c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020c4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80020c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80020cc:	4b29      	ldr	r3, [pc, #164]	; (8002174 <Calculate_Compass_Calibration+0x140>)
 80020ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020d2:	ee07 3a90 	vmov	s15, r3
 80020d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020de:	4b2d      	ldr	r3, [pc, #180]	; (8002194 <Calculate_Compass_Calibration+0x160>)
 80020e0:	edc3 7a00 	vstr	s15, [r3]
    compass_offset_y = ((float)(compass_y_max - compass_y_min) / 2 - compass_y_max) * y_scale;
 80020e4:	4b25      	ldr	r3, [pc, #148]	; (800217c <Calculate_Compass_Calibration+0x148>)
 80020e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ea:	461a      	mov	r2, r3
 80020ec:	4b24      	ldr	r3, [pc, #144]	; (8002180 <Calculate_Compass_Calibration+0x14c>)
 80020ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	ee07 3a90 	vmov	s15, r3
 80020f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020fc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002100:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002104:	4b1d      	ldr	r3, [pc, #116]	; (800217c <Calculate_Compass_Calibration+0x148>)
 8002106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800210a:	ee07 3a90 	vmov	s15, r3
 800210e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002112:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002116:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <Calculate_Compass_Calibration+0x150>)
 8002118:	edd3 7a00 	vldr	s15, [r3]
 800211c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002120:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <Calculate_Compass_Calibration+0x164>)
 8002122:	edc3 7a00 	vstr	s15, [r3]
    compass_offset_z = ((float)(compass_z_max - compass_z_min) / 2 - compass_z_max) * z_scale;
 8002126:	4b18      	ldr	r3, [pc, #96]	; (8002188 <Calculate_Compass_Calibration+0x154>)
 8002128:	f9b3 3000 	ldrsh.w	r3, [r3]
 800212c:	461a      	mov	r2, r3
 800212e:	4b17      	ldr	r3, [pc, #92]	; (800218c <Calculate_Compass_Calibration+0x158>)
 8002130:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	ee07 3a90 	vmov	s15, r3
 800213a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800213e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002142:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002146:	4b10      	ldr	r3, [pc, #64]	; (8002188 <Calculate_Compass_Calibration+0x154>)
 8002148:	f9b3 3000 	ldrsh.w	r3, [r3]
 800214c:	ee07 3a90 	vmov	s15, r3
 8002150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002154:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002158:	4b0d      	ldr	r3, [pc, #52]	; (8002190 <Calculate_Compass_Calibration+0x15c>)
 800215a:	edd3 7a00 	vldr	s15, [r3]
 800215e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002162:	4b0e      	ldr	r3, [pc, #56]	; (800219c <Calculate_Compass_Calibration+0x168>)
 8002164:	edc3 7a00 	vstr	s15, [r3]
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	2000024e 	.word	0x2000024e
 8002178:	2000024c 	.word	0x2000024c
 800217c:	20000252 	.word	0x20000252
 8002180:	20000250 	.word	0x20000250
 8002184:	20000374 	.word	0x20000374
 8002188:	20000256 	.word	0x20000256
 800218c:	20000254 	.word	0x20000254
 8002190:	20000370 	.word	0x20000370
 8002194:	20000264 	.word	0x20000264
 8002198:	20000268 	.word	0x20000268
 800219c:	2000026c 	.word	0x2000026c

080021a0 <CalculateHeadingDifference>:

void CalculateHeadingDifference(float ang1, float ang2) //ang1 is setpoint, ang2 is current
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	ed87 0a01 	vstr	s0, [r7, #4]
 80021aa:	edc7 0a00 	vstr	s1, [r7]
    heading_difference_return = ang1 - ang2;
 80021ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80021b2:	edd7 7a00 	vldr	s15, [r7]
 80021b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021ba:	4b2d      	ldr	r3, [pc, #180]	; (8002270 <CalculateHeadingDifference+0xd0>)
 80021bc:	edc3 7a00 	vstr	s15, [r3]

    if (heading_difference_return < -180 || heading_difference_return > 180)
 80021c0:	4b2b      	ldr	r3, [pc, #172]	; (8002270 <CalculateHeadingDifference+0xd0>)
 80021c2:	edd3 7a00 	vldr	s15, [r3]
 80021c6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002274 <CalculateHeadingDifference+0xd4>
 80021ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d2:	d40a      	bmi.n	80021ea <CalculateHeadingDifference+0x4a>
 80021d4:	4b26      	ldr	r3, [pc, #152]	; (8002270 <CalculateHeadingDifference+0xd0>)
 80021d6:	edd3 7a00 	vldr	s15, [r3]
 80021da:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002278 <CalculateHeadingDifference+0xd8>
 80021de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e6:	dc00      	bgt.n	80021ea <CalculateHeadingDifference+0x4a>
        else
            ang1 += 180;

        heading_difference_return = ang1 - ang2;
    }
}
 80021e8:	e03c      	b.n	8002264 <CalculateHeadingDifference+0xc4>
        if (ang2 > 180)
 80021ea:	edd7 7a00 	vldr	s15, [r7]
 80021ee:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002278 <CalculateHeadingDifference+0xd8>
 80021f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021fa:	dd08      	ble.n	800220e <CalculateHeadingDifference+0x6e>
            ang2 -= 180;
 80021fc:	edd7 7a00 	vldr	s15, [r7]
 8002200:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002278 <CalculateHeadingDifference+0xd8>
 8002204:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002208:	edc7 7a00 	vstr	s15, [r7]
 800220c:	e007      	b.n	800221e <CalculateHeadingDifference+0x7e>
            ang2 += 180;
 800220e:	edd7 7a00 	vldr	s15, [r7]
 8002212:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002278 <CalculateHeadingDifference+0xd8>
 8002216:	ee77 7a87 	vadd.f32	s15, s15, s14
 800221a:	edc7 7a00 	vstr	s15, [r7]
        if (ang1 > 180)
 800221e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002222:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002278 <CalculateHeadingDifference+0xd8>
 8002226:	eef4 7ac7 	vcmpe.f32	s15, s14
 800222a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222e:	dd08      	ble.n	8002242 <CalculateHeadingDifference+0xa2>
            ang1 -= 180;
 8002230:	edd7 7a01 	vldr	s15, [r7, #4]
 8002234:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002278 <CalculateHeadingDifference+0xd8>
 8002238:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800223c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002240:	e007      	b.n	8002252 <CalculateHeadingDifference+0xb2>
            ang1 += 180;
 8002242:	edd7 7a01 	vldr	s15, [r7, #4]
 8002246:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002278 <CalculateHeadingDifference+0xd8>
 800224a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800224e:	edc7 7a01 	vstr	s15, [r7, #4]
        heading_difference_return = ang1 - ang2;
 8002252:	ed97 7a01 	vldr	s14, [r7, #4]
 8002256:	edd7 7a00 	vldr	s15, [r7]
 800225a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800225e:	4b04      	ldr	r3, [pc, #16]	; (8002270 <CalculateHeadingDifference+0xd0>)
 8002260:	edc3 7a00 	vstr	s15, [r3]
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	20000270 	.word	0x20000270
 8002274:	c3340000 	.word	0xc3340000
 8002278:	43340000 	.word	0x43340000
 800227c:	00000000 	.word	0x00000000

08002280 <Calculate_Attitude>:
float pid_error_temp;
float pid_roll_last_error, pid_pitch_last_error, pid_yaw_last_error;
int32_t max_motor_pid_output = 45;

void Calculate_Attitude()
{
 8002280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002284:	af00      	add	r7, sp, #0
	gyro_x = (float)raw_gyro_acc_data[0] / 65.5;
 8002286:	4bd6      	ldr	r3, [pc, #856]	; (80025e0 <Calculate_Attitude+0x360>)
 8002288:	f9b3 3000 	ldrsh.w	r3, [r3]
 800228c:	ee07 3a90 	vmov	s15, r3
 8002290:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002294:	eddf 6ad3 	vldr	s13, [pc, #844]	; 80025e4 <Calculate_Attitude+0x364>
 8002298:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800229c:	4bd2      	ldr	r3, [pc, #840]	; (80025e8 <Calculate_Attitude+0x368>)
 800229e:	edc3 7a00 	vstr	s15, [r3]
	gyro_y = (float)raw_gyro_acc_data[1] / -65.5;
 80022a2:	4bcf      	ldr	r3, [pc, #828]	; (80025e0 <Calculate_Attitude+0x360>)
 80022a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80022a8:	ee07 3a90 	vmov	s15, r3
 80022ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022b0:	eddf 6ace 	vldr	s13, [pc, #824]	; 80025ec <Calculate_Attitude+0x36c>
 80022b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022b8:	4bcd      	ldr	r3, [pc, #820]	; (80025f0 <Calculate_Attitude+0x370>)
 80022ba:	edc3 7a00 	vstr	s15, [r3]
	gyro_z = (float)raw_gyro_acc_data[2] / -65.5;
 80022be:	4bc8      	ldr	r3, [pc, #800]	; (80025e0 <Calculate_Attitude+0x360>)
 80022c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80022c4:	ee07 3a90 	vmov	s15, r3
 80022c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022cc:	eddf 6ac7 	vldr	s13, [pc, #796]	; 80025ec <Calculate_Attitude+0x36c>
 80022d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022d4:	4bc7      	ldr	r3, [pc, #796]	; (80025f4 <Calculate_Attitude+0x374>)
 80022d6:	edc3 7a00 	vstr	s15, [r3]

	acc_magnitude = sqrt(((float)raw_gyro_acc_data[3] * (float)raw_gyro_acc_data[3]) + ((float)raw_gyro_acc_data[4] * (float)raw_gyro_acc_data[4]) + ((float)raw_gyro_acc_data[5] * (float)raw_gyro_acc_data[5]));
 80022da:	4bc1      	ldr	r3, [pc, #772]	; (80025e0 <Calculate_Attitude+0x360>)
 80022dc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80022e0:	ee07 3a90 	vmov	s15, r3
 80022e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022e8:	4bbd      	ldr	r3, [pc, #756]	; (80025e0 <Calculate_Attitude+0x360>)
 80022ea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80022ee:	ee07 3a90 	vmov	s15, r3
 80022f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022fa:	4bb9      	ldr	r3, [pc, #740]	; (80025e0 <Calculate_Attitude+0x360>)
 80022fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002300:	ee07 3a90 	vmov	s15, r3
 8002304:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002308:	4bb5      	ldr	r3, [pc, #724]	; (80025e0 <Calculate_Attitude+0x360>)
 800230a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800230e:	ee07 3a90 	vmov	s15, r3
 8002312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002316:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800231a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800231e:	4bb0      	ldr	r3, [pc, #704]	; (80025e0 <Calculate_Attitude+0x360>)
 8002320:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002324:	ee07 3a90 	vmov	s15, r3
 8002328:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800232c:	4bac      	ldr	r3, [pc, #688]	; (80025e0 <Calculate_Attitude+0x360>)
 800232e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002332:	ee07 3a90 	vmov	s15, r3
 8002336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800233a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800233e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002342:	ee17 0a90 	vmov	r0, s15
 8002346:	f7fe f8ff 	bl	8000548 <__aeabi_f2d>
 800234a:	4603      	mov	r3, r0
 800234c:	460c      	mov	r4, r1
 800234e:	ec44 3b10 	vmov	d0, r3, r4
 8002352:	f00e fea1 	bl	8011098 <sqrt>
 8002356:	ec54 3b10 	vmov	r3, r4, d0
 800235a:	4618      	mov	r0, r3
 800235c:	4621      	mov	r1, r4
 800235e:	f7fe fc23 	bl	8000ba8 <__aeabi_d2f>
 8002362:	4602      	mov	r2, r0
 8002364:	4ba4      	ldr	r3, [pc, #656]	; (80025f8 <Calculate_Attitude+0x378>)
 8002366:	601a      	str	r2, [r3, #0]

	if(acc_magnitude != 0)
 8002368:	4ba3      	ldr	r3, [pc, #652]	; (80025f8 <Calculate_Attitude+0x378>)
 800236a:	edd3 7a00 	vldr	s15, [r3]
 800236e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002376:	d06f      	beq.n	8002458 <Calculate_Attitude+0x1d8>
	{
		if(abs(raw_gyro_acc_data[4]) < acc_magnitude)
 8002378:	4b99      	ldr	r3, [pc, #612]	; (80025e0 <Calculate_Attitude+0x360>)
 800237a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	bfb8      	it	lt
 8002382:	425b      	neglt	r3, r3
 8002384:	ee07 3a90 	vmov	s15, r3
 8002388:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800238c:	4b9a      	ldr	r3, [pc, #616]	; (80025f8 <Calculate_Attitude+0x378>)
 800238e:	edd3 7a00 	vldr	s15, [r3]
 8002392:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800239a:	d525      	bpl.n	80023e8 <Calculate_Attitude+0x168>
		{
			acc_x = asin((float)raw_gyro_acc_data[4] / acc_magnitude) * 57.296;
 800239c:	4b90      	ldr	r3, [pc, #576]	; (80025e0 <Calculate_Attitude+0x360>)
 800239e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80023a2:	ee07 3a90 	vmov	s15, r3
 80023a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023aa:	4b93      	ldr	r3, [pc, #588]	; (80025f8 <Calculate_Attitude+0x378>)
 80023ac:	edd3 7a00 	vldr	s15, [r3]
 80023b0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80023b4:	ee16 0a90 	vmov	r0, s13
 80023b8:	f7fe f8c6 	bl	8000548 <__aeabi_f2d>
 80023bc:	4603      	mov	r3, r0
 80023be:	460c      	mov	r4, r1
 80023c0:	ec44 3b10 	vmov	d0, r3, r4
 80023c4:	f00e fca0 	bl	8010d08 <asin>
 80023c8:	ec51 0b10 	vmov	r0, r1, d0
 80023cc:	a380      	add	r3, pc, #512	; (adr r3, 80025d0 <Calculate_Attitude+0x350>)
 80023ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d2:	f7fe f911 	bl	80005f8 <__aeabi_dmul>
 80023d6:	4603      	mov	r3, r0
 80023d8:	460c      	mov	r4, r1
 80023da:	4618      	mov	r0, r3
 80023dc:	4621      	mov	r1, r4
 80023de:	f7fe fbe3 	bl	8000ba8 <__aeabi_d2f>
 80023e2:	4602      	mov	r2, r0
 80023e4:	4b85      	ldr	r3, [pc, #532]	; (80025fc <Calculate_Attitude+0x37c>)
 80023e6:	601a      	str	r2, [r3, #0]
		}

		if(abs(raw_gyro_acc_data[3]) < acc_magnitude)
 80023e8:	4b7d      	ldr	r3, [pc, #500]	; (80025e0 <Calculate_Attitude+0x360>)
 80023ea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	bfb8      	it	lt
 80023f2:	425b      	neglt	r3, r3
 80023f4:	ee07 3a90 	vmov	s15, r3
 80023f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023fc:	4b7e      	ldr	r3, [pc, #504]	; (80025f8 <Calculate_Attitude+0x378>)
 80023fe:	edd3 7a00 	vldr	s15, [r3]
 8002402:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800240a:	d525      	bpl.n	8002458 <Calculate_Attitude+0x1d8>
		{
			acc_y = asin((float)raw_gyro_acc_data[3] / acc_magnitude) * 57.296;
 800240c:	4b74      	ldr	r3, [pc, #464]	; (80025e0 <Calculate_Attitude+0x360>)
 800240e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002412:	ee07 3a90 	vmov	s15, r3
 8002416:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800241a:	4b77      	ldr	r3, [pc, #476]	; (80025f8 <Calculate_Attitude+0x378>)
 800241c:	edd3 7a00 	vldr	s15, [r3]
 8002420:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002424:	ee16 0a90 	vmov	r0, s13
 8002428:	f7fe f88e 	bl	8000548 <__aeabi_f2d>
 800242c:	4603      	mov	r3, r0
 800242e:	460c      	mov	r4, r1
 8002430:	ec44 3b10 	vmov	d0, r3, r4
 8002434:	f00e fc68 	bl	8010d08 <asin>
 8002438:	ec51 0b10 	vmov	r0, r1, d0
 800243c:	a364      	add	r3, pc, #400	; (adr r3, 80025d0 <Calculate_Attitude+0x350>)
 800243e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002442:	f7fe f8d9 	bl	80005f8 <__aeabi_dmul>
 8002446:	4603      	mov	r3, r0
 8002448:	460c      	mov	r4, r1
 800244a:	4618      	mov	r0, r3
 800244c:	4621      	mov	r1, r4
 800244e:	f7fe fbab 	bl	8000ba8 <__aeabi_d2f>
 8002452:	4602      	mov	r2, r0
 8002454:	4b6a      	ldr	r3, [pc, #424]	; (8002600 <Calculate_Attitude+0x380>)
 8002456:	601a      	str	r2, [r3, #0]
		}
	}

	gyro_x_angle += (gyro_x) * ((float)how_long_to_loop_main / 1000000);
 8002458:	4b6a      	ldr	r3, [pc, #424]	; (8002604 <Calculate_Attitude+0x384>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	ee07 3a90 	vmov	s15, r3
 8002460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002464:	eddf 6a68 	vldr	s13, [pc, #416]	; 8002608 <Calculate_Attitude+0x388>
 8002468:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800246c:	4b5e      	ldr	r3, [pc, #376]	; (80025e8 <Calculate_Attitude+0x368>)
 800246e:	edd3 7a00 	vldr	s15, [r3]
 8002472:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002476:	4b65      	ldr	r3, [pc, #404]	; (800260c <Calculate_Attitude+0x38c>)
 8002478:	edd3 7a00 	vldr	s15, [r3]
 800247c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002480:	4b62      	ldr	r3, [pc, #392]	; (800260c <Calculate_Attitude+0x38c>)
 8002482:	edc3 7a00 	vstr	s15, [r3]
	gyro_y_angle += (gyro_y) * ((float)how_long_to_loop_main / 1000000);
 8002486:	4b5f      	ldr	r3, [pc, #380]	; (8002604 <Calculate_Attitude+0x384>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	ee07 3a90 	vmov	s15, r3
 800248e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002492:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8002608 <Calculate_Attitude+0x388>
 8002496:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800249a:	4b55      	ldr	r3, [pc, #340]	; (80025f0 <Calculate_Attitude+0x370>)
 800249c:	edd3 7a00 	vldr	s15, [r3]
 80024a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024a4:	4b5a      	ldr	r3, [pc, #360]	; (8002610 <Calculate_Attitude+0x390>)
 80024a6:	edd3 7a00 	vldr	s15, [r3]
 80024aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ae:	4b58      	ldr	r3, [pc, #352]	; (8002610 <Calculate_Attitude+0x390>)
 80024b0:	edc3 7a00 	vstr	s15, [r3]
	gyro_z_angle += (gyro_z) * ((float)how_long_to_loop_main / 1000000);
 80024b4:	4b53      	ldr	r3, [pc, #332]	; (8002604 <Calculate_Attitude+0x384>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	ee07 3a90 	vmov	s15, r3
 80024bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024c0:	eddf 6a51 	vldr	s13, [pc, #324]	; 8002608 <Calculate_Attitude+0x388>
 80024c4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024c8:	4b4a      	ldr	r3, [pc, #296]	; (80025f4 <Calculate_Attitude+0x374>)
 80024ca:	edd3 7a00 	vldr	s15, [r3]
 80024ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024d2:	4b50      	ldr	r3, [pc, #320]	; (8002614 <Calculate_Attitude+0x394>)
 80024d4:	edd3 7a00 	vldr	s15, [r3]
 80024d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024dc:	4b4d      	ldr	r3, [pc, #308]	; (8002614 <Calculate_Attitude+0x394>)
 80024de:	edc3 7a00 	vstr	s15, [r3]

	gyro_x_angle += (gyro_y_angle * sin(gyro_z * 0.01745 * ((float)how_long_to_loop_main / 1000000)));
 80024e2:	4b4a      	ldr	r3, [pc, #296]	; (800260c <Calculate_Attitude+0x38c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe f82e 	bl	8000548 <__aeabi_f2d>
 80024ec:	4604      	mov	r4, r0
 80024ee:	460d      	mov	r5, r1
 80024f0:	4b47      	ldr	r3, [pc, #284]	; (8002610 <Calculate_Attitude+0x390>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe f827 	bl	8000548 <__aeabi_f2d>
 80024fa:	4680      	mov	r8, r0
 80024fc:	4689      	mov	r9, r1
 80024fe:	4b3d      	ldr	r3, [pc, #244]	; (80025f4 <Calculate_Attitude+0x374>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe f820 	bl	8000548 <__aeabi_f2d>
 8002508:	a333      	add	r3, pc, #204	; (adr r3, 80025d8 <Calculate_Attitude+0x358>)
 800250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250e:	f7fe f873 	bl	80005f8 <__aeabi_dmul>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4692      	mov	sl, r2
 8002518:	469b      	mov	fp, r3
 800251a:	4b3a      	ldr	r3, [pc, #232]	; (8002604 <Calculate_Attitude+0x384>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	ee07 3a90 	vmov	s15, r3
 8002522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002526:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002608 <Calculate_Attitude+0x388>
 800252a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800252e:	ee16 0a90 	vmov	r0, s13
 8002532:	f7fe f809 	bl	8000548 <__aeabi_f2d>
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	4650      	mov	r0, sl
 800253c:	4659      	mov	r1, fp
 800253e:	f7fe f85b 	bl	80005f8 <__aeabi_dmul>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	ec43 2b17 	vmov	d7, r2, r3
 800254a:	eeb0 0a47 	vmov.f32	s0, s14
 800254e:	eef0 0a67 	vmov.f32	s1, s15
 8002552:	f00e fb91 	bl	8010c78 <sin>
 8002556:	ec53 2b10 	vmov	r2, r3, d0
 800255a:	4640      	mov	r0, r8
 800255c:	4649      	mov	r1, r9
 800255e:	f7fe f84b 	bl	80005f8 <__aeabi_dmul>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	4620      	mov	r0, r4
 8002568:	4629      	mov	r1, r5
 800256a:	f7fd fe8f 	bl	800028c <__adddf3>
 800256e:	4603      	mov	r3, r0
 8002570:	460c      	mov	r4, r1
 8002572:	4618      	mov	r0, r3
 8002574:	4621      	mov	r1, r4
 8002576:	f7fe fb17 	bl	8000ba8 <__aeabi_d2f>
 800257a:	4602      	mov	r2, r0
 800257c:	4b23      	ldr	r3, [pc, #140]	; (800260c <Calculate_Attitude+0x38c>)
 800257e:	601a      	str	r2, [r3, #0]
	gyro_y_angle -= (gyro_x_angle * sin(gyro_z * 0.01745 * ((float)how_long_to_loop_main / 1000000)));
 8002580:	4b23      	ldr	r3, [pc, #140]	; (8002610 <Calculate_Attitude+0x390>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7fd ffdf 	bl	8000548 <__aeabi_f2d>
 800258a:	4604      	mov	r4, r0
 800258c:	460d      	mov	r5, r1
 800258e:	4b1f      	ldr	r3, [pc, #124]	; (800260c <Calculate_Attitude+0x38c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7fd ffd8 	bl	8000548 <__aeabi_f2d>
 8002598:	4680      	mov	r8, r0
 800259a:	4689      	mov	r9, r1
 800259c:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <Calculate_Attitude+0x374>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fd ffd1 	bl	8000548 <__aeabi_f2d>
 80025a6:	a30c      	add	r3, pc, #48	; (adr r3, 80025d8 <Calculate_Attitude+0x358>)
 80025a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ac:	f7fe f824 	bl	80005f8 <__aeabi_dmul>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	4692      	mov	sl, r2
 80025b6:	469b      	mov	fp, r3
 80025b8:	4b12      	ldr	r3, [pc, #72]	; (8002604 <Calculate_Attitude+0x384>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	ee07 3a90 	vmov	s15, r3
 80025c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025c4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002608 <Calculate_Attitude+0x388>
 80025c8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80025cc:	e024      	b.n	8002618 <Calculate_Attitude+0x398>
 80025ce:	bf00      	nop
 80025d0:	53f7ced9 	.word	0x53f7ced9
 80025d4:	404ca5e3 	.word	0x404ca5e3
 80025d8:	ad42c3ca 	.word	0xad42c3ca
 80025dc:	3f91de69 	.word	0x3f91de69
 80025e0:	20000fc4 	.word	0x20000fc4
 80025e4:	42830000 	.word	0x42830000
 80025e8:	20000fd0 	.word	0x20000fd0
 80025ec:	c2830000 	.word	0xc2830000
 80025f0:	20000fac 	.word	0x20000fac
 80025f4:	20001000 	.word	0x20001000
 80025f8:	20000fd8 	.word	0x20000fd8
 80025fc:	20000fdc 	.word	0x20000fdc
 8002600:	20000fa0 	.word	0x20000fa0
 8002604:	20001044 	.word	0x20001044
 8002608:	49742400 	.word	0x49742400
 800260c:	20000fa8 	.word	0x20000fa8
 8002610:	20000fb4 	.word	0x20000fb4
 8002614:	20000fd4 	.word	0x20000fd4
 8002618:	ee16 0a90 	vmov	r0, s13
 800261c:	f7fd ff94 	bl	8000548 <__aeabi_f2d>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4650      	mov	r0, sl
 8002626:	4659      	mov	r1, fp
 8002628:	f7fd ffe6 	bl	80005f8 <__aeabi_dmul>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	ec43 2b17 	vmov	d7, r2, r3
 8002634:	eeb0 0a47 	vmov.f32	s0, s14
 8002638:	eef0 0a67 	vmov.f32	s1, s15
 800263c:	f00e fb1c 	bl	8010c78 <sin>
 8002640:	ec53 2b10 	vmov	r2, r3, d0
 8002644:	4640      	mov	r0, r8
 8002646:	4649      	mov	r1, r9
 8002648:	f7fd ffd6 	bl	80005f8 <__aeabi_dmul>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4620      	mov	r0, r4
 8002652:	4629      	mov	r1, r5
 8002654:	f7fd fe18 	bl	8000288 <__aeabi_dsub>
 8002658:	4603      	mov	r3, r0
 800265a:	460c      	mov	r4, r1
 800265c:	4618      	mov	r0, r3
 800265e:	4621      	mov	r1, r4
 8002660:	f7fe faa2 	bl	8000ba8 <__aeabi_d2f>
 8002664:	4602      	mov	r2, r0
 8002666:	4b54      	ldr	r3, [pc, #336]	; (80027b8 <Calculate_Attitude+0x538>)
 8002668:	601a      	str	r2, [r3, #0]

	gyro_x_angle = (gyro_x_angle * 0.9985) + (acc_x * (1.0000 - 0.9985));
 800266a:	4b54      	ldr	r3, [pc, #336]	; (80027bc <Calculate_Attitude+0x53c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7fd ff6a 	bl	8000548 <__aeabi_f2d>
 8002674:	a34c      	add	r3, pc, #304	; (adr r3, 80027a8 <Calculate_Attitude+0x528>)
 8002676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267a:	f7fd ffbd 	bl	80005f8 <__aeabi_dmul>
 800267e:	4603      	mov	r3, r0
 8002680:	460c      	mov	r4, r1
 8002682:	4625      	mov	r5, r4
 8002684:	461c      	mov	r4, r3
 8002686:	4b4e      	ldr	r3, [pc, #312]	; (80027c0 <Calculate_Attitude+0x540>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7fd ff5c 	bl	8000548 <__aeabi_f2d>
 8002690:	a347      	add	r3, pc, #284	; (adr r3, 80027b0 <Calculate_Attitude+0x530>)
 8002692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002696:	f7fd ffaf 	bl	80005f8 <__aeabi_dmul>
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	4620      	mov	r0, r4
 80026a0:	4629      	mov	r1, r5
 80026a2:	f7fd fdf3 	bl	800028c <__adddf3>
 80026a6:	4603      	mov	r3, r0
 80026a8:	460c      	mov	r4, r1
 80026aa:	4618      	mov	r0, r3
 80026ac:	4621      	mov	r1, r4
 80026ae:	f7fe fa7b 	bl	8000ba8 <__aeabi_d2f>
 80026b2:	4602      	mov	r2, r0
 80026b4:	4b41      	ldr	r3, [pc, #260]	; (80027bc <Calculate_Attitude+0x53c>)
 80026b6:	601a      	str	r2, [r3, #0]
	gyro_y_angle = (gyro_y_angle * 0.9985) + (acc_y * (1.0000 - 0.9985));
 80026b8:	4b3f      	ldr	r3, [pc, #252]	; (80027b8 <Calculate_Attitude+0x538>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fd ff43 	bl	8000548 <__aeabi_f2d>
 80026c2:	a339      	add	r3, pc, #228	; (adr r3, 80027a8 <Calculate_Attitude+0x528>)
 80026c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c8:	f7fd ff96 	bl	80005f8 <__aeabi_dmul>
 80026cc:	4603      	mov	r3, r0
 80026ce:	460c      	mov	r4, r1
 80026d0:	4625      	mov	r5, r4
 80026d2:	461c      	mov	r4, r3
 80026d4:	4b3b      	ldr	r3, [pc, #236]	; (80027c4 <Calculate_Attitude+0x544>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fd ff35 	bl	8000548 <__aeabi_f2d>
 80026de:	a334      	add	r3, pc, #208	; (adr r3, 80027b0 <Calculate_Attitude+0x530>)
 80026e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e4:	f7fd ff88 	bl	80005f8 <__aeabi_dmul>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	4620      	mov	r0, r4
 80026ee:	4629      	mov	r1, r5
 80026f0:	f7fd fdcc 	bl	800028c <__adddf3>
 80026f4:	4603      	mov	r3, r0
 80026f6:	460c      	mov	r4, r1
 80026f8:	4618      	mov	r0, r3
 80026fa:	4621      	mov	r1, r4
 80026fc:	f7fe fa54 	bl	8000ba8 <__aeabi_d2f>
 8002700:	4602      	mov	r2, r0
 8002702:	4b2d      	ldr	r3, [pc, #180]	; (80027b8 <Calculate_Attitude+0x538>)
 8002704:	601a      	str	r2, [r3, #0]

	if(gyro_z_angle < 0)
 8002706:	4b30      	ldr	r3, [pc, #192]	; (80027c8 <Calculate_Attitude+0x548>)
 8002708:	edd3 7a00 	vldr	s15, [r3]
 800270c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002714:	d509      	bpl.n	800272a <Calculate_Attitude+0x4aa>
		gyro_z_angle += 360;
 8002716:	4b2c      	ldr	r3, [pc, #176]	; (80027c8 <Calculate_Attitude+0x548>)
 8002718:	edd3 7a00 	vldr	s15, [r3]
 800271c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80027cc <Calculate_Attitude+0x54c>
 8002720:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002724:	4b28      	ldr	r3, [pc, #160]	; (80027c8 <Calculate_Attitude+0x548>)
 8002726:	edc3 7a00 	vstr	s15, [r3]
	if(gyro_z_angle >= 360)
 800272a:	4b27      	ldr	r3, [pc, #156]	; (80027c8 <Calculate_Attitude+0x548>)
 800272c:	edd3 7a00 	vldr	s15, [r3]
 8002730:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80027cc <Calculate_Attitude+0x54c>
 8002734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273c:	db09      	blt.n	8002752 <Calculate_Attitude+0x4d2>
		gyro_z_angle -= 360;
 800273e:	4b22      	ldr	r3, [pc, #136]	; (80027c8 <Calculate_Attitude+0x548>)
 8002740:	edd3 7a00 	vldr	s15, [r3]
 8002744:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80027cc <Calculate_Attitude+0x54c>
 8002748:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800274c:	4b1e      	ldr	r3, [pc, #120]	; (80027c8 <Calculate_Attitude+0x548>)
 800274e:	edc3 7a00 	vstr	s15, [r3]

	CalculateHeadingDifference(gyro_z_angle, compass_heading);
 8002752:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <Calculate_Attitude+0x548>)
 8002754:	edd3 7a00 	vldr	s15, [r3]
 8002758:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <Calculate_Attitude+0x550>)
 800275a:	ed93 7a00 	vldr	s14, [r3]
 800275e:	eef0 0a47 	vmov.f32	s1, s14
 8002762:	eeb0 0a67 	vmov.f32	s0, s15
 8002766:	f7ff fd1b 	bl	80021a0 <CalculateHeadingDifference>

	if (heading_difference_return > 5 || heading_difference_return < -5)
 800276a:	4b1a      	ldr	r3, [pc, #104]	; (80027d4 <Calculate_Attitude+0x554>)
 800276c:	edd3 7a00 	vldr	s15, [r3]
 8002770:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002774:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800277c:	dc0a      	bgt.n	8002794 <Calculate_Attitude+0x514>
 800277e:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <Calculate_Attitude+0x554>)
 8002780:	edd3 7a00 	vldr	s15, [r3]
 8002784:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8002788:	eef4 7ac7 	vcmpe.f32	s15, s14
 800278c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002790:	d400      	bmi.n	8002794 <Calculate_Attitude+0x514>
		gyro_z_angle = compass_heading;
}
 8002792:	e003      	b.n	800279c <Calculate_Attitude+0x51c>
		gyro_z_angle = compass_heading;
 8002794:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <Calculate_Attitude+0x550>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a0b      	ldr	r2, [pc, #44]	; (80027c8 <Calculate_Attitude+0x548>)
 800279a:	6013      	str	r3, [r2, #0]
}
 800279c:	bf00      	nop
 800279e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027a2:	bf00      	nop
 80027a4:	f3af 8000 	nop.w
 80027a8:	45a1cac1 	.word	0x45a1cac1
 80027ac:	3feff3b6 	.word	0x3feff3b6
 80027b0:	bc6a7e00 	.word	0xbc6a7e00
 80027b4:	3f589374 	.word	0x3f589374
 80027b8:	20000fb4 	.word	0x20000fb4
 80027bc:	20000fa8 	.word	0x20000fa8
 80027c0:	20000fdc 	.word	0x20000fdc
 80027c4:	20000fa0 	.word	0x20000fa0
 80027c8:	20000fd4 	.word	0x20000fd4
 80027cc:	43b40000 	.word	0x43b40000
 80027d0:	20000258 	.word	0x20000258
 80027d4:	20000270 	.word	0x20000270

080027d8 <Motor_PID>:

void Motor_PID()
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
	pid_roll_setpoint = 0;
 80027dc:	4b9e      	ldr	r3, [pc, #632]	; (8002a58 <Motor_PID+0x280>)
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
	pid_pitch_setpoint = 0;
 80027e4:	4b9d      	ldr	r3, [pc, #628]	; (8002a5c <Motor_PID+0x284>)
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
	pid_yaw_setpoint = 0;
 80027ec:	4b9c      	ldr	r3, [pc, #624]	; (8002a60 <Motor_PID+0x288>)
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]

	//Temp motor control
	if(ppm_channels[0] > 1505)
 80027f4:	4b9b      	ldr	r3, [pc, #620]	; (8002a64 <Motor_PID+0x28c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f240 52e1 	movw	r2, #1505	; 0x5e1
 80027fc:	4293      	cmp	r3, r2
 80027fe:	dd0b      	ble.n	8002818 <Motor_PID+0x40>
		pid_roll_setpoint = ppm_channels[0] - 1505;
 8002800:	4b98      	ldr	r3, [pc, #608]	; (8002a64 <Motor_PID+0x28c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f2a3 53e1 	subw	r3, r3, #1505	; 0x5e1
 8002808:	ee07 3a90 	vmov	s15, r3
 800280c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002810:	4b91      	ldr	r3, [pc, #580]	; (8002a58 <Motor_PID+0x280>)
 8002812:	edc3 7a00 	vstr	s15, [r3]
 8002816:	e010      	b.n	800283a <Motor_PID+0x62>
	else if(ppm_channels[0] < 1495)
 8002818:	4b92      	ldr	r3, [pc, #584]	; (8002a64 <Motor_PID+0x28c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f240 52d6 	movw	r2, #1494	; 0x5d6
 8002820:	4293      	cmp	r3, r2
 8002822:	dc0a      	bgt.n	800283a <Motor_PID+0x62>
		pid_roll_setpoint = ppm_channels[0] - 1495;
 8002824:	4b8f      	ldr	r3, [pc, #572]	; (8002a64 <Motor_PID+0x28c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f2a3 53d7 	subw	r3, r3, #1495	; 0x5d7
 800282c:	ee07 3a90 	vmov	s15, r3
 8002830:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002834:	4b88      	ldr	r3, [pc, #544]	; (8002a58 <Motor_PID+0x280>)
 8002836:	edc3 7a00 	vstr	s15, [r3]

	if(ppm_channels[1] > 1505)
 800283a:	4b8a      	ldr	r3, [pc, #552]	; (8002a64 <Motor_PID+0x28c>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f240 52e1 	movw	r2, #1505	; 0x5e1
 8002842:	4293      	cmp	r3, r2
 8002844:	dd0b      	ble.n	800285e <Motor_PID+0x86>
		pid_pitch_setpoint = ppm_channels[1] - 1505;
 8002846:	4b87      	ldr	r3, [pc, #540]	; (8002a64 <Motor_PID+0x28c>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f2a3 53e1 	subw	r3, r3, #1505	; 0x5e1
 800284e:	ee07 3a90 	vmov	s15, r3
 8002852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002856:	4b81      	ldr	r3, [pc, #516]	; (8002a5c <Motor_PID+0x284>)
 8002858:	edc3 7a00 	vstr	s15, [r3]
 800285c:	e010      	b.n	8002880 <Motor_PID+0xa8>
	else if(ppm_channels[1] < 1495)
 800285e:	4b81      	ldr	r3, [pc, #516]	; (8002a64 <Motor_PID+0x28c>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f240 52d6 	movw	r2, #1494	; 0x5d6
 8002866:	4293      	cmp	r3, r2
 8002868:	dc0a      	bgt.n	8002880 <Motor_PID+0xa8>
		pid_pitch_setpoint = ppm_channels[1] - 1495;
 800286a:	4b7e      	ldr	r3, [pc, #504]	; (8002a64 <Motor_PID+0x28c>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f2a3 53d7 	subw	r3, r3, #1495	; 0x5d7
 8002872:	ee07 3a90 	vmov	s15, r3
 8002876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800287a:	4b78      	ldr	r3, [pc, #480]	; (8002a5c <Motor_PID+0x284>)
 800287c:	edc3 7a00 	vstr	s15, [r3]

	if(ppm_channels[3] > 1505)
 8002880:	4b78      	ldr	r3, [pc, #480]	; (8002a64 <Motor_PID+0x28c>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f240 52e1 	movw	r2, #1505	; 0x5e1
 8002888:	4293      	cmp	r3, r2
 800288a:	dd0b      	ble.n	80028a4 <Motor_PID+0xcc>
		pid_yaw_setpoint = ppm_channels[3] - 1505;
 800288c:	4b75      	ldr	r3, [pc, #468]	; (8002a64 <Motor_PID+0x28c>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	f2a3 53e1 	subw	r3, r3, #1505	; 0x5e1
 8002894:	ee07 3a90 	vmov	s15, r3
 8002898:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800289c:	4b70      	ldr	r3, [pc, #448]	; (8002a60 <Motor_PID+0x288>)
 800289e:	edc3 7a00 	vstr	s15, [r3]
 80028a2:	e010      	b.n	80028c6 <Motor_PID+0xee>
	else if(ppm_channels[3] < 1495)
 80028a4:	4b6f      	ldr	r3, [pc, #444]	; (8002a64 <Motor_PID+0x28c>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f240 52d6 	movw	r2, #1494	; 0x5d6
 80028ac:	4293      	cmp	r3, r2
 80028ae:	dc0a      	bgt.n	80028c6 <Motor_PID+0xee>
		pid_yaw_setpoint = ppm_channels[3] - 1495;
 80028b0:	4b6c      	ldr	r3, [pc, #432]	; (8002a64 <Motor_PID+0x28c>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f2a3 53d7 	subw	r3, r3, #1495	; 0x5d7
 80028b8:	ee07 3a90 	vmov	s15, r3
 80028bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028c0:	4b67      	ldr	r3, [pc, #412]	; (8002a60 <Motor_PID+0x288>)
 80028c2:	edc3 7a00 	vstr	s15, [r3]

	pid_roll_setpoint -= (gyro_x_angle * 10);
 80028c6:	4b64      	ldr	r3, [pc, #400]	; (8002a58 <Motor_PID+0x280>)
 80028c8:	ed93 7a00 	vldr	s14, [r3]
 80028cc:	4b66      	ldr	r3, [pc, #408]	; (8002a68 <Motor_PID+0x290>)
 80028ce:	edd3 7a00 	vldr	s15, [r3]
 80028d2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80028d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028de:	4b5e      	ldr	r3, [pc, #376]	; (8002a58 <Motor_PID+0x280>)
 80028e0:	edc3 7a00 	vstr	s15, [r3]
	pid_pitch_setpoint -= (gyro_y_angle * 10);
 80028e4:	4b5d      	ldr	r3, [pc, #372]	; (8002a5c <Motor_PID+0x284>)
 80028e6:	ed93 7a00 	vldr	s14, [r3]
 80028ea:	4b60      	ldr	r3, [pc, #384]	; (8002a6c <Motor_PID+0x294>)
 80028ec:	edd3 7a00 	vldr	s15, [r3]
 80028f0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80028f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028fc:	4b57      	ldr	r3, [pc, #348]	; (8002a5c <Motor_PID+0x284>)
 80028fe:	edc3 7a00 	vstr	s15, [r3]

	pid_roll_setpoint /= 3.0;
 8002902:	4b55      	ldr	r3, [pc, #340]	; (8002a58 <Motor_PID+0x280>)
 8002904:	ed93 7a00 	vldr	s14, [r3]
 8002908:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800290c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002910:	4b51      	ldr	r3, [pc, #324]	; (8002a58 <Motor_PID+0x280>)
 8002912:	edc3 7a00 	vstr	s15, [r3]
	pid_pitch_setpoint /= 3.0;
 8002916:	4b51      	ldr	r3, [pc, #324]	; (8002a5c <Motor_PID+0x284>)
 8002918:	ed93 7a00 	vldr	s14, [r3]
 800291c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002920:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002924:	4b4d      	ldr	r3, [pc, #308]	; (8002a5c <Motor_PID+0x284>)
 8002926:	edc3 7a00 	vstr	s15, [r3]
	pid_yaw_setpoint /= 3.0;
 800292a:	4b4d      	ldr	r3, [pc, #308]	; (8002a60 <Motor_PID+0x288>)
 800292c:	ed93 7a00 	vldr	s14, [r3]
 8002930:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002934:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002938:	4b49      	ldr	r3, [pc, #292]	; (8002a60 <Motor_PID+0x288>)
 800293a:	edc3 7a00 	vstr	s15, [r3]

	pid_error_temp = pid_roll_setpoint - gyro_x;
 800293e:	4b46      	ldr	r3, [pc, #280]	; (8002a58 <Motor_PID+0x280>)
 8002940:	ed93 7a00 	vldr	s14, [r3]
 8002944:	4b4a      	ldr	r3, [pc, #296]	; (8002a70 <Motor_PID+0x298>)
 8002946:	edd3 7a00 	vldr	s15, [r3]
 800294a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800294e:	4b49      	ldr	r3, [pc, #292]	; (8002a74 <Motor_PID+0x29c>)
 8002950:	edc3 7a00 	vstr	s15, [r3]
	pid_roll_i += (pid_error_temp * ki_roll * how_long_to_loop_modifier);
 8002954:	4b47      	ldr	r3, [pc, #284]	; (8002a74 <Motor_PID+0x29c>)
 8002956:	ed93 7a00 	vldr	s14, [r3]
 800295a:	4b47      	ldr	r3, [pc, #284]	; (8002a78 <Motor_PID+0x2a0>)
 800295c:	edd3 7a00 	vldr	s15, [r3]
 8002960:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002964:	4b45      	ldr	r3, [pc, #276]	; (8002a7c <Motor_PID+0x2a4>)
 8002966:	edd3 7a00 	vldr	s15, [r3]
 800296a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800296e:	4b44      	ldr	r3, [pc, #272]	; (8002a80 <Motor_PID+0x2a8>)
 8002970:	edd3 7a00 	vldr	s15, [r3]
 8002974:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002978:	4b41      	ldr	r3, [pc, #260]	; (8002a80 <Motor_PID+0x2a8>)
 800297a:	edc3 7a00 	vstr	s15, [r3]

	if(pid_roll_i > max_motor_pid_output)
 800297e:	4b41      	ldr	r3, [pc, #260]	; (8002a84 <Motor_PID+0x2ac>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	ee07 3a90 	vmov	s15, r3
 8002986:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800298a:	4b3d      	ldr	r3, [pc, #244]	; (8002a80 <Motor_PID+0x2a8>)
 800298c:	edd3 7a00 	vldr	s15, [r3]
 8002990:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002998:	d509      	bpl.n	80029ae <Motor_PID+0x1d6>
		pid_roll_i = max_motor_pid_output;
 800299a:	4b3a      	ldr	r3, [pc, #232]	; (8002a84 <Motor_PID+0x2ac>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	ee07 3a90 	vmov	s15, r3
 80029a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029a6:	4b36      	ldr	r3, [pc, #216]	; (8002a80 <Motor_PID+0x2a8>)
 80029a8:	edc3 7a00 	vstr	s15, [r3]
 80029ac:	e018      	b.n	80029e0 <Motor_PID+0x208>
	else if(pid_roll_i < (max_motor_pid_output * -1))
 80029ae:	4b35      	ldr	r3, [pc, #212]	; (8002a84 <Motor_PID+0x2ac>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	425b      	negs	r3, r3
 80029b4:	ee07 3a90 	vmov	s15, r3
 80029b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029bc:	4b30      	ldr	r3, [pc, #192]	; (8002a80 <Motor_PID+0x2a8>)
 80029be:	edd3 7a00 	vldr	s15, [r3]
 80029c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ca:	dd09      	ble.n	80029e0 <Motor_PID+0x208>
		pid_roll_i = (max_motor_pid_output * -1);
 80029cc:	4b2d      	ldr	r3, [pc, #180]	; (8002a84 <Motor_PID+0x2ac>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	425b      	negs	r3, r3
 80029d2:	ee07 3a90 	vmov	s15, r3
 80029d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029da:	4b29      	ldr	r3, [pc, #164]	; (8002a80 <Motor_PID+0x2a8>)
 80029dc:	edc3 7a00 	vstr	s15, [r3]

	pid_roll_output = (pid_error_temp * kp_roll * how_long_to_loop_modifier) + pid_roll_i + ((pid_error_temp - pid_roll_last_error) * kd_roll * how_long_to_loop_modifier);
 80029e0:	4b24      	ldr	r3, [pc, #144]	; (8002a74 <Motor_PID+0x29c>)
 80029e2:	ed93 7a00 	vldr	s14, [r3]
 80029e6:	4b28      	ldr	r3, [pc, #160]	; (8002a88 <Motor_PID+0x2b0>)
 80029e8:	edd3 7a00 	vldr	s15, [r3]
 80029ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029f0:	4b22      	ldr	r3, [pc, #136]	; (8002a7c <Motor_PID+0x2a4>)
 80029f2:	edd3 7a00 	vldr	s15, [r3]
 80029f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029fa:	4b21      	ldr	r3, [pc, #132]	; (8002a80 <Motor_PID+0x2a8>)
 80029fc:	edd3 7a00 	vldr	s15, [r3]
 8002a00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a04:	4b1b      	ldr	r3, [pc, #108]	; (8002a74 <Motor_PID+0x29c>)
 8002a06:	edd3 6a00 	vldr	s13, [r3]
 8002a0a:	4b20      	ldr	r3, [pc, #128]	; (8002a8c <Motor_PID+0x2b4>)
 8002a0c:	edd3 7a00 	vldr	s15, [r3]
 8002a10:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002a14:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <Motor_PID+0x2b8>)
 8002a16:	edd3 7a00 	vldr	s15, [r3]
 8002a1a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a1e:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <Motor_PID+0x2a4>)
 8002a20:	edd3 7a00 	vldr	s15, [r3]
 8002a24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a30:	ee17 2a90 	vmov	r2, s15
 8002a34:	4b17      	ldr	r3, [pc, #92]	; (8002a94 <Motor_PID+0x2bc>)
 8002a36:	601a      	str	r2, [r3, #0]

	pid_roll_last_error = pid_error_temp;
 8002a38:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <Motor_PID+0x29c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a13      	ldr	r2, [pc, #76]	; (8002a8c <Motor_PID+0x2b4>)
 8002a3e:	6013      	str	r3, [r2, #0]

	if(pid_roll_output > max_motor_pid_output)
 8002a40:	4b14      	ldr	r3, [pc, #80]	; (8002a94 <Motor_PID+0x2bc>)
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <Motor_PID+0x2ac>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	dd25      	ble.n	8002a98 <Motor_PID+0x2c0>
		pid_roll_output = max_motor_pid_output;
 8002a4c:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <Motor_PID+0x2ac>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a10      	ldr	r2, [pc, #64]	; (8002a94 <Motor_PID+0x2bc>)
 8002a52:	6013      	str	r3, [r2, #0]
 8002a54:	e02c      	b.n	8002ab0 <Motor_PID+0x2d8>
 8002a56:	bf00      	nop
 8002a58:	20000d60 	.word	0x20000d60
 8002a5c:	20000d64 	.word	0x20000d64
 8002a60:	20000b58 	.word	0x20000b58
 8002a64:	20001074 	.word	0x20001074
 8002a68:	20000fa8 	.word	0x20000fa8
 8002a6c:	20000fb4 	.word	0x20000fb4
 8002a70:	20000fd0 	.word	0x20000fd0
 8002a74:	20000d70 	.word	0x20000d70
 8002a78:	2000027c 	.word	0x2000027c
 8002a7c:	20000030 	.word	0x20000030
 8002a80:	20000404 	.word	0x20000404
 8002a84:	20000014 	.word	0x20000014
 8002a88:	20000274 	.word	0x20000274
 8002a8c:	2000080c 	.word	0x2000080c
 8002a90:	20000284 	.word	0x20000284
 8002a94:	20000a18 	.word	0x20000a18
	else if(pid_roll_output < (max_motor_pid_output * -1))
 8002a98:	4ba0      	ldr	r3, [pc, #640]	; (8002d1c <Motor_PID+0x544>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	425a      	negs	r2, r3
 8002a9e:	4ba0      	ldr	r3, [pc, #640]	; (8002d20 <Motor_PID+0x548>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	dd04      	ble.n	8002ab0 <Motor_PID+0x2d8>
		pid_roll_output = (max_motor_pid_output * -1);
 8002aa6:	4b9d      	ldr	r3, [pc, #628]	; (8002d1c <Motor_PID+0x544>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	425b      	negs	r3, r3
 8002aac:	4a9c      	ldr	r2, [pc, #624]	; (8002d20 <Motor_PID+0x548>)
 8002aae:	6013      	str	r3, [r2, #0]

	pid_error_temp = pid_pitch_setpoint - gyro_y;
 8002ab0:	4b9c      	ldr	r3, [pc, #624]	; (8002d24 <Motor_PID+0x54c>)
 8002ab2:	ed93 7a00 	vldr	s14, [r3]
 8002ab6:	4b9c      	ldr	r3, [pc, #624]	; (8002d28 <Motor_PID+0x550>)
 8002ab8:	edd3 7a00 	vldr	s15, [r3]
 8002abc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ac0:	4b9a      	ldr	r3, [pc, #616]	; (8002d2c <Motor_PID+0x554>)
 8002ac2:	edc3 7a00 	vstr	s15, [r3]
	pid_pitch_i += (pid_error_temp * ki_roll * how_long_to_loop_modifier);
 8002ac6:	4b99      	ldr	r3, [pc, #612]	; (8002d2c <Motor_PID+0x554>)
 8002ac8:	ed93 7a00 	vldr	s14, [r3]
 8002acc:	4b98      	ldr	r3, [pc, #608]	; (8002d30 <Motor_PID+0x558>)
 8002ace:	edd3 7a00 	vldr	s15, [r3]
 8002ad2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ad6:	4b97      	ldr	r3, [pc, #604]	; (8002d34 <Motor_PID+0x55c>)
 8002ad8:	edd3 7a00 	vldr	s15, [r3]
 8002adc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ae0:	4b95      	ldr	r3, [pc, #596]	; (8002d38 <Motor_PID+0x560>)
 8002ae2:	edd3 7a00 	vldr	s15, [r3]
 8002ae6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aea:	4b93      	ldr	r3, [pc, #588]	; (8002d38 <Motor_PID+0x560>)
 8002aec:	edc3 7a00 	vstr	s15, [r3]

	if(pid_pitch_i > max_motor_pid_output)
 8002af0:	4b8a      	ldr	r3, [pc, #552]	; (8002d1c <Motor_PID+0x544>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	ee07 3a90 	vmov	s15, r3
 8002af8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002afc:	4b8e      	ldr	r3, [pc, #568]	; (8002d38 <Motor_PID+0x560>)
 8002afe:	edd3 7a00 	vldr	s15, [r3]
 8002b02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b0a:	d509      	bpl.n	8002b20 <Motor_PID+0x348>
		pid_pitch_i = max_motor_pid_output;
 8002b0c:	4b83      	ldr	r3, [pc, #524]	; (8002d1c <Motor_PID+0x544>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	ee07 3a90 	vmov	s15, r3
 8002b14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b18:	4b87      	ldr	r3, [pc, #540]	; (8002d38 <Motor_PID+0x560>)
 8002b1a:	edc3 7a00 	vstr	s15, [r3]
 8002b1e:	e018      	b.n	8002b52 <Motor_PID+0x37a>
	else if(pid_pitch_i < (max_motor_pid_output * -1))
 8002b20:	4b7e      	ldr	r3, [pc, #504]	; (8002d1c <Motor_PID+0x544>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	425b      	negs	r3, r3
 8002b26:	ee07 3a90 	vmov	s15, r3
 8002b2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b2e:	4b82      	ldr	r3, [pc, #520]	; (8002d38 <Motor_PID+0x560>)
 8002b30:	edd3 7a00 	vldr	s15, [r3]
 8002b34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b3c:	dd09      	ble.n	8002b52 <Motor_PID+0x37a>
		pid_pitch_i = (max_motor_pid_output * -1);
 8002b3e:	4b77      	ldr	r3, [pc, #476]	; (8002d1c <Motor_PID+0x544>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	425b      	negs	r3, r3
 8002b44:	ee07 3a90 	vmov	s15, r3
 8002b48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b4c:	4b7a      	ldr	r3, [pc, #488]	; (8002d38 <Motor_PID+0x560>)
 8002b4e:	edc3 7a00 	vstr	s15, [r3]

	pid_pitch_output = (pid_error_temp * kp_roll * how_long_to_loop_modifier) + pid_pitch_i + ((pid_error_temp - pid_pitch_last_error) * kd_roll * how_long_to_loop_modifier);
 8002b52:	4b76      	ldr	r3, [pc, #472]	; (8002d2c <Motor_PID+0x554>)
 8002b54:	ed93 7a00 	vldr	s14, [r3]
 8002b58:	4b78      	ldr	r3, [pc, #480]	; (8002d3c <Motor_PID+0x564>)
 8002b5a:	edd3 7a00 	vldr	s15, [r3]
 8002b5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b62:	4b74      	ldr	r3, [pc, #464]	; (8002d34 <Motor_PID+0x55c>)
 8002b64:	edd3 7a00 	vldr	s15, [r3]
 8002b68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b6c:	4b72      	ldr	r3, [pc, #456]	; (8002d38 <Motor_PID+0x560>)
 8002b6e:	edd3 7a00 	vldr	s15, [r3]
 8002b72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b76:	4b6d      	ldr	r3, [pc, #436]	; (8002d2c <Motor_PID+0x554>)
 8002b78:	edd3 6a00 	vldr	s13, [r3]
 8002b7c:	4b70      	ldr	r3, [pc, #448]	; (8002d40 <Motor_PID+0x568>)
 8002b7e:	edd3 7a00 	vldr	s15, [r3]
 8002b82:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b86:	4b6f      	ldr	r3, [pc, #444]	; (8002d44 <Motor_PID+0x56c>)
 8002b88:	edd3 7a00 	vldr	s15, [r3]
 8002b8c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b90:	4b68      	ldr	r3, [pc, #416]	; (8002d34 <Motor_PID+0x55c>)
 8002b92:	edd3 7a00 	vldr	s15, [r3]
 8002b96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ba2:	ee17 2a90 	vmov	r2, s15
 8002ba6:	4b68      	ldr	r3, [pc, #416]	; (8002d48 <Motor_PID+0x570>)
 8002ba8:	601a      	str	r2, [r3, #0]

	pid_pitch_last_error = pid_error_temp;
 8002baa:	4b60      	ldr	r3, [pc, #384]	; (8002d2c <Motor_PID+0x554>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a64      	ldr	r2, [pc, #400]	; (8002d40 <Motor_PID+0x568>)
 8002bb0:	6013      	str	r3, [r2, #0]

	if(pid_pitch_output > max_motor_pid_output)
 8002bb2:	4b65      	ldr	r3, [pc, #404]	; (8002d48 <Motor_PID+0x570>)
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	4b59      	ldr	r3, [pc, #356]	; (8002d1c <Motor_PID+0x544>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	dd04      	ble.n	8002bc8 <Motor_PID+0x3f0>
		pid_pitch_output = max_motor_pid_output;
 8002bbe:	4b57      	ldr	r3, [pc, #348]	; (8002d1c <Motor_PID+0x544>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a61      	ldr	r2, [pc, #388]	; (8002d48 <Motor_PID+0x570>)
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	e00b      	b.n	8002be0 <Motor_PID+0x408>
	else if(pid_pitch_output < (max_motor_pid_output * -1))
 8002bc8:	4b54      	ldr	r3, [pc, #336]	; (8002d1c <Motor_PID+0x544>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	425a      	negs	r2, r3
 8002bce:	4b5e      	ldr	r3, [pc, #376]	; (8002d48 <Motor_PID+0x570>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	dd04      	ble.n	8002be0 <Motor_PID+0x408>
		pid_pitch_output = (max_motor_pid_output * -1);
 8002bd6:	4b51      	ldr	r3, [pc, #324]	; (8002d1c <Motor_PID+0x544>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	425b      	negs	r3, r3
 8002bdc:	4a5a      	ldr	r2, [pc, #360]	; (8002d48 <Motor_PID+0x570>)
 8002bde:	6013      	str	r3, [r2, #0]

	pid_error_temp = pid_yaw_setpoint - gyro_z;
 8002be0:	4b5a      	ldr	r3, [pc, #360]	; (8002d4c <Motor_PID+0x574>)
 8002be2:	ed93 7a00 	vldr	s14, [r3]
 8002be6:	4b5a      	ldr	r3, [pc, #360]	; (8002d50 <Motor_PID+0x578>)
 8002be8:	edd3 7a00 	vldr	s15, [r3]
 8002bec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bf0:	4b4e      	ldr	r3, [pc, #312]	; (8002d2c <Motor_PID+0x554>)
 8002bf2:	edc3 7a00 	vstr	s15, [r3]
	pid_yaw_i += (pid_error_temp * ki_yaw * how_long_to_loop_modifier);
 8002bf6:	4b4d      	ldr	r3, [pc, #308]	; (8002d2c <Motor_PID+0x554>)
 8002bf8:	ed93 7a00 	vldr	s14, [r3]
 8002bfc:	4b55      	ldr	r3, [pc, #340]	; (8002d54 <Motor_PID+0x57c>)
 8002bfe:	edd3 7a00 	vldr	s15, [r3]
 8002c02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c06:	4b4b      	ldr	r3, [pc, #300]	; (8002d34 <Motor_PID+0x55c>)
 8002c08:	edd3 7a00 	vldr	s15, [r3]
 8002c0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c10:	4b51      	ldr	r3, [pc, #324]	; (8002d58 <Motor_PID+0x580>)
 8002c12:	edd3 7a00 	vldr	s15, [r3]
 8002c16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c1a:	4b4f      	ldr	r3, [pc, #316]	; (8002d58 <Motor_PID+0x580>)
 8002c1c:	edc3 7a00 	vstr	s15, [r3]

	if(pid_yaw_i > max_motor_pid_output)
 8002c20:	4b3e      	ldr	r3, [pc, #248]	; (8002d1c <Motor_PID+0x544>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	ee07 3a90 	vmov	s15, r3
 8002c28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c2c:	4b4a      	ldr	r3, [pc, #296]	; (8002d58 <Motor_PID+0x580>)
 8002c2e:	edd3 7a00 	vldr	s15, [r3]
 8002c32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3a:	d509      	bpl.n	8002c50 <Motor_PID+0x478>
		pid_yaw_i = max_motor_pid_output;
 8002c3c:	4b37      	ldr	r3, [pc, #220]	; (8002d1c <Motor_PID+0x544>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	ee07 3a90 	vmov	s15, r3
 8002c44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c48:	4b43      	ldr	r3, [pc, #268]	; (8002d58 <Motor_PID+0x580>)
 8002c4a:	edc3 7a00 	vstr	s15, [r3]
 8002c4e:	e018      	b.n	8002c82 <Motor_PID+0x4aa>
	else if(pid_yaw_i < (max_motor_pid_output * -1))
 8002c50:	4b32      	ldr	r3, [pc, #200]	; (8002d1c <Motor_PID+0x544>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	425b      	negs	r3, r3
 8002c56:	ee07 3a90 	vmov	s15, r3
 8002c5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c5e:	4b3e      	ldr	r3, [pc, #248]	; (8002d58 <Motor_PID+0x580>)
 8002c60:	edd3 7a00 	vldr	s15, [r3]
 8002c64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c6c:	dd09      	ble.n	8002c82 <Motor_PID+0x4aa>
		pid_yaw_i = (max_motor_pid_output * -1);
 8002c6e:	4b2b      	ldr	r3, [pc, #172]	; (8002d1c <Motor_PID+0x544>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	425b      	negs	r3, r3
 8002c74:	ee07 3a90 	vmov	s15, r3
 8002c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c7c:	4b36      	ldr	r3, [pc, #216]	; (8002d58 <Motor_PID+0x580>)
 8002c7e:	edc3 7a00 	vstr	s15, [r3]

	pid_yaw_output = (pid_error_temp * kp_yaw * how_long_to_loop_modifier) + pid_yaw_i + ((pid_error_temp - pid_yaw_last_error) * kd_yaw * how_long_to_loop_modifier);
 8002c82:	4b2a      	ldr	r3, [pc, #168]	; (8002d2c <Motor_PID+0x554>)
 8002c84:	ed93 7a00 	vldr	s14, [r3]
 8002c88:	4b34      	ldr	r3, [pc, #208]	; (8002d5c <Motor_PID+0x584>)
 8002c8a:	edd3 7a00 	vldr	s15, [r3]
 8002c8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c92:	4b28      	ldr	r3, [pc, #160]	; (8002d34 <Motor_PID+0x55c>)
 8002c94:	edd3 7a00 	vldr	s15, [r3]
 8002c98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c9c:	4b2e      	ldr	r3, [pc, #184]	; (8002d58 <Motor_PID+0x580>)
 8002c9e:	edd3 7a00 	vldr	s15, [r3]
 8002ca2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ca6:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <Motor_PID+0x554>)
 8002ca8:	edd3 6a00 	vldr	s13, [r3]
 8002cac:	4b2c      	ldr	r3, [pc, #176]	; (8002d60 <Motor_PID+0x588>)
 8002cae:	edd3 7a00 	vldr	s15, [r3]
 8002cb2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002cb6:	4b2b      	ldr	r3, [pc, #172]	; (8002d64 <Motor_PID+0x58c>)
 8002cb8:	edd3 7a00 	vldr	s15, [r3]
 8002cbc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002cc0:	4b1c      	ldr	r3, [pc, #112]	; (8002d34 <Motor_PID+0x55c>)
 8002cc2:	edd3 7a00 	vldr	s15, [r3]
 8002cc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cd2:	ee17 2a90 	vmov	r2, s15
 8002cd6:	4b24      	ldr	r3, [pc, #144]	; (8002d68 <Motor_PID+0x590>)
 8002cd8:	601a      	str	r2, [r3, #0]

	pid_yaw_last_error = pid_error_temp;
 8002cda:	4b14      	ldr	r3, [pc, #80]	; (8002d2c <Motor_PID+0x554>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a20      	ldr	r2, [pc, #128]	; (8002d60 <Motor_PID+0x588>)
 8002ce0:	6013      	str	r3, [r2, #0]

	if(pid_yaw_output > max_motor_pid_output)
 8002ce2:	4b21      	ldr	r3, [pc, #132]	; (8002d68 <Motor_PID+0x590>)
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	4b0d      	ldr	r3, [pc, #52]	; (8002d1c <Motor_PID+0x544>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	dd04      	ble.n	8002cf8 <Motor_PID+0x520>
		pid_yaw_output = max_motor_pid_output;
 8002cee:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <Motor_PID+0x544>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a1d      	ldr	r2, [pc, #116]	; (8002d68 <Motor_PID+0x590>)
 8002cf4:	6013      	str	r3, [r2, #0]
	else if(pid_yaw_output < (max_motor_pid_output * -1))
		pid_yaw_output = (max_motor_pid_output * -1);
}
 8002cf6:	e00b      	b.n	8002d10 <Motor_PID+0x538>
	else if(pid_yaw_output < (max_motor_pid_output * -1))
 8002cf8:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <Motor_PID+0x544>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	425a      	negs	r2, r3
 8002cfe:	4b1a      	ldr	r3, [pc, #104]	; (8002d68 <Motor_PID+0x590>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	dd04      	ble.n	8002d10 <Motor_PID+0x538>
		pid_yaw_output = (max_motor_pid_output * -1);
 8002d06:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <Motor_PID+0x544>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	425b      	negs	r3, r3
 8002d0c:	4a16      	ldr	r2, [pc, #88]	; (8002d68 <Motor_PID+0x590>)
 8002d0e:	6013      	str	r3, [r2, #0]
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	20000014 	.word	0x20000014
 8002d20:	20000a18 	.word	0x20000a18
 8002d24:	20000d64 	.word	0x20000d64
 8002d28:	20000fac 	.word	0x20000fac
 8002d2c:	20000d70 	.word	0x20000d70
 8002d30:	2000027c 	.word	0x2000027c
 8002d34:	20000030 	.word	0x20000030
 8002d38:	20000a10 	.word	0x20000a10
 8002d3c:	20000274 	.word	0x20000274
 8002d40:	20000b5c 	.word	0x20000b5c
 8002d44:	20000284 	.word	0x20000284
 8002d48:	20000a1c 	.word	0x20000a1c
 8002d4c:	20000b58 	.word	0x20000b58
 8002d50:	20001000 	.word	0x20001000
 8002d54:	20000280 	.word	0x20000280
 8002d58:	20000a14 	.word	0x20000a14
 8002d5c:	20000278 	.word	0x20000278
 8002d60:	20000a40 	.word	0x20000a40
 8002d64:	20000288 	.word	0x20000288
 8002d68:	20000400 	.word	0x20000400

08002d6c <Calculate_Motor_Outputs>:

int32_t manual_throttle;
int32_t throttle_output;

void Calculate_Motor_Outputs()
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
	if(ppm_channels[2] < 1008)
 8002d70:	4b68      	ldr	r3, [pc, #416]	; (8002f14 <Calculate_Motor_Outputs+0x1a8>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 8002d78:	da03      	bge.n	8002d82 <Calculate_Motor_Outputs+0x16>
		manual_throttle = 125;
 8002d7a:	4b67      	ldr	r3, [pc, #412]	; (8002f18 <Calculate_Motor_Outputs+0x1ac>)
 8002d7c:	227d      	movs	r2, #125	; 0x7d
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	e008      	b.n	8002d94 <Calculate_Motor_Outputs+0x28>
	else
		manual_throttle = (ppm_channels[2] / 8);
 8002d82:	4b64      	ldr	r3, [pc, #400]	; (8002f14 <Calculate_Motor_Outputs+0x1a8>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	da00      	bge.n	8002d8c <Calculate_Motor_Outputs+0x20>
 8002d8a:	3307      	adds	r3, #7
 8002d8c:	10db      	asrs	r3, r3, #3
 8002d8e:	461a      	mov	r2, r3
 8002d90:	4b61      	ldr	r3, [pc, #388]	; (8002f18 <Calculate_Motor_Outputs+0x1ac>)
 8002d92:	601a      	str	r2, [r3, #0]

	throttle_output = idle_throttle;
 8002d94:	4b61      	ldr	r3, [pc, #388]	; (8002f1c <Calculate_Motor_Outputs+0x1b0>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a61      	ldr	r2, [pc, #388]	; (8002f20 <Calculate_Motor_Outputs+0x1b4>)
 8002d9a:	6013      	str	r3, [r2, #0]

	if(altitude_hold_flag)
 8002d9c:	4b61      	ldr	r3, [pc, #388]	; (8002f24 <Calculate_Motor_Outputs+0x1b8>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d006      	beq.n	8002db2 <Calculate_Motor_Outputs+0x46>
		throttle_output += altitude_pid_output;
 8002da4:	4b5e      	ldr	r3, [pc, #376]	; (8002f20 <Calculate_Motor_Outputs+0x1b4>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b5f      	ldr	r3, [pc, #380]	; (8002f28 <Calculate_Motor_Outputs+0x1bc>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4413      	add	r3, r2
 8002dae:	4a5c      	ldr	r2, [pc, #368]	; (8002f20 <Calculate_Motor_Outputs+0x1b4>)
 8002db0:	6013      	str	r3, [r2, #0]

	if(manual_mode)
 8002db2:	4b5e      	ldr	r3, [pc, #376]	; (8002f2c <Calculate_Motor_Outputs+0x1c0>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <Calculate_Motor_Outputs+0x56>
	{
		throttle_output = manual_throttle;
 8002dba:	4b57      	ldr	r3, [pc, #348]	; (8002f18 <Calculate_Motor_Outputs+0x1ac>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a58      	ldr	r2, [pc, #352]	; (8002f20 <Calculate_Motor_Outputs+0x1b4>)
 8002dc0:	6013      	str	r3, [r2, #0]
	}

	if(ppm_channels[5] > 1300)
 8002dc2:	4b54      	ldr	r3, [pc, #336]	; (8002f14 <Calculate_Motor_Outputs+0x1a8>)
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	f240 5214 	movw	r2, #1300	; 0x514
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	dd70      	ble.n	8002eb0 <Calculate_Motor_Outputs+0x144>
	{
		esc1_output = throttle_output + pid_roll_output + pid_pitch_output - pid_yaw_output;
 8002dce:	4b54      	ldr	r3, [pc, #336]	; (8002f20 <Calculate_Motor_Outputs+0x1b4>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	4b57      	ldr	r3, [pc, #348]	; (8002f30 <Calculate_Motor_Outputs+0x1c4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	441a      	add	r2, r3
 8002dd8:	4b56      	ldr	r3, [pc, #344]	; (8002f34 <Calculate_Motor_Outputs+0x1c8>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	441a      	add	r2, r3
 8002dde:	4b56      	ldr	r3, [pc, #344]	; (8002f38 <Calculate_Motor_Outputs+0x1cc>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	4a55      	ldr	r2, [pc, #340]	; (8002f3c <Calculate_Motor_Outputs+0x1d0>)
 8002de6:	6013      	str	r3, [r2, #0]
		esc2_output = throttle_output - pid_roll_output + pid_pitch_output + pid_yaw_output;
 8002de8:	4b4d      	ldr	r3, [pc, #308]	; (8002f20 <Calculate_Motor_Outputs+0x1b4>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4b50      	ldr	r3, [pc, #320]	; (8002f30 <Calculate_Motor_Outputs+0x1c4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	1ad2      	subs	r2, r2, r3
 8002df2:	4b50      	ldr	r3, [pc, #320]	; (8002f34 <Calculate_Motor_Outputs+0x1c8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	441a      	add	r2, r3
 8002df8:	4b4f      	ldr	r3, [pc, #316]	; (8002f38 <Calculate_Motor_Outputs+0x1cc>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	4a50      	ldr	r2, [pc, #320]	; (8002f40 <Calculate_Motor_Outputs+0x1d4>)
 8002e00:	6013      	str	r3, [r2, #0]
		esc3_output = throttle_output - pid_roll_output - pid_pitch_output - pid_yaw_output;
 8002e02:	4b47      	ldr	r3, [pc, #284]	; (8002f20 <Calculate_Motor_Outputs+0x1b4>)
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	4b4a      	ldr	r3, [pc, #296]	; (8002f30 <Calculate_Motor_Outputs+0x1c4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	1ad2      	subs	r2, r2, r3
 8002e0c:	4b49      	ldr	r3, [pc, #292]	; (8002f34 <Calculate_Motor_Outputs+0x1c8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	1ad2      	subs	r2, r2, r3
 8002e12:	4b49      	ldr	r3, [pc, #292]	; (8002f38 <Calculate_Motor_Outputs+0x1cc>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	4a4a      	ldr	r2, [pc, #296]	; (8002f44 <Calculate_Motor_Outputs+0x1d8>)
 8002e1a:	6013      	str	r3, [r2, #0]
		esc4_output = throttle_output + pid_roll_output - pid_pitch_output + pid_yaw_output;
 8002e1c:	4b40      	ldr	r3, [pc, #256]	; (8002f20 <Calculate_Motor_Outputs+0x1b4>)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	4b43      	ldr	r3, [pc, #268]	; (8002f30 <Calculate_Motor_Outputs+0x1c4>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	441a      	add	r2, r3
 8002e26:	4b43      	ldr	r3, [pc, #268]	; (8002f34 <Calculate_Motor_Outputs+0x1c8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	1ad2      	subs	r2, r2, r3
 8002e2c:	4b42      	ldr	r3, [pc, #264]	; (8002f38 <Calculate_Motor_Outputs+0x1cc>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4413      	add	r3, r2
 8002e32:	4a45      	ldr	r2, [pc, #276]	; (8002f48 <Calculate_Motor_Outputs+0x1dc>)
 8002e34:	6013      	str	r3, [r2, #0]

		if(esc1_output > 250)
 8002e36:	4b41      	ldr	r3, [pc, #260]	; (8002f3c <Calculate_Motor_Outputs+0x1d0>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2bfa      	cmp	r3, #250	; 0xfa
 8002e3c:	dd03      	ble.n	8002e46 <Calculate_Motor_Outputs+0xda>
			esc1_output = 250;
 8002e3e:	4b3f      	ldr	r3, [pc, #252]	; (8002f3c <Calculate_Motor_Outputs+0x1d0>)
 8002e40:	22fa      	movs	r2, #250	; 0xfa
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	e006      	b.n	8002e54 <Calculate_Motor_Outputs+0xe8>
		else if(esc1_output < 125)
 8002e46:	4b3d      	ldr	r3, [pc, #244]	; (8002f3c <Calculate_Motor_Outputs+0x1d0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b7c      	cmp	r3, #124	; 0x7c
 8002e4c:	dc02      	bgt.n	8002e54 <Calculate_Motor_Outputs+0xe8>
			esc1_output = 125;
 8002e4e:	4b3b      	ldr	r3, [pc, #236]	; (8002f3c <Calculate_Motor_Outputs+0x1d0>)
 8002e50:	227d      	movs	r2, #125	; 0x7d
 8002e52:	601a      	str	r2, [r3, #0]

		if(esc2_output > 250)
 8002e54:	4b3a      	ldr	r3, [pc, #232]	; (8002f40 <Calculate_Motor_Outputs+0x1d4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2bfa      	cmp	r3, #250	; 0xfa
 8002e5a:	dd03      	ble.n	8002e64 <Calculate_Motor_Outputs+0xf8>
			esc2_output = 250;
 8002e5c:	4b38      	ldr	r3, [pc, #224]	; (8002f40 <Calculate_Motor_Outputs+0x1d4>)
 8002e5e:	22fa      	movs	r2, #250	; 0xfa
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	e006      	b.n	8002e72 <Calculate_Motor_Outputs+0x106>
		else if(esc2_output < 125)
 8002e64:	4b36      	ldr	r3, [pc, #216]	; (8002f40 <Calculate_Motor_Outputs+0x1d4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b7c      	cmp	r3, #124	; 0x7c
 8002e6a:	dc02      	bgt.n	8002e72 <Calculate_Motor_Outputs+0x106>
			esc2_output = 125;
 8002e6c:	4b34      	ldr	r3, [pc, #208]	; (8002f40 <Calculate_Motor_Outputs+0x1d4>)
 8002e6e:	227d      	movs	r2, #125	; 0x7d
 8002e70:	601a      	str	r2, [r3, #0]

		if(esc3_output > 250)
 8002e72:	4b34      	ldr	r3, [pc, #208]	; (8002f44 <Calculate_Motor_Outputs+0x1d8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2bfa      	cmp	r3, #250	; 0xfa
 8002e78:	dd03      	ble.n	8002e82 <Calculate_Motor_Outputs+0x116>
			esc3_output = 250;
 8002e7a:	4b32      	ldr	r3, [pc, #200]	; (8002f44 <Calculate_Motor_Outputs+0x1d8>)
 8002e7c:	22fa      	movs	r2, #250	; 0xfa
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	e006      	b.n	8002e90 <Calculate_Motor_Outputs+0x124>
		else if(esc3_output < 125)
 8002e82:	4b30      	ldr	r3, [pc, #192]	; (8002f44 <Calculate_Motor_Outputs+0x1d8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b7c      	cmp	r3, #124	; 0x7c
 8002e88:	dc02      	bgt.n	8002e90 <Calculate_Motor_Outputs+0x124>
			esc3_output = 125;
 8002e8a:	4b2e      	ldr	r3, [pc, #184]	; (8002f44 <Calculate_Motor_Outputs+0x1d8>)
 8002e8c:	227d      	movs	r2, #125	; 0x7d
 8002e8e:	601a      	str	r2, [r3, #0]

		if(esc4_output > 250)
 8002e90:	4b2d      	ldr	r3, [pc, #180]	; (8002f48 <Calculate_Motor_Outputs+0x1dc>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2bfa      	cmp	r3, #250	; 0xfa
 8002e96:	dd03      	ble.n	8002ea0 <Calculate_Motor_Outputs+0x134>
			esc4_output = 250;
 8002e98:	4b2b      	ldr	r3, [pc, #172]	; (8002f48 <Calculate_Motor_Outputs+0x1dc>)
 8002e9a:	22fa      	movs	r2, #250	; 0xfa
 8002e9c:	601a      	str	r2, [r3, #0]
		esc1_output = 125;
		esc2_output = 125;
		esc3_output = 125;
		esc4_output = 125;
	}
}
 8002e9e:	e034      	b.n	8002f0a <Calculate_Motor_Outputs+0x19e>
		else if(esc4_output < 125)
 8002ea0:	4b29      	ldr	r3, [pc, #164]	; (8002f48 <Calculate_Motor_Outputs+0x1dc>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b7c      	cmp	r3, #124	; 0x7c
 8002ea6:	dc30      	bgt.n	8002f0a <Calculate_Motor_Outputs+0x19e>
			esc4_output = 125;
 8002ea8:	4b27      	ldr	r3, [pc, #156]	; (8002f48 <Calculate_Motor_Outputs+0x1dc>)
 8002eaa:	227d      	movs	r2, #125	; 0x7d
 8002eac:	601a      	str	r2, [r3, #0]
}
 8002eae:	e02c      	b.n	8002f0a <Calculate_Motor_Outputs+0x19e>
		pid_roll_setpoint = 0;
 8002eb0:	4b26      	ldr	r3, [pc, #152]	; (8002f4c <Calculate_Motor_Outputs+0x1e0>)
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
		pid_pitch_setpoint = 0;
 8002eb8:	4b25      	ldr	r3, [pc, #148]	; (8002f50 <Calculate_Motor_Outputs+0x1e4>)
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
		pid_yaw_setpoint = 0;
 8002ec0:	4b24      	ldr	r3, [pc, #144]	; (8002f54 <Calculate_Motor_Outputs+0x1e8>)
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
		pid_roll_output = 0;
 8002ec8:	4b19      	ldr	r3, [pc, #100]	; (8002f30 <Calculate_Motor_Outputs+0x1c4>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
		pid_pitch_output = 0;
 8002ece:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <Calculate_Motor_Outputs+0x1c8>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
		pid_yaw_output = 0;
 8002ed4:	4b18      	ldr	r3, [pc, #96]	; (8002f38 <Calculate_Motor_Outputs+0x1cc>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
		pid_roll_i = 0;
 8002eda:	4b1f      	ldr	r3, [pc, #124]	; (8002f58 <Calculate_Motor_Outputs+0x1ec>)
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]
		pid_pitch_i = 0;
 8002ee2:	4b1e      	ldr	r3, [pc, #120]	; (8002f5c <Calculate_Motor_Outputs+0x1f0>)
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]
		pid_yaw_i = 0;
 8002eea:	4b1d      	ldr	r3, [pc, #116]	; (8002f60 <Calculate_Motor_Outputs+0x1f4>)
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
		esc1_output = 125;
 8002ef2:	4b12      	ldr	r3, [pc, #72]	; (8002f3c <Calculate_Motor_Outputs+0x1d0>)
 8002ef4:	227d      	movs	r2, #125	; 0x7d
 8002ef6:	601a      	str	r2, [r3, #0]
		esc2_output = 125;
 8002ef8:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <Calculate_Motor_Outputs+0x1d4>)
 8002efa:	227d      	movs	r2, #125	; 0x7d
 8002efc:	601a      	str	r2, [r3, #0]
		esc3_output = 125;
 8002efe:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <Calculate_Motor_Outputs+0x1d8>)
 8002f00:	227d      	movs	r2, #125	; 0x7d
 8002f02:	601a      	str	r2, [r3, #0]
		esc4_output = 125;
 8002f04:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <Calculate_Motor_Outputs+0x1dc>)
 8002f06:	227d      	movs	r2, #125	; 0x7d
 8002f08:	601a      	str	r2, [r3, #0]
}
 8002f0a:	bf00      	nop
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	20001074 	.word	0x20001074
 8002f18:	200003ac 	.word	0x200003ac
 8002f1c:	20000024 	.word	0x20000024
 8002f20:	20000ac0 	.word	0x20000ac0
 8002f24:	200002e1 	.word	0x200002e1
 8002f28:	20000a44 	.word	0x20000a44
 8002f2c:	200002bf 	.word	0x200002bf
 8002f30:	20000a18 	.word	0x20000a18
 8002f34:	20000a1c 	.word	0x20000a1c
 8002f38:	20000400 	.word	0x20000400
 8002f3c:	20000004 	.word	0x20000004
 8002f40:	20000008 	.word	0x20000008
 8002f44:	2000000c 	.word	0x2000000c
 8002f48:	20000010 	.word	0x20000010
 8002f4c:	20000d60 	.word	0x20000d60
 8002f50:	20000d64 	.word	0x20000d64
 8002f54:	20000b58 	.word	0x20000b58
 8002f58:	20000404 	.word	0x20000404
 8002f5c:	20000a10 	.word	0x20000a10
 8002f60:	20000a14 	.word	0x20000a14
 8002f64:	00000000 	.word	0x00000000

08002f68 <Calculate_Altitude_PID>:

float kp_alt = 0, ki_alt = 0, kd_alt = 0;
float pid_alt_i = 0;

void Calculate_Altitude_PID()
{
 8002f68:	b5b0      	push	{r4, r5, r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
	total_bmp_altitude -= bmp_over_time[bmp_reading_index];
 8002f6c:	4ba8      	ldr	r3, [pc, #672]	; (8003210 <Calculate_Altitude_PID+0x2a8>)
 8002f6e:	ed93 7a00 	vldr	s14, [r3]
 8002f72:	4ba8      	ldr	r3, [pc, #672]	; (8003214 <Calculate_Altitude_PID+0x2ac>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	4aa8      	ldr	r2, [pc, #672]	; (8003218 <Calculate_Altitude_PID+0x2b0>)
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	edd3 7a00 	vldr	s15, [r3]
 8002f80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f84:	4ba2      	ldr	r3, [pc, #648]	; (8003210 <Calculate_Altitude_PID+0x2a8>)
 8002f86:	edc3 7a00 	vstr	s15, [r3]
	bmp_over_time[bmp_reading_index] = read_bmp_altitude;
 8002f8a:	4ba2      	ldr	r3, [pc, #648]	; (8003214 <Calculate_Altitude_PID+0x2ac>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	4ba2      	ldr	r3, [pc, #648]	; (800321c <Calculate_Altitude_PID+0x2b4>)
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	49a0      	ldr	r1, [pc, #640]	; (8003218 <Calculate_Altitude_PID+0x2b0>)
 8002f96:	0083      	lsls	r3, r0, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	601a      	str	r2, [r3, #0]
	total_bmp_altitude += bmp_over_time[bmp_reading_index];
 8002f9c:	4b9d      	ldr	r3, [pc, #628]	; (8003214 <Calculate_Altitude_PID+0x2ac>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	4a9d      	ldr	r2, [pc, #628]	; (8003218 <Calculate_Altitude_PID+0x2b0>)
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	ed93 7a00 	vldr	s14, [r3]
 8002faa:	4b99      	ldr	r3, [pc, #612]	; (8003210 <Calculate_Altitude_PID+0x2a8>)
 8002fac:	edd3 7a00 	vldr	s15, [r3]
 8002fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fb4:	4b96      	ldr	r3, [pc, #600]	; (8003210 <Calculate_Altitude_PID+0x2a8>)
 8002fb6:	edc3 7a00 	vstr	s15, [r3]

	fast_bmp_altitude = (total_bmp_altitude / 4.00);
 8002fba:	4b95      	ldr	r3, [pc, #596]	; (8003210 <Calculate_Altitude_PID+0x2a8>)
 8002fbc:	ed93 7a00 	vldr	s14, [r3]
 8002fc0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002fc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fc8:	4b95      	ldr	r3, [pc, #596]	; (8003220 <Calculate_Altitude_PID+0x2b8>)
 8002fca:	edc3 7a00 	vstr	s15, [r3]
	slow_bmp_altitude = (slow_bmp_altitude * 0.900) + (fast_bmp_altitude * 0.100);
 8002fce:	4b95      	ldr	r3, [pc, #596]	; (8003224 <Calculate_Altitude_PID+0x2bc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fd fab8 	bl	8000548 <__aeabi_f2d>
 8002fd8:	a381      	add	r3, pc, #516	; (adr r3, 80031e0 <Calculate_Altitude_PID+0x278>)
 8002fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fde:	f7fd fb0b 	bl	80005f8 <__aeabi_dmul>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	460c      	mov	r4, r1
 8002fe6:	4625      	mov	r5, r4
 8002fe8:	461c      	mov	r4, r3
 8002fea:	4b8d      	ldr	r3, [pc, #564]	; (8003220 <Calculate_Altitude_PID+0x2b8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fd faaa 	bl	8000548 <__aeabi_f2d>
 8002ff4:	a37c      	add	r3, pc, #496	; (adr r3, 80031e8 <Calculate_Altitude_PID+0x280>)
 8002ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffa:	f7fd fafd 	bl	80005f8 <__aeabi_dmul>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	4620      	mov	r0, r4
 8003004:	4629      	mov	r1, r5
 8003006:	f7fd f941 	bl	800028c <__adddf3>
 800300a:	4603      	mov	r3, r0
 800300c:	460c      	mov	r4, r1
 800300e:	4618      	mov	r0, r3
 8003010:	4621      	mov	r1, r4
 8003012:	f7fd fdc9 	bl	8000ba8 <__aeabi_d2f>
 8003016:	4602      	mov	r2, r0
 8003018:	4b82      	ldr	r3, [pc, #520]	; (8003224 <Calculate_Altitude_PID+0x2bc>)
 800301a:	601a      	str	r2, [r3, #0]

	pressure_difference = slow_bmp_altitude - fast_bmp_altitude;
 800301c:	4b81      	ldr	r3, [pc, #516]	; (8003224 <Calculate_Altitude_PID+0x2bc>)
 800301e:	ed93 7a00 	vldr	s14, [r3]
 8003022:	4b7f      	ldr	r3, [pc, #508]	; (8003220 <Calculate_Altitude_PID+0x2b8>)
 8003024:	edd3 7a00 	vldr	s15, [r3]
 8003028:	ee77 7a67 	vsub.f32	s15, s14, s15
 800302c:	4b7e      	ldr	r3, [pc, #504]	; (8003228 <Calculate_Altitude_PID+0x2c0>)
 800302e:	edc3 7a00 	vstr	s15, [r3]

	if(pressure_difference > 0.400)
 8003032:	4b7d      	ldr	r3, [pc, #500]	; (8003228 <Calculate_Altitude_PID+0x2c0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7fd fa86 	bl	8000548 <__aeabi_f2d>
 800303c:	a36c      	add	r3, pc, #432	; (adr r3, 80031f0 <Calculate_Altitude_PID+0x288>)
 800303e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003042:	f7fd fd69 	bl	8000b18 <__aeabi_dcmpgt>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <Calculate_Altitude_PID+0xec>
		pressure_difference = 0.400;
 800304c:	4b76      	ldr	r3, [pc, #472]	; (8003228 <Calculate_Altitude_PID+0x2c0>)
 800304e:	4a77      	ldr	r2, [pc, #476]	; (800322c <Calculate_Altitude_PID+0x2c4>)
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	e00f      	b.n	8003074 <Calculate_Altitude_PID+0x10c>
	else if(pressure_difference < -0.400)
 8003054:	4b74      	ldr	r3, [pc, #464]	; (8003228 <Calculate_Altitude_PID+0x2c0>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f7fd fa75 	bl	8000548 <__aeabi_f2d>
 800305e:	a366      	add	r3, pc, #408	; (adr r3, 80031f8 <Calculate_Altitude_PID+0x290>)
 8003060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003064:	f7fd fd3a 	bl	8000adc <__aeabi_dcmplt>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <Calculate_Altitude_PID+0x10c>
		pressure_difference = -0.400;
 800306e:	4b6e      	ldr	r3, [pc, #440]	; (8003228 <Calculate_Altitude_PID+0x2c0>)
 8003070:	4a6f      	ldr	r2, [pc, #444]	; (8003230 <Calculate_Altitude_PID+0x2c8>)
 8003072:	601a      	str	r2, [r3, #0]

	if(pressure_difference > 0.120 || pressure_difference < -0.120)
 8003074:	4b6c      	ldr	r3, [pc, #432]	; (8003228 <Calculate_Altitude_PID+0x2c0>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f7fd fa65 	bl	8000548 <__aeabi_f2d>
 800307e:	a360      	add	r3, pc, #384	; (adr r3, 8003200 <Calculate_Altitude_PID+0x298>)
 8003080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003084:	f7fd fd48 	bl	8000b18 <__aeabi_dcmpgt>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10c      	bne.n	80030a8 <Calculate_Altitude_PID+0x140>
 800308e:	4b66      	ldr	r3, [pc, #408]	; (8003228 <Calculate_Altitude_PID+0x2c0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f7fd fa58 	bl	8000548 <__aeabi_f2d>
 8003098:	a35b      	add	r3, pc, #364	; (adr r3, 8003208 <Calculate_Altitude_PID+0x2a0>)
 800309a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309e:	f7fd fd1d 	bl	8000adc <__aeabi_dcmplt>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d020      	beq.n	80030ea <Calculate_Altitude_PID+0x182>
		slow_bmp_altitude -= pressure_difference / 2.00;
 80030a8:	4b5e      	ldr	r3, [pc, #376]	; (8003224 <Calculate_Altitude_PID+0x2bc>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fd fa4b 	bl	8000548 <__aeabi_f2d>
 80030b2:	4604      	mov	r4, r0
 80030b4:	460d      	mov	r5, r1
 80030b6:	4b5c      	ldr	r3, [pc, #368]	; (8003228 <Calculate_Altitude_PID+0x2c0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fd fa44 	bl	8000548 <__aeabi_f2d>
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030c8:	f7fd fbc0 	bl	800084c <__aeabi_ddiv>
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4620      	mov	r0, r4
 80030d2:	4629      	mov	r1, r5
 80030d4:	f7fd f8d8 	bl	8000288 <__aeabi_dsub>
 80030d8:	4603      	mov	r3, r0
 80030da:	460c      	mov	r4, r1
 80030dc:	4618      	mov	r0, r3
 80030de:	4621      	mov	r1, r4
 80030e0:	f7fd fd62 	bl	8000ba8 <__aeabi_d2f>
 80030e4:	4602      	mov	r2, r0
 80030e6:	4b4f      	ldr	r3, [pc, #316]	; (8003224 <Calculate_Altitude_PID+0x2bc>)
 80030e8:	601a      	str	r2, [r3, #0]

	bmp_reading_index++;
 80030ea:	4b4a      	ldr	r3, [pc, #296]	; (8003214 <Calculate_Altitude_PID+0x2ac>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	3301      	adds	r3, #1
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	4b48      	ldr	r3, [pc, #288]	; (8003214 <Calculate_Altitude_PID+0x2ac>)
 80030f4:	701a      	strb	r2, [r3, #0]

	if(bmp_reading_index == 4)
 80030f6:	4b47      	ldr	r3, [pc, #284]	; (8003214 <Calculate_Altitude_PID+0x2ac>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d102      	bne.n	8003104 <Calculate_Altitude_PID+0x19c>
		bmp_reading_index = 0;
 80030fe:	4b45      	ldr	r3, [pc, #276]	; (8003214 <Calculate_Altitude_PID+0x2ac>)
 8003100:	2200      	movs	r2, #0
 8003102:	701a      	strb	r2, [r3, #0]

	pid_error_temp = pid_altitude_setpoint - slow_bmp_altitude;
 8003104:	4b4b      	ldr	r3, [pc, #300]	; (8003234 <Calculate_Altitude_PID+0x2cc>)
 8003106:	ed93 7a00 	vldr	s14, [r3]
 800310a:	4b46      	ldr	r3, [pc, #280]	; (8003224 <Calculate_Altitude_PID+0x2bc>)
 800310c:	edd3 7a00 	vldr	s15, [r3]
 8003110:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003114:	4b48      	ldr	r3, [pc, #288]	; (8003238 <Calculate_Altitude_PID+0x2d0>)
 8003116:	edc3 7a00 	vstr	s15, [r3]
	pid_alt_i += ki_alt * pid_error_temp;
 800311a:	4b48      	ldr	r3, [pc, #288]	; (800323c <Calculate_Altitude_PID+0x2d4>)
 800311c:	ed93 7a00 	vldr	s14, [r3]
 8003120:	4b45      	ldr	r3, [pc, #276]	; (8003238 <Calculate_Altitude_PID+0x2d0>)
 8003122:	edd3 7a00 	vldr	s15, [r3]
 8003126:	ee27 7a27 	vmul.f32	s14, s14, s15
 800312a:	4b45      	ldr	r3, [pc, #276]	; (8003240 <Calculate_Altitude_PID+0x2d8>)
 800312c:	edd3 7a00 	vldr	s15, [r3]
 8003130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003134:	4b42      	ldr	r3, [pc, #264]	; (8003240 <Calculate_Altitude_PID+0x2d8>)
 8003136:	edc3 7a00 	vstr	s15, [r3]

	if(pid_alt_i > 100)
 800313a:	4b41      	ldr	r3, [pc, #260]	; (8003240 <Calculate_Altitude_PID+0x2d8>)
 800313c:	edd3 7a00 	vldr	s15, [r3]
 8003140:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8003244 <Calculate_Altitude_PID+0x2dc>
 8003144:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800314c:	dd03      	ble.n	8003156 <Calculate_Altitude_PID+0x1ee>
		pid_alt_i = 100;
 800314e:	4b3c      	ldr	r3, [pc, #240]	; (8003240 <Calculate_Altitude_PID+0x2d8>)
 8003150:	4a3d      	ldr	r2, [pc, #244]	; (8003248 <Calculate_Altitude_PID+0x2e0>)
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	e00c      	b.n	8003170 <Calculate_Altitude_PID+0x208>
	else if(pid_alt_i < -100)
 8003156:	4b3a      	ldr	r3, [pc, #232]	; (8003240 <Calculate_Altitude_PID+0x2d8>)
 8003158:	edd3 7a00 	vldr	s15, [r3]
 800315c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800324c <Calculate_Altitude_PID+0x2e4>
 8003160:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003168:	d502      	bpl.n	8003170 <Calculate_Altitude_PID+0x208>
		pid_alt_i = -100;
 800316a:	4b35      	ldr	r3, [pc, #212]	; (8003240 <Calculate_Altitude_PID+0x2d8>)
 800316c:	4a38      	ldr	r2, [pc, #224]	; (8003250 <Calculate_Altitude_PID+0x2e8>)
 800316e:	601a      	str	r2, [r3, #0]

	altitude_pid_output = (pid_error_temp * kp_alt) + pid_alt_i + ((pid_error_temp - pid_alt_last_error) * kd_alt);
 8003170:	4b31      	ldr	r3, [pc, #196]	; (8003238 <Calculate_Altitude_PID+0x2d0>)
 8003172:	ed93 7a00 	vldr	s14, [r3]
 8003176:	4b37      	ldr	r3, [pc, #220]	; (8003254 <Calculate_Altitude_PID+0x2ec>)
 8003178:	edd3 7a00 	vldr	s15, [r3]
 800317c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003180:	4b2f      	ldr	r3, [pc, #188]	; (8003240 <Calculate_Altitude_PID+0x2d8>)
 8003182:	edd3 7a00 	vldr	s15, [r3]
 8003186:	ee37 7a27 	vadd.f32	s14, s14, s15
 800318a:	4b2b      	ldr	r3, [pc, #172]	; (8003238 <Calculate_Altitude_PID+0x2d0>)
 800318c:	edd3 6a00 	vldr	s13, [r3]
 8003190:	4b31      	ldr	r3, [pc, #196]	; (8003258 <Calculate_Altitude_PID+0x2f0>)
 8003192:	edd3 7a00 	vldr	s15, [r3]
 8003196:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800319a:	4b30      	ldr	r3, [pc, #192]	; (800325c <Calculate_Altitude_PID+0x2f4>)
 800319c:	edd3 7a00 	vldr	s15, [r3]
 80031a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031ac:	ee17 2a90 	vmov	r2, s15
 80031b0:	4b2b      	ldr	r3, [pc, #172]	; (8003260 <Calculate_Altitude_PID+0x2f8>)
 80031b2:	601a      	str	r2, [r3, #0]

	if(altitude_pid_output > 110)
 80031b4:	4b2a      	ldr	r3, [pc, #168]	; (8003260 <Calculate_Altitude_PID+0x2f8>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b6e      	cmp	r3, #110	; 0x6e
 80031ba:	dd03      	ble.n	80031c4 <Calculate_Altitude_PID+0x25c>
		altitude_pid_output = 110;
 80031bc:	4b28      	ldr	r3, [pc, #160]	; (8003260 <Calculate_Altitude_PID+0x2f8>)
 80031be:	226e      	movs	r2, #110	; 0x6e
 80031c0:	601a      	str	r2, [r3, #0]
	else if(altitude_pid_output < -110)
		altitude_pid_output = -110;
}
 80031c2:	e008      	b.n	80031d6 <Calculate_Altitude_PID+0x26e>
	else if(altitude_pid_output < -110)
 80031c4:	4b26      	ldr	r3, [pc, #152]	; (8003260 <Calculate_Altitude_PID+0x2f8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f113 0f6e 	cmn.w	r3, #110	; 0x6e
 80031cc:	da03      	bge.n	80031d6 <Calculate_Altitude_PID+0x26e>
		altitude_pid_output = -110;
 80031ce:	4b24      	ldr	r3, [pc, #144]	; (8003260 <Calculate_Altitude_PID+0x2f8>)
 80031d0:	f06f 026d 	mvn.w	r2, #109	; 0x6d
 80031d4:	601a      	str	r2, [r3, #0]
}
 80031d6:	bf00      	nop
 80031d8:	bdb0      	pop	{r4, r5, r7, pc}
 80031da:	bf00      	nop
 80031dc:	f3af 8000 	nop.w
 80031e0:	cccccccd 	.word	0xcccccccd
 80031e4:	3feccccc 	.word	0x3feccccc
 80031e8:	9999999a 	.word	0x9999999a
 80031ec:	3fb99999 	.word	0x3fb99999
 80031f0:	9999999a 	.word	0x9999999a
 80031f4:	3fd99999 	.word	0x3fd99999
 80031f8:	9999999a 	.word	0x9999999a
 80031fc:	bfd99999 	.word	0xbfd99999
 8003200:	eb851eb8 	.word	0xeb851eb8
 8003204:	3fbeb851 	.word	0x3fbeb851
 8003208:	eb851eb8 	.word	0xeb851eb8
 800320c:	bfbeb851 	.word	0xbfbeb851
 8003210:	20000d6c 	.word	0x20000d6c
 8003214:	2000028c 	.word	0x2000028c
 8003218:	200003b0 	.word	0x200003b0
 800321c:	20000320 	.word	0x20000320
 8003220:	20000294 	.word	0x20000294
 8003224:	20000298 	.word	0x20000298
 8003228:	20000290 	.word	0x20000290
 800322c:	3ecccccd 	.word	0x3ecccccd
 8003230:	becccccd 	.word	0xbecccccd
 8003234:	20000018 	.word	0x20000018
 8003238:	20000d70 	.word	0x20000d70
 800323c:	200002a4 	.word	0x200002a4
 8003240:	200002ac 	.word	0x200002ac
 8003244:	42c80000 	.word	0x42c80000
 8003248:	42c80000 	.word	0x42c80000
 800324c:	c2c80000 	.word	0xc2c80000
 8003250:	c2c80000 	.word	0xc2c80000
 8003254:	200002a0 	.word	0x200002a0
 8003258:	2000029c 	.word	0x2000029c
 800325c:	200002a8 	.word	0x200002a8
 8003260:	20000a44 	.word	0x20000a44

08003264 <Control_Loop>:
uint8_t launched = 0, launching = 0, landing = 0;
uint8_t ready_for_next_command = 1, ready_for_next_command_high_priority = 1;
uint8_t manual_mode = 0;

void Control_Loop()
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
	if(high_priority_program_width > 0 && ready_for_next_command_high_priority)
 800326a:	4b28      	ldr	r3, [pc, #160]	; (800330c <Control_Loop+0xa8>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d026      	beq.n	80032c0 <Control_Loop+0x5c>
 8003272:	4b27      	ldr	r3, [pc, #156]	; (8003310 <Control_Loop+0xac>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d022      	beq.n	80032c0 <Control_Loop+0x5c>
	{
		if(GetMillisDifference(&high_priority_control_loop_wait_timer) >= high_priority_control_loop_wait_time)
 800327a:	4826      	ldr	r0, [pc, #152]	; (8003314 <Control_Loop+0xb0>)
 800327c:	f001 fc80 	bl	8004b80 <GetMillisDifference>
 8003280:	4602      	mov	r2, r0
 8003282:	4b25      	ldr	r3, [pc, #148]	; (8003318 <Control_Loop+0xb4>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d33c      	bcc.n	8003304 <Control_Loop+0xa0>
		{
			uint16_t increment_index = Parse_Command((uint8_t *)&high_priority_program_buffer, high_priority_program_counter, 1);
 800328a:	4b24      	ldr	r3, [pc, #144]	; (800331c <Control_Loop+0xb8>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	b29b      	uxth	r3, r3
 8003290:	2201      	movs	r2, #1
 8003292:	4619      	mov	r1, r3
 8003294:	4822      	ldr	r0, [pc, #136]	; (8003320 <Control_Loop+0xbc>)
 8003296:	f000 f84f 	bl	8003338 <Parse_Command>
 800329a:	4603      	mov	r3, r0
 800329c:	80fb      	strh	r3, [r7, #6]
			high_priority_program_width -= increment_index;
 800329e:	4b1b      	ldr	r3, [pc, #108]	; (800330c <Control_Loop+0xa8>)
 80032a0:	781a      	ldrb	r2, [r3, #0]
 80032a2:	88fb      	ldrh	r3, [r7, #6]
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	4b18      	ldr	r3, [pc, #96]	; (800330c <Control_Loop+0xa8>)
 80032ac:	701a      	strb	r2, [r3, #0]
			high_priority_program_counter += increment_index;
 80032ae:	88fb      	ldrh	r3, [r7, #6]
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	4b1a      	ldr	r3, [pc, #104]	; (800331c <Control_Loop+0xb8>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	4413      	add	r3, r2
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	4b18      	ldr	r3, [pc, #96]	; (800331c <Control_Loop+0xb8>)
 80032bc:	701a      	strb	r2, [r3, #0]
		if(GetMillisDifference(&high_priority_control_loop_wait_timer) >= high_priority_control_loop_wait_time)
 80032be:	e021      	b.n	8003304 <Control_Loop+0xa0>
		}
	}
	else if(program_counter < 512 && ready_for_next_command)
 80032c0:	4b18      	ldr	r3, [pc, #96]	; (8003324 <Control_Loop+0xc0>)
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032c8:	d21c      	bcs.n	8003304 <Control_Loop+0xa0>
 80032ca:	4b17      	ldr	r3, [pc, #92]	; (8003328 <Control_Loop+0xc4>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d018      	beq.n	8003304 <Control_Loop+0xa0>
	{
		if(GetMillisDifference(&control_loop_wait_timer) >= control_loop_wait_time)
 80032d2:	4816      	ldr	r0, [pc, #88]	; (800332c <Control_Loop+0xc8>)
 80032d4:	f001 fc54 	bl	8004b80 <GetMillisDifference>
 80032d8:	4602      	mov	r2, r0
 80032da:	4b15      	ldr	r3, [pc, #84]	; (8003330 <Control_Loop+0xcc>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d310      	bcc.n	8003304 <Control_Loop+0xa0>
		{
			uint16_t increment_index = Parse_Command((uint8_t *)&program_buffer, program_counter, 0);
 80032e2:	4b10      	ldr	r3, [pc, #64]	; (8003324 <Control_Loop+0xc0>)
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	2200      	movs	r2, #0
 80032e8:	4619      	mov	r1, r3
 80032ea:	4812      	ldr	r0, [pc, #72]	; (8003334 <Control_Loop+0xd0>)
 80032ec:	f000 f824 	bl	8003338 <Parse_Command>
 80032f0:	4603      	mov	r3, r0
 80032f2:	80bb      	strh	r3, [r7, #4]
			program_counter += increment_index;
 80032f4:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <Control_Loop+0xc0>)
 80032f6:	881a      	ldrh	r2, [r3, #0]
 80032f8:	88bb      	ldrh	r3, [r7, #4]
 80032fa:	4413      	add	r3, r2
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	4b09      	ldr	r3, [pc, #36]	; (8003324 <Control_Loop+0xc0>)
 8003300:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8003302:	e7ff      	b.n	8003304 <Control_Loop+0xa0>
 8003304:	bf00      	nop
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	200002b3 	.word	0x200002b3
 8003310:	2000001d 	.word	0x2000001d
 8003314:	20000ac4 	.word	0x20000ac4
 8003318:	200002b8 	.word	0x200002b8
 800331c:	200002b2 	.word	0x200002b2
 8003320:	20000a20 	.word	0x20000a20
 8003324:	200002b0 	.word	0x200002b0
 8003328:	2000001c 	.word	0x2000001c
 800332c:	20000ad8 	.word	0x20000ad8
 8003330:	200002b4 	.word	0x200002b4
 8003334:	20000810 	.word	0x20000810

08003338 <Parse_Command>:

uint16_t Parse_Command(uint8_t *cmd_array, uint16_t cmd_index, uint8_t high_priority)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	807b      	strh	r3, [r7, #2]
 8003344:	4613      	mov	r3, r2
 8003346:	707b      	strb	r3, [r7, #1]
	uint16_t output_index = 0;
 8003348:	2300      	movs	r3, #0
 800334a:	81fb      	strh	r3, [r7, #14]

	switch(cmd_array[cmd_index])
 800334c:	887b      	ldrh	r3, [r7, #2]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b05      	cmp	r3, #5
 8003356:	d85f      	bhi.n	8003418 <Parse_Command+0xe0>
 8003358:	a201      	add	r2, pc, #4	; (adr r2, 8003360 <Parse_Command+0x28>)
 800335a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335e:	bf00      	nop
 8003360:	08003379 	.word	0x08003379
 8003364:	08003381 	.word	0x08003381
 8003368:	080033b7 	.word	0x080033b7
 800336c:	080033f7 	.word	0x080033f7
 8003370:	080033fd 	.word	0x080033fd
 8003374:	0800340b 	.word	0x0800340b
	{
	case 0x00:	//No OP
		output_index++;
 8003378:	89fb      	ldrh	r3, [r7, #14]
 800337a:	3301      	adds	r3, #1
 800337c:	81fb      	strh	r3, [r7, #14]
		break;
 800337e:	e04b      	b.n	8003418 <Parse_Command+0xe0>
	case 0x01:	//Toggle LED: uint8_t
		if(cmd_array[cmd_index + 1] == 0x01)
 8003380:	887b      	ldrh	r3, [r7, #2]
 8003382:	3301      	adds	r3, #1
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	4413      	add	r3, r2
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d104      	bne.n	8003398 <Parse_Command+0x60>
		{
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800338e:	2102      	movs	r1, #2
 8003390:	4824      	ldr	r0, [pc, #144]	; (8003424 <Parse_Command+0xec>)
 8003392:	f003 fce6 	bl	8006d62 <HAL_GPIO_TogglePin>
 8003396:	e00a      	b.n	80033ae <Parse_Command+0x76>
		}
		else if(cmd_array[cmd_index + 1] == 0x02)
 8003398:	887b      	ldrh	r3, [r7, #2]
 800339a:	3301      	adds	r3, #1
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	4413      	add	r3, r2
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d103      	bne.n	80033ae <Parse_Command+0x76>
		{
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80033a6:	2104      	movs	r1, #4
 80033a8:	481e      	ldr	r0, [pc, #120]	; (8003424 <Parse_Command+0xec>)
 80033aa:	f003 fcda 	bl	8006d62 <HAL_GPIO_TogglePin>
		}

		output_index += 2;
 80033ae:	89fb      	ldrh	r3, [r7, #14]
 80033b0:	3302      	adds	r3, #2
 80033b2:	81fb      	strh	r3, [r7, #14]
		break;
 80033b4:	e030      	b.n	8003418 <Parse_Command+0xe0>
	case 0x02:	//Wait: uint32_t
		if(high_priority)
 80033b6:	787b      	ldrb	r3, [r7, #1]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00c      	beq.n	80033d6 <Parse_Command+0x9e>
		{
			high_priority_control_loop_wait_timer = GetMillis();
 80033bc:	f001 fbce 	bl	8004b5c <GetMillis>
 80033c0:	4602      	mov	r2, r0
 80033c2:	4b19      	ldr	r3, [pc, #100]	; (8003428 <Parse_Command+0xf0>)
 80033c4:	601a      	str	r2, [r3, #0]
			high_priority_control_loop_wait_time = *((uint32_t *)&cmd_array[cmd_index + 1]);
 80033c6:	887b      	ldrh	r3, [r7, #2]
 80033c8:	3301      	adds	r3, #1
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	4413      	add	r3, r2
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a16      	ldr	r2, [pc, #88]	; (800342c <Parse_Command+0xf4>)
 80033d2:	6013      	str	r3, [r2, #0]
 80033d4:	e00b      	b.n	80033ee <Parse_Command+0xb6>
		}
		else
		{
			control_loop_wait_timer = GetMillis();
 80033d6:	f001 fbc1 	bl	8004b5c <GetMillis>
 80033da:	4602      	mov	r2, r0
 80033dc:	4b14      	ldr	r3, [pc, #80]	; (8003430 <Parse_Command+0xf8>)
 80033de:	601a      	str	r2, [r3, #0]
			control_loop_wait_time = *((uint32_t *)&cmd_array[cmd_index + 1]);
 80033e0:	887b      	ldrh	r3, [r7, #2]
 80033e2:	3301      	adds	r3, #1
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	4413      	add	r3, r2
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a12      	ldr	r2, [pc, #72]	; (8003434 <Parse_Command+0xfc>)
 80033ec:	6013      	str	r3, [r2, #0]
		}
		output_index += 5;
 80033ee:	89fb      	ldrh	r3, [r7, #14]
 80033f0:	3305      	adds	r3, #5
 80033f2:	81fb      	strh	r3, [r7, #14]
		break;
 80033f4:	e010      	b.n	8003418 <Parse_Command+0xe0>
	case 0x03:	//Restart program
		output_index = 0;
 80033f6:	2300      	movs	r3, #0
 80033f8:	81fb      	strh	r3, [r7, #14]
		break;
 80033fa:	e00d      	b.n	8003418 <Parse_Command+0xe0>
	case 0x04:	//Launch
		Parse_Requested_State(LAUNCHED);
 80033fc:	2001      	movs	r0, #1
 80033fe:	f000 f81b 	bl	8003438 <Parse_Requested_State>
		output_index++;
 8003402:	89fb      	ldrh	r3, [r7, #14]
 8003404:	3301      	adds	r3, #1
 8003406:	81fb      	strh	r3, [r7, #14]
		break;
 8003408:	e006      	b.n	8003418 <Parse_Command+0xe0>
	case 0x05:	//Land
		Parse_Requested_State(LANDED);
 800340a:	2000      	movs	r0, #0
 800340c:	f000 f814 	bl	8003438 <Parse_Requested_State>
		output_index++;
 8003410:	89fb      	ldrh	r3, [r7, #14]
 8003412:	3301      	adds	r3, #1
 8003414:	81fb      	strh	r3, [r7, #14]
		break;
 8003416:	bf00      	nop
	}

	return output_index;
 8003418:	89fb      	ldrh	r3, [r7, #14]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40020800 	.word	0x40020800
 8003428:	20000ac4 	.word	0x20000ac4
 800342c:	200002b8 	.word	0x200002b8
 8003430:	20000ad8 	.word	0x20000ad8
 8003434:	200002b4 	.word	0x200002b4

08003438 <Parse_Requested_State>:

void Parse_Requested_State(int32_t requested_state)
{
 8003438:	b590      	push	{r4, r7, lr}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
	switch(requested_state)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <Parse_Requested_State+0x14>
 8003446:	2b01      	cmp	r3, #1
 8003448:	d022      	beq.n	8003490 <Parse_Requested_State+0x58>
			sprintf((char *)print_text_buffer, "%s", "Launching...\n");
			PrintManualPacket();
		}
		break;
	}
}
 800344a:	e04c      	b.n	80034e6 <Parse_Requested_State+0xae>
		if(launched && !landing)
 800344c:	4b28      	ldr	r3, [pc, #160]	; (80034f0 <Parse_Requested_State+0xb8>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d045      	beq.n	80034e0 <Parse_Requested_State+0xa8>
 8003454:	4b27      	ldr	r3, [pc, #156]	; (80034f4 <Parse_Requested_State+0xbc>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d141      	bne.n	80034e0 <Parse_Requested_State+0xa8>
			landing = 1;
 800345c:	4b25      	ldr	r3, [pc, #148]	; (80034f4 <Parse_Requested_State+0xbc>)
 800345e:	2201      	movs	r2, #1
 8003460:	701a      	strb	r2, [r3, #0]
			ready_for_next_command = 0;
 8003462:	4b25      	ldr	r3, [pc, #148]	; (80034f8 <Parse_Requested_State+0xc0>)
 8003464:	2200      	movs	r2, #0
 8003466:	701a      	strb	r2, [r3, #0]
			ready_for_next_command_high_priority = 0;
 8003468:	4b24      	ldr	r3, [pc, #144]	; (80034fc <Parse_Requested_State+0xc4>)
 800346a:	2200      	movs	r2, #0
 800346c:	701a      	strb	r2, [r3, #0]
			launch_timer = GetMillis();
 800346e:	f001 fb75 	bl	8004b5c <GetMillis>
 8003472:	4602      	mov	r2, r0
 8003474:	4b22      	ldr	r3, [pc, #136]	; (8003500 <Parse_Requested_State+0xc8>)
 8003476:	601a      	str	r2, [r3, #0]
			ClearPrintBuffer();
 8003478:	f002 f930 	bl	80056dc <ClearPrintBuffer>
			sprintf((char *)print_text_buffer, "%s", "Landing...\n");
 800347c:	4a21      	ldr	r2, [pc, #132]	; (8003504 <Parse_Requested_State+0xcc>)
 800347e:	4b22      	ldr	r3, [pc, #136]	; (8003508 <Parse_Requested_State+0xd0>)
 8003480:	4614      	mov	r4, r2
 8003482:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003484:	6020      	str	r0, [r4, #0]
 8003486:	6061      	str	r1, [r4, #4]
 8003488:	60a2      	str	r2, [r4, #8]
			PrintManualPacket();
 800348a:	f002 f941 	bl	8005710 <PrintManualPacket>
		break;
 800348e:	e027      	b.n	80034e0 <Parse_Requested_State+0xa8>
		if(!launched && !launching)
 8003490:	4b17      	ldr	r3, [pc, #92]	; (80034f0 <Parse_Requested_State+0xb8>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d125      	bne.n	80034e4 <Parse_Requested_State+0xac>
 8003498:	4b1c      	ldr	r3, [pc, #112]	; (800350c <Parse_Requested_State+0xd4>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d121      	bne.n	80034e4 <Parse_Requested_State+0xac>
			launching = 1;
 80034a0:	4b1a      	ldr	r3, [pc, #104]	; (800350c <Parse_Requested_State+0xd4>)
 80034a2:	2201      	movs	r2, #1
 80034a4:	701a      	strb	r2, [r3, #0]
			acc_magnitude_at_start = acc_magnitude;
 80034a6:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <Parse_Requested_State+0xd8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a1a      	ldr	r2, [pc, #104]	; (8003514 <Parse_Requested_State+0xdc>)
 80034ac:	6013      	str	r3, [r2, #0]
			ready_for_next_command = 0;
 80034ae:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <Parse_Requested_State+0xc0>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	701a      	strb	r2, [r3, #0]
			ready_for_next_command_high_priority = 0;
 80034b4:	4b11      	ldr	r3, [pc, #68]	; (80034fc <Parse_Requested_State+0xc4>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	701a      	strb	r2, [r3, #0]
			launch_timer = GetMillis();
 80034ba:	f001 fb4f 	bl	8004b5c <GetMillis>
 80034be:	4602      	mov	r2, r0
 80034c0:	4b0f      	ldr	r3, [pc, #60]	; (8003500 <Parse_Requested_State+0xc8>)
 80034c2:	601a      	str	r2, [r3, #0]
			ClearPrintBuffer();
 80034c4:	f002 f90a 	bl	80056dc <ClearPrintBuffer>
			sprintf((char *)print_text_buffer, "%s", "Launching...\n");
 80034c8:	4a0e      	ldr	r2, [pc, #56]	; (8003504 <Parse_Requested_State+0xcc>)
 80034ca:	4b13      	ldr	r3, [pc, #76]	; (8003518 <Parse_Requested_State+0xe0>)
 80034cc:	4614      	mov	r4, r2
 80034ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 80034d0:	6020      	str	r0, [r4, #0]
 80034d2:	6061      	str	r1, [r4, #4]
 80034d4:	60a2      	str	r2, [r4, #8]
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	81a3      	strh	r3, [r4, #12]
			PrintManualPacket();
 80034da:	f002 f919 	bl	8005710 <PrintManualPacket>
		break;
 80034de:	e001      	b.n	80034e4 <Parse_Requested_State+0xac>
		break;
 80034e0:	bf00      	nop
 80034e2:	e000      	b.n	80034e6 <Parse_Requested_State+0xae>
		break;
 80034e4:	bf00      	nop
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd90      	pop	{r4, r7, pc}
 80034ee:	bf00      	nop
 80034f0:	200002bc 	.word	0x200002bc
 80034f4:	200002be 	.word	0x200002be
 80034f8:	2000001c 	.word	0x2000001c
 80034fc:	2000001d 	.word	0x2000001d
 8003500:	20000b54 	.word	0x20000b54
 8003504:	200010c0 	.word	0x200010c0
 8003508:	080134d8 	.word	0x080134d8
 800350c:	200002bd 	.word	0x200002bd
 8003510:	20000fd8 	.word	0x20000fd8
 8003514:	20000fbc 	.word	0x20000fbc
 8003518:	080134e4 	.word	0x080134e4

0800351c <Launch_Behavior>:
int32_t idle_throttle = 125;
uint8_t z_acc_fast_reading_index = 0, z_acc_slow_reading_index = 0;
uint32_t launch_timer;

void Launch_Behavior()
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af02      	add	r7, sp, #8
	z_acc_fast_total -= z_acc_fast[z_acc_fast_reading_index];
 8003522:	4b42      	ldr	r3, [pc, #264]	; (800362c <Launch_Behavior+0x110>)
 8003524:	ed93 7a00 	vldr	s14, [r3]
 8003528:	4b41      	ldr	r3, [pc, #260]	; (8003630 <Launch_Behavior+0x114>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	4a41      	ldr	r2, [pc, #260]	; (8003634 <Launch_Behavior+0x118>)
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	edd3 7a00 	vldr	s15, [r3]
 8003536:	ee77 7a67 	vsub.f32	s15, s14, s15
 800353a:	4b3c      	ldr	r3, [pc, #240]	; (800362c <Launch_Behavior+0x110>)
 800353c:	edc3 7a00 	vstr	s15, [r3]
	z_acc_fast[z_acc_fast_reading_index] = acc_magnitude;
 8003540:	4b3b      	ldr	r3, [pc, #236]	; (8003630 <Launch_Behavior+0x114>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	4b3c      	ldr	r3, [pc, #240]	; (8003638 <Launch_Behavior+0x11c>)
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	493a      	ldr	r1, [pc, #232]	; (8003634 <Launch_Behavior+0x118>)
 800354c:	0083      	lsls	r3, r0, #2
 800354e:	440b      	add	r3, r1
 8003550:	601a      	str	r2, [r3, #0]
	z_acc_fast_total += z_acc_fast[z_acc_fast_reading_index];
 8003552:	4b37      	ldr	r3, [pc, #220]	; (8003630 <Launch_Behavior+0x114>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	4a37      	ldr	r2, [pc, #220]	; (8003634 <Launch_Behavior+0x118>)
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	ed93 7a00 	vldr	s14, [r3]
 8003560:	4b32      	ldr	r3, [pc, #200]	; (800362c <Launch_Behavior+0x110>)
 8003562:	edd3 7a00 	vldr	s15, [r3]
 8003566:	ee77 7a27 	vadd.f32	s15, s14, s15
 800356a:	4b30      	ldr	r3, [pc, #192]	; (800362c <Launch_Behavior+0x110>)
 800356c:	edc3 7a00 	vstr	s15, [r3]

	z_acc_fast_reading_index++;
 8003570:	4b2f      	ldr	r3, [pc, #188]	; (8003630 <Launch_Behavior+0x114>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	3301      	adds	r3, #1
 8003576:	b2da      	uxtb	r2, r3
 8003578:	4b2d      	ldr	r3, [pc, #180]	; (8003630 <Launch_Behavior+0x114>)
 800357a:	701a      	strb	r2, [r3, #0]

	if(z_acc_fast_reading_index == 25)
 800357c:	4b2c      	ldr	r3, [pc, #176]	; (8003630 <Launch_Behavior+0x114>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b19      	cmp	r3, #25
 8003582:	d102      	bne.n	800358a <Launch_Behavior+0x6e>
	{
		z_acc_fast_reading_index = 0;
 8003584:	4b2a      	ldr	r3, [pc, #168]	; (8003630 <Launch_Behavior+0x114>)
 8003586:	2200      	movs	r2, #0
 8003588:	701a      	strb	r2, [r3, #0]
	}

	if(GetMillisDifference(&launch_timer) >= 1000)
 800358a:	482c      	ldr	r0, [pc, #176]	; (800363c <Launch_Behavior+0x120>)
 800358c:	f001 faf8 	bl	8004b80 <GetMillisDifference>
 8003590:	4603      	mov	r3, r0
 8003592:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003596:	d346      	bcc.n	8003626 <Launch_Behavior+0x10a>
	{
		hover_throttle += 0.0625;
 8003598:	4b29      	ldr	r3, [pc, #164]	; (8003640 <Launch_Behavior+0x124>)
 800359a:	edd3 7a00 	vldr	s15, [r3]
 800359e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8003644 <Launch_Behavior+0x128>
 80035a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035a6:	4b26      	ldr	r3, [pc, #152]	; (8003640 <Launch_Behavior+0x124>)
 80035a8:	edc3 7a00 	vstr	s15, [r3]
		idle_throttle = (int32_t)hover_throttle;
 80035ac:	4b24      	ldr	r3, [pc, #144]	; (8003640 <Launch_Behavior+0x124>)
 80035ae:	edd3 7a00 	vldr	s15, [r3]
 80035b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035b6:	ee17 2a90 	vmov	r2, s15
 80035ba:	4b23      	ldr	r3, [pc, #140]	; (8003648 <Launch_Behavior+0x12c>)
 80035bc:	601a      	str	r2, [r3, #0]

		if((z_acc_fast_total / 25) - acc_magnitude_at_start > 600)
 80035be:	4b1b      	ldr	r3, [pc, #108]	; (800362c <Launch_Behavior+0x110>)
 80035c0:	edd3 7a00 	vldr	s15, [r3]
 80035c4:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80035c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80035cc:	4b1f      	ldr	r3, [pc, #124]	; (800364c <Launch_Behavior+0x130>)
 80035ce:	edd3 7a00 	vldr	s15, [r3]
 80035d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035d6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003650 <Launch_Behavior+0x134>
 80035da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e2:	dc00      	bgt.n	80035e6 <Launch_Behavior+0xca>
			ClearPrintBuffer();
			sprintf((char *)print_text_buffer, "%s%ld%s", "Launched: ", idle_throttle, "\n");
			PrintManualPacket();
		}
	}
}
 80035e4:	e01f      	b.n	8003626 <Launch_Behavior+0x10a>
			launched = 1;
 80035e6:	4b1b      	ldr	r3, [pc, #108]	; (8003654 <Launch_Behavior+0x138>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	701a      	strb	r2, [r3, #0]
			launching = 0;
 80035ec:	4b1a      	ldr	r3, [pc, #104]	; (8003658 <Launch_Behavior+0x13c>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	701a      	strb	r2, [r3, #0]
			landing = 0;
 80035f2:	4b1a      	ldr	r3, [pc, #104]	; (800365c <Launch_Behavior+0x140>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	701a      	strb	r2, [r3, #0]
			ready_for_next_command = 1;
 80035f8:	4b19      	ldr	r3, [pc, #100]	; (8003660 <Launch_Behavior+0x144>)
 80035fa:	2201      	movs	r2, #1
 80035fc:	701a      	strb	r2, [r3, #0]
			ready_for_next_command_high_priority = 1;
 80035fe:	4b19      	ldr	r3, [pc, #100]	; (8003664 <Launch_Behavior+0x148>)
 8003600:	2201      	movs	r2, #1
 8003602:	701a      	strb	r2, [r3, #0]
			altitude_hold_flag = 1;
 8003604:	4b18      	ldr	r3, [pc, #96]	; (8003668 <Launch_Behavior+0x14c>)
 8003606:	2201      	movs	r2, #1
 8003608:	701a      	strb	r2, [r3, #0]
			ClearPrintBuffer();
 800360a:	f002 f867 	bl	80056dc <ClearPrintBuffer>
			sprintf((char *)print_text_buffer, "%s%ld%s", "Launched: ", idle_throttle, "\n");
 800360e:	4b0e      	ldr	r3, [pc, #56]	; (8003648 <Launch_Behavior+0x12c>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	4b16      	ldr	r3, [pc, #88]	; (800366c <Launch_Behavior+0x150>)
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	4613      	mov	r3, r2
 8003618:	4a15      	ldr	r2, [pc, #84]	; (8003670 <Launch_Behavior+0x154>)
 800361a:	4916      	ldr	r1, [pc, #88]	; (8003674 <Launch_Behavior+0x158>)
 800361c:	4816      	ldr	r0, [pc, #88]	; (8003678 <Launch_Behavior+0x15c>)
 800361e:	f00c ff43 	bl	80104a8 <siprintf>
			PrintManualPacket();
 8003622:	f002 f875 	bl	8005710 <PrintManualPacket>
}
 8003626:	bf00      	nop
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	20000d68 	.word	0x20000d68
 8003630:	200002c0 	.word	0x200002c0
 8003634:	20000a48 	.word	0x20000a48
 8003638:	20000fd8 	.word	0x20000fd8
 800363c:	20000b54 	.word	0x20000b54
 8003640:	20000020 	.word	0x20000020
 8003644:	3d800000 	.word	0x3d800000
 8003648:	20000024 	.word	0x20000024
 800364c:	20000fbc 	.word	0x20000fbc
 8003650:	44160000 	.word	0x44160000
 8003654:	200002bc 	.word	0x200002bc
 8003658:	200002bd 	.word	0x200002bd
 800365c:	200002be 	.word	0x200002be
 8003660:	2000001c 	.word	0x2000001c
 8003664:	2000001d 	.word	0x2000001d
 8003668:	200002e1 	.word	0x200002e1
 800366c:	08013508 	.word	0x08013508
 8003670:	080134f4 	.word	0x080134f4
 8003674:	08013500 	.word	0x08013500
 8003678:	200010c0 	.word	0x200010c0
 800367c:	00000000 	.word	0x00000000

08003680 <Land_Behavior>:

float temp_max_acc = 0;

void Land_Behavior()
{
 8003680:	b598      	push	{r3, r4, r7, lr}
 8003682:	af00      	add	r7, sp, #0
	z_acc_fast_total -= z_acc_fast[z_acc_fast_reading_index];
 8003684:	4b62      	ldr	r3, [pc, #392]	; (8003810 <Land_Behavior+0x190>)
 8003686:	ed93 7a00 	vldr	s14, [r3]
 800368a:	4b62      	ldr	r3, [pc, #392]	; (8003814 <Land_Behavior+0x194>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	4a62      	ldr	r2, [pc, #392]	; (8003818 <Land_Behavior+0x198>)
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	edd3 7a00 	vldr	s15, [r3]
 8003698:	ee77 7a67 	vsub.f32	s15, s14, s15
 800369c:	4b5c      	ldr	r3, [pc, #368]	; (8003810 <Land_Behavior+0x190>)
 800369e:	edc3 7a00 	vstr	s15, [r3]
	z_acc_fast[z_acc_fast_reading_index] = acc_magnitude;
 80036a2:	4b5c      	ldr	r3, [pc, #368]	; (8003814 <Land_Behavior+0x194>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	4b5c      	ldr	r3, [pc, #368]	; (800381c <Land_Behavior+0x19c>)
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	495a      	ldr	r1, [pc, #360]	; (8003818 <Land_Behavior+0x198>)
 80036ae:	0083      	lsls	r3, r0, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	601a      	str	r2, [r3, #0]
	z_acc_fast_total += z_acc_fast[z_acc_fast_reading_index];
 80036b4:	4b57      	ldr	r3, [pc, #348]	; (8003814 <Land_Behavior+0x194>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	4a57      	ldr	r2, [pc, #348]	; (8003818 <Land_Behavior+0x198>)
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	ed93 7a00 	vldr	s14, [r3]
 80036c2:	4b53      	ldr	r3, [pc, #332]	; (8003810 <Land_Behavior+0x190>)
 80036c4:	edd3 7a00 	vldr	s15, [r3]
 80036c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036cc:	4b50      	ldr	r3, [pc, #320]	; (8003810 <Land_Behavior+0x190>)
 80036ce:	edc3 7a00 	vstr	s15, [r3]

	z_acc_fast_reading_index++;
 80036d2:	4b50      	ldr	r3, [pc, #320]	; (8003814 <Land_Behavior+0x194>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	3301      	adds	r3, #1
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	4b4e      	ldr	r3, [pc, #312]	; (8003814 <Land_Behavior+0x194>)
 80036dc:	701a      	strb	r2, [r3, #0]

	if(z_acc_fast_reading_index == 25)
 80036de:	4b4d      	ldr	r3, [pc, #308]	; (8003814 <Land_Behavior+0x194>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	2b19      	cmp	r3, #25
 80036e4:	d102      	bne.n	80036ec <Land_Behavior+0x6c>
	{
		z_acc_fast_reading_index = 0;
 80036e6:	4b4b      	ldr	r3, [pc, #300]	; (8003814 <Land_Behavior+0x194>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	701a      	strb	r2, [r3, #0]
	}

	if(GetMillisDifference(&launch_timer) >= 1000)
 80036ec:	484c      	ldr	r0, [pc, #304]	; (8003820 <Land_Behavior+0x1a0>)
 80036ee:	f001 fa47 	bl	8004b80 <GetMillisDifference>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036f8:	f0c0 8083 	bcc.w	8003802 <Land_Behavior+0x182>
	{
		pid_altitude_setpoint -= 0.003;
 80036fc:	4b49      	ldr	r3, [pc, #292]	; (8003824 <Land_Behavior+0x1a4>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	f7fc ff21 	bl	8000548 <__aeabi_f2d>
 8003706:	a340      	add	r3, pc, #256	; (adr r3, 8003808 <Land_Behavior+0x188>)
 8003708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370c:	f7fc fdbc 	bl	8000288 <__aeabi_dsub>
 8003710:	4603      	mov	r3, r0
 8003712:	460c      	mov	r4, r1
 8003714:	4618      	mov	r0, r3
 8003716:	4621      	mov	r1, r4
 8003718:	f7fd fa46 	bl	8000ba8 <__aeabi_d2f>
 800371c:	4602      	mov	r2, r0
 800371e:	4b41      	ldr	r3, [pc, #260]	; (8003824 <Land_Behavior+0x1a4>)
 8003720:	601a      	str	r2, [r3, #0]

		if(abs((z_acc_fast_total / 25) - acc_magnitude_at_start) > temp_max_acc)
 8003722:	4b3b      	ldr	r3, [pc, #236]	; (8003810 <Land_Behavior+0x190>)
 8003724:	edd3 7a00 	vldr	s15, [r3]
 8003728:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800372c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003730:	4b3d      	ldr	r3, [pc, #244]	; (8003828 <Land_Behavior+0x1a8>)
 8003732:	edd3 7a00 	vldr	s15, [r3]
 8003736:	ee77 7a67 	vsub.f32	s15, s14, s15
 800373a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800373e:	ee17 3a90 	vmov	r3, s15
 8003742:	2b00      	cmp	r3, #0
 8003744:	bfb8      	it	lt
 8003746:	425b      	neglt	r3, r3
 8003748:	ee07 3a90 	vmov	s15, r3
 800374c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003750:	4b36      	ldr	r3, [pc, #216]	; (800382c <Land_Behavior+0x1ac>)
 8003752:	edd3 7a00 	vldr	s15, [r3]
 8003756:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800375a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800375e:	dd19      	ble.n	8003794 <Land_Behavior+0x114>
		{
			temp_max_acc = abs((z_acc_fast_total / 25) - acc_magnitude_at_start);
 8003760:	4b2b      	ldr	r3, [pc, #172]	; (8003810 <Land_Behavior+0x190>)
 8003762:	edd3 7a00 	vldr	s15, [r3]
 8003766:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800376a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800376e:	4b2e      	ldr	r3, [pc, #184]	; (8003828 <Land_Behavior+0x1a8>)
 8003770:	edd3 7a00 	vldr	s15, [r3]
 8003774:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003778:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800377c:	ee17 3a90 	vmov	r3, s15
 8003780:	2b00      	cmp	r3, #0
 8003782:	bfb8      	it	lt
 8003784:	425b      	neglt	r3, r3
 8003786:	ee07 3a90 	vmov	s15, r3
 800378a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800378e:	4b27      	ldr	r3, [pc, #156]	; (800382c <Land_Behavior+0x1ac>)
 8003790:	edc3 7a00 	vstr	s15, [r3]
		}

		if((z_acc_fast_total / 25) - acc_magnitude_at_start > 4000)
 8003794:	4b1e      	ldr	r3, [pc, #120]	; (8003810 <Land_Behavior+0x190>)
 8003796:	edd3 7a00 	vldr	s15, [r3]
 800379a:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800379e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80037a2:	4b21      	ldr	r3, [pc, #132]	; (8003828 <Land_Behavior+0x1a8>)
 80037a4:	edd3 7a00 	vldr	s15, [r3]
 80037a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037ac:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003830 <Land_Behavior+0x1b0>
 80037b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b8:	dc00      	bgt.n	80037bc <Land_Behavior+0x13c>
			//sprintf((char *)print_text_buffer, "%s%ld%s", "Landed: ", (int32_t)temp_max_acc, "\n");
			sprintf((char *)print_text_buffer, "%s", "Landed.\n");
			PrintManualPacket();
		}
	}
}
 80037ba:	e022      	b.n	8003802 <Land_Behavior+0x182>
			launched = 0;
 80037bc:	4b1d      	ldr	r3, [pc, #116]	; (8003834 <Land_Behavior+0x1b4>)
 80037be:	2200      	movs	r2, #0
 80037c0:	701a      	strb	r2, [r3, #0]
			launching = 0;
 80037c2:	4b1d      	ldr	r3, [pc, #116]	; (8003838 <Land_Behavior+0x1b8>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	701a      	strb	r2, [r3, #0]
			landing = 0;
 80037c8:	4b1c      	ldr	r3, [pc, #112]	; (800383c <Land_Behavior+0x1bc>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	701a      	strb	r2, [r3, #0]
			hover_throttle = 125;
 80037ce:	4b1c      	ldr	r3, [pc, #112]	; (8003840 <Land_Behavior+0x1c0>)
 80037d0:	4a1c      	ldr	r2, [pc, #112]	; (8003844 <Land_Behavior+0x1c4>)
 80037d2:	601a      	str	r2, [r3, #0]
			idle_throttle = 125;
 80037d4:	4b1c      	ldr	r3, [pc, #112]	; (8003848 <Land_Behavior+0x1c8>)
 80037d6:	227d      	movs	r2, #125	; 0x7d
 80037d8:	601a      	str	r2, [r3, #0]
			altitude_hold_flag = 0;
 80037da:	4b1c      	ldr	r3, [pc, #112]	; (800384c <Land_Behavior+0x1cc>)
 80037dc:	2200      	movs	r2, #0
 80037de:	701a      	strb	r2, [r3, #0]
			ready_for_next_command = 1;
 80037e0:	4b1b      	ldr	r3, [pc, #108]	; (8003850 <Land_Behavior+0x1d0>)
 80037e2:	2201      	movs	r2, #1
 80037e4:	701a      	strb	r2, [r3, #0]
			ready_for_next_command_high_priority = 1;
 80037e6:	4b1b      	ldr	r3, [pc, #108]	; (8003854 <Land_Behavior+0x1d4>)
 80037e8:	2201      	movs	r2, #1
 80037ea:	701a      	strb	r2, [r3, #0]
			ClearPrintBuffer();
 80037ec:	f001 ff76 	bl	80056dc <ClearPrintBuffer>
			sprintf((char *)print_text_buffer, "%s", "Landed.\n");
 80037f0:	4a19      	ldr	r2, [pc, #100]	; (8003858 <Land_Behavior+0x1d8>)
 80037f2:	4b1a      	ldr	r3, [pc, #104]	; (800385c <Land_Behavior+0x1dc>)
 80037f4:	cb03      	ldmia	r3!, {r0, r1}
 80037f6:	6010      	str	r0, [r2, #0]
 80037f8:	6051      	str	r1, [r2, #4]
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	7213      	strb	r3, [r2, #8]
			PrintManualPacket();
 80037fe:	f001 ff87 	bl	8005710 <PrintManualPacket>
}
 8003802:	bf00      	nop
 8003804:	bd98      	pop	{r3, r4, r7, pc}
 8003806:	bf00      	nop
 8003808:	bc6a7efa 	.word	0xbc6a7efa
 800380c:	3f689374 	.word	0x3f689374
 8003810:	20000d68 	.word	0x20000d68
 8003814:	200002c0 	.word	0x200002c0
 8003818:	20000a48 	.word	0x20000a48
 800381c:	20000fd8 	.word	0x20000fd8
 8003820:	20000b54 	.word	0x20000b54
 8003824:	20000018 	.word	0x20000018
 8003828:	20000fbc 	.word	0x20000fbc
 800382c:	200002c4 	.word	0x200002c4
 8003830:	457a0000 	.word	0x457a0000
 8003834:	200002bc 	.word	0x200002bc
 8003838:	200002bd 	.word	0x200002bd
 800383c:	200002be 	.word	0x200002be
 8003840:	20000020 	.word	0x20000020
 8003844:	42fa0000 	.word	0x42fa0000
 8003848:	20000024 	.word	0x20000024
 800384c:	200002e1 	.word	0x200002e1
 8003850:	2000001c 	.word	0x2000001c
 8003854:	2000001d 	.word	0x2000001d
 8003858:	200010c0 	.word	0x200010c0
 800385c:	0801350c 	.word	0x0801350c

08003860 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	607b      	str	r3, [r7, #4]
 800386a:	4b18      	ldr	r3, [pc, #96]	; (80038cc <MX_DMA_Init+0x6c>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	4a17      	ldr	r2, [pc, #92]	; (80038cc <MX_DMA_Init+0x6c>)
 8003870:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003874:	6313      	str	r3, [r2, #48]	; 0x30
 8003876:	4b15      	ldr	r3, [pc, #84]	; (80038cc <MX_DMA_Init+0x6c>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800387e:	607b      	str	r3, [r7, #4]
 8003880:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003882:	2200      	movs	r2, #0
 8003884:	2100      	movs	r1, #0
 8003886:	200b      	movs	r0, #11
 8003888:	f002 fd51 	bl	800632e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800388c:	200b      	movs	r0, #11
 800388e:	f002 fd6a 	bl	8006366 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8003892:	2200      	movs	r2, #0
 8003894:	2100      	movs	r1, #0
 8003896:	200e      	movs	r0, #14
 8003898:	f002 fd49 	bl	800632e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800389c:	200e      	movs	r0, #14
 800389e:	f002 fd62 	bl	8006366 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80038a2:	2200      	movs	r2, #0
 80038a4:	2100      	movs	r1, #0
 80038a6:	2011      	movs	r0, #17
 80038a8:	f002 fd41 	bl	800632e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80038ac:	2011      	movs	r0, #17
 80038ae:	f002 fd5a 	bl	8006366 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80038b2:	2200      	movs	r2, #0
 80038b4:	2100      	movs	r1, #0
 80038b6:	202f      	movs	r0, #47	; 0x2f
 80038b8:	f002 fd39 	bl	800632e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80038bc:	202f      	movs	r0, #47	; 0x2f
 80038be:	f002 fd52 	bl	8006366 <HAL_NVIC_EnableIRQ>

}
 80038c2:	bf00      	nop
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	40023800 	.word	0x40023800

080038d0 <EEPROM_Clear_Buffer>:
uint8_t eeprom_write_buffer_width = 2;
uint8_t eeprom_read_write_buffer[34];
uint8_t eeprom_read_buffer_index = 0;

void EEPROM_Clear_Buffer()
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 34; i++)
 80038d6:	2300      	movs	r3, #0
 80038d8:	607b      	str	r3, [r7, #4]
 80038da:	e007      	b.n	80038ec <EEPROM_Clear_Buffer+0x1c>
	{
		eeprom_read_write_buffer[i] = 0x00;
 80038dc:	4a08      	ldr	r2, [pc, #32]	; (8003900 <EEPROM_Clear_Buffer+0x30>)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4413      	add	r3, r2
 80038e2:	2200      	movs	r2, #0
 80038e4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 34; i++)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	3301      	adds	r3, #1
 80038ea:	607b      	str	r3, [r7, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b21      	cmp	r3, #33	; 0x21
 80038f0:	ddf4      	ble.n	80038dc <EEPROM_Clear_Buffer+0xc>
	}
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	20000380 	.word	0x20000380

08003904 <EEPROM_Save_Page>:

//This also works with single bytes
void EEPROM_Save_Page(uint16_t address)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af02      	add	r7, sp, #8
 800390a:	4603      	mov	r3, r0
 800390c:	80fb      	strh	r3, [r7, #6]
	eeprom_read_write_buffer[0] = (uint8_t)((address >> 8) & 0xFF);
 800390e:	88fb      	ldrh	r3, [r7, #6]
 8003910:	0a1b      	lsrs	r3, r3, #8
 8003912:	b29b      	uxth	r3, r3
 8003914:	b2da      	uxtb	r2, r3
 8003916:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <EEPROM_Save_Page+0x40>)
 8003918:	701a      	strb	r2, [r3, #0]
	eeprom_read_write_buffer[1] = (uint8_t)(address & 0xFF);
 800391a:	88fb      	ldrh	r3, [r7, #6]
 800391c:	b2da      	uxtb	r2, r3
 800391e:	4b09      	ldr	r3, [pc, #36]	; (8003944 <EEPROM_Save_Page+0x40>)
 8003920:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, EEPROM_ADDR, (uint8_t *)eeprom_read_write_buffer, eeprom_write_buffer_width, 50);
 8003922:	23a0      	movs	r3, #160	; 0xa0
 8003924:	b299      	uxth	r1, r3
 8003926:	4b08      	ldr	r3, [pc, #32]	; (8003948 <EEPROM_Save_Page+0x44>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	b29a      	uxth	r2, r3
 800392c:	2332      	movs	r3, #50	; 0x32
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	4613      	mov	r3, r2
 8003932:	4a04      	ldr	r2, [pc, #16]	; (8003944 <EEPROM_Save_Page+0x40>)
 8003934:	4805      	ldr	r0, [pc, #20]	; (800394c <EEPROM_Save_Page+0x48>)
 8003936:	f003 fb67 	bl	8007008 <HAL_I2C_Master_Transmit>
}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	20000380 	.word	0x20000380
 8003948:	20000028 	.word	0x20000028
 800394c:	20000dd8 	.word	0x20000dd8

08003950 <EEPROM_Read_Page>:

//This also works with single bytes(set size to 1)
void EEPROM_Read_Page(uint16_t address, uint8_t size)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af04      	add	r7, sp, #16
 8003956:	4603      	mov	r3, r0
 8003958:	460a      	mov	r2, r1
 800395a:	80fb      	strh	r3, [r7, #6]
 800395c:	4613      	mov	r3, r2
 800395e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *)eeprom_read_write_buffer, size, 50);
 8003960:	23a0      	movs	r3, #160	; 0xa0
 8003962:	b299      	uxth	r1, r3
 8003964:	797b      	ldrb	r3, [r7, #5]
 8003966:	b29b      	uxth	r3, r3
 8003968:	88f8      	ldrh	r0, [r7, #6]
 800396a:	2232      	movs	r2, #50	; 0x32
 800396c:	9202      	str	r2, [sp, #8]
 800396e:	9301      	str	r3, [sp, #4]
 8003970:	4b05      	ldr	r3, [pc, #20]	; (8003988 <EEPROM_Read_Page+0x38>)
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	2310      	movs	r3, #16
 8003976:	4602      	mov	r2, r0
 8003978:	4804      	ldr	r0, [pc, #16]	; (800398c <EEPROM_Read_Page+0x3c>)
 800397a:	f003 fc43 	bl	8007204 <HAL_I2C_Mem_Read>
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	20000380 	.word	0x20000380
 800398c:	20000dd8 	.word	0x20000dd8

08003990 <EEPROM_Write_Buffer>:

void EEPROM_Write_Buffer(uint8_t *num, uint8_t size)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < size; i++)
 800399c:	2300      	movs	r3, #0
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	e00d      	b.n	80039be <EEPROM_Write_Buffer+0x2e>
	{
		eeprom_read_write_buffer[eeprom_write_buffer_width + i] = *((uint8_t *)num + i);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	441a      	add	r2, r3
 80039a8:	4b0d      	ldr	r3, [pc, #52]	; (80039e0 <EEPROM_Write_Buffer+0x50>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	4619      	mov	r1, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	440b      	add	r3, r1
 80039b2:	7811      	ldrb	r1, [r2, #0]
 80039b4:	4a0b      	ldr	r2, [pc, #44]	; (80039e4 <EEPROM_Write_Buffer+0x54>)
 80039b6:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < size; i++)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	3301      	adds	r3, #1
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	78fb      	ldrb	r3, [r7, #3]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	dbed      	blt.n	80039a2 <EEPROM_Write_Buffer+0x12>
	}

	eeprom_write_buffer_width += size;
 80039c6:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <EEPROM_Write_Buffer+0x50>)
 80039c8:	781a      	ldrb	r2, [r3, #0]
 80039ca:	78fb      	ldrb	r3, [r7, #3]
 80039cc:	4413      	add	r3, r2
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	4b03      	ldr	r3, [pc, #12]	; (80039e0 <EEPROM_Write_Buffer+0x50>)
 80039d2:	701a      	strb	r2, [r3, #0]
}
 80039d4:	bf00      	nop
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	20000028 	.word	0x20000028
 80039e4:	20000380 	.word	0x20000380

080039e8 <EEPROM_Read_Buffer>:

void EEPROM_Read_Buffer(uint8_t *output, uint8_t size)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < size; i++)
 80039f4:	2300      	movs	r3, #0
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	e00d      	b.n	8003a16 <EEPROM_Read_Buffer+0x2e>
	{
		*(((uint8_t *)output) + i) = eeprom_read_write_buffer[eeprom_read_buffer_index + i];
 80039fa:	4b0f      	ldr	r3, [pc, #60]	; (8003a38 <EEPROM_Read_Buffer+0x50>)
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	441a      	add	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	440b      	add	r3, r1
 8003a0a:	490c      	ldr	r1, [pc, #48]	; (8003a3c <EEPROM_Read_Buffer+0x54>)
 8003a0c:	5c8a      	ldrb	r2, [r1, r2]
 8003a0e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < size; i++)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	3301      	adds	r3, #1
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	78fb      	ldrb	r3, [r7, #3]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	dbed      	blt.n	80039fa <EEPROM_Read_Buffer+0x12>
	}

	eeprom_read_buffer_index += size;
 8003a1e:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <EEPROM_Read_Buffer+0x50>)
 8003a20:	781a      	ldrb	r2, [r3, #0]
 8003a22:	78fb      	ldrb	r3, [r7, #3]
 8003a24:	4413      	add	r3, r2
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	4b03      	ldr	r3, [pc, #12]	; (8003a38 <EEPROM_Read_Buffer+0x50>)
 8003a2a:	701a      	strb	r2, [r3, #0]
}
 8003a2c:	bf00      	nop
 8003a2e:	3714      	adds	r7, #20
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr
 8003a38:	200002c8 	.word	0x200002c8
 8003a3c:	20000380 	.word	0x20000380

08003a40 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08a      	sub	sp, #40	; 0x28
 8003a44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a46:	f107 0314 	add.w	r3, r7, #20
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	605a      	str	r2, [r3, #4]
 8003a50:	609a      	str	r2, [r3, #8]
 8003a52:	60da      	str	r2, [r3, #12]
 8003a54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a56:	2300      	movs	r3, #0
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	4b31      	ldr	r3, [pc, #196]	; (8003b20 <MX_GPIO_Init+0xe0>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	4a30      	ldr	r2, [pc, #192]	; (8003b20 <MX_GPIO_Init+0xe0>)
 8003a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a64:	6313      	str	r3, [r2, #48]	; 0x30
 8003a66:	4b2e      	ldr	r3, [pc, #184]	; (8003b20 <MX_GPIO_Init+0xe0>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6e:	613b      	str	r3, [r7, #16]
 8003a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	4b2a      	ldr	r3, [pc, #168]	; (8003b20 <MX_GPIO_Init+0xe0>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	4a29      	ldr	r2, [pc, #164]	; (8003b20 <MX_GPIO_Init+0xe0>)
 8003a7c:	f043 0304 	orr.w	r3, r3, #4
 8003a80:	6313      	str	r3, [r2, #48]	; 0x30
 8003a82:	4b27      	ldr	r3, [pc, #156]	; (8003b20 <MX_GPIO_Init+0xe0>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	f003 0304 	and.w	r3, r3, #4
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60bb      	str	r3, [r7, #8]
 8003a92:	4b23      	ldr	r3, [pc, #140]	; (8003b20 <MX_GPIO_Init+0xe0>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	4a22      	ldr	r2, [pc, #136]	; (8003b20 <MX_GPIO_Init+0xe0>)
 8003a98:	f043 0301 	orr.w	r3, r3, #1
 8003a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a9e:	4b20      	ldr	r3, [pc, #128]	; (8003b20 <MX_GPIO_Init+0xe0>)
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	60bb      	str	r3, [r7, #8]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aaa:	2300      	movs	r3, #0
 8003aac:	607b      	str	r3, [r7, #4]
 8003aae:	4b1c      	ldr	r3, [pc, #112]	; (8003b20 <MX_GPIO_Init+0xe0>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	4a1b      	ldr	r2, [pc, #108]	; (8003b20 <MX_GPIO_Init+0xe0>)
 8003ab4:	f043 0302 	orr.w	r3, r3, #2
 8003ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aba:	4b19      	ldr	r3, [pc, #100]	; (8003b20 <MX_GPIO_Init+0xe0>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	607b      	str	r3, [r7, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	2106      	movs	r1, #6
 8003aca:	4816      	ldr	r0, [pc, #88]	; (8003b24 <MX_GPIO_Init+0xe4>)
 8003acc:	f003 f930 	bl	8006d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8003ad6:	4814      	ldr	r0, [pc, #80]	; (8003b28 <MX_GPIO_Init+0xe8>)
 8003ad8:	f003 f92a 	bl	8006d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8003adc:	2306      	movs	r3, #6
 8003ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003aec:	f107 0314 	add.w	r3, r7, #20
 8003af0:	4619      	mov	r1, r3
 8003af2:	480c      	ldr	r0, [pc, #48]	; (8003b24 <MX_GPIO_Init+0xe4>)
 8003af4:	f002 ff6a 	bl	80069cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8003af8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003afe:	2301      	movs	r3, #1
 8003b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b06:	2300      	movs	r3, #0
 8003b08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b0a:	f107 0314 	add.w	r3, r7, #20
 8003b0e:	4619      	mov	r1, r3
 8003b10:	4805      	ldr	r0, [pc, #20]	; (8003b28 <MX_GPIO_Init+0xe8>)
 8003b12:	f002 ff5b 	bl	80069cc <HAL_GPIO_Init>

}
 8003b16:	bf00      	nop
 8003b18:	3728      	adds	r7, #40	; 0x28
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40023800 	.word	0x40023800
 8003b24:	40020800 	.word	0x40020800
 8003b28:	40020400 	.word	0x40020400

08003b2c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_tx;
DMA_HandleTypeDef hdma_i2c2_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8003b30:	4b12      	ldr	r3, [pc, #72]	; (8003b7c <MX_I2C1_Init+0x50>)
 8003b32:	4a13      	ldr	r2, [pc, #76]	; (8003b80 <MX_I2C1_Init+0x54>)
 8003b34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003b36:	4b11      	ldr	r3, [pc, #68]	; (8003b7c <MX_I2C1_Init+0x50>)
 8003b38:	4a12      	ldr	r2, [pc, #72]	; (8003b84 <MX_I2C1_Init+0x58>)
 8003b3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b3c:	4b0f      	ldr	r3, [pc, #60]	; (8003b7c <MX_I2C1_Init+0x50>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003b42:	4b0e      	ldr	r3, [pc, #56]	; (8003b7c <MX_I2C1_Init+0x50>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b48:	4b0c      	ldr	r3, [pc, #48]	; (8003b7c <MX_I2C1_Init+0x50>)
 8003b4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b50:	4b0a      	ldr	r3, [pc, #40]	; (8003b7c <MX_I2C1_Init+0x50>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003b56:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <MX_I2C1_Init+0x50>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b5c:	4b07      	ldr	r3, [pc, #28]	; (8003b7c <MX_I2C1_Init+0x50>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b62:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <MX_I2C1_Init+0x50>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003b68:	4804      	ldr	r0, [pc, #16]	; (8003b7c <MX_I2C1_Init+0x50>)
 8003b6a:	f003 f915 	bl	8006d98 <HAL_I2C_Init>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003b74:	f001 f892 	bl	8004c9c <Error_Handler>
  }

}
 8003b78:	bf00      	nop
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	20000dd8 	.word	0x20000dd8
 8003b80:	40005400 	.word	0x40005400
 8003b84:	00061a80 	.word	0x00061a80

08003b88 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8003b8c:	4b12      	ldr	r3, [pc, #72]	; (8003bd8 <MX_I2C2_Init+0x50>)
 8003b8e:	4a13      	ldr	r2, [pc, #76]	; (8003bdc <MX_I2C2_Init+0x54>)
 8003b90:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003b92:	4b11      	ldr	r3, [pc, #68]	; (8003bd8 <MX_I2C2_Init+0x50>)
 8003b94:	4a12      	ldr	r2, [pc, #72]	; (8003be0 <MX_I2C2_Init+0x58>)
 8003b96:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b98:	4b0f      	ldr	r3, [pc, #60]	; (8003bd8 <MX_I2C2_Init+0x50>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003b9e:	4b0e      	ldr	r3, [pc, #56]	; (8003bd8 <MX_I2C2_Init+0x50>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ba4:	4b0c      	ldr	r3, [pc, #48]	; (8003bd8 <MX_I2C2_Init+0x50>)
 8003ba6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003baa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003bac:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <MX_I2C2_Init+0x50>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003bb2:	4b09      	ldr	r3, [pc, #36]	; (8003bd8 <MX_I2C2_Init+0x50>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003bb8:	4b07      	ldr	r3, [pc, #28]	; (8003bd8 <MX_I2C2_Init+0x50>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003bbe:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <MX_I2C2_Init+0x50>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003bc4:	4804      	ldr	r0, [pc, #16]	; (8003bd8 <MX_I2C2_Init+0x50>)
 8003bc6:	f003 f8e7 	bl	8006d98 <HAL_I2C_Init>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003bd0:	f001 f864 	bl	8004c9c <Error_Handler>
  }

}
 8003bd4:	bf00      	nop
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	20000e2c 	.word	0x20000e2c
 8003bdc:	40005800 	.word	0x40005800
 8003be0:	00061a80 	.word	0x00061a80

08003be4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08c      	sub	sp, #48	; 0x30
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bec:	f107 031c 	add.w	r3, r7, #28
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	605a      	str	r2, [r3, #4]
 8003bf6:	609a      	str	r2, [r3, #8]
 8003bf8:	60da      	str	r2, [r3, #12]
 8003bfa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a9d      	ldr	r2, [pc, #628]	; (8003e78 <HAL_I2C_MspInit+0x294>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	f040 8093 	bne.w	8003d2e <HAL_I2C_MspInit+0x14a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61bb      	str	r3, [r7, #24]
 8003c0c:	4b9b      	ldr	r3, [pc, #620]	; (8003e7c <HAL_I2C_MspInit+0x298>)
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c10:	4a9a      	ldr	r2, [pc, #616]	; (8003e7c <HAL_I2C_MspInit+0x298>)
 8003c12:	f043 0302 	orr.w	r3, r3, #2
 8003c16:	6313      	str	r3, [r2, #48]	; 0x30
 8003c18:	4b98      	ldr	r3, [pc, #608]	; (8003e7c <HAL_I2C_MspInit+0x298>)
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	61bb      	str	r3, [r7, #24]
 8003c22:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c24:	23c0      	movs	r3, #192	; 0xc0
 8003c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c28:	2312      	movs	r3, #18
 8003c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c30:	2303      	movs	r3, #3
 8003c32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c34:	2304      	movs	r3, #4
 8003c36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c38:	f107 031c 	add.w	r3, r7, #28
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4890      	ldr	r0, [pc, #576]	; (8003e80 <HAL_I2C_MspInit+0x29c>)
 8003c40:	f002 fec4 	bl	80069cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c44:	2300      	movs	r3, #0
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	4b8c      	ldr	r3, [pc, #560]	; (8003e7c <HAL_I2C_MspInit+0x298>)
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	4a8b      	ldr	r2, [pc, #556]	; (8003e7c <HAL_I2C_MspInit+0x298>)
 8003c4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c52:	6413      	str	r3, [r2, #64]	; 0x40
 8003c54:	4b89      	ldr	r3, [pc, #548]	; (8003e7c <HAL_I2C_MspInit+0x298>)
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8003c60:	4b88      	ldr	r3, [pc, #544]	; (8003e84 <HAL_I2C_MspInit+0x2a0>)
 8003c62:	4a89      	ldr	r2, [pc, #548]	; (8003e88 <HAL_I2C_MspInit+0x2a4>)
 8003c64:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003c66:	4b87      	ldr	r3, [pc, #540]	; (8003e84 <HAL_I2C_MspInit+0x2a0>)
 8003c68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c6c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c6e:	4b85      	ldr	r3, [pc, #532]	; (8003e84 <HAL_I2C_MspInit+0x2a0>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c74:	4b83      	ldr	r3, [pc, #524]	; (8003e84 <HAL_I2C_MspInit+0x2a0>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c7a:	4b82      	ldr	r3, [pc, #520]	; (8003e84 <HAL_I2C_MspInit+0x2a0>)
 8003c7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c80:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c82:	4b80      	ldr	r3, [pc, #512]	; (8003e84 <HAL_I2C_MspInit+0x2a0>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c88:	4b7e      	ldr	r3, [pc, #504]	; (8003e84 <HAL_I2C_MspInit+0x2a0>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003c8e:	4b7d      	ldr	r3, [pc, #500]	; (8003e84 <HAL_I2C_MspInit+0x2a0>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003c94:	4b7b      	ldr	r3, [pc, #492]	; (8003e84 <HAL_I2C_MspInit+0x2a0>)
 8003c96:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003c9a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c9c:	4b79      	ldr	r3, [pc, #484]	; (8003e84 <HAL_I2C_MspInit+0x2a0>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003ca2:	4878      	ldr	r0, [pc, #480]	; (8003e84 <HAL_I2C_MspInit+0x2a0>)
 8003ca4:	f002 fb7a 	bl	800639c <HAL_DMA_Init>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8003cae:	f000 fff5 	bl	8004c9c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a73      	ldr	r2, [pc, #460]	; (8003e84 <HAL_I2C_MspInit+0x2a0>)
 8003cb6:	639a      	str	r2, [r3, #56]	; 0x38
 8003cb8:	4a72      	ldr	r2, [pc, #456]	; (8003e84 <HAL_I2C_MspInit+0x2a0>)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8003cbe:	4b73      	ldr	r3, [pc, #460]	; (8003e8c <HAL_I2C_MspInit+0x2a8>)
 8003cc0:	4a73      	ldr	r2, [pc, #460]	; (8003e90 <HAL_I2C_MspInit+0x2ac>)
 8003cc2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8003cc4:	4b71      	ldr	r3, [pc, #452]	; (8003e8c <HAL_I2C_MspInit+0x2a8>)
 8003cc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cca:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ccc:	4b6f      	ldr	r3, [pc, #444]	; (8003e8c <HAL_I2C_MspInit+0x2a8>)
 8003cce:	2240      	movs	r2, #64	; 0x40
 8003cd0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cd2:	4b6e      	ldr	r3, [pc, #440]	; (8003e8c <HAL_I2C_MspInit+0x2a8>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003cd8:	4b6c      	ldr	r3, [pc, #432]	; (8003e8c <HAL_I2C_MspInit+0x2a8>)
 8003cda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cde:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ce0:	4b6a      	ldr	r3, [pc, #424]	; (8003e8c <HAL_I2C_MspInit+0x2a8>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ce6:	4b69      	ldr	r3, [pc, #420]	; (8003e8c <HAL_I2C_MspInit+0x2a8>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003cec:	4b67      	ldr	r3, [pc, #412]	; (8003e8c <HAL_I2C_MspInit+0x2a8>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003cf2:	4b66      	ldr	r3, [pc, #408]	; (8003e8c <HAL_I2C_MspInit+0x2a8>)
 8003cf4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003cf8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003cfa:	4b64      	ldr	r3, [pc, #400]	; (8003e8c <HAL_I2C_MspInit+0x2a8>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003d00:	4862      	ldr	r0, [pc, #392]	; (8003e8c <HAL_I2C_MspInit+0x2a8>)
 8003d02:	f002 fb4b 	bl	800639c <HAL_DMA_Init>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 8003d0c:	f000 ffc6 	bl	8004c9c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a5e      	ldr	r2, [pc, #376]	; (8003e8c <HAL_I2C_MspInit+0x2a8>)
 8003d14:	635a      	str	r2, [r3, #52]	; 0x34
 8003d16:	4a5d      	ldr	r2, [pc, #372]	; (8003e8c <HAL_I2C_MspInit+0x2a8>)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	2100      	movs	r1, #0
 8003d20:	201f      	movs	r0, #31
 8003d22:	f002 fb04 	bl	800632e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003d26:	201f      	movs	r0, #31
 8003d28:	f002 fb1d 	bl	8006366 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8003d2c:	e0a0      	b.n	8003e70 <HAL_I2C_MspInit+0x28c>
  else if(i2cHandle->Instance==I2C2)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a58      	ldr	r2, [pc, #352]	; (8003e94 <HAL_I2C_MspInit+0x2b0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	f040 809b 	bne.w	8003e70 <HAL_I2C_MspInit+0x28c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	613b      	str	r3, [r7, #16]
 8003d3e:	4b4f      	ldr	r3, [pc, #316]	; (8003e7c <HAL_I2C_MspInit+0x298>)
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	4a4e      	ldr	r2, [pc, #312]	; (8003e7c <HAL_I2C_MspInit+0x298>)
 8003d44:	f043 0302 	orr.w	r3, r3, #2
 8003d48:	6313      	str	r3, [r2, #48]	; 0x30
 8003d4a:	4b4c      	ldr	r3, [pc, #304]	; (8003e7c <HAL_I2C_MspInit+0x298>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	613b      	str	r3, [r7, #16]
 8003d54:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003d56:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d5c:	2312      	movs	r3, #18
 8003d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d60:	2301      	movs	r3, #1
 8003d62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d64:	2303      	movs	r3, #3
 8003d66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003d68:	2304      	movs	r3, #4
 8003d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d6c:	f107 031c 	add.w	r3, r7, #28
 8003d70:	4619      	mov	r1, r3
 8003d72:	4843      	ldr	r0, [pc, #268]	; (8003e80 <HAL_I2C_MspInit+0x29c>)
 8003d74:	f002 fe2a 	bl	80069cc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	4b3f      	ldr	r3, [pc, #252]	; (8003e7c <HAL_I2C_MspInit+0x298>)
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	4a3e      	ldr	r2, [pc, #248]	; (8003e7c <HAL_I2C_MspInit+0x298>)
 8003d82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d86:	6413      	str	r3, [r2, #64]	; 0x40
 8003d88:	4b3c      	ldr	r3, [pc, #240]	; (8003e7c <HAL_I2C_MspInit+0x298>)
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8003d94:	4b40      	ldr	r3, [pc, #256]	; (8003e98 <HAL_I2C_MspInit+0x2b4>)
 8003d96:	4a41      	ldr	r2, [pc, #260]	; (8003e9c <HAL_I2C_MspInit+0x2b8>)
 8003d98:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8003d9a:	4b3f      	ldr	r3, [pc, #252]	; (8003e98 <HAL_I2C_MspInit+0x2b4>)
 8003d9c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8003da0:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003da2:	4b3d      	ldr	r3, [pc, #244]	; (8003e98 <HAL_I2C_MspInit+0x2b4>)
 8003da4:	2240      	movs	r2, #64	; 0x40
 8003da6:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003da8:	4b3b      	ldr	r3, [pc, #236]	; (8003e98 <HAL_I2C_MspInit+0x2b4>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003dae:	4b3a      	ldr	r3, [pc, #232]	; (8003e98 <HAL_I2C_MspInit+0x2b4>)
 8003db0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003db4:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003db6:	4b38      	ldr	r3, [pc, #224]	; (8003e98 <HAL_I2C_MspInit+0x2b4>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003dbc:	4b36      	ldr	r3, [pc, #216]	; (8003e98 <HAL_I2C_MspInit+0x2b4>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8003dc2:	4b35      	ldr	r3, [pc, #212]	; (8003e98 <HAL_I2C_MspInit+0x2b4>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003dc8:	4b33      	ldr	r3, [pc, #204]	; (8003e98 <HAL_I2C_MspInit+0x2b4>)
 8003dca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003dce:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003dd0:	4b31      	ldr	r3, [pc, #196]	; (8003e98 <HAL_I2C_MspInit+0x2b4>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8003dd6:	4830      	ldr	r0, [pc, #192]	; (8003e98 <HAL_I2C_MspInit+0x2b4>)
 8003dd8:	f002 fae0 	bl	800639c <HAL_DMA_Init>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <HAL_I2C_MspInit+0x202>
      Error_Handler();
 8003de2:	f000 ff5b 	bl	8004c9c <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a2b      	ldr	r2, [pc, #172]	; (8003e98 <HAL_I2C_MspInit+0x2b4>)
 8003dea:	635a      	str	r2, [r3, #52]	; 0x34
 8003dec:	4a2a      	ldr	r2, [pc, #168]	; (8003e98 <HAL_I2C_MspInit+0x2b4>)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 8003df2:	4b2b      	ldr	r3, [pc, #172]	; (8003ea0 <HAL_I2C_MspInit+0x2bc>)
 8003df4:	4a2b      	ldr	r2, [pc, #172]	; (8003ea4 <HAL_I2C_MspInit+0x2c0>)
 8003df6:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8003df8:	4b29      	ldr	r3, [pc, #164]	; (8003ea0 <HAL_I2C_MspInit+0x2bc>)
 8003dfa:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8003dfe:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e00:	4b27      	ldr	r3, [pc, #156]	; (8003ea0 <HAL_I2C_MspInit+0x2bc>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e06:	4b26      	ldr	r3, [pc, #152]	; (8003ea0 <HAL_I2C_MspInit+0x2bc>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e0c:	4b24      	ldr	r3, [pc, #144]	; (8003ea0 <HAL_I2C_MspInit+0x2bc>)
 8003e0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e12:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e14:	4b22      	ldr	r3, [pc, #136]	; (8003ea0 <HAL_I2C_MspInit+0x2bc>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e1a:	4b21      	ldr	r3, [pc, #132]	; (8003ea0 <HAL_I2C_MspInit+0x2bc>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8003e20:	4b1f      	ldr	r3, [pc, #124]	; (8003ea0 <HAL_I2C_MspInit+0x2bc>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003e26:	4b1e      	ldr	r3, [pc, #120]	; (8003ea0 <HAL_I2C_MspInit+0x2bc>)
 8003e28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e2c:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e2e:	4b1c      	ldr	r3, [pc, #112]	; (8003ea0 <HAL_I2C_MspInit+0x2bc>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8003e34:	481a      	ldr	r0, [pc, #104]	; (8003ea0 <HAL_I2C_MspInit+0x2bc>)
 8003e36:	f002 fab1 	bl	800639c <HAL_DMA_Init>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <HAL_I2C_MspInit+0x260>
      Error_Handler();
 8003e40:	f000 ff2c 	bl	8004c9c <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a16      	ldr	r2, [pc, #88]	; (8003ea0 <HAL_I2C_MspInit+0x2bc>)
 8003e48:	639a      	str	r2, [r3, #56]	; 0x38
 8003e4a:	4a15      	ldr	r2, [pc, #84]	; (8003ea0 <HAL_I2C_MspInit+0x2bc>)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8003e50:	2200      	movs	r2, #0
 8003e52:	2100      	movs	r1, #0
 8003e54:	2021      	movs	r0, #33	; 0x21
 8003e56:	f002 fa6a 	bl	800632e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003e5a:	2021      	movs	r0, #33	; 0x21
 8003e5c:	f002 fa83 	bl	8006366 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8003e60:	2200      	movs	r2, #0
 8003e62:	2100      	movs	r1, #0
 8003e64:	2022      	movs	r0, #34	; 0x22
 8003e66:	f002 fa62 	bl	800632e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8003e6a:	2022      	movs	r0, #34	; 0x22
 8003e6c:	f002 fa7b 	bl	8006366 <HAL_NVIC_EnableIRQ>
}
 8003e70:	bf00      	nop
 8003e72:	3730      	adds	r7, #48	; 0x30
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40005400 	.word	0x40005400
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	40020400 	.word	0x40020400
 8003e84:	20000f40 	.word	0x20000f40
 8003e88:	40026010 	.word	0x40026010
 8003e8c:	20000d78 	.word	0x20000d78
 8003e90:	400260a0 	.word	0x400260a0
 8003e94:	40005800 	.word	0x40005800
 8003e98:	20000ee0 	.word	0x20000ee0
 8003e9c:	400260b8 	.word	0x400260b8
 8003ea0:	20000e80 	.word	0x20000e80
 8003ea4:	40026058 	.word	0x40026058

08003ea8 <Setup_IMU>:
float acc_magnitude, acc_x, acc_y, acc_z, acc_magnitude_at_start;
float gyro_x_angle, gyro_y_angle, gyro_z_angle;
float gyro_x_calibration, gyro_y_calibration, gyro_z_calibration;

void Setup_IMU()
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af02      	add	r7, sp, #8
	imu_setup_buffer[0] = 0x6B;
 8003eae:	4b22      	ldr	r3, [pc, #136]	; (8003f38 <Setup_IMU+0x90>)
 8003eb0:	226b      	movs	r2, #107	; 0x6b
 8003eb2:	701a      	strb	r2, [r3, #0]
	imu_setup_buffer[1] = 0x00;
 8003eb4:	4b20      	ldr	r3, [pc, #128]	; (8003f38 <Setup_IMU+0x90>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, imu_setup_buffer, 2, HAL_MAX_DELAY);
 8003eba:	23d0      	movs	r3, #208	; 0xd0
 8003ebc:	b299      	uxth	r1, r3
 8003ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	4a1c      	ldr	r2, [pc, #112]	; (8003f38 <Setup_IMU+0x90>)
 8003ec8:	481c      	ldr	r0, [pc, #112]	; (8003f3c <Setup_IMU+0x94>)
 8003eca:	f003 f89d 	bl	8007008 <HAL_I2C_Master_Transmit>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	4b1b      	ldr	r3, [pc, #108]	; (8003f40 <Setup_IMU+0x98>)
 8003ed4:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK)
	{
		//strcpy((char*)buf, "Error Tx\r\n");
	}

	HAL_Delay(10);
 8003ed6:	200a      	movs	r0, #10
 8003ed8:	f002 f92c 	bl	8006134 <HAL_Delay>

	imu_setup_buffer[0] = 0x1B;
 8003edc:	4b16      	ldr	r3, [pc, #88]	; (8003f38 <Setup_IMU+0x90>)
 8003ede:	221b      	movs	r2, #27
 8003ee0:	701a      	strb	r2, [r3, #0]
	imu_setup_buffer[1] = 0x08;
 8003ee2:	4b15      	ldr	r3, [pc, #84]	; (8003f38 <Setup_IMU+0x90>)
 8003ee4:	2208      	movs	r2, #8
 8003ee6:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, imu_setup_buffer, 2, HAL_MAX_DELAY);
 8003ee8:	23d0      	movs	r3, #208	; 0xd0
 8003eea:	b299      	uxth	r1, r3
 8003eec:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	4a10      	ldr	r2, [pc, #64]	; (8003f38 <Setup_IMU+0x90>)
 8003ef6:	4811      	ldr	r0, [pc, #68]	; (8003f3c <Setup_IMU+0x94>)
 8003ef8:	f003 f886 	bl	8007008 <HAL_I2C_Master_Transmit>
 8003efc:	4603      	mov	r3, r0
 8003efe:	461a      	mov	r2, r3
 8003f00:	4b0f      	ldr	r3, [pc, #60]	; (8003f40 <Setup_IMU+0x98>)
 8003f02:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK)
	{
		//strcpy((char*)buf, "Error Tx\r\n");
	}

	HAL_Delay(10);
 8003f04:	200a      	movs	r0, #10
 8003f06:	f002 f915 	bl	8006134 <HAL_Delay>

	imu_setup_buffer[0] = 0x1A;
 8003f0a:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <Setup_IMU+0x90>)
 8003f0c:	221a      	movs	r2, #26
 8003f0e:	701a      	strb	r2, [r3, #0]
	imu_setup_buffer[1] = 0x03;
 8003f10:	4b09      	ldr	r3, [pc, #36]	; (8003f38 <Setup_IMU+0x90>)
 8003f12:	2203      	movs	r2, #3
 8003f14:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c1, GYRO_ADDR, imu_setup_buffer, 2, HAL_MAX_DELAY);
 8003f16:	23d0      	movs	r3, #208	; 0xd0
 8003f18:	b299      	uxth	r1, r3
 8003f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	2302      	movs	r3, #2
 8003f22:	4a05      	ldr	r2, [pc, #20]	; (8003f38 <Setup_IMU+0x90>)
 8003f24:	4805      	ldr	r0, [pc, #20]	; (8003f3c <Setup_IMU+0x94>)
 8003f26:	f003 f86f 	bl	8007008 <HAL_I2C_Master_Transmit>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	4b04      	ldr	r3, [pc, #16]	; (8003f40 <Setup_IMU+0x98>)
 8003f30:	701a      	strb	r2, [r3, #0]
	if(ret != HAL_OK)
	{
		//strcpy((char*)buf, "Error Tx\r\n");
	}
}
 8003f32:	bf00      	nop
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	20000fe0 	.word	0x20000fe0
 8003f3c:	20000dd8 	.word	0x20000dd8
 8003f40:	20000ffe 	.word	0x20000ffe

08003f44 <Calibrate_IMU>:

void Calibrate_IMU()
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
	for(int i = 0; i < 2000; i++)
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	607b      	str	r3, [r7, #4]
 8003f4e:	e035      	b.n	8003fbc <Calibrate_IMU+0x78>
	{
		Read_IMU(1);
 8003f50:	2001      	movs	r0, #1
 8003f52:	f000 f875 	bl	8004040 <Read_IMU>
		gyro_x_calibration += raw_gyro_acc_data[0];
 8003f56:	4b32      	ldr	r3, [pc, #200]	; (8004020 <Calibrate_IMU+0xdc>)
 8003f58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f5c:	ee07 3a90 	vmov	s15, r3
 8003f60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f64:	4b2f      	ldr	r3, [pc, #188]	; (8004024 <Calibrate_IMU+0xe0>)
 8003f66:	edd3 7a00 	vldr	s15, [r3]
 8003f6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f6e:	4b2d      	ldr	r3, [pc, #180]	; (8004024 <Calibrate_IMU+0xe0>)
 8003f70:	edc3 7a00 	vstr	s15, [r3]
		gyro_y_calibration += raw_gyro_acc_data[1];
 8003f74:	4b2a      	ldr	r3, [pc, #168]	; (8004020 <Calibrate_IMU+0xdc>)
 8003f76:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003f7a:	ee07 3a90 	vmov	s15, r3
 8003f7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f82:	4b29      	ldr	r3, [pc, #164]	; (8004028 <Calibrate_IMU+0xe4>)
 8003f84:	edd3 7a00 	vldr	s15, [r3]
 8003f88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f8c:	4b26      	ldr	r3, [pc, #152]	; (8004028 <Calibrate_IMU+0xe4>)
 8003f8e:	edc3 7a00 	vstr	s15, [r3]
		gyro_z_calibration += raw_gyro_acc_data[2];
 8003f92:	4b23      	ldr	r3, [pc, #140]	; (8004020 <Calibrate_IMU+0xdc>)
 8003f94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003f98:	ee07 3a90 	vmov	s15, r3
 8003f9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fa0:	4b22      	ldr	r3, [pc, #136]	; (800402c <Calibrate_IMU+0xe8>)
 8003fa2:	edd3 7a00 	vldr	s15, [r3]
 8003fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003faa:	4b20      	ldr	r3, [pc, #128]	; (800402c <Calibrate_IMU+0xe8>)
 8003fac:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8003fb0:	2002      	movs	r0, #2
 8003fb2:	f002 f8bf 	bl	8006134 <HAL_Delay>
	for(int i = 0; i < 2000; i++)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	607b      	str	r3, [r7, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003fc2:	dbc5      	blt.n	8003f50 <Calibrate_IMU+0xc>
	}

	gyro_x_angle = 0;
 8003fc4:	4b1a      	ldr	r3, [pc, #104]	; (8004030 <Calibrate_IMU+0xec>)
 8003fc6:	f04f 0200 	mov.w	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
	gyro_y_angle = 0;
 8003fcc:	4b19      	ldr	r3, [pc, #100]	; (8004034 <Calibrate_IMU+0xf0>)
 8003fce:	f04f 0200 	mov.w	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
	gyro_z_angle = 0;
 8003fd4:	4b18      	ldr	r3, [pc, #96]	; (8004038 <Calibrate_IMU+0xf4>)
 8003fd6:	f04f 0200 	mov.w	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]

	gyro_x_calibration /= 2000;
 8003fdc:	4b11      	ldr	r3, [pc, #68]	; (8004024 <Calibrate_IMU+0xe0>)
 8003fde:	ed93 7a00 	vldr	s14, [r3]
 8003fe2:	eddf 6a16 	vldr	s13, [pc, #88]	; 800403c <Calibrate_IMU+0xf8>
 8003fe6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fea:	4b0e      	ldr	r3, [pc, #56]	; (8004024 <Calibrate_IMU+0xe0>)
 8003fec:	edc3 7a00 	vstr	s15, [r3]
	gyro_y_calibration /= 2000;
 8003ff0:	4b0d      	ldr	r3, [pc, #52]	; (8004028 <Calibrate_IMU+0xe4>)
 8003ff2:	ed93 7a00 	vldr	s14, [r3]
 8003ff6:	eddf 6a11 	vldr	s13, [pc, #68]	; 800403c <Calibrate_IMU+0xf8>
 8003ffa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ffe:	4b0a      	ldr	r3, [pc, #40]	; (8004028 <Calibrate_IMU+0xe4>)
 8004000:	edc3 7a00 	vstr	s15, [r3]
	gyro_z_calibration /= 2000;
 8004004:	4b09      	ldr	r3, [pc, #36]	; (800402c <Calibrate_IMU+0xe8>)
 8004006:	ed93 7a00 	vldr	s14, [r3]
 800400a:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800403c <Calibrate_IMU+0xf8>
 800400e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004012:	4b06      	ldr	r3, [pc, #24]	; (800402c <Calibrate_IMU+0xe8>)
 8004014:	edc3 7a00 	vstr	s15, [r3]
}
 8004018:	bf00      	nop
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	20000fc4 	.word	0x20000fc4
 8004024:	20000fb0 	.word	0x20000fb0
 8004028:	20000fc0 	.word	0x20000fc0
 800402c:	20000fb8 	.word	0x20000fb8
 8004030:	20000fa8 	.word	0x20000fa8
 8004034:	20000fb4 	.word	0x20000fb4
 8004038:	20000fd4 	.word	0x20000fd4
 800403c:	44fa0000 	.word	0x44fa0000

08004040 <Read_IMU>:

void Read_IMU(uint8_t is_calibrating)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af04      	add	r7, sp, #16
 8004046:	4603      	mov	r3, r0
 8004048:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, GYRO_ADDR, 0x3B, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&raw_gyro_acc_buffer, 14, HAL_MAX_DELAY);//Implement failure logic later
 800404a:	23d0      	movs	r3, #208	; 0xd0
 800404c:	b299      	uxth	r1, r3
 800404e:	f04f 33ff 	mov.w	r3, #4294967295
 8004052:	9302      	str	r3, [sp, #8]
 8004054:	230e      	movs	r3, #14
 8004056:	9301      	str	r3, [sp, #4]
 8004058:	4b49      	ldr	r3, [pc, #292]	; (8004180 <Read_IMU+0x140>)
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	2301      	movs	r3, #1
 800405e:	223b      	movs	r2, #59	; 0x3b
 8004060:	4848      	ldr	r0, [pc, #288]	; (8004184 <Read_IMU+0x144>)
 8004062:	f003 f8cf 	bl	8007204 <HAL_I2C_Mem_Read>
	raw_gyro_acc_data[3] = (int16_t)((raw_gyro_acc_buffer[0] << 8) | (raw_gyro_acc_buffer[1]));	//Acc X
 8004066:	4b46      	ldr	r3, [pc, #280]	; (8004180 <Read_IMU+0x140>)
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	021b      	lsls	r3, r3, #8
 800406c:	b21a      	sxth	r2, r3
 800406e:	4b44      	ldr	r3, [pc, #272]	; (8004180 <Read_IMU+0x140>)
 8004070:	785b      	ldrb	r3, [r3, #1]
 8004072:	b21b      	sxth	r3, r3
 8004074:	4313      	orrs	r3, r2
 8004076:	b21a      	sxth	r2, r3
 8004078:	4b43      	ldr	r3, [pc, #268]	; (8004188 <Read_IMU+0x148>)
 800407a:	80da      	strh	r2, [r3, #6]
	raw_gyro_acc_data[4] = (int16_t)((raw_gyro_acc_buffer[2] << 8) | (raw_gyro_acc_buffer[3]));	//Acc Y
 800407c:	4b40      	ldr	r3, [pc, #256]	; (8004180 <Read_IMU+0x140>)
 800407e:	789b      	ldrb	r3, [r3, #2]
 8004080:	021b      	lsls	r3, r3, #8
 8004082:	b21a      	sxth	r2, r3
 8004084:	4b3e      	ldr	r3, [pc, #248]	; (8004180 <Read_IMU+0x140>)
 8004086:	78db      	ldrb	r3, [r3, #3]
 8004088:	b21b      	sxth	r3, r3
 800408a:	4313      	orrs	r3, r2
 800408c:	b21a      	sxth	r2, r3
 800408e:	4b3e      	ldr	r3, [pc, #248]	; (8004188 <Read_IMU+0x148>)
 8004090:	811a      	strh	r2, [r3, #8]
	raw_gyro_acc_data[5] = (int16_t)((raw_gyro_acc_buffer[4] << 8) | (raw_gyro_acc_buffer[5]));	//Acc Z
 8004092:	4b3b      	ldr	r3, [pc, #236]	; (8004180 <Read_IMU+0x140>)
 8004094:	791b      	ldrb	r3, [r3, #4]
 8004096:	021b      	lsls	r3, r3, #8
 8004098:	b21a      	sxth	r2, r3
 800409a:	4b39      	ldr	r3, [pc, #228]	; (8004180 <Read_IMU+0x140>)
 800409c:	795b      	ldrb	r3, [r3, #5]
 800409e:	b21b      	sxth	r3, r3
 80040a0:	4313      	orrs	r3, r2
 80040a2:	b21a      	sxth	r2, r3
 80040a4:	4b38      	ldr	r3, [pc, #224]	; (8004188 <Read_IMU+0x148>)
 80040a6:	815a      	strh	r2, [r3, #10]
	raw_imu_temp = (int16_t)((raw_gyro_acc_buffer[6] << 8) | (raw_gyro_acc_buffer[7]));
 80040a8:	4b35      	ldr	r3, [pc, #212]	; (8004180 <Read_IMU+0x140>)
 80040aa:	799b      	ldrb	r3, [r3, #6]
 80040ac:	021b      	lsls	r3, r3, #8
 80040ae:	b21a      	sxth	r2, r3
 80040b0:	4b33      	ldr	r3, [pc, #204]	; (8004180 <Read_IMU+0x140>)
 80040b2:	79db      	ldrb	r3, [r3, #7]
 80040b4:	b21b      	sxth	r3, r3
 80040b6:	4313      	orrs	r3, r2
 80040b8:	b21a      	sxth	r2, r3
 80040ba:	4b34      	ldr	r3, [pc, #208]	; (800418c <Read_IMU+0x14c>)
 80040bc:	801a      	strh	r2, [r3, #0]
	raw_gyro_acc_data[0] = (int16_t)((raw_gyro_acc_buffer[8] << 8) | (raw_gyro_acc_buffer[9]));	//Gyro X
 80040be:	4b30      	ldr	r3, [pc, #192]	; (8004180 <Read_IMU+0x140>)
 80040c0:	7a1b      	ldrb	r3, [r3, #8]
 80040c2:	021b      	lsls	r3, r3, #8
 80040c4:	b21a      	sxth	r2, r3
 80040c6:	4b2e      	ldr	r3, [pc, #184]	; (8004180 <Read_IMU+0x140>)
 80040c8:	7a5b      	ldrb	r3, [r3, #9]
 80040ca:	b21b      	sxth	r3, r3
 80040cc:	4313      	orrs	r3, r2
 80040ce:	b21a      	sxth	r2, r3
 80040d0:	4b2d      	ldr	r3, [pc, #180]	; (8004188 <Read_IMU+0x148>)
 80040d2:	801a      	strh	r2, [r3, #0]
	raw_gyro_acc_data[1] = (int16_t)((raw_gyro_acc_buffer[10] << 8) | (raw_gyro_acc_buffer[11]));	//Gyro Y
 80040d4:	4b2a      	ldr	r3, [pc, #168]	; (8004180 <Read_IMU+0x140>)
 80040d6:	7a9b      	ldrb	r3, [r3, #10]
 80040d8:	021b      	lsls	r3, r3, #8
 80040da:	b21a      	sxth	r2, r3
 80040dc:	4b28      	ldr	r3, [pc, #160]	; (8004180 <Read_IMU+0x140>)
 80040de:	7adb      	ldrb	r3, [r3, #11]
 80040e0:	b21b      	sxth	r3, r3
 80040e2:	4313      	orrs	r3, r2
 80040e4:	b21a      	sxth	r2, r3
 80040e6:	4b28      	ldr	r3, [pc, #160]	; (8004188 <Read_IMU+0x148>)
 80040e8:	805a      	strh	r2, [r3, #2]
	raw_gyro_acc_data[2] = (int16_t)((raw_gyro_acc_buffer[12] << 8) | (raw_gyro_acc_buffer[13]));	//Gyro Z
 80040ea:	4b25      	ldr	r3, [pc, #148]	; (8004180 <Read_IMU+0x140>)
 80040ec:	7b1b      	ldrb	r3, [r3, #12]
 80040ee:	021b      	lsls	r3, r3, #8
 80040f0:	b21a      	sxth	r2, r3
 80040f2:	4b23      	ldr	r3, [pc, #140]	; (8004180 <Read_IMU+0x140>)
 80040f4:	7b5b      	ldrb	r3, [r3, #13]
 80040f6:	b21b      	sxth	r3, r3
 80040f8:	4313      	orrs	r3, r2
 80040fa:	b21a      	sxth	r2, r3
 80040fc:	4b22      	ldr	r3, [pc, #136]	; (8004188 <Read_IMU+0x148>)
 80040fe:	809a      	strh	r2, [r3, #4]

	if(!is_calibrating)
 8004100:	79fb      	ldrb	r3, [r7, #7]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d138      	bne.n	8004178 <Read_IMU+0x138>
	{
		raw_gyro_acc_data[0] -= gyro_x_calibration;
 8004106:	4b20      	ldr	r3, [pc, #128]	; (8004188 <Read_IMU+0x148>)
 8004108:	f9b3 3000 	ldrsh.w	r3, [r3]
 800410c:	ee07 3a90 	vmov	s15, r3
 8004110:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004114:	4b1e      	ldr	r3, [pc, #120]	; (8004190 <Read_IMU+0x150>)
 8004116:	edd3 7a00 	vldr	s15, [r3]
 800411a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800411e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004122:	ee17 3a90 	vmov	r3, s15
 8004126:	b21a      	sxth	r2, r3
 8004128:	4b17      	ldr	r3, [pc, #92]	; (8004188 <Read_IMU+0x148>)
 800412a:	801a      	strh	r2, [r3, #0]
		raw_gyro_acc_data[1] -= gyro_y_calibration;
 800412c:	4b16      	ldr	r3, [pc, #88]	; (8004188 <Read_IMU+0x148>)
 800412e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004132:	ee07 3a90 	vmov	s15, r3
 8004136:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800413a:	4b16      	ldr	r3, [pc, #88]	; (8004194 <Read_IMU+0x154>)
 800413c:	edd3 7a00 	vldr	s15, [r3]
 8004140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004144:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004148:	ee17 3a90 	vmov	r3, s15
 800414c:	b21a      	sxth	r2, r3
 800414e:	4b0e      	ldr	r3, [pc, #56]	; (8004188 <Read_IMU+0x148>)
 8004150:	805a      	strh	r2, [r3, #2]
		raw_gyro_acc_data[2] -= gyro_z_calibration;
 8004152:	4b0d      	ldr	r3, [pc, #52]	; (8004188 <Read_IMU+0x148>)
 8004154:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004158:	ee07 3a90 	vmov	s15, r3
 800415c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004160:	4b0d      	ldr	r3, [pc, #52]	; (8004198 <Read_IMU+0x158>)
 8004162:	edd3 7a00 	vldr	s15, [r3]
 8004166:	ee77 7a67 	vsub.f32	s15, s14, s15
 800416a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800416e:	ee17 3a90 	vmov	r3, s15
 8004172:	b21a      	sxth	r2, r3
 8004174:	4b04      	ldr	r3, [pc, #16]	; (8004188 <Read_IMU+0x148>)
 8004176:	809a      	strh	r2, [r3, #4]
	}
}
 8004178:	bf00      	nop
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	20001008 	.word	0x20001008
 8004184:	20000dd8 	.word	0x20000dd8
 8004188:	20000fc4 	.word	0x20000fc4
 800418c:	20000fa4 	.word	0x20000fa4
 8004190:	20000fb0 	.word	0x20000fb0
 8004194:	20000fc0 	.word	0x20000fc0
 8004198:	20000fb8 	.word	0x20000fb8

0800419c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800419c:	b5b0      	push	{r4, r5, r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80041a2:	f001 ff55 	bl	8006050 <HAL_Init>

  /* USER CODE BEGIN Init */

  HAL_Delay(500);
 80041a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80041aa:	f001 ffc3 	bl	8006134 <HAL_Delay>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80041ae:	f000 fb7d 	bl	80048ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80041b2:	f7ff fc45 	bl	8003a40 <MX_GPIO_Init>
  MX_DMA_Init();
 80041b6:	f7ff fb53 	bl	8003860 <MX_DMA_Init>
  MX_I2C1_Init();
 80041ba:	f7ff fcb7 	bl	8003b2c <MX_I2C1_Init>
  MX_I2C2_Init();
 80041be:	f7ff fce3 	bl	8003b88 <MX_I2C2_Init>
  MX_RTC_Init();
 80041c2:	f000 fd73 	bl	8004cac <MX_RTC_Init>
  MX_TIM3_Init();
 80041c6:	f001 fc07 	bl	80059d8 <MX_TIM3_Init>
  MX_TIM5_Init();
 80041ca:	f001 fc81 	bl	8005ad0 <MX_TIM5_Init>
  MX_TIM8_Init();
 80041ce:	f001 fcef 	bl	8005bb0 <MX_TIM8_Init>
  MX_USB_DEVICE_Init();
 80041d2:	f00b fb95 	bl	800f900 <MX_USB_DEVICE_Init>
  MX_TIM9_Init();
 80041d6:	f001 fdaf 	bl	8005d38 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 80041da:	2100      	movs	r1, #0
 80041dc:	488e      	ldr	r0, [pc, #568]	; (8004418 <main+0x27c>)
 80041de:	f007 fba1 	bl	800b924 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim9);
 80041e2:	488e      	ldr	r0, [pc, #568]	; (800441c <main+0x280>)
 80041e4:	f007 fada 	bl	800b79c <HAL_TIM_Base_Start_IT>
  //HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);//Motor 1 - FL
 80041e8:	210c      	movs	r1, #12
 80041ea:	488d      	ldr	r0, [pc, #564]	; (8004420 <main+0x284>)
 80041ec:	f007 fb26 	bl	800b83c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);//Motor 2 - FR
 80041f0:	2108      	movs	r1, #8
 80041f2:	488b      	ldr	r0, [pc, #556]	; (8004420 <main+0x284>)
 80041f4:	f007 fb22 	bl	800b83c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);//Motor 3 - BR
 80041f8:	2104      	movs	r1, #4
 80041fa:	4889      	ldr	r0, [pc, #548]	; (8004420 <main+0x284>)
 80041fc:	f007 fb1e 	bl	800b83c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);//Motor 4 - BL
 8004200:	2100      	movs	r1, #0
 8004202:	4887      	ldr	r0, [pc, #540]	; (8004420 <main+0x284>)
 8004204:	f007 fb1a 	bl	800b83c <HAL_TIM_PWM_Start>

  auto_packet_buffer[0].total_width = 0;
 8004208:	4b86      	ldr	r3, [pc, #536]	; (8004424 <main+0x288>)
 800420a:	2200      	movs	r2, #0
 800420c:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
  auto_packet_buffer[0].var_count = 0;
 8004210:	4b84      	ldr	r3, [pc, #528]	; (8004424 <main+0x288>)
 8004212:	2200      	movs	r2, #0
 8004214:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
  auto_packet_buffer[0].id = GYRO_PACKET;
 8004218:	4b82      	ldr	r3, [pc, #520]	; (8004424 <main+0x288>)
 800421a:	2201      	movs	r2, #1
 800421c:	701a      	strb	r2, [r3, #0]
  auto_packet_buffer[0].send_rate = 1;
 800421e:	4b81      	ldr	r3, [pc, #516]	; (8004424 <main+0x288>)
 8004220:	2201      	movs	r2, #1
 8004222:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
  AddToAutoBuffer(0, (uint8_t *)&(raw_gyro_acc_data[0]), 2);
 8004226:	2202      	movs	r2, #2
 8004228:	497f      	ldr	r1, [pc, #508]	; (8004428 <main+0x28c>)
 800422a:	2000      	movs	r0, #0
 800422c:	f001 fad6 	bl	80057dc <AddToAutoBuffer>
  AddToAutoBuffer(0, (uint8_t *)&(raw_gyro_acc_data[1]), 2);
 8004230:	2202      	movs	r2, #2
 8004232:	497e      	ldr	r1, [pc, #504]	; (800442c <main+0x290>)
 8004234:	2000      	movs	r0, #0
 8004236:	f001 fad1 	bl	80057dc <AddToAutoBuffer>
  AddToAutoBuffer(0, (uint8_t *)&(raw_gyro_acc_data[2]), 2);
 800423a:	2202      	movs	r2, #2
 800423c:	497c      	ldr	r1, [pc, #496]	; (8004430 <main+0x294>)
 800423e:	2000      	movs	r0, #0
 8004240:	f001 facc 	bl	80057dc <AddToAutoBuffer>
  AddToAutoBuffer(0, (uint8_t *)&gyro_x_angle, 4);
 8004244:	2204      	movs	r2, #4
 8004246:	497b      	ldr	r1, [pc, #492]	; (8004434 <main+0x298>)
 8004248:	2000      	movs	r0, #0
 800424a:	f001 fac7 	bl	80057dc <AddToAutoBuffer>
  AddToAutoBuffer(0, (uint8_t *)&gyro_y_angle, 4);
 800424e:	2204      	movs	r2, #4
 8004250:	4979      	ldr	r1, [pc, #484]	; (8004438 <main+0x29c>)
 8004252:	2000      	movs	r0, #0
 8004254:	f001 fac2 	bl	80057dc <AddToAutoBuffer>
  AddToAutoBuffer(0, (uint8_t *)&compass_heading, 4);
 8004258:	2204      	movs	r2, #4
 800425a:	4978      	ldr	r1, [pc, #480]	; (800443c <main+0x2a0>)
 800425c:	2000      	movs	r0, #0
 800425e:	f001 fabd 	bl	80057dc <AddToAutoBuffer>
  AddToAutoBuffer(0, (uint8_t *)&how_long_to_loop_main, 4);
 8004262:	2204      	movs	r2, #4
 8004264:	4976      	ldr	r1, [pc, #472]	; (8004440 <main+0x2a4>)
 8004266:	2000      	movs	r0, #0
 8004268:	f001 fab8 	bl	80057dc <AddToAutoBuffer>
  AddToAutoBuffer(0, (uint8_t *)&(ppm_channels[2]), 4);
 800426c:	2204      	movs	r2, #4
 800426e:	4975      	ldr	r1, [pc, #468]	; (8004444 <main+0x2a8>)
 8004270:	2000      	movs	r0, #0
 8004272:	f001 fab3 	bl	80057dc <AddToAutoBuffer>
  AddToAutoBuffer(0, &status_first, 1);
 8004276:	2201      	movs	r2, #1
 8004278:	4973      	ldr	r1, [pc, #460]	; (8004448 <main+0x2ac>)
 800427a:	2000      	movs	r0, #0
 800427c:	f001 faae 	bl	80057dc <AddToAutoBuffer>
  auto_packet_count += 1;
 8004280:	4b72      	ldr	r3, [pc, #456]	; (800444c <main+0x2b0>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	3301      	adds	r3, #1
 8004286:	b2da      	uxtb	r2, r3
 8004288:	4b70      	ldr	r3, [pc, #448]	; (800444c <main+0x2b0>)
 800428a:	701a      	strb	r2, [r3, #0]

  auto_packet_buffer[1].total_width = 0;
 800428c:	4b65      	ldr	r3, [pc, #404]	; (8004424 <main+0x288>)
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
  auto_packet_buffer[1].var_count = 0;
 8004294:	4b63      	ldr	r3, [pc, #396]	; (8004424 <main+0x288>)
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
  auto_packet_buffer[1].id = PID_OUTPUT_PACKET;
 800429c:	4b61      	ldr	r3, [pc, #388]	; (8004424 <main+0x288>)
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
  auto_packet_buffer[1].send_rate = 1;
 80042a4:	4b5f      	ldr	r3, [pc, #380]	; (8004424 <main+0x288>)
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2153 	strb.w	r2, [r3, #339]	; 0x153
  AddToAutoBuffer(1, (uint8_t *)&pid_roll_output, 4);
 80042ac:	2204      	movs	r2, #4
 80042ae:	4968      	ldr	r1, [pc, #416]	; (8004450 <main+0x2b4>)
 80042b0:	2001      	movs	r0, #1
 80042b2:	f001 fa93 	bl	80057dc <AddToAutoBuffer>
  AddToAutoBuffer(1, (uint8_t *)&pid_pitch_output, 4);
 80042b6:	2204      	movs	r2, #4
 80042b8:	4966      	ldr	r1, [pc, #408]	; (8004454 <main+0x2b8>)
 80042ba:	2001      	movs	r0, #1
 80042bc:	f001 fa8e 	bl	80057dc <AddToAutoBuffer>
  AddToAutoBuffer(1, (uint8_t *)&pid_yaw_output, 4);
 80042c0:	2204      	movs	r2, #4
 80042c2:	4965      	ldr	r1, [pc, #404]	; (8004458 <main+0x2bc>)
 80042c4:	2001      	movs	r0, #1
 80042c6:	f001 fa89 	bl	80057dc <AddToAutoBuffer>
  //AddToAutoBuffer(1, &pid_pitch_output, 4);
  auto_packet_count += 1;
 80042ca:	4b60      	ldr	r3, [pc, #384]	; (800444c <main+0x2b0>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	3301      	adds	r3, #1
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	4b5e      	ldr	r3, [pc, #376]	; (800444c <main+0x2b0>)
 80042d4:	701a      	strb	r2, [r3, #0]

  auto_packet_buffer[2].total_width = 0;
 80042d6:	4b53      	ldr	r3, [pc, #332]	; (8004424 <main+0x288>)
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
  auto_packet_buffer[2].var_count = 0;
 80042de:	4b51      	ldr	r3, [pc, #324]	; (8004424 <main+0x288>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  auto_packet_buffer[2].id = ALTITUDE_PACKET;
 80042e6:	4b4f      	ldr	r3, [pc, #316]	; (8004424 <main+0x288>)
 80042e8:	2206      	movs	r2, #6
 80042ea:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
  auto_packet_buffer[2].send_rate = 5;
 80042ee:	4b4d      	ldr	r3, [pc, #308]	; (8004424 <main+0x288>)
 80042f0:	2205      	movs	r2, #5
 80042f2:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
  AddToAutoBuffer(2, (uint8_t *)&slow_bmp_altitude, 4);
 80042f6:	2204      	movs	r2, #4
 80042f8:	4958      	ldr	r1, [pc, #352]	; (800445c <main+0x2c0>)
 80042fa:	2002      	movs	r0, #2
 80042fc:	f001 fa6e 	bl	80057dc <AddToAutoBuffer>
  auto_packet_count += 1;
 8004300:	4b52      	ldr	r3, [pc, #328]	; (800444c <main+0x2b0>)
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	3301      	adds	r3, #1
 8004306:	b2da      	uxtb	r2, r3
 8004308:	4b50      	ldr	r3, [pc, #320]	; (800444c <main+0x2b0>)
 800430a:	701a      	strb	r2, [r3, #0]

  for(int i = 0; i < 6; i++)
 800430c:	2300      	movs	r3, #0
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	e008      	b.n	8004324 <main+0x188>
  {
	  ppm_channels[i] = 1000;
 8004312:	4a53      	ldr	r2, [pc, #332]	; (8004460 <main+0x2c4>)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800431a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i = 0; i < 6; i++)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	3301      	adds	r3, #1
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2b05      	cmp	r3, #5
 8004328:	ddf3      	ble.n	8004312 <main+0x176>
  }

  ppm_channels[4] = 2000;
 800432a:	4b4d      	ldr	r3, [pc, #308]	; (8004460 <main+0x2c4>)
 800432c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004330:	611a      	str	r2, [r3, #16]

  for(int i = 0; i < 35; i++)
 8004332:	2300      	movs	r3, #0
 8004334:	60bb      	str	r3, [r7, #8]
 8004336:	e007      	b.n	8004348 <main+0x1ac>
  {
	  empty_data_packet.payload[i] = '\0';
 8004338:	4a4a      	ldr	r2, [pc, #296]	; (8004464 <main+0x2c8>)
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	4413      	add	r3, r2
 800433e:	2200      	movs	r2, #0
 8004340:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 35; i++)
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	3301      	adds	r3, #1
 8004346:	60bb      	str	r3, [r7, #8]
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b22      	cmp	r3, #34	; 0x22
 800434c:	ddf4      	ble.n	8004338 <main+0x19c>
  }

  Setup_IMU();
 800434e:	f7ff fdab 	bl	8003ea8 <Setup_IMU>
  Setup_BMP280();
 8004352:	f7fc ff57 	bl	8001204 <Setup_BMP280>

  //Motor PID Gains
  EEPROM_Clear_Buffer();
 8004356:	f7ff fabb 	bl	80038d0 <EEPROM_Clear_Buffer>
  EEPROM_Read_Page(0, 24);
 800435a:	2118      	movs	r1, #24
 800435c:	2000      	movs	r0, #0
 800435e:	f7ff faf7 	bl	8003950 <EEPROM_Read_Page>
  eeprom_read_buffer_index = 0;
 8004362:	4b41      	ldr	r3, [pc, #260]	; (8004468 <main+0x2cc>)
 8004364:	2200      	movs	r2, #0
 8004366:	701a      	strb	r2, [r3, #0]
  EEPROM_Read_Buffer((uint8_t *)&kp_roll, 4);
 8004368:	2104      	movs	r1, #4
 800436a:	4840      	ldr	r0, [pc, #256]	; (800446c <main+0x2d0>)
 800436c:	f7ff fb3c 	bl	80039e8 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&ki_roll, 4);
 8004370:	2104      	movs	r1, #4
 8004372:	483f      	ldr	r0, [pc, #252]	; (8004470 <main+0x2d4>)
 8004374:	f7ff fb38 	bl	80039e8 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&kd_roll, 4);
 8004378:	2104      	movs	r1, #4
 800437a:	483e      	ldr	r0, [pc, #248]	; (8004474 <main+0x2d8>)
 800437c:	f7ff fb34 	bl	80039e8 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&kp_yaw, 4);
 8004380:	2104      	movs	r1, #4
 8004382:	483d      	ldr	r0, [pc, #244]	; (8004478 <main+0x2dc>)
 8004384:	f7ff fb30 	bl	80039e8 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&ki_yaw, 4);
 8004388:	2104      	movs	r1, #4
 800438a:	483c      	ldr	r0, [pc, #240]	; (800447c <main+0x2e0>)
 800438c:	f7ff fb2c 	bl	80039e8 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&kd_yaw, 4);
 8004390:	2104      	movs	r1, #4
 8004392:	483b      	ldr	r0, [pc, #236]	; (8004480 <main+0x2e4>)
 8004394:	f7ff fb28 	bl	80039e8 <EEPROM_Read_Buffer>

  //Altitude and GPS PID Gains
  EEPROM_Clear_Buffer();
 8004398:	f7ff fa9a 	bl	80038d0 <EEPROM_Clear_Buffer>
  EEPROM_Read_Page(32, 12);
 800439c:	210c      	movs	r1, #12
 800439e:	2020      	movs	r0, #32
 80043a0:	f7ff fad6 	bl	8003950 <EEPROM_Read_Page>
  eeprom_read_buffer_index = 0;
 80043a4:	4b30      	ldr	r3, [pc, #192]	; (8004468 <main+0x2cc>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	701a      	strb	r2, [r3, #0]
  EEPROM_Read_Buffer((uint8_t *)&kp_alt, 4);
 80043aa:	2104      	movs	r1, #4
 80043ac:	4835      	ldr	r0, [pc, #212]	; (8004484 <main+0x2e8>)
 80043ae:	f7ff fb1b 	bl	80039e8 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&ki_alt, 4);
 80043b2:	2104      	movs	r1, #4
 80043b4:	4834      	ldr	r0, [pc, #208]	; (8004488 <main+0x2ec>)
 80043b6:	f7ff fb17 	bl	80039e8 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&kd_alt, 4);
 80043ba:	2104      	movs	r1, #4
 80043bc:	4833      	ldr	r0, [pc, #204]	; (800448c <main+0x2f0>)
 80043be:	f7ff fb13 	bl	80039e8 <EEPROM_Read_Buffer>

  //Compass Calibration Values
  EEPROM_Clear_Buffer();
 80043c2:	f7ff fa85 	bl	80038d0 <EEPROM_Clear_Buffer>
  EEPROM_Read_Page(64, 12);
 80043c6:	210c      	movs	r1, #12
 80043c8:	2040      	movs	r0, #64	; 0x40
 80043ca:	f7ff fac1 	bl	8003950 <EEPROM_Read_Page>
  eeprom_read_buffer_index = 0;
 80043ce:	4b26      	ldr	r3, [pc, #152]	; (8004468 <main+0x2cc>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	701a      	strb	r2, [r3, #0]
  EEPROM_Read_Buffer((uint8_t *)&compass_x_min, 2);
 80043d4:	2102      	movs	r1, #2
 80043d6:	482e      	ldr	r0, [pc, #184]	; (8004490 <main+0x2f4>)
 80043d8:	f7ff fb06 	bl	80039e8 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&compass_x_max, 2);
 80043dc:	2102      	movs	r1, #2
 80043de:	482d      	ldr	r0, [pc, #180]	; (8004494 <main+0x2f8>)
 80043e0:	f7ff fb02 	bl	80039e8 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&compass_y_min, 2);
 80043e4:	2102      	movs	r1, #2
 80043e6:	482c      	ldr	r0, [pc, #176]	; (8004498 <main+0x2fc>)
 80043e8:	f7ff fafe 	bl	80039e8 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&compass_y_max, 2);
 80043ec:	2102      	movs	r1, #2
 80043ee:	482b      	ldr	r0, [pc, #172]	; (800449c <main+0x300>)
 80043f0:	f7ff fafa 	bl	80039e8 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&compass_z_min, 2);
 80043f4:	2102      	movs	r1, #2
 80043f6:	482a      	ldr	r0, [pc, #168]	; (80044a0 <main+0x304>)
 80043f8:	f7ff faf6 	bl	80039e8 <EEPROM_Read_Buffer>
  EEPROM_Read_Buffer((uint8_t *)&compass_z_max, 2);
 80043fc:	2102      	movs	r1, #2
 80043fe:	4829      	ldr	r0, [pc, #164]	; (80044a4 <main+0x308>)
 8004400:	f7ff faf2 	bl	80039e8 <EEPROM_Read_Buffer>

  Setup_Compass();
 8004404:	f7fd fa26 	bl	8001854 <Setup_Compass>
  }

  //program_buffer[14] = 0x03;//Restart Program
  program_buffer[14] = 0x04;*/

  HAL_Delay(2000);
 8004408:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800440c:	f001 fe92 	bl	8006134 <HAL_Delay>

  while(abs(x_deviation_sum) > 20 || abs(y_deviation_sum) > 20 || abs(z_deviation_sum) > 20)
 8004410:	e0c2      	b.n	8004598 <main+0x3fc>
  {
	  for(int i = 0; i < 200; i++)
 8004412:	2300      	movs	r3, #0
 8004414:	607b      	str	r3, [r7, #4]
 8004416:	e09e      	b.n	8004556 <main+0x3ba>
 8004418:	20002bc8 	.word	0x20002bc8
 800441c:	20002c48 	.word	0x20002c48
 8004420:	20002b88 	.word	0x20002b88
 8004424:	200015b0 	.word	0x200015b0
 8004428:	20000fc4 	.word	0x20000fc4
 800442c:	20000fc6 	.word	0x20000fc6
 8004430:	20000fc8 	.word	0x20000fc8
 8004434:	20000fa8 	.word	0x20000fa8
 8004438:	20000fb4 	.word	0x20000fb4
 800443c:	20000258 	.word	0x20000258
 8004440:	20001044 	.word	0x20001044
 8004444:	2000107c 	.word	0x2000107c
 8004448:	200002e0 	.word	0x200002e0
 800444c:	200002e9 	.word	0x200002e9
 8004450:	20000a18 	.word	0x20000a18
 8004454:	20000a1c 	.word	0x20000a1c
 8004458:	20000400 	.word	0x20000400
 800445c:	20000298 	.word	0x20000298
 8004460:	20001074 	.word	0x20001074
 8004464:	20002b34 	.word	0x20002b34
 8004468:	200002c8 	.word	0x200002c8
 800446c:	20000274 	.word	0x20000274
 8004470:	2000027c 	.word	0x2000027c
 8004474:	20000284 	.word	0x20000284
 8004478:	20000278 	.word	0x20000278
 800447c:	20000280 	.word	0x20000280
 8004480:	20000288 	.word	0x20000288
 8004484:	200002a0 	.word	0x200002a0
 8004488:	200002a4 	.word	0x200002a4
 800448c:	200002a8 	.word	0x200002a8
 8004490:	2000024c 	.word	0x2000024c
 8004494:	2000024e 	.word	0x2000024e
 8004498:	20000250 	.word	0x20000250
 800449c:	20000252 	.word	0x20000252
 80044a0:	20000254 	.word	0x20000254
 80044a4:	20000256 	.word	0x20000256
	  {
		  if(i == 0)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d108      	bne.n	80044c0 <main+0x324>
		  {
			  x_deviation_sum = 0;
 80044ae:	4b5e      	ldr	r3, [pc, #376]	; (8004628 <main+0x48c>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]
			  y_deviation_sum = 0;
 80044b4:	4b5d      	ldr	r3, [pc, #372]	; (800462c <main+0x490>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]
			  z_deviation_sum = 0;
 80044ba:	4b5d      	ldr	r3, [pc, #372]	; (8004630 <main+0x494>)
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]
		  }

		  Read_IMU(0);
 80044c0:	2000      	movs	r0, #0
 80044c2:	f7ff fdbd 	bl	8004040 <Read_IMU>

		  x_deviation_sum += abs(raw_gyro_acc_data[0] - last_x_value);
 80044c6:	4b5b      	ldr	r3, [pc, #364]	; (8004634 <main+0x498>)
 80044c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044cc:	461a      	mov	r2, r3
 80044ce:	4b5a      	ldr	r3, [pc, #360]	; (8004638 <main+0x49c>)
 80044d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80044da:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80044de:	4b52      	ldr	r3, [pc, #328]	; (8004628 <main+0x48c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4413      	add	r3, r2
 80044e4:	4a50      	ldr	r2, [pc, #320]	; (8004628 <main+0x48c>)
 80044e6:	6013      	str	r3, [r2, #0]
		  y_deviation_sum += abs(raw_gyro_acc_data[1] - last_y_value);
 80044e8:	4b52      	ldr	r3, [pc, #328]	; (8004634 <main+0x498>)
 80044ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80044ee:	461a      	mov	r2, r3
 80044f0:	4b52      	ldr	r3, [pc, #328]	; (800463c <main+0x4a0>)
 80044f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80044fc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004500:	4b4a      	ldr	r3, [pc, #296]	; (800462c <main+0x490>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4413      	add	r3, r2
 8004506:	4a49      	ldr	r2, [pc, #292]	; (800462c <main+0x490>)
 8004508:	6013      	str	r3, [r2, #0]
		  z_deviation_sum += abs(raw_gyro_acc_data[2] - last_z_value);
 800450a:	4b4a      	ldr	r3, [pc, #296]	; (8004634 <main+0x498>)
 800450c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004510:	461a      	mov	r2, r3
 8004512:	4b4b      	ldr	r3, [pc, #300]	; (8004640 <main+0x4a4>)
 8004514:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800451e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004522:	4b43      	ldr	r3, [pc, #268]	; (8004630 <main+0x494>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4413      	add	r3, r2
 8004528:	4a41      	ldr	r2, [pc, #260]	; (8004630 <main+0x494>)
 800452a:	6013      	str	r3, [r2, #0]

		  last_x_value = raw_gyro_acc_data[0];
 800452c:	4b41      	ldr	r3, [pc, #260]	; (8004634 <main+0x498>)
 800452e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004532:	4b41      	ldr	r3, [pc, #260]	; (8004638 <main+0x49c>)
 8004534:	801a      	strh	r2, [r3, #0]
		  last_y_value = raw_gyro_acc_data[1];
 8004536:	4b3f      	ldr	r3, [pc, #252]	; (8004634 <main+0x498>)
 8004538:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800453c:	4b3f      	ldr	r3, [pc, #252]	; (800463c <main+0x4a0>)
 800453e:	801a      	strh	r2, [r3, #0]
		  last_z_value = raw_gyro_acc_data[2];
 8004540:	4b3c      	ldr	r3, [pc, #240]	; (8004634 <main+0x498>)
 8004542:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8004546:	4b3e      	ldr	r3, [pc, #248]	; (8004640 <main+0x4a4>)
 8004548:	801a      	strh	r2, [r3, #0]
		  HAL_Delay(5);
 800454a:	2005      	movs	r0, #5
 800454c:	f001 fdf2 	bl	8006134 <HAL_Delay>
	  for(int i = 0; i < 200; i++)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3301      	adds	r3, #1
 8004554:	607b      	str	r3, [r7, #4]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2bc7      	cmp	r3, #199	; 0xc7
 800455a:	dda5      	ble.n	80044a8 <main+0x30c>
	  }

	  x_deviation_sum /= 200;
 800455c:	4b32      	ldr	r3, [pc, #200]	; (8004628 <main+0x48c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a38      	ldr	r2, [pc, #224]	; (8004644 <main+0x4a8>)
 8004562:	fb82 1203 	smull	r1, r2, r2, r3
 8004566:	1192      	asrs	r2, r2, #6
 8004568:	17db      	asrs	r3, r3, #31
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	4a2e      	ldr	r2, [pc, #184]	; (8004628 <main+0x48c>)
 800456e:	6013      	str	r3, [r2, #0]
	  y_deviation_sum /= 200;
 8004570:	4b2e      	ldr	r3, [pc, #184]	; (800462c <main+0x490>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a33      	ldr	r2, [pc, #204]	; (8004644 <main+0x4a8>)
 8004576:	fb82 1203 	smull	r1, r2, r2, r3
 800457a:	1192      	asrs	r2, r2, #6
 800457c:	17db      	asrs	r3, r3, #31
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	4a2a      	ldr	r2, [pc, #168]	; (800462c <main+0x490>)
 8004582:	6013      	str	r3, [r2, #0]
	  z_deviation_sum /= 200;
 8004584:	4b2a      	ldr	r3, [pc, #168]	; (8004630 <main+0x494>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a2e      	ldr	r2, [pc, #184]	; (8004644 <main+0x4a8>)
 800458a:	fb82 1203 	smull	r1, r2, r2, r3
 800458e:	1192      	asrs	r2, r2, #6
 8004590:	17db      	asrs	r3, r3, #31
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	4a26      	ldr	r2, [pc, #152]	; (8004630 <main+0x494>)
 8004596:	6013      	str	r3, [r2, #0]
  while(abs(x_deviation_sum) > 20 || abs(y_deviation_sum) > 20 || abs(z_deviation_sum) > 20)
 8004598:	4b23      	ldr	r3, [pc, #140]	; (8004628 <main+0x48c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	bfb8      	it	lt
 80045a0:	425b      	neglt	r3, r3
 80045a2:	2b14      	cmp	r3, #20
 80045a4:	f73f af35 	bgt.w	8004412 <main+0x276>
 80045a8:	4b20      	ldr	r3, [pc, #128]	; (800462c <main+0x490>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	bfb8      	it	lt
 80045b0:	425b      	neglt	r3, r3
 80045b2:	2b14      	cmp	r3, #20
 80045b4:	f73f af2d 	bgt.w	8004412 <main+0x276>
 80045b8:	4b1d      	ldr	r3, [pc, #116]	; (8004630 <main+0x494>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	bfb8      	it	lt
 80045c0:	425b      	neglt	r3, r3
 80045c2:	2b14      	cmp	r3, #20
 80045c4:	f73f af25 	bgt.w	8004412 <main+0x276>
  }

  Calibrate_BMP280();
 80045c8:	f7fd f912 	bl	80017f0 <Calibrate_BMP280>
  Calibrate_IMU();
 80045cc:	f7ff fcba 	bl	8003f44 <Calibrate_IMU>
  ClearPrintBuffer();
 80045d0:	f001 f884 	bl	80056dc <ClearPrintBuffer>
  sprintf((char *)print_text_buffer, "%s", "Gyro Calibrated.\n");
 80045d4:	4a1c      	ldr	r2, [pc, #112]	; (8004648 <main+0x4ac>)
 80045d6:	4b1d      	ldr	r3, [pc, #116]	; (800464c <main+0x4b0>)
 80045d8:	4615      	mov	r5, r2
 80045da:	461c      	mov	r4, r3
 80045dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045de:	6028      	str	r0, [r5, #0]
 80045e0:	6069      	str	r1, [r5, #4]
 80045e2:	60aa      	str	r2, [r5, #8]
 80045e4:	60eb      	str	r3, [r5, #12]
 80045e6:	8823      	ldrh	r3, [r4, #0]
 80045e8:	822b      	strh	r3, [r5, #16]
  PrintManualPacket();
 80045ea:	f001 f891 	bl	8005710 <PrintManualPacket>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ppm_channels[4] < 1600)
 80045ee:	4b18      	ldr	r3, [pc, #96]	; (8004650 <main+0x4b4>)
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80045f6:	da39      	bge.n	800466c <main+0x4d0>
	  {
		  manual_mode = 1;
 80045f8:	4b16      	ldr	r3, [pc, #88]	; (8004654 <main+0x4b8>)
 80045fa:	2201      	movs	r2, #1
 80045fc:	701a      	strb	r2, [r3, #0]
		  status_first |= 1 << 1;
 80045fe:	4b16      	ldr	r3, [pc, #88]	; (8004658 <main+0x4bc>)
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	f043 0302 	orr.w	r3, r3, #2
 8004606:	b2da      	uxtb	r2, r3
 8004608:	4b13      	ldr	r3, [pc, #76]	; (8004658 <main+0x4bc>)
 800460a:	701a      	strb	r2, [r3, #0]

		  launched = 0;
 800460c:	4b13      	ldr	r3, [pc, #76]	; (800465c <main+0x4c0>)
 800460e:	2200      	movs	r2, #0
 8004610:	701a      	strb	r2, [r3, #0]
		  landing = 0;
 8004612:	4b13      	ldr	r3, [pc, #76]	; (8004660 <main+0x4c4>)
 8004614:	2200      	movs	r2, #0
 8004616:	701a      	strb	r2, [r3, #0]
		  launching = 0;
 8004618:	4b12      	ldr	r3, [pc, #72]	; (8004664 <main+0x4c8>)
 800461a:	2200      	movs	r2, #0
 800461c:	701a      	strb	r2, [r3, #0]
		  altitude_hold_flag = 0;
 800461e:	4b12      	ldr	r3, [pc, #72]	; (8004668 <main+0x4cc>)
 8004620:	2200      	movs	r2, #0
 8004622:	701a      	strb	r2, [r3, #0]
 8004624:	e02e      	b.n	8004684 <main+0x4e8>
 8004626:	bf00      	nop
 8004628:	20000034 	.word	0x20000034
 800462c:	20000038 	.word	0x20000038
 8004630:	2000003c 	.word	0x2000003c
 8004634:	20000fc4 	.word	0x20000fc4
 8004638:	2000109c 	.word	0x2000109c
 800463c:	20001040 	.word	0x20001040
 8004640:	20001094 	.word	0x20001094
 8004644:	51eb851f 	.word	0x51eb851f
 8004648:	200010c0 	.word	0x200010c0
 800464c:	08013518 	.word	0x08013518
 8004650:	20001074 	.word	0x20001074
 8004654:	200002bf 	.word	0x200002bf
 8004658:	200002e0 	.word	0x200002e0
 800465c:	200002bc 	.word	0x200002bc
 8004660:	200002be 	.word	0x200002be
 8004664:	200002bd 	.word	0x200002bd
 8004668:	200002e1 	.word	0x200002e1
	  }
	  else
	  {
		  manual_mode = 0;
 800466c:	4b78      	ldr	r3, [pc, #480]	; (8004850 <main+0x6b4>)
 800466e:	2200      	movs	r2, #0
 8004670:	701a      	strb	r2, [r3, #0]
		  status_first &= ~(1 << 1);
 8004672:	4b78      	ldr	r3, [pc, #480]	; (8004854 <main+0x6b8>)
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	f023 0302 	bic.w	r3, r3, #2
 800467a:	b2da      	uxtb	r2, r3
 800467c:	4b75      	ldr	r3, [pc, #468]	; (8004854 <main+0x6b8>)
 800467e:	701a      	strb	r2, [r3, #0]

		  Control_Loop();
 8004680:	f7fe fdf0 	bl	8003264 <Control_Loop>
	  }

	  status_first = ((status_first | 0x01) * launched) + ((status_first & ~(0x01)) * (launched ^ 0x01));
 8004684:	4b73      	ldr	r3, [pc, #460]	; (8004854 <main+0x6b8>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	f043 0301 	orr.w	r3, r3, #1
 800468c:	b2da      	uxtb	r2, r3
 800468e:	4b72      	ldr	r3, [pc, #456]	; (8004858 <main+0x6bc>)
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	fb12 f303 	smulbb	r3, r2, r3
 8004696:	b2da      	uxtb	r2, r3
 8004698:	4b6e      	ldr	r3, [pc, #440]	; (8004854 <main+0x6b8>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	f023 0301 	bic.w	r3, r3, #1
 80046a0:	b2d9      	uxtb	r1, r3
 80046a2:	4b6d      	ldr	r3, [pc, #436]	; (8004858 <main+0x6bc>)
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	f083 0301 	eor.w	r3, r3, #1
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	fb11 f303 	smulbb	r3, r1, r3
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	4413      	add	r3, r2
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	4b67      	ldr	r3, [pc, #412]	; (8004854 <main+0x6b8>)
 80046b8:	701a      	strb	r2, [r3, #0]

	  if(GetMillisDifference(&temp_led_timer) > 500)
 80046ba:	4868      	ldr	r0, [pc, #416]	; (800485c <main+0x6c0>)
 80046bc:	f000 fa60 	bl	8004b80 <GetMillisDifference>
 80046c0:	4603      	mov	r3, r0
 80046c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80046c6:	d904      	bls.n	80046d2 <main+0x536>
	  {
		  temp_led_timer = GetMillis();
 80046c8:	f000 fa48 	bl	8004b5c <GetMillis>
 80046cc:	4602      	mov	r2, r0
 80046ce:	4b63      	ldr	r3, [pc, #396]	; (800485c <main+0x6c0>)
 80046d0:	601a      	str	r2, [r3, #0]

		  //HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	  }

	  if(GetMicrosDifference(&pwm_output_timer) >= 4000)
 80046d2:	4863      	ldr	r0, [pc, #396]	; (8004860 <main+0x6c4>)
 80046d4:	f000 fa62 	bl	8004b9c <GetMicrosDifference>
 80046d8:	4603      	mov	r3, r0
 80046da:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80046de:	d304      	bcc.n	80046ea <main+0x54e>
	  {
		  pwm_output_timer = GetMicros();
 80046e0:	f000 fa30 	bl	8004b44 <GetMicros>
 80046e4:	4602      	mov	r2, r0
 80046e6:	4b5e      	ldr	r3, [pc, #376]	; (8004860 <main+0x6c4>)
 80046e8:	601a      	str	r2, [r3, #0]
		  //__HAL_TIM_SET_COUNTER(&htim8, 4999); //Reset motor PWN counter for fast response time(probably makes esc refresh rate faster)
	  }

	  if(GetMicrosDifference(&main_loop_timer) >= 2000)
 80046ea:	485e      	ldr	r0, [pc, #376]	; (8004864 <main+0x6c8>)
 80046ec:	f000 fa56 	bl	8004b9c <GetMicrosDifference>
 80046f0:	4603      	mov	r3, r0
 80046f2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80046f6:	f0c0 80a7 	bcc.w	8004848 <main+0x6ac>
	  {
		  if(main_cycle_counter > 399)
 80046fa:	4b5b      	ldr	r3, [pc, #364]	; (8004868 <main+0x6cc>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004702:	d302      	bcc.n	800470a <main+0x56e>
			  main_cycle_counter = 0;
 8004704:	4b58      	ldr	r3, [pc, #352]	; (8004868 <main+0x6cc>)
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]
		  if(main_cycle_counter % 4 == 0)//Every 4 clock cycles(500uS * 4 = 2000uS) NOT IN USE RIGHT NOW
		  {

		  }

		  how_long_to_loop_main = GetMicrosDifference(&main_loop_timer);
 800470a:	4856      	ldr	r0, [pc, #344]	; (8004864 <main+0x6c8>)
 800470c:	f000 fa46 	bl	8004b9c <GetMicrosDifference>
 8004710:	4602      	mov	r2, r0
 8004712:	4b56      	ldr	r3, [pc, #344]	; (800486c <main+0x6d0>)
 8004714:	601a      	str	r2, [r3, #0]
		  if(how_long_to_loop_main > 4000)
 8004716:	4b55      	ldr	r3, [pc, #340]	; (800486c <main+0x6d0>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800471e:	d903      	bls.n	8004728 <main+0x58c>
			  how_long_to_loop_main = 3000;
 8004720:	4b52      	ldr	r3, [pc, #328]	; (800486c <main+0x6d0>)
 8004722:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004726:	601a      	str	r2, [r3, #0]
		  how_long_to_loop_modifier = (float)(round(((float)((float)how_long_to_loop_main / 2000)) * 100.0) / 100.0);
 8004728:	4b50      	ldr	r3, [pc, #320]	; (800486c <main+0x6d0>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	ee07 3a90 	vmov	s15, r3
 8004730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004734:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8004870 <main+0x6d4>
 8004738:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800473c:	ee16 0a90 	vmov	r0, s13
 8004740:	f7fb ff02 	bl	8000548 <__aeabi_f2d>
 8004744:	f04f 0200 	mov.w	r2, #0
 8004748:	4b4a      	ldr	r3, [pc, #296]	; (8004874 <main+0x6d8>)
 800474a:	f7fb ff55 	bl	80005f8 <__aeabi_dmul>
 800474e:	4603      	mov	r3, r0
 8004750:	460c      	mov	r4, r1
 8004752:	ec44 3b17 	vmov	d7, r3, r4
 8004756:	eeb0 0a47 	vmov.f32	s0, s14
 800475a:	eef0 0a67 	vmov.f32	s1, s15
 800475e:	f00c fa3f 	bl	8010be0 <round>
 8004762:	ec51 0b10 	vmov	r0, r1, d0
 8004766:	f04f 0200 	mov.w	r2, #0
 800476a:	4b42      	ldr	r3, [pc, #264]	; (8004874 <main+0x6d8>)
 800476c:	f7fc f86e 	bl	800084c <__aeabi_ddiv>
 8004770:	4603      	mov	r3, r0
 8004772:	460c      	mov	r4, r1
 8004774:	4618      	mov	r0, r3
 8004776:	4621      	mov	r1, r4
 8004778:	f7fc fa16 	bl	8000ba8 <__aeabi_d2f>
 800477c:	4602      	mov	r2, r0
 800477e:	4b3e      	ldr	r3, [pc, #248]	; (8004878 <main+0x6dc>)
 8004780:	601a      	str	r2, [r3, #0]
		  main_loop_timer = GetMicros();
 8004782:	f000 f9df 	bl	8004b44 <GetMicros>
 8004786:	4602      	mov	r2, r0
 8004788:	4b36      	ldr	r3, [pc, #216]	; (8004864 <main+0x6c8>)
 800478a:	601a      	str	r2, [r3, #0]

		  if(launching && !launched)
 800478c:	4b3b      	ldr	r3, [pc, #236]	; (800487c <main+0x6e0>)
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d005      	beq.n	80047a0 <main+0x604>
 8004794:	4b30      	ldr	r3, [pc, #192]	; (8004858 <main+0x6bc>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <main+0x604>
		  {
			  //Launch logic here
			  Launch_Behavior();
 800479c:	f7fe febe 	bl	800351c <Launch_Behavior>
		  }

		  if(landing && launched)
 80047a0:	4b37      	ldr	r3, [pc, #220]	; (8004880 <main+0x6e4>)
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d005      	beq.n	80047b4 <main+0x618>
 80047a8:	4b2b      	ldr	r3, [pc, #172]	; (8004858 <main+0x6bc>)
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <main+0x618>
		  {
			  //Landing logic here
			  Land_Behavior();
 80047b0:	f7fe ff66 	bl	8003680 <Land_Behavior>
		  }

		  if(main_cycle_counter % 20)
 80047b4:	4b2c      	ldr	r3, [pc, #176]	; (8004868 <main+0x6cc>)
 80047b6:	6819      	ldr	r1, [r3, #0]
 80047b8:	4b32      	ldr	r3, [pc, #200]	; (8004884 <main+0x6e8>)
 80047ba:	fba3 2301 	umull	r2, r3, r3, r1
 80047be:	091a      	lsrs	r2, r3, #4
 80047c0:	4613      	mov	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	1aca      	subs	r2, r1, r3
 80047ca:	2a00      	cmp	r2, #0
 80047cc:	d015      	beq.n	80047fa <main+0x65e>
		  {
			  Read_Compass();
 80047ce:	f7fd f86b 	bl	80018a8 <Read_Compass>
			  Read_BMP280_PressureTemperature();
 80047d2:	f7fc fd4d 	bl	8001270 <Read_BMP280_PressureTemperature>
			  if(altitude_hold_flag)
 80047d6:	4b2c      	ldr	r3, [pc, #176]	; (8004888 <main+0x6ec>)
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <main+0x648>
				  Calculate_Altitude_PID();
 80047de:	f7fe fbc3 	bl	8002f68 <Calculate_Altitude_PID>
 80047e2:	e00a      	b.n	80047fa <main+0x65e>
			  else
			  {
				  altitude_pid_output = 0;
 80047e4:	4b29      	ldr	r3, [pc, #164]	; (800488c <main+0x6f0>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	601a      	str	r2, [r3, #0]
				  pid_alt_last_error = 0;
 80047ea:	4b29      	ldr	r3, [pc, #164]	; (8004890 <main+0x6f4>)
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]
				  pid_alt_i = 0;
 80047f2:	4b28      	ldr	r3, [pc, #160]	; (8004894 <main+0x6f8>)
 80047f4:	f04f 0200 	mov.w	r2, #0
 80047f8:	601a      	str	r2, [r3, #0]
			  }
		  }

		  Read_IMU(0);
 80047fa:	2000      	movs	r0, #0
 80047fc:	f7ff fc20 	bl	8004040 <Read_IMU>
		  Calculate_Attitude();
 8004800:	f7fd fd3e 	bl	8002280 <Calculate_Attitude>
		  //Calculate all motors values, then immediately output them using oneshot125
		  Motor_PID();
 8004804:	f7fd ffe8 	bl	80027d8 <Motor_PID>
		  Calculate_Motor_Outputs();
 8004808:	f7fe fab0 	bl	8002d6c <Calculate_Motor_Outputs>

		  __HAL_TIM_SET_COUNTER(&htim8, 3999);
 800480c:	4b22      	ldr	r3, [pc, #136]	; (8004898 <main+0x6fc>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f640 729f 	movw	r2, #3999	; 0xf9f
 8004814:	625a      	str	r2, [r3, #36]	; 0x24

		  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, esc1_output);
 8004816:	4b21      	ldr	r3, [pc, #132]	; (800489c <main+0x700>)
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	4b1f      	ldr	r3, [pc, #124]	; (8004898 <main+0x6fc>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	641a      	str	r2, [r3, #64]	; 0x40
		  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, esc2_output);
 8004820:	4b1f      	ldr	r3, [pc, #124]	; (80048a0 <main+0x704>)
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	4b1c      	ldr	r3, [pc, #112]	; (8004898 <main+0x6fc>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, esc3_output);
 800482a:	4b1e      	ldr	r3, [pc, #120]	; (80048a4 <main+0x708>)
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	4b1a      	ldr	r3, [pc, #104]	; (8004898 <main+0x6fc>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, esc4_output);
 8004834:	4b1c      	ldr	r3, [pc, #112]	; (80048a8 <main+0x70c>)
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	4b17      	ldr	r3, [pc, #92]	; (8004898 <main+0x6fc>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	635a      	str	r2, [r3, #52]	; 0x34

		  main_cycle_counter++;
 800483e:	4b0a      	ldr	r3, [pc, #40]	; (8004868 <main+0x6cc>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	3301      	adds	r3, #1
 8004844:	4a08      	ldr	r2, [pc, #32]	; (8004868 <main+0x6cc>)
 8004846:	6013      	str	r3, [r2, #0]
	  }

	  telem_loop();
 8004848:	f000 fb72 	bl	8004f30 <telem_loop>
	  if(ppm_channels[4] < 1600)
 800484c:	e6cf      	b.n	80045ee <main+0x452>
 800484e:	bf00      	nop
 8004850:	200002bf 	.word	0x200002bf
 8004854:	200002e0 	.word	0x200002e0
 8004858:	200002bc 	.word	0x200002bc
 800485c:	20001070 	.word	0x20001070
 8004860:	2000103c 	.word	0x2000103c
 8004864:	20001098 	.word	0x20001098
 8004868:	200002dc 	.word	0x200002dc
 800486c:	20001044 	.word	0x20001044
 8004870:	44fa0000 	.word	0x44fa0000
 8004874:	40590000 	.word	0x40590000
 8004878:	20000030 	.word	0x20000030
 800487c:	200002bd 	.word	0x200002bd
 8004880:	200002be 	.word	0x200002be
 8004884:	cccccccd 	.word	0xcccccccd
 8004888:	200002e1 	.word	0x200002e1
 800488c:	20000a44 	.word	0x20000a44
 8004890:	2000029c 	.word	0x2000029c
 8004894:	200002ac 	.word	0x200002ac
 8004898:	20002b88 	.word	0x20002b88
 800489c:	20000004 	.word	0x20000004
 80048a0:	20000008 	.word	0x20000008
 80048a4:	2000000c 	.word	0x2000000c
 80048a8:	20000010 	.word	0x20000010

080048ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b098      	sub	sp, #96	; 0x60
 80048b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80048b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80048b6:	2230      	movs	r2, #48	; 0x30
 80048b8:	2100      	movs	r1, #0
 80048ba:	4618      	mov	r0, r3
 80048bc:	f00b fd34 	bl	8010328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80048c0:	f107 031c 	add.w	r3, r7, #28
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	605a      	str	r2, [r3, #4]
 80048ca:	609a      	str	r2, [r3, #8]
 80048cc:	60da      	str	r2, [r3, #12]
 80048ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80048d0:	f107 030c 	add.w	r3, r7, #12
 80048d4:	2200      	movs	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	605a      	str	r2, [r3, #4]
 80048da:	609a      	str	r2, [r3, #8]
 80048dc:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80048de:	2300      	movs	r3, #0
 80048e0:	60bb      	str	r3, [r7, #8]
 80048e2:	4b31      	ldr	r3, [pc, #196]	; (80049a8 <SystemClock_Config+0xfc>)
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	4a30      	ldr	r2, [pc, #192]	; (80049a8 <SystemClock_Config+0xfc>)
 80048e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ec:	6413      	str	r3, [r2, #64]	; 0x40
 80048ee:	4b2e      	ldr	r3, [pc, #184]	; (80049a8 <SystemClock_Config+0xfc>)
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f6:	60bb      	str	r3, [r7, #8]
 80048f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80048fa:	2300      	movs	r3, #0
 80048fc:	607b      	str	r3, [r7, #4]
 80048fe:	4b2b      	ldr	r3, [pc, #172]	; (80049ac <SystemClock_Config+0x100>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a2a      	ldr	r2, [pc, #168]	; (80049ac <SystemClock_Config+0x100>)
 8004904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	4b28      	ldr	r3, [pc, #160]	; (80049ac <SystemClock_Config+0x100>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004912:	607b      	str	r3, [r7, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004916:	2309      	movs	r3, #9
 8004918:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800491a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800491e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004920:	2301      	movs	r3, #1
 8004922:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004924:	2302      	movs	r3, #2
 8004926:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004928:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800492c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800492e:	2310      	movs	r3, #16
 8004930:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004932:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8004936:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004938:	2302      	movs	r3, #2
 800493a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800493c:	2307      	movs	r3, #7
 800493e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004940:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004944:	4618      	mov	r0, r3
 8004946:	f006 f8eb 	bl	800ab20 <HAL_RCC_OscConfig>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d001      	beq.n	8004954 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8004950:	f000 f9a4 	bl	8004c9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004954:	230f      	movs	r3, #15
 8004956:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004958:	2302      	movs	r3, #2
 800495a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800495c:	2300      	movs	r3, #0
 800495e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004960:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004964:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800496a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800496c:	f107 031c 	add.w	r3, r7, #28
 8004970:	2105      	movs	r1, #5
 8004972:	4618      	mov	r0, r3
 8004974:	f006 fb44 	bl	800b000 <HAL_RCC_ClockConfig>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800497e:	f000 f98d 	bl	8004c9c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004982:	2302      	movs	r3, #2
 8004984:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004986:	f44f 7300 	mov.w	r3, #512	; 0x200
 800498a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800498c:	f107 030c 	add.w	r3, r7, #12
 8004990:	4618      	mov	r0, r3
 8004992:	f006 fd11 	bl	800b3b8 <HAL_RCCEx_PeriphCLKConfig>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800499c:	f000 f97e 	bl	8004c9c <Error_Handler>
  }
}
 80049a0:	bf00      	nop
 80049a2:	3760      	adds	r7, #96	; 0x60
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	40023800 	.word	0x40023800
 80049ac:	40007000 	.word	0x40007000

080049b0 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a4e      	ldr	r2, [pc, #312]	; (8004af4 <HAL_TIM_IC_CaptureCallback+0x144>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	f040 8095 	bne.w	8004aec <HAL_TIM_IC_CaptureCallback+0x13c>
	{
		current_ppm_capture = HAL_TIM_ReadCapturedValue(&htim5, TIM_CHANNEL_1);
 80049c2:	2100      	movs	r1, #0
 80049c4:	484b      	ldr	r0, [pc, #300]	; (8004af4 <HAL_TIM_IC_CaptureCallback+0x144>)
 80049c6:	f007 fb37 	bl	800c038 <HAL_TIM_ReadCapturedValue>
 80049ca:	4602      	mov	r2, r0
 80049cc:	4b4a      	ldr	r3, [pc, #296]	; (8004af8 <HAL_TIM_IC_CaptureCallback+0x148>)
 80049ce:	601a      	str	r2, [r3, #0]

		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 80049d0:	2101      	movs	r1, #1
 80049d2:	484a      	ldr	r0, [pc, #296]	; (8004afc <HAL_TIM_IC_CaptureCallback+0x14c>)
 80049d4:	f002 f994 	bl	8006d00 <HAL_GPIO_ReadPin>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d014      	beq.n	8004a08 <HAL_TIM_IC_CaptureCallback+0x58>
		{
			last_ppm_capture = current_ppm_capture;
 80049de:	4b46      	ldr	r3, [pc, #280]	; (8004af8 <HAL_TIM_IC_CaptureCallback+0x148>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a47      	ldr	r2, [pc, #284]	; (8004b00 <HAL_TIM_IC_CaptureCallback+0x150>)
 80049e4:	6013      	str	r3, [r2, #0]

			//&htim3->Instance->CCER |= TIM_CCER_CC1P;
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80049e6:	4b43      	ldr	r3, [pc, #268]	; (8004af4 <HAL_TIM_IC_CaptureCallback+0x144>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	6a1a      	ldr	r2, [r3, #32]
 80049ec:	4b41      	ldr	r3, [pc, #260]	; (8004af4 <HAL_TIM_IC_CaptureCallback+0x144>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 020a 	bic.w	r2, r2, #10
 80049f4:	621a      	str	r2, [r3, #32]
 80049f6:	4b3f      	ldr	r3, [pc, #252]	; (8004af4 <HAL_TIM_IC_CaptureCallback+0x144>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	6a1a      	ldr	r2, [r3, #32]
 80049fc:	4b3d      	ldr	r3, [pc, #244]	; (8004af4 <HAL_TIM_IC_CaptureCallback+0x144>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f042 0202 	orr.w	r2, r2, #2
 8004a04:	621a      	str	r2, [r3, #32]
			}

			__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
		}
	}
}
 8004a06:	e071      	b.n	8004aec <HAL_TIM_IC_CaptureCallback+0x13c>
			if (current_ppm_capture > last_ppm_capture)
 8004a08:	4b3b      	ldr	r3, [pc, #236]	; (8004af8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	4b3c      	ldr	r3, [pc, #240]	; (8004b00 <HAL_TIM_IC_CaptureCallback+0x150>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d907      	bls.n	8004a24 <HAL_TIM_IC_CaptureCallback+0x74>
				frequency_read = current_ppm_capture - last_ppm_capture;
 8004a14:	4b38      	ldr	r3, [pc, #224]	; (8004af8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	4b39      	ldr	r3, [pc, #228]	; (8004b00 <HAL_TIM_IC_CaptureCallback+0x150>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	4a39      	ldr	r2, [pc, #228]	; (8004b04 <HAL_TIM_IC_CaptureCallback+0x154>)
 8004a20:	6013      	str	r3, [r2, #0]
 8004a22:	e00d      	b.n	8004a40 <HAL_TIM_IC_CaptureCallback+0x90>
			else if (current_ppm_capture <= last_ppm_capture)
 8004a24:	4b34      	ldr	r3, [pc, #208]	; (8004af8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	4b35      	ldr	r3, [pc, #212]	; (8004b00 <HAL_TIM_IC_CaptureCallback+0x150>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d807      	bhi.n	8004a40 <HAL_TIM_IC_CaptureCallback+0x90>
				frequency_read = 0xFFFFFFFF + current_ppm_capture - last_ppm_capture;
 8004a30:	4b31      	ldr	r3, [pc, #196]	; (8004af8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	4b32      	ldr	r3, [pc, #200]	; (8004b00 <HAL_TIM_IC_CaptureCallback+0x150>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	4a31      	ldr	r2, [pc, #196]	; (8004b04 <HAL_TIM_IC_CaptureCallback+0x154>)
 8004a3e:	6013      	str	r3, [r2, #0]
			if(frequency_read > 3000)
 8004a40:	4b30      	ldr	r3, [pc, #192]	; (8004b04 <HAL_TIM_IC_CaptureCallback+0x154>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d903      	bls.n	8004a54 <HAL_TIM_IC_CaptureCallback+0xa4>
				current_ppm_channel = 0;
 8004a4c:	4b2e      	ldr	r3, [pc, #184]	; (8004b08 <HAL_TIM_IC_CaptureCallback+0x158>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	701a      	strb	r2, [r3, #0]
 8004a52:	e006      	b.n	8004a62 <HAL_TIM_IC_CaptureCallback+0xb2>
				current_ppm_channel++;
 8004a54:	4b2c      	ldr	r3, [pc, #176]	; (8004b08 <HAL_TIM_IC_CaptureCallback+0x158>)
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	4b2a      	ldr	r3, [pc, #168]	; (8004b08 <HAL_TIM_IC_CaptureCallback+0x158>)
 8004a60:	701a      	strb	r2, [r3, #0]
			if(frequency_read > test_max_frequency)
 8004a62:	4b28      	ldr	r3, [pc, #160]	; (8004b04 <HAL_TIM_IC_CaptureCallback+0x154>)
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	4b29      	ldr	r3, [pc, #164]	; (8004b0c <HAL_TIM_IC_CaptureCallback+0x15c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d903      	bls.n	8004a76 <HAL_TIM_IC_CaptureCallback+0xc6>
				test_max_frequency = frequency_read;
 8004a6e:	4b25      	ldr	r3, [pc, #148]	; (8004b04 <HAL_TIM_IC_CaptureCallback+0x154>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a26      	ldr	r2, [pc, #152]	; (8004b0c <HAL_TIM_IC_CaptureCallback+0x15c>)
 8004a74:	6013      	str	r3, [r2, #0]
			frequency_read += 400;
 8004a76:	4b23      	ldr	r3, [pc, #140]	; (8004b04 <HAL_TIM_IC_CaptureCallback+0x154>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8004a7e:	4a21      	ldr	r2, [pc, #132]	; (8004b04 <HAL_TIM_IC_CaptureCallback+0x154>)
 8004a80:	6013      	str	r3, [r2, #0]
			if(frequency_read < 1000)
 8004a82:	4b20      	ldr	r3, [pc, #128]	; (8004b04 <HAL_TIM_IC_CaptureCallback+0x154>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a8a:	d204      	bcs.n	8004a96 <HAL_TIM_IC_CaptureCallback+0xe6>
				frequency_read = 1000;
 8004a8c:	4b1d      	ldr	r3, [pc, #116]	; (8004b04 <HAL_TIM_IC_CaptureCallback+0x154>)
 8004a8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	e008      	b.n	8004aa8 <HAL_TIM_IC_CaptureCallback+0xf8>
			else if(frequency_read > 2000)
 8004a96:	4b1b      	ldr	r3, [pc, #108]	; (8004b04 <HAL_TIM_IC_CaptureCallback+0x154>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004a9e:	d903      	bls.n	8004aa8 <HAL_TIM_IC_CaptureCallback+0xf8>
				frequency_read = 2000;
 8004aa0:	4b18      	ldr	r3, [pc, #96]	; (8004b04 <HAL_TIM_IC_CaptureCallback+0x154>)
 8004aa2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004aa6:	601a      	str	r2, [r3, #0]
			if(current_ppm_channel >= 1 && current_ppm_channel <= 6)
 8004aa8:	4b17      	ldr	r3, [pc, #92]	; (8004b08 <HAL_TIM_IC_CaptureCallback+0x158>)
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00e      	beq.n	8004ad0 <HAL_TIM_IC_CaptureCallback+0x120>
 8004ab2:	4b15      	ldr	r3, [pc, #84]	; (8004b08 <HAL_TIM_IC_CaptureCallback+0x158>)
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2b06      	cmp	r3, #6
 8004aba:	d809      	bhi.n	8004ad0 <HAL_TIM_IC_CaptureCallback+0x120>
				ppm_channels[current_ppm_channel - 1] = frequency_read;
 8004abc:	4b11      	ldr	r3, [pc, #68]	; (8004b04 <HAL_TIM_IC_CaptureCallback+0x154>)
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	4b11      	ldr	r3, [pc, #68]	; (8004b08 <HAL_TIM_IC_CaptureCallback+0x158>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	4611      	mov	r1, r2
 8004aca:	4a11      	ldr	r2, [pc, #68]	; (8004b10 <HAL_TIM_IC_CaptureCallback+0x160>)
 8004acc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			__HAL_TIM_SET_CAPTUREPOLARITY(&htim5, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8004ad0:	4b08      	ldr	r3, [pc, #32]	; (8004af4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6a1a      	ldr	r2, [r3, #32]
 8004ad6:	4b07      	ldr	r3, [pc, #28]	; (8004af4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 020a 	bic.w	r2, r2, #10
 8004ade:	621a      	str	r2, [r3, #32]
 8004ae0:	4b04      	ldr	r3, [pc, #16]	; (8004af4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	4b03      	ldr	r3, [pc, #12]	; (8004af4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6a12      	ldr	r2, [r2, #32]
 8004aea:	621a      	str	r2, [r3, #32]
}
 8004aec:	bf00      	nop
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	20002bc8 	.word	0x20002bc8
 8004af8:	200002cc 	.word	0x200002cc
 8004afc:	40020000 	.word	0x40020000
 8004b00:	200002d0 	.word	0x200002d0
 8004b04:	2000002c 	.word	0x2000002c
 8004b08:	200002d4 	.word	0x200002d4
 8004b0c:	200002d8 	.word	0x200002d8
 8004b10:	20001074 	.word	0x20001074

08004b14 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
	if(htim == &htim9)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a07      	ldr	r2, [pc, #28]	; (8004b3c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d104      	bne.n	8004b2e <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		//micros_timer_base += 65000;//65536;
		millis_timer_base += 65;//Overflow doesn't matter unless board is running for more than 49 days
 8004b24:	4b06      	ldr	r3, [pc, #24]	; (8004b40 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	3341      	adds	r3, #65	; 0x41
 8004b2a:	4a05      	ldr	r2, [pc, #20]	; (8004b40 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8004b2c:	6013      	str	r3, [r2, #0]
	}
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	20002c48 	.word	0x20002c48
 8004b40:	20001090 	.word	0x20001090

08004b44 <GetMicros>:

uint32_t GetMicros()
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
	//return micros_timer_base + __HAL_TIM_GET_COUNTER(&htim4);
	return __HAL_TIM_GET_COUNTER(&htim9);
 8004b48:	4b03      	ldr	r3, [pc, #12]	; (8004b58 <GetMicros+0x14>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	20002c48 	.word	0x20002c48

08004b5c <GetMillis>:

uint32_t GetMillis()
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
	return millis_timer_base + (GetMicros() / 1000);
 8004b60:	f7ff fff0 	bl	8004b44 <GetMicros>
 8004b64:	4602      	mov	r2, r0
 8004b66:	4b04      	ldr	r3, [pc, #16]	; (8004b78 <GetMillis+0x1c>)
 8004b68:	fba3 2302 	umull	r2, r3, r3, r2
 8004b6c:	099a      	lsrs	r2, r3, #6
 8004b6e:	4b03      	ldr	r3, [pc, #12]	; (8004b7c <GetMillis+0x20>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4413      	add	r3, r2
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	10624dd3 	.word	0x10624dd3
 8004b7c:	20001090 	.word	0x20001090

08004b80 <GetMillisDifference>:

uint32_t GetMillisDifference(uint32_t *timer_counter_to_use)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
	return GetMillis() - *timer_counter_to_use;
 8004b88:	f7ff ffe8 	bl	8004b5c <GetMillis>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	1ad3      	subs	r3, r2, r3
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <GetMicrosDifference>:

uint32_t GetMicrosDifference(uint32_t *timer_counter_to_use)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
	uint32_t current_micros = GetMicros();
 8004ba4:	f7ff ffce 	bl	8004b44 <GetMicros>
 8004ba8:	60b8      	str	r0, [r7, #8]
	uint32_t micros_difference = 0;
 8004baa:	2300      	movs	r3, #0
 8004bac:	60fb      	str	r3, [r7, #12]

	if(current_micros > *timer_counter_to_use)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d905      	bls.n	8004bc4 <GetMicrosDifference+0x28>
	{
		micros_difference = current_micros - *timer_counter_to_use;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	60fb      	str	r3, [r7, #12]
 8004bc2:	e00c      	b.n	8004bde <GetMicrosDifference+0x42>
	}
	else if(current_micros < *timer_counter_to_use)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d207      	bcs.n	8004bde <GetMicrosDifference+0x42>
	{
		micros_difference = 65000 + current_micros - *timer_counter_to_use;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	f503 437d 	add.w	r3, r3, #64768	; 0xfd00
 8004bda:	33e8      	adds	r3, #232	; 0xe8
 8004bdc:	60fb      	str	r3, [r7, #12]
	}

	return micros_difference;
 8004bde:	68fb      	ldr	r3, [r7, #12]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c2)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a06      	ldr	r2, [pc, #24]	; (8004c20 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d102      	bne.n	8004c12 <HAL_I2C_MasterTxCpltCallback+0x16>
	{
		tx_done = 1;
 8004c0c:	4b05      	ldr	r3, [pc, #20]	; (8004c24 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8004c0e:	2201      	movs	r2, #1
 8004c10:	701a      	strb	r2, [r3, #0]
	}
}
 8004c12:	bf00      	nop
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
 8004c1e:	bf00      	nop
 8004c20:	20000e2c 	.word	0x20000e2c
 8004c24:	200002f0 	.word	0x200002f0

08004c28 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c2)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a08      	ldr	r2, [pc, #32]	; (8004c54 <HAL_I2C_MasterRxCpltCallback+0x2c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d107      	bne.n	8004c48 <HAL_I2C_MasterRxCpltCallback+0x20>
	{
		rx_done = 1;
 8004c38:	4b07      	ldr	r3, [pc, #28]	; (8004c58 <HAL_I2C_MasterRxCpltCallback+0x30>)
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	701a      	strb	r2, [r3, #0]
		acks_counted++;
 8004c3e:	4b07      	ldr	r3, [pc, #28]	; (8004c5c <HAL_I2C_MasterRxCpltCallback+0x34>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3301      	adds	r3, #1
 8004c44:	4a05      	ldr	r2, [pc, #20]	; (8004c5c <HAL_I2C_MasterRxCpltCallback+0x34>)
 8004c46:	6013      	str	r3, [r2, #0]
	}
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	20000e2c 	.word	0x20000e2c
 8004c58:	200002ef 	.word	0x200002ef
 8004c5c:	200010e0 	.word	0x200010e0

08004c60 <HAL_I2C_AbortCpltCallback>:

void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c2)
	{
	}
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <HAL_I2C_ErrorCallback>:



void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c2)
	{
	}
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]

}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004ca0:	bf00      	nop
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
	...

08004cac <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004cb0:	4b0f      	ldr	r3, [pc, #60]	; (8004cf0 <MX_RTC_Init+0x44>)
 8004cb2:	4a10      	ldr	r2, [pc, #64]	; (8004cf4 <MX_RTC_Init+0x48>)
 8004cb4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004cb6:	4b0e      	ldr	r3, [pc, #56]	; (8004cf0 <MX_RTC_Init+0x44>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004cbc:	4b0c      	ldr	r3, [pc, #48]	; (8004cf0 <MX_RTC_Init+0x44>)
 8004cbe:	227f      	movs	r2, #127	; 0x7f
 8004cc0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004cc2:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <MX_RTC_Init+0x44>)
 8004cc4:	22ff      	movs	r2, #255	; 0xff
 8004cc6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004cc8:	4b09      	ldr	r3, [pc, #36]	; (8004cf0 <MX_RTC_Init+0x44>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004cce:	4b08      	ldr	r3, [pc, #32]	; (8004cf0 <MX_RTC_Init+0x44>)
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004cd4:	4b06      	ldr	r3, [pc, #24]	; (8004cf0 <MX_RTC_Init+0x44>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004cda:	4805      	ldr	r0, [pc, #20]	; (8004cf0 <MX_RTC_Init+0x44>)
 8004cdc:	f006 fc4e 	bl	800b57c <HAL_RTC_Init>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8004ce6:	f7ff ffd9 	bl	8004c9c <Error_Handler>
  }

}
 8004cea:	bf00      	nop
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	200010a0 	.word	0x200010a0
 8004cf4:	40002800 	.word	0x40002800

08004cf8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a05      	ldr	r2, [pc, #20]	; (8004d1c <HAL_RTC_MspInit+0x24>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d102      	bne.n	8004d10 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004d0a:	4b05      	ldr	r3, [pc, #20]	; (8004d20 <HAL_RTC_MspInit+0x28>)
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	40002800 	.word	0x40002800
 8004d20:	42470e3c 	.word	0x42470e3c

08004d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	607b      	str	r3, [r7, #4]
 8004d2e:	4b10      	ldr	r3, [pc, #64]	; (8004d70 <HAL_MspInit+0x4c>)
 8004d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d32:	4a0f      	ldr	r2, [pc, #60]	; (8004d70 <HAL_MspInit+0x4c>)
 8004d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d38:	6453      	str	r3, [r2, #68]	; 0x44
 8004d3a:	4b0d      	ldr	r3, [pc, #52]	; (8004d70 <HAL_MspInit+0x4c>)
 8004d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d42:	607b      	str	r3, [r7, #4]
 8004d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d46:	2300      	movs	r3, #0
 8004d48:	603b      	str	r3, [r7, #0]
 8004d4a:	4b09      	ldr	r3, [pc, #36]	; (8004d70 <HAL_MspInit+0x4c>)
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	4a08      	ldr	r2, [pc, #32]	; (8004d70 <HAL_MspInit+0x4c>)
 8004d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d54:	6413      	str	r3, [r2, #64]	; 0x40
 8004d56:	4b06      	ldr	r3, [pc, #24]	; (8004d70 <HAL_MspInit+0x4c>)
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5e:	603b      	str	r3, [r7, #0]
 8004d60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40023800 	.word	0x40023800

08004d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004d78:	bf00      	nop
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d82:	b480      	push	{r7}
 8004d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d86:	e7fe      	b.n	8004d86 <HardFault_Handler+0x4>

08004d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d8c:	e7fe      	b.n	8004d8c <MemManage_Handler+0x4>

08004d8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d92:	e7fe      	b.n	8004d92 <BusFault_Handler+0x4>

08004d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d98:	e7fe      	b.n	8004d98 <UsageFault_Handler+0x4>

08004d9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d9e:	bf00      	nop
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004dac:	bf00      	nop
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004db6:	b480      	push	{r7}
 8004db8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004dba:	bf00      	nop
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004dc8:	f001 f994 	bl	80060f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004dcc:	bf00      	nop
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004dd4:	4802      	ldr	r0, [pc, #8]	; (8004de0 <DMA1_Stream0_IRQHandler+0x10>)
 8004dd6:	f001 fbb1 	bl	800653c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004dda:	bf00      	nop
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	20000f40 	.word	0x20000f40

08004de4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8004de8:	4802      	ldr	r0, [pc, #8]	; (8004df4 <DMA1_Stream3_IRQHandler+0x10>)
 8004dea:	f001 fba7 	bl	800653c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004dee:	bf00      	nop
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	20000e80 	.word	0x20000e80

08004df8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004dfc:	4802      	ldr	r0, [pc, #8]	; (8004e08 <DMA1_Stream6_IRQHandler+0x10>)
 8004dfe:	f001 fb9d 	bl	800653c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004e02:	bf00      	nop
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	20000d78 	.word	0x20000d78

08004e0c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8004e10:	4802      	ldr	r0, [pc, #8]	; (8004e1c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8004e12:	f006 fdef 	bl	800b9f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004e16:	bf00      	nop
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	20002c48 	.word	0x20002c48

08004e20 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004e24:	4802      	ldr	r0, [pc, #8]	; (8004e30 <I2C1_EV_IRQHandler+0x10>)
 8004e26:	f002 fdc7 	bl	80079b8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004e2a:	bf00      	nop
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000dd8 	.word	0x20000dd8

08004e34 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8004e38:	4802      	ldr	r0, [pc, #8]	; (8004e44 <I2C2_EV_IRQHandler+0x10>)
 8004e3a:	f002 fdbd 	bl	80079b8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8004e3e:	bf00      	nop
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	20000e2c 	.word	0x20000e2c

08004e48 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8004e4c:	4802      	ldr	r0, [pc, #8]	; (8004e58 <I2C2_ER_IRQHandler+0x10>)
 8004e4e:	f002 ff19 	bl	8007c84 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8004e52:	bf00      	nop
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	20000e2c 	.word	0x20000e2c

08004e5c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8004e60:	4802      	ldr	r0, [pc, #8]	; (8004e6c <DMA1_Stream7_IRQHandler+0x10>)
 8004e62:	f001 fb6b 	bl	800653c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004e66:	bf00      	nop
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	20000ee0 	.word	0x20000ee0

08004e70 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004e74:	4802      	ldr	r0, [pc, #8]	; (8004e80 <TIM5_IRQHandler+0x10>)
 8004e76:	f006 fdbd 	bl	800b9f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004e7a:	bf00      	nop
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	20002bc8 	.word	0x20002bc8

08004e84 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004e88:	4802      	ldr	r0, [pc, #8]	; (8004e94 <OTG_FS_IRQHandler+0x10>)
 8004e8a:	f004 fe16 	bl	8009aba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004e8e:	bf00      	nop
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	2000415c 	.word	0x2000415c

08004e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ea0:	4a14      	ldr	r2, [pc, #80]	; (8004ef4 <_sbrk+0x5c>)
 8004ea2:	4b15      	ldr	r3, [pc, #84]	; (8004ef8 <_sbrk+0x60>)
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004eac:	4b13      	ldr	r3, [pc, #76]	; (8004efc <_sbrk+0x64>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d102      	bne.n	8004eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004eb4:	4b11      	ldr	r3, [pc, #68]	; (8004efc <_sbrk+0x64>)
 8004eb6:	4a12      	ldr	r2, [pc, #72]	; (8004f00 <_sbrk+0x68>)
 8004eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004eba:	4b10      	ldr	r3, [pc, #64]	; (8004efc <_sbrk+0x64>)
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d207      	bcs.n	8004ed8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ec8:	f00b f9f4 	bl	80102b4 <__errno>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	230c      	movs	r3, #12
 8004ed0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ed6:	e009      	b.n	8004eec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ed8:	4b08      	ldr	r3, [pc, #32]	; (8004efc <_sbrk+0x64>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ede:	4b07      	ldr	r3, [pc, #28]	; (8004efc <_sbrk+0x64>)
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	4a05      	ldr	r2, [pc, #20]	; (8004efc <_sbrk+0x64>)
 8004ee8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004eea:	68fb      	ldr	r3, [r7, #12]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3718      	adds	r7, #24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	20020000 	.word	0x20020000
 8004ef8:	00000400 	.word	0x00000400
 8004efc:	200002e4 	.word	0x200002e4
 8004f00:	20004568 	.word	0x20004568

08004f04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f04:	b480      	push	{r7}
 8004f06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f08:	4b08      	ldr	r3, [pc, #32]	; (8004f2c <SystemInit+0x28>)
 8004f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0e:	4a07      	ldr	r2, [pc, #28]	; (8004f2c <SystemInit+0x28>)
 8004f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004f18:	4b04      	ldr	r3, [pc, #16]	; (8004f2c <SystemInit+0x28>)
 8004f1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f1e:	609a      	str	r2, [r3, #8]
#endif
}
 8004f20:	bf00      	nop
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	e000ed00 	.word	0xe000ed00

08004f30 <telem_loop>:
uint32_t acks_per_second;

uint32_t time_to_telem_timer, time_to_telem;

void telem_loop()
{
 8004f30:	b5b0      	push	{r4, r5, r7, lr}
 8004f32:	b08a      	sub	sp, #40	; 0x28
 8004f34:	af02      	add	r7, sp, #8
	if(GetMillisDifference(&acks_per_second_timer) >= 1000)
 8004f36:	48ab      	ldr	r0, [pc, #684]	; (80051e4 <telem_loop+0x2b4>)
 8004f38:	f7ff fe22 	bl	8004b80 <GetMillisDifference>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f42:	d30b      	bcc.n	8004f5c <telem_loop+0x2c>
	{
		acks_per_second_timer = GetMillis();
 8004f44:	f7ff fe0a 	bl	8004b5c <GetMillis>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	4ba6      	ldr	r3, [pc, #664]	; (80051e4 <telem_loop+0x2b4>)
 8004f4c:	601a      	str	r2, [r3, #0]
		acks_per_second = acks_counted;
 8004f4e:	4ba6      	ldr	r3, [pc, #664]	; (80051e8 <telem_loop+0x2b8>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4aa6      	ldr	r2, [pc, #664]	; (80051ec <telem_loop+0x2bc>)
 8004f54:	6013      	str	r3, [r2, #0]
		acks_counted = 0;
 8004f56:	4ba4      	ldr	r3, [pc, #656]	; (80051e8 <telem_loop+0x2b8>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	601a      	str	r2, [r3, #0]
	}

	if(HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_READY)
 8004f5c:	48a4      	ldr	r0, [pc, #656]	; (80051f0 <telem_loop+0x2c0>)
 8004f5e:	f002 ff6e 	bl	8007e3e <HAL_I2C_GetState>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b20      	cmp	r3, #32
 8004f66:	f040 836f 	bne.w	8005648 <telem_loop+0x718>
	{
		if(rx_done)
 8004f6a:	4ba2      	ldr	r3, [pc, #648]	; (80051f4 <telem_loop+0x2c4>)
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 81dd 	beq.w	8005330 <telem_loop+0x400>
		{
			rx_done = 0;
 8004f76:	4b9f      	ldr	r3, [pc, #636]	; (80051f4 <telem_loop+0x2c4>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	701a      	strb	r2, [r3, #0]
			ack_rate_counter = 0;
 8004f7c:	4b9e      	ldr	r3, [pc, #632]	; (80051f8 <telem_loop+0x2c8>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	701a      	strb	r2, [r3, #0]

			switch(telem_receive_buffer[0])
 8004f82:	4b9e      	ldr	r3, [pc, #632]	; (80051fc <telem_loop+0x2cc>)
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2bf4      	cmp	r3, #244	; 0xf4
 8004f8a:	d076      	beq.n	800507a <telem_loop+0x14a>
 8004f8c:	2bf4      	cmp	r3, #244	; 0xf4
 8004f8e:	dc0c      	bgt.n	8004faa <telem_loop+0x7a>
 8004f90:	2be1      	cmp	r3, #225	; 0xe1
 8004f92:	f000 81c2 	beq.w	800531a <telem_loop+0x3ea>
 8004f96:	2be1      	cmp	r3, #225	; 0xe1
 8004f98:	dc01      	bgt.n	8004f9e <telem_loop+0x6e>
 8004f9a:	2b00      	cmp	r3, #0
			{
			case 0x00:
				break;
 8004f9c:	e1c8      	b.n	8005330 <telem_loop+0x400>
			switch(telem_receive_buffer[0])
 8004f9e:	2be2      	cmp	r3, #226	; 0xe2
 8004fa0:	f000 81aa 	beq.w	80052f8 <telem_loop+0x3c8>
 8004fa4:	2bf3      	cmp	r3, #243	; 0xf3
 8004fa6:	d025      	beq.n	8004ff4 <telem_loop+0xc4>
 8004fa8:	e1c2      	b.n	8005330 <telem_loop+0x400>
 8004faa:	2bf6      	cmp	r3, #246	; 0xf6
 8004fac:	f000 8148 	beq.w	8005240 <telem_loop+0x310>
 8004fb0:	2bf6      	cmp	r3, #246	; 0xf6
 8004fb2:	f2c0 8099 	blt.w	80050e8 <telem_loop+0x1b8>
 8004fb6:	2bf7      	cmp	r3, #247	; 0xf7
 8004fb8:	d003      	beq.n	8004fc2 <telem_loop+0x92>
 8004fba:	2bfa      	cmp	r3, #250	; 0xfa
 8004fbc:	f000 8199 	beq.w	80052f2 <telem_loop+0x3c2>
 8004fc0:	e1b6      	b.n	8005330 <telem_loop+0x400>
			case CALIBRATE_GYRO_REQUEST:
				if(!launched)
 8004fc2:	4b8f      	ldr	r3, [pc, #572]	; (8005200 <telem_loop+0x2d0>)
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f040 81a9 	bne.w	800531e <telem_loop+0x3ee>
				{
					Calibrate_BMP280();
 8004fcc:	f7fc fc10 	bl	80017f0 <Calibrate_BMP280>
					Calibrate_IMU();
 8004fd0:	f7fe ffb8 	bl	8003f44 <Calibrate_IMU>
					ClearPrintBuffer();
 8004fd4:	f000 fb82 	bl	80056dc <ClearPrintBuffer>
					sprintf((char *)print_text_buffer, "%s", "Gyro Calibrated.\n");
 8004fd8:	4a8a      	ldr	r2, [pc, #552]	; (8005204 <telem_loop+0x2d4>)
 8004fda:	4b8b      	ldr	r3, [pc, #556]	; (8005208 <telem_loop+0x2d8>)
 8004fdc:	4615      	mov	r5, r2
 8004fde:	461c      	mov	r4, r3
 8004fe0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fe2:	6028      	str	r0, [r5, #0]
 8004fe4:	6069      	str	r1, [r5, #4]
 8004fe6:	60aa      	str	r2, [r5, #8]
 8004fe8:	60eb      	str	r3, [r5, #12]
 8004fea:	8823      	ldrh	r3, [r4, #0]
 8004fec:	822b      	strh	r3, [r5, #16]
					PrintManualPacket();
 8004fee:	f000 fb8f 	bl	8005710 <PrintManualPacket>
				}
				break;
 8004ff2:	e194      	b.n	800531e <telem_loop+0x3ee>
			case PID_GAIN_FIRST_REQUEST:
				ClearManualBuffer();
 8004ff4:	f000 fb40 	bl	8005678 <ClearManualBuffer>
				manual_packet_buffer[manual_packet_count].width = 1;
 8004ff8:	4b84      	ldr	r3, [pc, #528]	; (800520c <telem_loop+0x2dc>)
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	4984      	ldr	r1, [pc, #528]	; (8005210 <telem_loop+0x2e0>)
 8005000:	4613      	mov	r3, r2
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	4413      	add	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	440b      	add	r3, r1
 800500c:	3323      	adds	r3, #35	; 0x23
 800500e:	2201      	movs	r2, #1
 8005010:	701a      	strb	r2, [r3, #0]
				manual_packet_buffer[manual_packet_count].reliable = 1;
 8005012:	4b7e      	ldr	r3, [pc, #504]	; (800520c <telem_loop+0x2dc>)
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	461a      	mov	r2, r3
 8005018:	497d      	ldr	r1, [pc, #500]	; (8005210 <telem_loop+0x2e0>)
 800501a:	4613      	mov	r3, r2
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	4413      	add	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	440b      	add	r3, r1
 8005026:	3324      	adds	r3, #36	; 0x24
 8005028:	2201      	movs	r2, #1
 800502a:	701a      	strb	r2, [r3, #0]
				AddIDToManualBuffer(PID_GAIN_FIRST_PACKET);
 800502c:	2003      	movs	r0, #3
 800502e:	f000 fc33 	bl	8005898 <AddIDToManualBuffer>
				AddToManualBuffer((uint8_t *)&kp_roll, 4);
 8005032:	2104      	movs	r1, #4
 8005034:	4877      	ldr	r0, [pc, #476]	; (8005214 <telem_loop+0x2e4>)
 8005036:	f000 fc4b 	bl	80058d0 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&ki_roll, 4);
 800503a:	2104      	movs	r1, #4
 800503c:	4876      	ldr	r0, [pc, #472]	; (8005218 <telem_loop+0x2e8>)
 800503e:	f000 fc47 	bl	80058d0 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&kd_roll, 4);
 8005042:	2104      	movs	r1, #4
 8005044:	4875      	ldr	r0, [pc, #468]	; (800521c <telem_loop+0x2ec>)
 8005046:	f000 fc43 	bl	80058d0 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&kp_yaw, 4);
 800504a:	2104      	movs	r1, #4
 800504c:	4874      	ldr	r0, [pc, #464]	; (8005220 <telem_loop+0x2f0>)
 800504e:	f000 fc3f 	bl	80058d0 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&ki_yaw, 4);
 8005052:	2104      	movs	r1, #4
 8005054:	4873      	ldr	r0, [pc, #460]	; (8005224 <telem_loop+0x2f4>)
 8005056:	f000 fc3b 	bl	80058d0 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&kd_yaw, 4);
 800505a:	2104      	movs	r1, #4
 800505c:	4872      	ldr	r0, [pc, #456]	; (8005228 <telem_loop+0x2f8>)
 800505e:	f000 fc37 	bl	80058d0 <AddToManualBuffer>

				if(manual_packet_count < 31)
 8005062:	4b6a      	ldr	r3, [pc, #424]	; (800520c <telem_loop+0x2dc>)
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	2b1e      	cmp	r3, #30
 8005068:	f200 815b 	bhi.w	8005322 <telem_loop+0x3f2>
					manual_packet_count++;
 800506c:	4b67      	ldr	r3, [pc, #412]	; (800520c <telem_loop+0x2dc>)
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	3301      	adds	r3, #1
 8005072:	b2da      	uxtb	r2, r3
 8005074:	4b65      	ldr	r3, [pc, #404]	; (800520c <telem_loop+0x2dc>)
 8005076:	701a      	strb	r2, [r3, #0]
				break;
 8005078:	e153      	b.n	8005322 <telem_loop+0x3f2>
			case PID_GAIN_SECOND_REQUEST:
				ClearManualBuffer();
 800507a:	f000 fafd 	bl	8005678 <ClearManualBuffer>
				manual_packet_buffer[manual_packet_count].width = 1;
 800507e:	4b63      	ldr	r3, [pc, #396]	; (800520c <telem_loop+0x2dc>)
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	461a      	mov	r2, r3
 8005084:	4962      	ldr	r1, [pc, #392]	; (8005210 <telem_loop+0x2e0>)
 8005086:	4613      	mov	r3, r2
 8005088:	00db      	lsls	r3, r3, #3
 800508a:	4413      	add	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4413      	add	r3, r2
 8005090:	440b      	add	r3, r1
 8005092:	3323      	adds	r3, #35	; 0x23
 8005094:	2201      	movs	r2, #1
 8005096:	701a      	strb	r2, [r3, #0]
				manual_packet_buffer[manual_packet_count].reliable = 1;
 8005098:	4b5c      	ldr	r3, [pc, #368]	; (800520c <telem_loop+0x2dc>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	461a      	mov	r2, r3
 800509e:	495c      	ldr	r1, [pc, #368]	; (8005210 <telem_loop+0x2e0>)
 80050a0:	4613      	mov	r3, r2
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	4413      	add	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	440b      	add	r3, r1
 80050ac:	3324      	adds	r3, #36	; 0x24
 80050ae:	2201      	movs	r2, #1
 80050b0:	701a      	strb	r2, [r3, #0]
				AddIDToManualBuffer(PID_GAIN_SECOND_PACKET);
 80050b2:	2004      	movs	r0, #4
 80050b4:	f000 fbf0 	bl	8005898 <AddIDToManualBuffer>
				AddToManualBuffer((uint8_t *)&kp_alt, 4);
 80050b8:	2104      	movs	r1, #4
 80050ba:	485c      	ldr	r0, [pc, #368]	; (800522c <telem_loop+0x2fc>)
 80050bc:	f000 fc08 	bl	80058d0 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&ki_alt, 4);
 80050c0:	2104      	movs	r1, #4
 80050c2:	485b      	ldr	r0, [pc, #364]	; (8005230 <telem_loop+0x300>)
 80050c4:	f000 fc04 	bl	80058d0 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&kd_alt, 4);
 80050c8:	2104      	movs	r1, #4
 80050ca:	485a      	ldr	r0, [pc, #360]	; (8005234 <telem_loop+0x304>)
 80050cc:	f000 fc00 	bl	80058d0 <AddToManualBuffer>

				if(manual_packet_count < 31)
 80050d0:	4b4e      	ldr	r3, [pc, #312]	; (800520c <telem_loop+0x2dc>)
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	2b1e      	cmp	r3, #30
 80050d6:	f200 8126 	bhi.w	8005326 <telem_loop+0x3f6>
					manual_packet_count++;
 80050da:	4b4c      	ldr	r3, [pc, #304]	; (800520c <telem_loop+0x2dc>)
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	3301      	adds	r3, #1
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	4b4a      	ldr	r3, [pc, #296]	; (800520c <telem_loop+0x2dc>)
 80050e4:	701a      	strb	r2, [r3, #0]
				break;
 80050e6:	e11e      	b.n	8005326 <telem_loop+0x3f6>
			case PID_GAIN_FIRST_UPDATE_REQUEST:
				telem_receive_read_index = 1;
 80050e8:	4b53      	ldr	r3, [pc, #332]	; (8005238 <telem_loop+0x308>)
 80050ea:	2201      	movs	r2, #1
 80050ec:	701a      	strb	r2, [r3, #0]
				ReadReceiveBuffer((uint8_t *)&kp_roll, 4);
 80050ee:	2104      	movs	r1, #4
 80050f0:	4848      	ldr	r0, [pc, #288]	; (8005214 <telem_loop+0x2e4>)
 80050f2:	f000 fc43 	bl	800597c <ReadReceiveBuffer>
				ReadReceiveBuffer((uint8_t *)&ki_roll, 4);
 80050f6:	2104      	movs	r1, #4
 80050f8:	4847      	ldr	r0, [pc, #284]	; (8005218 <telem_loop+0x2e8>)
 80050fa:	f000 fc3f 	bl	800597c <ReadReceiveBuffer>
				ReadReceiveBuffer((uint8_t *)&kd_roll, 4);
 80050fe:	2104      	movs	r1, #4
 8005100:	4846      	ldr	r0, [pc, #280]	; (800521c <telem_loop+0x2ec>)
 8005102:	f000 fc3b 	bl	800597c <ReadReceiveBuffer>
				ReadReceiveBuffer((uint8_t *)&kp_yaw, 4);
 8005106:	2104      	movs	r1, #4
 8005108:	4845      	ldr	r0, [pc, #276]	; (8005220 <telem_loop+0x2f0>)
 800510a:	f000 fc37 	bl	800597c <ReadReceiveBuffer>
				ReadReceiveBuffer((uint8_t *)&ki_yaw, 4);
 800510e:	2104      	movs	r1, #4
 8005110:	4844      	ldr	r0, [pc, #272]	; (8005224 <telem_loop+0x2f4>)
 8005112:	f000 fc33 	bl	800597c <ReadReceiveBuffer>
				ReadReceiveBuffer((uint8_t *)&kd_yaw, 4);
 8005116:	2104      	movs	r1, #4
 8005118:	4843      	ldr	r0, [pc, #268]	; (8005228 <telem_loop+0x2f8>)
 800511a:	f000 fc2f 	bl	800597c <ReadReceiveBuffer>

				EEPROM_Clear_Buffer();
 800511e:	f7fe fbd7 	bl	80038d0 <EEPROM_Clear_Buffer>
				eeprom_write_buffer_width = 2;
 8005122:	4b46      	ldr	r3, [pc, #280]	; (800523c <telem_loop+0x30c>)
 8005124:	2202      	movs	r2, #2
 8005126:	701a      	strb	r2, [r3, #0]
				EEPROM_Write_Buffer((uint8_t *)&kp_roll, 4);
 8005128:	2104      	movs	r1, #4
 800512a:	483a      	ldr	r0, [pc, #232]	; (8005214 <telem_loop+0x2e4>)
 800512c:	f7fe fc30 	bl	8003990 <EEPROM_Write_Buffer>
				EEPROM_Write_Buffer((uint8_t *)&ki_roll, 4);
 8005130:	2104      	movs	r1, #4
 8005132:	4839      	ldr	r0, [pc, #228]	; (8005218 <telem_loop+0x2e8>)
 8005134:	f7fe fc2c 	bl	8003990 <EEPROM_Write_Buffer>
				EEPROM_Write_Buffer((uint8_t *)&kd_roll, 4);
 8005138:	2104      	movs	r1, #4
 800513a:	4838      	ldr	r0, [pc, #224]	; (800521c <telem_loop+0x2ec>)
 800513c:	f7fe fc28 	bl	8003990 <EEPROM_Write_Buffer>
				EEPROM_Write_Buffer((uint8_t *)&kp_yaw, 4);
 8005140:	2104      	movs	r1, #4
 8005142:	4837      	ldr	r0, [pc, #220]	; (8005220 <telem_loop+0x2f0>)
 8005144:	f7fe fc24 	bl	8003990 <EEPROM_Write_Buffer>
				EEPROM_Write_Buffer((uint8_t *)&ki_yaw, 4);
 8005148:	2104      	movs	r1, #4
 800514a:	4836      	ldr	r0, [pc, #216]	; (8005224 <telem_loop+0x2f4>)
 800514c:	f7fe fc20 	bl	8003990 <EEPROM_Write_Buffer>
				EEPROM_Write_Buffer((uint8_t *)&kd_yaw, 4);
 8005150:	2104      	movs	r1, #4
 8005152:	4835      	ldr	r0, [pc, #212]	; (8005228 <telem_loop+0x2f8>)
 8005154:	f7fe fc1c 	bl	8003990 <EEPROM_Write_Buffer>
				EEPROM_Save_Page(0);
 8005158:	2000      	movs	r0, #0
 800515a:	f7fe fbd3 	bl	8003904 <EEPROM_Save_Page>

				ClearManualBuffer();
 800515e:	f000 fa8b 	bl	8005678 <ClearManualBuffer>
				manual_packet_buffer[manual_packet_count].width = 1;
 8005162:	4b2a      	ldr	r3, [pc, #168]	; (800520c <telem_loop+0x2dc>)
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	461a      	mov	r2, r3
 8005168:	4929      	ldr	r1, [pc, #164]	; (8005210 <telem_loop+0x2e0>)
 800516a:	4613      	mov	r3, r2
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	4413      	add	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	440b      	add	r3, r1
 8005176:	3323      	adds	r3, #35	; 0x23
 8005178:	2201      	movs	r2, #1
 800517a:	701a      	strb	r2, [r3, #0]
				manual_packet_buffer[manual_packet_count].reliable = 1;
 800517c:	4b23      	ldr	r3, [pc, #140]	; (800520c <telem_loop+0x2dc>)
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	461a      	mov	r2, r3
 8005182:	4923      	ldr	r1, [pc, #140]	; (8005210 <telem_loop+0x2e0>)
 8005184:	4613      	mov	r3, r2
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	4413      	add	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	440b      	add	r3, r1
 8005190:	3324      	adds	r3, #36	; 0x24
 8005192:	2201      	movs	r2, #1
 8005194:	701a      	strb	r2, [r3, #0]
				AddIDToManualBuffer(PID_GAIN_FIRST_PACKET);
 8005196:	2003      	movs	r0, #3
 8005198:	f000 fb7e 	bl	8005898 <AddIDToManualBuffer>
				AddToManualBuffer((uint8_t *)&kp_roll, 4);
 800519c:	2104      	movs	r1, #4
 800519e:	481d      	ldr	r0, [pc, #116]	; (8005214 <telem_loop+0x2e4>)
 80051a0:	f000 fb96 	bl	80058d0 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&ki_roll, 4);
 80051a4:	2104      	movs	r1, #4
 80051a6:	481c      	ldr	r0, [pc, #112]	; (8005218 <telem_loop+0x2e8>)
 80051a8:	f000 fb92 	bl	80058d0 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&kd_roll, 4);
 80051ac:	2104      	movs	r1, #4
 80051ae:	481b      	ldr	r0, [pc, #108]	; (800521c <telem_loop+0x2ec>)
 80051b0:	f000 fb8e 	bl	80058d0 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&kp_yaw, 4);
 80051b4:	2104      	movs	r1, #4
 80051b6:	481a      	ldr	r0, [pc, #104]	; (8005220 <telem_loop+0x2f0>)
 80051b8:	f000 fb8a 	bl	80058d0 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&ki_yaw, 4);
 80051bc:	2104      	movs	r1, #4
 80051be:	4819      	ldr	r0, [pc, #100]	; (8005224 <telem_loop+0x2f4>)
 80051c0:	f000 fb86 	bl	80058d0 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&kd_yaw, 4);
 80051c4:	2104      	movs	r1, #4
 80051c6:	4818      	ldr	r0, [pc, #96]	; (8005228 <telem_loop+0x2f8>)
 80051c8:	f000 fb82 	bl	80058d0 <AddToManualBuffer>

				if(manual_packet_count < 31)
 80051cc:	4b0f      	ldr	r3, [pc, #60]	; (800520c <telem_loop+0x2dc>)
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	2b1e      	cmp	r3, #30
 80051d2:	f200 80aa 	bhi.w	800532a <telem_loop+0x3fa>
					manual_packet_count++;
 80051d6:	4b0d      	ldr	r3, [pc, #52]	; (800520c <telem_loop+0x2dc>)
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	3301      	adds	r3, #1
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	4b0b      	ldr	r3, [pc, #44]	; (800520c <telem_loop+0x2dc>)
 80051e0:	701a      	strb	r2, [r3, #0]
				break;
 80051e2:	e0a2      	b.n	800532a <telem_loop+0x3fa>
 80051e4:	20002b84 	.word	0x20002b84
 80051e8:	200010e0 	.word	0x200010e0
 80051ec:	20002b30 	.word	0x20002b30
 80051f0:	20000e2c 	.word	0x20000e2c
 80051f4:	200002ef 	.word	0x200002ef
 80051f8:	200002ec 	.word	0x200002ec
 80051fc:	20002b60 	.word	0x20002b60
 8005200:	200002bc 	.word	0x200002bc
 8005204:	200010c0 	.word	0x200010c0
 8005208:	0801352c 	.word	0x0801352c
 800520c:	200002e8 	.word	0x200002e8
 8005210:	200010e4 	.word	0x200010e4
 8005214:	20000274 	.word	0x20000274
 8005218:	2000027c 	.word	0x2000027c
 800521c:	20000284 	.word	0x20000284
 8005220:	20000278 	.word	0x20000278
 8005224:	20000280 	.word	0x20000280
 8005228:	20000288 	.word	0x20000288
 800522c:	200002a0 	.word	0x200002a0
 8005230:	200002a4 	.word	0x200002a4
 8005234:	200002a8 	.word	0x200002a8
 8005238:	200002eb 	.word	0x200002eb
 800523c:	20000028 	.word	0x20000028
			case PID_GAIN_SECOND_UPDATE_REQUEST:
				telem_receive_read_index = 1;
 8005240:	4b9c      	ldr	r3, [pc, #624]	; (80054b4 <telem_loop+0x584>)
 8005242:	2201      	movs	r2, #1
 8005244:	701a      	strb	r2, [r3, #0]
				ReadReceiveBuffer((uint8_t *)&kp_alt, 4);
 8005246:	2104      	movs	r1, #4
 8005248:	489b      	ldr	r0, [pc, #620]	; (80054b8 <telem_loop+0x588>)
 800524a:	f000 fb97 	bl	800597c <ReadReceiveBuffer>
				ReadReceiveBuffer((uint8_t *)&ki_alt, 4);
 800524e:	2104      	movs	r1, #4
 8005250:	489a      	ldr	r0, [pc, #616]	; (80054bc <telem_loop+0x58c>)
 8005252:	f000 fb93 	bl	800597c <ReadReceiveBuffer>
				ReadReceiveBuffer((uint8_t *)&kd_alt, 4);
 8005256:	2104      	movs	r1, #4
 8005258:	4899      	ldr	r0, [pc, #612]	; (80054c0 <telem_loop+0x590>)
 800525a:	f000 fb8f 	bl	800597c <ReadReceiveBuffer>

				EEPROM_Clear_Buffer();
 800525e:	f7fe fb37 	bl	80038d0 <EEPROM_Clear_Buffer>
				eeprom_write_buffer_width = 2;
 8005262:	4b98      	ldr	r3, [pc, #608]	; (80054c4 <telem_loop+0x594>)
 8005264:	2202      	movs	r2, #2
 8005266:	701a      	strb	r2, [r3, #0]
				EEPROM_Write_Buffer((uint8_t *)&kp_alt, 4);
 8005268:	2104      	movs	r1, #4
 800526a:	4893      	ldr	r0, [pc, #588]	; (80054b8 <telem_loop+0x588>)
 800526c:	f7fe fb90 	bl	8003990 <EEPROM_Write_Buffer>
				EEPROM_Write_Buffer((uint8_t *)&ki_alt, 4);
 8005270:	2104      	movs	r1, #4
 8005272:	4892      	ldr	r0, [pc, #584]	; (80054bc <telem_loop+0x58c>)
 8005274:	f7fe fb8c 	bl	8003990 <EEPROM_Write_Buffer>
				EEPROM_Write_Buffer((uint8_t *)&kd_alt, 4);
 8005278:	2104      	movs	r1, #4
 800527a:	4891      	ldr	r0, [pc, #580]	; (80054c0 <telem_loop+0x590>)
 800527c:	f7fe fb88 	bl	8003990 <EEPROM_Write_Buffer>
				EEPROM_Save_Page(32);
 8005280:	2020      	movs	r0, #32
 8005282:	f7fe fb3f 	bl	8003904 <EEPROM_Save_Page>

				ClearManualBuffer();
 8005286:	f000 f9f7 	bl	8005678 <ClearManualBuffer>
				manual_packet_buffer[manual_packet_count].width = 1;
 800528a:	4b8f      	ldr	r3, [pc, #572]	; (80054c8 <telem_loop+0x598>)
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	461a      	mov	r2, r3
 8005290:	498e      	ldr	r1, [pc, #568]	; (80054cc <telem_loop+0x59c>)
 8005292:	4613      	mov	r3, r2
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	4413      	add	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4413      	add	r3, r2
 800529c:	440b      	add	r3, r1
 800529e:	3323      	adds	r3, #35	; 0x23
 80052a0:	2201      	movs	r2, #1
 80052a2:	701a      	strb	r2, [r3, #0]
				manual_packet_buffer[manual_packet_count].reliable = 1;
 80052a4:	4b88      	ldr	r3, [pc, #544]	; (80054c8 <telem_loop+0x598>)
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	461a      	mov	r2, r3
 80052aa:	4988      	ldr	r1, [pc, #544]	; (80054cc <telem_loop+0x59c>)
 80052ac:	4613      	mov	r3, r2
 80052ae:	00db      	lsls	r3, r3, #3
 80052b0:	4413      	add	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	440b      	add	r3, r1
 80052b8:	3324      	adds	r3, #36	; 0x24
 80052ba:	2201      	movs	r2, #1
 80052bc:	701a      	strb	r2, [r3, #0]
				AddIDToManualBuffer(PID_GAIN_SECOND_PACKET);
 80052be:	2004      	movs	r0, #4
 80052c0:	f000 faea 	bl	8005898 <AddIDToManualBuffer>
				AddToManualBuffer((uint8_t *)&kp_alt, 4);
 80052c4:	2104      	movs	r1, #4
 80052c6:	487c      	ldr	r0, [pc, #496]	; (80054b8 <telem_loop+0x588>)
 80052c8:	f000 fb02 	bl	80058d0 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&ki_alt, 4);
 80052cc:	2104      	movs	r1, #4
 80052ce:	487b      	ldr	r0, [pc, #492]	; (80054bc <telem_loop+0x58c>)
 80052d0:	f000 fafe 	bl	80058d0 <AddToManualBuffer>
				AddToManualBuffer((uint8_t *)&kd_alt, 4);
 80052d4:	2104      	movs	r1, #4
 80052d6:	487a      	ldr	r0, [pc, #488]	; (80054c0 <telem_loop+0x590>)
 80052d8:	f000 fafa 	bl	80058d0 <AddToManualBuffer>

				if(manual_packet_count < 31)
 80052dc:	4b7a      	ldr	r3, [pc, #488]	; (80054c8 <telem_loop+0x598>)
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	2b1e      	cmp	r3, #30
 80052e2:	d824      	bhi.n	800532e <telem_loop+0x3fe>
					manual_packet_count++;
 80052e4:	4b78      	ldr	r3, [pc, #480]	; (80054c8 <telem_loop+0x598>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	3301      	adds	r3, #1
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	4b76      	ldr	r3, [pc, #472]	; (80054c8 <telem_loop+0x598>)
 80052ee:	701a      	strb	r2, [r3, #0]
				break;
 80052f0:	e01d      	b.n	800532e <telem_loop+0x3fe>
			case CALIBRATE_COMPASS_REQUEST:
				Calibrate_Compass();
 80052f2:	f7fc fdaf 	bl	8001e54 <Calibrate_Compass>
				break;
 80052f6:	e01b      	b.n	8005330 <telem_loop+0x400>
			case DO_CMD_PACKET:
				telem_receive_read_index = 1;
 80052f8:	4b6e      	ldr	r3, [pc, #440]	; (80054b4 <telem_loop+0x584>)
 80052fa:	2201      	movs	r2, #1
 80052fc:	701a      	strb	r2, [r3, #0]
				ReadReceiveBuffer(&high_priority_program_width, 1);
 80052fe:	2101      	movs	r1, #1
 8005300:	4873      	ldr	r0, [pc, #460]	; (80054d0 <telem_loop+0x5a0>)
 8005302:	f000 fb3b 	bl	800597c <ReadReceiveBuffer>
				ReadReceiveBuffer((uint8_t *)&high_priority_program_buffer, high_priority_program_width);
 8005306:	4b72      	ldr	r3, [pc, #456]	; (80054d0 <telem_loop+0x5a0>)
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	4619      	mov	r1, r3
 800530c:	4871      	ldr	r0, [pc, #452]	; (80054d4 <telem_loop+0x5a4>)
 800530e:	f000 fb35 	bl	800597c <ReadReceiveBuffer>
				high_priority_program_counter = 0;
 8005312:	4b71      	ldr	r3, [pc, #452]	; (80054d8 <telem_loop+0x5a8>)
 8005314:	2200      	movs	r2, #0
 8005316:	701a      	strb	r2, [r3, #0]
				break;
 8005318:	e00a      	b.n	8005330 <telem_loop+0x400>
			case UPLOAD_CMD_PACKET:
				break;
 800531a:	bf00      	nop
 800531c:	e008      	b.n	8005330 <telem_loop+0x400>
				break;
 800531e:	bf00      	nop
 8005320:	e006      	b.n	8005330 <telem_loop+0x400>
				break;
 8005322:	bf00      	nop
 8005324:	e004      	b.n	8005330 <telem_loop+0x400>
				break;
 8005326:	bf00      	nop
 8005328:	e002      	b.n	8005330 <telem_loop+0x400>
				break;
 800532a:	bf00      	nop
 800532c:	e000      	b.n	8005330 <telem_loop+0x400>
				break;
 800532e:	bf00      	nop
			}
		}

		if(tx_done)
 8005330:	4b6a      	ldr	r3, [pc, #424]	; (80054dc <telem_loop+0x5ac>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d03d      	beq.n	80053b6 <telem_loop+0x486>
		{
			tx_done = 0;
 800533a:	4b68      	ldr	r3, [pc, #416]	; (80054dc <telem_loop+0x5ac>)
 800533c:	2200      	movs	r2, #0
 800533e:	701a      	strb	r2, [r3, #0]

			if(last_tx_type == 2 && manual_packet_count > 0)
 8005340:	4b67      	ldr	r3, [pc, #412]	; (80054e0 <telem_loop+0x5b0>)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	2b02      	cmp	r3, #2
 8005346:	d136      	bne.n	80053b6 <telem_loop+0x486>
 8005348:	4b5f      	ldr	r3, [pc, #380]	; (80054c8 <telem_loop+0x598>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d032      	beq.n	80053b6 <telem_loop+0x486>
			{
				for(int i = 0; i < manual_packet_count - 1; i++)
 8005350:	2300      	movs	r3, #0
 8005352:	61fb      	str	r3, [r7, #28]
 8005354:	e023      	b.n	800539e <telem_loop+0x46e>
				{
					for(int j = 0; j < 35; j++)
 8005356:	2300      	movs	r3, #0
 8005358:	61bb      	str	r3, [r7, #24]
 800535a:	e01a      	b.n	8005392 <telem_loop+0x462>
					{
						manual_packet_buffer[i].payload[j] = manual_packet_buffer[i + 1].payload[j];
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	1c5a      	adds	r2, r3, #1
 8005360:	495a      	ldr	r1, [pc, #360]	; (80054cc <telem_loop+0x59c>)
 8005362:	4613      	mov	r3, r2
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	4413      	add	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	18ca      	adds	r2, r1, r3
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	4413      	add	r3, r2
 8005372:	7818      	ldrb	r0, [r3, #0]
 8005374:	4955      	ldr	r1, [pc, #340]	; (80054cc <telem_loop+0x59c>)
 8005376:	69fa      	ldr	r2, [r7, #28]
 8005378:	4613      	mov	r3, r2
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	4413      	add	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	18ca      	adds	r2, r1, r3
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	4413      	add	r3, r2
 8005388:	4602      	mov	r2, r0
 800538a:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 35; j++)
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	3301      	adds	r3, #1
 8005390:	61bb      	str	r3, [r7, #24]
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	2b22      	cmp	r3, #34	; 0x22
 8005396:	dde1      	ble.n	800535c <telem_loop+0x42c>
				for(int i = 0; i < manual_packet_count - 1; i++)
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	3301      	adds	r3, #1
 800539c:	61fb      	str	r3, [r7, #28]
 800539e:	4b4a      	ldr	r3, [pc, #296]	; (80054c8 <telem_loop+0x598>)
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	3b01      	subs	r3, #1
 80053a4:	69fa      	ldr	r2, [r7, #28]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	dbd5      	blt.n	8005356 <telem_loop+0x426>
					}
				}

				manual_packet_count--;
 80053aa:	4b47      	ldr	r3, [pc, #284]	; (80054c8 <telem_loop+0x598>)
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	3b01      	subs	r3, #1
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	4b45      	ldr	r3, [pc, #276]	; (80054c8 <telem_loop+0x598>)
 80053b4:	701a      	strb	r2, [r3, #0]
			}
		}

		if(waiting_to_rx)
 80053b6:	4b4b      	ldr	r3, [pc, #300]	; (80054e4 <telem_loop+0x5b4>)
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d017      	beq.n	80053f0 <telem_loop+0x4c0>
		{
			if(HAL_I2C_Master_Seq_Receive_IT(&hi2c2, (uint8_t)(0x04 << 1), (uint8_t *)telem_receive_buffer, 34, I2C_LAST_FRAME) != HAL_OK)
 80053c0:	2320      	movs	r3, #32
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	2322      	movs	r3, #34	; 0x22
 80053c6:	4a48      	ldr	r2, [pc, #288]	; (80054e8 <telem_loop+0x5b8>)
 80053c8:	2108      	movs	r1, #8
 80053ca:	4848      	ldr	r0, [pc, #288]	; (80054ec <telem_loop+0x5bc>)
 80053cc:	f002 f9fe 	bl	80077cc <HAL_I2C_Master_Seq_Receive_IT>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d009      	beq.n	80053ea <telem_loop+0x4ba>
			{
				transmit_fail_flag = 1;
 80053d6:	4b46      	ldr	r3, [pc, #280]	; (80054f0 <telem_loop+0x5c0>)
 80053d8:	2201      	movs	r2, #1
 80053da:	701a      	strb	r2, [r3, #0]
				ack_rate_counter = 0;
 80053dc:	4b45      	ldr	r3, [pc, #276]	; (80054f4 <telem_loop+0x5c4>)
 80053de:	2200      	movs	r2, #0
 80053e0:	701a      	strb	r2, [r3, #0]
				waiting_to_rx = 0;
 80053e2:	4b40      	ldr	r3, [pc, #256]	; (80054e4 <telem_loop+0x5b4>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	701a      	strb	r2, [r3, #0]
 80053e8:	e002      	b.n	80053f0 <telem_loop+0x4c0>
			}
			else
			{
				waiting_to_rx = 0;
 80053ea:	4b3e      	ldr	r3, [pc, #248]	; (80054e4 <telem_loop+0x5b4>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	701a      	strb	r2, [r3, #0]
				//ack_rate_counter = 0;
			}
		}

		if(!waiting_to_rx && GetMicrosDifference(&telem_min_transmit_timer) >= 2500)
 80053f0:	4b3c      	ldr	r3, [pc, #240]	; (80054e4 <telem_loop+0x5b4>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f040 8126 	bne.w	8005648 <telem_loop+0x718>
 80053fc:	483e      	ldr	r0, [pc, #248]	; (80054f8 <telem_loop+0x5c8>)
 80053fe:	f7ff fbcd 	bl	8004b9c <GetMicrosDifference>
 8005402:	4602      	mov	r2, r0
 8005404:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8005408:	429a      	cmp	r2, r3
 800540a:	f240 811d 	bls.w	8005648 <telem_loop+0x718>
		{
			for(int i = 0; i < 35; i++)
 800540e:	2300      	movs	r3, #0
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	e007      	b.n	8005424 <telem_loop+0x4f4>
			{
				telem_send_buffer[i] = '\0';
 8005414:	4a39      	ldr	r2, [pc, #228]	; (80054fc <telem_loop+0x5cc>)
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	4413      	add	r3, r2
 800541a:	2200      	movs	r2, #0
 800541c:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 35; i++)
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	3301      	adds	r3, #1
 8005422:	617b      	str	r3, [r7, #20]
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	2b22      	cmp	r3, #34	; 0x22
 8005428:	ddf4      	ble.n	8005414 <telem_loop+0x4e4>
			}

			if(manual_packet_count > 0)
 800542a:	4b27      	ldr	r3, [pc, #156]	; (80054c8 <telem_loop+0x598>)
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d029      	beq.n	8005486 <telem_loop+0x556>
			{
				last_tx_type = 2;
 8005432:	4b2b      	ldr	r3, [pc, #172]	; (80054e0 <telem_loop+0x5b0>)
 8005434:	2202      	movs	r2, #2
 8005436:	701a      	strb	r2, [r3, #0]

				for(int i = 0; i < manual_packet_buffer[0].width; i++)
 8005438:	2300      	movs	r3, #0
 800543a:	613b      	str	r3, [r7, #16]
 800543c:	e00b      	b.n	8005456 <telem_loop+0x526>
				{
					telem_send_buffer[i] = manual_packet_buffer[0].payload[i];
 800543e:	4a23      	ldr	r2, [pc, #140]	; (80054cc <telem_loop+0x59c>)
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	4413      	add	r3, r2
 8005444:	7819      	ldrb	r1, [r3, #0]
 8005446:	4a2d      	ldr	r2, [pc, #180]	; (80054fc <telem_loop+0x5cc>)
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	4413      	add	r3, r2
 800544c:	460a      	mov	r2, r1
 800544e:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < manual_packet_buffer[0].width; i++)
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	3301      	adds	r3, #1
 8005454:	613b      	str	r3, [r7, #16]
 8005456:	4b1d      	ldr	r3, [pc, #116]	; (80054cc <telem_loop+0x59c>)
 8005458:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800545c:	461a      	mov	r2, r3
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	4293      	cmp	r3, r2
 8005462:	dbec      	blt.n	800543e <telem_loop+0x50e>
				}

				telem_send_buffer[32] = manual_packet_buffer[0].width;
 8005464:	4b19      	ldr	r3, [pc, #100]	; (80054cc <telem_loop+0x59c>)
 8005466:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800546a:	4b24      	ldr	r3, [pc, #144]	; (80054fc <telem_loop+0x5cc>)
 800546c:	f883 2020 	strb.w	r2, [r3, #32]
				telem_send_buffer[33] = manual_packet_buffer[0].reliable;//Unreliable
 8005470:	4b16      	ldr	r3, [pc, #88]	; (80054cc <telem_loop+0x59c>)
 8005472:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8005476:	4b21      	ldr	r3, [pc, #132]	; (80054fc <telem_loop+0x5cc>)
 8005478:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				telem_send_buffer[34] = 0;//No data
 800547c:	4b1f      	ldr	r3, [pc, #124]	; (80054fc <telem_loop+0x5cc>)
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8005484:	e099      	b.n	80055ba <telem_loop+0x68a>
			}
			else
			{
				last_tx_type = 1;
 8005486:	4b16      	ldr	r3, [pc, #88]	; (80054e0 <telem_loop+0x5b0>)
 8005488:	2201      	movs	r2, #1
 800548a:	701a      	strb	r2, [r3, #0]

				telem_send_buffer[0] = auto_packet_buffer[auto_packet_counter].id;
 800548c:	4b1c      	ldr	r3, [pc, #112]	; (8005500 <telem_loop+0x5d0>)
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	4619      	mov	r1, r3
 8005492:	4a1c      	ldr	r2, [pc, #112]	; (8005504 <telem_loop+0x5d4>)
 8005494:	23ac      	movs	r3, #172	; 0xac
 8005496:	fb03 f301 	mul.w	r3, r3, r1
 800549a:	4413      	add	r3, r2
 800549c:	781a      	ldrb	r2, [r3, #0]
 800549e:	4b17      	ldr	r3, [pc, #92]	; (80054fc <telem_loop+0x5cc>)
 80054a0:	701a      	strb	r2, [r3, #0]
				uint8_t var_index = 1;
 80054a2:	2301      	movs	r3, #1
 80054a4:	73fb      	strb	r3, [r7, #15]

				for(int i = 0; i < auto_packet_buffer[auto_packet_counter].var_count; i++)
 80054a6:	2300      	movs	r3, #0
 80054a8:	60bb      	str	r3, [r7, #8]
 80054aa:	e058      	b.n	800555e <telem_loop+0x62e>
				{
					for(int j = 0; j < auto_packet_buffer[auto_packet_counter].width[i]; j++)
 80054ac:	2300      	movs	r3, #0
 80054ae:	607b      	str	r3, [r7, #4]
 80054b0:	e042      	b.n	8005538 <telem_loop+0x608>
 80054b2:	bf00      	nop
 80054b4:	200002eb 	.word	0x200002eb
 80054b8:	200002a0 	.word	0x200002a0
 80054bc:	200002a4 	.word	0x200002a4
 80054c0:	200002a8 	.word	0x200002a8
 80054c4:	20000028 	.word	0x20000028
 80054c8:	200002e8 	.word	0x200002e8
 80054cc:	200010e4 	.word	0x200010e4
 80054d0:	200002b3 	.word	0x200002b3
 80054d4:	20000a20 	.word	0x20000a20
 80054d8:	200002b2 	.word	0x200002b2
 80054dc:	200002f0 	.word	0x200002f0
 80054e0:	200002f1 	.word	0x200002f1
 80054e4:	200002ee 	.word	0x200002ee
 80054e8:	20002b60 	.word	0x20002b60
 80054ec:	20000e2c 	.word	0x20000e2c
 80054f0:	200002ed 	.word	0x200002ed
 80054f4:	200002ec 	.word	0x200002ec
 80054f8:	20001584 	.word	0x20001584
 80054fc:	20001588 	.word	0x20001588
 8005500:	200002ea 	.word	0x200002ea
 8005504:	200015b0 	.word	0x200015b0
					{
						telem_send_buffer[var_index] = *((uint8_t *)(auto_packet_buffer[auto_packet_counter].payload[i]) + j);
 8005508:	4b51      	ldr	r3, [pc, #324]	; (8005650 <telem_loop+0x720>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	461a      	mov	r2, r3
 800550e:	4951      	ldr	r1, [pc, #324]	; (8005654 <telem_loop+0x724>)
 8005510:	232b      	movs	r3, #43	; 0x2b
 8005512:	fb03 f202 	mul.w	r2, r3, r2
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	4413      	add	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	440b      	add	r3, r1
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	441a      	add	r2, r3
 8005524:	7bfb      	ldrb	r3, [r7, #15]
 8005526:	7811      	ldrb	r1, [r2, #0]
 8005528:	4a4b      	ldr	r2, [pc, #300]	; (8005658 <telem_loop+0x728>)
 800552a:	54d1      	strb	r1, [r2, r3]

						var_index++;
 800552c:	7bfb      	ldrb	r3, [r7, #15]
 800552e:	3301      	adds	r3, #1
 8005530:	73fb      	strb	r3, [r7, #15]
					for(int j = 0; j < auto_packet_buffer[auto_packet_counter].width[i]; j++)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	3301      	adds	r3, #1
 8005536:	607b      	str	r3, [r7, #4]
 8005538:	4b45      	ldr	r3, [pc, #276]	; (8005650 <telem_loop+0x720>)
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	4619      	mov	r1, r3
 800553e:	4a45      	ldr	r2, [pc, #276]	; (8005654 <telem_loop+0x724>)
 8005540:	23ac      	movs	r3, #172	; 0xac
 8005542:	fb03 f301 	mul.w	r3, r3, r1
 8005546:	441a      	add	r2, r3
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4413      	add	r3, r2
 800554c:	3384      	adds	r3, #132	; 0x84
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	461a      	mov	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4293      	cmp	r3, r2
 8005556:	dbd7      	blt.n	8005508 <telem_loop+0x5d8>
				for(int i = 0; i < auto_packet_buffer[auto_packet_counter].var_count; i++)
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	3301      	adds	r3, #1
 800555c:	60bb      	str	r3, [r7, #8]
 800555e:	4b3c      	ldr	r3, [pc, #240]	; (8005650 <telem_loop+0x720>)
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	4619      	mov	r1, r3
 8005564:	4a3b      	ldr	r2, [pc, #236]	; (8005654 <telem_loop+0x724>)
 8005566:	23ac      	movs	r3, #172	; 0xac
 8005568:	fb03 f301 	mul.w	r3, r3, r1
 800556c:	4413      	add	r3, r2
 800556e:	33a5      	adds	r3, #165	; 0xa5
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	461a      	mov	r2, r3
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	4293      	cmp	r3, r2
 8005578:	db98      	blt.n	80054ac <telem_loop+0x57c>
					}
				}

				telem_send_buffer[32] = var_index;
 800557a:	4a37      	ldr	r2, [pc, #220]	; (8005658 <telem_loop+0x728>)
 800557c:	7bfb      	ldrb	r3, [r7, #15]
 800557e:	f882 3020 	strb.w	r3, [r2, #32]
				telem_send_buffer[33] = auto_packet_buffer[auto_packet_counter].reliable;
 8005582:	4b33      	ldr	r3, [pc, #204]	; (8005650 <telem_loop+0x720>)
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	4619      	mov	r1, r3
 8005588:	4a32      	ldr	r2, [pc, #200]	; (8005654 <telem_loop+0x724>)
 800558a:	23ac      	movs	r3, #172	; 0xac
 800558c:	fb03 f301 	mul.w	r3, r3, r1
 8005590:	4413      	add	r3, r2
 8005592:	33a4      	adds	r3, #164	; 0xa4
 8005594:	781a      	ldrb	r2, [r3, #0]
 8005596:	4b30      	ldr	r3, [pc, #192]	; (8005658 <telem_loop+0x728>)
 8005598:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

				auto_packet_counter++;
 800559c:	4b2c      	ldr	r3, [pc, #176]	; (8005650 <telem_loop+0x720>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	3301      	adds	r3, #1
 80055a2:	b2da      	uxtb	r2, r3
 80055a4:	4b2a      	ldr	r3, [pc, #168]	; (8005650 <telem_loop+0x720>)
 80055a6:	701a      	strb	r2, [r3, #0]

				if(auto_packet_counter >= auto_packet_count)
 80055a8:	4b29      	ldr	r3, [pc, #164]	; (8005650 <telem_loop+0x720>)
 80055aa:	781a      	ldrb	r2, [r3, #0]
 80055ac:	4b2b      	ldr	r3, [pc, #172]	; (800565c <telem_loop+0x72c>)
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d302      	bcc.n	80055ba <telem_loop+0x68a>
					auto_packet_counter = 0;
 80055b4:	4b26      	ldr	r3, [pc, #152]	; (8005650 <telem_loop+0x720>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	701a      	strb	r2, [r3, #0]

			//sprintf((char*)telem_send_buffer, "%lu%s%ld%lu%s", how_long_to_loop/*ppm_channels[2]*/, ":", ((int32_t)gyro_x), (uint32_t)abs((gyro_x - ((int32_t)gyro_x)) * 10), "\r\n");//uint32_t
			//sprintf((char*)telem_send_buffer, "%c%c%lu%s%ld%lu%s", 0x09 , strlen((char*)telem_send_buffer), how_long_to_loop/*ppm_channels[2]*/, ":", ((int32_t)gyro_x), (uint32_t)abs((gyro_x - ((int32_t)gyro_x)) * 10), "\r\n");//uint32_t


			if(ack_rate_counter < 0xFF)
 80055ba:	4b29      	ldr	r3, [pc, #164]	; (8005660 <telem_loop+0x730>)
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2bff      	cmp	r3, #255	; 0xff
 80055c2:	d006      	beq.n	80055d2 <telem_loop+0x6a2>
				ack_rate_counter++;
 80055c4:	4b26      	ldr	r3, [pc, #152]	; (8005660 <telem_loop+0x730>)
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	3301      	adds	r3, #1
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	4b24      	ldr	r3, [pc, #144]	; (8005660 <telem_loop+0x730>)
 80055d0:	701a      	strb	r2, [r3, #0]

			telem_send_buffer[33] = 0;//Unreliable
 80055d2:	4b21      	ldr	r3, [pc, #132]	; (8005658 <telem_loop+0x728>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			telem_send_buffer[34] = 0;//No data
 80055da:	4b1f      	ldr	r3, [pc, #124]	; (8005658 <telem_loop+0x728>)
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			//ack_rate_counter = 0;

			if(ack_rate_counter == ack_rate)
 80055e2:	4b1f      	ldr	r3, [pc, #124]	; (8005660 <telem_loop+0x730>)
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	b2da      	uxtb	r2, r3
 80055e8:	4b1e      	ldr	r3, [pc, #120]	; (8005664 <telem_loop+0x734>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d115      	bne.n	800561c <telem_loop+0x6ec>
			{
				//telem_send_buffer[34] = 1;

				if(HAL_I2C_Master_Seq_Transmit_IT(&hi2c2, (uint8_t)(0x04 << 1), (uint8_t *)telem_send_buffer, 35, I2C_FIRST_FRAME) != HAL_OK)
 80055f0:	2301      	movs	r3, #1
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	2323      	movs	r3, #35	; 0x23
 80055f6:	4a18      	ldr	r2, [pc, #96]	; (8005658 <telem_loop+0x728>)
 80055f8:	2108      	movs	r1, #8
 80055fa:	481b      	ldr	r0, [pc, #108]	; (8005668 <telem_loop+0x738>)
 80055fc:	f002 f828 	bl	8007650 <HAL_I2C_Master_Seq_Transmit_IT>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d006      	beq.n	8005614 <telem_loop+0x6e4>
				{
					transmit_fail_flag = 1;
 8005606:	4b19      	ldr	r3, [pc, #100]	; (800566c <telem_loop+0x73c>)
 8005608:	2201      	movs	r2, #1
 800560a:	701a      	strb	r2, [r3, #0]
					ack_rate_counter = 0;
 800560c:	4b14      	ldr	r3, [pc, #80]	; (8005660 <telem_loop+0x730>)
 800560e:	2200      	movs	r2, #0
 8005610:	701a      	strb	r2, [r3, #0]
 8005612:	e014      	b.n	800563e <telem_loop+0x70e>
				}
				else
				{
					waiting_to_rx = 1;
 8005614:	4b16      	ldr	r3, [pc, #88]	; (8005670 <telem_loop+0x740>)
 8005616:	2201      	movs	r2, #1
 8005618:	701a      	strb	r2, [r3, #0]
 800561a:	e010      	b.n	800563e <telem_loop+0x70e>
			}
			else
			{
				//telem_send_buffer[34] = 0;

				if(HAL_I2C_Master_Seq_Transmit_IT(&hi2c2, (uint8_t)(0x04 << 1), (uint8_t *)telem_send_buffer, 35, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 800561c:	2308      	movs	r3, #8
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	2323      	movs	r3, #35	; 0x23
 8005622:	4a0d      	ldr	r2, [pc, #52]	; (8005658 <telem_loop+0x728>)
 8005624:	2108      	movs	r1, #8
 8005626:	4810      	ldr	r0, [pc, #64]	; (8005668 <telem_loop+0x738>)
 8005628:	f002 f812 	bl	8007650 <HAL_I2C_Master_Seq_Transmit_IT>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d005      	beq.n	800563e <telem_loop+0x70e>
				{
					transmit_fail_flag = 1;
 8005632:	4b0e      	ldr	r3, [pc, #56]	; (800566c <telem_loop+0x73c>)
 8005634:	2201      	movs	r2, #1
 8005636:	701a      	strb	r2, [r3, #0]
					ack_rate_counter = 0;
 8005638:	4b09      	ldr	r3, [pc, #36]	; (8005660 <telem_loop+0x730>)
 800563a:	2200      	movs	r2, #0
 800563c:	701a      	strb	r2, [r3, #0]
				}
			}

			telem_min_transmit_timer = GetMicros();
 800563e:	f7ff fa81 	bl	8004b44 <GetMicros>
 8005642:	4602      	mov	r2, r0
 8005644:	4b0b      	ldr	r3, [pc, #44]	; (8005674 <telem_loop+0x744>)
 8005646:	601a      	str	r2, [r3, #0]

			//HAL_I2C_Master_Transmit_DMA(&hi2c2, (uint8_t)(0x04 << 1), (uint8_t *)telem_send_buffer, 35);
		}
	}
}
 8005648:	bf00      	nop
 800564a:	3720      	adds	r7, #32
 800564c:	46bd      	mov	sp, r7
 800564e:	bdb0      	pop	{r4, r5, r7, pc}
 8005650:	200002ea 	.word	0x200002ea
 8005654:	200015b0 	.word	0x200015b0
 8005658:	20001588 	.word	0x20001588
 800565c:	200002e9 	.word	0x200002e9
 8005660:	200002ec 	.word	0x200002ec
 8005664:	20000044 	.word	0x20000044
 8005668:	20000e2c 	.word	0x20000e2c
 800566c:	200002ed 	.word	0x200002ed
 8005670:	200002ee 	.word	0x200002ee
 8005674:	20001584 	.word	0x20001584

08005678 <ClearManualBuffer>:

void ClearManualBuffer()
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
	manual_packet_buffer[manual_packet_count].reliable = 0;
 800567e:	4b15      	ldr	r3, [pc, #84]	; (80056d4 <ClearManualBuffer+0x5c>)
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	461a      	mov	r2, r3
 8005684:	4914      	ldr	r1, [pc, #80]	; (80056d8 <ClearManualBuffer+0x60>)
 8005686:	4613      	mov	r3, r2
 8005688:	00db      	lsls	r3, r3, #3
 800568a:	4413      	add	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	440b      	add	r3, r1
 8005692:	3324      	adds	r3, #36	; 0x24
 8005694:	2200      	movs	r2, #0
 8005696:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 35; i++)
 8005698:	2300      	movs	r3, #0
 800569a:	607b      	str	r3, [r7, #4]
 800569c:	e010      	b.n	80056c0 <ClearManualBuffer+0x48>
	{
		manual_packet_buffer[manual_packet_count].payload[i] = '\0';
 800569e:	4b0d      	ldr	r3, [pc, #52]	; (80056d4 <ClearManualBuffer+0x5c>)
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	461a      	mov	r2, r3
 80056a4:	490c      	ldr	r1, [pc, #48]	; (80056d8 <ClearManualBuffer+0x60>)
 80056a6:	4613      	mov	r3, r2
 80056a8:	00db      	lsls	r3, r3, #3
 80056aa:	4413      	add	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	18ca      	adds	r2, r1, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4413      	add	r3, r2
 80056b6:	2200      	movs	r2, #0
 80056b8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 35; i++)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	3301      	adds	r3, #1
 80056be:	607b      	str	r3, [r7, #4]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b22      	cmp	r3, #34	; 0x22
 80056c4:	ddeb      	ble.n	800569e <ClearManualBuffer+0x26>
	}
}
 80056c6:	bf00      	nop
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	200002e8 	.word	0x200002e8
 80056d8:	200010e4 	.word	0x200010e4

080056dc <ClearPrintBuffer>:

void ClearPrintBuffer()
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
	for(int i = 0; i < 32; i++)
 80056e2:	2300      	movs	r3, #0
 80056e4:	607b      	str	r3, [r7, #4]
 80056e6:	e007      	b.n	80056f8 <ClearPrintBuffer+0x1c>
	{
		print_text_buffer[i] = '\0';
 80056e8:	4a08      	ldr	r2, [pc, #32]	; (800570c <ClearPrintBuffer+0x30>)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4413      	add	r3, r2
 80056ee:	2200      	movs	r2, #0
 80056f0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 32; i++)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	3301      	adds	r3, #1
 80056f6:	607b      	str	r3, [r7, #4]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b1f      	cmp	r3, #31
 80056fc:	ddf4      	ble.n	80056e8 <ClearPrintBuffer+0xc>
	}
}
 80056fe:	bf00      	nop
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	200010c0 	.word	0x200010c0

08005710 <PrintManualPacket>:

//Used to write text to console
void PrintManualPacket()
{
 8005710:	b590      	push	{r4, r7, lr}
 8005712:	b083      	sub	sp, #12
 8005714:	af02      	add	r7, sp, #8
	ClearManualBuffer();
 8005716:	f7ff ffaf 	bl	8005678 <ClearManualBuffer>

	sprintf((char*)(manual_packet_buffer[manual_packet_count].payload), "%s", print_text_buffer);//uint32_t
 800571a:	4b2c      	ldr	r3, [pc, #176]	; (80057cc <PrintManualPacket+0xbc>)
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	4613      	mov	r3, r2
 8005722:	00db      	lsls	r3, r3, #3
 8005724:	4413      	add	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	4a29      	ldr	r2, [pc, #164]	; (80057d0 <PrintManualPacket+0xc0>)
 800572c:	4413      	add	r3, r2
 800572e:	4929      	ldr	r1, [pc, #164]	; (80057d4 <PrintManualPacket+0xc4>)
 8005730:	4618      	mov	r0, r3
 8005732:	f00a fed9 	bl	80104e8 <strcpy>
	sprintf((char*)(manual_packet_buffer[manual_packet_count].payload), "%c%c%s", 0x09 , strlen((char*)(manual_packet_buffer[manual_packet_count].payload)), print_text_buffer);
 8005736:	4b25      	ldr	r3, [pc, #148]	; (80057cc <PrintManualPacket+0xbc>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	461a      	mov	r2, r3
 800573c:	4613      	mov	r3, r2
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	4413      	add	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	4a22      	ldr	r2, [pc, #136]	; (80057d0 <PrintManualPacket+0xc0>)
 8005748:	189c      	adds	r4, r3, r2
 800574a:	4b20      	ldr	r3, [pc, #128]	; (80057cc <PrintManualPacket+0xbc>)
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	461a      	mov	r2, r3
 8005750:	4613      	mov	r3, r2
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	4413      	add	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4413      	add	r3, r2
 800575a:	4a1d      	ldr	r2, [pc, #116]	; (80057d0 <PrintManualPacket+0xc0>)
 800575c:	4413      	add	r3, r2
 800575e:	4618      	mov	r0, r3
 8005760:	f7fa fd36 	bl	80001d0 <strlen>
 8005764:	4602      	mov	r2, r0
 8005766:	4b1b      	ldr	r3, [pc, #108]	; (80057d4 <PrintManualPacket+0xc4>)
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	4613      	mov	r3, r2
 800576c:	2209      	movs	r2, #9
 800576e:	491a      	ldr	r1, [pc, #104]	; (80057d8 <PrintManualPacket+0xc8>)
 8005770:	4620      	mov	r0, r4
 8005772:	f00a fe99 	bl	80104a8 <siprintf>

	manual_packet_buffer[manual_packet_count].width = strlen((char *)(manual_packet_buffer[manual_packet_count].payload));
 8005776:	4b15      	ldr	r3, [pc, #84]	; (80057cc <PrintManualPacket+0xbc>)
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	461a      	mov	r2, r3
 800577c:	4613      	mov	r3, r2
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	4413      	add	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4413      	add	r3, r2
 8005786:	4a12      	ldr	r2, [pc, #72]	; (80057d0 <PrintManualPacket+0xc0>)
 8005788:	4413      	add	r3, r2
 800578a:	4618      	mov	r0, r3
 800578c:	f7fa fd20 	bl	80001d0 <strlen>
 8005790:	4601      	mov	r1, r0
 8005792:	4b0e      	ldr	r3, [pc, #56]	; (80057cc <PrintManualPacket+0xbc>)
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	461a      	mov	r2, r3
 8005798:	b2c8      	uxtb	r0, r1
 800579a:	490d      	ldr	r1, [pc, #52]	; (80057d0 <PrintManualPacket+0xc0>)
 800579c:	4613      	mov	r3, r2
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	4413      	add	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4413      	add	r3, r2
 80057a6:	440b      	add	r3, r1
 80057a8:	3323      	adds	r3, #35	; 0x23
 80057aa:	4602      	mov	r2, r0
 80057ac:	701a      	strb	r2, [r3, #0]

	if(manual_packet_count < 31)
 80057ae:	4b07      	ldr	r3, [pc, #28]	; (80057cc <PrintManualPacket+0xbc>)
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	2b1e      	cmp	r3, #30
 80057b4:	d805      	bhi.n	80057c2 <PrintManualPacket+0xb2>
		manual_packet_count++;
 80057b6:	4b05      	ldr	r3, [pc, #20]	; (80057cc <PrintManualPacket+0xbc>)
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	3301      	adds	r3, #1
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	4b03      	ldr	r3, [pc, #12]	; (80057cc <PrintManualPacket+0xbc>)
 80057c0:	701a      	strb	r2, [r3, #0]
}
 80057c2:	bf00      	nop
 80057c4:	3704      	adds	r7, #4
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd90      	pop	{r4, r7, pc}
 80057ca:	bf00      	nop
 80057cc:	200002e8 	.word	0x200002e8
 80057d0:	200010e4 	.word	0x200010e4
 80057d4:	200010c0 	.word	0x200010c0
 80057d8:	08013540 	.word	0x08013540

080057dc <AddToAutoBuffer>:

void AddToAutoBuffer(uint8_t buf_index, uint8_t *num, uint8_t size)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	4603      	mov	r3, r0
 80057e4:	6039      	str	r1, [r7, #0]
 80057e6:	71fb      	strb	r3, [r7, #7]
 80057e8:	4613      	mov	r3, r2
 80057ea:	71bb      	strb	r3, [r7, #6]
	auto_packet_buffer[buf_index].payload[auto_packet_buffer[buf_index].var_count] = (uint8_t *)num;
 80057ec:	79fb      	ldrb	r3, [r7, #7]
 80057ee:	79fa      	ldrb	r2, [r7, #7]
 80057f0:	4928      	ldr	r1, [pc, #160]	; (8005894 <AddToAutoBuffer+0xb8>)
 80057f2:	20ac      	movs	r0, #172	; 0xac
 80057f4:	fb00 f202 	mul.w	r2, r0, r2
 80057f8:	440a      	add	r2, r1
 80057fa:	32a5      	adds	r2, #165	; 0xa5
 80057fc:	7812      	ldrb	r2, [r2, #0]
 80057fe:	4610      	mov	r0, r2
 8005800:	4a24      	ldr	r2, [pc, #144]	; (8005894 <AddToAutoBuffer+0xb8>)
 8005802:	212b      	movs	r1, #43	; 0x2b
 8005804:	fb01 f303 	mul.w	r3, r1, r3
 8005808:	4403      	add	r3, r0
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	605a      	str	r2, [r3, #4]
	auto_packet_buffer[buf_index].width[auto_packet_buffer[buf_index].var_count] = size;
 8005812:	79fb      	ldrb	r3, [r7, #7]
 8005814:	79fa      	ldrb	r2, [r7, #7]
 8005816:	491f      	ldr	r1, [pc, #124]	; (8005894 <AddToAutoBuffer+0xb8>)
 8005818:	20ac      	movs	r0, #172	; 0xac
 800581a:	fb00 f202 	mul.w	r2, r0, r2
 800581e:	440a      	add	r2, r1
 8005820:	32a5      	adds	r2, #165	; 0xa5
 8005822:	7812      	ldrb	r2, [r2, #0]
 8005824:	4610      	mov	r0, r2
 8005826:	4a1b      	ldr	r2, [pc, #108]	; (8005894 <AddToAutoBuffer+0xb8>)
 8005828:	21ac      	movs	r1, #172	; 0xac
 800582a:	fb01 f303 	mul.w	r3, r1, r3
 800582e:	4413      	add	r3, r2
 8005830:	4403      	add	r3, r0
 8005832:	3384      	adds	r3, #132	; 0x84
 8005834:	79ba      	ldrb	r2, [r7, #6]
 8005836:	701a      	strb	r2, [r3, #0]
	auto_packet_buffer[buf_index].total_width += size;
 8005838:	79fb      	ldrb	r3, [r7, #7]
 800583a:	4a16      	ldr	r2, [pc, #88]	; (8005894 <AddToAutoBuffer+0xb8>)
 800583c:	21ac      	movs	r1, #172	; 0xac
 800583e:	fb01 f303 	mul.w	r3, r1, r3
 8005842:	4413      	add	r3, r2
 8005844:	33a6      	adds	r3, #166	; 0xa6
 8005846:	7819      	ldrb	r1, [r3, #0]
 8005848:	79fb      	ldrb	r3, [r7, #7]
 800584a:	79ba      	ldrb	r2, [r7, #6]
 800584c:	440a      	add	r2, r1
 800584e:	b2d0      	uxtb	r0, r2
 8005850:	4a10      	ldr	r2, [pc, #64]	; (8005894 <AddToAutoBuffer+0xb8>)
 8005852:	21ac      	movs	r1, #172	; 0xac
 8005854:	fb01 f303 	mul.w	r3, r1, r3
 8005858:	4413      	add	r3, r2
 800585a:	33a6      	adds	r3, #166	; 0xa6
 800585c:	4602      	mov	r2, r0
 800585e:	701a      	strb	r2, [r3, #0]
	auto_packet_buffer[buf_index].var_count += 1;
 8005860:	79fb      	ldrb	r3, [r7, #7]
 8005862:	4a0c      	ldr	r2, [pc, #48]	; (8005894 <AddToAutoBuffer+0xb8>)
 8005864:	21ac      	movs	r1, #172	; 0xac
 8005866:	fb01 f303 	mul.w	r3, r1, r3
 800586a:	4413      	add	r3, r2
 800586c:	33a5      	adds	r3, #165	; 0xa5
 800586e:	781a      	ldrb	r2, [r3, #0]
 8005870:	79fb      	ldrb	r3, [r7, #7]
 8005872:	3201      	adds	r2, #1
 8005874:	b2d0      	uxtb	r0, r2
 8005876:	4a07      	ldr	r2, [pc, #28]	; (8005894 <AddToAutoBuffer+0xb8>)
 8005878:	21ac      	movs	r1, #172	; 0xac
 800587a:	fb01 f303 	mul.w	r3, r1, r3
 800587e:	4413      	add	r3, r2
 8005880:	33a5      	adds	r3, #165	; 0xa5
 8005882:	4602      	mov	r2, r0
 8005884:	701a      	strb	r2, [r3, #0]
}
 8005886:	bf00      	nop
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	200015b0 	.word	0x200015b0

08005898 <AddIDToManualBuffer>:

void AddIDToManualBuffer(uint8_t packet_id)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	4603      	mov	r3, r0
 80058a0:	71fb      	strb	r3, [r7, #7]
	manual_packet_buffer[manual_packet_count].payload[0] = packet_id;
 80058a2:	4b09      	ldr	r3, [pc, #36]	; (80058c8 <AddIDToManualBuffer+0x30>)
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	461a      	mov	r2, r3
 80058a8:	4908      	ldr	r1, [pc, #32]	; (80058cc <AddIDToManualBuffer+0x34>)
 80058aa:	4613      	mov	r3, r2
 80058ac:	00db      	lsls	r3, r3, #3
 80058ae:	4413      	add	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	440b      	add	r3, r1
 80058b6:	79fa      	ldrb	r2, [r7, #7]
 80058b8:	701a      	strb	r2, [r3, #0]
}
 80058ba:	bf00      	nop
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	200002e8 	.word	0x200002e8
 80058cc:	200010e4 	.word	0x200010e4

080058d0 <AddToManualBuffer>:

void AddToManualBuffer(uint8_t *num, uint8_t size)
{
 80058d0:	b490      	push	{r4, r7}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	460b      	mov	r3, r1
 80058da:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < size; i++)
 80058dc:	2300      	movs	r3, #0
 80058de:	60fb      	str	r3, [r7, #12]
 80058e0:	e022      	b.n	8005928 <AddToManualBuffer+0x58>
	{
		manual_packet_buffer[manual_packet_count].payload[manual_packet_buffer[manual_packet_count].width + i] = *(((uint8_t *)num) + i);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	18d0      	adds	r0, r2, r3
 80058e8:	4b22      	ldr	r3, [pc, #136]	; (8005974 <AddToManualBuffer+0xa4>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	461a      	mov	r2, r3
 80058ee:	4b21      	ldr	r3, [pc, #132]	; (8005974 <AddToManualBuffer+0xa4>)
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	4619      	mov	r1, r3
 80058f4:	4c20      	ldr	r4, [pc, #128]	; (8005978 <AddToManualBuffer+0xa8>)
 80058f6:	460b      	mov	r3, r1
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	440b      	add	r3, r1
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	440b      	add	r3, r1
 8005900:	4423      	add	r3, r4
 8005902:	3323      	adds	r3, #35	; 0x23
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	4619      	mov	r1, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4419      	add	r1, r3
 800590c:	7804      	ldrb	r4, [r0, #0]
 800590e:	481a      	ldr	r0, [pc, #104]	; (8005978 <AddToManualBuffer+0xa8>)
 8005910:	4613      	mov	r3, r2
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	4413      	add	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4413      	add	r3, r2
 800591a:	4403      	add	r3, r0
 800591c:	440b      	add	r3, r1
 800591e:	4622      	mov	r2, r4
 8005920:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < size; i++)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	3301      	adds	r3, #1
 8005926:	60fb      	str	r3, [r7, #12]
 8005928:	78fb      	ldrb	r3, [r7, #3]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	429a      	cmp	r2, r3
 800592e:	dbd8      	blt.n	80058e2 <AddToManualBuffer+0x12>
	}

	manual_packet_buffer[manual_packet_count].width += size;
 8005930:	4b10      	ldr	r3, [pc, #64]	; (8005974 <AddToManualBuffer+0xa4>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	461a      	mov	r2, r3
 8005936:	4910      	ldr	r1, [pc, #64]	; (8005978 <AddToManualBuffer+0xa8>)
 8005938:	4613      	mov	r3, r2
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	4413      	add	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	440b      	add	r3, r1
 8005944:	3323      	adds	r3, #35	; 0x23
 8005946:	7819      	ldrb	r1, [r3, #0]
 8005948:	4b0a      	ldr	r3, [pc, #40]	; (8005974 <AddToManualBuffer+0xa4>)
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	461a      	mov	r2, r3
 800594e:	78fb      	ldrb	r3, [r7, #3]
 8005950:	440b      	add	r3, r1
 8005952:	b2d8      	uxtb	r0, r3
 8005954:	4908      	ldr	r1, [pc, #32]	; (8005978 <AddToManualBuffer+0xa8>)
 8005956:	4613      	mov	r3, r2
 8005958:	00db      	lsls	r3, r3, #3
 800595a:	4413      	add	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	440b      	add	r3, r1
 8005962:	3323      	adds	r3, #35	; 0x23
 8005964:	4602      	mov	r2, r0
 8005966:	701a      	strb	r2, [r3, #0]
}
 8005968:	bf00      	nop
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bc90      	pop	{r4, r7}
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	200002e8 	.word	0x200002e8
 8005978:	200010e4 	.word	0x200010e4

0800597c <ReadReceiveBuffer>:

void ReadReceiveBuffer(uint8_t *output, uint8_t size)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	460b      	mov	r3, r1
 8005986:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < size; i++)
 8005988:	2300      	movs	r3, #0
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	e00e      	b.n	80059ac <ReadReceiveBuffer+0x30>
	{
		*(((uint8_t *)output) + i) = telem_receive_buffer[telem_receive_read_index + i];
 800598e:	4b10      	ldr	r3, [pc, #64]	; (80059d0 <ReadReceiveBuffer+0x54>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	461a      	mov	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	441a      	add	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6879      	ldr	r1, [r7, #4]
 800599c:	440b      	add	r3, r1
 800599e:	490d      	ldr	r1, [pc, #52]	; (80059d4 <ReadReceiveBuffer+0x58>)
 80059a0:	5c8a      	ldrb	r2, [r1, r2]
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < size; i++)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	3301      	adds	r3, #1
 80059aa:	60fb      	str	r3, [r7, #12]
 80059ac:	78fb      	ldrb	r3, [r7, #3]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	dbec      	blt.n	800598e <ReadReceiveBuffer+0x12>
	}

	telem_receive_read_index += size;
 80059b4:	4b06      	ldr	r3, [pc, #24]	; (80059d0 <ReadReceiveBuffer+0x54>)
 80059b6:	781a      	ldrb	r2, [r3, #0]
 80059b8:	78fb      	ldrb	r3, [r7, #3]
 80059ba:	4413      	add	r3, r2
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	4b04      	ldr	r3, [pc, #16]	; (80059d0 <ReadReceiveBuffer+0x54>)
 80059c0:	701a      	strb	r2, [r3, #0]
}
 80059c2:	bf00      	nop
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	200002eb 	.word	0x200002eb
 80059d4:	20002b60 	.word	0x20002b60

080059d8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b08a      	sub	sp, #40	; 0x28
 80059dc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059de:	f107 0320 	add.w	r3, r7, #32
 80059e2:	2200      	movs	r2, #0
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80059e8:	1d3b      	adds	r3, r7, #4
 80059ea:	2200      	movs	r2, #0
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	605a      	str	r2, [r3, #4]
 80059f0:	609a      	str	r2, [r3, #8]
 80059f2:	60da      	str	r2, [r3, #12]
 80059f4:	611a      	str	r2, [r3, #16]
 80059f6:	615a      	str	r2, [r3, #20]
 80059f8:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80059fa:	4b33      	ldr	r3, [pc, #204]	; (8005ac8 <MX_TIM3_Init+0xf0>)
 80059fc:	4a33      	ldr	r2, [pc, #204]	; (8005acc <MX_TIM3_Init+0xf4>)
 80059fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8005a00:	4b31      	ldr	r3, [pc, #196]	; (8005ac8 <MX_TIM3_Init+0xf0>)
 8005a02:	2253      	movs	r2, #83	; 0x53
 8005a04:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a06:	4b30      	ldr	r3, [pc, #192]	; (8005ac8 <MX_TIM3_Init+0xf0>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 8005a0c:	4b2e      	ldr	r3, [pc, #184]	; (8005ac8 <MX_TIM3_Init+0xf0>)
 8005a0e:	f241 3287 	movw	r2, #4999	; 0x1387
 8005a12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a14:	4b2c      	ldr	r3, [pc, #176]	; (8005ac8 <MX_TIM3_Init+0xf0>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a1a:	4b2b      	ldr	r3, [pc, #172]	; (8005ac8 <MX_TIM3_Init+0xf0>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005a20:	4829      	ldr	r0, [pc, #164]	; (8005ac8 <MX_TIM3_Init+0xf0>)
 8005a22:	f005 fedf 	bl	800b7e4 <HAL_TIM_PWM_Init>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d001      	beq.n	8005a30 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8005a2c:	f7ff f936 	bl	8004c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a30:	2300      	movs	r3, #0
 8005a32:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a34:	2300      	movs	r3, #0
 8005a36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005a38:	f107 0320 	add.w	r3, r7, #32
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	4822      	ldr	r0, [pc, #136]	; (8005ac8 <MX_TIM3_Init+0xf0>)
 8005a40:	f006 ff8c 	bl	800c95c <HAL_TIMEx_MasterConfigSynchronization>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d001      	beq.n	8005a4e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8005a4a:	f7ff f927 	bl	8004c9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a4e:	2360      	movs	r3, #96	; 0x60
 8005a50:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8005a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005a60:	1d3b      	adds	r3, r7, #4
 8005a62:	2200      	movs	r2, #0
 8005a64:	4619      	mov	r1, r3
 8005a66:	4818      	ldr	r0, [pc, #96]	; (8005ac8 <MX_TIM3_Init+0xf0>)
 8005a68:	f006 f968 	bl	800bd3c <HAL_TIM_PWM_ConfigChannel>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8005a72:	f7ff f913 	bl	8004c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005a76:	1d3b      	adds	r3, r7, #4
 8005a78:	2204      	movs	r2, #4
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	4812      	ldr	r0, [pc, #72]	; (8005ac8 <MX_TIM3_Init+0xf0>)
 8005a7e:	f006 f95d 	bl	800bd3c <HAL_TIM_PWM_ConfigChannel>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d001      	beq.n	8005a8c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8005a88:	f7ff f908 	bl	8004c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005a8c:	1d3b      	adds	r3, r7, #4
 8005a8e:	2208      	movs	r2, #8
 8005a90:	4619      	mov	r1, r3
 8005a92:	480d      	ldr	r0, [pc, #52]	; (8005ac8 <MX_TIM3_Init+0xf0>)
 8005a94:	f006 f952 	bl	800bd3c <HAL_TIM_PWM_ConfigChannel>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8005a9e:	f7ff f8fd 	bl	8004c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005aa2:	1d3b      	adds	r3, r7, #4
 8005aa4:	220c      	movs	r2, #12
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	4807      	ldr	r0, [pc, #28]	; (8005ac8 <MX_TIM3_Init+0xf0>)
 8005aaa:	f006 f947 	bl	800bd3c <HAL_TIM_PWM_ConfigChannel>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d001      	beq.n	8005ab8 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8005ab4:	f7ff f8f2 	bl	8004c9c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8005ab8:	4803      	ldr	r0, [pc, #12]	; (8005ac8 <MX_TIM3_Init+0xf0>)
 8005aba:	f000 fa1d 	bl	8005ef8 <HAL_TIM_MspPostInit>

}
 8005abe:	bf00      	nop
 8005ac0:	3728      	adds	r7, #40	; 0x28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	20002c08 	.word	0x20002c08
 8005acc:	40000400 	.word	0x40000400

08005ad0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b08a      	sub	sp, #40	; 0x28
 8005ad4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005ad6:	f107 0318 	add.w	r3, r7, #24
 8005ada:	2200      	movs	r2, #0
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	605a      	str	r2, [r3, #4]
 8005ae0:	609a      	str	r2, [r3, #8]
 8005ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ae4:	f107 0310 	add.w	r3, r7, #16
 8005ae8:	2200      	movs	r2, #0
 8005aea:	601a      	str	r2, [r3, #0]
 8005aec:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005aee:	463b      	mov	r3, r7
 8005af0:	2200      	movs	r2, #0
 8005af2:	601a      	str	r2, [r3, #0]
 8005af4:	605a      	str	r2, [r3, #4]
 8005af6:	609a      	str	r2, [r3, #8]
 8005af8:	60da      	str	r2, [r3, #12]

  htim5.Instance = TIM5;
 8005afa:	4b2b      	ldr	r3, [pc, #172]	; (8005ba8 <MX_TIM5_Init+0xd8>)
 8005afc:	4a2b      	ldr	r2, [pc, #172]	; (8005bac <MX_TIM5_Init+0xdc>)
 8005afe:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8005b00:	4b29      	ldr	r3, [pc, #164]	; (8005ba8 <MX_TIM5_Init+0xd8>)
 8005b02:	2253      	movs	r2, #83	; 0x53
 8005b04:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b06:	4b28      	ldr	r3, [pc, #160]	; (8005ba8 <MX_TIM5_Init+0xd8>)
 8005b08:	2200      	movs	r2, #0
 8005b0a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8005b0c:	4b26      	ldr	r3, [pc, #152]	; (8005ba8 <MX_TIM5_Init+0xd8>)
 8005b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b12:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b14:	4b24      	ldr	r3, [pc, #144]	; (8005ba8 <MX_TIM5_Init+0xd8>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b1a:	4b23      	ldr	r3, [pc, #140]	; (8005ba8 <MX_TIM5_Init+0xd8>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005b20:	4821      	ldr	r0, [pc, #132]	; (8005ba8 <MX_TIM5_Init+0xd8>)
 8005b22:	f005 fe10 	bl	800b746 <HAL_TIM_Base_Init>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d001      	beq.n	8005b30 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8005b2c:	f7ff f8b6 	bl	8004c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b34:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005b36:	f107 0318 	add.w	r3, r7, #24
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	481a      	ldr	r0, [pc, #104]	; (8005ba8 <MX_TIM5_Init+0xd8>)
 8005b3e:	f006 f9c3 	bl	800bec8 <HAL_TIM_ConfigClockSource>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8005b48:	f7ff f8a8 	bl	8004c9c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8005b4c:	4816      	ldr	r0, [pc, #88]	; (8005ba8 <MX_TIM5_Init+0xd8>)
 8005b4e:	f005 feb3 	bl	800b8b8 <HAL_TIM_IC_Init>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d001      	beq.n	8005b5c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8005b58:	f7ff f8a0 	bl	8004c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b60:	2300      	movs	r3, #0
 8005b62:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005b64:	f107 0310 	add.w	r3, r7, #16
 8005b68:	4619      	mov	r1, r3
 8005b6a:	480f      	ldr	r0, [pc, #60]	; (8005ba8 <MX_TIM5_Init+0xd8>)
 8005b6c:	f006 fef6 	bl	800c95c <HAL_TIMEx_MasterConfigSynchronization>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 8005b76:	f7ff f891 	bl	8004c9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005b82:	2300      	movs	r3, #0
 8005b84:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8005b8a:	463b      	mov	r3, r7
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	4619      	mov	r1, r3
 8005b90:	4805      	ldr	r0, [pc, #20]	; (8005ba8 <MX_TIM5_Init+0xd8>)
 8005b92:	f006 f837 	bl	800bc04 <HAL_TIM_IC_ConfigChannel>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8005b9c:	f7ff f87e 	bl	8004c9c <Error_Handler>
  }

}
 8005ba0:	bf00      	nop
 8005ba2:	3728      	adds	r7, #40	; 0x28
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	20002bc8 	.word	0x20002bc8
 8005bac:	40000c00 	.word	0x40000c00

08005bb0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b096      	sub	sp, #88	; 0x58
 8005bb4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005bb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005bba:	2200      	movs	r2, #0
 8005bbc:	601a      	str	r2, [r3, #0]
 8005bbe:	605a      	str	r2, [r3, #4]
 8005bc0:	609a      	str	r2, [r3, #8]
 8005bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bc4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005bc8:	2200      	movs	r2, #0
 8005bca:	601a      	str	r2, [r3, #0]
 8005bcc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	605a      	str	r2, [r3, #4]
 8005bd8:	609a      	str	r2, [r3, #8]
 8005bda:	60da      	str	r2, [r3, #12]
 8005bdc:	611a      	str	r2, [r3, #16]
 8005bde:	615a      	str	r2, [r3, #20]
 8005be0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005be2:	1d3b      	adds	r3, r7, #4
 8005be4:	2220      	movs	r2, #32
 8005be6:	2100      	movs	r1, #0
 8005be8:	4618      	mov	r0, r3
 8005bea:	f00a fb9d 	bl	8010328 <memset>

  htim8.Instance = TIM8;
 8005bee:	4b50      	ldr	r3, [pc, #320]	; (8005d30 <MX_TIM8_Init+0x180>)
 8005bf0:	4a50      	ldr	r2, [pc, #320]	; (8005d34 <MX_TIM8_Init+0x184>)
 8005bf2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 167;
 8005bf4:	4b4e      	ldr	r3, [pc, #312]	; (8005d30 <MX_TIM8_Init+0x180>)
 8005bf6:	22a7      	movs	r2, #167	; 0xa7
 8005bf8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005bfa:	4b4d      	ldr	r3, [pc, #308]	; (8005d30 <MX_TIM8_Init+0x180>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3999;
 8005c00:	4b4b      	ldr	r3, [pc, #300]	; (8005d30 <MX_TIM8_Init+0x180>)
 8005c02:	f640 729f 	movw	r2, #3999	; 0xf9f
 8005c06:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c08:	4b49      	ldr	r3, [pc, #292]	; (8005d30 <MX_TIM8_Init+0x180>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005c0e:	4b48      	ldr	r3, [pc, #288]	; (8005d30 <MX_TIM8_Init+0x180>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c14:	4b46      	ldr	r3, [pc, #280]	; (8005d30 <MX_TIM8_Init+0x180>)
 8005c16:	2200      	movs	r2, #0
 8005c18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8005c1a:	4845      	ldr	r0, [pc, #276]	; (8005d30 <MX_TIM8_Init+0x180>)
 8005c1c:	f005 fd93 	bl	800b746 <HAL_TIM_Base_Init>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8005c26:	f7ff f839 	bl	8004c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c2e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8005c30:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005c34:	4619      	mov	r1, r3
 8005c36:	483e      	ldr	r0, [pc, #248]	; (8005d30 <MX_TIM8_Init+0x180>)
 8005c38:	f006 f946 	bl	800bec8 <HAL_TIM_ConfigClockSource>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8005c42:	f7ff f82b 	bl	8004c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8005c46:	483a      	ldr	r0, [pc, #232]	; (8005d30 <MX_TIM8_Init+0x180>)
 8005c48:	f005 fdcc 	bl	800b7e4 <HAL_TIM_PWM_Init>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8005c52:	f7ff f823 	bl	8004c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c56:	2300      	movs	r3, #0
 8005c58:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005c5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005c62:	4619      	mov	r1, r3
 8005c64:	4832      	ldr	r0, [pc, #200]	; (8005d30 <MX_TIM8_Init+0x180>)
 8005c66:	f006 fe79 	bl	800c95c <HAL_TIMEx_MasterConfigSynchronization>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8005c70:	f7ff f814 	bl	8004c9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005c74:	2360      	movs	r3, #96	; 0x60
 8005c76:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 125;
 8005c78:	237d      	movs	r3, #125	; 0x7d
 8005c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005c80:	2300      	movs	r3, #0
 8005c82:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005c84:	2300      	movs	r3, #0
 8005c86:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c94:	2200      	movs	r2, #0
 8005c96:	4619      	mov	r1, r3
 8005c98:	4825      	ldr	r0, [pc, #148]	; (8005d30 <MX_TIM8_Init+0x180>)
 8005c9a:	f006 f84f 	bl	800bd3c <HAL_TIM_PWM_ConfigChannel>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8005ca4:	f7fe fffa 	bl	8004c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cac:	2204      	movs	r2, #4
 8005cae:	4619      	mov	r1, r3
 8005cb0:	481f      	ldr	r0, [pc, #124]	; (8005d30 <MX_TIM8_Init+0x180>)
 8005cb2:	f006 f843 	bl	800bd3c <HAL_TIM_PWM_ConfigChannel>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d001      	beq.n	8005cc0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8005cbc:	f7fe ffee 	bl	8004c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cc4:	2208      	movs	r2, #8
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	4819      	ldr	r0, [pc, #100]	; (8005d30 <MX_TIM8_Init+0x180>)
 8005cca:	f006 f837 	bl	800bd3c <HAL_TIM_PWM_ConfigChannel>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d001      	beq.n	8005cd8 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8005cd4:	f7fe ffe2 	bl	8004c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cdc:	220c      	movs	r2, #12
 8005cde:	4619      	mov	r1, r3
 8005ce0:	4813      	ldr	r0, [pc, #76]	; (8005d30 <MX_TIM8_Init+0x180>)
 8005ce2:	f006 f82b 	bl	800bd3c <HAL_TIM_PWM_ConfigChannel>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d001      	beq.n	8005cf0 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8005cec:	f7fe ffd6 	bl	8004c9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005d00:	2300      	movs	r3, #0
 8005d02:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005d04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d08:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8005d0e:	1d3b      	adds	r3, r7, #4
 8005d10:	4619      	mov	r1, r3
 8005d12:	4807      	ldr	r0, [pc, #28]	; (8005d30 <MX_TIM8_Init+0x180>)
 8005d14:	f006 fe9e 	bl	800ca54 <HAL_TIMEx_ConfigBreakDeadTime>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8005d1e:	f7fe ffbd 	bl	8004c9c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8005d22:	4803      	ldr	r0, [pc, #12]	; (8005d30 <MX_TIM8_Init+0x180>)
 8005d24:	f000 f8e8 	bl	8005ef8 <HAL_TIM_MspPostInit>

}
 8005d28:	bf00      	nop
 8005d2a:	3758      	adds	r7, #88	; 0x58
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	20002b88 	.word	0x20002b88
 8005d34:	40010400 	.word	0x40010400

08005d38 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005d3e:	463b      	mov	r3, r7
 8005d40:	2200      	movs	r2, #0
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	605a      	str	r2, [r3, #4]
 8005d46:	609a      	str	r2, [r3, #8]
 8005d48:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 8005d4a:	4b16      	ldr	r3, [pc, #88]	; (8005da4 <MX_TIM9_Init+0x6c>)
 8005d4c:	4a16      	ldr	r2, [pc, #88]	; (8005da8 <MX_TIM9_Init+0x70>)
 8005d4e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 167;
 8005d50:	4b14      	ldr	r3, [pc, #80]	; (8005da4 <MX_TIM9_Init+0x6c>)
 8005d52:	22a7      	movs	r2, #167	; 0xa7
 8005d54:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d56:	4b13      	ldr	r3, [pc, #76]	; (8005da4 <MX_TIM9_Init+0x6c>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 64999;
 8005d5c:	4b11      	ldr	r3, [pc, #68]	; (8005da4 <MX_TIM9_Init+0x6c>)
 8005d5e:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8005d62:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d64:	4b0f      	ldr	r3, [pc, #60]	; (8005da4 <MX_TIM9_Init+0x6c>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d6a:	4b0e      	ldr	r3, [pc, #56]	; (8005da4 <MX_TIM9_Init+0x6c>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8005d70:	480c      	ldr	r0, [pc, #48]	; (8005da4 <MX_TIM9_Init+0x6c>)
 8005d72:	f005 fce8 	bl	800b746 <HAL_TIM_Base_Init>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8005d7c:	f7fe ff8e 	bl	8004c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005d80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d84:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8005d86:	463b      	mov	r3, r7
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4806      	ldr	r0, [pc, #24]	; (8005da4 <MX_TIM9_Init+0x6c>)
 8005d8c:	f006 f89c 	bl	800bec8 <HAL_TIM_ConfigClockSource>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8005d96:	f7fe ff81 	bl	8004c9c <Error_Handler>
  }

}
 8005d9a:	bf00      	nop
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	20002c48 	.word	0x20002c48
 8005da8:	40014000 	.word	0x40014000

08005dac <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a0b      	ldr	r2, [pc, #44]	; (8005de8 <HAL_TIM_PWM_MspInit+0x3c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d10d      	bne.n	8005dda <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60fb      	str	r3, [r7, #12]
 8005dc2:	4b0a      	ldr	r3, [pc, #40]	; (8005dec <HAL_TIM_PWM_MspInit+0x40>)
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	4a09      	ldr	r2, [pc, #36]	; (8005dec <HAL_TIM_PWM_MspInit+0x40>)
 8005dc8:	f043 0302 	orr.w	r3, r3, #2
 8005dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8005dce:	4b07      	ldr	r3, [pc, #28]	; (8005dec <HAL_TIM_PWM_MspInit+0x40>)
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	60fb      	str	r3, [r7, #12]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005dda:	bf00      	nop
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	40000400 	.word	0x40000400
 8005dec:	40023800 	.word	0x40023800

08005df0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b08c      	sub	sp, #48	; 0x30
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005df8:	f107 031c 	add.w	r3, r7, #28
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	601a      	str	r2, [r3, #0]
 8005e00:	605a      	str	r2, [r3, #4]
 8005e02:	609a      	str	r2, [r3, #8]
 8005e04:	60da      	str	r2, [r3, #12]
 8005e06:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM5)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a35      	ldr	r2, [pc, #212]	; (8005ee4 <HAL_TIM_Base_MspInit+0xf4>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d134      	bne.n	8005e7c <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005e12:	2300      	movs	r3, #0
 8005e14:	61bb      	str	r3, [r7, #24]
 8005e16:	4b34      	ldr	r3, [pc, #208]	; (8005ee8 <HAL_TIM_Base_MspInit+0xf8>)
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	4a33      	ldr	r2, [pc, #204]	; (8005ee8 <HAL_TIM_Base_MspInit+0xf8>)
 8005e1c:	f043 0308 	orr.w	r3, r3, #8
 8005e20:	6413      	str	r3, [r2, #64]	; 0x40
 8005e22:	4b31      	ldr	r3, [pc, #196]	; (8005ee8 <HAL_TIM_Base_MspInit+0xf8>)
 8005e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e26:	f003 0308 	and.w	r3, r3, #8
 8005e2a:	61bb      	str	r3, [r7, #24]
 8005e2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e2e:	2300      	movs	r3, #0
 8005e30:	617b      	str	r3, [r7, #20]
 8005e32:	4b2d      	ldr	r3, [pc, #180]	; (8005ee8 <HAL_TIM_Base_MspInit+0xf8>)
 8005e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e36:	4a2c      	ldr	r2, [pc, #176]	; (8005ee8 <HAL_TIM_Base_MspInit+0xf8>)
 8005e38:	f043 0301 	orr.w	r3, r3, #1
 8005e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e3e:	4b2a      	ldr	r3, [pc, #168]	; (8005ee8 <HAL_TIM_Base_MspInit+0xf8>)
 8005e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	617b      	str	r3, [r7, #20]
 8005e48:	697b      	ldr	r3, [r7, #20]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e4e:	2302      	movs	r3, #2
 8005e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e52:	2300      	movs	r3, #0
 8005e54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e56:	2300      	movs	r3, #0
 8005e58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e5e:	f107 031c 	add.w	r3, r7, #28
 8005e62:	4619      	mov	r1, r3
 8005e64:	4821      	ldr	r0, [pc, #132]	; (8005eec <HAL_TIM_Base_MspInit+0xfc>)
 8005e66:	f000 fdb1 	bl	80069cc <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	2032      	movs	r0, #50	; 0x32
 8005e70:	f000 fa5d 	bl	800632e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005e74:	2032      	movs	r0, #50	; 0x32
 8005e76:	f000 fa76 	bl	8006366 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8005e7a:	e02e      	b.n	8005eda <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM8)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a1b      	ldr	r2, [pc, #108]	; (8005ef0 <HAL_TIM_Base_MspInit+0x100>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d10e      	bne.n	8005ea4 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005e86:	2300      	movs	r3, #0
 8005e88:	613b      	str	r3, [r7, #16]
 8005e8a:	4b17      	ldr	r3, [pc, #92]	; (8005ee8 <HAL_TIM_Base_MspInit+0xf8>)
 8005e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8e:	4a16      	ldr	r2, [pc, #88]	; (8005ee8 <HAL_TIM_Base_MspInit+0xf8>)
 8005e90:	f043 0302 	orr.w	r3, r3, #2
 8005e94:	6453      	str	r3, [r2, #68]	; 0x44
 8005e96:	4b14      	ldr	r3, [pc, #80]	; (8005ee8 <HAL_TIM_Base_MspInit+0xf8>)
 8005e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e9a:	f003 0302 	and.w	r3, r3, #2
 8005e9e:	613b      	str	r3, [r7, #16]
 8005ea0:	693b      	ldr	r3, [r7, #16]
}
 8005ea2:	e01a      	b.n	8005eda <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM9)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a12      	ldr	r2, [pc, #72]	; (8005ef4 <HAL_TIM_Base_MspInit+0x104>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d115      	bne.n	8005eda <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8005eae:	2300      	movs	r3, #0
 8005eb0:	60fb      	str	r3, [r7, #12]
 8005eb2:	4b0d      	ldr	r3, [pc, #52]	; (8005ee8 <HAL_TIM_Base_MspInit+0xf8>)
 8005eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb6:	4a0c      	ldr	r2, [pc, #48]	; (8005ee8 <HAL_TIM_Base_MspInit+0xf8>)
 8005eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8005ebe:	4b0a      	ldr	r3, [pc, #40]	; (8005ee8 <HAL_TIM_Base_MspInit+0xf8>)
 8005ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8005eca:	2200      	movs	r2, #0
 8005ecc:	2100      	movs	r1, #0
 8005ece:	2018      	movs	r0, #24
 8005ed0:	f000 fa2d 	bl	800632e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005ed4:	2018      	movs	r0, #24
 8005ed6:	f000 fa46 	bl	8006366 <HAL_NVIC_EnableIRQ>
}
 8005eda:	bf00      	nop
 8005edc:	3730      	adds	r7, #48	; 0x30
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	40000c00 	.word	0x40000c00
 8005ee8:	40023800 	.word	0x40023800
 8005eec:	40020000 	.word	0x40020000
 8005ef0:	40010400 	.word	0x40010400
 8005ef4:	40014000 	.word	0x40014000

08005ef8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b08a      	sub	sp, #40	; 0x28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f00:	f107 0314 	add.w	r3, r7, #20
 8005f04:	2200      	movs	r2, #0
 8005f06:	601a      	str	r2, [r3, #0]
 8005f08:	605a      	str	r2, [r3, #4]
 8005f0a:	609a      	str	r2, [r3, #8]
 8005f0c:	60da      	str	r2, [r3, #12]
 8005f0e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a33      	ldr	r2, [pc, #204]	; (8005fe4 <HAL_TIM_MspPostInit+0xec>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d13c      	bne.n	8005f94 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	613b      	str	r3, [r7, #16]
 8005f1e:	4b32      	ldr	r3, [pc, #200]	; (8005fe8 <HAL_TIM_MspPostInit+0xf0>)
 8005f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f22:	4a31      	ldr	r2, [pc, #196]	; (8005fe8 <HAL_TIM_MspPostInit+0xf0>)
 8005f24:	f043 0301 	orr.w	r3, r3, #1
 8005f28:	6313      	str	r3, [r2, #48]	; 0x30
 8005f2a:	4b2f      	ldr	r3, [pc, #188]	; (8005fe8 <HAL_TIM_MspPostInit+0xf0>)
 8005f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	613b      	str	r3, [r7, #16]
 8005f34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f36:	2300      	movs	r3, #0
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	4b2b      	ldr	r3, [pc, #172]	; (8005fe8 <HAL_TIM_MspPostInit+0xf0>)
 8005f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3e:	4a2a      	ldr	r2, [pc, #168]	; (8005fe8 <HAL_TIM_MspPostInit+0xf0>)
 8005f40:	f043 0302 	orr.w	r3, r3, #2
 8005f44:	6313      	str	r3, [r2, #48]	; 0x30
 8005f46:	4b28      	ldr	r3, [pc, #160]	; (8005fe8 <HAL_TIM_MspPostInit+0xf0>)
 8005f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	60fb      	str	r3, [r7, #12]
 8005f50:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005f52:	23c0      	movs	r3, #192	; 0xc0
 8005f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f56:	2302      	movs	r3, #2
 8005f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005f62:	2302      	movs	r3, #2
 8005f64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f66:	f107 0314 	add.w	r3, r7, #20
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	481f      	ldr	r0, [pc, #124]	; (8005fec <HAL_TIM_MspPostInit+0xf4>)
 8005f6e:	f000 fd2d 	bl	80069cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005f72:	2303      	movs	r3, #3
 8005f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f76:	2302      	movs	r3, #2
 8005f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005f82:	2302      	movs	r3, #2
 8005f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f86:	f107 0314 	add.w	r3, r7, #20
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	4818      	ldr	r0, [pc, #96]	; (8005ff0 <HAL_TIM_MspPostInit+0xf8>)
 8005f8e:	f000 fd1d 	bl	80069cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8005f92:	e023      	b.n	8005fdc <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM8)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a16      	ldr	r2, [pc, #88]	; (8005ff4 <HAL_TIM_MspPostInit+0xfc>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d11e      	bne.n	8005fdc <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	60bb      	str	r3, [r7, #8]
 8005fa2:	4b11      	ldr	r3, [pc, #68]	; (8005fe8 <HAL_TIM_MspPostInit+0xf0>)
 8005fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa6:	4a10      	ldr	r2, [pc, #64]	; (8005fe8 <HAL_TIM_MspPostInit+0xf0>)
 8005fa8:	f043 0304 	orr.w	r3, r3, #4
 8005fac:	6313      	str	r3, [r2, #48]	; 0x30
 8005fae:	4b0e      	ldr	r3, [pc, #56]	; (8005fe8 <HAL_TIM_MspPostInit+0xf0>)
 8005fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb2:	f003 0304 	and.w	r3, r3, #4
 8005fb6:	60bb      	str	r3, [r7, #8]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8005fba:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005fd0:	f107 0314 	add.w	r3, r7, #20
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	4808      	ldr	r0, [pc, #32]	; (8005ff8 <HAL_TIM_MspPostInit+0x100>)
 8005fd8:	f000 fcf8 	bl	80069cc <HAL_GPIO_Init>
}
 8005fdc:	bf00      	nop
 8005fde:	3728      	adds	r7, #40	; 0x28
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	40000400 	.word	0x40000400
 8005fe8:	40023800 	.word	0x40023800
 8005fec:	40020000 	.word	0x40020000
 8005ff0:	40020400 	.word	0x40020400
 8005ff4:	40010400 	.word	0x40010400
 8005ff8:	40020800 	.word	0x40020800

08005ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006034 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006000:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006002:	e003      	b.n	800600c <LoopCopyDataInit>

08006004 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006004:	4b0c      	ldr	r3, [pc, #48]	; (8006038 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006006:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006008:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800600a:	3104      	adds	r1, #4

0800600c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800600c:	480b      	ldr	r0, [pc, #44]	; (800603c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800600e:	4b0c      	ldr	r3, [pc, #48]	; (8006040 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006010:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006012:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006014:	d3f6      	bcc.n	8006004 <CopyDataInit>
  ldr  r2, =_sbss
 8006016:	4a0b      	ldr	r2, [pc, #44]	; (8006044 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006018:	e002      	b.n	8006020 <LoopFillZerobss>

0800601a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800601a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800601c:	f842 3b04 	str.w	r3, [r2], #4

08006020 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006020:	4b09      	ldr	r3, [pc, #36]	; (8006048 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006022:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006024:	d3f9      	bcc.n	800601a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006026:	f7fe ff6d 	bl	8004f04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800602a:	f00a f949 	bl	80102c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800602e:	f7fe f8b5 	bl	800419c <main>
  bx  lr    
 8006032:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006034:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006038:	08013840 	.word	0x08013840
  ldr  r0, =_sdata
 800603c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006040:	2000022c 	.word	0x2000022c
  ldr  r2, =_sbss
 8006044:	20000230 	.word	0x20000230
  ldr  r3, = _ebss
 8006048:	20004568 	.word	0x20004568

0800604c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800604c:	e7fe      	b.n	800604c <ADC_IRQHandler>
	...

08006050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006054:	4b0e      	ldr	r3, [pc, #56]	; (8006090 <HAL_Init+0x40>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a0d      	ldr	r2, [pc, #52]	; (8006090 <HAL_Init+0x40>)
 800605a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800605e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006060:	4b0b      	ldr	r3, [pc, #44]	; (8006090 <HAL_Init+0x40>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a0a      	ldr	r2, [pc, #40]	; (8006090 <HAL_Init+0x40>)
 8006066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800606a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800606c:	4b08      	ldr	r3, [pc, #32]	; (8006090 <HAL_Init+0x40>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a07      	ldr	r2, [pc, #28]	; (8006090 <HAL_Init+0x40>)
 8006072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006078:	2003      	movs	r0, #3
 800607a:	f000 f94d 	bl	8006318 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800607e:	2000      	movs	r0, #0
 8006080:	f000 f808 	bl	8006094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006084:	f7fe fe4e 	bl	8004d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	40023c00 	.word	0x40023c00

08006094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800609c:	4b12      	ldr	r3, [pc, #72]	; (80060e8 <HAL_InitTick+0x54>)
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	4b12      	ldr	r3, [pc, #72]	; (80060ec <HAL_InitTick+0x58>)
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	4619      	mov	r1, r3
 80060a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80060aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80060ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 f965 	bl	8006382 <HAL_SYSTICK_Config>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e00e      	b.n	80060e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b0f      	cmp	r3, #15
 80060c6:	d80a      	bhi.n	80060de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80060c8:	2200      	movs	r2, #0
 80060ca:	6879      	ldr	r1, [r7, #4]
 80060cc:	f04f 30ff 	mov.w	r0, #4294967295
 80060d0:	f000 f92d 	bl	800632e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80060d4:	4a06      	ldr	r2, [pc, #24]	; (80060f0 <HAL_InitTick+0x5c>)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80060da:	2300      	movs	r3, #0
 80060dc:	e000      	b.n	80060e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3708      	adds	r7, #8
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	20000040 	.word	0x20000040
 80060ec:	2000004c 	.word	0x2000004c
 80060f0:	20000048 	.word	0x20000048

080060f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80060f4:	b480      	push	{r7}
 80060f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80060f8:	4b06      	ldr	r3, [pc, #24]	; (8006114 <HAL_IncTick+0x20>)
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	461a      	mov	r2, r3
 80060fe:	4b06      	ldr	r3, [pc, #24]	; (8006118 <HAL_IncTick+0x24>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4413      	add	r3, r2
 8006104:	4a04      	ldr	r2, [pc, #16]	; (8006118 <HAL_IncTick+0x24>)
 8006106:	6013      	str	r3, [r2, #0]
}
 8006108:	bf00      	nop
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	2000004c 	.word	0x2000004c
 8006118:	20002c88 	.word	0x20002c88

0800611c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800611c:	b480      	push	{r7}
 800611e:	af00      	add	r7, sp, #0
  return uwTick;
 8006120:	4b03      	ldr	r3, [pc, #12]	; (8006130 <HAL_GetTick+0x14>)
 8006122:	681b      	ldr	r3, [r3, #0]
}
 8006124:	4618      	mov	r0, r3
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	20002c88 	.word	0x20002c88

08006134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800613c:	f7ff ffee 	bl	800611c <HAL_GetTick>
 8006140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614c:	d005      	beq.n	800615a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800614e:	4b09      	ldr	r3, [pc, #36]	; (8006174 <HAL_Delay+0x40>)
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	461a      	mov	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	4413      	add	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800615a:	bf00      	nop
 800615c:	f7ff ffde 	bl	800611c <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	429a      	cmp	r2, r3
 800616a:	d8f7      	bhi.n	800615c <HAL_Delay+0x28>
  {
  }
}
 800616c:	bf00      	nop
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	2000004c 	.word	0x2000004c

08006178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f003 0307 	and.w	r3, r3, #7
 8006186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006188:	4b0c      	ldr	r3, [pc, #48]	; (80061bc <__NVIC_SetPriorityGrouping+0x44>)
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006194:	4013      	ands	r3, r2
 8006196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80061a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80061a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061aa:	4a04      	ldr	r2, [pc, #16]	; (80061bc <__NVIC_SetPriorityGrouping+0x44>)
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	60d3      	str	r3, [r2, #12]
}
 80061b0:	bf00      	nop
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	e000ed00 	.word	0xe000ed00

080061c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80061c0:	b480      	push	{r7}
 80061c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061c4:	4b04      	ldr	r3, [pc, #16]	; (80061d8 <__NVIC_GetPriorityGrouping+0x18>)
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	0a1b      	lsrs	r3, r3, #8
 80061ca:	f003 0307 	and.w	r3, r3, #7
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	e000ed00 	.word	0xe000ed00

080061dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	4603      	mov	r3, r0
 80061e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	db0b      	blt.n	8006206 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061ee:	79fb      	ldrb	r3, [r7, #7]
 80061f0:	f003 021f 	and.w	r2, r3, #31
 80061f4:	4907      	ldr	r1, [pc, #28]	; (8006214 <__NVIC_EnableIRQ+0x38>)
 80061f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061fa:	095b      	lsrs	r3, r3, #5
 80061fc:	2001      	movs	r0, #1
 80061fe:	fa00 f202 	lsl.w	r2, r0, r2
 8006202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006206:	bf00      	nop
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	e000e100 	.word	0xe000e100

08006218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	4603      	mov	r3, r0
 8006220:	6039      	str	r1, [r7, #0]
 8006222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006228:	2b00      	cmp	r3, #0
 800622a:	db0a      	blt.n	8006242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	b2da      	uxtb	r2, r3
 8006230:	490c      	ldr	r1, [pc, #48]	; (8006264 <__NVIC_SetPriority+0x4c>)
 8006232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006236:	0112      	lsls	r2, r2, #4
 8006238:	b2d2      	uxtb	r2, r2
 800623a:	440b      	add	r3, r1
 800623c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006240:	e00a      	b.n	8006258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	b2da      	uxtb	r2, r3
 8006246:	4908      	ldr	r1, [pc, #32]	; (8006268 <__NVIC_SetPriority+0x50>)
 8006248:	79fb      	ldrb	r3, [r7, #7]
 800624a:	f003 030f 	and.w	r3, r3, #15
 800624e:	3b04      	subs	r3, #4
 8006250:	0112      	lsls	r2, r2, #4
 8006252:	b2d2      	uxtb	r2, r2
 8006254:	440b      	add	r3, r1
 8006256:	761a      	strb	r2, [r3, #24]
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr
 8006264:	e000e100 	.word	0xe000e100
 8006268:	e000ed00 	.word	0xe000ed00

0800626c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800626c:	b480      	push	{r7}
 800626e:	b089      	sub	sp, #36	; 0x24
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f003 0307 	and.w	r3, r3, #7
 800627e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	f1c3 0307 	rsb	r3, r3, #7
 8006286:	2b04      	cmp	r3, #4
 8006288:	bf28      	it	cs
 800628a:	2304      	movcs	r3, #4
 800628c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	3304      	adds	r3, #4
 8006292:	2b06      	cmp	r3, #6
 8006294:	d902      	bls.n	800629c <NVIC_EncodePriority+0x30>
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	3b03      	subs	r3, #3
 800629a:	e000      	b.n	800629e <NVIC_EncodePriority+0x32>
 800629c:	2300      	movs	r3, #0
 800629e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062a0:	f04f 32ff 	mov.w	r2, #4294967295
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	fa02 f303 	lsl.w	r3, r2, r3
 80062aa:	43da      	mvns	r2, r3
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	401a      	ands	r2, r3
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062b4:	f04f 31ff 	mov.w	r1, #4294967295
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	fa01 f303 	lsl.w	r3, r1, r3
 80062be:	43d9      	mvns	r1, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062c4:	4313      	orrs	r3, r2
         );
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3724      	adds	r7, #36	; 0x24
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
	...

080062d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	3b01      	subs	r3, #1
 80062e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062e4:	d301      	bcc.n	80062ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80062e6:	2301      	movs	r3, #1
 80062e8:	e00f      	b.n	800630a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80062ea:	4a0a      	ldr	r2, [pc, #40]	; (8006314 <SysTick_Config+0x40>)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	3b01      	subs	r3, #1
 80062f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80062f2:	210f      	movs	r1, #15
 80062f4:	f04f 30ff 	mov.w	r0, #4294967295
 80062f8:	f7ff ff8e 	bl	8006218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80062fc:	4b05      	ldr	r3, [pc, #20]	; (8006314 <SysTick_Config+0x40>)
 80062fe:	2200      	movs	r2, #0
 8006300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006302:	4b04      	ldr	r3, [pc, #16]	; (8006314 <SysTick_Config+0x40>)
 8006304:	2207      	movs	r2, #7
 8006306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3708      	adds	r7, #8
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	e000e010 	.word	0xe000e010

08006318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f7ff ff29 	bl	8006178 <__NVIC_SetPriorityGrouping>
}
 8006326:	bf00      	nop
 8006328:	3708      	adds	r7, #8
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800632e:	b580      	push	{r7, lr}
 8006330:	b086      	sub	sp, #24
 8006332:	af00      	add	r7, sp, #0
 8006334:	4603      	mov	r3, r0
 8006336:	60b9      	str	r1, [r7, #8]
 8006338:	607a      	str	r2, [r7, #4]
 800633a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800633c:	2300      	movs	r3, #0
 800633e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006340:	f7ff ff3e 	bl	80061c0 <__NVIC_GetPriorityGrouping>
 8006344:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	68b9      	ldr	r1, [r7, #8]
 800634a:	6978      	ldr	r0, [r7, #20]
 800634c:	f7ff ff8e 	bl	800626c <NVIC_EncodePriority>
 8006350:	4602      	mov	r2, r0
 8006352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006356:	4611      	mov	r1, r2
 8006358:	4618      	mov	r0, r3
 800635a:	f7ff ff5d 	bl	8006218 <__NVIC_SetPriority>
}
 800635e:	bf00      	nop
 8006360:	3718      	adds	r7, #24
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b082      	sub	sp, #8
 800636a:	af00      	add	r7, sp, #0
 800636c:	4603      	mov	r3, r0
 800636e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006374:	4618      	mov	r0, r3
 8006376:	f7ff ff31 	bl	80061dc <__NVIC_EnableIRQ>
}
 800637a:	bf00      	nop
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b082      	sub	sp, #8
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7ff ffa2 	bl	80062d4 <SysTick_Config>
 8006390:	4603      	mov	r3, r0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
	...

0800639c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80063a4:	2300      	movs	r3, #0
 80063a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80063a8:	f7ff feb8 	bl	800611c <HAL_GetTick>
 80063ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e099      	b.n	80064ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2202      	movs	r2, #2
 80063c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 0201 	bic.w	r2, r2, #1
 80063d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063d8:	e00f      	b.n	80063fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80063da:	f7ff fe9f 	bl	800611c <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	2b05      	cmp	r3, #5
 80063e6:	d908      	bls.n	80063fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2220      	movs	r2, #32
 80063ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2203      	movs	r2, #3
 80063f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e078      	b.n	80064ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1e8      	bne.n	80063da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006410:	697a      	ldr	r2, [r7, #20]
 8006412:	4b38      	ldr	r3, [pc, #224]	; (80064f4 <HAL_DMA_Init+0x158>)
 8006414:	4013      	ands	r3, r2
 8006416:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685a      	ldr	r2, [r3, #4]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006426:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006432:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800643e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	4313      	orrs	r3, r2
 800644a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	2b04      	cmp	r3, #4
 8006452:	d107      	bne.n	8006464 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645c:	4313      	orrs	r3, r2
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	4313      	orrs	r3, r2
 8006462:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f023 0307 	bic.w	r3, r3, #7
 800647a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	4313      	orrs	r3, r2
 8006484:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648a:	2b04      	cmp	r3, #4
 800648c:	d117      	bne.n	80064be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	4313      	orrs	r3, r2
 8006496:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00e      	beq.n	80064be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 fa19 	bl	80068d8 <DMA_CheckFifoParam>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d008      	beq.n	80064be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2240      	movs	r2, #64	; 0x40
 80064b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80064ba:	2301      	movs	r3, #1
 80064bc:	e016      	b.n	80064ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f9d0 	bl	800686c <DMA_CalcBaseAndBitshift>
 80064cc:	4603      	mov	r3, r0
 80064ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d4:	223f      	movs	r2, #63	; 0x3f
 80064d6:	409a      	lsls	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3718      	adds	r7, #24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	f010803f 	.word	0xf010803f

080064f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006506:	b2db      	uxtb	r3, r3
 8006508:	2b02      	cmp	r3, #2
 800650a:	d004      	beq.n	8006516 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2280      	movs	r2, #128	; 0x80
 8006510:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e00c      	b.n	8006530 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2205      	movs	r2, #5
 800651a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f022 0201 	bic.w	r2, r2, #1
 800652c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006544:	2300      	movs	r3, #0
 8006546:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006548:	4b92      	ldr	r3, [pc, #584]	; (8006794 <HAL_DMA_IRQHandler+0x258>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a92      	ldr	r2, [pc, #584]	; (8006798 <HAL_DMA_IRQHandler+0x25c>)
 800654e:	fba2 2303 	umull	r2, r3, r2, r3
 8006552:	0a9b      	lsrs	r3, r3, #10
 8006554:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800655a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006566:	2208      	movs	r2, #8
 8006568:	409a      	lsls	r2, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	4013      	ands	r3, r2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d01a      	beq.n	80065a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0304 	and.w	r3, r3, #4
 800657c:	2b00      	cmp	r3, #0
 800657e:	d013      	beq.n	80065a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f022 0204 	bic.w	r2, r2, #4
 800658e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006594:	2208      	movs	r2, #8
 8006596:	409a      	lsls	r2, r3
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a0:	f043 0201 	orr.w	r2, r3, #1
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ac:	2201      	movs	r2, #1
 80065ae:	409a      	lsls	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4013      	ands	r3, r2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d012      	beq.n	80065de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00b      	beq.n	80065de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ca:	2201      	movs	r2, #1
 80065cc:	409a      	lsls	r2, r3
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d6:	f043 0202 	orr.w	r2, r3, #2
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065e2:	2204      	movs	r2, #4
 80065e4:	409a      	lsls	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	4013      	ands	r3, r2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d012      	beq.n	8006614 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0302 	and.w	r3, r3, #2
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00b      	beq.n	8006614 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006600:	2204      	movs	r2, #4
 8006602:	409a      	lsls	r2, r3
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660c:	f043 0204 	orr.w	r2, r3, #4
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006618:	2210      	movs	r2, #16
 800661a:	409a      	lsls	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4013      	ands	r3, r2
 8006620:	2b00      	cmp	r3, #0
 8006622:	d043      	beq.n	80066ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0308 	and.w	r3, r3, #8
 800662e:	2b00      	cmp	r3, #0
 8006630:	d03c      	beq.n	80066ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006636:	2210      	movs	r2, #16
 8006638:	409a      	lsls	r2, r3
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d018      	beq.n	800667e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d108      	bne.n	800666c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665e:	2b00      	cmp	r3, #0
 8006660:	d024      	beq.n	80066ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	4798      	blx	r3
 800666a:	e01f      	b.n	80066ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006670:	2b00      	cmp	r3, #0
 8006672:	d01b      	beq.n	80066ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	4798      	blx	r3
 800667c:	e016      	b.n	80066ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006688:	2b00      	cmp	r3, #0
 800668a:	d107      	bne.n	800669c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 0208 	bic.w	r2, r2, #8
 800669a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d003      	beq.n	80066ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066b0:	2220      	movs	r2, #32
 80066b2:	409a      	lsls	r2, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	4013      	ands	r3, r2
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 808e 	beq.w	80067da <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0310 	and.w	r3, r3, #16
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 8086 	beq.w	80067da <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066d2:	2220      	movs	r2, #32
 80066d4:	409a      	lsls	r2, r3
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	2b05      	cmp	r3, #5
 80066e4:	d136      	bne.n	8006754 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 0216 	bic.w	r2, r2, #22
 80066f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	695a      	ldr	r2, [r3, #20]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006704:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670a:	2b00      	cmp	r3, #0
 800670c:	d103      	bne.n	8006716 <HAL_DMA_IRQHandler+0x1da>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006712:	2b00      	cmp	r3, #0
 8006714:	d007      	beq.n	8006726 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 0208 	bic.w	r2, r2, #8
 8006724:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800672a:	223f      	movs	r2, #63	; 0x3f
 800672c:	409a      	lsls	r2, r3
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006746:	2b00      	cmp	r3, #0
 8006748:	d07d      	beq.n	8006846 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	4798      	blx	r3
        }
        return;
 8006752:	e078      	b.n	8006846 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d01c      	beq.n	800679c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d108      	bne.n	8006782 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006774:	2b00      	cmp	r3, #0
 8006776:	d030      	beq.n	80067da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	4798      	blx	r3
 8006780:	e02b      	b.n	80067da <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006786:	2b00      	cmp	r3, #0
 8006788:	d027      	beq.n	80067da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	4798      	blx	r3
 8006792:	e022      	b.n	80067da <HAL_DMA_IRQHandler+0x29e>
 8006794:	20000040 	.word	0x20000040
 8006798:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10f      	bne.n	80067ca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f022 0210 	bic.w	r2, r2, #16
 80067b8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d032      	beq.n	8006848 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d022      	beq.n	8006834 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2205      	movs	r2, #5
 80067f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f022 0201 	bic.w	r2, r2, #1
 8006804:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	3301      	adds	r3, #1
 800680a:	60bb      	str	r3, [r7, #8]
 800680c:	697a      	ldr	r2, [r7, #20]
 800680e:	429a      	cmp	r2, r3
 8006810:	d307      	bcc.n	8006822 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1f2      	bne.n	8006806 <HAL_DMA_IRQHandler+0x2ca>
 8006820:	e000      	b.n	8006824 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006822:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006838:	2b00      	cmp	r3, #0
 800683a:	d005      	beq.n	8006848 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	4798      	blx	r3
 8006844:	e000      	b.n	8006848 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006846:	bf00      	nop
    }
  }
}
 8006848:	3718      	adds	r7, #24
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop

08006850 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800685e:	b2db      	uxtb	r3, r3
}
 8006860:	4618      	mov	r0, r3
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	b2db      	uxtb	r3, r3
 800687a:	3b10      	subs	r3, #16
 800687c:	4a14      	ldr	r2, [pc, #80]	; (80068d0 <DMA_CalcBaseAndBitshift+0x64>)
 800687e:	fba2 2303 	umull	r2, r3, r2, r3
 8006882:	091b      	lsrs	r3, r3, #4
 8006884:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006886:	4a13      	ldr	r2, [pc, #76]	; (80068d4 <DMA_CalcBaseAndBitshift+0x68>)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4413      	add	r3, r2
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	461a      	mov	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2b03      	cmp	r3, #3
 8006898:	d909      	bls.n	80068ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80068a2:	f023 0303 	bic.w	r3, r3, #3
 80068a6:	1d1a      	adds	r2, r3, #4
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	659a      	str	r2, [r3, #88]	; 0x58
 80068ac:	e007      	b.n	80068be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80068b6:	f023 0303 	bic.w	r3, r3, #3
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	aaaaaaab 	.word	0xaaaaaaab
 80068d4:	080135a8 	.word	0x080135a8

080068d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068e0:	2300      	movs	r3, #0
 80068e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d11f      	bne.n	8006932 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	2b03      	cmp	r3, #3
 80068f6:	d855      	bhi.n	80069a4 <DMA_CheckFifoParam+0xcc>
 80068f8:	a201      	add	r2, pc, #4	; (adr r2, 8006900 <DMA_CheckFifoParam+0x28>)
 80068fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fe:	bf00      	nop
 8006900:	08006911 	.word	0x08006911
 8006904:	08006923 	.word	0x08006923
 8006908:	08006911 	.word	0x08006911
 800690c:	080069a5 	.word	0x080069a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006914:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d045      	beq.n	80069a8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006920:	e042      	b.n	80069a8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006926:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800692a:	d13f      	bne.n	80069ac <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006930:	e03c      	b.n	80069ac <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800693a:	d121      	bne.n	8006980 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	2b03      	cmp	r3, #3
 8006940:	d836      	bhi.n	80069b0 <DMA_CheckFifoParam+0xd8>
 8006942:	a201      	add	r2, pc, #4	; (adr r2, 8006948 <DMA_CheckFifoParam+0x70>)
 8006944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006948:	08006959 	.word	0x08006959
 800694c:	0800695f 	.word	0x0800695f
 8006950:	08006959 	.word	0x08006959
 8006954:	08006971 	.word	0x08006971
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	73fb      	strb	r3, [r7, #15]
      break;
 800695c:	e02f      	b.n	80069be <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006962:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d024      	beq.n	80069b4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800696e:	e021      	b.n	80069b4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006974:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006978:	d11e      	bne.n	80069b8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800697e:	e01b      	b.n	80069b8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	2b02      	cmp	r3, #2
 8006984:	d902      	bls.n	800698c <DMA_CheckFifoParam+0xb4>
 8006986:	2b03      	cmp	r3, #3
 8006988:	d003      	beq.n	8006992 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800698a:	e018      	b.n	80069be <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	73fb      	strb	r3, [r7, #15]
      break;
 8006990:	e015      	b.n	80069be <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006996:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00e      	beq.n	80069bc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	73fb      	strb	r3, [r7, #15]
      break;
 80069a2:	e00b      	b.n	80069bc <DMA_CheckFifoParam+0xe4>
      break;
 80069a4:	bf00      	nop
 80069a6:	e00a      	b.n	80069be <DMA_CheckFifoParam+0xe6>
      break;
 80069a8:	bf00      	nop
 80069aa:	e008      	b.n	80069be <DMA_CheckFifoParam+0xe6>
      break;
 80069ac:	bf00      	nop
 80069ae:	e006      	b.n	80069be <DMA_CheckFifoParam+0xe6>
      break;
 80069b0:	bf00      	nop
 80069b2:	e004      	b.n	80069be <DMA_CheckFifoParam+0xe6>
      break;
 80069b4:	bf00      	nop
 80069b6:	e002      	b.n	80069be <DMA_CheckFifoParam+0xe6>
      break;   
 80069b8:	bf00      	nop
 80069ba:	e000      	b.n	80069be <DMA_CheckFifoParam+0xe6>
      break;
 80069bc:	bf00      	nop
    }
  } 
  
  return status; 
 80069be:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b089      	sub	sp, #36	; 0x24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80069d6:	2300      	movs	r3, #0
 80069d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80069da:	2300      	movs	r3, #0
 80069dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80069de:	2300      	movs	r3, #0
 80069e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80069e2:	2300      	movs	r3, #0
 80069e4:	61fb      	str	r3, [r7, #28]
 80069e6:	e16b      	b.n	8006cc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80069e8:	2201      	movs	r2, #1
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	fa02 f303 	lsl.w	r3, r2, r3
 80069f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	4013      	ands	r3, r2
 80069fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	f040 815a 	bne.w	8006cba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d00b      	beq.n	8006a26 <HAL_GPIO_Init+0x5a>
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d007      	beq.n	8006a26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006a1a:	2b11      	cmp	r3, #17
 8006a1c:	d003      	beq.n	8006a26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	2b12      	cmp	r3, #18
 8006a24:	d130      	bne.n	8006a88 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	005b      	lsls	r3, r3, #1
 8006a30:	2203      	movs	r2, #3
 8006a32:	fa02 f303 	lsl.w	r3, r2, r3
 8006a36:	43db      	mvns	r3, r3
 8006a38:	69ba      	ldr	r2, [r7, #24]
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	68da      	ldr	r2, [r3, #12]
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	005b      	lsls	r3, r3, #1
 8006a46:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4a:	69ba      	ldr	r2, [r7, #24]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	fa02 f303 	lsl.w	r3, r2, r3
 8006a64:	43db      	mvns	r3, r3
 8006a66:	69ba      	ldr	r2, [r7, #24]
 8006a68:	4013      	ands	r3, r2
 8006a6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	091b      	lsrs	r3, r3, #4
 8006a72:	f003 0201 	and.w	r2, r3, #1
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7c:	69ba      	ldr	r2, [r7, #24]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	69ba      	ldr	r2, [r7, #24]
 8006a86:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	005b      	lsls	r3, r3, #1
 8006a92:	2203      	movs	r2, #3
 8006a94:	fa02 f303 	lsl.w	r3, r2, r3
 8006a98:	43db      	mvns	r3, r3
 8006a9a:	69ba      	ldr	r2, [r7, #24]
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	689a      	ldr	r2, [r3, #8]
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	005b      	lsls	r3, r3, #1
 8006aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8006aac:	69ba      	ldr	r2, [r7, #24]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	69ba      	ldr	r2, [r7, #24]
 8006ab6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d003      	beq.n	8006ac8 <HAL_GPIO_Init+0xfc>
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	2b12      	cmp	r3, #18
 8006ac6:	d123      	bne.n	8006b10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	08da      	lsrs	r2, r3, #3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	3208      	adds	r2, #8
 8006ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	f003 0307 	and.w	r3, r3, #7
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	220f      	movs	r2, #15
 8006ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae4:	43db      	mvns	r3, r3
 8006ae6:	69ba      	ldr	r2, [r7, #24]
 8006ae8:	4013      	ands	r3, r2
 8006aea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	691a      	ldr	r2, [r3, #16]
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	f003 0307 	and.w	r3, r3, #7
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	fa02 f303 	lsl.w	r3, r2, r3
 8006afc:	69ba      	ldr	r2, [r7, #24]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	08da      	lsrs	r2, r3, #3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	3208      	adds	r2, #8
 8006b0a:	69b9      	ldr	r1, [r7, #24]
 8006b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	005b      	lsls	r3, r3, #1
 8006b1a:	2203      	movs	r2, #3
 8006b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b20:	43db      	mvns	r3, r3
 8006b22:	69ba      	ldr	r2, [r7, #24]
 8006b24:	4013      	ands	r3, r2
 8006b26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	f003 0203 	and.w	r2, r3, #3
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	005b      	lsls	r3, r3, #1
 8006b34:	fa02 f303 	lsl.w	r3, r2, r3
 8006b38:	69ba      	ldr	r2, [r7, #24]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	69ba      	ldr	r2, [r7, #24]
 8006b42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f000 80b4 	beq.w	8006cba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b52:	2300      	movs	r3, #0
 8006b54:	60fb      	str	r3, [r7, #12]
 8006b56:	4b5f      	ldr	r3, [pc, #380]	; (8006cd4 <HAL_GPIO_Init+0x308>)
 8006b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b5a:	4a5e      	ldr	r2, [pc, #376]	; (8006cd4 <HAL_GPIO_Init+0x308>)
 8006b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b60:	6453      	str	r3, [r2, #68]	; 0x44
 8006b62:	4b5c      	ldr	r3, [pc, #368]	; (8006cd4 <HAL_GPIO_Init+0x308>)
 8006b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b6e:	4a5a      	ldr	r2, [pc, #360]	; (8006cd8 <HAL_GPIO_Init+0x30c>)
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	089b      	lsrs	r3, r3, #2
 8006b74:	3302      	adds	r3, #2
 8006b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	f003 0303 	and.w	r3, r3, #3
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	220f      	movs	r2, #15
 8006b86:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8a:	43db      	mvns	r3, r3
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	4013      	ands	r3, r2
 8006b90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a51      	ldr	r2, [pc, #324]	; (8006cdc <HAL_GPIO_Init+0x310>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d02b      	beq.n	8006bf2 <HAL_GPIO_Init+0x226>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a50      	ldr	r2, [pc, #320]	; (8006ce0 <HAL_GPIO_Init+0x314>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d025      	beq.n	8006bee <HAL_GPIO_Init+0x222>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a4f      	ldr	r2, [pc, #316]	; (8006ce4 <HAL_GPIO_Init+0x318>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d01f      	beq.n	8006bea <HAL_GPIO_Init+0x21e>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a4e      	ldr	r2, [pc, #312]	; (8006ce8 <HAL_GPIO_Init+0x31c>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d019      	beq.n	8006be6 <HAL_GPIO_Init+0x21a>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a4d      	ldr	r2, [pc, #308]	; (8006cec <HAL_GPIO_Init+0x320>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d013      	beq.n	8006be2 <HAL_GPIO_Init+0x216>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a4c      	ldr	r2, [pc, #304]	; (8006cf0 <HAL_GPIO_Init+0x324>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d00d      	beq.n	8006bde <HAL_GPIO_Init+0x212>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a4b      	ldr	r2, [pc, #300]	; (8006cf4 <HAL_GPIO_Init+0x328>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d007      	beq.n	8006bda <HAL_GPIO_Init+0x20e>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a4a      	ldr	r2, [pc, #296]	; (8006cf8 <HAL_GPIO_Init+0x32c>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d101      	bne.n	8006bd6 <HAL_GPIO_Init+0x20a>
 8006bd2:	2307      	movs	r3, #7
 8006bd4:	e00e      	b.n	8006bf4 <HAL_GPIO_Init+0x228>
 8006bd6:	2308      	movs	r3, #8
 8006bd8:	e00c      	b.n	8006bf4 <HAL_GPIO_Init+0x228>
 8006bda:	2306      	movs	r3, #6
 8006bdc:	e00a      	b.n	8006bf4 <HAL_GPIO_Init+0x228>
 8006bde:	2305      	movs	r3, #5
 8006be0:	e008      	b.n	8006bf4 <HAL_GPIO_Init+0x228>
 8006be2:	2304      	movs	r3, #4
 8006be4:	e006      	b.n	8006bf4 <HAL_GPIO_Init+0x228>
 8006be6:	2303      	movs	r3, #3
 8006be8:	e004      	b.n	8006bf4 <HAL_GPIO_Init+0x228>
 8006bea:	2302      	movs	r3, #2
 8006bec:	e002      	b.n	8006bf4 <HAL_GPIO_Init+0x228>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e000      	b.n	8006bf4 <HAL_GPIO_Init+0x228>
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	69fa      	ldr	r2, [r7, #28]
 8006bf6:	f002 0203 	and.w	r2, r2, #3
 8006bfa:	0092      	lsls	r2, r2, #2
 8006bfc:	4093      	lsls	r3, r2
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c04:	4934      	ldr	r1, [pc, #208]	; (8006cd8 <HAL_GPIO_Init+0x30c>)
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	089b      	lsrs	r3, r3, #2
 8006c0a:	3302      	adds	r3, #2
 8006c0c:	69ba      	ldr	r2, [r7, #24]
 8006c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006c12:	4b3a      	ldr	r3, [pc, #232]	; (8006cfc <HAL_GPIO_Init+0x330>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	43db      	mvns	r3, r3
 8006c1c:	69ba      	ldr	r2, [r7, #24]
 8006c1e:	4013      	ands	r3, r2
 8006c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d003      	beq.n	8006c36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006c2e:	69ba      	ldr	r2, [r7, #24]
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c36:	4a31      	ldr	r2, [pc, #196]	; (8006cfc <HAL_GPIO_Init+0x330>)
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006c3c:	4b2f      	ldr	r3, [pc, #188]	; (8006cfc <HAL_GPIO_Init+0x330>)
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	43db      	mvns	r3, r3
 8006c46:	69ba      	ldr	r2, [r7, #24]
 8006c48:	4013      	ands	r3, r2
 8006c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d003      	beq.n	8006c60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006c58:	69ba      	ldr	r2, [r7, #24]
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006c60:	4a26      	ldr	r2, [pc, #152]	; (8006cfc <HAL_GPIO_Init+0x330>)
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006c66:	4b25      	ldr	r3, [pc, #148]	; (8006cfc <HAL_GPIO_Init+0x330>)
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	43db      	mvns	r3, r3
 8006c70:	69ba      	ldr	r2, [r7, #24]
 8006c72:	4013      	ands	r3, r2
 8006c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006c82:	69ba      	ldr	r2, [r7, #24]
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006c8a:	4a1c      	ldr	r2, [pc, #112]	; (8006cfc <HAL_GPIO_Init+0x330>)
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006c90:	4b1a      	ldr	r3, [pc, #104]	; (8006cfc <HAL_GPIO_Init+0x330>)
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	43db      	mvns	r3, r3
 8006c9a:	69ba      	ldr	r2, [r7, #24]
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d003      	beq.n	8006cb4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006cac:	69ba      	ldr	r2, [r7, #24]
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006cb4:	4a11      	ldr	r2, [pc, #68]	; (8006cfc <HAL_GPIO_Init+0x330>)
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	61fb      	str	r3, [r7, #28]
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	2b0f      	cmp	r3, #15
 8006cc4:	f67f ae90 	bls.w	80069e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006cc8:	bf00      	nop
 8006cca:	3724      	adds	r7, #36	; 0x24
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	40023800 	.word	0x40023800
 8006cd8:	40013800 	.word	0x40013800
 8006cdc:	40020000 	.word	0x40020000
 8006ce0:	40020400 	.word	0x40020400
 8006ce4:	40020800 	.word	0x40020800
 8006ce8:	40020c00 	.word	0x40020c00
 8006cec:	40021000 	.word	0x40021000
 8006cf0:	40021400 	.word	0x40021400
 8006cf4:	40021800 	.word	0x40021800
 8006cf8:	40021c00 	.word	0x40021c00
 8006cfc:	40013c00 	.word	0x40013c00

08006d00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	460b      	mov	r3, r1
 8006d0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	691a      	ldr	r2, [r3, #16]
 8006d10:	887b      	ldrh	r3, [r7, #2]
 8006d12:	4013      	ands	r3, r2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d002      	beq.n	8006d1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	73fb      	strb	r3, [r7, #15]
 8006d1c:	e001      	b.n	8006d22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	460b      	mov	r3, r1
 8006d3a:	807b      	strh	r3, [r7, #2]
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006d40:	787b      	ldrb	r3, [r7, #1]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d003      	beq.n	8006d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d46:	887a      	ldrh	r2, [r7, #2]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006d4c:	e003      	b.n	8006d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006d4e:	887b      	ldrh	r3, [r7, #2]
 8006d50:	041a      	lsls	r2, r3, #16
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	619a      	str	r2, [r3, #24]
}
 8006d56:	bf00      	nop
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b083      	sub	sp, #12
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	695a      	ldr	r2, [r3, #20]
 8006d72:	887b      	ldrh	r3, [r7, #2]
 8006d74:	401a      	ands	r2, r3
 8006d76:	887b      	ldrh	r3, [r7, #2]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d104      	bne.n	8006d86 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006d7c:	887b      	ldrh	r3, [r7, #2]
 8006d7e:	041a      	lsls	r2, r3, #16
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8006d84:	e002      	b.n	8006d8c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8006d86:	887a      	ldrh	r2, [r7, #2]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	619a      	str	r2, [r3, #24]
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e11f      	b.n	8006fea <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d106      	bne.n	8006dc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f7fc ff10 	bl	8003be4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2224      	movs	r2, #36	; 0x24
 8006dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f022 0201 	bic.w	r2, r2, #1
 8006dda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006dea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006dfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006dfc:	f004 fac8 	bl	800b390 <HAL_RCC_GetPCLK1Freq>
 8006e00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	4a7b      	ldr	r2, [pc, #492]	; (8006ff4 <HAL_I2C_Init+0x25c>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d807      	bhi.n	8006e1c <HAL_I2C_Init+0x84>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	4a7a      	ldr	r2, [pc, #488]	; (8006ff8 <HAL_I2C_Init+0x260>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	bf94      	ite	ls
 8006e14:	2301      	movls	r3, #1
 8006e16:	2300      	movhi	r3, #0
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	e006      	b.n	8006e2a <HAL_I2C_Init+0x92>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4a77      	ldr	r2, [pc, #476]	; (8006ffc <HAL_I2C_Init+0x264>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	bf94      	ite	ls
 8006e24:	2301      	movls	r3, #1
 8006e26:	2300      	movhi	r3, #0
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d001      	beq.n	8006e32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e0db      	b.n	8006fea <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	4a72      	ldr	r2, [pc, #456]	; (8007000 <HAL_I2C_Init+0x268>)
 8006e36:	fba2 2303 	umull	r2, r3, r2, r3
 8006e3a:	0c9b      	lsrs	r3, r3, #18
 8006e3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	4a64      	ldr	r2, [pc, #400]	; (8006ff4 <HAL_I2C_Init+0x25c>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d802      	bhi.n	8006e6c <HAL_I2C_Init+0xd4>
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	e009      	b.n	8006e80 <HAL_I2C_Init+0xe8>
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006e72:	fb02 f303 	mul.w	r3, r2, r3
 8006e76:	4a63      	ldr	r2, [pc, #396]	; (8007004 <HAL_I2C_Init+0x26c>)
 8006e78:	fba2 2303 	umull	r2, r3, r2, r3
 8006e7c:	099b      	lsrs	r3, r3, #6
 8006e7e:	3301      	adds	r3, #1
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	6812      	ldr	r2, [r2, #0]
 8006e84:	430b      	orrs	r3, r1
 8006e86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	69db      	ldr	r3, [r3, #28]
 8006e8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006e92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	4956      	ldr	r1, [pc, #344]	; (8006ff4 <HAL_I2C_Init+0x25c>)
 8006e9c:	428b      	cmp	r3, r1
 8006e9e:	d80d      	bhi.n	8006ebc <HAL_I2C_Init+0x124>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	1e59      	subs	r1, r3, #1
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	005b      	lsls	r3, r3, #1
 8006eaa:	fbb1 f3f3 	udiv	r3, r1, r3
 8006eae:	3301      	adds	r3, #1
 8006eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006eb4:	2b04      	cmp	r3, #4
 8006eb6:	bf38      	it	cc
 8006eb8:	2304      	movcc	r3, #4
 8006eba:	e04f      	b.n	8006f5c <HAL_I2C_Init+0x1c4>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d111      	bne.n	8006ee8 <HAL_I2C_Init+0x150>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	1e58      	subs	r0, r3, #1
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6859      	ldr	r1, [r3, #4]
 8006ecc:	460b      	mov	r3, r1
 8006ece:	005b      	lsls	r3, r3, #1
 8006ed0:	440b      	add	r3, r1
 8006ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	bf0c      	ite	eq
 8006ee0:	2301      	moveq	r3, #1
 8006ee2:	2300      	movne	r3, #0
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	e012      	b.n	8006f0e <HAL_I2C_Init+0x176>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	1e58      	subs	r0, r3, #1
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6859      	ldr	r1, [r3, #4]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	440b      	add	r3, r1
 8006ef6:	0099      	lsls	r1, r3, #2
 8006ef8:	440b      	add	r3, r1
 8006efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8006efe:	3301      	adds	r3, #1
 8006f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	bf0c      	ite	eq
 8006f08:	2301      	moveq	r3, #1
 8006f0a:	2300      	movne	r3, #0
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <HAL_I2C_Init+0x17e>
 8006f12:	2301      	movs	r3, #1
 8006f14:	e022      	b.n	8006f5c <HAL_I2C_Init+0x1c4>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10e      	bne.n	8006f3c <HAL_I2C_Init+0x1a4>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	1e58      	subs	r0, r3, #1
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6859      	ldr	r1, [r3, #4]
 8006f26:	460b      	mov	r3, r1
 8006f28:	005b      	lsls	r3, r3, #1
 8006f2a:	440b      	add	r3, r1
 8006f2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f30:	3301      	adds	r3, #1
 8006f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f3a:	e00f      	b.n	8006f5c <HAL_I2C_Init+0x1c4>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	1e58      	subs	r0, r3, #1
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6859      	ldr	r1, [r3, #4]
 8006f44:	460b      	mov	r3, r1
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	440b      	add	r3, r1
 8006f4a:	0099      	lsls	r1, r3, #2
 8006f4c:	440b      	add	r3, r1
 8006f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f52:	3301      	adds	r3, #1
 8006f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f5c:	6879      	ldr	r1, [r7, #4]
 8006f5e:	6809      	ldr	r1, [r1, #0]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	69da      	ldr	r2, [r3, #28]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a1b      	ldr	r3, [r3, #32]
 8006f76:	431a      	orrs	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006f8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	6911      	ldr	r1, [r2, #16]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	68d2      	ldr	r2, [r2, #12]
 8006f96:	4311      	orrs	r1, r2
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	6812      	ldr	r2, [r2, #0]
 8006f9c:	430b      	orrs	r3, r1
 8006f9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	695a      	ldr	r2, [r3, #20]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f042 0201 	orr.w	r2, r2, #1
 8006fca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	000186a0 	.word	0x000186a0
 8006ff8:	001e847f 	.word	0x001e847f
 8006ffc:	003d08ff 	.word	0x003d08ff
 8007000:	431bde83 	.word	0x431bde83
 8007004:	10624dd3 	.word	0x10624dd3

08007008 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b088      	sub	sp, #32
 800700c:	af02      	add	r7, sp, #8
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	607a      	str	r2, [r7, #4]
 8007012:	461a      	mov	r2, r3
 8007014:	460b      	mov	r3, r1
 8007016:	817b      	strh	r3, [r7, #10]
 8007018:	4613      	mov	r3, r2
 800701a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800701c:	f7ff f87e 	bl	800611c <HAL_GetTick>
 8007020:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007028:	b2db      	uxtb	r3, r3
 800702a:	2b20      	cmp	r3, #32
 800702c:	f040 80e0 	bne.w	80071f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	2319      	movs	r3, #25
 8007036:	2201      	movs	r2, #1
 8007038:	4970      	ldr	r1, [pc, #448]	; (80071fc <HAL_I2C_Master_Transmit+0x1f4>)
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f002 f9f5 	bl	800942a <I2C_WaitOnFlagUntilTimeout>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007046:	2302      	movs	r3, #2
 8007048:	e0d3      	b.n	80071f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007050:	2b01      	cmp	r3, #1
 8007052:	d101      	bne.n	8007058 <HAL_I2C_Master_Transmit+0x50>
 8007054:	2302      	movs	r3, #2
 8007056:	e0cc      	b.n	80071f2 <HAL_I2C_Master_Transmit+0x1ea>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0301 	and.w	r3, r3, #1
 800706a:	2b01      	cmp	r3, #1
 800706c:	d007      	beq.n	800707e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f042 0201 	orr.w	r2, r2, #1
 800707c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800708c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2221      	movs	r2, #33	; 0x21
 8007092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2210      	movs	r2, #16
 800709a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	893a      	ldrh	r2, [r7, #8]
 80070ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070b4:	b29a      	uxth	r2, r3
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	4a50      	ldr	r2, [pc, #320]	; (8007200 <HAL_I2C_Master_Transmit+0x1f8>)
 80070be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80070c0:	8979      	ldrh	r1, [r7, #10]
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	6a3a      	ldr	r2, [r7, #32]
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f001 ffc8 	bl	800905c <I2C_MasterRequestWrite>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d001      	beq.n	80070d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e08d      	b.n	80071f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070d6:	2300      	movs	r3, #0
 80070d8:	613b      	str	r3, [r7, #16]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	695b      	ldr	r3, [r3, #20]
 80070e0:	613b      	str	r3, [r7, #16]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	613b      	str	r3, [r7, #16]
 80070ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80070ec:	e066      	b.n	80071bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	6a39      	ldr	r1, [r7, #32]
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f002 fa6f 	bl	80095d6 <I2C_WaitOnTXEFlagUntilTimeout>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00d      	beq.n	800711a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007102:	2b04      	cmp	r3, #4
 8007104:	d107      	bne.n	8007116 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007114:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e06b      	b.n	80071f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711e:	781a      	ldrb	r2, [r3, #0]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712a:	1c5a      	adds	r2, r3, #1
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007134:	b29b      	uxth	r3, r3
 8007136:	3b01      	subs	r3, #1
 8007138:	b29a      	uxth	r2, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007142:	3b01      	subs	r3, #1
 8007144:	b29a      	uxth	r2, r3
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	695b      	ldr	r3, [r3, #20]
 8007150:	f003 0304 	and.w	r3, r3, #4
 8007154:	2b04      	cmp	r3, #4
 8007156:	d11b      	bne.n	8007190 <HAL_I2C_Master_Transmit+0x188>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800715c:	2b00      	cmp	r3, #0
 800715e:	d017      	beq.n	8007190 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007164:	781a      	ldrb	r2, [r3, #0]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007170:	1c5a      	adds	r2, r3, #1
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800717a:	b29b      	uxth	r3, r3
 800717c:	3b01      	subs	r3, #1
 800717e:	b29a      	uxth	r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007188:	3b01      	subs	r3, #1
 800718a:	b29a      	uxth	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	6a39      	ldr	r1, [r7, #32]
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f002 fa5f 	bl	8009658 <I2C_WaitOnBTFFlagUntilTimeout>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00d      	beq.n	80071bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a4:	2b04      	cmp	r3, #4
 80071a6:	d107      	bne.n	80071b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e01a      	b.n	80071f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d194      	bne.n	80070ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2220      	movs	r2, #32
 80071d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80071ec:	2300      	movs	r3, #0
 80071ee:	e000      	b.n	80071f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80071f0:	2302      	movs	r3, #2
  }
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3718      	adds	r7, #24
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	00100002 	.word	0x00100002
 8007200:	ffff0000 	.word	0xffff0000

08007204 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b08c      	sub	sp, #48	; 0x30
 8007208:	af02      	add	r7, sp, #8
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	4608      	mov	r0, r1
 800720e:	4611      	mov	r1, r2
 8007210:	461a      	mov	r2, r3
 8007212:	4603      	mov	r3, r0
 8007214:	817b      	strh	r3, [r7, #10]
 8007216:	460b      	mov	r3, r1
 8007218:	813b      	strh	r3, [r7, #8]
 800721a:	4613      	mov	r3, r2
 800721c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800721e:	f7fe ff7d 	bl	800611c <HAL_GetTick>
 8007222:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800722a:	b2db      	uxtb	r3, r3
 800722c:	2b20      	cmp	r3, #32
 800722e:	f040 8208 	bne.w	8007642 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	2319      	movs	r3, #25
 8007238:	2201      	movs	r2, #1
 800723a:	497b      	ldr	r1, [pc, #492]	; (8007428 <HAL_I2C_Mem_Read+0x224>)
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f002 f8f4 	bl	800942a <I2C_WaitOnFlagUntilTimeout>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d001      	beq.n	800724c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007248:	2302      	movs	r3, #2
 800724a:	e1fb      	b.n	8007644 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007252:	2b01      	cmp	r3, #1
 8007254:	d101      	bne.n	800725a <HAL_I2C_Mem_Read+0x56>
 8007256:	2302      	movs	r3, #2
 8007258:	e1f4      	b.n	8007644 <HAL_I2C_Mem_Read+0x440>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2201      	movs	r2, #1
 800725e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0301 	and.w	r3, r3, #1
 800726c:	2b01      	cmp	r3, #1
 800726e:	d007      	beq.n	8007280 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f042 0201 	orr.w	r2, r2, #1
 800727e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800728e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2222      	movs	r2, #34	; 0x22
 8007294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2240      	movs	r2, #64	; 0x40
 800729c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80072b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	4a5b      	ldr	r2, [pc, #364]	; (800742c <HAL_I2C_Mem_Read+0x228>)
 80072c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072c2:	88f8      	ldrh	r0, [r7, #6]
 80072c4:	893a      	ldrh	r2, [r7, #8]
 80072c6:	8979      	ldrh	r1, [r7, #10]
 80072c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ca:	9301      	str	r3, [sp, #4]
 80072cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	4603      	mov	r3, r0
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f001 ff44 	bl	8009160 <I2C_RequestMemoryRead>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e1b0      	b.n	8007644 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d113      	bne.n	8007312 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072ea:	2300      	movs	r3, #0
 80072ec:	623b      	str	r3, [r7, #32]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	623b      	str	r3, [r7, #32]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	623b      	str	r3, [r7, #32]
 80072fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800730e:	601a      	str	r2, [r3, #0]
 8007310:	e184      	b.n	800761c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007316:	2b01      	cmp	r3, #1
 8007318:	d11b      	bne.n	8007352 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007328:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800732a:	2300      	movs	r3, #0
 800732c:	61fb      	str	r3, [r7, #28]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	695b      	ldr	r3, [r3, #20]
 8007334:	61fb      	str	r3, [r7, #28]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	61fb      	str	r3, [r7, #28]
 800733e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800734e:	601a      	str	r2, [r3, #0]
 8007350:	e164      	b.n	800761c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007356:	2b02      	cmp	r3, #2
 8007358:	d11b      	bne.n	8007392 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007368:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007378:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800737a:	2300      	movs	r3, #0
 800737c:	61bb      	str	r3, [r7, #24]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	695b      	ldr	r3, [r3, #20]
 8007384:	61bb      	str	r3, [r7, #24]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	61bb      	str	r3, [r7, #24]
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	e144      	b.n	800761c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007392:	2300      	movs	r3, #0
 8007394:	617b      	str	r3, [r7, #20]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	695b      	ldr	r3, [r3, #20]
 800739c:	617b      	str	r3, [r7, #20]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	617b      	str	r3, [r7, #20]
 80073a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80073a8:	e138      	b.n	800761c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ae:	2b03      	cmp	r3, #3
 80073b0:	f200 80f1 	bhi.w	8007596 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d123      	bne.n	8007404 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	f002 f98a 	bl	80096da <I2C_WaitOnRXNEFlagUntilTimeout>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e139      	b.n	8007644 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	691a      	ldr	r2, [r3, #16]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073da:	b2d2      	uxtb	r2, r2
 80073dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e2:	1c5a      	adds	r2, r3, #1
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ec:	3b01      	subs	r3, #1
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	3b01      	subs	r3, #1
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007402:	e10b      	b.n	800761c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007408:	2b02      	cmp	r3, #2
 800740a:	d14e      	bne.n	80074aa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740e:	9300      	str	r3, [sp, #0]
 8007410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007412:	2200      	movs	r2, #0
 8007414:	4906      	ldr	r1, [pc, #24]	; (8007430 <HAL_I2C_Mem_Read+0x22c>)
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f002 f807 	bl	800942a <I2C_WaitOnFlagUntilTimeout>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d008      	beq.n	8007434 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e10e      	b.n	8007644 <HAL_I2C_Mem_Read+0x440>
 8007426:	bf00      	nop
 8007428:	00100002 	.word	0x00100002
 800742c:	ffff0000 	.word	0xffff0000
 8007430:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007442:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	691a      	ldr	r2, [r3, #16]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744e:	b2d2      	uxtb	r2, r2
 8007450:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007456:	1c5a      	adds	r2, r3, #1
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007460:	3b01      	subs	r3, #1
 8007462:	b29a      	uxth	r2, r3
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800746c:	b29b      	uxth	r3, r3
 800746e:	3b01      	subs	r3, #1
 8007470:	b29a      	uxth	r2, r3
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	691a      	ldr	r2, [r3, #16]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007480:	b2d2      	uxtb	r2, r2
 8007482:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007488:	1c5a      	adds	r2, r3, #1
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007492:	3b01      	subs	r3, #1
 8007494:	b29a      	uxth	r2, r3
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800749e:	b29b      	uxth	r3, r3
 80074a0:	3b01      	subs	r3, #1
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80074a8:	e0b8      	b.n	800761c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b0:	2200      	movs	r2, #0
 80074b2:	4966      	ldr	r1, [pc, #408]	; (800764c <HAL_I2C_Mem_Read+0x448>)
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f001 ffb8 	bl	800942a <I2C_WaitOnFlagUntilTimeout>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d001      	beq.n	80074c4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e0bf      	b.n	8007644 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	691a      	ldr	r2, [r3, #16]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074de:	b2d2      	uxtb	r2, r2
 80074e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e6:	1c5a      	adds	r2, r3, #1
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074f0:	3b01      	subs	r3, #1
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	3b01      	subs	r3, #1
 8007500:	b29a      	uxth	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007508:	9300      	str	r3, [sp, #0]
 800750a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800750c:	2200      	movs	r2, #0
 800750e:	494f      	ldr	r1, [pc, #316]	; (800764c <HAL_I2C_Mem_Read+0x448>)
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f001 ff8a 	bl	800942a <I2C_WaitOnFlagUntilTimeout>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d001      	beq.n	8007520 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e091      	b.n	8007644 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800752e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	691a      	ldr	r2, [r3, #16]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753a:	b2d2      	uxtb	r2, r2
 800753c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007542:	1c5a      	adds	r2, r3, #1
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800754c:	3b01      	subs	r3, #1
 800754e:	b29a      	uxth	r2, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007558:	b29b      	uxth	r3, r3
 800755a:	3b01      	subs	r3, #1
 800755c:	b29a      	uxth	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	691a      	ldr	r2, [r3, #16]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756c:	b2d2      	uxtb	r2, r2
 800756e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007574:	1c5a      	adds	r2, r3, #1
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800757e:	3b01      	subs	r3, #1
 8007580:	b29a      	uxth	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800758a:	b29b      	uxth	r3, r3
 800758c:	3b01      	subs	r3, #1
 800758e:	b29a      	uxth	r2, r3
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007594:	e042      	b.n	800761c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007598:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f002 f89d 	bl	80096da <I2C_WaitOnRXNEFlagUntilTimeout>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d001      	beq.n	80075aa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e04c      	b.n	8007644 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	691a      	ldr	r2, [r3, #16]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b4:	b2d2      	uxtb	r2, r2
 80075b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075bc:	1c5a      	adds	r2, r3, #1
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075c6:	3b01      	subs	r3, #1
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	3b01      	subs	r3, #1
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	695b      	ldr	r3, [r3, #20]
 80075e2:	f003 0304 	and.w	r3, r3, #4
 80075e6:	2b04      	cmp	r3, #4
 80075e8:	d118      	bne.n	800761c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	691a      	ldr	r2, [r3, #16]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f4:	b2d2      	uxtb	r2, r2
 80075f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fc:	1c5a      	adds	r2, r3, #1
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007606:	3b01      	subs	r3, #1
 8007608:	b29a      	uxth	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007612:	b29b      	uxth	r3, r3
 8007614:	3b01      	subs	r3, #1
 8007616:	b29a      	uxth	r2, r3
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007620:	2b00      	cmp	r3, #0
 8007622:	f47f aec2 	bne.w	80073aa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2220      	movs	r2, #32
 800762a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800763e:	2300      	movs	r3, #0
 8007640:	e000      	b.n	8007644 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007642:	2302      	movs	r3, #2
  }
}
 8007644:	4618      	mov	r0, r3
 8007646:	3728      	adds	r7, #40	; 0x28
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}
 800764c:	00010004 	.word	0x00010004

08007650 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8007650:	b480      	push	{r7}
 8007652:	b087      	sub	sp, #28
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	607a      	str	r2, [r7, #4]
 800765a:	461a      	mov	r2, r3
 800765c:	460b      	mov	r3, r1
 800765e:	817b      	strh	r3, [r7, #10]
 8007660:	4613      	mov	r3, r2
 8007662:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 8007664:	2300      	movs	r3, #0
 8007666:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 8007668:	2300      	movs	r3, #0
 800766a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007672:	b2db      	uxtb	r3, r3
 8007674:	2b20      	cmp	r3, #32
 8007676:	f040 809e 	bne.w	80077b6 <HAL_I2C_Master_Seq_Transmit_IT+0x166>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800767a:	6a3b      	ldr	r3, [r7, #32]
 800767c:	2b08      	cmp	r3, #8
 800767e:	d002      	beq.n	8007686 <HAL_I2C_Master_Seq_Transmit_IT+0x36>
 8007680:	6a3b      	ldr	r3, [r7, #32]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d130      	bne.n	80076e8 <HAL_I2C_Master_Seq_Transmit_IT+0x98>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8007686:	4b4f      	ldr	r3, [pc, #316]	; (80077c4 <HAL_I2C_Master_Seq_Transmit_IT+0x174>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	08db      	lsrs	r3, r3, #3
 800768c:	4a4e      	ldr	r2, [pc, #312]	; (80077c8 <HAL_I2C_Master_Seq_Transmit_IT+0x178>)
 800768e:	fba2 2303 	umull	r2, r3, r2, r3
 8007692:	0a1a      	lsrs	r2, r3, #8
 8007694:	4613      	mov	r3, r2
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4413      	add	r3, r2
 800769a:	009a      	lsls	r2, r3, #2
 800769c:	4413      	add	r3, r2
 800769e:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	3b01      	subs	r3, #1
 80076a4:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d116      	bne.n	80076da <HAL_I2C_Master_Seq_Transmit_IT+0x8a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2220      	movs	r2, #32
 80076b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c6:	f043 0220 	orr.w	r2, r3, #32
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e06e      	b.n	80077b8 <HAL_I2C_Master_Seq_Transmit_IT+0x168>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	699b      	ldr	r3, [r3, #24]
 80076e0:	f003 0302 	and.w	r3, r3, #2
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d0db      	beq.n	80076a0 <HAL_I2C_Master_Seq_Transmit_IT+0x50>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d101      	bne.n	80076f6 <HAL_I2C_Master_Seq_Transmit_IT+0xa6>
 80076f2:	2302      	movs	r3, #2
 80076f4:	e060      	b.n	80077b8 <HAL_I2C_Master_Seq_Transmit_IT+0x168>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0301 	and.w	r3, r3, #1
 8007708:	2b01      	cmp	r3, #1
 800770a:	d007      	beq.n	800771c <HAL_I2C_Master_Seq_Transmit_IT+0xcc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f042 0201 	orr.w	r2, r2, #1
 800771a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800772a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2221      	movs	r2, #33	; 0x21
 8007730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2210      	movs	r2, #16
 8007738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	893a      	ldrh	r2, [r7, #8]
 800774c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007752:	b29a      	uxth	r2, r3
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6a3a      	ldr	r2, [r7, #32]
 800775c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800775e:	897a      	ldrh	r2, [r7, #10]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007768:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	2b11      	cmp	r3, #17
 800776e:	d10c      	bne.n	800778a <HAL_I2C_Master_Seq_Transmit_IT+0x13a>
 8007770:	6a3b      	ldr	r3, [r7, #32]
 8007772:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007776:	d003      	beq.n	8007780 <HAL_I2C_Master_Seq_Transmit_IT+0x130>
 8007778:	6a3b      	ldr	r3, [r7, #32]
 800777a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800777e:	d101      	bne.n	8007784 <HAL_I2C_Master_Seq_Transmit_IT+0x134>
 8007780:	2301      	movs	r3, #1
 8007782:	e000      	b.n	8007786 <HAL_I2C_Master_Seq_Transmit_IT+0x136>
 8007784:	2300      	movs	r3, #0
 8007786:	2b01      	cmp	r3, #1
 8007788:	d107      	bne.n	800779a <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007798:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80077b0:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80077b2:	2300      	movs	r3, #0
 80077b4:	e000      	b.n	80077b8 <HAL_I2C_Master_Seq_Transmit_IT+0x168>
  }
  else
  {
    return HAL_BUSY;
 80077b6:	2302      	movs	r3, #2
  }
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	371c      	adds	r7, #28
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr
 80077c4:	20000040 	.word	0x20000040
 80077c8:	14f8b589 	.word	0x14f8b589

080077cc <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b089      	sub	sp, #36	; 0x24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	607a      	str	r2, [r7, #4]
 80077d6:	461a      	mov	r2, r3
 80077d8:	460b      	mov	r3, r1
 80077da:	817b      	strh	r3, [r7, #10]
 80077dc:	4613      	mov	r3, r2
 80077de:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 80077e0:	2300      	movs	r3, #0
 80077e2:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80077e4:	2300      	movs	r3, #0
 80077e6:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80077e8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80077ec:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b20      	cmp	r3, #32
 80077f8:	f040 80d2 	bne.w	80079a0 <HAL_I2C_Master_Seq_Receive_IT+0x1d4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 80077fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fe:	2b08      	cmp	r3, #8
 8007800:	d002      	beq.n	8007808 <HAL_I2C_Master_Seq_Receive_IT+0x3c>
 8007802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007804:	2b01      	cmp	r3, #1
 8007806:	d130      	bne.n	800786a <HAL_I2C_Master_Seq_Receive_IT+0x9e>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8007808:	4b69      	ldr	r3, [pc, #420]	; (80079b0 <HAL_I2C_Master_Seq_Receive_IT+0x1e4>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	08db      	lsrs	r3, r3, #3
 800780e:	4a69      	ldr	r2, [pc, #420]	; (80079b4 <HAL_I2C_Master_Seq_Receive_IT+0x1e8>)
 8007810:	fba2 2303 	umull	r2, r3, r2, r3
 8007814:	0a1a      	lsrs	r2, r3, #8
 8007816:	4613      	mov	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	4413      	add	r3, r2
 800781c:	009a      	lsls	r2, r3, #2
 800781e:	4413      	add	r3, r2
 8007820:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	3b01      	subs	r3, #1
 8007826:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d116      	bne.n	800785c <HAL_I2C_Master_Seq_Receive_IT+0x90>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2220      	movs	r2, #32
 8007838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007848:	f043 0220 	orr.w	r2, r3, #32
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e0a2      	b.n	80079a2 <HAL_I2C_Master_Seq_Receive_IT+0x1d6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	699b      	ldr	r3, [r3, #24]
 8007862:	f003 0302 	and.w	r3, r3, #2
 8007866:	2b02      	cmp	r3, #2
 8007868:	d0db      	beq.n	8007822 <HAL_I2C_Master_Seq_Receive_IT+0x56>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007870:	2b01      	cmp	r3, #1
 8007872:	d101      	bne.n	8007878 <HAL_I2C_Master_Seq_Receive_IT+0xac>
 8007874:	2302      	movs	r3, #2
 8007876:	e094      	b.n	80079a2 <HAL_I2C_Master_Seq_Receive_IT+0x1d6>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 0301 	and.w	r3, r3, #1
 800788a:	2b01      	cmp	r3, #1
 800788c:	d007      	beq.n	800789e <HAL_I2C_Master_Seq_Receive_IT+0xd2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f042 0201 	orr.w	r2, r2, #1
 800789c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078ac:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2222      	movs	r2, #34	; 0x22
 80078b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2210      	movs	r2, #16
 80078ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	893a      	ldrh	r2, [r7, #8]
 80078ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078de:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80078e0:	897a      	ldrh	r2, [r7, #10]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ea:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d126      	bne.n	8007944 <HAL_I2C_Master_Seq_Receive_IT+0x178>
 80078f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f8:	2b20      	cmp	r3, #32
 80078fa:	d002      	beq.n	8007902 <HAL_I2C_Master_Seq_Receive_IT+0x136>
 80078fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fe:	2b10      	cmp	r3, #16
 8007900:	d120      	bne.n	8007944 <HAL_I2C_Master_Seq_Receive_IT+0x178>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	2b12      	cmp	r3, #18
 8007906:	d114      	bne.n	8007932 <HAL_I2C_Master_Seq_Receive_IT+0x166>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007916:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007926:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800792e:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8007930:	e010      	b.n	8007954 <HAL_I2C_Master_Seq_Receive_IT+0x188>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007940:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 8007942:	e007      	b.n	8007954 <HAL_I2C_Master_Seq_Receive_IT+0x188>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007952:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	2b12      	cmp	r3, #18
 8007958:	d10c      	bne.n	8007974 <HAL_I2C_Master_Seq_Receive_IT+0x1a8>
 800795a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007960:	d003      	beq.n	800796a <HAL_I2C_Master_Seq_Receive_IT+0x19e>
 8007962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007964:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007968:	d101      	bne.n	800796e <HAL_I2C_Master_Seq_Receive_IT+0x1a2>
 800796a:	2301      	movs	r3, #1
 800796c:	e000      	b.n	8007970 <HAL_I2C_Master_Seq_Receive_IT+0x1a4>
 800796e:	2300      	movs	r3, #0
 8007970:	2b01      	cmp	r3, #1
 8007972:	d107      	bne.n	8007984 <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007982:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2200      	movs	r2, #0
 8007988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	6859      	ldr	r1, [r3, #4]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	69fa      	ldr	r2, [r7, #28]
 8007998:	430a      	orrs	r2, r1
 800799a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800799c:	2300      	movs	r3, #0
 800799e:	e000      	b.n	80079a2 <HAL_I2C_Master_Seq_Receive_IT+0x1d6>
  }
  else
  {
    return HAL_BUSY;
 80079a0:	2302      	movs	r3, #2
  }
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3724      	adds	r7, #36	; 0x24
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop
 80079b0:	20000040 	.word	0x20000040
 80079b4:	14f8b589 	.word	0x14f8b589

080079b8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b088      	sub	sp, #32
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80079c0:	2300      	movs	r3, #0
 80079c2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079d8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079e0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80079e2:	7bfb      	ldrb	r3, [r7, #15]
 80079e4:	2b10      	cmp	r3, #16
 80079e6:	d003      	beq.n	80079f0 <HAL_I2C_EV_IRQHandler+0x38>
 80079e8:	7bfb      	ldrb	r3, [r7, #15]
 80079ea:	2b40      	cmp	r3, #64	; 0x40
 80079ec:	f040 80b6 	bne.w	8007b5c <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10d      	bne.n	8007a26 <HAL_I2C_EV_IRQHandler+0x6e>
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007a10:	d003      	beq.n	8007a1a <HAL_I2C_EV_IRQHandler+0x62>
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007a18:	d101      	bne.n	8007a1e <HAL_I2C_EV_IRQHandler+0x66>
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e000      	b.n	8007a20 <HAL_I2C_EV_IRQHandler+0x68>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	f000 8127 	beq.w	8007c74 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	f003 0301 	and.w	r3, r3, #1
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00c      	beq.n	8007a4a <HAL_I2C_EV_IRQHandler+0x92>
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	0a5b      	lsrs	r3, r3, #9
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d006      	beq.n	8007a4a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f001 fed1 	bl	80097e4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fcf8 	bl	8008438 <I2C_Master_SB>
 8007a48:	e087      	b.n	8007b5a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	08db      	lsrs	r3, r3, #3
 8007a4e:	f003 0301 	and.w	r3, r3, #1
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d009      	beq.n	8007a6a <HAL_I2C_EV_IRQHandler+0xb2>
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	0a5b      	lsrs	r3, r3, #9
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d003      	beq.n	8007a6a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fd6e 	bl	8008544 <I2C_Master_ADD10>
 8007a68:	e077      	b.n	8007b5a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	085b      	lsrs	r3, r3, #1
 8007a6e:	f003 0301 	and.w	r3, r3, #1
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d009      	beq.n	8007a8a <HAL_I2C_EV_IRQHandler+0xd2>
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	0a5b      	lsrs	r3, r3, #9
 8007a7a:	f003 0301 	and.w	r3, r3, #1
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 fd88 	bl	8008598 <I2C_Master_ADDR>
 8007a88:	e067      	b.n	8007b5a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	089b      	lsrs	r3, r3, #2
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d030      	beq.n	8007af8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007aa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007aa4:	f000 80e8 	beq.w	8007c78 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	09db      	lsrs	r3, r3, #7
 8007aac:	f003 0301 	and.w	r3, r3, #1
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00f      	beq.n	8007ad4 <HAL_I2C_EV_IRQHandler+0x11c>
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	0a9b      	lsrs	r3, r3, #10
 8007ab8:	f003 0301 	and.w	r3, r3, #1
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d009      	beq.n	8007ad4 <HAL_I2C_EV_IRQHandler+0x11c>
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	089b      	lsrs	r3, r3, #2
 8007ac4:	f003 0301 	and.w	r3, r3, #1
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d103      	bne.n	8007ad4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 f9c4 	bl	8007e5a <I2C_MasterTransmit_TXE>
 8007ad2:	e042      	b.n	8007b5a <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	089b      	lsrs	r3, r3, #2
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 80cb 	beq.w	8007c78 <HAL_I2C_EV_IRQHandler+0x2c0>
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	0a5b      	lsrs	r3, r3, #9
 8007ae6:	f003 0301 	and.w	r3, r3, #1
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	f000 80c4 	beq.w	8007c78 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 fa4e 	bl	8007f92 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007af6:	e0bf      	b.n	8007c78 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b06:	f000 80b7 	beq.w	8007c78 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	099b      	lsrs	r3, r3, #6
 8007b0e:	f003 0301 	and.w	r3, r3, #1
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00f      	beq.n	8007b36 <HAL_I2C_EV_IRQHandler+0x17e>
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	0a9b      	lsrs	r3, r3, #10
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d009      	beq.n	8007b36 <HAL_I2C_EV_IRQHandler+0x17e>
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	089b      	lsrs	r3, r3, #2
 8007b26:	f003 0301 	and.w	r3, r3, #1
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d103      	bne.n	8007b36 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fb16 	bl	8008160 <I2C_MasterReceive_RXNE>
 8007b34:	e011      	b.n	8007b5a <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	089b      	lsrs	r3, r3, #2
 8007b3a:	f003 0301 	and.w	r3, r3, #1
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f000 809a 	beq.w	8007c78 <HAL_I2C_EV_IRQHandler+0x2c0>
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	0a5b      	lsrs	r3, r3, #9
 8007b48:	f003 0301 	and.w	r3, r3, #1
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f000 8093 	beq.w	8007c78 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 fb86 	bl	8008264 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007b58:	e08e      	b.n	8007c78 <HAL_I2C_EV_IRQHandler+0x2c0>
 8007b5a:	e08d      	b.n	8007c78 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d004      	beq.n	8007b6e <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	695b      	ldr	r3, [r3, #20]
 8007b6a:	61fb      	str	r3, [r7, #28]
 8007b6c:	e007      	b.n	8007b7e <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	695b      	ldr	r3, [r3, #20]
 8007b7c:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	085b      	lsrs	r3, r3, #1
 8007b82:	f003 0301 	and.w	r3, r3, #1
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d012      	beq.n	8007bb0 <HAL_I2C_EV_IRQHandler+0x1f8>
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	0a5b      	lsrs	r3, r3, #9
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00c      	beq.n	8007bb0 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d003      	beq.n	8007ba6 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007ba6:	69b9      	ldr	r1, [r7, #24]
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 ff44 	bl	8008a36 <I2C_Slave_ADDR>
 8007bae:	e066      	b.n	8007c7e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	091b      	lsrs	r3, r3, #4
 8007bb4:	f003 0301 	and.w	r3, r3, #1
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d009      	beq.n	8007bd0 <HAL_I2C_EV_IRQHandler+0x218>
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	0a5b      	lsrs	r3, r3, #9
 8007bc0:	f003 0301 	and.w	r3, r3, #1
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d003      	beq.n	8007bd0 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 ff79 	bl	8008ac0 <I2C_Slave_STOPF>
 8007bce:	e056      	b.n	8007c7e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007bd0:	7bbb      	ldrb	r3, [r7, #14]
 8007bd2:	2b21      	cmp	r3, #33	; 0x21
 8007bd4:	d002      	beq.n	8007bdc <HAL_I2C_EV_IRQHandler+0x224>
 8007bd6:	7bbb      	ldrb	r3, [r7, #14]
 8007bd8:	2b29      	cmp	r3, #41	; 0x29
 8007bda:	d125      	bne.n	8007c28 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	09db      	lsrs	r3, r3, #7
 8007be0:	f003 0301 	and.w	r3, r3, #1
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00f      	beq.n	8007c08 <HAL_I2C_EV_IRQHandler+0x250>
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	0a9b      	lsrs	r3, r3, #10
 8007bec:	f003 0301 	and.w	r3, r3, #1
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d009      	beq.n	8007c08 <HAL_I2C_EV_IRQHandler+0x250>
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	089b      	lsrs	r3, r3, #2
 8007bf8:	f003 0301 	and.w	r3, r3, #1
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d103      	bne.n	8007c08 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 fe5a 	bl	80088ba <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007c06:	e039      	b.n	8007c7c <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	089b      	lsrs	r3, r3, #2
 8007c0c:	f003 0301 	and.w	r3, r3, #1
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d033      	beq.n	8007c7c <HAL_I2C_EV_IRQHandler+0x2c4>
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	0a5b      	lsrs	r3, r3, #9
 8007c18:	f003 0301 	and.w	r3, r3, #1
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d02d      	beq.n	8007c7c <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 fe87 	bl	8008934 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007c26:	e029      	b.n	8007c7c <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	099b      	lsrs	r3, r3, #6
 8007c2c:	f003 0301 	and.w	r3, r3, #1
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00f      	beq.n	8007c54 <HAL_I2C_EV_IRQHandler+0x29c>
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	0a9b      	lsrs	r3, r3, #10
 8007c38:	f003 0301 	and.w	r3, r3, #1
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d009      	beq.n	8007c54 <HAL_I2C_EV_IRQHandler+0x29c>
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	089b      	lsrs	r3, r3, #2
 8007c44:	f003 0301 	and.w	r3, r3, #1
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d103      	bne.n	8007c54 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fe92 	bl	8008976 <I2C_SlaveReceive_RXNE>
 8007c52:	e014      	b.n	8007c7e <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	089b      	lsrs	r3, r3, #2
 8007c58:	f003 0301 	and.w	r3, r3, #1
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00e      	beq.n	8007c7e <HAL_I2C_EV_IRQHandler+0x2c6>
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	0a5b      	lsrs	r3, r3, #9
 8007c64:	f003 0301 	and.w	r3, r3, #1
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d008      	beq.n	8007c7e <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fec0 	bl	80089f2 <I2C_SlaveReceive_BTF>
 8007c72:	e004      	b.n	8007c7e <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8007c74:	bf00      	nop
 8007c76:	e002      	b.n	8007c7e <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c78:	bf00      	nop
 8007c7a:	e000      	b.n	8007c7e <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007c7c:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007c7e:	3720      	adds	r7, #32
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b08a      	sub	sp, #40	; 0x28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ca6:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007ca8:	6a3b      	ldr	r3, [r7, #32]
 8007caa:	0a1b      	lsrs	r3, r3, #8
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d00e      	beq.n	8007cd2 <HAL_I2C_ER_IRQHandler+0x4e>
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	0a1b      	lsrs	r3, r3, #8
 8007cb8:	f003 0301 	and.w	r3, r3, #1
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d008      	beq.n	8007cd2 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc2:	f043 0301 	orr.w	r3, r3, #1
 8007cc6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007cd0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	0a5b      	lsrs	r3, r3, #9
 8007cd6:	f003 0301 	and.w	r3, r3, #1
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00e      	beq.n	8007cfc <HAL_I2C_ER_IRQHandler+0x78>
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	0a1b      	lsrs	r3, r3, #8
 8007ce2:	f003 0301 	and.w	r3, r3, #1
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d008      	beq.n	8007cfc <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cec:	f043 0302 	orr.w	r3, r3, #2
 8007cf0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8007cfa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007cfc:	6a3b      	ldr	r3, [r7, #32]
 8007cfe:	0a9b      	lsrs	r3, r3, #10
 8007d00:	f003 0301 	and.w	r3, r3, #1
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d03f      	beq.n	8007d88 <HAL_I2C_ER_IRQHandler+0x104>
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	0a1b      	lsrs	r3, r3, #8
 8007d0c:	f003 0301 	and.w	r3, r3, #1
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d039      	beq.n	8007d88 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8007d14:	7efb      	ldrb	r3, [r7, #27]
 8007d16:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d26:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d2c:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007d2e:	7ebb      	ldrb	r3, [r7, #26]
 8007d30:	2b20      	cmp	r3, #32
 8007d32:	d112      	bne.n	8007d5a <HAL_I2C_ER_IRQHandler+0xd6>
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10f      	bne.n	8007d5a <HAL_I2C_ER_IRQHandler+0xd6>
 8007d3a:	7cfb      	ldrb	r3, [r7, #19]
 8007d3c:	2b21      	cmp	r3, #33	; 0x21
 8007d3e:	d008      	beq.n	8007d52 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007d40:	7cfb      	ldrb	r3, [r7, #19]
 8007d42:	2b29      	cmp	r3, #41	; 0x29
 8007d44:	d005      	beq.n	8007d52 <HAL_I2C_ER_IRQHandler+0xce>
 8007d46:	7cfb      	ldrb	r3, [r7, #19]
 8007d48:	2b28      	cmp	r3, #40	; 0x28
 8007d4a:	d106      	bne.n	8007d5a <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2b21      	cmp	r3, #33	; 0x21
 8007d50:	d103      	bne.n	8007d5a <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 ffe4 	bl	8008d20 <I2C_Slave_AF>
 8007d58:	e016      	b.n	8007d88 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007d62:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d66:	f043 0304 	orr.w	r3, r3, #4
 8007d6a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007d6c:	7efb      	ldrb	r3, [r7, #27]
 8007d6e:	2b10      	cmp	r3, #16
 8007d70:	d002      	beq.n	8007d78 <HAL_I2C_ER_IRQHandler+0xf4>
 8007d72:	7efb      	ldrb	r3, [r7, #27]
 8007d74:	2b40      	cmp	r3, #64	; 0x40
 8007d76:	d107      	bne.n	8007d88 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d86:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007d88:	6a3b      	ldr	r3, [r7, #32]
 8007d8a:	0adb      	lsrs	r3, r3, #11
 8007d8c:	f003 0301 	and.w	r3, r3, #1
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00e      	beq.n	8007db2 <HAL_I2C_ER_IRQHandler+0x12e>
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	0a1b      	lsrs	r3, r3, #8
 8007d98:	f003 0301 	and.w	r3, r3, #1
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d008      	beq.n	8007db2 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	f043 0308 	orr.w	r3, r3, #8
 8007da6:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8007db0:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d008      	beq.n	8007dca <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	431a      	orrs	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f001 f81b 	bl	8008e00 <I2C_ITError>
  }
}
 8007dca:	bf00      	nop
 8007dcc:	3728      	adds	r7, #40	; 0x28
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b083      	sub	sp, #12
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007dda:	bf00      	nop
 8007ddc:	370c      	adds	r7, #12
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b083      	sub	sp, #12
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007dee:	bf00      	nop
 8007df0:	370c      	adds	r7, #12
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b083      	sub	sp, #12
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
 8007e02:	460b      	mov	r3, r1
 8007e04:	70fb      	strb	r3, [r7, #3]
 8007e06:	4613      	mov	r3, r2
 8007e08:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007e0a:	bf00      	nop
 8007e0c:	370c      	adds	r7, #12
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr

08007e16 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007e16:	b480      	push	{r7}
 8007e18:	b083      	sub	sp, #12
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007e1e:	bf00      	nop
 8007e20:	370c      	adds	r7, #12
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr

08007e2a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007e2a:	b480      	push	{r7}
 8007e2c:	b083      	sub	sp, #12
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007e32:	bf00      	nop
 8007e34:	370c      	adds	r7, #12
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr

08007e3e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007e3e:	b480      	push	{r7}
 8007e40:	b083      	sub	sp, #12
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e4c:	b2db      	uxtb	r3, r3
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	370c      	adds	r7, #12
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr

08007e5a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b084      	sub	sp, #16
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e68:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e70:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e76:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d150      	bne.n	8007f22 <I2C_MasterTransmit_TXE+0xc8>
 8007e80:	7bfb      	ldrb	r3, [r7, #15]
 8007e82:	2b21      	cmp	r3, #33	; 0x21
 8007e84:	d14d      	bne.n	8007f22 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	2b08      	cmp	r3, #8
 8007e8a:	d01d      	beq.n	8007ec8 <I2C_MasterTransmit_TXE+0x6e>
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	2b20      	cmp	r3, #32
 8007e90:	d01a      	beq.n	8007ec8 <I2C_MasterTransmit_TXE+0x6e>
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007e98:	d016      	beq.n	8007ec8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	685a      	ldr	r2, [r3, #4]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007ea8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2211      	movs	r2, #17
 8007eae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2220      	movs	r2, #32
 8007ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f7fc fe9b 	bl	8004bfc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007ec6:	e060      	b.n	8007f8a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	685a      	ldr	r2, [r3, #4]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007ed6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ee6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2220      	movs	r2, #32
 8007ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b40      	cmp	r3, #64	; 0x40
 8007f00:	d107      	bne.n	8007f12 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7ff ff8d 	bl	8007e2a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007f10:	e03b      	b.n	8007f8a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7fc fe6e 	bl	8004bfc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007f20:	e033      	b.n	8007f8a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007f22:	7bfb      	ldrb	r3, [r7, #15]
 8007f24:	2b21      	cmp	r3, #33	; 0x21
 8007f26:	d005      	beq.n	8007f34 <I2C_MasterTransmit_TXE+0xda>
 8007f28:	7bbb      	ldrb	r3, [r7, #14]
 8007f2a:	2b40      	cmp	r3, #64	; 0x40
 8007f2c:	d12d      	bne.n	8007f8a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007f2e:	7bfb      	ldrb	r3, [r7, #15]
 8007f30:	2b22      	cmp	r3, #34	; 0x22
 8007f32:	d12a      	bne.n	8007f8a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d108      	bne.n	8007f50 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	685a      	ldr	r2, [r3, #4]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f4c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007f4e:	e01c      	b.n	8007f8a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	2b40      	cmp	r3, #64	; 0x40
 8007f5a:	d103      	bne.n	8007f64 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 f898 	bl	8008092 <I2C_MemoryTransmit_TXE_BTF>
}
 8007f62:	e012      	b.n	8007f8a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f68:	781a      	ldrb	r2, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f74:	1c5a      	adds	r2, r3, #1
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	3b01      	subs	r3, #1
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007f88:	e7ff      	b.n	8007f8a <I2C_MasterTransmit_TXE+0x130>
 8007f8a:	bf00      	nop
 8007f8c:	3710      	adds	r7, #16
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b084      	sub	sp, #16
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2b21      	cmp	r3, #33	; 0x21
 8007faa:	d165      	bne.n	8008078 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d012      	beq.n	8007fdc <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fba:	781a      	ldrb	r2, [r3, #0]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc6:	1c5a      	adds	r2, r3, #1
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	b29a      	uxth	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007fda:	e056      	b.n	800808a <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2b08      	cmp	r3, #8
 8007fe0:	d01d      	beq.n	800801e <I2C_MasterTransmit_BTF+0x8c>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2b20      	cmp	r3, #32
 8007fe6:	d01a      	beq.n	800801e <I2C_MasterTransmit_BTF+0x8c>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007fee:	d016      	beq.n	800801e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	685a      	ldr	r2, [r3, #4]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007ffe:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2211      	movs	r2, #17
 8008004:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2220      	movs	r2, #32
 8008012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f7fc fdf0 	bl	8004bfc <HAL_I2C_MasterTxCpltCallback>
}
 800801c:	e035      	b.n	800808a <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	685a      	ldr	r2, [r3, #4]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800802c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800803c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2220      	movs	r2, #32
 8008048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008052:	b2db      	uxtb	r3, r3
 8008054:	2b40      	cmp	r3, #64	; 0x40
 8008056:	d107      	bne.n	8008068 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f7ff fee2 	bl	8007e2a <HAL_I2C_MemTxCpltCallback>
}
 8008066:	e010      	b.n	800808a <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f7fc fdc3 	bl	8004bfc <HAL_I2C_MasterTxCpltCallback>
}
 8008076:	e008      	b.n	800808a <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800807e:	b2db      	uxtb	r3, r3
 8008080:	2b40      	cmp	r3, #64	; 0x40
 8008082:	d102      	bne.n	800808a <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 f804 	bl	8008092 <I2C_MemoryTransmit_TXE_BTF>
}
 800808a:	bf00      	nop
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8008092:	b480      	push	{r7}
 8008094:	b083      	sub	sp, #12
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d11d      	bne.n	80080de <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d10b      	bne.n	80080c2 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080ae:	b2da      	uxtb	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ba:	1c9a      	adds	r2, r3, #2
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80080c0:	e048      	b.n	8008154 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	121b      	asrs	r3, r3, #8
 80080ca:	b2da      	uxtb	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080d6:	1c5a      	adds	r2, r3, #1
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	651a      	str	r2, [r3, #80]	; 0x50
}
 80080dc:	e03a      	b.n	8008154 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d10b      	bne.n	80080fe <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080ea:	b2da      	uxtb	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080f6:	1c5a      	adds	r2, r3, #1
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80080fc:	e02a      	b.n	8008154 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008102:	2b02      	cmp	r3, #2
 8008104:	d126      	bne.n	8008154 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b22      	cmp	r3, #34	; 0x22
 8008110:	d108      	bne.n	8008124 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008120:	601a      	str	r2, [r3, #0]
}
 8008122:	e017      	b.n	8008154 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800812a:	b2db      	uxtb	r3, r3
 800812c:	2b21      	cmp	r3, #33	; 0x21
 800812e:	d111      	bne.n	8008154 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008134:	781a      	ldrb	r2, [r3, #0]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008140:	1c5a      	adds	r2, r3, #1
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800814a:	b29b      	uxth	r3, r3
 800814c:	3b01      	subs	r3, #1
 800814e:	b29a      	uxth	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008154:	bf00      	nop
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800816e:	b2db      	uxtb	r3, r3
 8008170:	2b22      	cmp	r3, #34	; 0x22
 8008172:	d173      	bne.n	800825c <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008178:	b29b      	uxth	r3, r3
 800817a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2b03      	cmp	r3, #3
 8008180:	d920      	bls.n	80081c4 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	691a      	ldr	r2, [r3, #16]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818c:	b2d2      	uxtb	r2, r2
 800818e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008194:	1c5a      	adds	r2, r3, #1
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800819e:	b29b      	uxth	r3, r3
 80081a0:	3b01      	subs	r3, #1
 80081a2:	b29a      	uxth	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	2b03      	cmp	r3, #3
 80081b0:	d154      	bne.n	800825c <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	685a      	ldr	r2, [r3, #4]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081c0:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80081c2:	e04b      	b.n	800825c <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d047      	beq.n	800825c <I2C_MasterReceive_RXNE+0xfc>
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d002      	beq.n	80081d8 <I2C_MasterReceive_RXNE+0x78>
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d141      	bne.n	800825c <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081e6:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	685a      	ldr	r2, [r3, #4]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80081f6:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	691a      	ldr	r2, [r3, #16]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008202:	b2d2      	uxtb	r2, r2
 8008204:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820a:	1c5a      	adds	r2, r3, #1
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008214:	b29b      	uxth	r3, r3
 8008216:	3b01      	subs	r3, #1
 8008218:	b29a      	uxth	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2220      	movs	r2, #32
 8008222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800822c:	b2db      	uxtb	r3, r3
 800822e:	2b40      	cmp	r3, #64	; 0x40
 8008230:	d10a      	bne.n	8008248 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f7fc fcd1 	bl	8004be8 <HAL_I2C_MemRxCpltCallback>
}
 8008246:	e009      	b.n	800825c <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2212      	movs	r2, #18
 8008254:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f7fc fce6 	bl	8004c28 <HAL_I2C_MasterRxCpltCallback>
}
 800825c:	bf00      	nop
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008270:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008276:	b29b      	uxth	r3, r3
 8008278:	2b04      	cmp	r3, #4
 800827a:	d11b      	bne.n	80082b4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	685a      	ldr	r2, [r3, #4]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800828a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	691a      	ldr	r2, [r3, #16]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008296:	b2d2      	uxtb	r2, r2
 8008298:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829e:	1c5a      	adds	r2, r3, #1
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	3b01      	subs	r3, #1
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80082b2:	e0bd      	b.n	8008430 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d129      	bne.n	8008312 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	685a      	ldr	r2, [r3, #4]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082cc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2b04      	cmp	r3, #4
 80082d2:	d00a      	beq.n	80082ea <I2C_MasterReceive_BTF+0x86>
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2b02      	cmp	r3, #2
 80082d8:	d007      	beq.n	80082ea <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082e8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	691a      	ldr	r2, [r3, #16]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f4:	b2d2      	uxtb	r2, r2
 80082f6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fc:	1c5a      	adds	r2, r3, #1
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008306:	b29b      	uxth	r3, r3
 8008308:	3b01      	subs	r3, #1
 800830a:	b29a      	uxth	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008310:	e08e      	b.n	8008430 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008316:	b29b      	uxth	r3, r3
 8008318:	2b02      	cmp	r3, #2
 800831a:	d176      	bne.n	800840a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2b01      	cmp	r3, #1
 8008320:	d002      	beq.n	8008328 <I2C_MasterReceive_BTF+0xc4>
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2b10      	cmp	r3, #16
 8008326:	d108      	bne.n	800833a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008336:	601a      	str	r2, [r3, #0]
 8008338:	e019      	b.n	800836e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2b04      	cmp	r3, #4
 800833e:	d002      	beq.n	8008346 <I2C_MasterReceive_BTF+0xe2>
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2b02      	cmp	r3, #2
 8008344:	d108      	bne.n	8008358 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008354:	601a      	str	r2, [r3, #0]
 8008356:	e00a      	b.n	800836e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2b10      	cmp	r3, #16
 800835c:	d007      	beq.n	800836e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800836c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	691a      	ldr	r2, [r3, #16]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008378:	b2d2      	uxtb	r2, r2
 800837a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008380:	1c5a      	adds	r2, r3, #1
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800838a:	b29b      	uxth	r3, r3
 800838c:	3b01      	subs	r3, #1
 800838e:	b29a      	uxth	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	691a      	ldr	r2, [r3, #16]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839e:	b2d2      	uxtb	r2, r2
 80083a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a6:	1c5a      	adds	r2, r3, #1
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	3b01      	subs	r3, #1
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	685a      	ldr	r2, [r3, #4]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80083c8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2220      	movs	r2, #32
 80083ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	2b40      	cmp	r3, #64	; 0x40
 80083dc:	d10a      	bne.n	80083f4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f7fc fbfb 	bl	8004be8 <HAL_I2C_MemRxCpltCallback>
}
 80083f2:	e01d      	b.n	8008430 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2212      	movs	r2, #18
 8008400:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f7fc fc10 	bl	8004c28 <HAL_I2C_MasterRxCpltCallback>
}
 8008408:	e012      	b.n	8008430 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	691a      	ldr	r2, [r3, #16]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008414:	b2d2      	uxtb	r2, r2
 8008416:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841c:	1c5a      	adds	r2, r3, #1
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008426:	b29b      	uxth	r3, r3
 8008428:	3b01      	subs	r3, #1
 800842a:	b29a      	uxth	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008430:	bf00      	nop
 8008432:	3710      	adds	r7, #16
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008446:	b2db      	uxtb	r3, r3
 8008448:	2b40      	cmp	r3, #64	; 0x40
 800844a:	d117      	bne.n	800847c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008450:	2b00      	cmp	r3, #0
 8008452:	d109      	bne.n	8008468 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008458:	b2db      	uxtb	r3, r3
 800845a:	461a      	mov	r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008464:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8008466:	e067      	b.n	8008538 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800846c:	b2db      	uxtb	r3, r3
 800846e:	f043 0301 	orr.w	r3, r3, #1
 8008472:	b2da      	uxtb	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	611a      	str	r2, [r3, #16]
}
 800847a:	e05d      	b.n	8008538 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008484:	d133      	bne.n	80084ee <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800848c:	b2db      	uxtb	r3, r3
 800848e:	2b21      	cmp	r3, #33	; 0x21
 8008490:	d109      	bne.n	80084a6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008496:	b2db      	uxtb	r3, r3
 8008498:	461a      	mov	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80084a2:	611a      	str	r2, [r3, #16]
 80084a4:	e008      	b.n	80084b8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	f043 0301 	orr.w	r3, r3, #1
 80084b0:	b2da      	uxtb	r2, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d004      	beq.n	80084ca <I2C_Master_SB+0x92>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d108      	bne.n	80084dc <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d032      	beq.n	8008538 <I2C_Master_SB+0x100>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d02d      	beq.n	8008538 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	685a      	ldr	r2, [r3, #4]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084ea:	605a      	str	r2, [r3, #4]
}
 80084ec:	e024      	b.n	8008538 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d10e      	bne.n	8008514 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	11db      	asrs	r3, r3, #7
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	f003 0306 	and.w	r3, r3, #6
 8008504:	b2db      	uxtb	r3, r3
 8008506:	f063 030f 	orn	r3, r3, #15
 800850a:	b2da      	uxtb	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	611a      	str	r2, [r3, #16]
}
 8008512:	e011      	b.n	8008538 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008518:	2b01      	cmp	r3, #1
 800851a:	d10d      	bne.n	8008538 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008520:	b29b      	uxth	r3, r3
 8008522:	11db      	asrs	r3, r3, #7
 8008524:	b2db      	uxtb	r3, r3
 8008526:	f003 0306 	and.w	r3, r3, #6
 800852a:	b2db      	uxtb	r3, r3
 800852c:	f063 030e 	orn	r3, r3, #14
 8008530:	b2da      	uxtb	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	611a      	str	r2, [r3, #16]
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008550:	b2da      	uxtb	r2, r3
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800855c:	2b00      	cmp	r3, #0
 800855e:	d103      	bne.n	8008568 <I2C_Master_ADD10+0x24>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008564:	2b00      	cmp	r3, #0
 8008566:	d011      	beq.n	800858c <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800856c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800856e:	2b00      	cmp	r3, #0
 8008570:	d104      	bne.n	800857c <I2C_Master_ADD10+0x38>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008578:	2b00      	cmp	r3, #0
 800857a:	d007      	beq.n	800858c <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	685a      	ldr	r2, [r3, #4]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800858a:	605a      	str	r2, [r3, #4]
    }
  }
}
 800858c:	bf00      	nop
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8008598:	b480      	push	{r7}
 800859a:	b091      	sub	sp, #68	; 0x44
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ae:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	2b22      	cmp	r3, #34	; 0x22
 80085c0:	f040 8169 	bne.w	8008896 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d10f      	bne.n	80085ec <I2C_Master_ADDR+0x54>
 80085cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80085d0:	2b40      	cmp	r3, #64	; 0x40
 80085d2:	d10b      	bne.n	80085ec <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085d4:	2300      	movs	r3, #0
 80085d6:	633b      	str	r3, [r7, #48]	; 0x30
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	695b      	ldr	r3, [r3, #20]
 80085de:	633b      	str	r3, [r7, #48]	; 0x30
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	699b      	ldr	r3, [r3, #24]
 80085e6:	633b      	str	r3, [r7, #48]	; 0x30
 80085e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ea:	e160      	b.n	80088ae <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d11d      	bne.n	8008630 <I2C_Master_ADDR+0x98>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	691b      	ldr	r3, [r3, #16]
 80085f8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80085fc:	d118      	bne.n	8008630 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085fe:	2300      	movs	r3, #0
 8008600:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	695b      	ldr	r3, [r3, #20]
 8008608:	62fb      	str	r3, [r7, #44]	; 0x2c
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	699b      	ldr	r3, [r3, #24]
 8008610:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008612:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008622:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008628:	1c5a      	adds	r2, r3, #1
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	651a      	str	r2, [r3, #80]	; 0x50
 800862e:	e13e      	b.n	80088ae <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008634:	b29b      	uxth	r3, r3
 8008636:	2b00      	cmp	r3, #0
 8008638:	d113      	bne.n	8008662 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800863a:	2300      	movs	r3, #0
 800863c:	62bb      	str	r3, [r7, #40]	; 0x28
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	695b      	ldr	r3, [r3, #20]
 8008644:	62bb      	str	r3, [r7, #40]	; 0x28
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	699b      	ldr	r3, [r3, #24]
 800864c:	62bb      	str	r3, [r7, #40]	; 0x28
 800864e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800865e:	601a      	str	r2, [r3, #0]
 8008660:	e115      	b.n	800888e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008666:	b29b      	uxth	r3, r3
 8008668:	2b01      	cmp	r3, #1
 800866a:	f040 808a 	bne.w	8008782 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800866e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008670:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008674:	d137      	bne.n	80086e6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008684:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008690:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008694:	d113      	bne.n	80086be <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086a4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086a6:	2300      	movs	r3, #0
 80086a8:	627b      	str	r3, [r7, #36]	; 0x24
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	695b      	ldr	r3, [r3, #20]
 80086b0:	627b      	str	r3, [r7, #36]	; 0x24
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	699b      	ldr	r3, [r3, #24]
 80086b8:	627b      	str	r3, [r7, #36]	; 0x24
 80086ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086bc:	e0e7      	b.n	800888e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086be:	2300      	movs	r3, #0
 80086c0:	623b      	str	r3, [r7, #32]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	695b      	ldr	r3, [r3, #20]
 80086c8:	623b      	str	r3, [r7, #32]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	623b      	str	r3, [r7, #32]
 80086d2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086e2:	601a      	str	r2, [r3, #0]
 80086e4:	e0d3      	b.n	800888e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80086e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e8:	2b08      	cmp	r3, #8
 80086ea:	d02e      	beq.n	800874a <I2C_Master_ADDR+0x1b2>
 80086ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ee:	2b20      	cmp	r3, #32
 80086f0:	d02b      	beq.n	800874a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80086f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086f4:	2b12      	cmp	r3, #18
 80086f6:	d102      	bne.n	80086fe <I2C_Master_ADDR+0x166>
 80086f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d125      	bne.n	800874a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80086fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008700:	2b04      	cmp	r3, #4
 8008702:	d00e      	beq.n	8008722 <I2C_Master_ADDR+0x18a>
 8008704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008706:	2b02      	cmp	r3, #2
 8008708:	d00b      	beq.n	8008722 <I2C_Master_ADDR+0x18a>
 800870a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870c:	2b10      	cmp	r3, #16
 800870e:	d008      	beq.n	8008722 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800871e:	601a      	str	r2, [r3, #0]
 8008720:	e007      	b.n	8008732 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008730:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008732:	2300      	movs	r3, #0
 8008734:	61fb      	str	r3, [r7, #28]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	695b      	ldr	r3, [r3, #20]
 800873c:	61fb      	str	r3, [r7, #28]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	61fb      	str	r3, [r7, #28]
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	e0a1      	b.n	800888e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008758:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800875a:	2300      	movs	r3, #0
 800875c:	61bb      	str	r3, [r7, #24]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	695b      	ldr	r3, [r3, #20]
 8008764:	61bb      	str	r3, [r7, #24]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	699b      	ldr	r3, [r3, #24]
 800876c:	61bb      	str	r3, [r7, #24]
 800876e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800877e:	601a      	str	r2, [r3, #0]
 8008780:	e085      	b.n	800888e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008786:	b29b      	uxth	r3, r3
 8008788:	2b02      	cmp	r3, #2
 800878a:	d14d      	bne.n	8008828 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800878c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878e:	2b04      	cmp	r3, #4
 8008790:	d016      	beq.n	80087c0 <I2C_Master_ADDR+0x228>
 8008792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008794:	2b02      	cmp	r3, #2
 8008796:	d013      	beq.n	80087c0 <I2C_Master_ADDR+0x228>
 8008798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879a:	2b10      	cmp	r3, #16
 800879c:	d010      	beq.n	80087c0 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087ac:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087bc:	601a      	str	r2, [r3, #0]
 80087be:	e007      	b.n	80087d0 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80087ce:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087de:	d117      	bne.n	8008810 <I2C_Master_ADDR+0x278>
 80087e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80087e6:	d00b      	beq.n	8008800 <I2C_Master_ADDR+0x268>
 80087e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d008      	beq.n	8008800 <I2C_Master_ADDR+0x268>
 80087ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f0:	2b08      	cmp	r3, #8
 80087f2:	d005      	beq.n	8008800 <I2C_Master_ADDR+0x268>
 80087f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f6:	2b10      	cmp	r3, #16
 80087f8:	d002      	beq.n	8008800 <I2C_Master_ADDR+0x268>
 80087fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fc:	2b20      	cmp	r3, #32
 80087fe:	d107      	bne.n	8008810 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	685a      	ldr	r2, [r3, #4]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800880e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008810:	2300      	movs	r3, #0
 8008812:	617b      	str	r3, [r7, #20]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	695b      	ldr	r3, [r3, #20]
 800881a:	617b      	str	r3, [r7, #20]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	699b      	ldr	r3, [r3, #24]
 8008822:	617b      	str	r3, [r7, #20]
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	e032      	b.n	800888e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008836:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008842:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008846:	d117      	bne.n	8008878 <I2C_Master_ADDR+0x2e0>
 8008848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800884e:	d00b      	beq.n	8008868 <I2C_Master_ADDR+0x2d0>
 8008850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008852:	2b01      	cmp	r3, #1
 8008854:	d008      	beq.n	8008868 <I2C_Master_ADDR+0x2d0>
 8008856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008858:	2b08      	cmp	r3, #8
 800885a:	d005      	beq.n	8008868 <I2C_Master_ADDR+0x2d0>
 800885c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800885e:	2b10      	cmp	r3, #16
 8008860:	d002      	beq.n	8008868 <I2C_Master_ADDR+0x2d0>
 8008862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008864:	2b20      	cmp	r3, #32
 8008866:	d107      	bne.n	8008878 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	685a      	ldr	r2, [r3, #4]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008876:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008878:	2300      	movs	r3, #0
 800887a:	613b      	str	r3, [r7, #16]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	695b      	ldr	r3, [r3, #20]
 8008882:	613b      	str	r3, [r7, #16]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	699b      	ldr	r3, [r3, #24]
 800888a:	613b      	str	r3, [r7, #16]
 800888c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008894:	e00b      	b.n	80088ae <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008896:	2300      	movs	r3, #0
 8008898:	60fb      	str	r3, [r7, #12]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	695b      	ldr	r3, [r3, #20]
 80088a0:	60fb      	str	r3, [r7, #12]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	699b      	ldr	r3, [r3, #24]
 80088a8:	60fb      	str	r3, [r7, #12]
 80088aa:	68fb      	ldr	r3, [r7, #12]
}
 80088ac:	e7ff      	b.n	80088ae <I2C_Master_ADDR+0x316>
 80088ae:	bf00      	nop
 80088b0:	3744      	adds	r7, #68	; 0x44
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr

080088ba <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b084      	sub	sp, #16
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088c8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d02b      	beq.n	800892c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d8:	781a      	ldrb	r2, [r3, #0]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e4:	1c5a      	adds	r2, r3, #1
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	3b01      	subs	r3, #1
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d114      	bne.n	800892c <I2C_SlaveTransmit_TXE+0x72>
 8008902:	7bfb      	ldrb	r3, [r7, #15]
 8008904:	2b29      	cmp	r3, #41	; 0x29
 8008906:	d111      	bne.n	800892c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	685a      	ldr	r2, [r3, #4]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008916:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2221      	movs	r2, #33	; 0x21
 800891c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2228      	movs	r2, #40	; 0x28
 8008922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f7ff fa53 	bl	8007dd2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800892c:	bf00      	nop
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008940:	b29b      	uxth	r3, r3
 8008942:	2b00      	cmp	r3, #0
 8008944:	d011      	beq.n	800896a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894a:	781a      	ldrb	r2, [r3, #0]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008956:	1c5a      	adds	r2, r3, #1
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008960:	b29b      	uxth	r3, r3
 8008962:	3b01      	subs	r3, #1
 8008964:	b29a      	uxth	r2, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800896a:	bf00      	nop
 800896c:	370c      	adds	r7, #12
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b084      	sub	sp, #16
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008984:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800898a:	b29b      	uxth	r3, r3
 800898c:	2b00      	cmp	r3, #0
 800898e:	d02c      	beq.n	80089ea <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	691a      	ldr	r2, [r3, #16]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899a:	b2d2      	uxtb	r2, r2
 800899c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a2:	1c5a      	adds	r2, r3, #1
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	3b01      	subs	r3, #1
 80089b0:	b29a      	uxth	r2, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d114      	bne.n	80089ea <I2C_SlaveReceive_RXNE+0x74>
 80089c0:	7bfb      	ldrb	r3, [r7, #15]
 80089c2:	2b2a      	cmp	r3, #42	; 0x2a
 80089c4:	d111      	bne.n	80089ea <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	685a      	ldr	r2, [r3, #4]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089d4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2222      	movs	r2, #34	; 0x22
 80089da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2228      	movs	r2, #40	; 0x28
 80089e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f7ff f9fe 	bl	8007de6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80089ea:	bf00      	nop
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80089f2:	b480      	push	{r7}
 80089f4:	b083      	sub	sp, #12
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d012      	beq.n	8008a2a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	691a      	ldr	r2, [r3, #16]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0e:	b2d2      	uxtb	r2, r2
 8008a10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a16:	1c5a      	adds	r2, r3, #1
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	3b01      	subs	r3, #1
 8008a24:	b29a      	uxth	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008a2a:	bf00      	nop
 8008a2c:	370c      	adds	r7, #12
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr

08008a36 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b084      	sub	sp, #16
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
 8008a3e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8008a40:	2300      	movs	r3, #0
 8008a42:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008a50:	2b28      	cmp	r3, #40	; 0x28
 8008a52:	d127      	bne.n	8008aa4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	685a      	ldr	r2, [r3, #4]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a62:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	089b      	lsrs	r3, r3, #2
 8008a68:	f003 0301 	and.w	r3, r3, #1
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d101      	bne.n	8008a74 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008a70:	2301      	movs	r3, #1
 8008a72:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	09db      	lsrs	r3, r3, #7
 8008a78:	f003 0301 	and.w	r3, r3, #1
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d103      	bne.n	8008a88 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	81bb      	strh	r3, [r7, #12]
 8008a86:	e002      	b.n	8008a8e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008a96:	89ba      	ldrh	r2, [r7, #12]
 8008a98:	7bfb      	ldrb	r3, [r7, #15]
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f7ff f9ac 	bl	8007dfa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008aa2:	e008      	b.n	8008ab6 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f06f 0202 	mvn.w	r2, #2
 8008aac:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8008ab6:	bf00      	nop
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
	...

08008ac0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ace:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	685a      	ldr	r2, [r3, #4]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008ade:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	60bb      	str	r3, [r7, #8]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	695b      	ldr	r3, [r3, #20]
 8008aea:	60bb      	str	r3, [r7, #8]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f042 0201 	orr.w	r2, r2, #1
 8008afa:	601a      	str	r2, [r3, #0]
 8008afc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b0c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b1c:	d172      	bne.n	8008c04 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008b1e:	7bfb      	ldrb	r3, [r7, #15]
 8008b20:	2b22      	cmp	r3, #34	; 0x22
 8008b22:	d002      	beq.n	8008b2a <I2C_Slave_STOPF+0x6a>
 8008b24:	7bfb      	ldrb	r3, [r7, #15]
 8008b26:	2b2a      	cmp	r3, #42	; 0x2a
 8008b28:	d135      	bne.n	8008b96 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d005      	beq.n	8008b4e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b46:	f043 0204 	orr.w	r2, r3, #4
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	685a      	ldr	r2, [r3, #4]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b5c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7fd fe74 	bl	8006850 <HAL_DMA_GetState>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d049      	beq.n	8008c02 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b72:	4a69      	ldr	r2, [pc, #420]	; (8008d18 <I2C_Slave_STOPF+0x258>)
 8008b74:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7fd fcbc 	bl	80064f8 <HAL_DMA_Abort_IT>
 8008b80:	4603      	mov	r3, r0
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d03d      	beq.n	8008c02 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008b90:	4610      	mov	r0, r2
 8008b92:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008b94:	e035      	b.n	8008c02 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	b29a      	uxth	r2, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d005      	beq.n	8008bba <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb2:	f043 0204 	orr.w	r2, r3, #4
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	685a      	ldr	r2, [r3, #4]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008bc8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7fd fe3e 	bl	8006850 <HAL_DMA_GetState>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d014      	beq.n	8008c04 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bde:	4a4e      	ldr	r2, [pc, #312]	; (8008d18 <I2C_Slave_STOPF+0x258>)
 8008be0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7fd fc86 	bl	80064f8 <HAL_DMA_Abort_IT>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d008      	beq.n	8008c04 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008bfc:	4610      	mov	r0, r2
 8008bfe:	4798      	blx	r3
 8008c00:	e000      	b.n	8008c04 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008c02:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d03e      	beq.n	8008c8c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	695b      	ldr	r3, [r3, #20]
 8008c14:	f003 0304 	and.w	r3, r3, #4
 8008c18:	2b04      	cmp	r3, #4
 8008c1a:	d112      	bne.n	8008c42 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	691a      	ldr	r2, [r3, #16]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c26:	b2d2      	uxtb	r2, r2
 8008c28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2e:	1c5a      	adds	r2, r3, #1
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	3b01      	subs	r3, #1
 8008c3c:	b29a      	uxth	r2, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	695b      	ldr	r3, [r3, #20]
 8008c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c4c:	2b40      	cmp	r3, #64	; 0x40
 8008c4e:	d112      	bne.n	8008c76 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	691a      	ldr	r2, [r3, #16]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5a:	b2d2      	uxtb	r2, r2
 8008c5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c62:	1c5a      	adds	r2, r3, #1
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	b29a      	uxth	r2, r3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d005      	beq.n	8008c8c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c84:	f043 0204 	orr.w	r2, r3, #4
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d003      	beq.n	8008c9c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 f8b3 	bl	8008e00 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008c9a:	e039      	b.n	8008d10 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008c9c:	7bfb      	ldrb	r3, [r7, #15]
 8008c9e:	2b2a      	cmp	r3, #42	; 0x2a
 8008ca0:	d109      	bne.n	8008cb6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2228      	movs	r2, #40	; 0x28
 8008cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f7ff f898 	bl	8007de6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	2b28      	cmp	r3, #40	; 0x28
 8008cc0:	d111      	bne.n	8008ce6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a15      	ldr	r2, [pc, #84]	; (8008d1c <I2C_Slave_STOPF+0x25c>)
 8008cc6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2220      	movs	r2, #32
 8008cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f7ff f899 	bl	8007e16 <HAL_I2C_ListenCpltCallback>
}
 8008ce4:	e014      	b.n	8008d10 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cea:	2b22      	cmp	r3, #34	; 0x22
 8008cec:	d002      	beq.n	8008cf4 <I2C_Slave_STOPF+0x234>
 8008cee:	7bfb      	ldrb	r3, [r7, #15]
 8008cf0:	2b22      	cmp	r3, #34	; 0x22
 8008cf2:	d10d      	bne.n	8008d10 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2220      	movs	r2, #32
 8008cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7ff f86b 	bl	8007de6 <HAL_I2C_SlaveRxCpltCallback>
}
 8008d10:	bf00      	nop
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	0800932d 	.word	0x0800932d
 8008d1c:	ffff0000 	.word	0xffff0000

08008d20 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d34:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	2b08      	cmp	r3, #8
 8008d3a:	d002      	beq.n	8008d42 <I2C_Slave_AF+0x22>
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	2b20      	cmp	r3, #32
 8008d40:	d129      	bne.n	8008d96 <I2C_Slave_AF+0x76>
 8008d42:	7bfb      	ldrb	r3, [r7, #15]
 8008d44:	2b28      	cmp	r3, #40	; 0x28
 8008d46:	d126      	bne.n	8008d96 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4a2c      	ldr	r2, [pc, #176]	; (8008dfc <I2C_Slave_AF+0xdc>)
 8008d4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	685a      	ldr	r2, [r3, #4]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008d5c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008d66:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d76:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2220      	movs	r2, #32
 8008d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f7ff f841 	bl	8007e16 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008d94:	e02e      	b.n	8008df4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008d96:	7bfb      	ldrb	r3, [r7, #15]
 8008d98:	2b21      	cmp	r3, #33	; 0x21
 8008d9a:	d126      	bne.n	8008dea <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4a17      	ldr	r2, [pc, #92]	; (8008dfc <I2C_Slave_AF+0xdc>)
 8008da0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2221      	movs	r2, #33	; 0x21
 8008da6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2220      	movs	r2, #32
 8008dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	685a      	ldr	r2, [r3, #4]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008dc6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008dd0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008de0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f7fe fff5 	bl	8007dd2 <HAL_I2C_SlaveTxCpltCallback>
}
 8008de8:	e004      	b.n	8008df4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008df2:	615a      	str	r2, [r3, #20]
}
 8008df4:	bf00      	nop
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	ffff0000 	.word	0xffff0000

08008e00 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	2b10      	cmp	r3, #16
 8008e1a:	d10a      	bne.n	8008e32 <I2C_ITError+0x32>
 8008e1c:	7bfb      	ldrb	r3, [r7, #15]
 8008e1e:	2b22      	cmp	r3, #34	; 0x22
 8008e20:	d107      	bne.n	8008e32 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e30:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008e32:	7bfb      	ldrb	r3, [r7, #15]
 8008e34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008e38:	2b28      	cmp	r3, #40	; 0x28
 8008e3a:	d107      	bne.n	8008e4c <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2228      	movs	r2, #40	; 0x28
 8008e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008e4a:	e015      	b.n	8008e78 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e5a:	d006      	beq.n	8008e6a <I2C_ITError+0x6a>
 8008e5c:	7bfb      	ldrb	r3, [r7, #15]
 8008e5e:	2b60      	cmp	r3, #96	; 0x60
 8008e60:	d003      	beq.n	8008e6a <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2220      	movs	r2, #32
 8008e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e86:	d162      	bne.n	8008f4e <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	685a      	ldr	r2, [r3, #4]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e96:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d020      	beq.n	8008ee8 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eaa:	4a6a      	ldr	r2, [pc, #424]	; (8009054 <I2C_ITError+0x254>)
 8008eac:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7fd fb20 	bl	80064f8 <HAL_DMA_Abort_IT>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	f000 8089 	beq.w	8008fd2 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f022 0201 	bic.w	r2, r2, #1
 8008ece:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2220      	movs	r2, #32
 8008ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008ee2:	4610      	mov	r0, r2
 8008ee4:	4798      	blx	r3
 8008ee6:	e074      	b.n	8008fd2 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eec:	4a59      	ldr	r2, [pc, #356]	; (8009054 <I2C_ITError+0x254>)
 8008eee:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7fd faff 	bl	80064f8 <HAL_DMA_Abort_IT>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d068      	beq.n	8008fd2 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	695b      	ldr	r3, [r3, #20]
 8008f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f0a:	2b40      	cmp	r3, #64	; 0x40
 8008f0c:	d10b      	bne.n	8008f26 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	691a      	ldr	r2, [r3, #16]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f18:	b2d2      	uxtb	r2, r2
 8008f1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f20:	1c5a      	adds	r2, r3, #1
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f022 0201 	bic.w	r2, r2, #1
 8008f34:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2220      	movs	r2, #32
 8008f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008f48:	4610      	mov	r0, r2
 8008f4a:	4798      	blx	r3
 8008f4c:	e041      	b.n	8008fd2 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	2b60      	cmp	r3, #96	; 0x60
 8008f58:	d125      	bne.n	8008fa6 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2220      	movs	r2, #32
 8008f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2200      	movs	r2, #0
 8008f66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	695b      	ldr	r3, [r3, #20]
 8008f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f72:	2b40      	cmp	r3, #64	; 0x40
 8008f74:	d10b      	bne.n	8008f8e <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	691a      	ldr	r2, [r3, #16]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f80:	b2d2      	uxtb	r2, r2
 8008f82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f88:	1c5a      	adds	r2, r3, #1
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f022 0201 	bic.w	r2, r2, #1
 8008f9c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7fb fe5e 	bl	8004c60 <HAL_I2C_AbortCpltCallback>
 8008fa4:	e015      	b.n	8008fd2 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	695b      	ldr	r3, [r3, #20]
 8008fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fb0:	2b40      	cmp	r3, #64	; 0x40
 8008fb2:	d10b      	bne.n	8008fcc <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	691a      	ldr	r2, [r3, #16]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fbe:	b2d2      	uxtb	r2, r2
 8008fc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc6:	1c5a      	adds	r2, r3, #1
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f7fb fe51 	bl	8004c74 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	f003 0301 	and.w	r3, r3, #1
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d10e      	bne.n	8009000 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d109      	bne.n	8009000 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d104      	bne.n	8009000 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d007      	beq.n	8009010 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	685a      	ldr	r2, [r3, #4]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800900e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009016:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901c:	f003 0304 	and.w	r3, r3, #4
 8009020:	2b04      	cmp	r3, #4
 8009022:	d113      	bne.n	800904c <I2C_ITError+0x24c>
 8009024:	7bfb      	ldrb	r3, [r7, #15]
 8009026:	2b28      	cmp	r3, #40	; 0x28
 8009028:	d110      	bne.n	800904c <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a0a      	ldr	r2, [pc, #40]	; (8009058 <I2C_ITError+0x258>)
 800902e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2220      	movs	r2, #32
 800903a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f7fe fee5 	bl	8007e16 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800904c:	bf00      	nop
 800904e:	3710      	adds	r7, #16
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}
 8009054:	0800932d 	.word	0x0800932d
 8009058:	ffff0000 	.word	0xffff0000

0800905c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b088      	sub	sp, #32
 8009060:	af02      	add	r7, sp, #8
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	607a      	str	r2, [r7, #4]
 8009066:	603b      	str	r3, [r7, #0]
 8009068:	460b      	mov	r3, r1
 800906a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009070:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	2b08      	cmp	r3, #8
 8009076:	d006      	beq.n	8009086 <I2C_MasterRequestWrite+0x2a>
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	2b01      	cmp	r3, #1
 800907c:	d003      	beq.n	8009086 <I2C_MasterRequestWrite+0x2a>
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009084:	d108      	bne.n	8009098 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009094:	601a      	str	r2, [r3, #0]
 8009096:	e00b      	b.n	80090b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800909c:	2b12      	cmp	r3, #18
 800909e:	d107      	bne.n	80090b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	9300      	str	r3, [sp, #0]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	f000 f9b4 	bl	800942a <I2C_WaitOnFlagUntilTimeout>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d00c      	beq.n	80090e2 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d003      	beq.n	80090de <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80090de:	2303      	movs	r3, #3
 80090e0:	e035      	b.n	800914e <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090ea:	d108      	bne.n	80090fe <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80090ec:	897b      	ldrh	r3, [r7, #10]
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	461a      	mov	r2, r3
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80090fa:	611a      	str	r2, [r3, #16]
 80090fc:	e01b      	b.n	8009136 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80090fe:	897b      	ldrh	r3, [r7, #10]
 8009100:	11db      	asrs	r3, r3, #7
 8009102:	b2db      	uxtb	r3, r3
 8009104:	f003 0306 	and.w	r3, r3, #6
 8009108:	b2db      	uxtb	r3, r3
 800910a:	f063 030f 	orn	r3, r3, #15
 800910e:	b2da      	uxtb	r2, r3
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	490f      	ldr	r1, [pc, #60]	; (8009158 <I2C_MasterRequestWrite+0xfc>)
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f000 f9db 	bl	80094d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d001      	beq.n	800912c <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	e010      	b.n	800914e <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800912c:	897b      	ldrh	r3, [r7, #10]
 800912e:	b2da      	uxtb	r2, r3
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	4908      	ldr	r1, [pc, #32]	; (800915c <I2C_MasterRequestWrite+0x100>)
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	f000 f9cb 	bl	80094d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009142:	4603      	mov	r3, r0
 8009144:	2b00      	cmp	r3, #0
 8009146:	d001      	beq.n	800914c <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	e000      	b.n	800914e <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3718      	adds	r7, #24
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	00010008 	.word	0x00010008
 800915c:	00010002 	.word	0x00010002

08009160 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b088      	sub	sp, #32
 8009164:	af02      	add	r7, sp, #8
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	4608      	mov	r0, r1
 800916a:	4611      	mov	r1, r2
 800916c:	461a      	mov	r2, r3
 800916e:	4603      	mov	r3, r0
 8009170:	817b      	strh	r3, [r7, #10]
 8009172:	460b      	mov	r3, r1
 8009174:	813b      	strh	r3, [r7, #8]
 8009176:	4613      	mov	r3, r2
 8009178:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009188:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009198:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800919a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	6a3b      	ldr	r3, [r7, #32]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f000 f93f 	bl	800942a <I2C_WaitOnFlagUntilTimeout>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00c      	beq.n	80091cc <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d003      	beq.n	80091c8 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80091c8:	2303      	movs	r3, #3
 80091ca:	e0a9      	b.n	8009320 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80091cc:	897b      	ldrh	r3, [r7, #10]
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	461a      	mov	r2, r3
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80091da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80091dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091de:	6a3a      	ldr	r2, [r7, #32]
 80091e0:	4951      	ldr	r1, [pc, #324]	; (8009328 <I2C_RequestMemoryRead+0x1c8>)
 80091e2:	68f8      	ldr	r0, [r7, #12]
 80091e4:	f000 f978 	bl	80094d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d001      	beq.n	80091f2 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	e096      	b.n	8009320 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091f2:	2300      	movs	r3, #0
 80091f4:	617b      	str	r3, [r7, #20]
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	695b      	ldr	r3, [r3, #20]
 80091fc:	617b      	str	r3, [r7, #20]
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	699b      	ldr	r3, [r3, #24]
 8009204:	617b      	str	r3, [r7, #20]
 8009206:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800920a:	6a39      	ldr	r1, [r7, #32]
 800920c:	68f8      	ldr	r0, [r7, #12]
 800920e:	f000 f9e2 	bl	80095d6 <I2C_WaitOnTXEFlagUntilTimeout>
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00d      	beq.n	8009234 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800921c:	2b04      	cmp	r3, #4
 800921e:	d107      	bne.n	8009230 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800922e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	e075      	b.n	8009320 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009234:	88fb      	ldrh	r3, [r7, #6]
 8009236:	2b01      	cmp	r3, #1
 8009238:	d105      	bne.n	8009246 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800923a:	893b      	ldrh	r3, [r7, #8]
 800923c:	b2da      	uxtb	r2, r3
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	611a      	str	r2, [r3, #16]
 8009244:	e021      	b.n	800928a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009246:	893b      	ldrh	r3, [r7, #8]
 8009248:	0a1b      	lsrs	r3, r3, #8
 800924a:	b29b      	uxth	r3, r3
 800924c:	b2da      	uxtb	r2, r3
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009256:	6a39      	ldr	r1, [r7, #32]
 8009258:	68f8      	ldr	r0, [r7, #12]
 800925a:	f000 f9bc 	bl	80095d6 <I2C_WaitOnTXEFlagUntilTimeout>
 800925e:	4603      	mov	r3, r0
 8009260:	2b00      	cmp	r3, #0
 8009262:	d00d      	beq.n	8009280 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009268:	2b04      	cmp	r3, #4
 800926a:	d107      	bne.n	800927c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800927a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800927c:	2301      	movs	r3, #1
 800927e:	e04f      	b.n	8009320 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009280:	893b      	ldrh	r3, [r7, #8]
 8009282:	b2da      	uxtb	r2, r3
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800928a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800928c:	6a39      	ldr	r1, [r7, #32]
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f000 f9a1 	bl	80095d6 <I2C_WaitOnTXEFlagUntilTimeout>
 8009294:	4603      	mov	r3, r0
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00d      	beq.n	80092b6 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800929e:	2b04      	cmp	r3, #4
 80092a0:	d107      	bne.n	80092b2 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	e034      	b.n	8009320 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80092c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c8:	9300      	str	r3, [sp, #0]
 80092ca:	6a3b      	ldr	r3, [r7, #32]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80092d2:	68f8      	ldr	r0, [r7, #12]
 80092d4:	f000 f8a9 	bl	800942a <I2C_WaitOnFlagUntilTimeout>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00c      	beq.n	80092f8 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d003      	beq.n	80092f4 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80092f4:	2303      	movs	r3, #3
 80092f6:	e013      	b.n	8009320 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80092f8:	897b      	ldrh	r3, [r7, #10]
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	f043 0301 	orr.w	r3, r3, #1
 8009300:	b2da      	uxtb	r2, r3
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930a:	6a3a      	ldr	r2, [r7, #32]
 800930c:	4906      	ldr	r1, [pc, #24]	; (8009328 <I2C_RequestMemoryRead+0x1c8>)
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f000 f8e2 	bl	80094d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009314:	4603      	mov	r3, r0
 8009316:	2b00      	cmp	r3, #0
 8009318:	d001      	beq.n	800931e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	e000      	b.n	8009320 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	3718      	adds	r7, #24
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}
 8009328:	00010002 	.word	0x00010002

0800932c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009338:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009340:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009346:	2b00      	cmp	r3, #0
 8009348:	d003      	beq.n	8009352 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800934e:	2200      	movs	r2, #0
 8009350:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009356:	2b00      	cmp	r3, #0
 8009358:	d003      	beq.n	8009362 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935e:	2200      	movs	r2, #0
 8009360:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009370:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2200      	movs	r2, #0
 8009376:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800937c:	2b00      	cmp	r3, #0
 800937e:	d003      	beq.n	8009388 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009384:	2200      	movs	r2, #0
 8009386:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938c:	2b00      	cmp	r3, #0
 800938e:	d003      	beq.n	8009398 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009394:	2200      	movs	r2, #0
 8009396:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f022 0201 	bic.w	r2, r2, #1
 80093a6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	2b60      	cmp	r3, #96	; 0x60
 80093b2:	d10e      	bne.n	80093d2 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2220      	movs	r2, #32
 80093b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2200      	movs	r2, #0
 80093c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2200      	movs	r2, #0
 80093c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	f7fb fc48 	bl	8004c60 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80093d0:	e027      	b.n	8009422 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80093d2:	7afb      	ldrb	r3, [r7, #11]
 80093d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80093d8:	2b28      	cmp	r3, #40	; 0x28
 80093da:	d117      	bne.n	800940c <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f042 0201 	orr.w	r2, r2, #1
 80093ea:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80093fa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2200      	movs	r2, #0
 8009400:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2228      	movs	r2, #40	; 0x28
 8009406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800940a:	e007      	b.n	800941c <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2220      	movs	r2, #32
 8009410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2200      	movs	r2, #0
 8009418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f7fb fc29 	bl	8004c74 <HAL_I2C_ErrorCallback>
}
 8009422:	bf00      	nop
 8009424:	3710      	adds	r7, #16
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b084      	sub	sp, #16
 800942e:	af00      	add	r7, sp, #0
 8009430:	60f8      	str	r0, [r7, #12]
 8009432:	60b9      	str	r1, [r7, #8]
 8009434:	603b      	str	r3, [r7, #0]
 8009436:	4613      	mov	r3, r2
 8009438:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800943a:	e025      	b.n	8009488 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009442:	d021      	beq.n	8009488 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009444:	f7fc fe6a 	bl	800611c <HAL_GetTick>
 8009448:	4602      	mov	r2, r0
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	1ad3      	subs	r3, r2, r3
 800944e:	683a      	ldr	r2, [r7, #0]
 8009450:	429a      	cmp	r2, r3
 8009452:	d302      	bcc.n	800945a <I2C_WaitOnFlagUntilTimeout+0x30>
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d116      	bne.n	8009488 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2200      	movs	r2, #0
 800945e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2220      	movs	r2, #32
 8009464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2200      	movs	r2, #0
 800946c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009474:	f043 0220 	orr.w	r2, r3, #32
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2200      	movs	r2, #0
 8009480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	e023      	b.n	80094d0 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	0c1b      	lsrs	r3, r3, #16
 800948c:	b2db      	uxtb	r3, r3
 800948e:	2b01      	cmp	r3, #1
 8009490:	d10d      	bne.n	80094ae <I2C_WaitOnFlagUntilTimeout+0x84>
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	695b      	ldr	r3, [r3, #20]
 8009498:	43da      	mvns	r2, r3
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	4013      	ands	r3, r2
 800949e:	b29b      	uxth	r3, r3
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	bf0c      	ite	eq
 80094a4:	2301      	moveq	r3, #1
 80094a6:	2300      	movne	r3, #0
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	461a      	mov	r2, r3
 80094ac:	e00c      	b.n	80094c8 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	699b      	ldr	r3, [r3, #24]
 80094b4:	43da      	mvns	r2, r3
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	4013      	ands	r3, r2
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	2b00      	cmp	r3, #0
 80094be:	bf0c      	ite	eq
 80094c0:	2301      	moveq	r3, #1
 80094c2:	2300      	movne	r3, #0
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	461a      	mov	r2, r3
 80094c8:	79fb      	ldrb	r3, [r7, #7]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d0b6      	beq.n	800943c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3710      	adds	r7, #16
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]
 80094e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80094e6:	e051      	b.n	800958c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	695b      	ldr	r3, [r3, #20]
 80094ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094f6:	d123      	bne.n	8009540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009506:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009510:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2200      	movs	r2, #0
 8009516:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2220      	movs	r2, #32
 800951c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2200      	movs	r2, #0
 8009524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800952c:	f043 0204 	orr.w	r2, r3, #4
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2200      	movs	r2, #0
 8009538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	e046      	b.n	80095ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009546:	d021      	beq.n	800958c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009548:	f7fc fde8 	bl	800611c <HAL_GetTick>
 800954c:	4602      	mov	r2, r0
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	1ad3      	subs	r3, r2, r3
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	429a      	cmp	r2, r3
 8009556:	d302      	bcc.n	800955e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d116      	bne.n	800958c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2200      	movs	r2, #0
 8009562:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2220      	movs	r2, #32
 8009568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2200      	movs	r2, #0
 8009570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009578:	f043 0220 	orr.w	r2, r3, #32
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2200      	movs	r2, #0
 8009584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	e020      	b.n	80095ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	0c1b      	lsrs	r3, r3, #16
 8009590:	b2db      	uxtb	r3, r3
 8009592:	2b01      	cmp	r3, #1
 8009594:	d10c      	bne.n	80095b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	695b      	ldr	r3, [r3, #20]
 800959c:	43da      	mvns	r2, r3
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	4013      	ands	r3, r2
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	bf14      	ite	ne
 80095a8:	2301      	movne	r3, #1
 80095aa:	2300      	moveq	r3, #0
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	e00b      	b.n	80095c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	699b      	ldr	r3, [r3, #24]
 80095b6:	43da      	mvns	r2, r3
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	4013      	ands	r3, r2
 80095bc:	b29b      	uxth	r3, r3
 80095be:	2b00      	cmp	r3, #0
 80095c0:	bf14      	ite	ne
 80095c2:	2301      	movne	r3, #1
 80095c4:	2300      	moveq	r3, #0
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d18d      	bne.n	80094e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b084      	sub	sp, #16
 80095da:	af00      	add	r7, sp, #0
 80095dc:	60f8      	str	r0, [r7, #12]
 80095de:	60b9      	str	r1, [r7, #8]
 80095e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80095e2:	e02d      	b.n	8009640 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f000 f8ce 	bl	8009786 <I2C_IsAcknowledgeFailed>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d001      	beq.n	80095f4 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	e02d      	b.n	8009650 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095fa:	d021      	beq.n	8009640 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095fc:	f7fc fd8e 	bl	800611c <HAL_GetTick>
 8009600:	4602      	mov	r2, r0
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	1ad3      	subs	r3, r2, r3
 8009606:	68ba      	ldr	r2, [r7, #8]
 8009608:	429a      	cmp	r2, r3
 800960a:	d302      	bcc.n	8009612 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d116      	bne.n	8009640 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2200      	movs	r2, #0
 8009616:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2220      	movs	r2, #32
 800961c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2200      	movs	r2, #0
 8009624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962c:	f043 0220 	orr.w	r2, r3, #32
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2200      	movs	r2, #0
 8009638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	e007      	b.n	8009650 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	695b      	ldr	r3, [r3, #20]
 8009646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800964a:	2b80      	cmp	r3, #128	; 0x80
 800964c:	d1ca      	bne.n	80095e4 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009664:	e02d      	b.n	80096c2 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009666:	68f8      	ldr	r0, [r7, #12]
 8009668:	f000 f88d 	bl	8009786 <I2C_IsAcknowledgeFailed>
 800966c:	4603      	mov	r3, r0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d001      	beq.n	8009676 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	e02d      	b.n	80096d2 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800967c:	d021      	beq.n	80096c2 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800967e:	f7fc fd4d 	bl	800611c <HAL_GetTick>
 8009682:	4602      	mov	r2, r0
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	1ad3      	subs	r3, r2, r3
 8009688:	68ba      	ldr	r2, [r7, #8]
 800968a:	429a      	cmp	r2, r3
 800968c:	d302      	bcc.n	8009694 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d116      	bne.n	80096c2 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2200      	movs	r2, #0
 8009698:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2220      	movs	r2, #32
 800969e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2200      	movs	r2, #0
 80096a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ae:	f043 0220 	orr.w	r2, r3, #32
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	e007      	b.n	80096d2 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	695b      	ldr	r3, [r3, #20]
 80096c8:	f003 0304 	and.w	r3, r3, #4
 80096cc:	2b04      	cmp	r3, #4
 80096ce:	d1ca      	bne.n	8009666 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b084      	sub	sp, #16
 80096de:	af00      	add	r7, sp, #0
 80096e0:	60f8      	str	r0, [r7, #12]
 80096e2:	60b9      	str	r1, [r7, #8]
 80096e4:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80096e6:	e042      	b.n	800976e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	695b      	ldr	r3, [r3, #20]
 80096ee:	f003 0310 	and.w	r3, r3, #16
 80096f2:	2b10      	cmp	r3, #16
 80096f4:	d119      	bne.n	800972a <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f06f 0210 	mvn.w	r2, #16
 80096fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2200      	movs	r2, #0
 8009704:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2220      	movs	r2, #32
 800970a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2200      	movs	r2, #0
 8009722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e029      	b.n	800977e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800972a:	f7fc fcf7 	bl	800611c <HAL_GetTick>
 800972e:	4602      	mov	r2, r0
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	68ba      	ldr	r2, [r7, #8]
 8009736:	429a      	cmp	r2, r3
 8009738:	d302      	bcc.n	8009740 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d116      	bne.n	800976e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2200      	movs	r2, #0
 8009744:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2220      	movs	r2, #32
 800974a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2200      	movs	r2, #0
 8009752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800975a:	f043 0220 	orr.w	r2, r3, #32
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2200      	movs	r2, #0
 8009766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	e007      	b.n	800977e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	695b      	ldr	r3, [r3, #20]
 8009774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009778:	2b40      	cmp	r3, #64	; 0x40
 800977a:	d1b5      	bne.n	80096e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800977c:	2300      	movs	r3, #0
}
 800977e:	4618      	mov	r0, r3
 8009780:	3710      	adds	r7, #16
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009786:	b480      	push	{r7}
 8009788:	b083      	sub	sp, #12
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	695b      	ldr	r3, [r3, #20]
 8009794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800979c:	d11b      	bne.n	80097d6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80097a6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2220      	movs	r2, #32
 80097b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c2:	f043 0204 	orr.w	r2, r3, #4
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	e000      	b.n	80097d8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80097d6:	2300      	movs	r3, #0
}
 80097d8:	4618      	mov	r0, r3
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80097f4:	d103      	bne.n	80097fe <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2201      	movs	r2, #1
 80097fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80097fc:	e007      	b.n	800980e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009802:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009806:	d102      	bne.n	800980e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2208      	movs	r2, #8
 800980c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800980e:	bf00      	nop
 8009810:	370c      	adds	r7, #12
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr

0800981a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800981a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800981c:	b08f      	sub	sp, #60	; 0x3c
 800981e:	af0a      	add	r7, sp, #40	; 0x28
 8009820:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d101      	bne.n	800982c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009828:	2301      	movs	r3, #1
 800982a:	e10f      	b.n	8009a4c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8009838:	b2db      	uxtb	r3, r3
 800983a:	2b00      	cmp	r3, #0
 800983c:	d106      	bne.n	800984c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f006 fa38 	bl	800fcbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2203      	movs	r2, #3
 8009850:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800985c:	2b00      	cmp	r3, #0
 800985e:	d102      	bne.n	8009866 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4618      	mov	r0, r3
 800986c:	f003 fa6d 	bl	800cd4a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	603b      	str	r3, [r7, #0]
 8009876:	687e      	ldr	r6, [r7, #4]
 8009878:	466d      	mov	r5, sp
 800987a:	f106 0410 	add.w	r4, r6, #16
 800987e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009880:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009884:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009886:	e894 0003 	ldmia.w	r4, {r0, r1}
 800988a:	e885 0003 	stmia.w	r5, {r0, r1}
 800988e:	1d33      	adds	r3, r6, #4
 8009890:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009892:	6838      	ldr	r0, [r7, #0]
 8009894:	f003 f944 	bl	800cb20 <USB_CoreInit>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d005      	beq.n	80098aa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2202      	movs	r2, #2
 80098a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80098a6:	2301      	movs	r3, #1
 80098a8:	e0d0      	b.n	8009a4c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2100      	movs	r1, #0
 80098b0:	4618      	mov	r0, r3
 80098b2:	f003 fa5b 	bl	800cd6c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80098b6:	2300      	movs	r3, #0
 80098b8:	73fb      	strb	r3, [r7, #15]
 80098ba:	e04a      	b.n	8009952 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80098bc:	7bfa      	ldrb	r2, [r7, #15]
 80098be:	6879      	ldr	r1, [r7, #4]
 80098c0:	4613      	mov	r3, r2
 80098c2:	00db      	lsls	r3, r3, #3
 80098c4:	1a9b      	subs	r3, r3, r2
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	440b      	add	r3, r1
 80098ca:	333d      	adds	r3, #61	; 0x3d
 80098cc:	2201      	movs	r2, #1
 80098ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80098d0:	7bfa      	ldrb	r2, [r7, #15]
 80098d2:	6879      	ldr	r1, [r7, #4]
 80098d4:	4613      	mov	r3, r2
 80098d6:	00db      	lsls	r3, r3, #3
 80098d8:	1a9b      	subs	r3, r3, r2
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	440b      	add	r3, r1
 80098de:	333c      	adds	r3, #60	; 0x3c
 80098e0:	7bfa      	ldrb	r2, [r7, #15]
 80098e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80098e4:	7bfa      	ldrb	r2, [r7, #15]
 80098e6:	7bfb      	ldrb	r3, [r7, #15]
 80098e8:	b298      	uxth	r0, r3
 80098ea:	6879      	ldr	r1, [r7, #4]
 80098ec:	4613      	mov	r3, r2
 80098ee:	00db      	lsls	r3, r3, #3
 80098f0:	1a9b      	subs	r3, r3, r2
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	440b      	add	r3, r1
 80098f6:	3342      	adds	r3, #66	; 0x42
 80098f8:	4602      	mov	r2, r0
 80098fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80098fc:	7bfa      	ldrb	r2, [r7, #15]
 80098fe:	6879      	ldr	r1, [r7, #4]
 8009900:	4613      	mov	r3, r2
 8009902:	00db      	lsls	r3, r3, #3
 8009904:	1a9b      	subs	r3, r3, r2
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	440b      	add	r3, r1
 800990a:	333f      	adds	r3, #63	; 0x3f
 800990c:	2200      	movs	r2, #0
 800990e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009910:	7bfa      	ldrb	r2, [r7, #15]
 8009912:	6879      	ldr	r1, [r7, #4]
 8009914:	4613      	mov	r3, r2
 8009916:	00db      	lsls	r3, r3, #3
 8009918:	1a9b      	subs	r3, r3, r2
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	440b      	add	r3, r1
 800991e:	3344      	adds	r3, #68	; 0x44
 8009920:	2200      	movs	r2, #0
 8009922:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009924:	7bfa      	ldrb	r2, [r7, #15]
 8009926:	6879      	ldr	r1, [r7, #4]
 8009928:	4613      	mov	r3, r2
 800992a:	00db      	lsls	r3, r3, #3
 800992c:	1a9b      	subs	r3, r3, r2
 800992e:	009b      	lsls	r3, r3, #2
 8009930:	440b      	add	r3, r1
 8009932:	3348      	adds	r3, #72	; 0x48
 8009934:	2200      	movs	r2, #0
 8009936:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009938:	7bfa      	ldrb	r2, [r7, #15]
 800993a:	6879      	ldr	r1, [r7, #4]
 800993c:	4613      	mov	r3, r2
 800993e:	00db      	lsls	r3, r3, #3
 8009940:	1a9b      	subs	r3, r3, r2
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	440b      	add	r3, r1
 8009946:	3350      	adds	r3, #80	; 0x50
 8009948:	2200      	movs	r2, #0
 800994a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800994c:	7bfb      	ldrb	r3, [r7, #15]
 800994e:	3301      	adds	r3, #1
 8009950:	73fb      	strb	r3, [r7, #15]
 8009952:	7bfa      	ldrb	r2, [r7, #15]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	429a      	cmp	r2, r3
 800995a:	d3af      	bcc.n	80098bc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800995c:	2300      	movs	r3, #0
 800995e:	73fb      	strb	r3, [r7, #15]
 8009960:	e044      	b.n	80099ec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009962:	7bfa      	ldrb	r2, [r7, #15]
 8009964:	6879      	ldr	r1, [r7, #4]
 8009966:	4613      	mov	r3, r2
 8009968:	00db      	lsls	r3, r3, #3
 800996a:	1a9b      	subs	r3, r3, r2
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	440b      	add	r3, r1
 8009970:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8009974:	2200      	movs	r2, #0
 8009976:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009978:	7bfa      	ldrb	r2, [r7, #15]
 800997a:	6879      	ldr	r1, [r7, #4]
 800997c:	4613      	mov	r3, r2
 800997e:	00db      	lsls	r3, r3, #3
 8009980:	1a9b      	subs	r3, r3, r2
 8009982:	009b      	lsls	r3, r3, #2
 8009984:	440b      	add	r3, r1
 8009986:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800998a:	7bfa      	ldrb	r2, [r7, #15]
 800998c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800998e:	7bfa      	ldrb	r2, [r7, #15]
 8009990:	6879      	ldr	r1, [r7, #4]
 8009992:	4613      	mov	r3, r2
 8009994:	00db      	lsls	r3, r3, #3
 8009996:	1a9b      	subs	r3, r3, r2
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	440b      	add	r3, r1
 800999c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80099a0:	2200      	movs	r2, #0
 80099a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80099a4:	7bfa      	ldrb	r2, [r7, #15]
 80099a6:	6879      	ldr	r1, [r7, #4]
 80099a8:	4613      	mov	r3, r2
 80099aa:	00db      	lsls	r3, r3, #3
 80099ac:	1a9b      	subs	r3, r3, r2
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	440b      	add	r3, r1
 80099b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80099b6:	2200      	movs	r2, #0
 80099b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80099ba:	7bfa      	ldrb	r2, [r7, #15]
 80099bc:	6879      	ldr	r1, [r7, #4]
 80099be:	4613      	mov	r3, r2
 80099c0:	00db      	lsls	r3, r3, #3
 80099c2:	1a9b      	subs	r3, r3, r2
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	440b      	add	r3, r1
 80099c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80099cc:	2200      	movs	r2, #0
 80099ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80099d0:	7bfa      	ldrb	r2, [r7, #15]
 80099d2:	6879      	ldr	r1, [r7, #4]
 80099d4:	4613      	mov	r3, r2
 80099d6:	00db      	lsls	r3, r3, #3
 80099d8:	1a9b      	subs	r3, r3, r2
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	440b      	add	r3, r1
 80099de:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80099e2:	2200      	movs	r2, #0
 80099e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80099e6:	7bfb      	ldrb	r3, [r7, #15]
 80099e8:	3301      	adds	r3, #1
 80099ea:	73fb      	strb	r3, [r7, #15]
 80099ec:	7bfa      	ldrb	r2, [r7, #15]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d3b5      	bcc.n	8009962 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	603b      	str	r3, [r7, #0]
 80099fc:	687e      	ldr	r6, [r7, #4]
 80099fe:	466d      	mov	r5, sp
 8009a00:	f106 0410 	add.w	r4, r6, #16
 8009a04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009a06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009a08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009a0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009a0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009a10:	e885 0003 	stmia.w	r5, {r0, r1}
 8009a14:	1d33      	adds	r3, r6, #4
 8009a16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a18:	6838      	ldr	r0, [r7, #0]
 8009a1a:	f003 f9d1 	bl	800cdc0 <USB_DevInit>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d005      	beq.n	8009a30 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2202      	movs	r2, #2
 8009a28:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	e00d      	b.n	8009a4c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4618      	mov	r0, r3
 8009a46:	f004 fa10 	bl	800de6a <USB_DevDisconnect>

  return HAL_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3714      	adds	r7, #20
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a54 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d101      	bne.n	8009a70 <HAL_PCD_Start+0x1c>
 8009a6c:	2302      	movs	r3, #2
 8009a6e:	e020      	b.n	8009ab2 <HAL_PCD_Start+0x5e>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2201      	movs	r2, #1
 8009a74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d109      	bne.n	8009a94 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d005      	beq.n	8009a94 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a8c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f004 f9ce 	bl	800de3a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f003 f940 	bl	800cd28 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009aba:	b590      	push	{r4, r7, lr}
 8009abc:	b08d      	sub	sp, #52	; 0x34
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ac8:	6a3b      	ldr	r3, [r7, #32]
 8009aca:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f004 fa75 	bl	800dfc0 <USB_GetMode>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f040 839d 	bne.w	800a218 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f004 f9d9 	bl	800de9a <USB_ReadInterrupts>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f000 8393 	beq.w	800a216 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4618      	mov	r0, r3
 8009af6:	f004 f9d0 	bl	800de9a <USB_ReadInterrupts>
 8009afa:	4603      	mov	r3, r0
 8009afc:	f003 0302 	and.w	r3, r3, #2
 8009b00:	2b02      	cmp	r3, #2
 8009b02:	d107      	bne.n	8009b14 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	695a      	ldr	r2, [r3, #20]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f002 0202 	and.w	r2, r2, #2
 8009b12:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f004 f9be 	bl	800de9a <USB_ReadInterrupts>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	f003 0310 	and.w	r3, r3, #16
 8009b24:	2b10      	cmp	r3, #16
 8009b26:	d161      	bne.n	8009bec <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	699a      	ldr	r2, [r3, #24]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f022 0210 	bic.w	r2, r2, #16
 8009b36:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8009b38:	6a3b      	ldr	r3, [r7, #32]
 8009b3a:	6a1b      	ldr	r3, [r3, #32]
 8009b3c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	f003 020f 	and.w	r2, r3, #15
 8009b44:	4613      	mov	r3, r2
 8009b46:	00db      	lsls	r3, r3, #3
 8009b48:	1a9b      	subs	r3, r3, r2
 8009b4a:	009b      	lsls	r3, r3, #2
 8009b4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	4413      	add	r3, r2
 8009b54:	3304      	adds	r3, #4
 8009b56:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	0c5b      	lsrs	r3, r3, #17
 8009b5c:	f003 030f 	and.w	r3, r3, #15
 8009b60:	2b02      	cmp	r3, #2
 8009b62:	d124      	bne.n	8009bae <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009b64:	69ba      	ldr	r2, [r7, #24]
 8009b66:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009b6a:	4013      	ands	r3, r2
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d035      	beq.n	8009bdc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009b74:	69bb      	ldr	r3, [r7, #24]
 8009b76:	091b      	lsrs	r3, r3, #4
 8009b78:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009b7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	461a      	mov	r2, r3
 8009b82:	6a38      	ldr	r0, [r7, #32]
 8009b84:	f004 f836 	bl	800dbf4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	68da      	ldr	r2, [r3, #12]
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	091b      	lsrs	r3, r3, #4
 8009b90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009b94:	441a      	add	r2, r3
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	699a      	ldr	r2, [r3, #24]
 8009b9e:	69bb      	ldr	r3, [r7, #24]
 8009ba0:	091b      	lsrs	r3, r3, #4
 8009ba2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009ba6:	441a      	add	r2, r3
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	619a      	str	r2, [r3, #24]
 8009bac:	e016      	b.n	8009bdc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	0c5b      	lsrs	r3, r3, #17
 8009bb2:	f003 030f 	and.w	r3, r3, #15
 8009bb6:	2b06      	cmp	r3, #6
 8009bb8:	d110      	bne.n	8009bdc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009bc0:	2208      	movs	r2, #8
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	6a38      	ldr	r0, [r7, #32]
 8009bc6:	f004 f815 	bl	800dbf4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	699a      	ldr	r2, [r3, #24]
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	091b      	lsrs	r3, r3, #4
 8009bd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009bd6:	441a      	add	r2, r3
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	699a      	ldr	r2, [r3, #24]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f042 0210 	orr.w	r2, r2, #16
 8009bea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f004 f952 	bl	800de9a <USB_ReadInterrupts>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009bfc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009c00:	d16e      	bne.n	8009ce0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8009c02:	2300      	movs	r3, #0
 8009c04:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f004 f958 	bl	800dec0 <USB_ReadDevAllOutEpInterrupt>
 8009c10:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009c12:	e062      	b.n	8009cda <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c16:	f003 0301 	and.w	r3, r3, #1
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d057      	beq.n	8009cce <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c24:	b2d2      	uxtb	r2, r2
 8009c26:	4611      	mov	r1, r2
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f004 f97d 	bl	800df28 <USB_ReadDevOutEPInterrupt>
 8009c2e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	f003 0301 	and.w	r3, r3, #1
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d00c      	beq.n	8009c54 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3c:	015a      	lsls	r2, r3, #5
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	4413      	add	r3, r2
 8009c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c46:	461a      	mov	r2, r3
 8009c48:	2301      	movs	r3, #1
 8009c4a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009c4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 fdb0 	bl	800a7b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	f003 0308 	and.w	r3, r3, #8
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d00c      	beq.n	8009c78 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c60:	015a      	lsls	r2, r3, #5
 8009c62:	69fb      	ldr	r3, [r7, #28]
 8009c64:	4413      	add	r3, r2
 8009c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	2308      	movs	r3, #8
 8009c6e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009c70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 feaa 	bl	800a9cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	f003 0310 	and.w	r3, r3, #16
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d008      	beq.n	8009c94 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c84:	015a      	lsls	r2, r3, #5
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	4413      	add	r3, r2
 8009c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c8e:	461a      	mov	r2, r3
 8009c90:	2310      	movs	r3, #16
 8009c92:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	f003 0320 	and.w	r3, r3, #32
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d008      	beq.n	8009cb0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca0:	015a      	lsls	r2, r3, #5
 8009ca2:	69fb      	ldr	r3, [r7, #28]
 8009ca4:	4413      	add	r3, r2
 8009ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009caa:	461a      	mov	r2, r3
 8009cac:	2320      	movs	r3, #32
 8009cae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d009      	beq.n	8009cce <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbc:	015a      	lsls	r2, r3, #5
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ccc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd0:	3301      	adds	r3, #1
 8009cd2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd6:	085b      	lsrs	r3, r3, #1
 8009cd8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d199      	bne.n	8009c14 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f004 f8d8 	bl	800de9a <USB_ReadInterrupts>
 8009cea:	4603      	mov	r3, r0
 8009cec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009cf0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009cf4:	f040 80c0 	bne.w	8009e78 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f004 f8f9 	bl	800def4 <USB_ReadDevAllInEpInterrupt>
 8009d02:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009d04:	2300      	movs	r3, #0
 8009d06:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009d08:	e0b2      	b.n	8009e70 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d0c:	f003 0301 	and.w	r3, r3, #1
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	f000 80a7 	beq.w	8009e64 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d1c:	b2d2      	uxtb	r2, r2
 8009d1e:	4611      	mov	r1, r2
 8009d20:	4618      	mov	r0, r3
 8009d22:	f004 f91f 	bl	800df64 <USB_ReadDevInEPInterrupt>
 8009d26:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	f003 0301 	and.w	r3, r3, #1
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d057      	beq.n	8009de2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d34:	f003 030f 	and.w	r3, r3, #15
 8009d38:	2201      	movs	r2, #1
 8009d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d3e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	43db      	mvns	r3, r3
 8009d4c:	69f9      	ldr	r1, [r7, #28]
 8009d4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d52:	4013      	ands	r3, r2
 8009d54:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d58:	015a      	lsls	r2, r3, #5
 8009d5a:	69fb      	ldr	r3, [r7, #28]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d62:	461a      	mov	r2, r3
 8009d64:	2301      	movs	r3, #1
 8009d66:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	691b      	ldr	r3, [r3, #16]
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d132      	bne.n	8009dd6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009d70:	6879      	ldr	r1, [r7, #4]
 8009d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d74:	4613      	mov	r3, r2
 8009d76:	00db      	lsls	r3, r3, #3
 8009d78:	1a9b      	subs	r3, r3, r2
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	440b      	add	r3, r1
 8009d7e:	3348      	adds	r3, #72	; 0x48
 8009d80:	6819      	ldr	r1, [r3, #0]
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d86:	4613      	mov	r3, r2
 8009d88:	00db      	lsls	r3, r3, #3
 8009d8a:	1a9b      	subs	r3, r3, r2
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	4403      	add	r3, r0
 8009d90:	3344      	adds	r3, #68	; 0x44
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4419      	add	r1, r3
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	00db      	lsls	r3, r3, #3
 8009d9e:	1a9b      	subs	r3, r3, r2
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	4403      	add	r3, r0
 8009da4:	3348      	adds	r3, #72	; 0x48
 8009da6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d113      	bne.n	8009dd6 <HAL_PCD_IRQHandler+0x31c>
 8009dae:	6879      	ldr	r1, [r7, #4]
 8009db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009db2:	4613      	mov	r3, r2
 8009db4:	00db      	lsls	r3, r3, #3
 8009db6:	1a9b      	subs	r3, r3, r2
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	440b      	add	r3, r1
 8009dbc:	3350      	adds	r3, #80	; 0x50
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d108      	bne.n	8009dd6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6818      	ldr	r0, [r3, #0]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009dce:	461a      	mov	r2, r3
 8009dd0:	2101      	movs	r1, #1
 8009dd2:	f004 f927 	bl	800e024 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	4619      	mov	r1, r3
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f005 ffee 	bl	800fdbe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	f003 0308 	and.w	r3, r3, #8
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d008      	beq.n	8009dfe <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dee:	015a      	lsls	r2, r3, #5
 8009df0:	69fb      	ldr	r3, [r7, #28]
 8009df2:	4413      	add	r3, r2
 8009df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009df8:	461a      	mov	r2, r3
 8009dfa:	2308      	movs	r3, #8
 8009dfc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	f003 0310 	and.w	r3, r3, #16
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d008      	beq.n	8009e1a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0a:	015a      	lsls	r2, r3, #5
 8009e0c:	69fb      	ldr	r3, [r7, #28]
 8009e0e:	4413      	add	r3, r2
 8009e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e14:	461a      	mov	r2, r3
 8009e16:	2310      	movs	r3, #16
 8009e18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d008      	beq.n	8009e36 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e26:	015a      	lsls	r2, r3, #5
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	4413      	add	r3, r2
 8009e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e30:	461a      	mov	r2, r3
 8009e32:	2340      	movs	r3, #64	; 0x40
 8009e34:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	f003 0302 	and.w	r3, r3, #2
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d008      	beq.n	8009e52 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e42:	015a      	lsls	r2, r3, #5
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	4413      	add	r3, r2
 8009e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	2302      	movs	r3, #2
 8009e50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d003      	beq.n	8009e64 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009e5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 fc1b 	bl	800a69a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e66:	3301      	adds	r3, #1
 8009e68:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6c:	085b      	lsrs	r3, r3, #1
 8009e6e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	f47f af49 	bne.w	8009d0a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f004 f80c 	bl	800de9a <USB_ReadInterrupts>
 8009e82:	4603      	mov	r3, r0
 8009e84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e8c:	d122      	bne.n	8009ed4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009e8e:	69fb      	ldr	r3, [r7, #28]
 8009e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	69fa      	ldr	r2, [r7, #28]
 8009e98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e9c:	f023 0301 	bic.w	r3, r3, #1
 8009ea0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d108      	bne.n	8009ebe <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009eb4:	2100      	movs	r1, #0
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 fe26 	bl	800ab08 <HAL_PCDEx_LPM_Callback>
 8009ebc:	e002      	b.n	8009ec4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f005 fff4 	bl	800feac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	695a      	ldr	r2, [r3, #20]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009ed2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f003 ffde 	bl	800de9a <USB_ReadInterrupts>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ee8:	d112      	bne.n	8009f10 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009eea:	69fb      	ldr	r3, [r7, #28]
 8009eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	f003 0301 	and.w	r3, r3, #1
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d102      	bne.n	8009f00 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f005 ffb0 	bl	800fe60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	695a      	ldr	r2, [r3, #20]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009f0e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4618      	mov	r0, r3
 8009f16:	f003 ffc0 	bl	800de9a <USB_ReadInterrupts>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f24:	f040 80c7 	bne.w	800a0b6 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	69fa      	ldr	r2, [r7, #28]
 8009f32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f36:	f023 0301 	bic.w	r3, r3, #1
 8009f3a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	2110      	movs	r1, #16
 8009f42:	4618      	mov	r0, r3
 8009f44:	f003 f8a0 	bl	800d088 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f48:	2300      	movs	r3, #0
 8009f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f4c:	e056      	b.n	8009ffc <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f50:	015a      	lsls	r2, r3, #5
 8009f52:	69fb      	ldr	r3, [r7, #28]
 8009f54:	4413      	add	r3, r2
 8009f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009f60:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f64:	015a      	lsls	r2, r3, #5
 8009f66:	69fb      	ldr	r3, [r7, #28]
 8009f68:	4413      	add	r3, r2
 8009f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f72:	0151      	lsls	r1, r2, #5
 8009f74:	69fa      	ldr	r2, [r7, #28]
 8009f76:	440a      	add	r2, r1
 8009f78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f80:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f84:	015a      	lsls	r2, r3, #5
 8009f86:	69fb      	ldr	r3, [r7, #28]
 8009f88:	4413      	add	r3, r2
 8009f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f92:	0151      	lsls	r1, r2, #5
 8009f94:	69fa      	ldr	r2, [r7, #28]
 8009f96:	440a      	add	r2, r1
 8009f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009fa0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa4:	015a      	lsls	r2, r3, #5
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	4413      	add	r3, r2
 8009faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fae:	461a      	mov	r2, r3
 8009fb0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009fb4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb8:	015a      	lsls	r2, r3, #5
 8009fba:	69fb      	ldr	r3, [r7, #28]
 8009fbc:	4413      	add	r3, r2
 8009fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fc6:	0151      	lsls	r1, r2, #5
 8009fc8:	69fa      	ldr	r2, [r7, #28]
 8009fca:	440a      	add	r2, r1
 8009fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009fd4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd8:	015a      	lsls	r2, r3, #5
 8009fda:	69fb      	ldr	r3, [r7, #28]
 8009fdc:	4413      	add	r3, r2
 8009fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fe6:	0151      	lsls	r1, r2, #5
 8009fe8:	69fa      	ldr	r2, [r7, #28]
 8009fea:	440a      	add	r2, r1
 8009fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ff0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009ff4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	685b      	ldr	r3, [r3, #4]
 800a000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a002:	429a      	cmp	r2, r3
 800a004:	d3a3      	bcc.n	8009f4e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a006:	69fb      	ldr	r3, [r7, #28]
 800a008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a00c:	69db      	ldr	r3, [r3, #28]
 800a00e:	69fa      	ldr	r2, [r7, #28]
 800a010:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a014:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a018:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d016      	beq.n	800a050 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a02c:	69fa      	ldr	r2, [r7, #28]
 800a02e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a032:	f043 030b 	orr.w	r3, r3, #11
 800a036:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a03a:	69fb      	ldr	r3, [r7, #28]
 800a03c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a042:	69fa      	ldr	r2, [r7, #28]
 800a044:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a048:	f043 030b 	orr.w	r3, r3, #11
 800a04c:	6453      	str	r3, [r2, #68]	; 0x44
 800a04e:	e015      	b.n	800a07c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a050:	69fb      	ldr	r3, [r7, #28]
 800a052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a056:	695b      	ldr	r3, [r3, #20]
 800a058:	69fa      	ldr	r2, [r7, #28]
 800a05a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a05e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a062:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800a066:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a06e:	691b      	ldr	r3, [r3, #16]
 800a070:	69fa      	ldr	r2, [r7, #28]
 800a072:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a076:	f043 030b 	orr.w	r3, r3, #11
 800a07a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	69fa      	ldr	r2, [r7, #28]
 800a086:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a08a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a08e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6818      	ldr	r0, [r3, #0]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	691b      	ldr	r3, [r3, #16]
 800a098:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	f003 ffbf 	bl	800e024 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	695a      	ldr	r2, [r3, #20]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a0b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f003 feed 	bl	800de9a <USB_ReadInterrupts>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a0c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0ca:	d124      	bne.n	800a116 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f003 ff83 	bl	800dfdc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f003 f835 	bl	800d14a <USB_GetDevSpeed>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681c      	ldr	r4, [r3, #0]
 800a0ec:	f001 f944 	bl	800b378 <HAL_RCC_GetHCLKFreq>
 800a0f0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	4620      	mov	r0, r4
 800a0fc:	f002 fd72 	bl	800cbe4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f005 fe84 	bl	800fe0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	695a      	ldr	r2, [r3, #20]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a114:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4618      	mov	r0, r3
 800a11c:	f003 febd 	bl	800de9a <USB_ReadInterrupts>
 800a120:	4603      	mov	r3, r0
 800a122:	f003 0308 	and.w	r3, r3, #8
 800a126:	2b08      	cmp	r3, #8
 800a128:	d10a      	bne.n	800a140 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f005 fe61 	bl	800fdf2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	695a      	ldr	r2, [r3, #20]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f002 0208 	and.w	r2, r2, #8
 800a13e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4618      	mov	r0, r3
 800a146:	f003 fea8 	bl	800de9a <USB_ReadInterrupts>
 800a14a:	4603      	mov	r3, r0
 800a14c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a150:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a154:	d10f      	bne.n	800a176 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a156:	2300      	movs	r3, #0
 800a158:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	4619      	mov	r1, r3
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f005 fec3 	bl	800feec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	695a      	ldr	r2, [r3, #20]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a174:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4618      	mov	r0, r3
 800a17c:	f003 fe8d 	bl	800de9a <USB_ReadInterrupts>
 800a180:	4603      	mov	r3, r0
 800a182:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a186:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a18a:	d10f      	bne.n	800a1ac <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a18c:	2300      	movs	r3, #0
 800a18e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a192:	b2db      	uxtb	r3, r3
 800a194:	4619      	mov	r1, r3
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f005 fe96 	bl	800fec8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	695a      	ldr	r2, [r3, #20]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a1aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f003 fe72 	bl	800de9a <USB_ReadInterrupts>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a1bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1c0:	d10a      	bne.n	800a1d8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f005 fea4 	bl	800ff10 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	695a      	ldr	r2, [r3, #20]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a1d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f003 fe5c 	bl	800de9a <USB_ReadInterrupts>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	f003 0304 	and.w	r3, r3, #4
 800a1e8:	2b04      	cmp	r3, #4
 800a1ea:	d115      	bne.n	800a218 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a1f4:	69bb      	ldr	r3, [r7, #24]
 800a1f6:	f003 0304 	and.w	r3, r3, #4
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d002      	beq.n	800a204 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f005 fe94 	bl	800ff2c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	6859      	ldr	r1, [r3, #4]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	69ba      	ldr	r2, [r7, #24]
 800a210:	430a      	orrs	r2, r1
 800a212:	605a      	str	r2, [r3, #4]
 800a214:	e000      	b.n	800a218 <HAL_PCD_IRQHandler+0x75e>
      return;
 800a216:	bf00      	nop
    }
  }
}
 800a218:	3734      	adds	r7, #52	; 0x34
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd90      	pop	{r4, r7, pc}

0800a21e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a21e:	b580      	push	{r7, lr}
 800a220:	b082      	sub	sp, #8
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
 800a226:	460b      	mov	r3, r1
 800a228:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a230:	2b01      	cmp	r3, #1
 800a232:	d101      	bne.n	800a238 <HAL_PCD_SetAddress+0x1a>
 800a234:	2302      	movs	r3, #2
 800a236:	e013      	b.n	800a260 <HAL_PCD_SetAddress+0x42>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	78fa      	ldrb	r2, [r7, #3]
 800a244:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	78fa      	ldrb	r2, [r7, #3]
 800a24e:	4611      	mov	r1, r2
 800a250:	4618      	mov	r0, r3
 800a252:	f003 fdcc 	bl	800ddee <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2200      	movs	r2, #0
 800a25a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	4608      	mov	r0, r1
 800a272:	4611      	mov	r1, r2
 800a274:	461a      	mov	r2, r3
 800a276:	4603      	mov	r3, r0
 800a278:	70fb      	strb	r3, [r7, #3]
 800a27a:	460b      	mov	r3, r1
 800a27c:	803b      	strh	r3, [r7, #0]
 800a27e:	4613      	mov	r3, r2
 800a280:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a282:	2300      	movs	r3, #0
 800a284:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a286:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	da0f      	bge.n	800a2ae <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a28e:	78fb      	ldrb	r3, [r7, #3]
 800a290:	f003 020f 	and.w	r2, r3, #15
 800a294:	4613      	mov	r3, r2
 800a296:	00db      	lsls	r3, r3, #3
 800a298:	1a9b      	subs	r3, r3, r2
 800a29a:	009b      	lsls	r3, r3, #2
 800a29c:	3338      	adds	r3, #56	; 0x38
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	4413      	add	r3, r2
 800a2a2:	3304      	adds	r3, #4
 800a2a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	705a      	strb	r2, [r3, #1]
 800a2ac:	e00f      	b.n	800a2ce <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a2ae:	78fb      	ldrb	r3, [r7, #3]
 800a2b0:	f003 020f 	and.w	r2, r3, #15
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	00db      	lsls	r3, r3, #3
 800a2b8:	1a9b      	subs	r3, r3, r2
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	3304      	adds	r3, #4
 800a2c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a2ce:	78fb      	ldrb	r3, [r7, #3]
 800a2d0:	f003 030f 	and.w	r3, r3, #15
 800a2d4:	b2da      	uxtb	r2, r3
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a2da:	883a      	ldrh	r2, [r7, #0]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	78ba      	ldrb	r2, [r7, #2]
 800a2e4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	785b      	ldrb	r3, [r3, #1]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d004      	beq.n	800a2f8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	b29a      	uxth	r2, r3
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a2f8:	78bb      	ldrb	r3, [r7, #2]
 800a2fa:	2b02      	cmp	r3, #2
 800a2fc:	d102      	bne.n	800a304 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2200      	movs	r2, #0
 800a302:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	d101      	bne.n	800a312 <HAL_PCD_EP_Open+0xaa>
 800a30e:	2302      	movs	r3, #2
 800a310:	e00e      	b.n	800a330 <HAL_PCD_EP_Open+0xc8>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2201      	movs	r2, #1
 800a316:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	68f9      	ldr	r1, [r7, #12]
 800a320:	4618      	mov	r0, r3
 800a322:	f002 ff37 	bl	800d194 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2200      	movs	r2, #0
 800a32a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800a32e:	7afb      	ldrb	r3, [r7, #11]
}
 800a330:	4618      	mov	r0, r3
 800a332:	3710      	adds	r7, #16
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	460b      	mov	r3, r1
 800a342:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a344:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	da0f      	bge.n	800a36c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a34c:	78fb      	ldrb	r3, [r7, #3]
 800a34e:	f003 020f 	and.w	r2, r3, #15
 800a352:	4613      	mov	r3, r2
 800a354:	00db      	lsls	r3, r3, #3
 800a356:	1a9b      	subs	r3, r3, r2
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	3338      	adds	r3, #56	; 0x38
 800a35c:	687a      	ldr	r2, [r7, #4]
 800a35e:	4413      	add	r3, r2
 800a360:	3304      	adds	r3, #4
 800a362:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2201      	movs	r2, #1
 800a368:	705a      	strb	r2, [r3, #1]
 800a36a:	e00f      	b.n	800a38c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a36c:	78fb      	ldrb	r3, [r7, #3]
 800a36e:	f003 020f 	and.w	r2, r3, #15
 800a372:	4613      	mov	r3, r2
 800a374:	00db      	lsls	r3, r3, #3
 800a376:	1a9b      	subs	r3, r3, r2
 800a378:	009b      	lsls	r3, r3, #2
 800a37a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	4413      	add	r3, r2
 800a382:	3304      	adds	r3, #4
 800a384:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2200      	movs	r2, #0
 800a38a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a38c:	78fb      	ldrb	r3, [r7, #3]
 800a38e:	f003 030f 	and.w	r3, r3, #15
 800a392:	b2da      	uxtb	r2, r3
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d101      	bne.n	800a3a6 <HAL_PCD_EP_Close+0x6e>
 800a3a2:	2302      	movs	r3, #2
 800a3a4:	e00e      	b.n	800a3c4 <HAL_PCD_EP_Close+0x8c>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	68f9      	ldr	r1, [r7, #12]
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f002 ff75 	bl	800d2a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800a3c2:	2300      	movs	r3, #0
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b086      	sub	sp, #24
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	607a      	str	r2, [r7, #4]
 800a3d6:	603b      	str	r3, [r7, #0]
 800a3d8:	460b      	mov	r3, r1
 800a3da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a3dc:	7afb      	ldrb	r3, [r7, #11]
 800a3de:	f003 020f 	and.w	r2, r3, #15
 800a3e2:	4613      	mov	r3, r2
 800a3e4:	00db      	lsls	r3, r3, #3
 800a3e6:	1a9b      	subs	r3, r3, r2
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	4413      	add	r3, r2
 800a3f2:	3304      	adds	r3, #4
 800a3f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	683a      	ldr	r2, [r7, #0]
 800a400:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	2200      	movs	r2, #0
 800a406:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	2200      	movs	r2, #0
 800a40c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a40e:	7afb      	ldrb	r3, [r7, #11]
 800a410:	f003 030f 	and.w	r3, r3, #15
 800a414:	b2da      	uxtb	r2, r3
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	691b      	ldr	r3, [r3, #16]
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d102      	bne.n	800a428 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a428:	7afb      	ldrb	r3, [r7, #11]
 800a42a:	f003 030f 	and.w	r3, r3, #15
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d109      	bne.n	800a446 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	6818      	ldr	r0, [r3, #0]
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	691b      	ldr	r3, [r3, #16]
 800a43a:	b2db      	uxtb	r3, r3
 800a43c:	461a      	mov	r2, r3
 800a43e:	6979      	ldr	r1, [r7, #20]
 800a440:	f003 fa50 	bl	800d8e4 <USB_EP0StartXfer>
 800a444:	e008      	b.n	800a458 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	6818      	ldr	r0, [r3, #0]
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	691b      	ldr	r3, [r3, #16]
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	461a      	mov	r2, r3
 800a452:	6979      	ldr	r1, [r7, #20]
 800a454:	f003 f802 	bl	800d45c <USB_EPStartXfer>
  }

  return HAL_OK;
 800a458:	2300      	movs	r3, #0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3718      	adds	r7, #24
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}

0800a462 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a462:	b480      	push	{r7}
 800a464:	b083      	sub	sp, #12
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
 800a46a:	460b      	mov	r3, r1
 800a46c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a46e:	78fb      	ldrb	r3, [r7, #3]
 800a470:	f003 020f 	and.w	r2, r3, #15
 800a474:	6879      	ldr	r1, [r7, #4]
 800a476:	4613      	mov	r3, r2
 800a478:	00db      	lsls	r3, r3, #3
 800a47a:	1a9b      	subs	r3, r3, r2
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	440b      	add	r3, r1
 800a480:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a484:	681b      	ldr	r3, [r3, #0]
}
 800a486:	4618      	mov	r0, r3
 800a488:	370c      	adds	r7, #12
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr

0800a492 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a492:	b580      	push	{r7, lr}
 800a494:	b086      	sub	sp, #24
 800a496:	af00      	add	r7, sp, #0
 800a498:	60f8      	str	r0, [r7, #12]
 800a49a:	607a      	str	r2, [r7, #4]
 800a49c:	603b      	str	r3, [r7, #0]
 800a49e:	460b      	mov	r3, r1
 800a4a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a4a2:	7afb      	ldrb	r3, [r7, #11]
 800a4a4:	f003 020f 	and.w	r2, r3, #15
 800a4a8:	4613      	mov	r3, r2
 800a4aa:	00db      	lsls	r3, r3, #3
 800a4ac:	1a9b      	subs	r3, r3, r2
 800a4ae:	009b      	lsls	r3, r3, #2
 800a4b0:	3338      	adds	r3, #56	; 0x38
 800a4b2:	68fa      	ldr	r2, [r7, #12]
 800a4b4:	4413      	add	r3, r2
 800a4b6:	3304      	adds	r3, #4
 800a4b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	683a      	ldr	r2, [r7, #0]
 800a4c4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a4d2:	7afb      	ldrb	r3, [r7, #11]
 800a4d4:	f003 030f 	and.w	r3, r3, #15
 800a4d8:	b2da      	uxtb	r2, r3
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	691b      	ldr	r3, [r3, #16]
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d102      	bne.n	800a4ec <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a4e6:	687a      	ldr	r2, [r7, #4]
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a4ec:	7afb      	ldrb	r3, [r7, #11]
 800a4ee:	f003 030f 	and.w	r3, r3, #15
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d109      	bne.n	800a50a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	6818      	ldr	r0, [r3, #0]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	b2db      	uxtb	r3, r3
 800a500:	461a      	mov	r2, r3
 800a502:	6979      	ldr	r1, [r7, #20]
 800a504:	f003 f9ee 	bl	800d8e4 <USB_EP0StartXfer>
 800a508:	e008      	b.n	800a51c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	6818      	ldr	r0, [r3, #0]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	691b      	ldr	r3, [r3, #16]
 800a512:	b2db      	uxtb	r3, r3
 800a514:	461a      	mov	r2, r3
 800a516:	6979      	ldr	r1, [r7, #20]
 800a518:	f002 ffa0 	bl	800d45c <USB_EPStartXfer>
  }

  return HAL_OK;
 800a51c:	2300      	movs	r3, #0
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3718      	adds	r7, #24
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}

0800a526 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a526:	b580      	push	{r7, lr}
 800a528:	b084      	sub	sp, #16
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	6078      	str	r0, [r7, #4]
 800a52e:	460b      	mov	r3, r1
 800a530:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a532:	78fb      	ldrb	r3, [r7, #3]
 800a534:	f003 020f 	and.w	r2, r3, #15
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d901      	bls.n	800a544 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a540:	2301      	movs	r3, #1
 800a542:	e050      	b.n	800a5e6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a544:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	da0f      	bge.n	800a56c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a54c:	78fb      	ldrb	r3, [r7, #3]
 800a54e:	f003 020f 	and.w	r2, r3, #15
 800a552:	4613      	mov	r3, r2
 800a554:	00db      	lsls	r3, r3, #3
 800a556:	1a9b      	subs	r3, r3, r2
 800a558:	009b      	lsls	r3, r3, #2
 800a55a:	3338      	adds	r3, #56	; 0x38
 800a55c:	687a      	ldr	r2, [r7, #4]
 800a55e:	4413      	add	r3, r2
 800a560:	3304      	adds	r3, #4
 800a562:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2201      	movs	r2, #1
 800a568:	705a      	strb	r2, [r3, #1]
 800a56a:	e00d      	b.n	800a588 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a56c:	78fa      	ldrb	r2, [r7, #3]
 800a56e:	4613      	mov	r3, r2
 800a570:	00db      	lsls	r3, r3, #3
 800a572:	1a9b      	subs	r3, r3, r2
 800a574:	009b      	lsls	r3, r3, #2
 800a576:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a57a:	687a      	ldr	r2, [r7, #4]
 800a57c:	4413      	add	r3, r2
 800a57e:	3304      	adds	r3, #4
 800a580:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2200      	movs	r2, #0
 800a586:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2201      	movs	r2, #1
 800a58c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a58e:	78fb      	ldrb	r3, [r7, #3]
 800a590:	f003 030f 	and.w	r3, r3, #15
 800a594:	b2da      	uxtb	r2, r3
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d101      	bne.n	800a5a8 <HAL_PCD_EP_SetStall+0x82>
 800a5a4:	2302      	movs	r3, #2
 800a5a6:	e01e      	b.n	800a5e6 <HAL_PCD_EP_SetStall+0xc0>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	68f9      	ldr	r1, [r7, #12]
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f003 fb45 	bl	800dc46 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a5bc:	78fb      	ldrb	r3, [r7, #3]
 800a5be:	f003 030f 	and.w	r3, r3, #15
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d10a      	bne.n	800a5dc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6818      	ldr	r0, [r3, #0]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	691b      	ldr	r3, [r3, #16]
 800a5ce:	b2d9      	uxtb	r1, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	f003 fd24 	bl	800e024 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a5e4:	2300      	movs	r3, #0
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}

0800a5ee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a5ee:	b580      	push	{r7, lr}
 800a5f0:	b084      	sub	sp, #16
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	6078      	str	r0, [r7, #4]
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a5fa:	78fb      	ldrb	r3, [r7, #3]
 800a5fc:	f003 020f 	and.w	r2, r3, #15
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	429a      	cmp	r2, r3
 800a606:	d901      	bls.n	800a60c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a608:	2301      	movs	r3, #1
 800a60a:	e042      	b.n	800a692 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a60c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a610:	2b00      	cmp	r3, #0
 800a612:	da0f      	bge.n	800a634 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a614:	78fb      	ldrb	r3, [r7, #3]
 800a616:	f003 020f 	and.w	r2, r3, #15
 800a61a:	4613      	mov	r3, r2
 800a61c:	00db      	lsls	r3, r3, #3
 800a61e:	1a9b      	subs	r3, r3, r2
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	3338      	adds	r3, #56	; 0x38
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	4413      	add	r3, r2
 800a628:	3304      	adds	r3, #4
 800a62a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2201      	movs	r2, #1
 800a630:	705a      	strb	r2, [r3, #1]
 800a632:	e00f      	b.n	800a654 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a634:	78fb      	ldrb	r3, [r7, #3]
 800a636:	f003 020f 	and.w	r2, r3, #15
 800a63a:	4613      	mov	r3, r2
 800a63c:	00db      	lsls	r3, r3, #3
 800a63e:	1a9b      	subs	r3, r3, r2
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	4413      	add	r3, r2
 800a64a:	3304      	adds	r3, #4
 800a64c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2200      	movs	r2, #0
 800a652:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2200      	movs	r2, #0
 800a658:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a65a:	78fb      	ldrb	r3, [r7, #3]
 800a65c:	f003 030f 	and.w	r3, r3, #15
 800a660:	b2da      	uxtb	r2, r3
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d101      	bne.n	800a674 <HAL_PCD_EP_ClrStall+0x86>
 800a670:	2302      	movs	r3, #2
 800a672:	e00e      	b.n	800a692 <HAL_PCD_EP_ClrStall+0xa4>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2201      	movs	r2, #1
 800a678:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	68f9      	ldr	r1, [r7, #12]
 800a682:	4618      	mov	r0, r3
 800a684:	f003 fb4d 	bl	800dd22 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	3710      	adds	r7, #16
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a69a:	b580      	push	{r7, lr}
 800a69c:	b08a      	sub	sp, #40	; 0x28
 800a69e:	af02      	add	r7, sp, #8
 800a6a0:	6078      	str	r0, [r7, #4]
 800a6a2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a6ae:	683a      	ldr	r2, [r7, #0]
 800a6b0:	4613      	mov	r3, r2
 800a6b2:	00db      	lsls	r3, r3, #3
 800a6b4:	1a9b      	subs	r3, r3, r2
 800a6b6:	009b      	lsls	r3, r3, #2
 800a6b8:	3338      	adds	r3, #56	; 0x38
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	4413      	add	r3, r2
 800a6be:	3304      	adds	r3, #4
 800a6c0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	699a      	ldr	r2, [r3, #24]
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	695b      	ldr	r3, [r3, #20]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d901      	bls.n	800a6d2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e06c      	b.n	800a7ac <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	695a      	ldr	r2, [r3, #20]
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	699b      	ldr	r3, [r3, #24]
 800a6da:	1ad3      	subs	r3, r2, r3
 800a6dc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	689b      	ldr	r3, [r3, #8]
 800a6e2:	69fa      	ldr	r2, [r7, #28]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d902      	bls.n	800a6ee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	689b      	ldr	r3, [r3, #8]
 800a6ec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a6ee:	69fb      	ldr	r3, [r7, #28]
 800a6f0:	3303      	adds	r3, #3
 800a6f2:	089b      	lsrs	r3, r3, #2
 800a6f4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a6f6:	e02b      	b.n	800a750 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	695a      	ldr	r2, [r3, #20]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	699b      	ldr	r3, [r3, #24]
 800a700:	1ad3      	subs	r3, r2, r3
 800a702:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	689b      	ldr	r3, [r3, #8]
 800a708:	69fa      	ldr	r2, [r7, #28]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d902      	bls.n	800a714 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	689b      	ldr	r3, [r3, #8]
 800a712:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a714:	69fb      	ldr	r3, [r7, #28]
 800a716:	3303      	adds	r3, #3
 800a718:	089b      	lsrs	r3, r3, #2
 800a71a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	68d9      	ldr	r1, [r3, #12]
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	b2da      	uxtb	r2, r3
 800a724:	69fb      	ldr	r3, [r7, #28]
 800a726:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	9300      	str	r3, [sp, #0]
 800a730:	4603      	mov	r3, r0
 800a732:	6978      	ldr	r0, [r7, #20]
 800a734:	f003 fa29 	bl	800db8a <USB_WritePacket>

    ep->xfer_buff  += len;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	68da      	ldr	r2, [r3, #12]
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	441a      	add	r2, r3
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	699a      	ldr	r2, [r3, #24]
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	441a      	add	r2, r3
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	015a      	lsls	r2, r3, #5
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	4413      	add	r3, r2
 800a758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a75c:	699b      	ldr	r3, [r3, #24]
 800a75e:	b29b      	uxth	r3, r3
 800a760:	69ba      	ldr	r2, [r7, #24]
 800a762:	429a      	cmp	r2, r3
 800a764:	d809      	bhi.n	800a77a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	699a      	ldr	r2, [r3, #24]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a76e:	429a      	cmp	r2, r3
 800a770:	d203      	bcs.n	800a77a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	695b      	ldr	r3, [r3, #20]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d1be      	bne.n	800a6f8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	695a      	ldr	r2, [r3, #20]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	699b      	ldr	r3, [r3, #24]
 800a782:	429a      	cmp	r2, r3
 800a784:	d811      	bhi.n	800a7aa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	f003 030f 	and.w	r3, r3, #15
 800a78c:	2201      	movs	r2, #1
 800a78e:	fa02 f303 	lsl.w	r3, r2, r3
 800a792:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a79a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	43db      	mvns	r3, r3
 800a7a0:	6939      	ldr	r1, [r7, #16]
 800a7a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a7a6:	4013      	ands	r3, r2
 800a7a8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a7aa:	2300      	movs	r3, #0
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3720      	adds	r7, #32
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b086      	sub	sp, #24
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	333c      	adds	r3, #60	; 0x3c
 800a7cc:	3304      	adds	r3, #4
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	015a      	lsls	r2, r3, #5
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	4413      	add	r3, r2
 800a7da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	691b      	ldr	r3, [r3, #16]
 800a7e6:	2b01      	cmp	r3, #1
 800a7e8:	f040 80a0 	bne.w	800a92c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	f003 0308 	and.w	r3, r3, #8
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d015      	beq.n	800a822 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	4a72      	ldr	r2, [pc, #456]	; (800a9c4 <PCD_EP_OutXfrComplete_int+0x210>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	f240 80dd 	bls.w	800a9ba <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a806:	2b00      	cmp	r3, #0
 800a808:	f000 80d7 	beq.w	800a9ba <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	015a      	lsls	r2, r3, #5
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	4413      	add	r3, r2
 800a814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a818:	461a      	mov	r2, r3
 800a81a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a81e:	6093      	str	r3, [r2, #8]
 800a820:	e0cb      	b.n	800a9ba <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	f003 0320 	and.w	r3, r3, #32
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d009      	beq.n	800a840 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	015a      	lsls	r2, r3, #5
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	4413      	add	r3, r2
 800a834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a838:	461a      	mov	r2, r3
 800a83a:	2320      	movs	r3, #32
 800a83c:	6093      	str	r3, [r2, #8]
 800a83e:	e0bc      	b.n	800a9ba <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a846:	2b00      	cmp	r3, #0
 800a848:	f040 80b7 	bne.w	800a9ba <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	4a5d      	ldr	r2, [pc, #372]	; (800a9c4 <PCD_EP_OutXfrComplete_int+0x210>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d90f      	bls.n	800a874 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d00a      	beq.n	800a874 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	015a      	lsls	r2, r3, #5
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	4413      	add	r3, r2
 800a866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a86a:	461a      	mov	r2, r3
 800a86c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a870:	6093      	str	r3, [r2, #8]
 800a872:	e0a2      	b.n	800a9ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800a874:	6879      	ldr	r1, [r7, #4]
 800a876:	683a      	ldr	r2, [r7, #0]
 800a878:	4613      	mov	r3, r2
 800a87a:	00db      	lsls	r3, r3, #3
 800a87c:	1a9b      	subs	r3, r3, r2
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	440b      	add	r3, r1
 800a882:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a886:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	0159      	lsls	r1, r3, #5
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	440b      	add	r3, r1
 800a890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a894:	691b      	ldr	r3, [r3, #16]
 800a896:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800a89a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	683a      	ldr	r2, [r7, #0]
 800a8a0:	4613      	mov	r3, r2
 800a8a2:	00db      	lsls	r3, r3, #3
 800a8a4:	1a9b      	subs	r3, r3, r2
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	4403      	add	r3, r0
 800a8aa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a8ae:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800a8b0:	6879      	ldr	r1, [r7, #4]
 800a8b2:	683a      	ldr	r2, [r7, #0]
 800a8b4:	4613      	mov	r3, r2
 800a8b6:	00db      	lsls	r3, r3, #3
 800a8b8:	1a9b      	subs	r3, r3, r2
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	440b      	add	r3, r1
 800a8be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a8c2:	6819      	ldr	r1, [r3, #0]
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	683a      	ldr	r2, [r7, #0]
 800a8c8:	4613      	mov	r3, r2
 800a8ca:	00db      	lsls	r3, r3, #3
 800a8cc:	1a9b      	subs	r3, r3, r2
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	4403      	add	r3, r0
 800a8d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4419      	add	r1, r3
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	683a      	ldr	r2, [r7, #0]
 800a8de:	4613      	mov	r3, r2
 800a8e0:	00db      	lsls	r3, r3, #3
 800a8e2:	1a9b      	subs	r3, r3, r2
 800a8e4:	009b      	lsls	r3, r3, #2
 800a8e6:	4403      	add	r3, r0
 800a8e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a8ec:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d114      	bne.n	800a91e <PCD_EP_OutXfrComplete_int+0x16a>
 800a8f4:	6879      	ldr	r1, [r7, #4]
 800a8f6:	683a      	ldr	r2, [r7, #0]
 800a8f8:	4613      	mov	r3, r2
 800a8fa:	00db      	lsls	r3, r3, #3
 800a8fc:	1a9b      	subs	r3, r3, r2
 800a8fe:	009b      	lsls	r3, r3, #2
 800a900:	440b      	add	r3, r1
 800a902:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d108      	bne.n	800a91e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6818      	ldr	r0, [r3, #0]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a916:	461a      	mov	r2, r3
 800a918:	2101      	movs	r1, #1
 800a91a:	f003 fb83 	bl	800e024 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	b2db      	uxtb	r3, r3
 800a922:	4619      	mov	r1, r3
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f005 fa2f 	bl	800fd88 <HAL_PCD_DataOutStageCallback>
 800a92a:	e046      	b.n	800a9ba <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	4a26      	ldr	r2, [pc, #152]	; (800a9c8 <PCD_EP_OutXfrComplete_int+0x214>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d124      	bne.n	800a97e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00a      	beq.n	800a954 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	015a      	lsls	r2, r3, #5
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	4413      	add	r3, r2
 800a946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a94a:	461a      	mov	r2, r3
 800a94c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a950:	6093      	str	r3, [r2, #8]
 800a952:	e032      	b.n	800a9ba <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	f003 0320 	and.w	r3, r3, #32
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d008      	beq.n	800a970 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	015a      	lsls	r2, r3, #5
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	4413      	add	r3, r2
 800a966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a96a:	461a      	mov	r2, r3
 800a96c:	2320      	movs	r3, #32
 800a96e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	b2db      	uxtb	r3, r3
 800a974:	4619      	mov	r1, r3
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f005 fa06 	bl	800fd88 <HAL_PCD_DataOutStageCallback>
 800a97c:	e01d      	b.n	800a9ba <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d114      	bne.n	800a9ae <PCD_EP_OutXfrComplete_int+0x1fa>
 800a984:	6879      	ldr	r1, [r7, #4]
 800a986:	683a      	ldr	r2, [r7, #0]
 800a988:	4613      	mov	r3, r2
 800a98a:	00db      	lsls	r3, r3, #3
 800a98c:	1a9b      	subs	r3, r3, r2
 800a98e:	009b      	lsls	r3, r3, #2
 800a990:	440b      	add	r3, r1
 800a992:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d108      	bne.n	800a9ae <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6818      	ldr	r0, [r3, #0]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	2100      	movs	r1, #0
 800a9aa:	f003 fb3b 	bl	800e024 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f005 f9e7 	bl	800fd88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a9ba:	2300      	movs	r3, #0
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3718      	adds	r7, #24
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}
 800a9c4:	4f54300a 	.word	0x4f54300a
 800a9c8:	4f54310a 	.word	0x4f54310a

0800a9cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b086      	sub	sp, #24
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	333c      	adds	r3, #60	; 0x3c
 800a9e4:	3304      	adds	r3, #4
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	015a      	lsls	r2, r3, #5
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	4a15      	ldr	r2, [pc, #84]	; (800aa54 <PCD_EP_OutSetupPacket_int+0x88>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d90e      	bls.n	800aa20 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d009      	beq.n	800aa20 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	015a      	lsls	r2, r3, #5
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	4413      	add	r3, r2
 800aa14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa18:	461a      	mov	r2, r3
 800aa1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa1e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f005 f99f 	bl	800fd64 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	4a0a      	ldr	r2, [pc, #40]	; (800aa54 <PCD_EP_OutSetupPacket_int+0x88>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d90c      	bls.n	800aa48 <PCD_EP_OutSetupPacket_int+0x7c>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	691b      	ldr	r3, [r3, #16]
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d108      	bne.n	800aa48 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6818      	ldr	r0, [r3, #0]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800aa40:	461a      	mov	r2, r3
 800aa42:	2101      	movs	r1, #1
 800aa44:	f003 faee 	bl	800e024 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800aa48:	2300      	movs	r3, #0
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3718      	adds	r7, #24
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	4f54300a 	.word	0x4f54300a

0800aa58 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b085      	sub	sp, #20
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	460b      	mov	r3, r1
 800aa62:	70fb      	strb	r3, [r7, #3]
 800aa64:	4613      	mov	r3, r2
 800aa66:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800aa70:	78fb      	ldrb	r3, [r7, #3]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d107      	bne.n	800aa86 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800aa76:	883b      	ldrh	r3, [r7, #0]
 800aa78:	0419      	lsls	r1, r3, #16
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	68ba      	ldr	r2, [r7, #8]
 800aa80:	430a      	orrs	r2, r1
 800aa82:	629a      	str	r2, [r3, #40]	; 0x28
 800aa84:	e028      	b.n	800aad8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa8c:	0c1b      	lsrs	r3, r3, #16
 800aa8e:	68ba      	ldr	r2, [r7, #8]
 800aa90:	4413      	add	r3, r2
 800aa92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800aa94:	2300      	movs	r3, #0
 800aa96:	73fb      	strb	r3, [r7, #15]
 800aa98:	e00d      	b.n	800aab6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	7bfb      	ldrb	r3, [r7, #15]
 800aaa0:	3340      	adds	r3, #64	; 0x40
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	4413      	add	r3, r2
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	0c1b      	lsrs	r3, r3, #16
 800aaaa:	68ba      	ldr	r2, [r7, #8]
 800aaac:	4413      	add	r3, r2
 800aaae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800aab0:	7bfb      	ldrb	r3, [r7, #15]
 800aab2:	3301      	adds	r3, #1
 800aab4:	73fb      	strb	r3, [r7, #15]
 800aab6:	7bfa      	ldrb	r2, [r7, #15]
 800aab8:	78fb      	ldrb	r3, [r7, #3]
 800aaba:	3b01      	subs	r3, #1
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d3ec      	bcc.n	800aa9a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800aac0:	883b      	ldrh	r3, [r7, #0]
 800aac2:	0418      	lsls	r0, r3, #16
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6819      	ldr	r1, [r3, #0]
 800aac8:	78fb      	ldrb	r3, [r7, #3]
 800aaca:	3b01      	subs	r3, #1
 800aacc:	68ba      	ldr	r2, [r7, #8]
 800aace:	4302      	orrs	r2, r0
 800aad0:	3340      	adds	r3, #64	; 0x40
 800aad2:	009b      	lsls	r3, r3, #2
 800aad4:	440b      	add	r3, r1
 800aad6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800aad8:	2300      	movs	r3, #0
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3714      	adds	r7, #20
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr

0800aae6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800aae6:	b480      	push	{r7}
 800aae8:	b083      	sub	sp, #12
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
 800aaee:	460b      	mov	r3, r1
 800aaf0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	887a      	ldrh	r2, [r7, #2]
 800aaf8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800aafa:	2300      	movs	r3, #0
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	370c      	adds	r7, #12
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b083      	sub	sp, #12
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	460b      	mov	r3, r1
 800ab12:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800ab14:	bf00      	nop
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b086      	sub	sp, #24
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d101      	bne.n	800ab32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e25b      	b.n	800afea <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f003 0301 	and.w	r3, r3, #1
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d075      	beq.n	800ac2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ab3e:	4ba3      	ldr	r3, [pc, #652]	; (800adcc <HAL_RCC_OscConfig+0x2ac>)
 800ab40:	689b      	ldr	r3, [r3, #8]
 800ab42:	f003 030c 	and.w	r3, r3, #12
 800ab46:	2b04      	cmp	r3, #4
 800ab48:	d00c      	beq.n	800ab64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ab4a:	4ba0      	ldr	r3, [pc, #640]	; (800adcc <HAL_RCC_OscConfig+0x2ac>)
 800ab4c:	689b      	ldr	r3, [r3, #8]
 800ab4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ab52:	2b08      	cmp	r3, #8
 800ab54:	d112      	bne.n	800ab7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ab56:	4b9d      	ldr	r3, [pc, #628]	; (800adcc <HAL_RCC_OscConfig+0x2ac>)
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab62:	d10b      	bne.n	800ab7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab64:	4b99      	ldr	r3, [pc, #612]	; (800adcc <HAL_RCC_OscConfig+0x2ac>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d05b      	beq.n	800ac28 <HAL_RCC_OscConfig+0x108>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d157      	bne.n	800ac28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	e236      	b.n	800afea <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab84:	d106      	bne.n	800ab94 <HAL_RCC_OscConfig+0x74>
 800ab86:	4b91      	ldr	r3, [pc, #580]	; (800adcc <HAL_RCC_OscConfig+0x2ac>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4a90      	ldr	r2, [pc, #576]	; (800adcc <HAL_RCC_OscConfig+0x2ac>)
 800ab8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab90:	6013      	str	r3, [r2, #0]
 800ab92:	e01d      	b.n	800abd0 <HAL_RCC_OscConfig+0xb0>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ab9c:	d10c      	bne.n	800abb8 <HAL_RCC_OscConfig+0x98>
 800ab9e:	4b8b      	ldr	r3, [pc, #556]	; (800adcc <HAL_RCC_OscConfig+0x2ac>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4a8a      	ldr	r2, [pc, #552]	; (800adcc <HAL_RCC_OscConfig+0x2ac>)
 800aba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aba8:	6013      	str	r3, [r2, #0]
 800abaa:	4b88      	ldr	r3, [pc, #544]	; (800adcc <HAL_RCC_OscConfig+0x2ac>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4a87      	ldr	r2, [pc, #540]	; (800adcc <HAL_RCC_OscConfig+0x2ac>)
 800abb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800abb4:	6013      	str	r3, [r2, #0]
 800abb6:	e00b      	b.n	800abd0 <HAL_RCC_OscConfig+0xb0>
 800abb8:	4b84      	ldr	r3, [pc, #528]	; (800adcc <HAL_RCC_OscConfig+0x2ac>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a83      	ldr	r2, [pc, #524]	; (800adcc <HAL_RCC_OscConfig+0x2ac>)
 800abbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800abc2:	6013      	str	r3, [r2, #0]
 800abc4:	4b81      	ldr	r3, [pc, #516]	; (800adcc <HAL_RCC_OscConfig+0x2ac>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a80      	ldr	r2, [pc, #512]	; (800adcc <HAL_RCC_OscConfig+0x2ac>)
 800abca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800abce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d013      	beq.n	800ac00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800abd8:	f7fb faa0 	bl	800611c <HAL_GetTick>
 800abdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800abde:	e008      	b.n	800abf2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800abe0:	f7fb fa9c 	bl	800611c <HAL_GetTick>
 800abe4:	4602      	mov	r2, r0
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	1ad3      	subs	r3, r2, r3
 800abea:	2b64      	cmp	r3, #100	; 0x64
 800abec:	d901      	bls.n	800abf2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800abee:	2303      	movs	r3, #3
 800abf0:	e1fb      	b.n	800afea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800abf2:	4b76      	ldr	r3, [pc, #472]	; (800adcc <HAL_RCC_OscConfig+0x2ac>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d0f0      	beq.n	800abe0 <HAL_RCC_OscConfig+0xc0>
 800abfe:	e014      	b.n	800ac2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac00:	f7fb fa8c 	bl	800611c <HAL_GetTick>
 800ac04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ac06:	e008      	b.n	800ac1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ac08:	f7fb fa88 	bl	800611c <HAL_GetTick>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	1ad3      	subs	r3, r2, r3
 800ac12:	2b64      	cmp	r3, #100	; 0x64
 800ac14:	d901      	bls.n	800ac1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ac16:	2303      	movs	r3, #3
 800ac18:	e1e7      	b.n	800afea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ac1a:	4b6c      	ldr	r3, [pc, #432]	; (800adcc <HAL_RCC_OscConfig+0x2ac>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d1f0      	bne.n	800ac08 <HAL_RCC_OscConfig+0xe8>
 800ac26:	e000      	b.n	800ac2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f003 0302 	and.w	r3, r3, #2
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d063      	beq.n	800acfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ac36:	4b65      	ldr	r3, [pc, #404]	; (800adcc <HAL_RCC_OscConfig+0x2ac>)
 800ac38:	689b      	ldr	r3, [r3, #8]
 800ac3a:	f003 030c 	and.w	r3, r3, #12
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d00b      	beq.n	800ac5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ac42:	4b62      	ldr	r3, [pc, #392]	; (800adcc <HAL_RCC_OscConfig+0x2ac>)
 800ac44:	689b      	ldr	r3, [r3, #8]
 800ac46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ac4a:	2b08      	cmp	r3, #8
 800ac4c:	d11c      	bne.n	800ac88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ac4e:	4b5f      	ldr	r3, [pc, #380]	; (800adcc <HAL_RCC_OscConfig+0x2ac>)
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d116      	bne.n	800ac88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ac5a:	4b5c      	ldr	r3, [pc, #368]	; (800adcc <HAL_RCC_OscConfig+0x2ac>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f003 0302 	and.w	r3, r3, #2
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d005      	beq.n	800ac72 <HAL_RCC_OscConfig+0x152>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	68db      	ldr	r3, [r3, #12]
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d001      	beq.n	800ac72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e1bb      	b.n	800afea <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac72:	4b56      	ldr	r3, [pc, #344]	; (800adcc <HAL_RCC_OscConfig+0x2ac>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	691b      	ldr	r3, [r3, #16]
 800ac7e:	00db      	lsls	r3, r3, #3
 800ac80:	4952      	ldr	r1, [pc, #328]	; (800adcc <HAL_RCC_OscConfig+0x2ac>)
 800ac82:	4313      	orrs	r3, r2
 800ac84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ac86:	e03a      	b.n	800acfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d020      	beq.n	800acd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ac90:	4b4f      	ldr	r3, [pc, #316]	; (800add0 <HAL_RCC_OscConfig+0x2b0>)
 800ac92:	2201      	movs	r2, #1
 800ac94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac96:	f7fb fa41 	bl	800611c <HAL_GetTick>
 800ac9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac9c:	e008      	b.n	800acb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ac9e:	f7fb fa3d 	bl	800611c <HAL_GetTick>
 800aca2:	4602      	mov	r2, r0
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	1ad3      	subs	r3, r2, r3
 800aca8:	2b02      	cmp	r3, #2
 800acaa:	d901      	bls.n	800acb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800acac:	2303      	movs	r3, #3
 800acae:	e19c      	b.n	800afea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800acb0:	4b46      	ldr	r3, [pc, #280]	; (800adcc <HAL_RCC_OscConfig+0x2ac>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f003 0302 	and.w	r3, r3, #2
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d0f0      	beq.n	800ac9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800acbc:	4b43      	ldr	r3, [pc, #268]	; (800adcc <HAL_RCC_OscConfig+0x2ac>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	691b      	ldr	r3, [r3, #16]
 800acc8:	00db      	lsls	r3, r3, #3
 800acca:	4940      	ldr	r1, [pc, #256]	; (800adcc <HAL_RCC_OscConfig+0x2ac>)
 800accc:	4313      	orrs	r3, r2
 800acce:	600b      	str	r3, [r1, #0]
 800acd0:	e015      	b.n	800acfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800acd2:	4b3f      	ldr	r3, [pc, #252]	; (800add0 <HAL_RCC_OscConfig+0x2b0>)
 800acd4:	2200      	movs	r2, #0
 800acd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acd8:	f7fb fa20 	bl	800611c <HAL_GetTick>
 800acdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800acde:	e008      	b.n	800acf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ace0:	f7fb fa1c 	bl	800611c <HAL_GetTick>
 800ace4:	4602      	mov	r2, r0
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	1ad3      	subs	r3, r2, r3
 800acea:	2b02      	cmp	r3, #2
 800acec:	d901      	bls.n	800acf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800acee:	2303      	movs	r3, #3
 800acf0:	e17b      	b.n	800afea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800acf2:	4b36      	ldr	r3, [pc, #216]	; (800adcc <HAL_RCC_OscConfig+0x2ac>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f003 0302 	and.w	r3, r3, #2
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d1f0      	bne.n	800ace0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f003 0308 	and.w	r3, r3, #8
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d030      	beq.n	800ad6c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	695b      	ldr	r3, [r3, #20]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d016      	beq.n	800ad40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ad12:	4b30      	ldr	r3, [pc, #192]	; (800add4 <HAL_RCC_OscConfig+0x2b4>)
 800ad14:	2201      	movs	r2, #1
 800ad16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad18:	f7fb fa00 	bl	800611c <HAL_GetTick>
 800ad1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ad1e:	e008      	b.n	800ad32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ad20:	f7fb f9fc 	bl	800611c <HAL_GetTick>
 800ad24:	4602      	mov	r2, r0
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	1ad3      	subs	r3, r2, r3
 800ad2a:	2b02      	cmp	r3, #2
 800ad2c:	d901      	bls.n	800ad32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ad2e:	2303      	movs	r3, #3
 800ad30:	e15b      	b.n	800afea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ad32:	4b26      	ldr	r3, [pc, #152]	; (800adcc <HAL_RCC_OscConfig+0x2ac>)
 800ad34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad36:	f003 0302 	and.w	r3, r3, #2
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d0f0      	beq.n	800ad20 <HAL_RCC_OscConfig+0x200>
 800ad3e:	e015      	b.n	800ad6c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ad40:	4b24      	ldr	r3, [pc, #144]	; (800add4 <HAL_RCC_OscConfig+0x2b4>)
 800ad42:	2200      	movs	r2, #0
 800ad44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ad46:	f7fb f9e9 	bl	800611c <HAL_GetTick>
 800ad4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ad4c:	e008      	b.n	800ad60 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ad4e:	f7fb f9e5 	bl	800611c <HAL_GetTick>
 800ad52:	4602      	mov	r2, r0
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	1ad3      	subs	r3, r2, r3
 800ad58:	2b02      	cmp	r3, #2
 800ad5a:	d901      	bls.n	800ad60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800ad5c:	2303      	movs	r3, #3
 800ad5e:	e144      	b.n	800afea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ad60:	4b1a      	ldr	r3, [pc, #104]	; (800adcc <HAL_RCC_OscConfig+0x2ac>)
 800ad62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad64:	f003 0302 	and.w	r3, r3, #2
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d1f0      	bne.n	800ad4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f003 0304 	and.w	r3, r3, #4
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	f000 80a0 	beq.w	800aeba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ad7e:	4b13      	ldr	r3, [pc, #76]	; (800adcc <HAL_RCC_OscConfig+0x2ac>)
 800ad80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d10f      	bne.n	800adaa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	60bb      	str	r3, [r7, #8]
 800ad8e:	4b0f      	ldr	r3, [pc, #60]	; (800adcc <HAL_RCC_OscConfig+0x2ac>)
 800ad90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad92:	4a0e      	ldr	r2, [pc, #56]	; (800adcc <HAL_RCC_OscConfig+0x2ac>)
 800ad94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad98:	6413      	str	r3, [r2, #64]	; 0x40
 800ad9a:	4b0c      	ldr	r3, [pc, #48]	; (800adcc <HAL_RCC_OscConfig+0x2ac>)
 800ad9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ada2:	60bb      	str	r3, [r7, #8]
 800ada4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ada6:	2301      	movs	r3, #1
 800ada8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800adaa:	4b0b      	ldr	r3, [pc, #44]	; (800add8 <HAL_RCC_OscConfig+0x2b8>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d121      	bne.n	800adfa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800adb6:	4b08      	ldr	r3, [pc, #32]	; (800add8 <HAL_RCC_OscConfig+0x2b8>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4a07      	ldr	r2, [pc, #28]	; (800add8 <HAL_RCC_OscConfig+0x2b8>)
 800adbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800adc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800adc2:	f7fb f9ab 	bl	800611c <HAL_GetTick>
 800adc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800adc8:	e011      	b.n	800adee <HAL_RCC_OscConfig+0x2ce>
 800adca:	bf00      	nop
 800adcc:	40023800 	.word	0x40023800
 800add0:	42470000 	.word	0x42470000
 800add4:	42470e80 	.word	0x42470e80
 800add8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800addc:	f7fb f99e 	bl	800611c <HAL_GetTick>
 800ade0:	4602      	mov	r2, r0
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	1ad3      	subs	r3, r2, r3
 800ade6:	2b02      	cmp	r3, #2
 800ade8:	d901      	bls.n	800adee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800adea:	2303      	movs	r3, #3
 800adec:	e0fd      	b.n	800afea <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800adee:	4b81      	ldr	r3, [pc, #516]	; (800aff4 <HAL_RCC_OscConfig+0x4d4>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d0f0      	beq.n	800addc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	689b      	ldr	r3, [r3, #8]
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d106      	bne.n	800ae10 <HAL_RCC_OscConfig+0x2f0>
 800ae02:	4b7d      	ldr	r3, [pc, #500]	; (800aff8 <HAL_RCC_OscConfig+0x4d8>)
 800ae04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae06:	4a7c      	ldr	r2, [pc, #496]	; (800aff8 <HAL_RCC_OscConfig+0x4d8>)
 800ae08:	f043 0301 	orr.w	r3, r3, #1
 800ae0c:	6713      	str	r3, [r2, #112]	; 0x70
 800ae0e:	e01c      	b.n	800ae4a <HAL_RCC_OscConfig+0x32a>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	689b      	ldr	r3, [r3, #8]
 800ae14:	2b05      	cmp	r3, #5
 800ae16:	d10c      	bne.n	800ae32 <HAL_RCC_OscConfig+0x312>
 800ae18:	4b77      	ldr	r3, [pc, #476]	; (800aff8 <HAL_RCC_OscConfig+0x4d8>)
 800ae1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae1c:	4a76      	ldr	r2, [pc, #472]	; (800aff8 <HAL_RCC_OscConfig+0x4d8>)
 800ae1e:	f043 0304 	orr.w	r3, r3, #4
 800ae22:	6713      	str	r3, [r2, #112]	; 0x70
 800ae24:	4b74      	ldr	r3, [pc, #464]	; (800aff8 <HAL_RCC_OscConfig+0x4d8>)
 800ae26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae28:	4a73      	ldr	r2, [pc, #460]	; (800aff8 <HAL_RCC_OscConfig+0x4d8>)
 800ae2a:	f043 0301 	orr.w	r3, r3, #1
 800ae2e:	6713      	str	r3, [r2, #112]	; 0x70
 800ae30:	e00b      	b.n	800ae4a <HAL_RCC_OscConfig+0x32a>
 800ae32:	4b71      	ldr	r3, [pc, #452]	; (800aff8 <HAL_RCC_OscConfig+0x4d8>)
 800ae34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae36:	4a70      	ldr	r2, [pc, #448]	; (800aff8 <HAL_RCC_OscConfig+0x4d8>)
 800ae38:	f023 0301 	bic.w	r3, r3, #1
 800ae3c:	6713      	str	r3, [r2, #112]	; 0x70
 800ae3e:	4b6e      	ldr	r3, [pc, #440]	; (800aff8 <HAL_RCC_OscConfig+0x4d8>)
 800ae40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae42:	4a6d      	ldr	r2, [pc, #436]	; (800aff8 <HAL_RCC_OscConfig+0x4d8>)
 800ae44:	f023 0304 	bic.w	r3, r3, #4
 800ae48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d015      	beq.n	800ae7e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae52:	f7fb f963 	bl	800611c <HAL_GetTick>
 800ae56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ae58:	e00a      	b.n	800ae70 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ae5a:	f7fb f95f 	bl	800611c <HAL_GetTick>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	1ad3      	subs	r3, r2, r3
 800ae64:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d901      	bls.n	800ae70 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800ae6c:	2303      	movs	r3, #3
 800ae6e:	e0bc      	b.n	800afea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ae70:	4b61      	ldr	r3, [pc, #388]	; (800aff8 <HAL_RCC_OscConfig+0x4d8>)
 800ae72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae74:	f003 0302 	and.w	r3, r3, #2
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d0ee      	beq.n	800ae5a <HAL_RCC_OscConfig+0x33a>
 800ae7c:	e014      	b.n	800aea8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ae7e:	f7fb f94d 	bl	800611c <HAL_GetTick>
 800ae82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ae84:	e00a      	b.n	800ae9c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ae86:	f7fb f949 	bl	800611c <HAL_GetTick>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	1ad3      	subs	r3, r2, r3
 800ae90:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d901      	bls.n	800ae9c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800ae98:	2303      	movs	r3, #3
 800ae9a:	e0a6      	b.n	800afea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ae9c:	4b56      	ldr	r3, [pc, #344]	; (800aff8 <HAL_RCC_OscConfig+0x4d8>)
 800ae9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aea0:	f003 0302 	and.w	r3, r3, #2
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d1ee      	bne.n	800ae86 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aea8:	7dfb      	ldrb	r3, [r7, #23]
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d105      	bne.n	800aeba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aeae:	4b52      	ldr	r3, [pc, #328]	; (800aff8 <HAL_RCC_OscConfig+0x4d8>)
 800aeb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb2:	4a51      	ldr	r2, [pc, #324]	; (800aff8 <HAL_RCC_OscConfig+0x4d8>)
 800aeb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aeb8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	699b      	ldr	r3, [r3, #24]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	f000 8092 	beq.w	800afe8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800aec4:	4b4c      	ldr	r3, [pc, #304]	; (800aff8 <HAL_RCC_OscConfig+0x4d8>)
 800aec6:	689b      	ldr	r3, [r3, #8]
 800aec8:	f003 030c 	and.w	r3, r3, #12
 800aecc:	2b08      	cmp	r3, #8
 800aece:	d05c      	beq.n	800af8a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	699b      	ldr	r3, [r3, #24]
 800aed4:	2b02      	cmp	r3, #2
 800aed6:	d141      	bne.n	800af5c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aed8:	4b48      	ldr	r3, [pc, #288]	; (800affc <HAL_RCC_OscConfig+0x4dc>)
 800aeda:	2200      	movs	r2, #0
 800aedc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aede:	f7fb f91d 	bl	800611c <HAL_GetTick>
 800aee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aee4:	e008      	b.n	800aef8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aee6:	f7fb f919 	bl	800611c <HAL_GetTick>
 800aeea:	4602      	mov	r2, r0
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	1ad3      	subs	r3, r2, r3
 800aef0:	2b02      	cmp	r3, #2
 800aef2:	d901      	bls.n	800aef8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800aef4:	2303      	movs	r3, #3
 800aef6:	e078      	b.n	800afea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aef8:	4b3f      	ldr	r3, [pc, #252]	; (800aff8 <HAL_RCC_OscConfig+0x4d8>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af00:	2b00      	cmp	r3, #0
 800af02:	d1f0      	bne.n	800aee6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	69da      	ldr	r2, [r3, #28]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6a1b      	ldr	r3, [r3, #32]
 800af0c:	431a      	orrs	r2, r3
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af12:	019b      	lsls	r3, r3, #6
 800af14:	431a      	orrs	r2, r3
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af1a:	085b      	lsrs	r3, r3, #1
 800af1c:	3b01      	subs	r3, #1
 800af1e:	041b      	lsls	r3, r3, #16
 800af20:	431a      	orrs	r2, r3
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af26:	061b      	lsls	r3, r3, #24
 800af28:	4933      	ldr	r1, [pc, #204]	; (800aff8 <HAL_RCC_OscConfig+0x4d8>)
 800af2a:	4313      	orrs	r3, r2
 800af2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800af2e:	4b33      	ldr	r3, [pc, #204]	; (800affc <HAL_RCC_OscConfig+0x4dc>)
 800af30:	2201      	movs	r2, #1
 800af32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af34:	f7fb f8f2 	bl	800611c <HAL_GetTick>
 800af38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800af3a:	e008      	b.n	800af4e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800af3c:	f7fb f8ee 	bl	800611c <HAL_GetTick>
 800af40:	4602      	mov	r2, r0
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	1ad3      	subs	r3, r2, r3
 800af46:	2b02      	cmp	r3, #2
 800af48:	d901      	bls.n	800af4e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800af4a:	2303      	movs	r3, #3
 800af4c:	e04d      	b.n	800afea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800af4e:	4b2a      	ldr	r3, [pc, #168]	; (800aff8 <HAL_RCC_OscConfig+0x4d8>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af56:	2b00      	cmp	r3, #0
 800af58:	d0f0      	beq.n	800af3c <HAL_RCC_OscConfig+0x41c>
 800af5a:	e045      	b.n	800afe8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af5c:	4b27      	ldr	r3, [pc, #156]	; (800affc <HAL_RCC_OscConfig+0x4dc>)
 800af5e:	2200      	movs	r2, #0
 800af60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af62:	f7fb f8db 	bl	800611c <HAL_GetTick>
 800af66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800af68:	e008      	b.n	800af7c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800af6a:	f7fb f8d7 	bl	800611c <HAL_GetTick>
 800af6e:	4602      	mov	r2, r0
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	1ad3      	subs	r3, r2, r3
 800af74:	2b02      	cmp	r3, #2
 800af76:	d901      	bls.n	800af7c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800af78:	2303      	movs	r3, #3
 800af7a:	e036      	b.n	800afea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800af7c:	4b1e      	ldr	r3, [pc, #120]	; (800aff8 <HAL_RCC_OscConfig+0x4d8>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af84:	2b00      	cmp	r3, #0
 800af86:	d1f0      	bne.n	800af6a <HAL_RCC_OscConfig+0x44a>
 800af88:	e02e      	b.n	800afe8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	699b      	ldr	r3, [r3, #24]
 800af8e:	2b01      	cmp	r3, #1
 800af90:	d101      	bne.n	800af96 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800af92:	2301      	movs	r3, #1
 800af94:	e029      	b.n	800afea <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800af96:	4b18      	ldr	r3, [pc, #96]	; (800aff8 <HAL_RCC_OscConfig+0x4d8>)
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	69db      	ldr	r3, [r3, #28]
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d11c      	bne.n	800afe4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d115      	bne.n	800afe4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800afb8:	68fa      	ldr	r2, [r7, #12]
 800afba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800afbe:	4013      	ands	r3, r2
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d10d      	bne.n	800afe4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d106      	bne.n	800afe4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d001      	beq.n	800afe8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800afe4:	2301      	movs	r3, #1
 800afe6:	e000      	b.n	800afea <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800afe8:	2300      	movs	r3, #0
}
 800afea:	4618      	mov	r0, r3
 800afec:	3718      	adds	r7, #24
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	bf00      	nop
 800aff4:	40007000 	.word	0x40007000
 800aff8:	40023800 	.word	0x40023800
 800affc:	42470060 	.word	0x42470060

0800b000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d101      	bne.n	800b014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b010:	2301      	movs	r3, #1
 800b012:	e0cc      	b.n	800b1ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b014:	4b68      	ldr	r3, [pc, #416]	; (800b1b8 <HAL_RCC_ClockConfig+0x1b8>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f003 030f 	and.w	r3, r3, #15
 800b01c:	683a      	ldr	r2, [r7, #0]
 800b01e:	429a      	cmp	r2, r3
 800b020:	d90c      	bls.n	800b03c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b022:	4b65      	ldr	r3, [pc, #404]	; (800b1b8 <HAL_RCC_ClockConfig+0x1b8>)
 800b024:	683a      	ldr	r2, [r7, #0]
 800b026:	b2d2      	uxtb	r2, r2
 800b028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b02a:	4b63      	ldr	r3, [pc, #396]	; (800b1b8 <HAL_RCC_ClockConfig+0x1b8>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f003 030f 	and.w	r3, r3, #15
 800b032:	683a      	ldr	r2, [r7, #0]
 800b034:	429a      	cmp	r2, r3
 800b036:	d001      	beq.n	800b03c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	e0b8      	b.n	800b1ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f003 0302 	and.w	r3, r3, #2
 800b044:	2b00      	cmp	r3, #0
 800b046:	d020      	beq.n	800b08a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f003 0304 	and.w	r3, r3, #4
 800b050:	2b00      	cmp	r3, #0
 800b052:	d005      	beq.n	800b060 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b054:	4b59      	ldr	r3, [pc, #356]	; (800b1bc <HAL_RCC_ClockConfig+0x1bc>)
 800b056:	689b      	ldr	r3, [r3, #8]
 800b058:	4a58      	ldr	r2, [pc, #352]	; (800b1bc <HAL_RCC_ClockConfig+0x1bc>)
 800b05a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b05e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f003 0308 	and.w	r3, r3, #8
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d005      	beq.n	800b078 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b06c:	4b53      	ldr	r3, [pc, #332]	; (800b1bc <HAL_RCC_ClockConfig+0x1bc>)
 800b06e:	689b      	ldr	r3, [r3, #8]
 800b070:	4a52      	ldr	r2, [pc, #328]	; (800b1bc <HAL_RCC_ClockConfig+0x1bc>)
 800b072:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b076:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b078:	4b50      	ldr	r3, [pc, #320]	; (800b1bc <HAL_RCC_ClockConfig+0x1bc>)
 800b07a:	689b      	ldr	r3, [r3, #8]
 800b07c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	689b      	ldr	r3, [r3, #8]
 800b084:	494d      	ldr	r1, [pc, #308]	; (800b1bc <HAL_RCC_ClockConfig+0x1bc>)
 800b086:	4313      	orrs	r3, r2
 800b088:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f003 0301 	and.w	r3, r3, #1
 800b092:	2b00      	cmp	r3, #0
 800b094:	d044      	beq.n	800b120 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d107      	bne.n	800b0ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b09e:	4b47      	ldr	r3, [pc, #284]	; (800b1bc <HAL_RCC_ClockConfig+0x1bc>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d119      	bne.n	800b0de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	e07f      	b.n	800b1ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	2b02      	cmp	r3, #2
 800b0b4:	d003      	beq.n	800b0be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b0ba:	2b03      	cmp	r3, #3
 800b0bc:	d107      	bne.n	800b0ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b0be:	4b3f      	ldr	r3, [pc, #252]	; (800b1bc <HAL_RCC_ClockConfig+0x1bc>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d109      	bne.n	800b0de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	e06f      	b.n	800b1ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b0ce:	4b3b      	ldr	r3, [pc, #236]	; (800b1bc <HAL_RCC_ClockConfig+0x1bc>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f003 0302 	and.w	r3, r3, #2
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d101      	bne.n	800b0de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e067      	b.n	800b1ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b0de:	4b37      	ldr	r3, [pc, #220]	; (800b1bc <HAL_RCC_ClockConfig+0x1bc>)
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	f023 0203 	bic.w	r2, r3, #3
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	4934      	ldr	r1, [pc, #208]	; (800b1bc <HAL_RCC_ClockConfig+0x1bc>)
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b0f0:	f7fb f814 	bl	800611c <HAL_GetTick>
 800b0f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b0f6:	e00a      	b.n	800b10e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b0f8:	f7fb f810 	bl	800611c <HAL_GetTick>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	1ad3      	subs	r3, r2, r3
 800b102:	f241 3288 	movw	r2, #5000	; 0x1388
 800b106:	4293      	cmp	r3, r2
 800b108:	d901      	bls.n	800b10e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b10a:	2303      	movs	r3, #3
 800b10c:	e04f      	b.n	800b1ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b10e:	4b2b      	ldr	r3, [pc, #172]	; (800b1bc <HAL_RCC_ClockConfig+0x1bc>)
 800b110:	689b      	ldr	r3, [r3, #8]
 800b112:	f003 020c 	and.w	r2, r3, #12
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d1eb      	bne.n	800b0f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b120:	4b25      	ldr	r3, [pc, #148]	; (800b1b8 <HAL_RCC_ClockConfig+0x1b8>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f003 030f 	and.w	r3, r3, #15
 800b128:	683a      	ldr	r2, [r7, #0]
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d20c      	bcs.n	800b148 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b12e:	4b22      	ldr	r3, [pc, #136]	; (800b1b8 <HAL_RCC_ClockConfig+0x1b8>)
 800b130:	683a      	ldr	r2, [r7, #0]
 800b132:	b2d2      	uxtb	r2, r2
 800b134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b136:	4b20      	ldr	r3, [pc, #128]	; (800b1b8 <HAL_RCC_ClockConfig+0x1b8>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f003 030f 	and.w	r3, r3, #15
 800b13e:	683a      	ldr	r2, [r7, #0]
 800b140:	429a      	cmp	r2, r3
 800b142:	d001      	beq.n	800b148 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b144:	2301      	movs	r3, #1
 800b146:	e032      	b.n	800b1ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f003 0304 	and.w	r3, r3, #4
 800b150:	2b00      	cmp	r3, #0
 800b152:	d008      	beq.n	800b166 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b154:	4b19      	ldr	r3, [pc, #100]	; (800b1bc <HAL_RCC_ClockConfig+0x1bc>)
 800b156:	689b      	ldr	r3, [r3, #8]
 800b158:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	68db      	ldr	r3, [r3, #12]
 800b160:	4916      	ldr	r1, [pc, #88]	; (800b1bc <HAL_RCC_ClockConfig+0x1bc>)
 800b162:	4313      	orrs	r3, r2
 800b164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f003 0308 	and.w	r3, r3, #8
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d009      	beq.n	800b186 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b172:	4b12      	ldr	r3, [pc, #72]	; (800b1bc <HAL_RCC_ClockConfig+0x1bc>)
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	691b      	ldr	r3, [r3, #16]
 800b17e:	00db      	lsls	r3, r3, #3
 800b180:	490e      	ldr	r1, [pc, #56]	; (800b1bc <HAL_RCC_ClockConfig+0x1bc>)
 800b182:	4313      	orrs	r3, r2
 800b184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b186:	f000 f821 	bl	800b1cc <HAL_RCC_GetSysClockFreq>
 800b18a:	4601      	mov	r1, r0
 800b18c:	4b0b      	ldr	r3, [pc, #44]	; (800b1bc <HAL_RCC_ClockConfig+0x1bc>)
 800b18e:	689b      	ldr	r3, [r3, #8]
 800b190:	091b      	lsrs	r3, r3, #4
 800b192:	f003 030f 	and.w	r3, r3, #15
 800b196:	4a0a      	ldr	r2, [pc, #40]	; (800b1c0 <HAL_RCC_ClockConfig+0x1c0>)
 800b198:	5cd3      	ldrb	r3, [r2, r3]
 800b19a:	fa21 f303 	lsr.w	r3, r1, r3
 800b19e:	4a09      	ldr	r2, [pc, #36]	; (800b1c4 <HAL_RCC_ClockConfig+0x1c4>)
 800b1a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b1a2:	4b09      	ldr	r3, [pc, #36]	; (800b1c8 <HAL_RCC_ClockConfig+0x1c8>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7fa ff74 	bl	8006094 <HAL_InitTick>

  return HAL_OK;
 800b1ac:	2300      	movs	r3, #0
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3710      	adds	r7, #16
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	40023c00 	.word	0x40023c00
 800b1bc:	40023800 	.word	0x40023800
 800b1c0:	08013590 	.word	0x08013590
 800b1c4:	20000040 	.word	0x20000040
 800b1c8:	20000048 	.word	0x20000048

0800b1cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b1cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1ce:	b085      	sub	sp, #20
 800b1d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	607b      	str	r3, [r7, #4]
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	60fb      	str	r3, [r7, #12]
 800b1da:	2300      	movs	r3, #0
 800b1dc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b1e2:	4b63      	ldr	r3, [pc, #396]	; (800b370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b1e4:	689b      	ldr	r3, [r3, #8]
 800b1e6:	f003 030c 	and.w	r3, r3, #12
 800b1ea:	2b04      	cmp	r3, #4
 800b1ec:	d007      	beq.n	800b1fe <HAL_RCC_GetSysClockFreq+0x32>
 800b1ee:	2b08      	cmp	r3, #8
 800b1f0:	d008      	beq.n	800b204 <HAL_RCC_GetSysClockFreq+0x38>
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	f040 80b4 	bne.w	800b360 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b1f8:	4b5e      	ldr	r3, [pc, #376]	; (800b374 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b1fa:	60bb      	str	r3, [r7, #8]
       break;
 800b1fc:	e0b3      	b.n	800b366 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b1fe:	4b5d      	ldr	r3, [pc, #372]	; (800b374 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b200:	60bb      	str	r3, [r7, #8]
      break;
 800b202:	e0b0      	b.n	800b366 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b204:	4b5a      	ldr	r3, [pc, #360]	; (800b370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b20c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b20e:	4b58      	ldr	r3, [pc, #352]	; (800b370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b216:	2b00      	cmp	r3, #0
 800b218:	d04a      	beq.n	800b2b0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b21a:	4b55      	ldr	r3, [pc, #340]	; (800b370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	099b      	lsrs	r3, r3, #6
 800b220:	f04f 0400 	mov.w	r4, #0
 800b224:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b228:	f04f 0200 	mov.w	r2, #0
 800b22c:	ea03 0501 	and.w	r5, r3, r1
 800b230:	ea04 0602 	and.w	r6, r4, r2
 800b234:	4629      	mov	r1, r5
 800b236:	4632      	mov	r2, r6
 800b238:	f04f 0300 	mov.w	r3, #0
 800b23c:	f04f 0400 	mov.w	r4, #0
 800b240:	0154      	lsls	r4, r2, #5
 800b242:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b246:	014b      	lsls	r3, r1, #5
 800b248:	4619      	mov	r1, r3
 800b24a:	4622      	mov	r2, r4
 800b24c:	1b49      	subs	r1, r1, r5
 800b24e:	eb62 0206 	sbc.w	r2, r2, r6
 800b252:	f04f 0300 	mov.w	r3, #0
 800b256:	f04f 0400 	mov.w	r4, #0
 800b25a:	0194      	lsls	r4, r2, #6
 800b25c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b260:	018b      	lsls	r3, r1, #6
 800b262:	1a5b      	subs	r3, r3, r1
 800b264:	eb64 0402 	sbc.w	r4, r4, r2
 800b268:	f04f 0100 	mov.w	r1, #0
 800b26c:	f04f 0200 	mov.w	r2, #0
 800b270:	00e2      	lsls	r2, r4, #3
 800b272:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b276:	00d9      	lsls	r1, r3, #3
 800b278:	460b      	mov	r3, r1
 800b27a:	4614      	mov	r4, r2
 800b27c:	195b      	adds	r3, r3, r5
 800b27e:	eb44 0406 	adc.w	r4, r4, r6
 800b282:	f04f 0100 	mov.w	r1, #0
 800b286:	f04f 0200 	mov.w	r2, #0
 800b28a:	02a2      	lsls	r2, r4, #10
 800b28c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b290:	0299      	lsls	r1, r3, #10
 800b292:	460b      	mov	r3, r1
 800b294:	4614      	mov	r4, r2
 800b296:	4618      	mov	r0, r3
 800b298:	4621      	mov	r1, r4
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f04f 0400 	mov.w	r4, #0
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	4623      	mov	r3, r4
 800b2a4:	f7f5 fe2e 	bl	8000f04 <__aeabi_uldivmod>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	460c      	mov	r4, r1
 800b2ac:	60fb      	str	r3, [r7, #12]
 800b2ae:	e049      	b.n	800b344 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b2b0:	4b2f      	ldr	r3, [pc, #188]	; (800b370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	099b      	lsrs	r3, r3, #6
 800b2b6:	f04f 0400 	mov.w	r4, #0
 800b2ba:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b2be:	f04f 0200 	mov.w	r2, #0
 800b2c2:	ea03 0501 	and.w	r5, r3, r1
 800b2c6:	ea04 0602 	and.w	r6, r4, r2
 800b2ca:	4629      	mov	r1, r5
 800b2cc:	4632      	mov	r2, r6
 800b2ce:	f04f 0300 	mov.w	r3, #0
 800b2d2:	f04f 0400 	mov.w	r4, #0
 800b2d6:	0154      	lsls	r4, r2, #5
 800b2d8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b2dc:	014b      	lsls	r3, r1, #5
 800b2de:	4619      	mov	r1, r3
 800b2e0:	4622      	mov	r2, r4
 800b2e2:	1b49      	subs	r1, r1, r5
 800b2e4:	eb62 0206 	sbc.w	r2, r2, r6
 800b2e8:	f04f 0300 	mov.w	r3, #0
 800b2ec:	f04f 0400 	mov.w	r4, #0
 800b2f0:	0194      	lsls	r4, r2, #6
 800b2f2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b2f6:	018b      	lsls	r3, r1, #6
 800b2f8:	1a5b      	subs	r3, r3, r1
 800b2fa:	eb64 0402 	sbc.w	r4, r4, r2
 800b2fe:	f04f 0100 	mov.w	r1, #0
 800b302:	f04f 0200 	mov.w	r2, #0
 800b306:	00e2      	lsls	r2, r4, #3
 800b308:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b30c:	00d9      	lsls	r1, r3, #3
 800b30e:	460b      	mov	r3, r1
 800b310:	4614      	mov	r4, r2
 800b312:	195b      	adds	r3, r3, r5
 800b314:	eb44 0406 	adc.w	r4, r4, r6
 800b318:	f04f 0100 	mov.w	r1, #0
 800b31c:	f04f 0200 	mov.w	r2, #0
 800b320:	02a2      	lsls	r2, r4, #10
 800b322:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b326:	0299      	lsls	r1, r3, #10
 800b328:	460b      	mov	r3, r1
 800b32a:	4614      	mov	r4, r2
 800b32c:	4618      	mov	r0, r3
 800b32e:	4621      	mov	r1, r4
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f04f 0400 	mov.w	r4, #0
 800b336:	461a      	mov	r2, r3
 800b338:	4623      	mov	r3, r4
 800b33a:	f7f5 fde3 	bl	8000f04 <__aeabi_uldivmod>
 800b33e:	4603      	mov	r3, r0
 800b340:	460c      	mov	r4, r1
 800b342:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b344:	4b0a      	ldr	r3, [pc, #40]	; (800b370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	0c1b      	lsrs	r3, r3, #16
 800b34a:	f003 0303 	and.w	r3, r3, #3
 800b34e:	3301      	adds	r3, #1
 800b350:	005b      	lsls	r3, r3, #1
 800b352:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b354:	68fa      	ldr	r2, [r7, #12]
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	fbb2 f3f3 	udiv	r3, r2, r3
 800b35c:	60bb      	str	r3, [r7, #8]
      break;
 800b35e:	e002      	b.n	800b366 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b360:	4b04      	ldr	r3, [pc, #16]	; (800b374 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b362:	60bb      	str	r3, [r7, #8]
      break;
 800b364:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b366:	68bb      	ldr	r3, [r7, #8]
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3714      	adds	r7, #20
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b370:	40023800 	.word	0x40023800
 800b374:	00f42400 	.word	0x00f42400

0800b378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b378:	b480      	push	{r7}
 800b37a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b37c:	4b03      	ldr	r3, [pc, #12]	; (800b38c <HAL_RCC_GetHCLKFreq+0x14>)
 800b37e:	681b      	ldr	r3, [r3, #0]
}
 800b380:	4618      	mov	r0, r3
 800b382:	46bd      	mov	sp, r7
 800b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b388:	4770      	bx	lr
 800b38a:	bf00      	nop
 800b38c:	20000040 	.word	0x20000040

0800b390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b394:	f7ff fff0 	bl	800b378 <HAL_RCC_GetHCLKFreq>
 800b398:	4601      	mov	r1, r0
 800b39a:	4b05      	ldr	r3, [pc, #20]	; (800b3b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b39c:	689b      	ldr	r3, [r3, #8]
 800b39e:	0a9b      	lsrs	r3, r3, #10
 800b3a0:	f003 0307 	and.w	r3, r3, #7
 800b3a4:	4a03      	ldr	r2, [pc, #12]	; (800b3b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b3a6:	5cd3      	ldrb	r3, [r2, r3]
 800b3a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	bd80      	pop	{r7, pc}
 800b3b0:	40023800 	.word	0x40023800
 800b3b4:	080135a0 	.word	0x080135a0

0800b3b8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b086      	sub	sp, #24
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f003 0301 	and.w	r3, r3, #1
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d105      	bne.n	800b3e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d035      	beq.n	800b44c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b3e0:	4b62      	ldr	r3, [pc, #392]	; (800b56c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b3e6:	f7fa fe99 	bl	800611c <HAL_GetTick>
 800b3ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b3ec:	e008      	b.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b3ee:	f7fa fe95 	bl	800611c <HAL_GetTick>
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	1ad3      	subs	r3, r2, r3
 800b3f8:	2b02      	cmp	r3, #2
 800b3fa:	d901      	bls.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b3fc:	2303      	movs	r3, #3
 800b3fe:	e0b0      	b.n	800b562 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b400:	4b5b      	ldr	r3, [pc, #364]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d1f0      	bne.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	019a      	lsls	r2, r3, #6
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	689b      	ldr	r3, [r3, #8]
 800b416:	071b      	lsls	r3, r3, #28
 800b418:	4955      	ldr	r1, [pc, #340]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b41a:	4313      	orrs	r3, r2
 800b41c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b420:	4b52      	ldr	r3, [pc, #328]	; (800b56c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800b422:	2201      	movs	r2, #1
 800b424:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b426:	f7fa fe79 	bl	800611c <HAL_GetTick>
 800b42a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b42c:	e008      	b.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b42e:	f7fa fe75 	bl	800611c <HAL_GetTick>
 800b432:	4602      	mov	r2, r0
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	1ad3      	subs	r3, r2, r3
 800b438:	2b02      	cmp	r3, #2
 800b43a:	d901      	bls.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b43c:	2303      	movs	r3, #3
 800b43e:	e090      	b.n	800b562 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b440:	4b4b      	ldr	r3, [pc, #300]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d0f0      	beq.n	800b42e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f003 0302 	and.w	r3, r3, #2
 800b454:	2b00      	cmp	r3, #0
 800b456:	f000 8083 	beq.w	800b560 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b45a:	2300      	movs	r3, #0
 800b45c:	60fb      	str	r3, [r7, #12]
 800b45e:	4b44      	ldr	r3, [pc, #272]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b462:	4a43      	ldr	r2, [pc, #268]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b468:	6413      	str	r3, [r2, #64]	; 0x40
 800b46a:	4b41      	ldr	r3, [pc, #260]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b46c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b46e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b472:	60fb      	str	r3, [r7, #12]
 800b474:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b476:	4b3f      	ldr	r3, [pc, #252]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4a3e      	ldr	r2, [pc, #248]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b47c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b480:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b482:	f7fa fe4b 	bl	800611c <HAL_GetTick>
 800b486:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b488:	e008      	b.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b48a:	f7fa fe47 	bl	800611c <HAL_GetTick>
 800b48e:	4602      	mov	r2, r0
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	1ad3      	subs	r3, r2, r3
 800b494:	2b02      	cmp	r3, #2
 800b496:	d901      	bls.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800b498:	2303      	movs	r3, #3
 800b49a:	e062      	b.n	800b562 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b49c:	4b35      	ldr	r3, [pc, #212]	; (800b574 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d0f0      	beq.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b4a8:	4b31      	ldr	r3, [pc, #196]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b4aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4b0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d02f      	beq.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4c0:	693a      	ldr	r2, [r7, #16]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d028      	beq.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b4c6:	4b2a      	ldr	r3, [pc, #168]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b4c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4ce:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b4d0:	4b29      	ldr	r3, [pc, #164]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b4d6:	4b28      	ldr	r3, [pc, #160]	; (800b578 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800b4d8:	2200      	movs	r2, #0
 800b4da:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b4dc:	4a24      	ldr	r2, [pc, #144]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b4e2:	4b23      	ldr	r3, [pc, #140]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b4e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4e6:	f003 0301 	and.w	r3, r3, #1
 800b4ea:	2b01      	cmp	r3, #1
 800b4ec:	d114      	bne.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b4ee:	f7fa fe15 	bl	800611c <HAL_GetTick>
 800b4f2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b4f4:	e00a      	b.n	800b50c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b4f6:	f7fa fe11 	bl	800611c <HAL_GetTick>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	1ad3      	subs	r3, r2, r3
 800b500:	f241 3288 	movw	r2, #5000	; 0x1388
 800b504:	4293      	cmp	r3, r2
 800b506:	d901      	bls.n	800b50c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800b508:	2303      	movs	r3, #3
 800b50a:	e02a      	b.n	800b562 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b50c:	4b18      	ldr	r3, [pc, #96]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b50e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b510:	f003 0302 	and.w	r3, r3, #2
 800b514:	2b00      	cmp	r3, #0
 800b516:	d0ee      	beq.n	800b4f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	68db      	ldr	r3, [r3, #12]
 800b51c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b520:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b524:	d10d      	bne.n	800b542 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800b526:	4b12      	ldr	r3, [pc, #72]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	68db      	ldr	r3, [r3, #12]
 800b532:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b53a:	490d      	ldr	r1, [pc, #52]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b53c:	4313      	orrs	r3, r2
 800b53e:	608b      	str	r3, [r1, #8]
 800b540:	e005      	b.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b542:	4b0b      	ldr	r3, [pc, #44]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	4a0a      	ldr	r2, [pc, #40]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b548:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b54c:	6093      	str	r3, [r2, #8]
 800b54e:	4b08      	ldr	r3, [pc, #32]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b550:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	68db      	ldr	r3, [r3, #12]
 800b556:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b55a:	4905      	ldr	r1, [pc, #20]	; (800b570 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b55c:	4313      	orrs	r3, r2
 800b55e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800b560:	2300      	movs	r3, #0
}
 800b562:	4618      	mov	r0, r3
 800b564:	3718      	adds	r7, #24
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	42470068 	.word	0x42470068
 800b570:	40023800 	.word	0x40023800
 800b574:	40007000 	.word	0x40007000
 800b578:	42470e40 	.word	0x42470e40

0800b57c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b082      	sub	sp, #8
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d101      	bne.n	800b58e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800b58a:	2301      	movs	r3, #1
 800b58c:	e083      	b.n	800b696 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	7f5b      	ldrb	r3, [r3, #29]
 800b592:	b2db      	uxtb	r3, r3
 800b594:	2b00      	cmp	r3, #0
 800b596:	d105      	bne.n	800b5a4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2200      	movs	r2, #0
 800b59c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f7f9 fbaa 	bl	8004cf8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2202      	movs	r2, #2
 800b5a8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	22ca      	movs	r2, #202	; 0xca
 800b5b0:	625a      	str	r2, [r3, #36]	; 0x24
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	2253      	movs	r2, #83	; 0x53
 800b5b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 f897 	bl	800b6ee <RTC_EnterInitMode>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d008      	beq.n	800b5d8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	22ff      	movs	r2, #255	; 0xff
 800b5cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2204      	movs	r2, #4
 800b5d2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e05e      	b.n	800b696 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	6812      	ldr	r2, [r2, #0]
 800b5e2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b5e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5ea:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	6899      	ldr	r1, [r3, #8]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	685a      	ldr	r2, [r3, #4]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	691b      	ldr	r3, [r3, #16]
 800b5fa:	431a      	orrs	r2, r3
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	695b      	ldr	r3, [r3, #20]
 800b600:	431a      	orrs	r2, r3
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	430a      	orrs	r2, r1
 800b608:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	687a      	ldr	r2, [r7, #4]
 800b610:	68d2      	ldr	r2, [r2, #12]
 800b612:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	6919      	ldr	r1, [r3, #16]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	689b      	ldr	r3, [r3, #8]
 800b61e:	041a      	lsls	r2, r3, #16
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	430a      	orrs	r2, r1
 800b626:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	68da      	ldr	r2, [r3, #12]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b636:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	689b      	ldr	r3, [r3, #8]
 800b63e:	f003 0320 	and.w	r3, r3, #32
 800b642:	2b00      	cmp	r3, #0
 800b644:	d10e      	bne.n	800b664 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 f829 	bl	800b69e <HAL_RTC_WaitForSynchro>
 800b64c:	4603      	mov	r3, r0
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d008      	beq.n	800b664 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	22ff      	movs	r2, #255	; 0xff
 800b658:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2204      	movs	r2, #4
 800b65e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800b660:	2301      	movs	r3, #1
 800b662:	e018      	b.n	800b696 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b672:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	699a      	ldr	r2, [r3, #24]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	430a      	orrs	r2, r1
 800b684:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	22ff      	movs	r2, #255	; 0xff
 800b68c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2201      	movs	r2, #1
 800b692:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800b694:	2300      	movs	r3, #0
  }
}
 800b696:	4618      	mov	r0, r3
 800b698:	3708      	adds	r7, #8
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}

0800b69e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800b69e:	b580      	push	{r7, lr}
 800b6a0:	b084      	sub	sp, #16
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	68da      	ldr	r2, [r3, #12]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b6b8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b6ba:	f7fa fd2f 	bl	800611c <HAL_GetTick>
 800b6be:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800b6c0:	e009      	b.n	800b6d6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b6c2:	f7fa fd2b 	bl	800611c <HAL_GetTick>
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	1ad3      	subs	r3, r2, r3
 800b6cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b6d0:	d901      	bls.n	800b6d6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800b6d2:	2303      	movs	r3, #3
 800b6d4:	e007      	b.n	800b6e6 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	f003 0320 	and.w	r3, r3, #32
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d0ee      	beq.n	800b6c2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800b6e4:	2300      	movs	r3, #0
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3710      	adds	r7, #16
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}

0800b6ee <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800b6ee:	b580      	push	{r7, lr}
 800b6f0:	b084      	sub	sp, #16
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	68db      	ldr	r3, [r3, #12]
 800b700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b704:	2b00      	cmp	r3, #0
 800b706:	d119      	bne.n	800b73c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f04f 32ff 	mov.w	r2, #4294967295
 800b710:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b712:	f7fa fd03 	bl	800611c <HAL_GetTick>
 800b716:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b718:	e009      	b.n	800b72e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b71a:	f7fa fcff 	bl	800611c <HAL_GetTick>
 800b71e:	4602      	mov	r2, r0
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	1ad3      	subs	r3, r2, r3
 800b724:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b728:	d901      	bls.n	800b72e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800b72a:	2303      	movs	r3, #3
 800b72c:	e007      	b.n	800b73e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	68db      	ldr	r3, [r3, #12]
 800b734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d0ee      	beq.n	800b71a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800b73c:	2300      	movs	r3, #0
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3710      	adds	r7, #16
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}

0800b746 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b746:	b580      	push	{r7, lr}
 800b748:	b082      	sub	sp, #8
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d101      	bne.n	800b758 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b754:	2301      	movs	r3, #1
 800b756:	e01d      	b.n	800b794 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b75e:	b2db      	uxtb	r3, r3
 800b760:	2b00      	cmp	r3, #0
 800b762:	d106      	bne.n	800b772 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f7fa fb3f 	bl	8005df0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2202      	movs	r2, #2
 800b776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	3304      	adds	r3, #4
 800b782:	4619      	mov	r1, r3
 800b784:	4610      	mov	r0, r2
 800b786:	f000 fcaf 	bl	800c0e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2201      	movs	r2, #1
 800b78e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b792:	2300      	movs	r3, #0
}
 800b794:	4618      	mov	r0, r3
 800b796:	3708      	adds	r7, #8
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b085      	sub	sp, #20
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	68da      	ldr	r2, [r3, #12]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f042 0201 	orr.w	r2, r2, #1
 800b7b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	689b      	ldr	r3, [r3, #8]
 800b7ba:	f003 0307 	and.w	r3, r3, #7
 800b7be:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2b06      	cmp	r3, #6
 800b7c4:	d007      	beq.n	800b7d6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f042 0201 	orr.w	r2, r2, #1
 800b7d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b7d6:	2300      	movs	r3, #0
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3714      	adds	r7, #20
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr

0800b7e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b082      	sub	sp, #8
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d101      	bne.n	800b7f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	e01d      	b.n	800b832 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7fc:	b2db      	uxtb	r3, r3
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d106      	bne.n	800b810 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2200      	movs	r2, #0
 800b806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f7fa face 	bl	8005dac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2202      	movs	r2, #2
 800b814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681a      	ldr	r2, [r3, #0]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	3304      	adds	r3, #4
 800b820:	4619      	mov	r1, r3
 800b822:	4610      	mov	r0, r2
 800b824:	f000 fc60 	bl	800c0e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2201      	movs	r2, #1
 800b82c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b830:	2300      	movs	r3, #0
}
 800b832:	4618      	mov	r0, r3
 800b834:	3708      	adds	r7, #8
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
	...

0800b83c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	2201      	movs	r2, #1
 800b84c:	6839      	ldr	r1, [r7, #0]
 800b84e:	4618      	mov	r0, r3
 800b850:	f001 f85e 	bl	800c910 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	4a15      	ldr	r2, [pc, #84]	; (800b8b0 <HAL_TIM_PWM_Start+0x74>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d004      	beq.n	800b868 <HAL_TIM_PWM_Start+0x2c>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	4a14      	ldr	r2, [pc, #80]	; (800b8b4 <HAL_TIM_PWM_Start+0x78>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d101      	bne.n	800b86c <HAL_TIM_PWM_Start+0x30>
 800b868:	2301      	movs	r3, #1
 800b86a:	e000      	b.n	800b86e <HAL_TIM_PWM_Start+0x32>
 800b86c:	2300      	movs	r3, #0
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d007      	beq.n	800b882 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b880:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	689b      	ldr	r3, [r3, #8]
 800b888:	f003 0307 	and.w	r3, r3, #7
 800b88c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2b06      	cmp	r3, #6
 800b892:	d007      	beq.n	800b8a4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	681a      	ldr	r2, [r3, #0]
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f042 0201 	orr.w	r2, r2, #1
 800b8a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b8a4:	2300      	movs	r3, #0
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3710      	adds	r7, #16
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	40010000 	.word	0x40010000
 800b8b4:	40010400 	.word	0x40010400

0800b8b8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b082      	sub	sp, #8
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d101      	bne.n	800b8ca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	e01d      	b.n	800b906 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d106      	bne.n	800b8e4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f000 f815 	bl	800b90e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2202      	movs	r2, #2
 800b8e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	3304      	adds	r3, #4
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	4610      	mov	r0, r2
 800b8f8:	f000 fbf6 	bl	800c0e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2201      	movs	r2, #1
 800b900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b904:	2300      	movs	r3, #0
}
 800b906:	4618      	mov	r0, r3
 800b908:	3708      	adds	r7, #8
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}

0800b90e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800b90e:	b480      	push	{r7}
 800b910:	b083      	sub	sp, #12
 800b912:	af00      	add	r7, sp, #0
 800b914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800b916:	bf00      	nop
 800b918:	370c      	adds	r7, #12
 800b91a:	46bd      	mov	sp, r7
 800b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b920:	4770      	bx	lr
	...

0800b924 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b084      	sub	sp, #16
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	2b0c      	cmp	r3, #12
 800b932:	d841      	bhi.n	800b9b8 <HAL_TIM_IC_Start_IT+0x94>
 800b934:	a201      	add	r2, pc, #4	; (adr r2, 800b93c <HAL_TIM_IC_Start_IT+0x18>)
 800b936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b93a:	bf00      	nop
 800b93c:	0800b971 	.word	0x0800b971
 800b940:	0800b9b9 	.word	0x0800b9b9
 800b944:	0800b9b9 	.word	0x0800b9b9
 800b948:	0800b9b9 	.word	0x0800b9b9
 800b94c:	0800b983 	.word	0x0800b983
 800b950:	0800b9b9 	.word	0x0800b9b9
 800b954:	0800b9b9 	.word	0x0800b9b9
 800b958:	0800b9b9 	.word	0x0800b9b9
 800b95c:	0800b995 	.word	0x0800b995
 800b960:	0800b9b9 	.word	0x0800b9b9
 800b964:	0800b9b9 	.word	0x0800b9b9
 800b968:	0800b9b9 	.word	0x0800b9b9
 800b96c:	0800b9a7 	.word	0x0800b9a7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	68da      	ldr	r2, [r3, #12]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f042 0202 	orr.w	r2, r2, #2
 800b97e:	60da      	str	r2, [r3, #12]
      break;
 800b980:	e01b      	b.n	800b9ba <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	68da      	ldr	r2, [r3, #12]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f042 0204 	orr.w	r2, r2, #4
 800b990:	60da      	str	r2, [r3, #12]
      break;
 800b992:	e012      	b.n	800b9ba <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	68da      	ldr	r2, [r3, #12]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f042 0208 	orr.w	r2, r2, #8
 800b9a2:	60da      	str	r2, [r3, #12]
      break;
 800b9a4:	e009      	b.n	800b9ba <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	68da      	ldr	r2, [r3, #12]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f042 0210 	orr.w	r2, r2, #16
 800b9b4:	60da      	str	r2, [r3, #12]
      break;
 800b9b6:	e000      	b.n	800b9ba <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 800b9b8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	2201      	movs	r2, #1
 800b9c0:	6839      	ldr	r1, [r7, #0]
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f000 ffa4 	bl	800c910 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	f003 0307 	and.w	r3, r3, #7
 800b9d2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2b06      	cmp	r3, #6
 800b9d8:	d007      	beq.n	800b9ea <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	681a      	ldr	r2, [r3, #0]
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f042 0201 	orr.w	r2, r2, #1
 800b9e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b9ea:	2300      	movs	r3, #0
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3710      	adds	r7, #16
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	691b      	ldr	r3, [r3, #16]
 800ba02:	f003 0302 	and.w	r3, r3, #2
 800ba06:	2b02      	cmp	r3, #2
 800ba08:	d122      	bne.n	800ba50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	68db      	ldr	r3, [r3, #12]
 800ba10:	f003 0302 	and.w	r3, r3, #2
 800ba14:	2b02      	cmp	r3, #2
 800ba16:	d11b      	bne.n	800ba50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f06f 0202 	mvn.w	r2, #2
 800ba20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2201      	movs	r2, #1
 800ba26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	699b      	ldr	r3, [r3, #24]
 800ba2e:	f003 0303 	and.w	r3, r3, #3
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d003      	beq.n	800ba3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f7f8 ffba 	bl	80049b0 <HAL_TIM_IC_CaptureCallback>
 800ba3c:	e005      	b.n	800ba4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f000 fb3e 	bl	800c0c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f7f9 f91f 	bl	8004c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	691b      	ldr	r3, [r3, #16]
 800ba56:	f003 0304 	and.w	r3, r3, #4
 800ba5a:	2b04      	cmp	r3, #4
 800ba5c:	d122      	bne.n	800baa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	68db      	ldr	r3, [r3, #12]
 800ba64:	f003 0304 	and.w	r3, r3, #4
 800ba68:	2b04      	cmp	r3, #4
 800ba6a:	d11b      	bne.n	800baa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f06f 0204 	mvn.w	r2, #4
 800ba74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2202      	movs	r2, #2
 800ba7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	699b      	ldr	r3, [r3, #24]
 800ba82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d003      	beq.n	800ba92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f7f8 ff90 	bl	80049b0 <HAL_TIM_IC_CaptureCallback>
 800ba90:	e005      	b.n	800ba9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f000 fb14 	bl	800c0c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f7f9 f8f5 	bl	8004c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2200      	movs	r2, #0
 800baa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	691b      	ldr	r3, [r3, #16]
 800baaa:	f003 0308 	and.w	r3, r3, #8
 800baae:	2b08      	cmp	r3, #8
 800bab0:	d122      	bne.n	800baf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	68db      	ldr	r3, [r3, #12]
 800bab8:	f003 0308 	and.w	r3, r3, #8
 800babc:	2b08      	cmp	r3, #8
 800babe:	d11b      	bne.n	800baf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f06f 0208 	mvn.w	r2, #8
 800bac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2204      	movs	r2, #4
 800bace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	69db      	ldr	r3, [r3, #28]
 800bad6:	f003 0303 	and.w	r3, r3, #3
 800bada:	2b00      	cmp	r3, #0
 800badc:	d003      	beq.n	800bae6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f7f8 ff66 	bl	80049b0 <HAL_TIM_IC_CaptureCallback>
 800bae4:	e005      	b.n	800baf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 faea 	bl	800c0c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f7f9 f8cb 	bl	8004c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2200      	movs	r2, #0
 800baf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	691b      	ldr	r3, [r3, #16]
 800bafe:	f003 0310 	and.w	r3, r3, #16
 800bb02:	2b10      	cmp	r3, #16
 800bb04:	d122      	bne.n	800bb4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	68db      	ldr	r3, [r3, #12]
 800bb0c:	f003 0310 	and.w	r3, r3, #16
 800bb10:	2b10      	cmp	r3, #16
 800bb12:	d11b      	bne.n	800bb4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f06f 0210 	mvn.w	r2, #16
 800bb1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2208      	movs	r2, #8
 800bb22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	69db      	ldr	r3, [r3, #28]
 800bb2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d003      	beq.n	800bb3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f7f8 ff3c 	bl	80049b0 <HAL_TIM_IC_CaptureCallback>
 800bb38:	e005      	b.n	800bb46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f000 fac0 	bl	800c0c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f7f9 f8a1 	bl	8004c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	691b      	ldr	r3, [r3, #16]
 800bb52:	f003 0301 	and.w	r3, r3, #1
 800bb56:	2b01      	cmp	r3, #1
 800bb58:	d10e      	bne.n	800bb78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	68db      	ldr	r3, [r3, #12]
 800bb60:	f003 0301 	and.w	r3, r3, #1
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d107      	bne.n	800bb78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f06f 0201 	mvn.w	r2, #1
 800bb70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f7f8 ffce 	bl	8004b14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	691b      	ldr	r3, [r3, #16]
 800bb7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb82:	2b80      	cmp	r3, #128	; 0x80
 800bb84:	d10e      	bne.n	800bba4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	68db      	ldr	r3, [r3, #12]
 800bb8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb90:	2b80      	cmp	r3, #128	; 0x80
 800bb92:	d107      	bne.n	800bba4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bb9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 ffb4 	bl	800cb0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	691b      	ldr	r3, [r3, #16]
 800bbaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbae:	2b40      	cmp	r3, #64	; 0x40
 800bbb0:	d10e      	bne.n	800bbd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	68db      	ldr	r3, [r3, #12]
 800bbb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbbc:	2b40      	cmp	r3, #64	; 0x40
 800bbbe:	d107      	bne.n	800bbd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bbc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f000 fa82 	bl	800c0d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	691b      	ldr	r3, [r3, #16]
 800bbd6:	f003 0320 	and.w	r3, r3, #32
 800bbda:	2b20      	cmp	r3, #32
 800bbdc:	d10e      	bne.n	800bbfc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	68db      	ldr	r3, [r3, #12]
 800bbe4:	f003 0320 	and.w	r3, r3, #32
 800bbe8:	2b20      	cmp	r3, #32
 800bbea:	d107      	bne.n	800bbfc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f06f 0220 	mvn.w	r2, #32
 800bbf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 ff7e 	bl	800caf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bbfc:	bf00      	nop
 800bbfe:	3708      	adds	r7, #8
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b084      	sub	sp, #16
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	60f8      	str	r0, [r7, #12]
 800bc0c:	60b9      	str	r1, [r7, #8]
 800bc0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc16:	2b01      	cmp	r3, #1
 800bc18:	d101      	bne.n	800bc1e <HAL_TIM_IC_ConfigChannel+0x1a>
 800bc1a:	2302      	movs	r3, #2
 800bc1c:	e08a      	b.n	800bd34 <HAL_TIM_IC_ConfigChannel+0x130>
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2201      	movs	r2, #1
 800bc22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	2202      	movs	r2, #2
 800bc2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d11b      	bne.n	800bc6c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	6818      	ldr	r0, [r3, #0]
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	6819      	ldr	r1, [r3, #0]
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	685a      	ldr	r2, [r3, #4]
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	68db      	ldr	r3, [r3, #12]
 800bc44:	f000 fca0 	bl	800c588 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	699a      	ldr	r2, [r3, #24]
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f022 020c 	bic.w	r2, r2, #12
 800bc56:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	6999      	ldr	r1, [r3, #24]
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	689a      	ldr	r2, [r3, #8]
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	430a      	orrs	r2, r1
 800bc68:	619a      	str	r2, [r3, #24]
 800bc6a:	e05a      	b.n	800bd22 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2b04      	cmp	r3, #4
 800bc70:	d11c      	bne.n	800bcac <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	6818      	ldr	r0, [r3, #0]
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	6819      	ldr	r1, [r3, #0]
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	685a      	ldr	r2, [r3, #4]
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	68db      	ldr	r3, [r3, #12]
 800bc82:	f000 fd24 	bl	800c6ce <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	699a      	ldr	r2, [r3, #24]
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800bc94:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	6999      	ldr	r1, [r3, #24]
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	689b      	ldr	r3, [r3, #8]
 800bca0:	021a      	lsls	r2, r3, #8
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	430a      	orrs	r2, r1
 800bca8:	619a      	str	r2, [r3, #24]
 800bcaa:	e03a      	b.n	800bd22 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2b08      	cmp	r3, #8
 800bcb0:	d11b      	bne.n	800bcea <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	6818      	ldr	r0, [r3, #0]
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	6819      	ldr	r1, [r3, #0]
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	685a      	ldr	r2, [r3, #4]
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	68db      	ldr	r3, [r3, #12]
 800bcc2:	f000 fd71 	bl	800c7a8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	69da      	ldr	r2, [r3, #28]
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f022 020c 	bic.w	r2, r2, #12
 800bcd4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	69d9      	ldr	r1, [r3, #28]
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	689a      	ldr	r2, [r3, #8]
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	430a      	orrs	r2, r1
 800bce6:	61da      	str	r2, [r3, #28]
 800bce8:	e01b      	b.n	800bd22 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	6818      	ldr	r0, [r3, #0]
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	6819      	ldr	r1, [r3, #0]
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	685a      	ldr	r2, [r3, #4]
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	68db      	ldr	r3, [r3, #12]
 800bcfa:	f000 fd91 	bl	800c820 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	69da      	ldr	r2, [r3, #28]
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800bd0c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	69d9      	ldr	r1, [r3, #28]
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	021a      	lsls	r2, r3, #8
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	430a      	orrs	r2, r1
 800bd20:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2201      	movs	r2, #1
 800bd26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd32:	2300      	movs	r3, #0
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3710      	adds	r7, #16
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b084      	sub	sp, #16
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	60b9      	str	r1, [r7, #8]
 800bd46:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd4e:	2b01      	cmp	r3, #1
 800bd50:	d101      	bne.n	800bd56 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800bd52:	2302      	movs	r3, #2
 800bd54:	e0b4      	b.n	800bec0 <HAL_TIM_PWM_ConfigChannel+0x184>
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2201      	movs	r2, #1
 800bd5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2202      	movs	r2, #2
 800bd62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2b0c      	cmp	r3, #12
 800bd6a:	f200 809f 	bhi.w	800beac <HAL_TIM_PWM_ConfigChannel+0x170>
 800bd6e:	a201      	add	r2, pc, #4	; (adr r2, 800bd74 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800bd70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd74:	0800bda9 	.word	0x0800bda9
 800bd78:	0800bead 	.word	0x0800bead
 800bd7c:	0800bead 	.word	0x0800bead
 800bd80:	0800bead 	.word	0x0800bead
 800bd84:	0800bde9 	.word	0x0800bde9
 800bd88:	0800bead 	.word	0x0800bead
 800bd8c:	0800bead 	.word	0x0800bead
 800bd90:	0800bead 	.word	0x0800bead
 800bd94:	0800be2b 	.word	0x0800be2b
 800bd98:	0800bead 	.word	0x0800bead
 800bd9c:	0800bead 	.word	0x0800bead
 800bda0:	0800bead 	.word	0x0800bead
 800bda4:	0800be6b 	.word	0x0800be6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	68b9      	ldr	r1, [r7, #8]
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f000 fa3a 	bl	800c228 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	699a      	ldr	r2, [r3, #24]
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f042 0208 	orr.w	r2, r2, #8
 800bdc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	699a      	ldr	r2, [r3, #24]
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f022 0204 	bic.w	r2, r2, #4
 800bdd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	6999      	ldr	r1, [r3, #24]
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	691a      	ldr	r2, [r3, #16]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	430a      	orrs	r2, r1
 800bde4:	619a      	str	r2, [r3, #24]
      break;
 800bde6:	e062      	b.n	800beae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	68b9      	ldr	r1, [r7, #8]
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f000 fa8a 	bl	800c308 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	699a      	ldr	r2, [r3, #24]
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	699a      	ldr	r2, [r3, #24]
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	6999      	ldr	r1, [r3, #24]
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	691b      	ldr	r3, [r3, #16]
 800be1e:	021a      	lsls	r2, r3, #8
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	430a      	orrs	r2, r1
 800be26:	619a      	str	r2, [r3, #24]
      break;
 800be28:	e041      	b.n	800beae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	68b9      	ldr	r1, [r7, #8]
 800be30:	4618      	mov	r0, r3
 800be32:	f000 fadf 	bl	800c3f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	69da      	ldr	r2, [r3, #28]
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f042 0208 	orr.w	r2, r2, #8
 800be44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	69da      	ldr	r2, [r3, #28]
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f022 0204 	bic.w	r2, r2, #4
 800be54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	69d9      	ldr	r1, [r3, #28]
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	691a      	ldr	r2, [r3, #16]
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	430a      	orrs	r2, r1
 800be66:	61da      	str	r2, [r3, #28]
      break;
 800be68:	e021      	b.n	800beae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	68b9      	ldr	r1, [r7, #8]
 800be70:	4618      	mov	r0, r3
 800be72:	f000 fb33 	bl	800c4dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	69da      	ldr	r2, [r3, #28]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	69da      	ldr	r2, [r3, #28]
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	69d9      	ldr	r1, [r3, #28]
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	691b      	ldr	r3, [r3, #16]
 800bea0:	021a      	lsls	r2, r3, #8
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	430a      	orrs	r2, r1
 800bea8:	61da      	str	r2, [r3, #28]
      break;
 800beaa:	e000      	b.n	800beae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800beac:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2201      	movs	r2, #1
 800beb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2200      	movs	r2, #0
 800beba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bebe:	2300      	movs	r3, #0
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3710      	adds	r7, #16
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b084      	sub	sp, #16
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d101      	bne.n	800bee0 <HAL_TIM_ConfigClockSource+0x18>
 800bedc:	2302      	movs	r3, #2
 800bede:	e0a6      	b.n	800c02e <HAL_TIM_ConfigClockSource+0x166>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2201      	movs	r2, #1
 800bee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2202      	movs	r2, #2
 800beec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	689b      	ldr	r3, [r3, #8]
 800bef6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800befe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bf06:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	68fa      	ldr	r2, [r7, #12]
 800bf0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	2b40      	cmp	r3, #64	; 0x40
 800bf16:	d067      	beq.n	800bfe8 <HAL_TIM_ConfigClockSource+0x120>
 800bf18:	2b40      	cmp	r3, #64	; 0x40
 800bf1a:	d80b      	bhi.n	800bf34 <HAL_TIM_ConfigClockSource+0x6c>
 800bf1c:	2b10      	cmp	r3, #16
 800bf1e:	d073      	beq.n	800c008 <HAL_TIM_ConfigClockSource+0x140>
 800bf20:	2b10      	cmp	r3, #16
 800bf22:	d802      	bhi.n	800bf2a <HAL_TIM_ConfigClockSource+0x62>
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d06f      	beq.n	800c008 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800bf28:	e078      	b.n	800c01c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800bf2a:	2b20      	cmp	r3, #32
 800bf2c:	d06c      	beq.n	800c008 <HAL_TIM_ConfigClockSource+0x140>
 800bf2e:	2b30      	cmp	r3, #48	; 0x30
 800bf30:	d06a      	beq.n	800c008 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800bf32:	e073      	b.n	800c01c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800bf34:	2b70      	cmp	r3, #112	; 0x70
 800bf36:	d00d      	beq.n	800bf54 <HAL_TIM_ConfigClockSource+0x8c>
 800bf38:	2b70      	cmp	r3, #112	; 0x70
 800bf3a:	d804      	bhi.n	800bf46 <HAL_TIM_ConfigClockSource+0x7e>
 800bf3c:	2b50      	cmp	r3, #80	; 0x50
 800bf3e:	d033      	beq.n	800bfa8 <HAL_TIM_ConfigClockSource+0xe0>
 800bf40:	2b60      	cmp	r3, #96	; 0x60
 800bf42:	d041      	beq.n	800bfc8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800bf44:	e06a      	b.n	800c01c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800bf46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf4a:	d066      	beq.n	800c01a <HAL_TIM_ConfigClockSource+0x152>
 800bf4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf50:	d017      	beq.n	800bf82 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800bf52:	e063      	b.n	800c01c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6818      	ldr	r0, [r3, #0]
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	6899      	ldr	r1, [r3, #8]
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	685a      	ldr	r2, [r3, #4]
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	68db      	ldr	r3, [r3, #12]
 800bf64:	f000 fcb4 	bl	800c8d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	689b      	ldr	r3, [r3, #8]
 800bf6e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bf76:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	68fa      	ldr	r2, [r7, #12]
 800bf7e:	609a      	str	r2, [r3, #8]
      break;
 800bf80:	e04c      	b.n	800c01c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6818      	ldr	r0, [r3, #0]
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	6899      	ldr	r1, [r3, #8]
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	685a      	ldr	r2, [r3, #4]
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	68db      	ldr	r3, [r3, #12]
 800bf92:	f000 fc9d 	bl	800c8d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	689a      	ldr	r2, [r3, #8]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bfa4:	609a      	str	r2, [r3, #8]
      break;
 800bfa6:	e039      	b.n	800c01c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6818      	ldr	r0, [r3, #0]
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	6859      	ldr	r1, [r3, #4]
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	68db      	ldr	r3, [r3, #12]
 800bfb4:	461a      	mov	r2, r3
 800bfb6:	f000 fb5b 	bl	800c670 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	2150      	movs	r1, #80	; 0x50
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f000 fc6a 	bl	800c89a <TIM_ITRx_SetConfig>
      break;
 800bfc6:	e029      	b.n	800c01c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6818      	ldr	r0, [r3, #0]
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	6859      	ldr	r1, [r3, #4]
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	68db      	ldr	r3, [r3, #12]
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	f000 fbb7 	bl	800c748 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	2160      	movs	r1, #96	; 0x60
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f000 fc5a 	bl	800c89a <TIM_ITRx_SetConfig>
      break;
 800bfe6:	e019      	b.n	800c01c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6818      	ldr	r0, [r3, #0]
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	6859      	ldr	r1, [r3, #4]
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	68db      	ldr	r3, [r3, #12]
 800bff4:	461a      	mov	r2, r3
 800bff6:	f000 fb3b 	bl	800c670 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2140      	movs	r1, #64	; 0x40
 800c000:	4618      	mov	r0, r3
 800c002:	f000 fc4a 	bl	800c89a <TIM_ITRx_SetConfig>
      break;
 800c006:	e009      	b.n	800c01c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4619      	mov	r1, r3
 800c012:	4610      	mov	r0, r2
 800c014:	f000 fc41 	bl	800c89a <TIM_ITRx_SetConfig>
      break;
 800c018:	e000      	b.n	800c01c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800c01a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2201      	movs	r2, #1
 800c020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2200      	movs	r2, #0
 800c028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c02c:	2300      	movs	r3, #0
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3710      	adds	r7, #16
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
	...

0800c038 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c038:	b480      	push	{r7}
 800c03a:	b085      	sub	sp, #20
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800c042:	2300      	movs	r3, #0
 800c044:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	2b0c      	cmp	r3, #12
 800c04a:	d831      	bhi.n	800c0b0 <HAL_TIM_ReadCapturedValue+0x78>
 800c04c:	a201      	add	r2, pc, #4	; (adr r2, 800c054 <HAL_TIM_ReadCapturedValue+0x1c>)
 800c04e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c052:	bf00      	nop
 800c054:	0800c089 	.word	0x0800c089
 800c058:	0800c0b1 	.word	0x0800c0b1
 800c05c:	0800c0b1 	.word	0x0800c0b1
 800c060:	0800c0b1 	.word	0x0800c0b1
 800c064:	0800c093 	.word	0x0800c093
 800c068:	0800c0b1 	.word	0x0800c0b1
 800c06c:	0800c0b1 	.word	0x0800c0b1
 800c070:	0800c0b1 	.word	0x0800c0b1
 800c074:	0800c09d 	.word	0x0800c09d
 800c078:	0800c0b1 	.word	0x0800c0b1
 800c07c:	0800c0b1 	.word	0x0800c0b1
 800c080:	0800c0b1 	.word	0x0800c0b1
 800c084:	0800c0a7 	.word	0x0800c0a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c08e:	60fb      	str	r3, [r7, #12]

      break;
 800c090:	e00f      	b.n	800c0b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c098:	60fb      	str	r3, [r7, #12]

      break;
 800c09a:	e00a      	b.n	800c0b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0a2:	60fb      	str	r3, [r7, #12]

      break;
 800c0a4:	e005      	b.n	800c0b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ac:	60fb      	str	r3, [r7, #12]

      break;
 800c0ae:	e000      	b.n	800c0b2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800c0b0:	bf00      	nop
  }

  return tmpreg;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3714      	adds	r7, #20
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr

0800c0c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b083      	sub	sp, #12
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c0c8:	bf00      	nop
 800c0ca:	370c      	adds	r7, #12
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d2:	4770      	bx	lr

0800c0d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b083      	sub	sp, #12
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c0dc:	bf00      	nop
 800c0de:	370c      	adds	r7, #12
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr

0800c0e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b085      	sub	sp, #20
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	4a40      	ldr	r2, [pc, #256]	; (800c1fc <TIM_Base_SetConfig+0x114>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d013      	beq.n	800c128 <TIM_Base_SetConfig+0x40>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c106:	d00f      	beq.n	800c128 <TIM_Base_SetConfig+0x40>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	4a3d      	ldr	r2, [pc, #244]	; (800c200 <TIM_Base_SetConfig+0x118>)
 800c10c:	4293      	cmp	r3, r2
 800c10e:	d00b      	beq.n	800c128 <TIM_Base_SetConfig+0x40>
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	4a3c      	ldr	r2, [pc, #240]	; (800c204 <TIM_Base_SetConfig+0x11c>)
 800c114:	4293      	cmp	r3, r2
 800c116:	d007      	beq.n	800c128 <TIM_Base_SetConfig+0x40>
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	4a3b      	ldr	r2, [pc, #236]	; (800c208 <TIM_Base_SetConfig+0x120>)
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d003      	beq.n	800c128 <TIM_Base_SetConfig+0x40>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	4a3a      	ldr	r2, [pc, #232]	; (800c20c <TIM_Base_SetConfig+0x124>)
 800c124:	4293      	cmp	r3, r2
 800c126:	d108      	bne.n	800c13a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c12e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	68fa      	ldr	r2, [r7, #12]
 800c136:	4313      	orrs	r3, r2
 800c138:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	4a2f      	ldr	r2, [pc, #188]	; (800c1fc <TIM_Base_SetConfig+0x114>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d02b      	beq.n	800c19a <TIM_Base_SetConfig+0xb2>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c148:	d027      	beq.n	800c19a <TIM_Base_SetConfig+0xb2>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	4a2c      	ldr	r2, [pc, #176]	; (800c200 <TIM_Base_SetConfig+0x118>)
 800c14e:	4293      	cmp	r3, r2
 800c150:	d023      	beq.n	800c19a <TIM_Base_SetConfig+0xb2>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	4a2b      	ldr	r2, [pc, #172]	; (800c204 <TIM_Base_SetConfig+0x11c>)
 800c156:	4293      	cmp	r3, r2
 800c158:	d01f      	beq.n	800c19a <TIM_Base_SetConfig+0xb2>
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	4a2a      	ldr	r2, [pc, #168]	; (800c208 <TIM_Base_SetConfig+0x120>)
 800c15e:	4293      	cmp	r3, r2
 800c160:	d01b      	beq.n	800c19a <TIM_Base_SetConfig+0xb2>
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	4a29      	ldr	r2, [pc, #164]	; (800c20c <TIM_Base_SetConfig+0x124>)
 800c166:	4293      	cmp	r3, r2
 800c168:	d017      	beq.n	800c19a <TIM_Base_SetConfig+0xb2>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	4a28      	ldr	r2, [pc, #160]	; (800c210 <TIM_Base_SetConfig+0x128>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d013      	beq.n	800c19a <TIM_Base_SetConfig+0xb2>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	4a27      	ldr	r2, [pc, #156]	; (800c214 <TIM_Base_SetConfig+0x12c>)
 800c176:	4293      	cmp	r3, r2
 800c178:	d00f      	beq.n	800c19a <TIM_Base_SetConfig+0xb2>
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	4a26      	ldr	r2, [pc, #152]	; (800c218 <TIM_Base_SetConfig+0x130>)
 800c17e:	4293      	cmp	r3, r2
 800c180:	d00b      	beq.n	800c19a <TIM_Base_SetConfig+0xb2>
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	4a25      	ldr	r2, [pc, #148]	; (800c21c <TIM_Base_SetConfig+0x134>)
 800c186:	4293      	cmp	r3, r2
 800c188:	d007      	beq.n	800c19a <TIM_Base_SetConfig+0xb2>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	4a24      	ldr	r2, [pc, #144]	; (800c220 <TIM_Base_SetConfig+0x138>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d003      	beq.n	800c19a <TIM_Base_SetConfig+0xb2>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	4a23      	ldr	r2, [pc, #140]	; (800c224 <TIM_Base_SetConfig+0x13c>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d108      	bne.n	800c1ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c1a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	68db      	ldr	r3, [r3, #12]
 800c1a6:	68fa      	ldr	r2, [r7, #12]
 800c1a8:	4313      	orrs	r3, r2
 800c1aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	695b      	ldr	r3, [r3, #20]
 800c1b6:	4313      	orrs	r3, r2
 800c1b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	68fa      	ldr	r2, [r7, #12]
 800c1be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	689a      	ldr	r2, [r3, #8]
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	681a      	ldr	r2, [r3, #0]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	4a0a      	ldr	r2, [pc, #40]	; (800c1fc <TIM_Base_SetConfig+0x114>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d003      	beq.n	800c1e0 <TIM_Base_SetConfig+0xf8>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	4a0c      	ldr	r2, [pc, #48]	; (800c20c <TIM_Base_SetConfig+0x124>)
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d103      	bne.n	800c1e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	691a      	ldr	r2, [r3, #16]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	615a      	str	r2, [r3, #20]
}
 800c1ee:	bf00      	nop
 800c1f0:	3714      	adds	r7, #20
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f8:	4770      	bx	lr
 800c1fa:	bf00      	nop
 800c1fc:	40010000 	.word	0x40010000
 800c200:	40000400 	.word	0x40000400
 800c204:	40000800 	.word	0x40000800
 800c208:	40000c00 	.word	0x40000c00
 800c20c:	40010400 	.word	0x40010400
 800c210:	40014000 	.word	0x40014000
 800c214:	40014400 	.word	0x40014400
 800c218:	40014800 	.word	0x40014800
 800c21c:	40001800 	.word	0x40001800
 800c220:	40001c00 	.word	0x40001c00
 800c224:	40002000 	.word	0x40002000

0800c228 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c228:	b480      	push	{r7}
 800c22a:	b087      	sub	sp, #28
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6a1b      	ldr	r3, [r3, #32]
 800c236:	f023 0201 	bic.w	r2, r3, #1
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6a1b      	ldr	r3, [r3, #32]
 800c242:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	699b      	ldr	r3, [r3, #24]
 800c24e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f023 0303 	bic.w	r3, r3, #3
 800c25e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	68fa      	ldr	r2, [r7, #12]
 800c266:	4313      	orrs	r3, r2
 800c268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	f023 0302 	bic.w	r3, r3, #2
 800c270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	689b      	ldr	r3, [r3, #8]
 800c276:	697a      	ldr	r2, [r7, #20]
 800c278:	4313      	orrs	r3, r2
 800c27a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	4a20      	ldr	r2, [pc, #128]	; (800c300 <TIM_OC1_SetConfig+0xd8>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d003      	beq.n	800c28c <TIM_OC1_SetConfig+0x64>
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	4a1f      	ldr	r2, [pc, #124]	; (800c304 <TIM_OC1_SetConfig+0xdc>)
 800c288:	4293      	cmp	r3, r2
 800c28a:	d10c      	bne.n	800c2a6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	f023 0308 	bic.w	r3, r3, #8
 800c292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	68db      	ldr	r3, [r3, #12]
 800c298:	697a      	ldr	r2, [r7, #20]
 800c29a:	4313      	orrs	r3, r2
 800c29c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	f023 0304 	bic.w	r3, r3, #4
 800c2a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	4a15      	ldr	r2, [pc, #84]	; (800c300 <TIM_OC1_SetConfig+0xd8>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d003      	beq.n	800c2b6 <TIM_OC1_SetConfig+0x8e>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	4a14      	ldr	r2, [pc, #80]	; (800c304 <TIM_OC1_SetConfig+0xdc>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d111      	bne.n	800c2da <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c2c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	695b      	ldr	r3, [r3, #20]
 800c2ca:	693a      	ldr	r2, [r7, #16]
 800c2cc:	4313      	orrs	r3, r2
 800c2ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	699b      	ldr	r3, [r3, #24]
 800c2d4:	693a      	ldr	r2, [r7, #16]
 800c2d6:	4313      	orrs	r3, r2
 800c2d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	693a      	ldr	r2, [r7, #16]
 800c2de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	68fa      	ldr	r2, [r7, #12]
 800c2e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	685a      	ldr	r2, [r3, #4]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	697a      	ldr	r2, [r7, #20]
 800c2f2:	621a      	str	r2, [r3, #32]
}
 800c2f4:	bf00      	nop
 800c2f6:	371c      	adds	r7, #28
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr
 800c300:	40010000 	.word	0x40010000
 800c304:	40010400 	.word	0x40010400

0800c308 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c308:	b480      	push	{r7}
 800c30a:	b087      	sub	sp, #28
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6a1b      	ldr	r3, [r3, #32]
 800c316:	f023 0210 	bic.w	r2, r3, #16
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6a1b      	ldr	r3, [r3, #32]
 800c322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	685b      	ldr	r3, [r3, #4]
 800c328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	699b      	ldr	r3, [r3, #24]
 800c32e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c33e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	021b      	lsls	r3, r3, #8
 800c346:	68fa      	ldr	r2, [r7, #12]
 800c348:	4313      	orrs	r3, r2
 800c34a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	f023 0320 	bic.w	r3, r3, #32
 800c352:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	689b      	ldr	r3, [r3, #8]
 800c358:	011b      	lsls	r3, r3, #4
 800c35a:	697a      	ldr	r2, [r7, #20]
 800c35c:	4313      	orrs	r3, r2
 800c35e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	4a22      	ldr	r2, [pc, #136]	; (800c3ec <TIM_OC2_SetConfig+0xe4>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d003      	beq.n	800c370 <TIM_OC2_SetConfig+0x68>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	4a21      	ldr	r2, [pc, #132]	; (800c3f0 <TIM_OC2_SetConfig+0xe8>)
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d10d      	bne.n	800c38c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	68db      	ldr	r3, [r3, #12]
 800c37c:	011b      	lsls	r3, r3, #4
 800c37e:	697a      	ldr	r2, [r7, #20]
 800c380:	4313      	orrs	r3, r2
 800c382:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c38a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	4a17      	ldr	r2, [pc, #92]	; (800c3ec <TIM_OC2_SetConfig+0xe4>)
 800c390:	4293      	cmp	r3, r2
 800c392:	d003      	beq.n	800c39c <TIM_OC2_SetConfig+0x94>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	4a16      	ldr	r2, [pc, #88]	; (800c3f0 <TIM_OC2_SetConfig+0xe8>)
 800c398:	4293      	cmp	r3, r2
 800c39a:	d113      	bne.n	800c3c4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c3a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c3aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	695b      	ldr	r3, [r3, #20]
 800c3b0:	009b      	lsls	r3, r3, #2
 800c3b2:	693a      	ldr	r2, [r7, #16]
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	699b      	ldr	r3, [r3, #24]
 800c3bc:	009b      	lsls	r3, r3, #2
 800c3be:	693a      	ldr	r2, [r7, #16]
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	693a      	ldr	r2, [r7, #16]
 800c3c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	685a      	ldr	r2, [r3, #4]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	697a      	ldr	r2, [r7, #20]
 800c3dc:	621a      	str	r2, [r3, #32]
}
 800c3de:	bf00      	nop
 800c3e0:	371c      	adds	r7, #28
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e8:	4770      	bx	lr
 800c3ea:	bf00      	nop
 800c3ec:	40010000 	.word	0x40010000
 800c3f0:	40010400 	.word	0x40010400

0800c3f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b087      	sub	sp, #28
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6a1b      	ldr	r3, [r3, #32]
 800c402:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6a1b      	ldr	r3, [r3, #32]
 800c40e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	69db      	ldr	r3, [r3, #28]
 800c41a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f023 0303 	bic.w	r3, r3, #3
 800c42a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	68fa      	ldr	r2, [r7, #12]
 800c432:	4313      	orrs	r3, r2
 800c434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c43c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	689b      	ldr	r3, [r3, #8]
 800c442:	021b      	lsls	r3, r3, #8
 800c444:	697a      	ldr	r2, [r7, #20]
 800c446:	4313      	orrs	r3, r2
 800c448:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	4a21      	ldr	r2, [pc, #132]	; (800c4d4 <TIM_OC3_SetConfig+0xe0>)
 800c44e:	4293      	cmp	r3, r2
 800c450:	d003      	beq.n	800c45a <TIM_OC3_SetConfig+0x66>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	4a20      	ldr	r2, [pc, #128]	; (800c4d8 <TIM_OC3_SetConfig+0xe4>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d10d      	bne.n	800c476 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c460:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	68db      	ldr	r3, [r3, #12]
 800c466:	021b      	lsls	r3, r3, #8
 800c468:	697a      	ldr	r2, [r7, #20]
 800c46a:	4313      	orrs	r3, r2
 800c46c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c474:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	4a16      	ldr	r2, [pc, #88]	; (800c4d4 <TIM_OC3_SetConfig+0xe0>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d003      	beq.n	800c486 <TIM_OC3_SetConfig+0x92>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	4a15      	ldr	r2, [pc, #84]	; (800c4d8 <TIM_OC3_SetConfig+0xe4>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d113      	bne.n	800c4ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c48c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	695b      	ldr	r3, [r3, #20]
 800c49a:	011b      	lsls	r3, r3, #4
 800c49c:	693a      	ldr	r2, [r7, #16]
 800c49e:	4313      	orrs	r3, r2
 800c4a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	699b      	ldr	r3, [r3, #24]
 800c4a6:	011b      	lsls	r3, r3, #4
 800c4a8:	693a      	ldr	r2, [r7, #16]
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	693a      	ldr	r2, [r7, #16]
 800c4b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	68fa      	ldr	r2, [r7, #12]
 800c4b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	685a      	ldr	r2, [r3, #4]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	697a      	ldr	r2, [r7, #20]
 800c4c6:	621a      	str	r2, [r3, #32]
}
 800c4c8:	bf00      	nop
 800c4ca:	371c      	adds	r7, #28
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr
 800c4d4:	40010000 	.word	0x40010000
 800c4d8:	40010400 	.word	0x40010400

0800c4dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b087      	sub	sp, #28
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6a1b      	ldr	r3, [r3, #32]
 800c4ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6a1b      	ldr	r3, [r3, #32]
 800c4f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	69db      	ldr	r3, [r3, #28]
 800c502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c50a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	021b      	lsls	r3, r3, #8
 800c51a:	68fa      	ldr	r2, [r7, #12]
 800c51c:	4313      	orrs	r3, r2
 800c51e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c526:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	689b      	ldr	r3, [r3, #8]
 800c52c:	031b      	lsls	r3, r3, #12
 800c52e:	693a      	ldr	r2, [r7, #16]
 800c530:	4313      	orrs	r3, r2
 800c532:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	4a12      	ldr	r2, [pc, #72]	; (800c580 <TIM_OC4_SetConfig+0xa4>)
 800c538:	4293      	cmp	r3, r2
 800c53a:	d003      	beq.n	800c544 <TIM_OC4_SetConfig+0x68>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	4a11      	ldr	r2, [pc, #68]	; (800c584 <TIM_OC4_SetConfig+0xa8>)
 800c540:	4293      	cmp	r3, r2
 800c542:	d109      	bne.n	800c558 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c54a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	695b      	ldr	r3, [r3, #20]
 800c550:	019b      	lsls	r3, r3, #6
 800c552:	697a      	ldr	r2, [r7, #20]
 800c554:	4313      	orrs	r3, r2
 800c556:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	697a      	ldr	r2, [r7, #20]
 800c55c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	68fa      	ldr	r2, [r7, #12]
 800c562:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	685a      	ldr	r2, [r3, #4]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	693a      	ldr	r2, [r7, #16]
 800c570:	621a      	str	r2, [r3, #32]
}
 800c572:	bf00      	nop
 800c574:	371c      	adds	r7, #28
 800c576:	46bd      	mov	sp, r7
 800c578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57c:	4770      	bx	lr
 800c57e:	bf00      	nop
 800c580:	40010000 	.word	0x40010000
 800c584:	40010400 	.word	0x40010400

0800c588 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800c588:	b480      	push	{r7}
 800c58a:	b087      	sub	sp, #28
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	60b9      	str	r1, [r7, #8]
 800c592:	607a      	str	r2, [r7, #4]
 800c594:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	6a1b      	ldr	r3, [r3, #32]
 800c59a:	f023 0201 	bic.w	r2, r3, #1
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	699b      	ldr	r3, [r3, #24]
 800c5a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	6a1b      	ldr	r3, [r3, #32]
 800c5ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	4a28      	ldr	r2, [pc, #160]	; (800c654 <TIM_TI1_SetConfig+0xcc>)
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d01b      	beq.n	800c5ee <TIM_TI1_SetConfig+0x66>
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5bc:	d017      	beq.n	800c5ee <TIM_TI1_SetConfig+0x66>
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	4a25      	ldr	r2, [pc, #148]	; (800c658 <TIM_TI1_SetConfig+0xd0>)
 800c5c2:	4293      	cmp	r3, r2
 800c5c4:	d013      	beq.n	800c5ee <TIM_TI1_SetConfig+0x66>
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	4a24      	ldr	r2, [pc, #144]	; (800c65c <TIM_TI1_SetConfig+0xd4>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d00f      	beq.n	800c5ee <TIM_TI1_SetConfig+0x66>
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	4a23      	ldr	r2, [pc, #140]	; (800c660 <TIM_TI1_SetConfig+0xd8>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d00b      	beq.n	800c5ee <TIM_TI1_SetConfig+0x66>
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	4a22      	ldr	r2, [pc, #136]	; (800c664 <TIM_TI1_SetConfig+0xdc>)
 800c5da:	4293      	cmp	r3, r2
 800c5dc:	d007      	beq.n	800c5ee <TIM_TI1_SetConfig+0x66>
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	4a21      	ldr	r2, [pc, #132]	; (800c668 <TIM_TI1_SetConfig+0xe0>)
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d003      	beq.n	800c5ee <TIM_TI1_SetConfig+0x66>
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	4a20      	ldr	r2, [pc, #128]	; (800c66c <TIM_TI1_SetConfig+0xe4>)
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d101      	bne.n	800c5f2 <TIM_TI1_SetConfig+0x6a>
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	e000      	b.n	800c5f4 <TIM_TI1_SetConfig+0x6c>
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d008      	beq.n	800c60a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c5f8:	697b      	ldr	r3, [r7, #20]
 800c5fa:	f023 0303 	bic.w	r3, r3, #3
 800c5fe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800c600:	697a      	ldr	r2, [r7, #20]
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	4313      	orrs	r3, r2
 800c606:	617b      	str	r3, [r7, #20]
 800c608:	e003      	b.n	800c612 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	f043 0301 	orr.w	r3, r3, #1
 800c610:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c618:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	011b      	lsls	r3, r3, #4
 800c61e:	b2db      	uxtb	r3, r3
 800c620:	697a      	ldr	r2, [r7, #20]
 800c622:	4313      	orrs	r3, r2
 800c624:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	f023 030a 	bic.w	r3, r3, #10
 800c62c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	f003 030a 	and.w	r3, r3, #10
 800c634:	693a      	ldr	r2, [r7, #16]
 800c636:	4313      	orrs	r3, r2
 800c638:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	697a      	ldr	r2, [r7, #20]
 800c63e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	693a      	ldr	r2, [r7, #16]
 800c644:	621a      	str	r2, [r3, #32]
}
 800c646:	bf00      	nop
 800c648:	371c      	adds	r7, #28
 800c64a:	46bd      	mov	sp, r7
 800c64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c650:	4770      	bx	lr
 800c652:	bf00      	nop
 800c654:	40010000 	.word	0x40010000
 800c658:	40000400 	.word	0x40000400
 800c65c:	40000800 	.word	0x40000800
 800c660:	40000c00 	.word	0x40000c00
 800c664:	40010400 	.word	0x40010400
 800c668:	40014000 	.word	0x40014000
 800c66c:	40001800 	.word	0x40001800

0800c670 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c670:	b480      	push	{r7}
 800c672:	b087      	sub	sp, #28
 800c674:	af00      	add	r7, sp, #0
 800c676:	60f8      	str	r0, [r7, #12]
 800c678:	60b9      	str	r1, [r7, #8]
 800c67a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	6a1b      	ldr	r3, [r3, #32]
 800c680:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	6a1b      	ldr	r3, [r3, #32]
 800c686:	f023 0201 	bic.w	r2, r3, #1
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	699b      	ldr	r3, [r3, #24]
 800c692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c69a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	011b      	lsls	r3, r3, #4
 800c6a0:	693a      	ldr	r2, [r7, #16]
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	f023 030a 	bic.w	r3, r3, #10
 800c6ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c6ae:	697a      	ldr	r2, [r7, #20]
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	4313      	orrs	r3, r2
 800c6b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	693a      	ldr	r2, [r7, #16]
 800c6ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	697a      	ldr	r2, [r7, #20]
 800c6c0:	621a      	str	r2, [r3, #32]
}
 800c6c2:	bf00      	nop
 800c6c4:	371c      	adds	r7, #28
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6cc:	4770      	bx	lr

0800c6ce <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c6ce:	b480      	push	{r7}
 800c6d0:	b087      	sub	sp, #28
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	60f8      	str	r0, [r7, #12]
 800c6d6:	60b9      	str	r1, [r7, #8]
 800c6d8:	607a      	str	r2, [r7, #4]
 800c6da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	6a1b      	ldr	r3, [r3, #32]
 800c6e0:	f023 0210 	bic.w	r2, r3, #16
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	699b      	ldr	r3, [r3, #24]
 800c6ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	6a1b      	ldr	r3, [r3, #32]
 800c6f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c6fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	021b      	lsls	r3, r3, #8
 800c700:	697a      	ldr	r2, [r7, #20]
 800c702:	4313      	orrs	r3, r2
 800c704:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c70c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	031b      	lsls	r3, r3, #12
 800c712:	b29b      	uxth	r3, r3
 800c714:	697a      	ldr	r2, [r7, #20]
 800c716:	4313      	orrs	r3, r2
 800c718:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c720:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	011b      	lsls	r3, r3, #4
 800c726:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c72a:	693a      	ldr	r2, [r7, #16]
 800c72c:	4313      	orrs	r3, r2
 800c72e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	697a      	ldr	r2, [r7, #20]
 800c734:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	693a      	ldr	r2, [r7, #16]
 800c73a:	621a      	str	r2, [r3, #32]
}
 800c73c:	bf00      	nop
 800c73e:	371c      	adds	r7, #28
 800c740:	46bd      	mov	sp, r7
 800c742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c746:	4770      	bx	lr

0800c748 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c748:	b480      	push	{r7}
 800c74a:	b087      	sub	sp, #28
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	60f8      	str	r0, [r7, #12]
 800c750:	60b9      	str	r1, [r7, #8]
 800c752:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	6a1b      	ldr	r3, [r3, #32]
 800c758:	f023 0210 	bic.w	r2, r3, #16
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	699b      	ldr	r3, [r3, #24]
 800c764:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	6a1b      	ldr	r3, [r3, #32]
 800c76a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c772:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	031b      	lsls	r3, r3, #12
 800c778:	697a      	ldr	r2, [r7, #20]
 800c77a:	4313      	orrs	r3, r2
 800c77c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c784:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	011b      	lsls	r3, r3, #4
 800c78a:	693a      	ldr	r2, [r7, #16]
 800c78c:	4313      	orrs	r3, r2
 800c78e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	697a      	ldr	r2, [r7, #20]
 800c794:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	693a      	ldr	r2, [r7, #16]
 800c79a:	621a      	str	r2, [r3, #32]
}
 800c79c:	bf00      	nop
 800c79e:	371c      	adds	r7, #28
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr

0800c7a8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b087      	sub	sp, #28
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	60f8      	str	r0, [r7, #12]
 800c7b0:	60b9      	str	r1, [r7, #8]
 800c7b2:	607a      	str	r2, [r7, #4]
 800c7b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	6a1b      	ldr	r3, [r3, #32]
 800c7ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	69db      	ldr	r3, [r3, #28]
 800c7c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	6a1b      	ldr	r3, [r3, #32]
 800c7cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	f023 0303 	bic.w	r3, r3, #3
 800c7d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800c7d6:	697a      	ldr	r2, [r7, #20]
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c7e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	011b      	lsls	r3, r3, #4
 800c7ea:	b2db      	uxtb	r3, r3
 800c7ec:	697a      	ldr	r2, [r7, #20]
 800c7ee:	4313      	orrs	r3, r2
 800c7f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800c7f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	021b      	lsls	r3, r3, #8
 800c7fe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800c802:	693a      	ldr	r2, [r7, #16]
 800c804:	4313      	orrs	r3, r2
 800c806:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	697a      	ldr	r2, [r7, #20]
 800c80c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	693a      	ldr	r2, [r7, #16]
 800c812:	621a      	str	r2, [r3, #32]
}
 800c814:	bf00      	nop
 800c816:	371c      	adds	r7, #28
 800c818:	46bd      	mov	sp, r7
 800c81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81e:	4770      	bx	lr

0800c820 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c820:	b480      	push	{r7}
 800c822:	b087      	sub	sp, #28
 800c824:	af00      	add	r7, sp, #0
 800c826:	60f8      	str	r0, [r7, #12]
 800c828:	60b9      	str	r1, [r7, #8]
 800c82a:	607a      	str	r2, [r7, #4]
 800c82c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	6a1b      	ldr	r3, [r3, #32]
 800c832:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	69db      	ldr	r3, [r3, #28]
 800c83e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	6a1b      	ldr	r3, [r3, #32]
 800c844:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c84c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	021b      	lsls	r3, r3, #8
 800c852:	697a      	ldr	r2, [r7, #20]
 800c854:	4313      	orrs	r3, r2
 800c856:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c85e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	031b      	lsls	r3, r3, #12
 800c864:	b29b      	uxth	r3, r3
 800c866:	697a      	ldr	r2, [r7, #20]
 800c868:	4313      	orrs	r3, r2
 800c86a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800c872:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	031b      	lsls	r3, r3, #12
 800c878:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800c87c:	693a      	ldr	r2, [r7, #16]
 800c87e:	4313      	orrs	r3, r2
 800c880:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	697a      	ldr	r2, [r7, #20]
 800c886:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	693a      	ldr	r2, [r7, #16]
 800c88c:	621a      	str	r2, [r3, #32]
}
 800c88e:	bf00      	nop
 800c890:	371c      	adds	r7, #28
 800c892:	46bd      	mov	sp, r7
 800c894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c898:	4770      	bx	lr

0800c89a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c89a:	b480      	push	{r7}
 800c89c:	b085      	sub	sp, #20
 800c89e:	af00      	add	r7, sp, #0
 800c8a0:	6078      	str	r0, [r7, #4]
 800c8a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	689b      	ldr	r3, [r3, #8]
 800c8a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c8b2:	683a      	ldr	r2, [r7, #0]
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	f043 0307 	orr.w	r3, r3, #7
 800c8bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	68fa      	ldr	r2, [r7, #12]
 800c8c2:	609a      	str	r2, [r3, #8]
}
 800c8c4:	bf00      	nop
 800c8c6:	3714      	adds	r7, #20
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ce:	4770      	bx	lr

0800c8d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b087      	sub	sp, #28
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	60f8      	str	r0, [r7, #12]
 800c8d8:	60b9      	str	r1, [r7, #8]
 800c8da:	607a      	str	r2, [r7, #4]
 800c8dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	689b      	ldr	r3, [r3, #8]
 800c8e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c8ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	021a      	lsls	r2, r3, #8
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	431a      	orrs	r2, r3
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	697a      	ldr	r2, [r7, #20]
 800c8fa:	4313      	orrs	r3, r2
 800c8fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	697a      	ldr	r2, [r7, #20]
 800c902:	609a      	str	r2, [r3, #8]
}
 800c904:	bf00      	nop
 800c906:	371c      	adds	r7, #28
 800c908:	46bd      	mov	sp, r7
 800c90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90e:	4770      	bx	lr

0800c910 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c910:	b480      	push	{r7}
 800c912:	b087      	sub	sp, #28
 800c914:	af00      	add	r7, sp, #0
 800c916:	60f8      	str	r0, [r7, #12]
 800c918:	60b9      	str	r1, [r7, #8]
 800c91a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	f003 031f 	and.w	r3, r3, #31
 800c922:	2201      	movs	r2, #1
 800c924:	fa02 f303 	lsl.w	r3, r2, r3
 800c928:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	6a1a      	ldr	r2, [r3, #32]
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	43db      	mvns	r3, r3
 800c932:	401a      	ands	r2, r3
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	6a1a      	ldr	r2, [r3, #32]
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	f003 031f 	and.w	r3, r3, #31
 800c942:	6879      	ldr	r1, [r7, #4]
 800c944:	fa01 f303 	lsl.w	r3, r1, r3
 800c948:	431a      	orrs	r2, r3
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	621a      	str	r2, [r3, #32]
}
 800c94e:	bf00      	nop
 800c950:	371c      	adds	r7, #28
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr
	...

0800c95c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c95c:	b480      	push	{r7}
 800c95e:	b085      	sub	sp, #20
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c96c:	2b01      	cmp	r3, #1
 800c96e:	d101      	bne.n	800c974 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c970:	2302      	movs	r3, #2
 800c972:	e05a      	b.n	800ca2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2201      	movs	r2, #1
 800c978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2202      	movs	r2, #2
 800c980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	689b      	ldr	r3, [r3, #8]
 800c992:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c99a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	68fa      	ldr	r2, [r7, #12]
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	68fa      	ldr	r2, [r7, #12]
 800c9ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	4a21      	ldr	r2, [pc, #132]	; (800ca38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d022      	beq.n	800c9fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9c0:	d01d      	beq.n	800c9fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	4a1d      	ldr	r2, [pc, #116]	; (800ca3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d018      	beq.n	800c9fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	4a1b      	ldr	r2, [pc, #108]	; (800ca40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d013      	beq.n	800c9fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	4a1a      	ldr	r2, [pc, #104]	; (800ca44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c9dc:	4293      	cmp	r3, r2
 800c9de:	d00e      	beq.n	800c9fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	4a18      	ldr	r2, [pc, #96]	; (800ca48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d009      	beq.n	800c9fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	4a17      	ldr	r2, [pc, #92]	; (800ca4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	d004      	beq.n	800c9fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4a15      	ldr	r2, [pc, #84]	; (800ca50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d10c      	bne.n	800ca18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	68ba      	ldr	r2, [r7, #8]
 800ca0c:	4313      	orrs	r3, r2
 800ca0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	68ba      	ldr	r2, [r7, #8]
 800ca16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2200      	movs	r2, #0
 800ca24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ca28:	2300      	movs	r3, #0
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3714      	adds	r7, #20
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca34:	4770      	bx	lr
 800ca36:	bf00      	nop
 800ca38:	40010000 	.word	0x40010000
 800ca3c:	40000400 	.word	0x40000400
 800ca40:	40000800 	.word	0x40000800
 800ca44:	40000c00 	.word	0x40000c00
 800ca48:	40010400 	.word	0x40010400
 800ca4c:	40014000 	.word	0x40014000
 800ca50:	40001800 	.word	0x40001800

0800ca54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ca54:	b480      	push	{r7}
 800ca56:	b085      	sub	sp, #20
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
 800ca5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d101      	bne.n	800ca70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ca6c:	2302      	movs	r3, #2
 800ca6e:	e03d      	b.n	800caec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2201      	movs	r2, #1
 800ca74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	68db      	ldr	r3, [r3, #12]
 800ca82:	4313      	orrs	r3, r2
 800ca84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	689b      	ldr	r3, [r3, #8]
 800ca90:	4313      	orrs	r3, r2
 800ca92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	4313      	orrs	r3, r2
 800caa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4313      	orrs	r3, r2
 800caae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	691b      	ldr	r3, [r3, #16]
 800caba:	4313      	orrs	r3, r2
 800cabc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	695b      	ldr	r3, [r3, #20]
 800cac8:	4313      	orrs	r3, r2
 800caca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	69db      	ldr	r3, [r3, #28]
 800cad6:	4313      	orrs	r3, r2
 800cad8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	68fa      	ldr	r2, [r7, #12]
 800cae0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2200      	movs	r2, #0
 800cae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800caea:	2300      	movs	r3, #0
}
 800caec:	4618      	mov	r0, r3
 800caee:	3714      	adds	r7, #20
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr

0800caf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800caf8:	b480      	push	{r7}
 800cafa:	b083      	sub	sp, #12
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cb00:	bf00      	nop
 800cb02:	370c      	adds	r7, #12
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr

0800cb0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b083      	sub	sp, #12
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cb14:	bf00      	nop
 800cb16:	370c      	adds	r7, #12
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1e:	4770      	bx	lr

0800cb20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cb20:	b084      	sub	sp, #16
 800cb22:	b580      	push	{r7, lr}
 800cb24:	b084      	sub	sp, #16
 800cb26:	af00      	add	r7, sp, #0
 800cb28:	6078      	str	r0, [r7, #4]
 800cb2a:	f107 001c 	add.w	r0, r7, #28
 800cb2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb34:	2b01      	cmp	r3, #1
 800cb36:	d122      	bne.n	800cb7e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	68db      	ldr	r3, [r3, #12]
 800cb48:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800cb4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb50:	687a      	ldr	r2, [r7, #4]
 800cb52:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	68db      	ldr	r3, [r3, #12]
 800cb58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cb60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb62:	2b01      	cmp	r3, #1
 800cb64:	d105      	bne.n	800cb72 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	68db      	ldr	r3, [r3, #12]
 800cb6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f001 fab4 	bl	800e0e0 <USB_CoreReset>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	73fb      	strb	r3, [r7, #15]
 800cb7c:	e01a      	b.n	800cbb4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	68db      	ldr	r3, [r3, #12]
 800cb82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f001 faa8 	bl	800e0e0 <USB_CoreReset>
 800cb90:	4603      	mov	r3, r0
 800cb92:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cb94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d106      	bne.n	800cba8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	639a      	str	r2, [r3, #56]	; 0x38
 800cba6:	e005      	b.n	800cbb4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800cbb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb6:	2b01      	cmp	r3, #1
 800cbb8:	d10b      	bne.n	800cbd2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	689b      	ldr	r3, [r3, #8]
 800cbbe:	f043 0206 	orr.w	r2, r3, #6
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	689b      	ldr	r3, [r3, #8]
 800cbca:	f043 0220 	orr.w	r2, r3, #32
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cbd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3710      	adds	r7, #16
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cbde:	b004      	add	sp, #16
 800cbe0:	4770      	bx	lr
	...

0800cbe4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b087      	sub	sp, #28
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	60f8      	str	r0, [r7, #12]
 800cbec:	60b9      	str	r1, [r7, #8]
 800cbee:	4613      	mov	r3, r2
 800cbf0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800cbf2:	79fb      	ldrb	r3, [r7, #7]
 800cbf4:	2b02      	cmp	r3, #2
 800cbf6:	d165      	bne.n	800ccc4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	4a41      	ldr	r2, [pc, #260]	; (800cd00 <USB_SetTurnaroundTime+0x11c>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d906      	bls.n	800cc0e <USB_SetTurnaroundTime+0x2a>
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	4a40      	ldr	r2, [pc, #256]	; (800cd04 <USB_SetTurnaroundTime+0x120>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d802      	bhi.n	800cc0e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800cc08:	230f      	movs	r3, #15
 800cc0a:	617b      	str	r3, [r7, #20]
 800cc0c:	e062      	b.n	800ccd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	4a3c      	ldr	r2, [pc, #240]	; (800cd04 <USB_SetTurnaroundTime+0x120>)
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d906      	bls.n	800cc24 <USB_SetTurnaroundTime+0x40>
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	4a3b      	ldr	r2, [pc, #236]	; (800cd08 <USB_SetTurnaroundTime+0x124>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d802      	bhi.n	800cc24 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800cc1e:	230e      	movs	r3, #14
 800cc20:	617b      	str	r3, [r7, #20]
 800cc22:	e057      	b.n	800ccd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	4a38      	ldr	r2, [pc, #224]	; (800cd08 <USB_SetTurnaroundTime+0x124>)
 800cc28:	4293      	cmp	r3, r2
 800cc2a:	d906      	bls.n	800cc3a <USB_SetTurnaroundTime+0x56>
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	4a37      	ldr	r2, [pc, #220]	; (800cd0c <USB_SetTurnaroundTime+0x128>)
 800cc30:	4293      	cmp	r3, r2
 800cc32:	d802      	bhi.n	800cc3a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800cc34:	230d      	movs	r3, #13
 800cc36:	617b      	str	r3, [r7, #20]
 800cc38:	e04c      	b.n	800ccd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	4a33      	ldr	r2, [pc, #204]	; (800cd0c <USB_SetTurnaroundTime+0x128>)
 800cc3e:	4293      	cmp	r3, r2
 800cc40:	d906      	bls.n	800cc50 <USB_SetTurnaroundTime+0x6c>
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	4a32      	ldr	r2, [pc, #200]	; (800cd10 <USB_SetTurnaroundTime+0x12c>)
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d802      	bhi.n	800cc50 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800cc4a:	230c      	movs	r3, #12
 800cc4c:	617b      	str	r3, [r7, #20]
 800cc4e:	e041      	b.n	800ccd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	4a2f      	ldr	r2, [pc, #188]	; (800cd10 <USB_SetTurnaroundTime+0x12c>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d906      	bls.n	800cc66 <USB_SetTurnaroundTime+0x82>
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	4a2e      	ldr	r2, [pc, #184]	; (800cd14 <USB_SetTurnaroundTime+0x130>)
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d802      	bhi.n	800cc66 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800cc60:	230b      	movs	r3, #11
 800cc62:	617b      	str	r3, [r7, #20]
 800cc64:	e036      	b.n	800ccd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	4a2a      	ldr	r2, [pc, #168]	; (800cd14 <USB_SetTurnaroundTime+0x130>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d906      	bls.n	800cc7c <USB_SetTurnaroundTime+0x98>
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	4a29      	ldr	r2, [pc, #164]	; (800cd18 <USB_SetTurnaroundTime+0x134>)
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d802      	bhi.n	800cc7c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800cc76:	230a      	movs	r3, #10
 800cc78:	617b      	str	r3, [r7, #20]
 800cc7a:	e02b      	b.n	800ccd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	4a26      	ldr	r2, [pc, #152]	; (800cd18 <USB_SetTurnaroundTime+0x134>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d906      	bls.n	800cc92 <USB_SetTurnaroundTime+0xae>
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	4a25      	ldr	r2, [pc, #148]	; (800cd1c <USB_SetTurnaroundTime+0x138>)
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d802      	bhi.n	800cc92 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800cc8c:	2309      	movs	r3, #9
 800cc8e:	617b      	str	r3, [r7, #20]
 800cc90:	e020      	b.n	800ccd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	4a21      	ldr	r2, [pc, #132]	; (800cd1c <USB_SetTurnaroundTime+0x138>)
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d906      	bls.n	800cca8 <USB_SetTurnaroundTime+0xc4>
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	4a20      	ldr	r2, [pc, #128]	; (800cd20 <USB_SetTurnaroundTime+0x13c>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d802      	bhi.n	800cca8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800cca2:	2308      	movs	r3, #8
 800cca4:	617b      	str	r3, [r7, #20]
 800cca6:	e015      	b.n	800ccd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	4a1d      	ldr	r2, [pc, #116]	; (800cd20 <USB_SetTurnaroundTime+0x13c>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d906      	bls.n	800ccbe <USB_SetTurnaroundTime+0xda>
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	4a1c      	ldr	r2, [pc, #112]	; (800cd24 <USB_SetTurnaroundTime+0x140>)
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d802      	bhi.n	800ccbe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ccb8:	2307      	movs	r3, #7
 800ccba:	617b      	str	r3, [r7, #20]
 800ccbc:	e00a      	b.n	800ccd4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ccbe:	2306      	movs	r3, #6
 800ccc0:	617b      	str	r3, [r7, #20]
 800ccc2:	e007      	b.n	800ccd4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ccc4:	79fb      	ldrb	r3, [r7, #7]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d102      	bne.n	800ccd0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ccca:	2309      	movs	r3, #9
 800cccc:	617b      	str	r3, [r7, #20]
 800ccce:	e001      	b.n	800ccd4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ccd0:	2309      	movs	r3, #9
 800ccd2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	68db      	ldr	r3, [r3, #12]
 800ccd8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	68da      	ldr	r2, [r3, #12]
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	029b      	lsls	r3, r3, #10
 800cce8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ccec:	431a      	orrs	r2, r3
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ccf2:	2300      	movs	r3, #0
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	371c      	adds	r7, #28
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfe:	4770      	bx	lr
 800cd00:	00d8acbf 	.word	0x00d8acbf
 800cd04:	00e4e1bf 	.word	0x00e4e1bf
 800cd08:	00f423ff 	.word	0x00f423ff
 800cd0c:	0106737f 	.word	0x0106737f
 800cd10:	011a499f 	.word	0x011a499f
 800cd14:	01312cff 	.word	0x01312cff
 800cd18:	014ca43f 	.word	0x014ca43f
 800cd1c:	016e35ff 	.word	0x016e35ff
 800cd20:	01a6ab1f 	.word	0x01a6ab1f
 800cd24:	01e847ff 	.word	0x01e847ff

0800cd28 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b083      	sub	sp, #12
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	689b      	ldr	r3, [r3, #8]
 800cd34:	f043 0201 	orr.w	r2, r3, #1
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cd3c:	2300      	movs	r3, #0
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	370c      	adds	r7, #12
 800cd42:	46bd      	mov	sp, r7
 800cd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd48:	4770      	bx	lr

0800cd4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cd4a:	b480      	push	{r7}
 800cd4c:	b083      	sub	sp, #12
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	689b      	ldr	r3, [r3, #8]
 800cd56:	f023 0201 	bic.w	r2, r3, #1
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cd5e:	2300      	movs	r3, #0
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	370c      	adds	r7, #12
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr

0800cd6c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b082      	sub	sp, #8
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	460b      	mov	r3, r1
 800cd76:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	68db      	ldr	r3, [r3, #12]
 800cd7c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cd84:	78fb      	ldrb	r3, [r7, #3]
 800cd86:	2b01      	cmp	r3, #1
 800cd88:	d106      	bne.n	800cd98 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	68db      	ldr	r3, [r3, #12]
 800cd8e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	60da      	str	r2, [r3, #12]
 800cd96:	e00b      	b.n	800cdb0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800cd98:	78fb      	ldrb	r3, [r7, #3]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d106      	bne.n	800cdac <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	68db      	ldr	r3, [r3, #12]
 800cda2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	60da      	str	r2, [r3, #12]
 800cdaa:	e001      	b.n	800cdb0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800cdac:	2301      	movs	r3, #1
 800cdae:	e003      	b.n	800cdb8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800cdb0:	2032      	movs	r0, #50	; 0x32
 800cdb2:	f7f9 f9bf 	bl	8006134 <HAL_Delay>

  return HAL_OK;
 800cdb6:	2300      	movs	r3, #0
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3708      	adds	r7, #8
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cdc0:	b084      	sub	sp, #16
 800cdc2:	b580      	push	{r7, lr}
 800cdc4:	b086      	sub	sp, #24
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	6078      	str	r0, [r7, #4]
 800cdca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cdce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cdda:	2300      	movs	r3, #0
 800cddc:	613b      	str	r3, [r7, #16]
 800cdde:	e009      	b.n	800cdf4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cde0:	687a      	ldr	r2, [r7, #4]
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	3340      	adds	r3, #64	; 0x40
 800cde6:	009b      	lsls	r3, r3, #2
 800cde8:	4413      	add	r3, r2
 800cdea:	2200      	movs	r2, #0
 800cdec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	3301      	adds	r3, #1
 800cdf2:	613b      	str	r3, [r7, #16]
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	2b0e      	cmp	r3, #14
 800cdf8:	d9f2      	bls.n	800cde0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cdfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d11c      	bne.n	800ce3a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce06:	685b      	ldr	r3, [r3, #4]
 800ce08:	68fa      	ldr	r2, [r7, #12]
 800ce0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ce0e:	f043 0302 	orr.w	r3, r3, #2
 800ce12:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce18:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce24:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce30:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	639a      	str	r2, [r3, #56]	; 0x38
 800ce38:	e00b      	b.n	800ce52 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce3e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce4a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ce58:	461a      	mov	r2, r3
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce64:	4619      	mov	r1, r3
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce6c:	461a      	mov	r2, r3
 800ce6e:	680b      	ldr	r3, [r1, #0]
 800ce70:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ce72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce74:	2b01      	cmp	r3, #1
 800ce76:	d10c      	bne.n	800ce92 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ce78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d104      	bne.n	800ce88 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ce7e:	2100      	movs	r1, #0
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f000 f949 	bl	800d118 <USB_SetDevSpeed>
 800ce86:	e008      	b.n	800ce9a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ce88:	2101      	movs	r1, #1
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f000 f944 	bl	800d118 <USB_SetDevSpeed>
 800ce90:	e003      	b.n	800ce9a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ce92:	2103      	movs	r1, #3
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f000 f93f 	bl	800d118 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ce9a:	2110      	movs	r1, #16
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f000 f8f3 	bl	800d088 <USB_FlushTxFifo>
 800cea2:	4603      	mov	r3, r0
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d001      	beq.n	800ceac <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800cea8:	2301      	movs	r3, #1
 800ceaa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f000 f911 	bl	800d0d4 <USB_FlushRxFifo>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d001      	beq.n	800cebc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800ceb8:	2301      	movs	r3, #1
 800ceba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cec2:	461a      	mov	r2, r3
 800cec4:	2300      	movs	r3, #0
 800cec6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cece:	461a      	mov	r2, r3
 800ced0:	2300      	movs	r3, #0
 800ced2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ceda:	461a      	mov	r2, r3
 800cedc:	2300      	movs	r3, #0
 800cede:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cee0:	2300      	movs	r3, #0
 800cee2:	613b      	str	r3, [r7, #16]
 800cee4:	e043      	b.n	800cf6e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	015a      	lsls	r2, r3, #5
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	4413      	add	r3, r2
 800ceee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cef8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cefc:	d118      	bne.n	800cf30 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800cefe:	693b      	ldr	r3, [r7, #16]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d10a      	bne.n	800cf1a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	015a      	lsls	r2, r3, #5
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	4413      	add	r3, r2
 800cf0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf10:	461a      	mov	r2, r3
 800cf12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cf16:	6013      	str	r3, [r2, #0]
 800cf18:	e013      	b.n	800cf42 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	015a      	lsls	r2, r3, #5
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	4413      	add	r3, r2
 800cf22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf26:	461a      	mov	r2, r3
 800cf28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cf2c:	6013      	str	r3, [r2, #0]
 800cf2e:	e008      	b.n	800cf42 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800cf30:	693b      	ldr	r3, [r7, #16]
 800cf32:	015a      	lsls	r2, r3, #5
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	4413      	add	r3, r2
 800cf38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	2300      	movs	r3, #0
 800cf40:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	015a      	lsls	r2, r3, #5
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	4413      	add	r3, r2
 800cf4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf4e:	461a      	mov	r2, r3
 800cf50:	2300      	movs	r3, #0
 800cf52:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cf54:	693b      	ldr	r3, [r7, #16]
 800cf56:	015a      	lsls	r2, r3, #5
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	4413      	add	r3, r2
 800cf5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf60:	461a      	mov	r2, r3
 800cf62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cf66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	3301      	adds	r3, #1
 800cf6c:	613b      	str	r3, [r7, #16]
 800cf6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf70:	693a      	ldr	r2, [r7, #16]
 800cf72:	429a      	cmp	r2, r3
 800cf74:	d3b7      	bcc.n	800cee6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cf76:	2300      	movs	r3, #0
 800cf78:	613b      	str	r3, [r7, #16]
 800cf7a:	e043      	b.n	800d004 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	015a      	lsls	r2, r3, #5
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	4413      	add	r3, r2
 800cf84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cf8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cf92:	d118      	bne.n	800cfc6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d10a      	bne.n	800cfb0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	015a      	lsls	r2, r3, #5
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	4413      	add	r3, r2
 800cfa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfa6:	461a      	mov	r2, r3
 800cfa8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cfac:	6013      	str	r3, [r2, #0]
 800cfae:	e013      	b.n	800cfd8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	015a      	lsls	r2, r3, #5
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	4413      	add	r3, r2
 800cfb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfbc:	461a      	mov	r2, r3
 800cfbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cfc2:	6013      	str	r3, [r2, #0]
 800cfc4:	e008      	b.n	800cfd8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cfc6:	693b      	ldr	r3, [r7, #16]
 800cfc8:	015a      	lsls	r2, r3, #5
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	4413      	add	r3, r2
 800cfce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfd2:	461a      	mov	r2, r3
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	015a      	lsls	r2, r3, #5
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	4413      	add	r3, r2
 800cfe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cfe4:	461a      	mov	r2, r3
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	015a      	lsls	r2, r3, #5
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	4413      	add	r3, r2
 800cff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cff6:	461a      	mov	r2, r3
 800cff8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cffc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	3301      	adds	r3, #1
 800d002:	613b      	str	r3, [r7, #16]
 800d004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d006:	693a      	ldr	r2, [r7, #16]
 800d008:	429a      	cmp	r2, r3
 800d00a:	d3b7      	bcc.n	800cf7c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d012:	691b      	ldr	r3, [r3, #16]
 800d014:	68fa      	ldr	r2, [r7, #12]
 800d016:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d01a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d01e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2200      	movs	r2, #0
 800d024:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d02c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d030:	2b00      	cmp	r3, #0
 800d032:	d105      	bne.n	800d040 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	699b      	ldr	r3, [r3, #24]
 800d038:	f043 0210 	orr.w	r2, r3, #16
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	699a      	ldr	r2, [r3, #24]
 800d044:	4b0f      	ldr	r3, [pc, #60]	; (800d084 <USB_DevInit+0x2c4>)
 800d046:	4313      	orrs	r3, r2
 800d048:	687a      	ldr	r2, [r7, #4]
 800d04a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d04c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d005      	beq.n	800d05e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	699b      	ldr	r3, [r3, #24]
 800d056:	f043 0208 	orr.w	r2, r3, #8
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d05e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d060:	2b01      	cmp	r3, #1
 800d062:	d107      	bne.n	800d074 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	699b      	ldr	r3, [r3, #24]
 800d068:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d06c:	f043 0304 	orr.w	r3, r3, #4
 800d070:	687a      	ldr	r2, [r7, #4]
 800d072:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d074:	7dfb      	ldrb	r3, [r7, #23]
}
 800d076:	4618      	mov	r0, r3
 800d078:	3718      	adds	r7, #24
 800d07a:	46bd      	mov	sp, r7
 800d07c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d080:	b004      	add	sp, #16
 800d082:	4770      	bx	lr
 800d084:	803c3800 	.word	0x803c3800

0800d088 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d088:	b480      	push	{r7}
 800d08a:	b085      	sub	sp, #20
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d092:	2300      	movs	r3, #0
 800d094:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	019b      	lsls	r3, r3, #6
 800d09a:	f043 0220 	orr.w	r2, r3, #32
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	3301      	adds	r3, #1
 800d0a6:	60fb      	str	r3, [r7, #12]
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	4a09      	ldr	r2, [pc, #36]	; (800d0d0 <USB_FlushTxFifo+0x48>)
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d901      	bls.n	800d0b4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d0b0:	2303      	movs	r3, #3
 800d0b2:	e006      	b.n	800d0c2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	691b      	ldr	r3, [r3, #16]
 800d0b8:	f003 0320 	and.w	r3, r3, #32
 800d0bc:	2b20      	cmp	r3, #32
 800d0be:	d0f0      	beq.n	800d0a2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d0c0:	2300      	movs	r3, #0
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3714      	adds	r7, #20
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr
 800d0ce:	bf00      	nop
 800d0d0:	00030d40 	.word	0x00030d40

0800d0d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d0d4:	b480      	push	{r7}
 800d0d6:	b085      	sub	sp, #20
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2210      	movs	r2, #16
 800d0e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	3301      	adds	r3, #1
 800d0ea:	60fb      	str	r3, [r7, #12]
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	4a09      	ldr	r2, [pc, #36]	; (800d114 <USB_FlushRxFifo+0x40>)
 800d0f0:	4293      	cmp	r3, r2
 800d0f2:	d901      	bls.n	800d0f8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d0f4:	2303      	movs	r3, #3
 800d0f6:	e006      	b.n	800d106 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	691b      	ldr	r3, [r3, #16]
 800d0fc:	f003 0310 	and.w	r3, r3, #16
 800d100:	2b10      	cmp	r3, #16
 800d102:	d0f0      	beq.n	800d0e6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d104:	2300      	movs	r3, #0
}
 800d106:	4618      	mov	r0, r3
 800d108:	3714      	adds	r7, #20
 800d10a:	46bd      	mov	sp, r7
 800d10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d110:	4770      	bx	lr
 800d112:	bf00      	nop
 800d114:	00030d40 	.word	0x00030d40

0800d118 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d118:	b480      	push	{r7}
 800d11a:	b085      	sub	sp, #20
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	460b      	mov	r3, r1
 800d122:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d12e:	681a      	ldr	r2, [r3, #0]
 800d130:	78fb      	ldrb	r3, [r7, #3]
 800d132:	68f9      	ldr	r1, [r7, #12]
 800d134:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d138:	4313      	orrs	r3, r2
 800d13a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d13c:	2300      	movs	r3, #0
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3714      	adds	r7, #20
 800d142:	46bd      	mov	sp, r7
 800d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d148:	4770      	bx	lr

0800d14a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d14a:	b480      	push	{r7}
 800d14c:	b087      	sub	sp, #28
 800d14e:	af00      	add	r7, sp, #0
 800d150:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d15c:	689b      	ldr	r3, [r3, #8]
 800d15e:	f003 0306 	and.w	r3, r3, #6
 800d162:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d102      	bne.n	800d170 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d16a:	2300      	movs	r3, #0
 800d16c:	75fb      	strb	r3, [r7, #23]
 800d16e:	e00a      	b.n	800d186 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2b02      	cmp	r3, #2
 800d174:	d002      	beq.n	800d17c <USB_GetDevSpeed+0x32>
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	2b06      	cmp	r3, #6
 800d17a:	d102      	bne.n	800d182 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d17c:	2302      	movs	r3, #2
 800d17e:	75fb      	strb	r3, [r7, #23]
 800d180:	e001      	b.n	800d186 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d182:	230f      	movs	r3, #15
 800d184:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d186:	7dfb      	ldrb	r3, [r7, #23]
}
 800d188:	4618      	mov	r0, r3
 800d18a:	371c      	adds	r7, #28
 800d18c:	46bd      	mov	sp, r7
 800d18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d192:	4770      	bx	lr

0800d194 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d194:	b480      	push	{r7}
 800d196:	b085      	sub	sp, #20
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	781b      	ldrb	r3, [r3, #0]
 800d1a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	785b      	ldrb	r3, [r3, #1]
 800d1ac:	2b01      	cmp	r3, #1
 800d1ae:	d13a      	bne.n	800d226 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1b6:	69da      	ldr	r2, [r3, #28]
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	781b      	ldrb	r3, [r3, #0]
 800d1bc:	f003 030f 	and.w	r3, r3, #15
 800d1c0:	2101      	movs	r1, #1
 800d1c2:	fa01 f303 	lsl.w	r3, r1, r3
 800d1c6:	b29b      	uxth	r3, r3
 800d1c8:	68f9      	ldr	r1, [r7, #12]
 800d1ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d1ce:	4313      	orrs	r3, r2
 800d1d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	015a      	lsls	r2, r3, #5
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	4413      	add	r3, r2
 800d1da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d155      	bne.n	800d294 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	015a      	lsls	r2, r3, #5
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	4413      	add	r3, r2
 800d1f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1f4:	681a      	ldr	r2, [r3, #0]
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	689b      	ldr	r3, [r3, #8]
 800d1fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	78db      	ldrb	r3, [r3, #3]
 800d202:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d204:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	059b      	lsls	r3, r3, #22
 800d20a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d20c:	4313      	orrs	r3, r2
 800d20e:	68ba      	ldr	r2, [r7, #8]
 800d210:	0151      	lsls	r1, r2, #5
 800d212:	68fa      	ldr	r2, [r7, #12]
 800d214:	440a      	add	r2, r1
 800d216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d21a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d21e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d222:	6013      	str	r3, [r2, #0]
 800d224:	e036      	b.n	800d294 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d22c:	69da      	ldr	r2, [r3, #28]
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	781b      	ldrb	r3, [r3, #0]
 800d232:	f003 030f 	and.w	r3, r3, #15
 800d236:	2101      	movs	r1, #1
 800d238:	fa01 f303 	lsl.w	r3, r1, r3
 800d23c:	041b      	lsls	r3, r3, #16
 800d23e:	68f9      	ldr	r1, [r7, #12]
 800d240:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d244:	4313      	orrs	r3, r2
 800d246:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	015a      	lsls	r2, r3, #5
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	4413      	add	r3, r2
 800d250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d11a      	bne.n	800d294 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	015a      	lsls	r2, r3, #5
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	4413      	add	r3, r2
 800d266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d26a:	681a      	ldr	r2, [r3, #0]
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	689b      	ldr	r3, [r3, #8]
 800d270:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	78db      	ldrb	r3, [r3, #3]
 800d278:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d27a:	430b      	orrs	r3, r1
 800d27c:	4313      	orrs	r3, r2
 800d27e:	68ba      	ldr	r2, [r7, #8]
 800d280:	0151      	lsls	r1, r2, #5
 800d282:	68fa      	ldr	r2, [r7, #12]
 800d284:	440a      	add	r2, r1
 800d286:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d28a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d28e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d292:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d294:	2300      	movs	r3, #0
}
 800d296:	4618      	mov	r0, r3
 800d298:	3714      	adds	r7, #20
 800d29a:	46bd      	mov	sp, r7
 800d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a0:	4770      	bx	lr
	...

0800d2a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d2a4:	b480      	push	{r7}
 800d2a6:	b085      	sub	sp, #20
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
 800d2ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	781b      	ldrb	r3, [r3, #0]
 800d2b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	785b      	ldrb	r3, [r3, #1]
 800d2bc:	2b01      	cmp	r3, #1
 800d2be:	d161      	bne.n	800d384 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	015a      	lsls	r2, r3, #5
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	4413      	add	r3, r2
 800d2c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d2d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d2d6:	d11f      	bne.n	800d318 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	015a      	lsls	r2, r3, #5
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	4413      	add	r3, r2
 800d2e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	68ba      	ldr	r2, [r7, #8]
 800d2e8:	0151      	lsls	r1, r2, #5
 800d2ea:	68fa      	ldr	r2, [r7, #12]
 800d2ec:	440a      	add	r2, r1
 800d2ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d2f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	015a      	lsls	r2, r3, #5
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	4413      	add	r3, r2
 800d300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	68ba      	ldr	r2, [r7, #8]
 800d308:	0151      	lsls	r1, r2, #5
 800d30a:	68fa      	ldr	r2, [r7, #12]
 800d30c:	440a      	add	r2, r1
 800d30e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d312:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d316:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d31e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	781b      	ldrb	r3, [r3, #0]
 800d324:	f003 030f 	and.w	r3, r3, #15
 800d328:	2101      	movs	r1, #1
 800d32a:	fa01 f303 	lsl.w	r3, r1, r3
 800d32e:	b29b      	uxth	r3, r3
 800d330:	43db      	mvns	r3, r3
 800d332:	68f9      	ldr	r1, [r7, #12]
 800d334:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d338:	4013      	ands	r3, r2
 800d33a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d342:	69da      	ldr	r2, [r3, #28]
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	781b      	ldrb	r3, [r3, #0]
 800d348:	f003 030f 	and.w	r3, r3, #15
 800d34c:	2101      	movs	r1, #1
 800d34e:	fa01 f303 	lsl.w	r3, r1, r3
 800d352:	b29b      	uxth	r3, r3
 800d354:	43db      	mvns	r3, r3
 800d356:	68f9      	ldr	r1, [r7, #12]
 800d358:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d35c:	4013      	ands	r3, r2
 800d35e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	015a      	lsls	r2, r3, #5
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	4413      	add	r3, r2
 800d368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d36c:	681a      	ldr	r2, [r3, #0]
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	0159      	lsls	r1, r3, #5
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	440b      	add	r3, r1
 800d376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d37a:	4619      	mov	r1, r3
 800d37c:	4b35      	ldr	r3, [pc, #212]	; (800d454 <USB_DeactivateEndpoint+0x1b0>)
 800d37e:	4013      	ands	r3, r2
 800d380:	600b      	str	r3, [r1, #0]
 800d382:	e060      	b.n	800d446 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	015a      	lsls	r2, r3, #5
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	4413      	add	r3, r2
 800d38c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d396:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d39a:	d11f      	bne.n	800d3dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	015a      	lsls	r2, r3, #5
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	4413      	add	r3, r2
 800d3a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	68ba      	ldr	r2, [r7, #8]
 800d3ac:	0151      	lsls	r1, r2, #5
 800d3ae:	68fa      	ldr	r2, [r7, #12]
 800d3b0:	440a      	add	r2, r1
 800d3b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d3ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	015a      	lsls	r2, r3, #5
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	4413      	add	r3, r2
 800d3c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	68ba      	ldr	r2, [r7, #8]
 800d3cc:	0151      	lsls	r1, r2, #5
 800d3ce:	68fa      	ldr	r2, [r7, #12]
 800d3d0:	440a      	add	r2, r1
 800d3d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d3da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	781b      	ldrb	r3, [r3, #0]
 800d3e8:	f003 030f 	and.w	r3, r3, #15
 800d3ec:	2101      	movs	r1, #1
 800d3ee:	fa01 f303 	lsl.w	r3, r1, r3
 800d3f2:	041b      	lsls	r3, r3, #16
 800d3f4:	43db      	mvns	r3, r3
 800d3f6:	68f9      	ldr	r1, [r7, #12]
 800d3f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d3fc:	4013      	ands	r3, r2
 800d3fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d406:	69da      	ldr	r2, [r3, #28]
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	f003 030f 	and.w	r3, r3, #15
 800d410:	2101      	movs	r1, #1
 800d412:	fa01 f303 	lsl.w	r3, r1, r3
 800d416:	041b      	lsls	r3, r3, #16
 800d418:	43db      	mvns	r3, r3
 800d41a:	68f9      	ldr	r1, [r7, #12]
 800d41c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d420:	4013      	ands	r3, r2
 800d422:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	015a      	lsls	r2, r3, #5
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	4413      	add	r3, r2
 800d42c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d430:	681a      	ldr	r2, [r3, #0]
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	0159      	lsls	r1, r3, #5
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	440b      	add	r3, r1
 800d43a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d43e:	4619      	mov	r1, r3
 800d440:	4b05      	ldr	r3, [pc, #20]	; (800d458 <USB_DeactivateEndpoint+0x1b4>)
 800d442:	4013      	ands	r3, r2
 800d444:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d446:	2300      	movs	r3, #0
}
 800d448:	4618      	mov	r0, r3
 800d44a:	3714      	adds	r7, #20
 800d44c:	46bd      	mov	sp, r7
 800d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d452:	4770      	bx	lr
 800d454:	ec337800 	.word	0xec337800
 800d458:	eff37800 	.word	0xeff37800

0800d45c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b08a      	sub	sp, #40	; 0x28
 800d460:	af02      	add	r7, sp, #8
 800d462:	60f8      	str	r0, [r7, #12]
 800d464:	60b9      	str	r1, [r7, #8]
 800d466:	4613      	mov	r3, r2
 800d468:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	781b      	ldrb	r3, [r3, #0]
 800d472:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	785b      	ldrb	r3, [r3, #1]
 800d478:	2b01      	cmp	r3, #1
 800d47a:	f040 815c 	bne.w	800d736 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	695b      	ldr	r3, [r3, #20]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d132      	bne.n	800d4ec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d486:	69bb      	ldr	r3, [r7, #24]
 800d488:	015a      	lsls	r2, r3, #5
 800d48a:	69fb      	ldr	r3, [r7, #28]
 800d48c:	4413      	add	r3, r2
 800d48e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d492:	691b      	ldr	r3, [r3, #16]
 800d494:	69ba      	ldr	r2, [r7, #24]
 800d496:	0151      	lsls	r1, r2, #5
 800d498:	69fa      	ldr	r2, [r7, #28]
 800d49a:	440a      	add	r2, r1
 800d49c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d4a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d4a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d4aa:	69bb      	ldr	r3, [r7, #24]
 800d4ac:	015a      	lsls	r2, r3, #5
 800d4ae:	69fb      	ldr	r3, [r7, #28]
 800d4b0:	4413      	add	r3, r2
 800d4b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4b6:	691b      	ldr	r3, [r3, #16]
 800d4b8:	69ba      	ldr	r2, [r7, #24]
 800d4ba:	0151      	lsls	r1, r2, #5
 800d4bc:	69fa      	ldr	r2, [r7, #28]
 800d4be:	440a      	add	r2, r1
 800d4c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d4c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d4ca:	69bb      	ldr	r3, [r7, #24]
 800d4cc:	015a      	lsls	r2, r3, #5
 800d4ce:	69fb      	ldr	r3, [r7, #28]
 800d4d0:	4413      	add	r3, r2
 800d4d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4d6:	691b      	ldr	r3, [r3, #16]
 800d4d8:	69ba      	ldr	r2, [r7, #24]
 800d4da:	0151      	lsls	r1, r2, #5
 800d4dc:	69fa      	ldr	r2, [r7, #28]
 800d4de:	440a      	add	r2, r1
 800d4e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4e4:	0cdb      	lsrs	r3, r3, #19
 800d4e6:	04db      	lsls	r3, r3, #19
 800d4e8:	6113      	str	r3, [r2, #16]
 800d4ea:	e074      	b.n	800d5d6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d4ec:	69bb      	ldr	r3, [r7, #24]
 800d4ee:	015a      	lsls	r2, r3, #5
 800d4f0:	69fb      	ldr	r3, [r7, #28]
 800d4f2:	4413      	add	r3, r2
 800d4f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4f8:	691b      	ldr	r3, [r3, #16]
 800d4fa:	69ba      	ldr	r2, [r7, #24]
 800d4fc:	0151      	lsls	r1, r2, #5
 800d4fe:	69fa      	ldr	r2, [r7, #28]
 800d500:	440a      	add	r2, r1
 800d502:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d506:	0cdb      	lsrs	r3, r3, #19
 800d508:	04db      	lsls	r3, r3, #19
 800d50a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d50c:	69bb      	ldr	r3, [r7, #24]
 800d50e:	015a      	lsls	r2, r3, #5
 800d510:	69fb      	ldr	r3, [r7, #28]
 800d512:	4413      	add	r3, r2
 800d514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d518:	691b      	ldr	r3, [r3, #16]
 800d51a:	69ba      	ldr	r2, [r7, #24]
 800d51c:	0151      	lsls	r1, r2, #5
 800d51e:	69fa      	ldr	r2, [r7, #28]
 800d520:	440a      	add	r2, r1
 800d522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d526:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d52a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d52e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d530:	69bb      	ldr	r3, [r7, #24]
 800d532:	015a      	lsls	r2, r3, #5
 800d534:	69fb      	ldr	r3, [r7, #28]
 800d536:	4413      	add	r3, r2
 800d538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d53c:	691a      	ldr	r2, [r3, #16]
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	6959      	ldr	r1, [r3, #20]
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	689b      	ldr	r3, [r3, #8]
 800d546:	440b      	add	r3, r1
 800d548:	1e59      	subs	r1, r3, #1
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	689b      	ldr	r3, [r3, #8]
 800d54e:	fbb1 f3f3 	udiv	r3, r1, r3
 800d552:	04d9      	lsls	r1, r3, #19
 800d554:	4b9d      	ldr	r3, [pc, #628]	; (800d7cc <USB_EPStartXfer+0x370>)
 800d556:	400b      	ands	r3, r1
 800d558:	69b9      	ldr	r1, [r7, #24]
 800d55a:	0148      	lsls	r0, r1, #5
 800d55c:	69f9      	ldr	r1, [r7, #28]
 800d55e:	4401      	add	r1, r0
 800d560:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d564:	4313      	orrs	r3, r2
 800d566:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d568:	69bb      	ldr	r3, [r7, #24]
 800d56a:	015a      	lsls	r2, r3, #5
 800d56c:	69fb      	ldr	r3, [r7, #28]
 800d56e:	4413      	add	r3, r2
 800d570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d574:	691a      	ldr	r2, [r3, #16]
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	695b      	ldr	r3, [r3, #20]
 800d57a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d57e:	69b9      	ldr	r1, [r7, #24]
 800d580:	0148      	lsls	r0, r1, #5
 800d582:	69f9      	ldr	r1, [r7, #28]
 800d584:	4401      	add	r1, r0
 800d586:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d58a:	4313      	orrs	r3, r2
 800d58c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	78db      	ldrb	r3, [r3, #3]
 800d592:	2b01      	cmp	r3, #1
 800d594:	d11f      	bne.n	800d5d6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d596:	69bb      	ldr	r3, [r7, #24]
 800d598:	015a      	lsls	r2, r3, #5
 800d59a:	69fb      	ldr	r3, [r7, #28]
 800d59c:	4413      	add	r3, r2
 800d59e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5a2:	691b      	ldr	r3, [r3, #16]
 800d5a4:	69ba      	ldr	r2, [r7, #24]
 800d5a6:	0151      	lsls	r1, r2, #5
 800d5a8:	69fa      	ldr	r2, [r7, #28]
 800d5aa:	440a      	add	r2, r1
 800d5ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5b0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d5b4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d5b6:	69bb      	ldr	r3, [r7, #24]
 800d5b8:	015a      	lsls	r2, r3, #5
 800d5ba:	69fb      	ldr	r3, [r7, #28]
 800d5bc:	4413      	add	r3, r2
 800d5be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5c2:	691b      	ldr	r3, [r3, #16]
 800d5c4:	69ba      	ldr	r2, [r7, #24]
 800d5c6:	0151      	lsls	r1, r2, #5
 800d5c8:	69fa      	ldr	r2, [r7, #28]
 800d5ca:	440a      	add	r2, r1
 800d5cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d5d4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d5d6:	79fb      	ldrb	r3, [r7, #7]
 800d5d8:	2b01      	cmp	r3, #1
 800d5da:	d14b      	bne.n	800d674 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	691b      	ldr	r3, [r3, #16]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d009      	beq.n	800d5f8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d5e4:	69bb      	ldr	r3, [r7, #24]
 800d5e6:	015a      	lsls	r2, r3, #5
 800d5e8:	69fb      	ldr	r3, [r7, #28]
 800d5ea:	4413      	add	r3, r2
 800d5ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5f0:	461a      	mov	r2, r3
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	691b      	ldr	r3, [r3, #16]
 800d5f6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	78db      	ldrb	r3, [r3, #3]
 800d5fc:	2b01      	cmp	r3, #1
 800d5fe:	d128      	bne.n	800d652 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d600:	69fb      	ldr	r3, [r7, #28]
 800d602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d606:	689b      	ldr	r3, [r3, #8]
 800d608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d110      	bne.n	800d632 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d610:	69bb      	ldr	r3, [r7, #24]
 800d612:	015a      	lsls	r2, r3, #5
 800d614:	69fb      	ldr	r3, [r7, #28]
 800d616:	4413      	add	r3, r2
 800d618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	69ba      	ldr	r2, [r7, #24]
 800d620:	0151      	lsls	r1, r2, #5
 800d622:	69fa      	ldr	r2, [r7, #28]
 800d624:	440a      	add	r2, r1
 800d626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d62a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d62e:	6013      	str	r3, [r2, #0]
 800d630:	e00f      	b.n	800d652 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d632:	69bb      	ldr	r3, [r7, #24]
 800d634:	015a      	lsls	r2, r3, #5
 800d636:	69fb      	ldr	r3, [r7, #28]
 800d638:	4413      	add	r3, r2
 800d63a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	69ba      	ldr	r2, [r7, #24]
 800d642:	0151      	lsls	r1, r2, #5
 800d644:	69fa      	ldr	r2, [r7, #28]
 800d646:	440a      	add	r2, r1
 800d648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d64c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d650:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d652:	69bb      	ldr	r3, [r7, #24]
 800d654:	015a      	lsls	r2, r3, #5
 800d656:	69fb      	ldr	r3, [r7, #28]
 800d658:	4413      	add	r3, r2
 800d65a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	69ba      	ldr	r2, [r7, #24]
 800d662:	0151      	lsls	r1, r2, #5
 800d664:	69fa      	ldr	r2, [r7, #28]
 800d666:	440a      	add	r2, r1
 800d668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d66c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d670:	6013      	str	r3, [r2, #0]
 800d672:	e12f      	b.n	800d8d4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d674:	69bb      	ldr	r3, [r7, #24]
 800d676:	015a      	lsls	r2, r3, #5
 800d678:	69fb      	ldr	r3, [r7, #28]
 800d67a:	4413      	add	r3, r2
 800d67c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	69ba      	ldr	r2, [r7, #24]
 800d684:	0151      	lsls	r1, r2, #5
 800d686:	69fa      	ldr	r2, [r7, #28]
 800d688:	440a      	add	r2, r1
 800d68a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d68e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d692:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	78db      	ldrb	r3, [r3, #3]
 800d698:	2b01      	cmp	r3, #1
 800d69a:	d015      	beq.n	800d6c8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	695b      	ldr	r3, [r3, #20]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	f000 8117 	beq.w	800d8d4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d6a6:	69fb      	ldr	r3, [r7, #28]
 800d6a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	781b      	ldrb	r3, [r3, #0]
 800d6b2:	f003 030f 	and.w	r3, r3, #15
 800d6b6:	2101      	movs	r1, #1
 800d6b8:	fa01 f303 	lsl.w	r3, r1, r3
 800d6bc:	69f9      	ldr	r1, [r7, #28]
 800d6be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d6c2:	4313      	orrs	r3, r2
 800d6c4:	634b      	str	r3, [r1, #52]	; 0x34
 800d6c6:	e105      	b.n	800d8d4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d6c8:	69fb      	ldr	r3, [r7, #28]
 800d6ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6ce:	689b      	ldr	r3, [r3, #8]
 800d6d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d110      	bne.n	800d6fa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d6d8:	69bb      	ldr	r3, [r7, #24]
 800d6da:	015a      	lsls	r2, r3, #5
 800d6dc:	69fb      	ldr	r3, [r7, #28]
 800d6de:	4413      	add	r3, r2
 800d6e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	69ba      	ldr	r2, [r7, #24]
 800d6e8:	0151      	lsls	r1, r2, #5
 800d6ea:	69fa      	ldr	r2, [r7, #28]
 800d6ec:	440a      	add	r2, r1
 800d6ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d6f6:	6013      	str	r3, [r2, #0]
 800d6f8:	e00f      	b.n	800d71a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d6fa:	69bb      	ldr	r3, [r7, #24]
 800d6fc:	015a      	lsls	r2, r3, #5
 800d6fe:	69fb      	ldr	r3, [r7, #28]
 800d700:	4413      	add	r3, r2
 800d702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	69ba      	ldr	r2, [r7, #24]
 800d70a:	0151      	lsls	r1, r2, #5
 800d70c:	69fa      	ldr	r2, [r7, #28]
 800d70e:	440a      	add	r2, r1
 800d710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d718:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d71a:	68bb      	ldr	r3, [r7, #8]
 800d71c:	68d9      	ldr	r1, [r3, #12]
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	781a      	ldrb	r2, [r3, #0]
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	695b      	ldr	r3, [r3, #20]
 800d726:	b298      	uxth	r0, r3
 800d728:	79fb      	ldrb	r3, [r7, #7]
 800d72a:	9300      	str	r3, [sp, #0]
 800d72c:	4603      	mov	r3, r0
 800d72e:	68f8      	ldr	r0, [r7, #12]
 800d730:	f000 fa2b 	bl	800db8a <USB_WritePacket>
 800d734:	e0ce      	b.n	800d8d4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d736:	69bb      	ldr	r3, [r7, #24]
 800d738:	015a      	lsls	r2, r3, #5
 800d73a:	69fb      	ldr	r3, [r7, #28]
 800d73c:	4413      	add	r3, r2
 800d73e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d742:	691b      	ldr	r3, [r3, #16]
 800d744:	69ba      	ldr	r2, [r7, #24]
 800d746:	0151      	lsls	r1, r2, #5
 800d748:	69fa      	ldr	r2, [r7, #28]
 800d74a:	440a      	add	r2, r1
 800d74c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d750:	0cdb      	lsrs	r3, r3, #19
 800d752:	04db      	lsls	r3, r3, #19
 800d754:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d756:	69bb      	ldr	r3, [r7, #24]
 800d758:	015a      	lsls	r2, r3, #5
 800d75a:	69fb      	ldr	r3, [r7, #28]
 800d75c:	4413      	add	r3, r2
 800d75e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d762:	691b      	ldr	r3, [r3, #16]
 800d764:	69ba      	ldr	r2, [r7, #24]
 800d766:	0151      	lsls	r1, r2, #5
 800d768:	69fa      	ldr	r2, [r7, #28]
 800d76a:	440a      	add	r2, r1
 800d76c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d770:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d774:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d778:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	695b      	ldr	r3, [r3, #20]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d126      	bne.n	800d7d0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d782:	69bb      	ldr	r3, [r7, #24]
 800d784:	015a      	lsls	r2, r3, #5
 800d786:	69fb      	ldr	r3, [r7, #28]
 800d788:	4413      	add	r3, r2
 800d78a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d78e:	691a      	ldr	r2, [r3, #16]
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	689b      	ldr	r3, [r3, #8]
 800d794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d798:	69b9      	ldr	r1, [r7, #24]
 800d79a:	0148      	lsls	r0, r1, #5
 800d79c:	69f9      	ldr	r1, [r7, #28]
 800d79e:	4401      	add	r1, r0
 800d7a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d7a4:	4313      	orrs	r3, r2
 800d7a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d7a8:	69bb      	ldr	r3, [r7, #24]
 800d7aa:	015a      	lsls	r2, r3, #5
 800d7ac:	69fb      	ldr	r3, [r7, #28]
 800d7ae:	4413      	add	r3, r2
 800d7b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7b4:	691b      	ldr	r3, [r3, #16]
 800d7b6:	69ba      	ldr	r2, [r7, #24]
 800d7b8:	0151      	lsls	r1, r2, #5
 800d7ba:	69fa      	ldr	r2, [r7, #28]
 800d7bc:	440a      	add	r2, r1
 800d7be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d7c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d7c6:	6113      	str	r3, [r2, #16]
 800d7c8:	e036      	b.n	800d838 <USB_EPStartXfer+0x3dc>
 800d7ca:	bf00      	nop
 800d7cc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	695a      	ldr	r2, [r3, #20]
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	689b      	ldr	r3, [r3, #8]
 800d7d8:	4413      	add	r3, r2
 800d7da:	1e5a      	subs	r2, r3, #1
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	689b      	ldr	r3, [r3, #8]
 800d7e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7e4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d7e6:	69bb      	ldr	r3, [r7, #24]
 800d7e8:	015a      	lsls	r2, r3, #5
 800d7ea:	69fb      	ldr	r3, [r7, #28]
 800d7ec:	4413      	add	r3, r2
 800d7ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7f2:	691a      	ldr	r2, [r3, #16]
 800d7f4:	8afb      	ldrh	r3, [r7, #22]
 800d7f6:	04d9      	lsls	r1, r3, #19
 800d7f8:	4b39      	ldr	r3, [pc, #228]	; (800d8e0 <USB_EPStartXfer+0x484>)
 800d7fa:	400b      	ands	r3, r1
 800d7fc:	69b9      	ldr	r1, [r7, #24]
 800d7fe:	0148      	lsls	r0, r1, #5
 800d800:	69f9      	ldr	r1, [r7, #28]
 800d802:	4401      	add	r1, r0
 800d804:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d808:	4313      	orrs	r3, r2
 800d80a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d80c:	69bb      	ldr	r3, [r7, #24]
 800d80e:	015a      	lsls	r2, r3, #5
 800d810:	69fb      	ldr	r3, [r7, #28]
 800d812:	4413      	add	r3, r2
 800d814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d818:	691a      	ldr	r2, [r3, #16]
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	689b      	ldr	r3, [r3, #8]
 800d81e:	8af9      	ldrh	r1, [r7, #22]
 800d820:	fb01 f303 	mul.w	r3, r1, r3
 800d824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d828:	69b9      	ldr	r1, [r7, #24]
 800d82a:	0148      	lsls	r0, r1, #5
 800d82c:	69f9      	ldr	r1, [r7, #28]
 800d82e:	4401      	add	r1, r0
 800d830:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d834:	4313      	orrs	r3, r2
 800d836:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d838:	79fb      	ldrb	r3, [r7, #7]
 800d83a:	2b01      	cmp	r3, #1
 800d83c:	d10d      	bne.n	800d85a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	68db      	ldr	r3, [r3, #12]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d009      	beq.n	800d85a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	68d9      	ldr	r1, [r3, #12]
 800d84a:	69bb      	ldr	r3, [r7, #24]
 800d84c:	015a      	lsls	r2, r3, #5
 800d84e:	69fb      	ldr	r3, [r7, #28]
 800d850:	4413      	add	r3, r2
 800d852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d856:	460a      	mov	r2, r1
 800d858:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	78db      	ldrb	r3, [r3, #3]
 800d85e:	2b01      	cmp	r3, #1
 800d860:	d128      	bne.n	800d8b4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d862:	69fb      	ldr	r3, [r7, #28]
 800d864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d868:	689b      	ldr	r3, [r3, #8]
 800d86a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d110      	bne.n	800d894 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d872:	69bb      	ldr	r3, [r7, #24]
 800d874:	015a      	lsls	r2, r3, #5
 800d876:	69fb      	ldr	r3, [r7, #28]
 800d878:	4413      	add	r3, r2
 800d87a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	69ba      	ldr	r2, [r7, #24]
 800d882:	0151      	lsls	r1, r2, #5
 800d884:	69fa      	ldr	r2, [r7, #28]
 800d886:	440a      	add	r2, r1
 800d888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d88c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d890:	6013      	str	r3, [r2, #0]
 800d892:	e00f      	b.n	800d8b4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d894:	69bb      	ldr	r3, [r7, #24]
 800d896:	015a      	lsls	r2, r3, #5
 800d898:	69fb      	ldr	r3, [r7, #28]
 800d89a:	4413      	add	r3, r2
 800d89c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	69ba      	ldr	r2, [r7, #24]
 800d8a4:	0151      	lsls	r1, r2, #5
 800d8a6:	69fa      	ldr	r2, [r7, #28]
 800d8a8:	440a      	add	r2, r1
 800d8aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d8b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d8b4:	69bb      	ldr	r3, [r7, #24]
 800d8b6:	015a      	lsls	r2, r3, #5
 800d8b8:	69fb      	ldr	r3, [r7, #28]
 800d8ba:	4413      	add	r3, r2
 800d8bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	69ba      	ldr	r2, [r7, #24]
 800d8c4:	0151      	lsls	r1, r2, #5
 800d8c6:	69fa      	ldr	r2, [r7, #28]
 800d8c8:	440a      	add	r2, r1
 800d8ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d8d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d8d4:	2300      	movs	r3, #0
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3720      	adds	r7, #32
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}
 800d8de:	bf00      	nop
 800d8e0:	1ff80000 	.word	0x1ff80000

0800d8e4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b087      	sub	sp, #28
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	60f8      	str	r0, [r7, #12]
 800d8ec:	60b9      	str	r1, [r7, #8]
 800d8ee:	4613      	mov	r3, r2
 800d8f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	781b      	ldrb	r3, [r3, #0]
 800d8fa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	785b      	ldrb	r3, [r3, #1]
 800d900:	2b01      	cmp	r3, #1
 800d902:	f040 80cd 	bne.w	800daa0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	695b      	ldr	r3, [r3, #20]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d132      	bne.n	800d974 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	015a      	lsls	r2, r3, #5
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	4413      	add	r3, r2
 800d916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d91a:	691b      	ldr	r3, [r3, #16]
 800d91c:	693a      	ldr	r2, [r7, #16]
 800d91e:	0151      	lsls	r1, r2, #5
 800d920:	697a      	ldr	r2, [r7, #20]
 800d922:	440a      	add	r2, r1
 800d924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d928:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d92c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d930:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	015a      	lsls	r2, r3, #5
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	4413      	add	r3, r2
 800d93a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d93e:	691b      	ldr	r3, [r3, #16]
 800d940:	693a      	ldr	r2, [r7, #16]
 800d942:	0151      	lsls	r1, r2, #5
 800d944:	697a      	ldr	r2, [r7, #20]
 800d946:	440a      	add	r2, r1
 800d948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d94c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d950:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	015a      	lsls	r2, r3, #5
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	4413      	add	r3, r2
 800d95a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d95e:	691b      	ldr	r3, [r3, #16]
 800d960:	693a      	ldr	r2, [r7, #16]
 800d962:	0151      	lsls	r1, r2, #5
 800d964:	697a      	ldr	r2, [r7, #20]
 800d966:	440a      	add	r2, r1
 800d968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d96c:	0cdb      	lsrs	r3, r3, #19
 800d96e:	04db      	lsls	r3, r3, #19
 800d970:	6113      	str	r3, [r2, #16]
 800d972:	e04e      	b.n	800da12 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	015a      	lsls	r2, r3, #5
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	4413      	add	r3, r2
 800d97c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d980:	691b      	ldr	r3, [r3, #16]
 800d982:	693a      	ldr	r2, [r7, #16]
 800d984:	0151      	lsls	r1, r2, #5
 800d986:	697a      	ldr	r2, [r7, #20]
 800d988:	440a      	add	r2, r1
 800d98a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d98e:	0cdb      	lsrs	r3, r3, #19
 800d990:	04db      	lsls	r3, r3, #19
 800d992:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d994:	693b      	ldr	r3, [r7, #16]
 800d996:	015a      	lsls	r2, r3, #5
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	4413      	add	r3, r2
 800d99c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9a0:	691b      	ldr	r3, [r3, #16]
 800d9a2:	693a      	ldr	r2, [r7, #16]
 800d9a4:	0151      	lsls	r1, r2, #5
 800d9a6:	697a      	ldr	r2, [r7, #20]
 800d9a8:	440a      	add	r2, r1
 800d9aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d9ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d9b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d9b6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	695a      	ldr	r2, [r3, #20]
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	689b      	ldr	r3, [r3, #8]
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	d903      	bls.n	800d9cc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	689a      	ldr	r2, [r3, #8]
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d9cc:	693b      	ldr	r3, [r7, #16]
 800d9ce:	015a      	lsls	r2, r3, #5
 800d9d0:	697b      	ldr	r3, [r7, #20]
 800d9d2:	4413      	add	r3, r2
 800d9d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9d8:	691b      	ldr	r3, [r3, #16]
 800d9da:	693a      	ldr	r2, [r7, #16]
 800d9dc:	0151      	lsls	r1, r2, #5
 800d9de:	697a      	ldr	r2, [r7, #20]
 800d9e0:	440a      	add	r2, r1
 800d9e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d9e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d9ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d9ec:	693b      	ldr	r3, [r7, #16]
 800d9ee:	015a      	lsls	r2, r3, #5
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	4413      	add	r3, r2
 800d9f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9f8:	691a      	ldr	r2, [r3, #16]
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	695b      	ldr	r3, [r3, #20]
 800d9fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800da02:	6939      	ldr	r1, [r7, #16]
 800da04:	0148      	lsls	r0, r1, #5
 800da06:	6979      	ldr	r1, [r7, #20]
 800da08:	4401      	add	r1, r0
 800da0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800da0e:	4313      	orrs	r3, r2
 800da10:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800da12:	79fb      	ldrb	r3, [r7, #7]
 800da14:	2b01      	cmp	r3, #1
 800da16:	d11e      	bne.n	800da56 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	691b      	ldr	r3, [r3, #16]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d009      	beq.n	800da34 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	015a      	lsls	r2, r3, #5
 800da24:	697b      	ldr	r3, [r7, #20]
 800da26:	4413      	add	r3, r2
 800da28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da2c:	461a      	mov	r2, r3
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	691b      	ldr	r3, [r3, #16]
 800da32:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800da34:	693b      	ldr	r3, [r7, #16]
 800da36:	015a      	lsls	r2, r3, #5
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	4413      	add	r3, r2
 800da3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	693a      	ldr	r2, [r7, #16]
 800da44:	0151      	lsls	r1, r2, #5
 800da46:	697a      	ldr	r2, [r7, #20]
 800da48:	440a      	add	r2, r1
 800da4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800da52:	6013      	str	r3, [r2, #0]
 800da54:	e092      	b.n	800db7c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	015a      	lsls	r2, r3, #5
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	4413      	add	r3, r2
 800da5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	693a      	ldr	r2, [r7, #16]
 800da66:	0151      	lsls	r1, r2, #5
 800da68:	697a      	ldr	r2, [r7, #20]
 800da6a:	440a      	add	r2, r1
 800da6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800da74:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	695b      	ldr	r3, [r3, #20]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d07e      	beq.n	800db7c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800da7e:	697b      	ldr	r3, [r7, #20]
 800da80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	781b      	ldrb	r3, [r3, #0]
 800da8a:	f003 030f 	and.w	r3, r3, #15
 800da8e:	2101      	movs	r1, #1
 800da90:	fa01 f303 	lsl.w	r3, r1, r3
 800da94:	6979      	ldr	r1, [r7, #20]
 800da96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800da9a:	4313      	orrs	r3, r2
 800da9c:	634b      	str	r3, [r1, #52]	; 0x34
 800da9e:	e06d      	b.n	800db7c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	015a      	lsls	r2, r3, #5
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	4413      	add	r3, r2
 800daa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daac:	691b      	ldr	r3, [r3, #16]
 800daae:	693a      	ldr	r2, [r7, #16]
 800dab0:	0151      	lsls	r1, r2, #5
 800dab2:	697a      	ldr	r2, [r7, #20]
 800dab4:	440a      	add	r2, r1
 800dab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800daba:	0cdb      	lsrs	r3, r3, #19
 800dabc:	04db      	lsls	r3, r3, #19
 800dabe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800dac0:	693b      	ldr	r3, [r7, #16]
 800dac2:	015a      	lsls	r2, r3, #5
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	4413      	add	r3, r2
 800dac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dacc:	691b      	ldr	r3, [r3, #16]
 800dace:	693a      	ldr	r2, [r7, #16]
 800dad0:	0151      	lsls	r1, r2, #5
 800dad2:	697a      	ldr	r2, [r7, #20]
 800dad4:	440a      	add	r2, r1
 800dad6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dada:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dade:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dae2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	695b      	ldr	r3, [r3, #20]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d003      	beq.n	800daf4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	689a      	ldr	r2, [r3, #8]
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800daf4:	693b      	ldr	r3, [r7, #16]
 800daf6:	015a      	lsls	r2, r3, #5
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	4413      	add	r3, r2
 800dafc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db00:	691b      	ldr	r3, [r3, #16]
 800db02:	693a      	ldr	r2, [r7, #16]
 800db04:	0151      	lsls	r1, r2, #5
 800db06:	697a      	ldr	r2, [r7, #20]
 800db08:	440a      	add	r2, r1
 800db0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800db12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	015a      	lsls	r2, r3, #5
 800db18:	697b      	ldr	r3, [r7, #20]
 800db1a:	4413      	add	r3, r2
 800db1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db20:	691a      	ldr	r2, [r3, #16]
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	689b      	ldr	r3, [r3, #8]
 800db26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800db2a:	6939      	ldr	r1, [r7, #16]
 800db2c:	0148      	lsls	r0, r1, #5
 800db2e:	6979      	ldr	r1, [r7, #20]
 800db30:	4401      	add	r1, r0
 800db32:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800db36:	4313      	orrs	r3, r2
 800db38:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800db3a:	79fb      	ldrb	r3, [r7, #7]
 800db3c:	2b01      	cmp	r3, #1
 800db3e:	d10d      	bne.n	800db5c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	68db      	ldr	r3, [r3, #12]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d009      	beq.n	800db5c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	68d9      	ldr	r1, [r3, #12]
 800db4c:	693b      	ldr	r3, [r7, #16]
 800db4e:	015a      	lsls	r2, r3, #5
 800db50:	697b      	ldr	r3, [r7, #20]
 800db52:	4413      	add	r3, r2
 800db54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db58:	460a      	mov	r2, r1
 800db5a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800db5c:	693b      	ldr	r3, [r7, #16]
 800db5e:	015a      	lsls	r2, r3, #5
 800db60:	697b      	ldr	r3, [r7, #20]
 800db62:	4413      	add	r3, r2
 800db64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	693a      	ldr	r2, [r7, #16]
 800db6c:	0151      	lsls	r1, r2, #5
 800db6e:	697a      	ldr	r2, [r7, #20]
 800db70:	440a      	add	r2, r1
 800db72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800db7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800db7c:	2300      	movs	r3, #0
}
 800db7e:	4618      	mov	r0, r3
 800db80:	371c      	adds	r7, #28
 800db82:	46bd      	mov	sp, r7
 800db84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db88:	4770      	bx	lr

0800db8a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800db8a:	b480      	push	{r7}
 800db8c:	b089      	sub	sp, #36	; 0x24
 800db8e:	af00      	add	r7, sp, #0
 800db90:	60f8      	str	r0, [r7, #12]
 800db92:	60b9      	str	r1, [r7, #8]
 800db94:	4611      	mov	r1, r2
 800db96:	461a      	mov	r2, r3
 800db98:	460b      	mov	r3, r1
 800db9a:	71fb      	strb	r3, [r7, #7]
 800db9c:	4613      	mov	r3, r2
 800db9e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800dba8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d11a      	bne.n	800dbe6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800dbb0:	88bb      	ldrh	r3, [r7, #4]
 800dbb2:	3303      	adds	r3, #3
 800dbb4:	089b      	lsrs	r3, r3, #2
 800dbb6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800dbb8:	2300      	movs	r3, #0
 800dbba:	61bb      	str	r3, [r7, #24]
 800dbbc:	e00f      	b.n	800dbde <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800dbbe:	79fb      	ldrb	r3, [r7, #7]
 800dbc0:	031a      	lsls	r2, r3, #12
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	4413      	add	r3, r2
 800dbc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbca:	461a      	mov	r2, r3
 800dbcc:	69fb      	ldr	r3, [r7, #28]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	6013      	str	r3, [r2, #0]
      pSrc++;
 800dbd2:	69fb      	ldr	r3, [r7, #28]
 800dbd4:	3304      	adds	r3, #4
 800dbd6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800dbd8:	69bb      	ldr	r3, [r7, #24]
 800dbda:	3301      	adds	r3, #1
 800dbdc:	61bb      	str	r3, [r7, #24]
 800dbde:	69ba      	ldr	r2, [r7, #24]
 800dbe0:	693b      	ldr	r3, [r7, #16]
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d3eb      	bcc.n	800dbbe <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800dbe6:	2300      	movs	r3, #0
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3724      	adds	r7, #36	; 0x24
 800dbec:	46bd      	mov	sp, r7
 800dbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf2:	4770      	bx	lr

0800dbf4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	b089      	sub	sp, #36	; 0x24
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	60f8      	str	r0, [r7, #12]
 800dbfc:	60b9      	str	r1, [r7, #8]
 800dbfe:	4613      	mov	r3, r2
 800dc00:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800dc06:	68bb      	ldr	r3, [r7, #8]
 800dc08:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800dc0a:	88fb      	ldrh	r3, [r7, #6]
 800dc0c:	3303      	adds	r3, #3
 800dc0e:	089b      	lsrs	r3, r3, #2
 800dc10:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800dc12:	2300      	movs	r3, #0
 800dc14:	61bb      	str	r3, [r7, #24]
 800dc16:	e00b      	b.n	800dc30 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc1e:	681a      	ldr	r2, [r3, #0]
 800dc20:	69fb      	ldr	r3, [r7, #28]
 800dc22:	601a      	str	r2, [r3, #0]
    pDest++;
 800dc24:	69fb      	ldr	r3, [r7, #28]
 800dc26:	3304      	adds	r3, #4
 800dc28:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800dc2a:	69bb      	ldr	r3, [r7, #24]
 800dc2c:	3301      	adds	r3, #1
 800dc2e:	61bb      	str	r3, [r7, #24]
 800dc30:	69ba      	ldr	r2, [r7, #24]
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	429a      	cmp	r2, r3
 800dc36:	d3ef      	bcc.n	800dc18 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800dc38:	69fb      	ldr	r3, [r7, #28]
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3724      	adds	r7, #36	; 0x24
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc44:	4770      	bx	lr

0800dc46 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dc46:	b480      	push	{r7}
 800dc48:	b085      	sub	sp, #20
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	6078      	str	r0, [r7, #4]
 800dc4e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	781b      	ldrb	r3, [r3, #0]
 800dc58:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	785b      	ldrb	r3, [r3, #1]
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	d12c      	bne.n	800dcbc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	015a      	lsls	r2, r3, #5
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	4413      	add	r3, r2
 800dc6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	db12      	blt.n	800dc9a <USB_EPSetStall+0x54>
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d00f      	beq.n	800dc9a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	015a      	lsls	r2, r3, #5
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	4413      	add	r3, r2
 800dc82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	68ba      	ldr	r2, [r7, #8]
 800dc8a:	0151      	lsls	r1, r2, #5
 800dc8c:	68fa      	ldr	r2, [r7, #12]
 800dc8e:	440a      	add	r2, r1
 800dc90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dc98:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	015a      	lsls	r2, r3, #5
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	4413      	add	r3, r2
 800dca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	68ba      	ldr	r2, [r7, #8]
 800dcaa:	0151      	lsls	r1, r2, #5
 800dcac:	68fa      	ldr	r2, [r7, #12]
 800dcae:	440a      	add	r2, r1
 800dcb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dcb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dcb8:	6013      	str	r3, [r2, #0]
 800dcba:	e02b      	b.n	800dd14 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	015a      	lsls	r2, r3, #5
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	4413      	add	r3, r2
 800dcc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	db12      	blt.n	800dcf4 <USB_EPSetStall+0xae>
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d00f      	beq.n	800dcf4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800dcd4:	68bb      	ldr	r3, [r7, #8]
 800dcd6:	015a      	lsls	r2, r3, #5
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	4413      	add	r3, r2
 800dcdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	68ba      	ldr	r2, [r7, #8]
 800dce4:	0151      	lsls	r1, r2, #5
 800dce6:	68fa      	ldr	r2, [r7, #12]
 800dce8:	440a      	add	r2, r1
 800dcea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dcee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dcf2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	015a      	lsls	r2, r3, #5
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	4413      	add	r3, r2
 800dcfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	68ba      	ldr	r2, [r7, #8]
 800dd04:	0151      	lsls	r1, r2, #5
 800dd06:	68fa      	ldr	r2, [r7, #12]
 800dd08:	440a      	add	r2, r1
 800dd0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dd12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dd14:	2300      	movs	r3, #0
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	3714      	adds	r7, #20
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd20:	4770      	bx	lr

0800dd22 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dd22:	b480      	push	{r7}
 800dd24:	b085      	sub	sp, #20
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	6078      	str	r0, [r7, #4]
 800dd2a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	781b      	ldrb	r3, [r3, #0]
 800dd34:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	785b      	ldrb	r3, [r3, #1]
 800dd3a:	2b01      	cmp	r3, #1
 800dd3c:	d128      	bne.n	800dd90 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	015a      	lsls	r2, r3, #5
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	4413      	add	r3, r2
 800dd46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	68ba      	ldr	r2, [r7, #8]
 800dd4e:	0151      	lsls	r1, r2, #5
 800dd50:	68fa      	ldr	r2, [r7, #12]
 800dd52:	440a      	add	r2, r1
 800dd54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dd5c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	78db      	ldrb	r3, [r3, #3]
 800dd62:	2b03      	cmp	r3, #3
 800dd64:	d003      	beq.n	800dd6e <USB_EPClearStall+0x4c>
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	78db      	ldrb	r3, [r3, #3]
 800dd6a:	2b02      	cmp	r3, #2
 800dd6c:	d138      	bne.n	800dde0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	015a      	lsls	r2, r3, #5
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	4413      	add	r3, r2
 800dd76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	68ba      	ldr	r2, [r7, #8]
 800dd7e:	0151      	lsls	r1, r2, #5
 800dd80:	68fa      	ldr	r2, [r7, #12]
 800dd82:	440a      	add	r2, r1
 800dd84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dd8c:	6013      	str	r3, [r2, #0]
 800dd8e:	e027      	b.n	800dde0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	015a      	lsls	r2, r3, #5
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	4413      	add	r3, r2
 800dd98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	68ba      	ldr	r2, [r7, #8]
 800dda0:	0151      	lsls	r1, r2, #5
 800dda2:	68fa      	ldr	r2, [r7, #12]
 800dda4:	440a      	add	r2, r1
 800dda6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ddaa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ddae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	78db      	ldrb	r3, [r3, #3]
 800ddb4:	2b03      	cmp	r3, #3
 800ddb6:	d003      	beq.n	800ddc0 <USB_EPClearStall+0x9e>
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	78db      	ldrb	r3, [r3, #3]
 800ddbc:	2b02      	cmp	r3, #2
 800ddbe:	d10f      	bne.n	800dde0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	015a      	lsls	r2, r3, #5
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	4413      	add	r3, r2
 800ddc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	68ba      	ldr	r2, [r7, #8]
 800ddd0:	0151      	lsls	r1, r2, #5
 800ddd2:	68fa      	ldr	r2, [r7, #12]
 800ddd4:	440a      	add	r2, r1
 800ddd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ddda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ddde:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800dde0:	2300      	movs	r3, #0
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	3714      	adds	r7, #20
 800dde6:	46bd      	mov	sp, r7
 800dde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddec:	4770      	bx	lr

0800ddee <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ddee:	b480      	push	{r7}
 800ddf0:	b085      	sub	sp, #20
 800ddf2:	af00      	add	r7, sp, #0
 800ddf4:	6078      	str	r0, [r7, #4]
 800ddf6:	460b      	mov	r3, r1
 800ddf8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	68fa      	ldr	r2, [r7, #12]
 800de08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800de0c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800de10:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de18:	681a      	ldr	r2, [r3, #0]
 800de1a:	78fb      	ldrb	r3, [r7, #3]
 800de1c:	011b      	lsls	r3, r3, #4
 800de1e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800de22:	68f9      	ldr	r1, [r7, #12]
 800de24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de28:	4313      	orrs	r3, r2
 800de2a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800de2c:	2300      	movs	r3, #0
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3714      	adds	r7, #20
 800de32:	46bd      	mov	sp, r7
 800de34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de38:	4770      	bx	lr

0800de3a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800de3a:	b580      	push	{r7, lr}
 800de3c:	b084      	sub	sp, #16
 800de3e:	af00      	add	r7, sp, #0
 800de40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de4c:	685b      	ldr	r3, [r3, #4]
 800de4e:	68fa      	ldr	r2, [r7, #12]
 800de50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800de54:	f023 0302 	bic.w	r3, r3, #2
 800de58:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800de5a:	2003      	movs	r0, #3
 800de5c:	f7f8 f96a 	bl	8006134 <HAL_Delay>

  return HAL_OK;
 800de60:	2300      	movs	r3, #0
}
 800de62:	4618      	mov	r0, r3
 800de64:	3710      	adds	r7, #16
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}

0800de6a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800de6a:	b580      	push	{r7, lr}
 800de6c:	b084      	sub	sp, #16
 800de6e:	af00      	add	r7, sp, #0
 800de70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de7c:	685b      	ldr	r3, [r3, #4]
 800de7e:	68fa      	ldr	r2, [r7, #12]
 800de80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800de84:	f043 0302 	orr.w	r3, r3, #2
 800de88:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800de8a:	2003      	movs	r0, #3
 800de8c:	f7f8 f952 	bl	8006134 <HAL_Delay>

  return HAL_OK;
 800de90:	2300      	movs	r3, #0
}
 800de92:	4618      	mov	r0, r3
 800de94:	3710      	adds	r7, #16
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}

0800de9a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800de9a:	b480      	push	{r7}
 800de9c:	b085      	sub	sp, #20
 800de9e:	af00      	add	r7, sp, #0
 800dea0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	695b      	ldr	r3, [r3, #20]
 800dea6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	699b      	ldr	r3, [r3, #24]
 800deac:	68fa      	ldr	r2, [r7, #12]
 800deae:	4013      	ands	r3, r2
 800deb0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800deb2:	68fb      	ldr	r3, [r7, #12]
}
 800deb4:	4618      	mov	r0, r3
 800deb6:	3714      	adds	r7, #20
 800deb8:	46bd      	mov	sp, r7
 800deba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debe:	4770      	bx	lr

0800dec0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dec0:	b480      	push	{r7}
 800dec2:	b085      	sub	sp, #20
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ded2:	699b      	ldr	r3, [r3, #24]
 800ded4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dedc:	69db      	ldr	r3, [r3, #28]
 800dede:	68ba      	ldr	r2, [r7, #8]
 800dee0:	4013      	ands	r3, r2
 800dee2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	0c1b      	lsrs	r3, r3, #16
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3714      	adds	r7, #20
 800deec:	46bd      	mov	sp, r7
 800deee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def2:	4770      	bx	lr

0800def4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800def4:	b480      	push	{r7}
 800def6:	b085      	sub	sp, #20
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df06:	699b      	ldr	r3, [r3, #24]
 800df08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df10:	69db      	ldr	r3, [r3, #28]
 800df12:	68ba      	ldr	r2, [r7, #8]
 800df14:	4013      	ands	r3, r2
 800df16:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	b29b      	uxth	r3, r3
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	3714      	adds	r7, #20
 800df20:	46bd      	mov	sp, r7
 800df22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df26:	4770      	bx	lr

0800df28 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800df28:	b480      	push	{r7}
 800df2a:	b085      	sub	sp, #20
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	460b      	mov	r3, r1
 800df32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800df38:	78fb      	ldrb	r3, [r7, #3]
 800df3a:	015a      	lsls	r2, r3, #5
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	4413      	add	r3, r2
 800df40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df44:	689b      	ldr	r3, [r3, #8]
 800df46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df4e:	695b      	ldr	r3, [r3, #20]
 800df50:	68ba      	ldr	r2, [r7, #8]
 800df52:	4013      	ands	r3, r2
 800df54:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800df56:	68bb      	ldr	r3, [r7, #8]
}
 800df58:	4618      	mov	r0, r3
 800df5a:	3714      	adds	r7, #20
 800df5c:	46bd      	mov	sp, r7
 800df5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df62:	4770      	bx	lr

0800df64 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800df64:	b480      	push	{r7}
 800df66:	b087      	sub	sp, #28
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	460b      	mov	r3, r1
 800df6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800df74:	697b      	ldr	r3, [r7, #20]
 800df76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df7a:	691b      	ldr	r3, [r3, #16]
 800df7c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df86:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800df88:	78fb      	ldrb	r3, [r7, #3]
 800df8a:	f003 030f 	and.w	r3, r3, #15
 800df8e:	68fa      	ldr	r2, [r7, #12]
 800df90:	fa22 f303 	lsr.w	r3, r2, r3
 800df94:	01db      	lsls	r3, r3, #7
 800df96:	b2db      	uxtb	r3, r3
 800df98:	693a      	ldr	r2, [r7, #16]
 800df9a:	4313      	orrs	r3, r2
 800df9c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800df9e:	78fb      	ldrb	r3, [r7, #3]
 800dfa0:	015a      	lsls	r2, r3, #5
 800dfa2:	697b      	ldr	r3, [r7, #20]
 800dfa4:	4413      	add	r3, r2
 800dfa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfaa:	689b      	ldr	r3, [r3, #8]
 800dfac:	693a      	ldr	r2, [r7, #16]
 800dfae:	4013      	ands	r3, r2
 800dfb0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dfb2:	68bb      	ldr	r3, [r7, #8]
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	371c      	adds	r7, #28
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr

0800dfc0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800dfc0:	b480      	push	{r7}
 800dfc2:	b083      	sub	sp, #12
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	695b      	ldr	r3, [r3, #20]
 800dfcc:	f003 0301 	and.w	r3, r3, #1
}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	370c      	adds	r7, #12
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfda:	4770      	bx	lr

0800dfdc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800dfdc:	b480      	push	{r7}
 800dfde:	b085      	sub	sp, #20
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	68fa      	ldr	r2, [r7, #12]
 800dff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dff6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800dffa:	f023 0307 	bic.w	r3, r3, #7
 800dffe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e006:	685b      	ldr	r3, [r3, #4]
 800e008:	68fa      	ldr	r2, [r7, #12]
 800e00a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e00e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e012:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e014:	2300      	movs	r3, #0
}
 800e016:	4618      	mov	r0, r3
 800e018:	3714      	adds	r7, #20
 800e01a:	46bd      	mov	sp, r7
 800e01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e020:	4770      	bx	lr
	...

0800e024 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800e024:	b480      	push	{r7}
 800e026:	b087      	sub	sp, #28
 800e028:	af00      	add	r7, sp, #0
 800e02a:	60f8      	str	r0, [r7, #12]
 800e02c:	460b      	mov	r3, r1
 800e02e:	607a      	str	r2, [r7, #4]
 800e030:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	333c      	adds	r3, #60	; 0x3c
 800e03a:	3304      	adds	r3, #4
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e040:	693b      	ldr	r3, [r7, #16]
 800e042:	4a26      	ldr	r2, [pc, #152]	; (800e0dc <USB_EP0_OutStart+0xb8>)
 800e044:	4293      	cmp	r3, r2
 800e046:	d90a      	bls.n	800e05e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e054:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e058:	d101      	bne.n	800e05e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e05a:	2300      	movs	r3, #0
 800e05c:	e037      	b.n	800e0ce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e05e:	697b      	ldr	r3, [r7, #20]
 800e060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e064:	461a      	mov	r2, r3
 800e066:	2300      	movs	r3, #0
 800e068:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e070:	691b      	ldr	r3, [r3, #16]
 800e072:	697a      	ldr	r2, [r7, #20]
 800e074:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e078:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e07c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e084:	691b      	ldr	r3, [r3, #16]
 800e086:	697a      	ldr	r2, [r7, #20]
 800e088:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e08c:	f043 0318 	orr.w	r3, r3, #24
 800e090:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e098:	691b      	ldr	r3, [r3, #16]
 800e09a:	697a      	ldr	r2, [r7, #20]
 800e09c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0a0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e0a4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e0a6:	7afb      	ldrb	r3, [r7, #11]
 800e0a8:	2b01      	cmp	r3, #1
 800e0aa:	d10f      	bne.n	800e0cc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e0ac:	697b      	ldr	r3, [r7, #20]
 800e0ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0b2:	461a      	mov	r2, r3
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	697a      	ldr	r2, [r7, #20]
 800e0c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0c6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e0ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e0cc:	2300      	movs	r3, #0
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	371c      	adds	r7, #28
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d8:	4770      	bx	lr
 800e0da:	bf00      	nop
 800e0dc:	4f54300a 	.word	0x4f54300a

0800e0e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	b085      	sub	sp, #20
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	3301      	adds	r3, #1
 800e0f0:	60fb      	str	r3, [r7, #12]
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	4a13      	ldr	r2, [pc, #76]	; (800e144 <USB_CoreReset+0x64>)
 800e0f6:	4293      	cmp	r3, r2
 800e0f8:	d901      	bls.n	800e0fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e0fa:	2303      	movs	r3, #3
 800e0fc:	e01b      	b.n	800e136 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	691b      	ldr	r3, [r3, #16]
 800e102:	2b00      	cmp	r3, #0
 800e104:	daf2      	bge.n	800e0ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e106:	2300      	movs	r3, #0
 800e108:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	691b      	ldr	r3, [r3, #16]
 800e10e:	f043 0201 	orr.w	r2, r3, #1
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	3301      	adds	r3, #1
 800e11a:	60fb      	str	r3, [r7, #12]
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	4a09      	ldr	r2, [pc, #36]	; (800e144 <USB_CoreReset+0x64>)
 800e120:	4293      	cmp	r3, r2
 800e122:	d901      	bls.n	800e128 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e124:	2303      	movs	r3, #3
 800e126:	e006      	b.n	800e136 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	691b      	ldr	r3, [r3, #16]
 800e12c:	f003 0301 	and.w	r3, r3, #1
 800e130:	2b01      	cmp	r3, #1
 800e132:	d0f0      	beq.n	800e116 <USB_CoreReset+0x36>

  return HAL_OK;
 800e134:	2300      	movs	r3, #0
}
 800e136:	4618      	mov	r0, r3
 800e138:	3714      	adds	r7, #20
 800e13a:	46bd      	mov	sp, r7
 800e13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e140:	4770      	bx	lr
 800e142:	bf00      	nop
 800e144:	00030d40 	.word	0x00030d40

0800e148 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b084      	sub	sp, #16
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
 800e150:	460b      	mov	r3, r1
 800e152:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e154:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e158:	f002 f8d6 	bl	8010308 <malloc>
 800e15c:	4603      	mov	r3, r0
 800e15e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d105      	bne.n	800e172 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2200      	movs	r2, #0
 800e16a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800e16e:	2302      	movs	r3, #2
 800e170:	e066      	b.n	800e240 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	68fa      	ldr	r2, [r7, #12]
 800e176:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	7c1b      	ldrb	r3, [r3, #16]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d119      	bne.n	800e1b6 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e182:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e186:	2202      	movs	r2, #2
 800e188:	2181      	movs	r1, #129	; 0x81
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f001 ff43 	bl	8010016 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2201      	movs	r2, #1
 800e194:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e196:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e19a:	2202      	movs	r2, #2
 800e19c:	2101      	movs	r1, #1
 800e19e:	6878      	ldr	r0, [r7, #4]
 800e1a0:	f001 ff39 	bl	8010016 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2210      	movs	r2, #16
 800e1b0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e1b4:	e016      	b.n	800e1e4 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e1b6:	2340      	movs	r3, #64	; 0x40
 800e1b8:	2202      	movs	r2, #2
 800e1ba:	2181      	movs	r1, #129	; 0x81
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f001 ff2a 	bl	8010016 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2201      	movs	r2, #1
 800e1c6:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e1c8:	2340      	movs	r3, #64	; 0x40
 800e1ca:	2202      	movs	r2, #2
 800e1cc:	2101      	movs	r1, #1
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f001 ff21 	bl	8010016 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2201      	movs	r2, #1
 800e1d8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2210      	movs	r2, #16
 800e1e0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e1e4:	2308      	movs	r3, #8
 800e1e6:	2203      	movs	r2, #3
 800e1e8:	2182      	movs	r1, #130	; 0x82
 800e1ea:	6878      	ldr	r0, [r7, #4]
 800e1ec:	f001 ff13 	bl	8010016 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2201      	movs	r2, #1
 800e1f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	2200      	movs	r2, #0
 800e206:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	2200      	movs	r2, #0
 800e20e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	7c1b      	ldrb	r3, [r3, #16]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d109      	bne.n	800e22e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e220:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e224:	2101      	movs	r1, #1
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f001 ffe4 	bl	80101f4 <USBD_LL_PrepareReceive>
 800e22c:	e007      	b.n	800e23e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e234:	2340      	movs	r3, #64	; 0x40
 800e236:	2101      	movs	r1, #1
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f001 ffdb 	bl	80101f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e23e:	2300      	movs	r3, #0
}
 800e240:	4618      	mov	r0, r3
 800e242:	3710      	adds	r7, #16
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}

0800e248 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b084      	sub	sp, #16
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
 800e250:	460b      	mov	r3, r1
 800e252:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800e254:	2300      	movs	r3, #0
 800e256:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e258:	2181      	movs	r1, #129	; 0x81
 800e25a:	6878      	ldr	r0, [r7, #4]
 800e25c:	f001 ff01 	bl	8010062 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2200      	movs	r2, #0
 800e264:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e266:	2101      	movs	r1, #1
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f001 fefa 	bl	8010062 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	2200      	movs	r2, #0
 800e272:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e276:	2182      	movs	r1, #130	; 0x82
 800e278:	6878      	ldr	r0, [r7, #4]
 800e27a:	f001 fef2 	bl	8010062 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2200      	movs	r2, #0
 800e282:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2200      	movs	r2, #0
 800e28a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e294:	2b00      	cmp	r3, #0
 800e296:	d00e      	beq.n	800e2b6 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e29e:	685b      	ldr	r3, [r3, #4]
 800e2a0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f002 f835 	bl	8010318 <free>
    pdev->pClassData = NULL;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800e2b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	3710      	adds	r7, #16
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}

0800e2c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b086      	sub	sp, #24
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
 800e2c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e2d0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	781b      	ldrb	r3, [r3, #0]
 800e2e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d03a      	beq.n	800e360 <USBD_CDC_Setup+0xa0>
 800e2ea:	2b20      	cmp	r3, #32
 800e2ec:	f040 8097 	bne.w	800e41e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	88db      	ldrh	r3, [r3, #6]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d029      	beq.n	800e34c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	781b      	ldrb	r3, [r3, #0]
 800e2fc:	b25b      	sxtb	r3, r3
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	da11      	bge.n	800e326 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e308:	689b      	ldr	r3, [r3, #8]
 800e30a:	683a      	ldr	r2, [r7, #0]
 800e30c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800e30e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e310:	683a      	ldr	r2, [r7, #0]
 800e312:	88d2      	ldrh	r2, [r2, #6]
 800e314:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e316:	6939      	ldr	r1, [r7, #16]
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	88db      	ldrh	r3, [r3, #6]
 800e31c:	461a      	mov	r2, r3
 800e31e:	6878      	ldr	r0, [r7, #4]
 800e320:	f001 fa6d 	bl	800f7fe <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800e324:	e082      	b.n	800e42c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	785a      	ldrb	r2, [r3, #1]
 800e32a:	693b      	ldr	r3, [r7, #16]
 800e32c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	88db      	ldrh	r3, [r3, #6]
 800e334:	b2da      	uxtb	r2, r3
 800e336:	693b      	ldr	r3, [r7, #16]
 800e338:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e33c:	6939      	ldr	r1, [r7, #16]
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	88db      	ldrh	r3, [r3, #6]
 800e342:	461a      	mov	r2, r3
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f001 fa86 	bl	800f856 <USBD_CtlPrepareRx>
    break;
 800e34a:	e06f      	b.n	800e42c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e352:	689b      	ldr	r3, [r3, #8]
 800e354:	683a      	ldr	r2, [r7, #0]
 800e356:	7850      	ldrb	r0, [r2, #1]
 800e358:	2200      	movs	r2, #0
 800e35a:	6839      	ldr	r1, [r7, #0]
 800e35c:	4798      	blx	r3
    break;
 800e35e:	e065      	b.n	800e42c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	785b      	ldrb	r3, [r3, #1]
 800e364:	2b0b      	cmp	r3, #11
 800e366:	d84f      	bhi.n	800e408 <USBD_CDC_Setup+0x148>
 800e368:	a201      	add	r2, pc, #4	; (adr r2, 800e370 <USBD_CDC_Setup+0xb0>)
 800e36a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e36e:	bf00      	nop
 800e370:	0800e3a1 	.word	0x0800e3a1
 800e374:	0800e417 	.word	0x0800e417
 800e378:	0800e409 	.word	0x0800e409
 800e37c:	0800e409 	.word	0x0800e409
 800e380:	0800e409 	.word	0x0800e409
 800e384:	0800e409 	.word	0x0800e409
 800e388:	0800e409 	.word	0x0800e409
 800e38c:	0800e409 	.word	0x0800e409
 800e390:	0800e409 	.word	0x0800e409
 800e394:	0800e409 	.word	0x0800e409
 800e398:	0800e3c9 	.word	0x0800e3c9
 800e39c:	0800e3f1 	.word	0x0800e3f1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3a6:	2b03      	cmp	r3, #3
 800e3a8:	d107      	bne.n	800e3ba <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e3aa:	f107 030c 	add.w	r3, r7, #12
 800e3ae:	2202      	movs	r2, #2
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f001 fa23 	bl	800f7fe <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e3b8:	e030      	b.n	800e41c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800e3ba:	6839      	ldr	r1, [r7, #0]
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f001 f9ad 	bl	800f71c <USBD_CtlError>
        ret = USBD_FAIL;
 800e3c2:	2303      	movs	r3, #3
 800e3c4:	75fb      	strb	r3, [r7, #23]
      break;
 800e3c6:	e029      	b.n	800e41c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3ce:	2b03      	cmp	r3, #3
 800e3d0:	d107      	bne.n	800e3e2 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e3d2:	f107 030f 	add.w	r3, r7, #15
 800e3d6:	2201      	movs	r2, #1
 800e3d8:	4619      	mov	r1, r3
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f001 fa0f 	bl	800f7fe <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e3e0:	e01c      	b.n	800e41c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800e3e2:	6839      	ldr	r1, [r7, #0]
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f001 f999 	bl	800f71c <USBD_CtlError>
        ret = USBD_FAIL;
 800e3ea:	2303      	movs	r3, #3
 800e3ec:	75fb      	strb	r3, [r7, #23]
      break;
 800e3ee:	e015      	b.n	800e41c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3f6:	2b03      	cmp	r3, #3
 800e3f8:	d00f      	beq.n	800e41a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800e3fa:	6839      	ldr	r1, [r7, #0]
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f001 f98d 	bl	800f71c <USBD_CtlError>
        ret = USBD_FAIL;
 800e402:	2303      	movs	r3, #3
 800e404:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800e406:	e008      	b.n	800e41a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800e408:	6839      	ldr	r1, [r7, #0]
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f001 f986 	bl	800f71c <USBD_CtlError>
      ret = USBD_FAIL;
 800e410:	2303      	movs	r3, #3
 800e412:	75fb      	strb	r3, [r7, #23]
      break;
 800e414:	e002      	b.n	800e41c <USBD_CDC_Setup+0x15c>
      break;
 800e416:	bf00      	nop
 800e418:	e008      	b.n	800e42c <USBD_CDC_Setup+0x16c>
      break;
 800e41a:	bf00      	nop
    }
    break;
 800e41c:	e006      	b.n	800e42c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800e41e:	6839      	ldr	r1, [r7, #0]
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f001 f97b 	bl	800f71c <USBD_CtlError>
    ret = USBD_FAIL;
 800e426:	2303      	movs	r3, #3
 800e428:	75fb      	strb	r3, [r7, #23]
    break;
 800e42a:	bf00      	nop
  }

  return (uint8_t)ret;
 800e42c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e42e:	4618      	mov	r0, r3
 800e430:	3718      	adds	r7, #24
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
 800e436:	bf00      	nop

0800e438 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b084      	sub	sp, #16
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
 800e440:	460b      	mov	r3, r1
 800e442:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e44a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e452:	2b00      	cmp	r3, #0
 800e454:	d101      	bne.n	800e45a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e456:	2303      	movs	r3, #3
 800e458:	e049      	b.n	800e4ee <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e460:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e462:	78fa      	ldrb	r2, [r7, #3]
 800e464:	6879      	ldr	r1, [r7, #4]
 800e466:	4613      	mov	r3, r2
 800e468:	009b      	lsls	r3, r3, #2
 800e46a:	4413      	add	r3, r2
 800e46c:	009b      	lsls	r3, r3, #2
 800e46e:	440b      	add	r3, r1
 800e470:	3318      	adds	r3, #24
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d029      	beq.n	800e4cc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e478:	78fa      	ldrb	r2, [r7, #3]
 800e47a:	6879      	ldr	r1, [r7, #4]
 800e47c:	4613      	mov	r3, r2
 800e47e:	009b      	lsls	r3, r3, #2
 800e480:	4413      	add	r3, r2
 800e482:	009b      	lsls	r3, r3, #2
 800e484:	440b      	add	r3, r1
 800e486:	3318      	adds	r3, #24
 800e488:	681a      	ldr	r2, [r3, #0]
 800e48a:	78f9      	ldrb	r1, [r7, #3]
 800e48c:	68f8      	ldr	r0, [r7, #12]
 800e48e:	460b      	mov	r3, r1
 800e490:	00db      	lsls	r3, r3, #3
 800e492:	1a5b      	subs	r3, r3, r1
 800e494:	009b      	lsls	r3, r3, #2
 800e496:	4403      	add	r3, r0
 800e498:	3344      	adds	r3, #68	; 0x44
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	fbb2 f1f3 	udiv	r1, r2, r3
 800e4a0:	fb03 f301 	mul.w	r3, r3, r1
 800e4a4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d110      	bne.n	800e4cc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e4aa:	78fa      	ldrb	r2, [r7, #3]
 800e4ac:	6879      	ldr	r1, [r7, #4]
 800e4ae:	4613      	mov	r3, r2
 800e4b0:	009b      	lsls	r3, r3, #2
 800e4b2:	4413      	add	r3, r2
 800e4b4:	009b      	lsls	r3, r3, #2
 800e4b6:	440b      	add	r3, r1
 800e4b8:	3318      	adds	r3, #24
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e4be:	78f9      	ldrb	r1, [r7, #3]
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f001 fe74 	bl	80101b2 <USBD_LL_Transmit>
 800e4ca:	e00f      	b.n	800e4ec <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e4da:	691b      	ldr	r3, [r3, #16]
 800e4dc:	68ba      	ldr	r2, [r7, #8]
 800e4de:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e4e2:	68ba      	ldr	r2, [r7, #8]
 800e4e4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e4e8:	78fa      	ldrb	r2, [r7, #3]
 800e4ea:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800e4ec:	2300      	movs	r3, #0
}
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	3710      	adds	r7, #16
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}

0800e4f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e4f6:	b580      	push	{r7, lr}
 800e4f8:	b084      	sub	sp, #16
 800e4fa:	af00      	add	r7, sp, #0
 800e4fc:	6078      	str	r0, [r7, #4]
 800e4fe:	460b      	mov	r3, r1
 800e500:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e508:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e510:	2b00      	cmp	r3, #0
 800e512:	d101      	bne.n	800e518 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e514:	2303      	movs	r3, #3
 800e516:	e015      	b.n	800e544 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e518:	78fb      	ldrb	r3, [r7, #3]
 800e51a:	4619      	mov	r1, r3
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	f001 fe8a 	bl	8010236 <USBD_LL_GetRxDataSize>
 800e522:	4602      	mov	r2, r0
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e530:	68db      	ldr	r3, [r3, #12]
 800e532:	68fa      	ldr	r2, [r7, #12]
 800e534:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e538:	68fa      	ldr	r2, [r7, #12]
 800e53a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e53e:	4611      	mov	r1, r2
 800e540:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e542:	2300      	movs	r3, #0
}
 800e544:	4618      	mov	r0, r3
 800e546:	3710      	adds	r7, #16
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}

0800e54c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b084      	sub	sp, #16
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e55a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e562:	2b00      	cmp	r3, #0
 800e564:	d015      	beq.n	800e592 <USBD_CDC_EP0_RxReady+0x46>
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e56c:	2bff      	cmp	r3, #255	; 0xff
 800e56e:	d010      	beq.n	800e592 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e576:	689b      	ldr	r3, [r3, #8]
 800e578:	68fa      	ldr	r2, [r7, #12]
 800e57a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e57e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e580:	68fa      	ldr	r2, [r7, #12]
 800e582:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e586:	b292      	uxth	r2, r2
 800e588:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	22ff      	movs	r2, #255	; 0xff
 800e58e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800e592:	2300      	movs	r3, #0
}
 800e594:	4618      	mov	r0, r3
 800e596:	3710      	adds	r7, #16
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}

0800e59c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e59c:	b480      	push	{r7}
 800e59e:	b083      	sub	sp, #12
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2243      	movs	r2, #67	; 0x43
 800e5a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e5aa:	4b03      	ldr	r3, [pc, #12]	; (800e5b8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	370c      	adds	r7, #12
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b6:	4770      	bx	lr
 800e5b8:	200000d8 	.word	0x200000d8

0800e5bc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e5bc:	b480      	push	{r7}
 800e5be:	b083      	sub	sp, #12
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2243      	movs	r2, #67	; 0x43
 800e5c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e5ca:	4b03      	ldr	r3, [pc, #12]	; (800e5d8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	370c      	adds	r7, #12
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d6:	4770      	bx	lr
 800e5d8:	20000094 	.word	0x20000094

0800e5dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e5dc:	b480      	push	{r7}
 800e5de:	b083      	sub	sp, #12
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2243      	movs	r2, #67	; 0x43
 800e5e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e5ea:	4b03      	ldr	r3, [pc, #12]	; (800e5f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	370c      	adds	r7, #12
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f6:	4770      	bx	lr
 800e5f8:	2000011c 	.word	0x2000011c

0800e5fc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e5fc:	b480      	push	{r7}
 800e5fe:	b083      	sub	sp, #12
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	220a      	movs	r2, #10
 800e608:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e60a:	4b03      	ldr	r3, [pc, #12]	; (800e618 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	370c      	adds	r7, #12
 800e610:	46bd      	mov	sp, r7
 800e612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e616:	4770      	bx	lr
 800e618:	20000050 	.word	0x20000050

0800e61c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e61c:	b480      	push	{r7}
 800e61e:	b083      	sub	sp, #12
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
 800e624:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d101      	bne.n	800e630 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e62c:	2303      	movs	r3, #3
 800e62e:	e004      	b.n	800e63a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	683a      	ldr	r2, [r7, #0]
 800e634:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e638:	2300      	movs	r3, #0
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	370c      	adds	r7, #12
 800e63e:	46bd      	mov	sp, r7
 800e640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e644:	4770      	bx	lr

0800e646 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e646:	b480      	push	{r7}
 800e648:	b087      	sub	sp, #28
 800e64a:	af00      	add	r7, sp, #0
 800e64c:	60f8      	str	r0, [r7, #12]
 800e64e:	60b9      	str	r1, [r7, #8]
 800e650:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e658:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800e65a:	697b      	ldr	r3, [r7, #20]
 800e65c:	68ba      	ldr	r2, [r7, #8]
 800e65e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	687a      	ldr	r2, [r7, #4]
 800e666:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e66a:	2300      	movs	r3, #0
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	371c      	adds	r7, #28
 800e670:	46bd      	mov	sp, r7
 800e672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e676:	4770      	bx	lr

0800e678 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e678:	b480      	push	{r7}
 800e67a:	b085      	sub	sp, #20
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e688:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	683a      	ldr	r2, [r7, #0]
 800e68e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e692:	2300      	movs	r3, #0
}
 800e694:	4618      	mov	r0, r3
 800e696:	3714      	adds	r7, #20
 800e698:	46bd      	mov	sp, r7
 800e69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69e:	4770      	bx	lr

0800e6a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b084      	sub	sp, #16
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e6ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d101      	bne.n	800e6be <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e6ba:	2303      	movs	r3, #3
 800e6bc:	e016      	b.n	800e6ec <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	7c1b      	ldrb	r3, [r3, #16]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d109      	bne.n	800e6da <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e6cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e6d0:	2101      	movs	r1, #1
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f001 fd8e 	bl	80101f4 <USBD_LL_PrepareReceive>
 800e6d8:	e007      	b.n	800e6ea <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e6e0:	2340      	movs	r3, #64	; 0x40
 800e6e2:	2101      	movs	r1, #1
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	f001 fd85 	bl	80101f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e6ea:	2300      	movs	r3, #0
}
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	3710      	adds	r7, #16
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}

0800e6f4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b086      	sub	sp, #24
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	60f8      	str	r0, [r7, #12]
 800e6fc:	60b9      	str	r1, [r7, #8]
 800e6fe:	4613      	mov	r3, r2
 800e700:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d101      	bne.n	800e70c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e708:	2303      	movs	r3, #3
 800e70a:	e025      	b.n	800e758 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e712:	2b00      	cmp	r3, #0
 800e714:	d003      	beq.n	800e71e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	2200      	movs	r2, #0
 800e71a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800e724:	2b00      	cmp	r3, #0
 800e726:	d003      	beq.n	800e730 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	2200      	movs	r2, #0
 800e72c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d003      	beq.n	800e73e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	68ba      	ldr	r2, [r7, #8]
 800e73a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	2201      	movs	r2, #1
 800e742:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	79fa      	ldrb	r2, [r7, #7]
 800e74a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e74c:	68f8      	ldr	r0, [r7, #12]
 800e74e:	f001 fbfb 	bl	800ff48 <USBD_LL_Init>
 800e752:	4603      	mov	r3, r0
 800e754:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e756:	7dfb      	ldrb	r3, [r7, #23]
}
 800e758:	4618      	mov	r0, r3
 800e75a:	3718      	adds	r7, #24
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bd80      	pop	{r7, pc}

0800e760 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b084      	sub	sp, #16
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
 800e768:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e76a:	2300      	movs	r3, #0
 800e76c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d101      	bne.n	800e778 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e774:	2303      	movs	r3, #3
 800e776:	e010      	b.n	800e79a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	683a      	ldr	r2, [r7, #0]
 800e77c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e788:	f107 020e 	add.w	r2, r7, #14
 800e78c:	4610      	mov	r0, r2
 800e78e:	4798      	blx	r3
 800e790:	4602      	mov	r2, r0
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800e798:	2300      	movs	r3, #0
}
 800e79a:	4618      	mov	r0, r3
 800e79c:	3710      	adds	r7, #16
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}

0800e7a2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e7a2:	b580      	push	{r7, lr}
 800e7a4:	b082      	sub	sp, #8
 800e7a6:	af00      	add	r7, sp, #0
 800e7a8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	f001 fc18 	bl	800ffe0 <USBD_LL_Start>
 800e7b0:	4603      	mov	r3, r0
}
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	3708      	adds	r7, #8
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bd80      	pop	{r7, pc}

0800e7ba <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e7ba:	b480      	push	{r7}
 800e7bc:	b083      	sub	sp, #12
 800e7be:	af00      	add	r7, sp, #0
 800e7c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e7c2:	2300      	movs	r3, #0
}
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	370c      	adds	r7, #12
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ce:	4770      	bx	lr

0800e7d0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b084      	sub	sp, #16
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
 800e7d8:	460b      	mov	r3, r1
 800e7da:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e7dc:	2303      	movs	r3, #3
 800e7de:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d009      	beq.n	800e7fe <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	78fa      	ldrb	r2, [r7, #3]
 800e7f4:	4611      	mov	r1, r2
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	4798      	blx	r3
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e7fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800e800:	4618      	mov	r0, r3
 800e802:	3710      	adds	r7, #16
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}

0800e808 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b082      	sub	sp, #8
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
 800e810:	460b      	mov	r3, r1
 800e812:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d007      	beq.n	800e82e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e824:	685b      	ldr	r3, [r3, #4]
 800e826:	78fa      	ldrb	r2, [r7, #3]
 800e828:	4611      	mov	r1, r2
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	4798      	blx	r3
  }

  return USBD_OK;
 800e82e:	2300      	movs	r3, #0
}
 800e830:	4618      	mov	r0, r3
 800e832:	3708      	adds	r7, #8
 800e834:	46bd      	mov	sp, r7
 800e836:	bd80      	pop	{r7, pc}

0800e838 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b084      	sub	sp, #16
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
 800e840:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e848:	6839      	ldr	r1, [r7, #0]
 800e84a:	4618      	mov	r0, r3
 800e84c:	f000 ff2c 	bl	800f6a8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2201      	movs	r2, #1
 800e854:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e85e:	461a      	mov	r2, r3
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e86c:	f003 031f 	and.w	r3, r3, #31
 800e870:	2b01      	cmp	r3, #1
 800e872:	d00e      	beq.n	800e892 <USBD_LL_SetupStage+0x5a>
 800e874:	2b01      	cmp	r3, #1
 800e876:	d302      	bcc.n	800e87e <USBD_LL_SetupStage+0x46>
 800e878:	2b02      	cmp	r3, #2
 800e87a:	d014      	beq.n	800e8a6 <USBD_LL_SetupStage+0x6e>
 800e87c:	e01d      	b.n	800e8ba <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e884:	4619      	mov	r1, r3
 800e886:	6878      	ldr	r0, [r7, #4]
 800e888:	f000 fa18 	bl	800ecbc <USBD_StdDevReq>
 800e88c:	4603      	mov	r3, r0
 800e88e:	73fb      	strb	r3, [r7, #15]
      break;
 800e890:	e020      	b.n	800e8d4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e898:	4619      	mov	r1, r3
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	f000 fa7c 	bl	800ed98 <USBD_StdItfReq>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	73fb      	strb	r3, [r7, #15]
      break;
 800e8a4:	e016      	b.n	800e8d4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e8ac:	4619      	mov	r1, r3
 800e8ae:	6878      	ldr	r0, [r7, #4]
 800e8b0:	f000 fab8 	bl	800ee24 <USBD_StdEPReq>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	73fb      	strb	r3, [r7, #15]
      break;
 800e8b8:	e00c      	b.n	800e8d4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e8c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e8c4:	b2db      	uxtb	r3, r3
 800e8c6:	4619      	mov	r1, r3
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f001 fbe9 	bl	80100a0 <USBD_LL_StallEP>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	73fb      	strb	r3, [r7, #15]
      break;
 800e8d2:	bf00      	nop
  }

  return ret;
 800e8d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3710      	adds	r7, #16
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}

0800e8de <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e8de:	b580      	push	{r7, lr}
 800e8e0:	b086      	sub	sp, #24
 800e8e2:	af00      	add	r7, sp, #0
 800e8e4:	60f8      	str	r0, [r7, #12]
 800e8e6:	460b      	mov	r3, r1
 800e8e8:	607a      	str	r2, [r7, #4]
 800e8ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e8ec:	7afb      	ldrb	r3, [r7, #11]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d137      	bne.n	800e962 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e8f8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e900:	2b03      	cmp	r3, #3
 800e902:	d14a      	bne.n	800e99a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e904:	693b      	ldr	r3, [r7, #16]
 800e906:	689a      	ldr	r2, [r3, #8]
 800e908:	693b      	ldr	r3, [r7, #16]
 800e90a:	68db      	ldr	r3, [r3, #12]
 800e90c:	429a      	cmp	r2, r3
 800e90e:	d913      	bls.n	800e938 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e910:	693b      	ldr	r3, [r7, #16]
 800e912:	689a      	ldr	r2, [r3, #8]
 800e914:	693b      	ldr	r3, [r7, #16]
 800e916:	68db      	ldr	r3, [r3, #12]
 800e918:	1ad2      	subs	r2, r2, r3
 800e91a:	693b      	ldr	r3, [r7, #16]
 800e91c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e91e:	693b      	ldr	r3, [r7, #16]
 800e920:	68da      	ldr	r2, [r3, #12]
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	689b      	ldr	r3, [r3, #8]
 800e926:	4293      	cmp	r3, r2
 800e928:	bf28      	it	cs
 800e92a:	4613      	movcs	r3, r2
 800e92c:	461a      	mov	r2, r3
 800e92e:	6879      	ldr	r1, [r7, #4]
 800e930:	68f8      	ldr	r0, [r7, #12]
 800e932:	f000 ffad 	bl	800f890 <USBD_CtlContinueRx>
 800e936:	e030      	b.n	800e99a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e93e:	691b      	ldr	r3, [r3, #16]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d00a      	beq.n	800e95a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e94a:	2b03      	cmp	r3, #3
 800e94c:	d105      	bne.n	800e95a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e954:	691b      	ldr	r3, [r3, #16]
 800e956:	68f8      	ldr	r0, [r7, #12]
 800e958:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800e95a:	68f8      	ldr	r0, [r7, #12]
 800e95c:	f000 ffa9 	bl	800f8b2 <USBD_CtlSendStatus>
 800e960:	e01b      	b.n	800e99a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e968:	699b      	ldr	r3, [r3, #24]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d013      	beq.n	800e996 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800e974:	2b03      	cmp	r3, #3
 800e976:	d10e      	bne.n	800e996 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e97e:	699b      	ldr	r3, [r3, #24]
 800e980:	7afa      	ldrb	r2, [r7, #11]
 800e982:	4611      	mov	r1, r2
 800e984:	68f8      	ldr	r0, [r7, #12]
 800e986:	4798      	blx	r3
 800e988:	4603      	mov	r3, r0
 800e98a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e98c:	7dfb      	ldrb	r3, [r7, #23]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d003      	beq.n	800e99a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800e992:	7dfb      	ldrb	r3, [r7, #23]
 800e994:	e002      	b.n	800e99c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e996:	2303      	movs	r3, #3
 800e998:	e000      	b.n	800e99c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800e99a:	2300      	movs	r3, #0
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	3718      	adds	r7, #24
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}

0800e9a4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b086      	sub	sp, #24
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	60f8      	str	r0, [r7, #12]
 800e9ac:	460b      	mov	r3, r1
 800e9ae:	607a      	str	r2, [r7, #4]
 800e9b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e9b2:	7afb      	ldrb	r3, [r7, #11]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d16a      	bne.n	800ea8e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	3314      	adds	r3, #20
 800e9bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e9c4:	2b02      	cmp	r3, #2
 800e9c6:	d155      	bne.n	800ea74 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800e9c8:	693b      	ldr	r3, [r7, #16]
 800e9ca:	689a      	ldr	r2, [r3, #8]
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	68db      	ldr	r3, [r3, #12]
 800e9d0:	429a      	cmp	r2, r3
 800e9d2:	d914      	bls.n	800e9fe <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e9d4:	693b      	ldr	r3, [r7, #16]
 800e9d6:	689a      	ldr	r2, [r3, #8]
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	68db      	ldr	r3, [r3, #12]
 800e9dc:	1ad2      	subs	r2, r2, r3
 800e9de:	693b      	ldr	r3, [r7, #16]
 800e9e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	689b      	ldr	r3, [r3, #8]
 800e9e6:	461a      	mov	r2, r3
 800e9e8:	6879      	ldr	r1, [r7, #4]
 800e9ea:	68f8      	ldr	r0, [r7, #12]
 800e9ec:	f000 ff22 	bl	800f834 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	2100      	movs	r1, #0
 800e9f6:	68f8      	ldr	r0, [r7, #12]
 800e9f8:	f001 fbfc 	bl	80101f4 <USBD_LL_PrepareReceive>
 800e9fc:	e03a      	b.n	800ea74 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e9fe:	693b      	ldr	r3, [r7, #16]
 800ea00:	68da      	ldr	r2, [r3, #12]
 800ea02:	693b      	ldr	r3, [r7, #16]
 800ea04:	689b      	ldr	r3, [r3, #8]
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d11c      	bne.n	800ea44 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ea0a:	693b      	ldr	r3, [r7, #16]
 800ea0c:	685a      	ldr	r2, [r3, #4]
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ea12:	429a      	cmp	r2, r3
 800ea14:	d316      	bcc.n	800ea44 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ea16:	693b      	ldr	r3, [r7, #16]
 800ea18:	685a      	ldr	r2, [r3, #4]
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ea20:	429a      	cmp	r2, r3
 800ea22:	d20f      	bcs.n	800ea44 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ea24:	2200      	movs	r2, #0
 800ea26:	2100      	movs	r1, #0
 800ea28:	68f8      	ldr	r0, [r7, #12]
 800ea2a:	f000 ff03 	bl	800f834 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	2200      	movs	r2, #0
 800ea32:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ea36:	2300      	movs	r3, #0
 800ea38:	2200      	movs	r2, #0
 800ea3a:	2100      	movs	r1, #0
 800ea3c:	68f8      	ldr	r0, [r7, #12]
 800ea3e:	f001 fbd9 	bl	80101f4 <USBD_LL_PrepareReceive>
 800ea42:	e017      	b.n	800ea74 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea4a:	68db      	ldr	r3, [r3, #12]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d00a      	beq.n	800ea66 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ea56:	2b03      	cmp	r3, #3
 800ea58:	d105      	bne.n	800ea66 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea60:	68db      	ldr	r3, [r3, #12]
 800ea62:	68f8      	ldr	r0, [r7, #12]
 800ea64:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ea66:	2180      	movs	r1, #128	; 0x80
 800ea68:	68f8      	ldr	r0, [r7, #12]
 800ea6a:	f001 fb19 	bl	80100a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ea6e:	68f8      	ldr	r0, [r7, #12]
 800ea70:	f000 ff32 	bl	800f8d8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ea7a:	2b01      	cmp	r3, #1
 800ea7c:	d123      	bne.n	800eac6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ea7e:	68f8      	ldr	r0, [r7, #12]
 800ea80:	f7ff fe9b 	bl	800e7ba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	2200      	movs	r2, #0
 800ea88:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ea8c:	e01b      	b.n	800eac6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea94:	695b      	ldr	r3, [r3, #20]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d013      	beq.n	800eac2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800eaa0:	2b03      	cmp	r3, #3
 800eaa2:	d10e      	bne.n	800eac2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eaaa:	695b      	ldr	r3, [r3, #20]
 800eaac:	7afa      	ldrb	r2, [r7, #11]
 800eaae:	4611      	mov	r1, r2
 800eab0:	68f8      	ldr	r0, [r7, #12]
 800eab2:	4798      	blx	r3
 800eab4:	4603      	mov	r3, r0
 800eab6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800eab8:	7dfb      	ldrb	r3, [r7, #23]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d003      	beq.n	800eac6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800eabe:	7dfb      	ldrb	r3, [r7, #23]
 800eac0:	e002      	b.n	800eac8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800eac2:	2303      	movs	r3, #3
 800eac4:	e000      	b.n	800eac8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800eac6:	2300      	movs	r3, #0
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	3718      	adds	r7, #24
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}

0800ead0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2201      	movs	r2, #1
 800eadc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2200      	movs	r2, #0
 800eae4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2200      	movs	r2, #0
 800eaec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d009      	beq.n	800eb14 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb06:	685b      	ldr	r3, [r3, #4]
 800eb08:	687a      	ldr	r2, [r7, #4]
 800eb0a:	6852      	ldr	r2, [r2, #4]
 800eb0c:	b2d2      	uxtb	r2, r2
 800eb0e:	4611      	mov	r1, r2
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eb14:	2340      	movs	r3, #64	; 0x40
 800eb16:	2200      	movs	r2, #0
 800eb18:	2100      	movs	r1, #0
 800eb1a:	6878      	ldr	r0, [r7, #4]
 800eb1c:	f001 fa7b 	bl	8010016 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2201      	movs	r2, #1
 800eb24:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2240      	movs	r2, #64	; 0x40
 800eb2c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eb30:	2340      	movs	r3, #64	; 0x40
 800eb32:	2200      	movs	r2, #0
 800eb34:	2180      	movs	r1, #128	; 0x80
 800eb36:	6878      	ldr	r0, [r7, #4]
 800eb38:	f001 fa6d 	bl	8010016 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2201      	movs	r2, #1
 800eb40:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2240      	movs	r2, #64	; 0x40
 800eb46:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800eb48:	2300      	movs	r3, #0
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	3708      	adds	r7, #8
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}

0800eb52 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800eb52:	b480      	push	{r7}
 800eb54:	b083      	sub	sp, #12
 800eb56:	af00      	add	r7, sp, #0
 800eb58:	6078      	str	r0, [r7, #4]
 800eb5a:	460b      	mov	r3, r1
 800eb5c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	78fa      	ldrb	r2, [r7, #3]
 800eb62:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800eb64:	2300      	movs	r3, #0
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	370c      	adds	r7, #12
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb70:	4770      	bx	lr

0800eb72 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800eb72:	b480      	push	{r7}
 800eb74:	b083      	sub	sp, #12
 800eb76:	af00      	add	r7, sp, #0
 800eb78:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2204      	movs	r2, #4
 800eb8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800eb8e:	2300      	movs	r3, #0
}
 800eb90:	4618      	mov	r0, r3
 800eb92:	370c      	adds	r7, #12
 800eb94:	46bd      	mov	sp, r7
 800eb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9a:	4770      	bx	lr

0800eb9c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b083      	sub	sp, #12
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebaa:	2b04      	cmp	r3, #4
 800ebac:	d105      	bne.n	800ebba <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ebba:	2300      	movs	r3, #0
}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	370c      	adds	r7, #12
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc6:	4770      	bx	lr

0800ebc8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b082      	sub	sp, #8
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebd6:	2b03      	cmp	r3, #3
 800ebd8:	d10b      	bne.n	800ebf2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebe0:	69db      	ldr	r3, [r3, #28]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d005      	beq.n	800ebf2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebec:	69db      	ldr	r3, [r3, #28]
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ebf2:	2300      	movs	r3, #0
}
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	3708      	adds	r7, #8
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}

0800ebfc <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	b083      	sub	sp, #12
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
 800ec04:	460b      	mov	r3, r1
 800ec06:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ec08:	2300      	movs	r3, #0
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	370c      	adds	r7, #12
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec14:	4770      	bx	lr

0800ec16 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ec16:	b480      	push	{r7}
 800ec18:	b083      	sub	sp, #12
 800ec1a:	af00      	add	r7, sp, #0
 800ec1c:	6078      	str	r0, [r7, #4]
 800ec1e:	460b      	mov	r3, r1
 800ec20:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ec22:	2300      	movs	r3, #0
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	370c      	adds	r7, #12
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2e:	4770      	bx	lr

0800ec30 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ec30:	b480      	push	{r7}
 800ec32:	b083      	sub	sp, #12
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ec38:	2300      	movs	r3, #0
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	370c      	adds	r7, #12
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec44:	4770      	bx	lr

0800ec46 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ec46:	b580      	push	{r7, lr}
 800ec48:	b082      	sub	sp, #8
 800ec4a:	af00      	add	r7, sp, #0
 800ec4c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2201      	movs	r2, #1
 800ec52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d009      	beq.n	800ec74 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec66:	685b      	ldr	r3, [r3, #4]
 800ec68:	687a      	ldr	r2, [r7, #4]
 800ec6a:	6852      	ldr	r2, [r2, #4]
 800ec6c:	b2d2      	uxtb	r2, r2
 800ec6e:	4611      	mov	r1, r2
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	4798      	blx	r3
  }

  return USBD_OK;
 800ec74:	2300      	movs	r3, #0
}
 800ec76:	4618      	mov	r0, r3
 800ec78:	3708      	adds	r7, #8
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}

0800ec7e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ec7e:	b480      	push	{r7}
 800ec80:	b087      	sub	sp, #28
 800ec82:	af00      	add	r7, sp, #0
 800ec84:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	781b      	ldrb	r3, [r3, #0]
 800ec8e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ec90:	697b      	ldr	r3, [r7, #20]
 800ec92:	3301      	adds	r3, #1
 800ec94:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ec96:	697b      	ldr	r3, [r7, #20]
 800ec98:	781b      	ldrb	r3, [r3, #0]
 800ec9a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ec9c:	8a3b      	ldrh	r3, [r7, #16]
 800ec9e:	021b      	lsls	r3, r3, #8
 800eca0:	b21a      	sxth	r2, r3
 800eca2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eca6:	4313      	orrs	r3, r2
 800eca8:	b21b      	sxth	r3, r3
 800ecaa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ecac:	89fb      	ldrh	r3, [r7, #14]
}
 800ecae:	4618      	mov	r0, r3
 800ecb0:	371c      	adds	r7, #28
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb8:	4770      	bx	lr
	...

0800ecbc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b084      	sub	sp, #16
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
 800ecc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	781b      	ldrb	r3, [r3, #0]
 800ecce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ecd2:	2b20      	cmp	r3, #32
 800ecd4:	d004      	beq.n	800ece0 <USBD_StdDevReq+0x24>
 800ecd6:	2b40      	cmp	r3, #64	; 0x40
 800ecd8:	d002      	beq.n	800ece0 <USBD_StdDevReq+0x24>
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d00a      	beq.n	800ecf4 <USBD_StdDevReq+0x38>
 800ecde:	e050      	b.n	800ed82 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ece6:	689b      	ldr	r3, [r3, #8]
 800ece8:	6839      	ldr	r1, [r7, #0]
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	4798      	blx	r3
 800ecee:	4603      	mov	r3, r0
 800ecf0:	73fb      	strb	r3, [r7, #15]
    break;
 800ecf2:	e04b      	b.n	800ed8c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	785b      	ldrb	r3, [r3, #1]
 800ecf8:	2b09      	cmp	r3, #9
 800ecfa:	d83c      	bhi.n	800ed76 <USBD_StdDevReq+0xba>
 800ecfc:	a201      	add	r2, pc, #4	; (adr r2, 800ed04 <USBD_StdDevReq+0x48>)
 800ecfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed02:	bf00      	nop
 800ed04:	0800ed59 	.word	0x0800ed59
 800ed08:	0800ed6d 	.word	0x0800ed6d
 800ed0c:	0800ed77 	.word	0x0800ed77
 800ed10:	0800ed63 	.word	0x0800ed63
 800ed14:	0800ed77 	.word	0x0800ed77
 800ed18:	0800ed37 	.word	0x0800ed37
 800ed1c:	0800ed2d 	.word	0x0800ed2d
 800ed20:	0800ed77 	.word	0x0800ed77
 800ed24:	0800ed4f 	.word	0x0800ed4f
 800ed28:	0800ed41 	.word	0x0800ed41
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800ed2c:	6839      	ldr	r1, [r7, #0]
 800ed2e:	6878      	ldr	r0, [r7, #4]
 800ed30:	f000 f9ce 	bl	800f0d0 <USBD_GetDescriptor>
      break;
 800ed34:	e024      	b.n	800ed80 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800ed36:	6839      	ldr	r1, [r7, #0]
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f000 fb33 	bl	800f3a4 <USBD_SetAddress>
      break;
 800ed3e:	e01f      	b.n	800ed80 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800ed40:	6839      	ldr	r1, [r7, #0]
 800ed42:	6878      	ldr	r0, [r7, #4]
 800ed44:	f000 fb70 	bl	800f428 <USBD_SetConfig>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	73fb      	strb	r3, [r7, #15]
      break;
 800ed4c:	e018      	b.n	800ed80 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800ed4e:	6839      	ldr	r1, [r7, #0]
 800ed50:	6878      	ldr	r0, [r7, #4]
 800ed52:	f000 fc0d 	bl	800f570 <USBD_GetConfig>
      break;
 800ed56:	e013      	b.n	800ed80 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800ed58:	6839      	ldr	r1, [r7, #0]
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f000 fc3c 	bl	800f5d8 <USBD_GetStatus>
      break;
 800ed60:	e00e      	b.n	800ed80 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800ed62:	6839      	ldr	r1, [r7, #0]
 800ed64:	6878      	ldr	r0, [r7, #4]
 800ed66:	f000 fc6a 	bl	800f63e <USBD_SetFeature>
      break;
 800ed6a:	e009      	b.n	800ed80 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800ed6c:	6839      	ldr	r1, [r7, #0]
 800ed6e:	6878      	ldr	r0, [r7, #4]
 800ed70:	f000 fc79 	bl	800f666 <USBD_ClrFeature>
      break;
 800ed74:	e004      	b.n	800ed80 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800ed76:	6839      	ldr	r1, [r7, #0]
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	f000 fccf 	bl	800f71c <USBD_CtlError>
      break;
 800ed7e:	bf00      	nop
    }
    break;
 800ed80:	e004      	b.n	800ed8c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800ed82:	6839      	ldr	r1, [r7, #0]
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f000 fcc9 	bl	800f71c <USBD_CtlError>
    break;
 800ed8a:	bf00      	nop
  }

  return ret;
 800ed8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3710      	adds	r7, #16
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}
 800ed96:	bf00      	nop

0800ed98 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b084      	sub	sp, #16
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
 800eda0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eda2:	2300      	movs	r3, #0
 800eda4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	781b      	ldrb	r3, [r3, #0]
 800edaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800edae:	2b20      	cmp	r3, #32
 800edb0:	d003      	beq.n	800edba <USBD_StdItfReq+0x22>
 800edb2:	2b40      	cmp	r3, #64	; 0x40
 800edb4:	d001      	beq.n	800edba <USBD_StdItfReq+0x22>
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d12a      	bne.n	800ee10 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edc0:	3b01      	subs	r3, #1
 800edc2:	2b02      	cmp	r3, #2
 800edc4:	d81d      	bhi.n	800ee02 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	889b      	ldrh	r3, [r3, #4]
 800edca:	b2db      	uxtb	r3, r3
 800edcc:	2b01      	cmp	r3, #1
 800edce:	d813      	bhi.n	800edf8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edd6:	689b      	ldr	r3, [r3, #8]
 800edd8:	6839      	ldr	r1, [r7, #0]
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	4798      	blx	r3
 800edde:	4603      	mov	r3, r0
 800ede0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	88db      	ldrh	r3, [r3, #6]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d110      	bne.n	800ee0c <USBD_StdItfReq+0x74>
 800edea:	7bfb      	ldrb	r3, [r7, #15]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d10d      	bne.n	800ee0c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800edf0:	6878      	ldr	r0, [r7, #4]
 800edf2:	f000 fd5e 	bl	800f8b2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800edf6:	e009      	b.n	800ee0c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800edf8:	6839      	ldr	r1, [r7, #0]
 800edfa:	6878      	ldr	r0, [r7, #4]
 800edfc:	f000 fc8e 	bl	800f71c <USBD_CtlError>
      break;
 800ee00:	e004      	b.n	800ee0c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800ee02:	6839      	ldr	r1, [r7, #0]
 800ee04:	6878      	ldr	r0, [r7, #4]
 800ee06:	f000 fc89 	bl	800f71c <USBD_CtlError>
      break;
 800ee0a:	e000      	b.n	800ee0e <USBD_StdItfReq+0x76>
      break;
 800ee0c:	bf00      	nop
    }
    break;
 800ee0e:	e004      	b.n	800ee1a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800ee10:	6839      	ldr	r1, [r7, #0]
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f000 fc82 	bl	800f71c <USBD_CtlError>
    break;
 800ee18:	bf00      	nop
  }

  return ret;
 800ee1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	3710      	adds	r7, #16
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}

0800ee24 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b084      	sub	sp, #16
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
 800ee2c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ee2e:	2300      	movs	r3, #0
 800ee30:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ee32:	683b      	ldr	r3, [r7, #0]
 800ee34:	889b      	ldrh	r3, [r3, #4]
 800ee36:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	781b      	ldrb	r3, [r3, #0]
 800ee3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ee40:	2b20      	cmp	r3, #32
 800ee42:	d004      	beq.n	800ee4e <USBD_StdEPReq+0x2a>
 800ee44:	2b40      	cmp	r3, #64	; 0x40
 800ee46:	d002      	beq.n	800ee4e <USBD_StdEPReq+0x2a>
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d00a      	beq.n	800ee62 <USBD_StdEPReq+0x3e>
 800ee4c:	e135      	b.n	800f0ba <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee54:	689b      	ldr	r3, [r3, #8]
 800ee56:	6839      	ldr	r1, [r7, #0]
 800ee58:	6878      	ldr	r0, [r7, #4]
 800ee5a:	4798      	blx	r3
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	73fb      	strb	r3, [r7, #15]
    break;
 800ee60:	e130      	b.n	800f0c4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	785b      	ldrb	r3, [r3, #1]
 800ee66:	2b01      	cmp	r3, #1
 800ee68:	d03e      	beq.n	800eee8 <USBD_StdEPReq+0xc4>
 800ee6a:	2b03      	cmp	r3, #3
 800ee6c:	d002      	beq.n	800ee74 <USBD_StdEPReq+0x50>
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d077      	beq.n	800ef62 <USBD_StdEPReq+0x13e>
 800ee72:	e11c      	b.n	800f0ae <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee7a:	2b02      	cmp	r3, #2
 800ee7c:	d002      	beq.n	800ee84 <USBD_StdEPReq+0x60>
 800ee7e:	2b03      	cmp	r3, #3
 800ee80:	d015      	beq.n	800eeae <USBD_StdEPReq+0x8a>
 800ee82:	e02b      	b.n	800eedc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ee84:	7bbb      	ldrb	r3, [r7, #14]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d00c      	beq.n	800eea4 <USBD_StdEPReq+0x80>
 800ee8a:	7bbb      	ldrb	r3, [r7, #14]
 800ee8c:	2b80      	cmp	r3, #128	; 0x80
 800ee8e:	d009      	beq.n	800eea4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ee90:	7bbb      	ldrb	r3, [r7, #14]
 800ee92:	4619      	mov	r1, r3
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f001 f903 	bl	80100a0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee9a:	2180      	movs	r1, #128	; 0x80
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	f001 f8ff 	bl	80100a0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800eea2:	e020      	b.n	800eee6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800eea4:	6839      	ldr	r1, [r7, #0]
 800eea6:	6878      	ldr	r0, [r7, #4]
 800eea8:	f000 fc38 	bl	800f71c <USBD_CtlError>
        break;
 800eeac:	e01b      	b.n	800eee6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	885b      	ldrh	r3, [r3, #2]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d10e      	bne.n	800eed4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800eeb6:	7bbb      	ldrb	r3, [r7, #14]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d00b      	beq.n	800eed4 <USBD_StdEPReq+0xb0>
 800eebc:	7bbb      	ldrb	r3, [r7, #14]
 800eebe:	2b80      	cmp	r3, #128	; 0x80
 800eec0:	d008      	beq.n	800eed4 <USBD_StdEPReq+0xb0>
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	88db      	ldrh	r3, [r3, #6]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d104      	bne.n	800eed4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800eeca:	7bbb      	ldrb	r3, [r7, #14]
 800eecc:	4619      	mov	r1, r3
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	f001 f8e6 	bl	80100a0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800eed4:	6878      	ldr	r0, [r7, #4]
 800eed6:	f000 fcec 	bl	800f8b2 <USBD_CtlSendStatus>

        break;
 800eeda:	e004      	b.n	800eee6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800eedc:	6839      	ldr	r1, [r7, #0]
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f000 fc1c 	bl	800f71c <USBD_CtlError>
        break;
 800eee4:	bf00      	nop
      }
      break;
 800eee6:	e0e7      	b.n	800f0b8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eeee:	2b02      	cmp	r3, #2
 800eef0:	d002      	beq.n	800eef8 <USBD_StdEPReq+0xd4>
 800eef2:	2b03      	cmp	r3, #3
 800eef4:	d015      	beq.n	800ef22 <USBD_StdEPReq+0xfe>
 800eef6:	e02d      	b.n	800ef54 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eef8:	7bbb      	ldrb	r3, [r7, #14]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d00c      	beq.n	800ef18 <USBD_StdEPReq+0xf4>
 800eefe:	7bbb      	ldrb	r3, [r7, #14]
 800ef00:	2b80      	cmp	r3, #128	; 0x80
 800ef02:	d009      	beq.n	800ef18 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ef04:	7bbb      	ldrb	r3, [r7, #14]
 800ef06:	4619      	mov	r1, r3
 800ef08:	6878      	ldr	r0, [r7, #4]
 800ef0a:	f001 f8c9 	bl	80100a0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ef0e:	2180      	movs	r1, #128	; 0x80
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	f001 f8c5 	bl	80100a0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ef16:	e023      	b.n	800ef60 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800ef18:	6839      	ldr	r1, [r7, #0]
 800ef1a:	6878      	ldr	r0, [r7, #4]
 800ef1c:	f000 fbfe 	bl	800f71c <USBD_CtlError>
        break;
 800ef20:	e01e      	b.n	800ef60 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	885b      	ldrh	r3, [r3, #2]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d119      	bne.n	800ef5e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800ef2a:	7bbb      	ldrb	r3, [r7, #14]
 800ef2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d004      	beq.n	800ef3e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ef34:	7bbb      	ldrb	r3, [r7, #14]
 800ef36:	4619      	mov	r1, r3
 800ef38:	6878      	ldr	r0, [r7, #4]
 800ef3a:	f001 f8d0 	bl	80100de <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	f000 fcb7 	bl	800f8b2 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef4a:	689b      	ldr	r3, [r3, #8]
 800ef4c:	6839      	ldr	r1, [r7, #0]
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	4798      	blx	r3
        }
        break;
 800ef52:	e004      	b.n	800ef5e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800ef54:	6839      	ldr	r1, [r7, #0]
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f000 fbe0 	bl	800f71c <USBD_CtlError>
        break;
 800ef5c:	e000      	b.n	800ef60 <USBD_StdEPReq+0x13c>
        break;
 800ef5e:	bf00      	nop
      }
      break;
 800ef60:	e0aa      	b.n	800f0b8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef68:	2b02      	cmp	r3, #2
 800ef6a:	d002      	beq.n	800ef72 <USBD_StdEPReq+0x14e>
 800ef6c:	2b03      	cmp	r3, #3
 800ef6e:	d032      	beq.n	800efd6 <USBD_StdEPReq+0x1b2>
 800ef70:	e097      	b.n	800f0a2 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ef72:	7bbb      	ldrb	r3, [r7, #14]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d007      	beq.n	800ef88 <USBD_StdEPReq+0x164>
 800ef78:	7bbb      	ldrb	r3, [r7, #14]
 800ef7a:	2b80      	cmp	r3, #128	; 0x80
 800ef7c:	d004      	beq.n	800ef88 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800ef7e:	6839      	ldr	r1, [r7, #0]
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	f000 fbcb 	bl	800f71c <USBD_CtlError>
          break;
 800ef86:	e091      	b.n	800f0ac <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	da0b      	bge.n	800efa8 <USBD_StdEPReq+0x184>
 800ef90:	7bbb      	ldrb	r3, [r7, #14]
 800ef92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ef96:	4613      	mov	r3, r2
 800ef98:	009b      	lsls	r3, r3, #2
 800ef9a:	4413      	add	r3, r2
 800ef9c:	009b      	lsls	r3, r3, #2
 800ef9e:	3310      	adds	r3, #16
 800efa0:	687a      	ldr	r2, [r7, #4]
 800efa2:	4413      	add	r3, r2
 800efa4:	3304      	adds	r3, #4
 800efa6:	e00b      	b.n	800efc0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800efa8:	7bbb      	ldrb	r3, [r7, #14]
 800efaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800efae:	4613      	mov	r3, r2
 800efb0:	009b      	lsls	r3, r3, #2
 800efb2:	4413      	add	r3, r2
 800efb4:	009b      	lsls	r3, r3, #2
 800efb6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800efba:	687a      	ldr	r2, [r7, #4]
 800efbc:	4413      	add	r3, r2
 800efbe:	3304      	adds	r3, #4
 800efc0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800efc2:	68bb      	ldr	r3, [r7, #8]
 800efc4:	2200      	movs	r2, #0
 800efc6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	2202      	movs	r2, #2
 800efcc:	4619      	mov	r1, r3
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	f000 fc15 	bl	800f7fe <USBD_CtlSendData>
        break;
 800efd4:	e06a      	b.n	800f0ac <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800efd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	da11      	bge.n	800f002 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800efde:	7bbb      	ldrb	r3, [r7, #14]
 800efe0:	f003 020f 	and.w	r2, r3, #15
 800efe4:	6879      	ldr	r1, [r7, #4]
 800efe6:	4613      	mov	r3, r2
 800efe8:	009b      	lsls	r3, r3, #2
 800efea:	4413      	add	r3, r2
 800efec:	009b      	lsls	r3, r3, #2
 800efee:	440b      	add	r3, r1
 800eff0:	3324      	adds	r3, #36	; 0x24
 800eff2:	881b      	ldrh	r3, [r3, #0]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d117      	bne.n	800f028 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800eff8:	6839      	ldr	r1, [r7, #0]
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f000 fb8e 	bl	800f71c <USBD_CtlError>
            break;
 800f000:	e054      	b.n	800f0ac <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f002:	7bbb      	ldrb	r3, [r7, #14]
 800f004:	f003 020f 	and.w	r2, r3, #15
 800f008:	6879      	ldr	r1, [r7, #4]
 800f00a:	4613      	mov	r3, r2
 800f00c:	009b      	lsls	r3, r3, #2
 800f00e:	4413      	add	r3, r2
 800f010:	009b      	lsls	r3, r3, #2
 800f012:	440b      	add	r3, r1
 800f014:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f018:	881b      	ldrh	r3, [r3, #0]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d104      	bne.n	800f028 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800f01e:	6839      	ldr	r1, [r7, #0]
 800f020:	6878      	ldr	r0, [r7, #4]
 800f022:	f000 fb7b 	bl	800f71c <USBD_CtlError>
            break;
 800f026:	e041      	b.n	800f0ac <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f028:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	da0b      	bge.n	800f048 <USBD_StdEPReq+0x224>
 800f030:	7bbb      	ldrb	r3, [r7, #14]
 800f032:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f036:	4613      	mov	r3, r2
 800f038:	009b      	lsls	r3, r3, #2
 800f03a:	4413      	add	r3, r2
 800f03c:	009b      	lsls	r3, r3, #2
 800f03e:	3310      	adds	r3, #16
 800f040:	687a      	ldr	r2, [r7, #4]
 800f042:	4413      	add	r3, r2
 800f044:	3304      	adds	r3, #4
 800f046:	e00b      	b.n	800f060 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800f048:	7bbb      	ldrb	r3, [r7, #14]
 800f04a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f04e:	4613      	mov	r3, r2
 800f050:	009b      	lsls	r3, r3, #2
 800f052:	4413      	add	r3, r2
 800f054:	009b      	lsls	r3, r3, #2
 800f056:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f05a:	687a      	ldr	r2, [r7, #4]
 800f05c:	4413      	add	r3, r2
 800f05e:	3304      	adds	r3, #4
 800f060:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f062:	7bbb      	ldrb	r3, [r7, #14]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d002      	beq.n	800f06e <USBD_StdEPReq+0x24a>
 800f068:	7bbb      	ldrb	r3, [r7, #14]
 800f06a:	2b80      	cmp	r3, #128	; 0x80
 800f06c:	d103      	bne.n	800f076 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	2200      	movs	r2, #0
 800f072:	601a      	str	r2, [r3, #0]
 800f074:	e00e      	b.n	800f094 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f076:	7bbb      	ldrb	r3, [r7, #14]
 800f078:	4619      	mov	r1, r3
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	f001 f84e 	bl	801011c <USBD_LL_IsStallEP>
 800f080:	4603      	mov	r3, r0
 800f082:	2b00      	cmp	r3, #0
 800f084:	d003      	beq.n	800f08e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800f086:	68bb      	ldr	r3, [r7, #8]
 800f088:	2201      	movs	r2, #1
 800f08a:	601a      	str	r2, [r3, #0]
 800f08c:	e002      	b.n	800f094 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800f08e:	68bb      	ldr	r3, [r7, #8]
 800f090:	2200      	movs	r2, #0
 800f092:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f094:	68bb      	ldr	r3, [r7, #8]
 800f096:	2202      	movs	r2, #2
 800f098:	4619      	mov	r1, r3
 800f09a:	6878      	ldr	r0, [r7, #4]
 800f09c:	f000 fbaf 	bl	800f7fe <USBD_CtlSendData>
          break;
 800f0a0:	e004      	b.n	800f0ac <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800f0a2:	6839      	ldr	r1, [r7, #0]
 800f0a4:	6878      	ldr	r0, [r7, #4]
 800f0a6:	f000 fb39 	bl	800f71c <USBD_CtlError>
        break;
 800f0aa:	bf00      	nop
      }
      break;
 800f0ac:	e004      	b.n	800f0b8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800f0ae:	6839      	ldr	r1, [r7, #0]
 800f0b0:	6878      	ldr	r0, [r7, #4]
 800f0b2:	f000 fb33 	bl	800f71c <USBD_CtlError>
      break;
 800f0b6:	bf00      	nop
    }
    break;
 800f0b8:	e004      	b.n	800f0c4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800f0ba:	6839      	ldr	r1, [r7, #0]
 800f0bc:	6878      	ldr	r0, [r7, #4]
 800f0be:	f000 fb2d 	bl	800f71c <USBD_CtlError>
    break;
 800f0c2:	bf00      	nop
  }

  return ret;
 800f0c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	3710      	adds	r7, #16
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}
	...

0800f0d0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b084      	sub	sp, #16
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
 800f0d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	885b      	ldrh	r3, [r3, #2]
 800f0ea:	0a1b      	lsrs	r3, r3, #8
 800f0ec:	b29b      	uxth	r3, r3
 800f0ee:	3b01      	subs	r3, #1
 800f0f0:	2b06      	cmp	r3, #6
 800f0f2:	f200 8128 	bhi.w	800f346 <USBD_GetDescriptor+0x276>
 800f0f6:	a201      	add	r2, pc, #4	; (adr r2, 800f0fc <USBD_GetDescriptor+0x2c>)
 800f0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0fc:	0800f119 	.word	0x0800f119
 800f100:	0800f131 	.word	0x0800f131
 800f104:	0800f171 	.word	0x0800f171
 800f108:	0800f347 	.word	0x0800f347
 800f10c:	0800f347 	.word	0x0800f347
 800f110:	0800f2e7 	.word	0x0800f2e7
 800f114:	0800f313 	.word	0x0800f313
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	687a      	ldr	r2, [r7, #4]
 800f122:	7c12      	ldrb	r2, [r2, #16]
 800f124:	f107 0108 	add.w	r1, r7, #8
 800f128:	4610      	mov	r0, r2
 800f12a:	4798      	blx	r3
 800f12c:	60f8      	str	r0, [r7, #12]
    break;
 800f12e:	e112      	b.n	800f356 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	7c1b      	ldrb	r3, [r3, #16]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d10d      	bne.n	800f154 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f13e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f140:	f107 0208 	add.w	r2, r7, #8
 800f144:	4610      	mov	r0, r2
 800f146:	4798      	blx	r3
 800f148:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	3301      	adds	r3, #1
 800f14e:	2202      	movs	r2, #2
 800f150:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800f152:	e100      	b.n	800f356 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f15c:	f107 0208 	add.w	r2, r7, #8
 800f160:	4610      	mov	r0, r2
 800f162:	4798      	blx	r3
 800f164:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	3301      	adds	r3, #1
 800f16a:	2202      	movs	r2, #2
 800f16c:	701a      	strb	r2, [r3, #0]
    break;
 800f16e:	e0f2      	b.n	800f356 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	885b      	ldrh	r3, [r3, #2]
 800f174:	b2db      	uxtb	r3, r3
 800f176:	2b05      	cmp	r3, #5
 800f178:	f200 80ac 	bhi.w	800f2d4 <USBD_GetDescriptor+0x204>
 800f17c:	a201      	add	r2, pc, #4	; (adr r2, 800f184 <USBD_GetDescriptor+0xb4>)
 800f17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f182:	bf00      	nop
 800f184:	0800f19d 	.word	0x0800f19d
 800f188:	0800f1d1 	.word	0x0800f1d1
 800f18c:	0800f205 	.word	0x0800f205
 800f190:	0800f239 	.word	0x0800f239
 800f194:	0800f26d 	.word	0x0800f26d
 800f198:	0800f2a1 	.word	0x0800f2a1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1a2:	685b      	ldr	r3, [r3, #4]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d00b      	beq.n	800f1c0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1ae:	685b      	ldr	r3, [r3, #4]
 800f1b0:	687a      	ldr	r2, [r7, #4]
 800f1b2:	7c12      	ldrb	r2, [r2, #16]
 800f1b4:	f107 0108 	add.w	r1, r7, #8
 800f1b8:	4610      	mov	r0, r2
 800f1ba:	4798      	blx	r3
 800f1bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f1be:	e091      	b.n	800f2e4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f1c0:	6839      	ldr	r1, [r7, #0]
 800f1c2:	6878      	ldr	r0, [r7, #4]
 800f1c4:	f000 faaa 	bl	800f71c <USBD_CtlError>
        err++;
 800f1c8:	7afb      	ldrb	r3, [r7, #11]
 800f1ca:	3301      	adds	r3, #1
 800f1cc:	72fb      	strb	r3, [r7, #11]
      break;
 800f1ce:	e089      	b.n	800f2e4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1d6:	689b      	ldr	r3, [r3, #8]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d00b      	beq.n	800f1f4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1e2:	689b      	ldr	r3, [r3, #8]
 800f1e4:	687a      	ldr	r2, [r7, #4]
 800f1e6:	7c12      	ldrb	r2, [r2, #16]
 800f1e8:	f107 0108 	add.w	r1, r7, #8
 800f1ec:	4610      	mov	r0, r2
 800f1ee:	4798      	blx	r3
 800f1f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f1f2:	e077      	b.n	800f2e4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f1f4:	6839      	ldr	r1, [r7, #0]
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f000 fa90 	bl	800f71c <USBD_CtlError>
        err++;
 800f1fc:	7afb      	ldrb	r3, [r7, #11]
 800f1fe:	3301      	adds	r3, #1
 800f200:	72fb      	strb	r3, [r7, #11]
      break;
 800f202:	e06f      	b.n	800f2e4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f20a:	68db      	ldr	r3, [r3, #12]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d00b      	beq.n	800f228 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f216:	68db      	ldr	r3, [r3, #12]
 800f218:	687a      	ldr	r2, [r7, #4]
 800f21a:	7c12      	ldrb	r2, [r2, #16]
 800f21c:	f107 0108 	add.w	r1, r7, #8
 800f220:	4610      	mov	r0, r2
 800f222:	4798      	blx	r3
 800f224:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f226:	e05d      	b.n	800f2e4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f228:	6839      	ldr	r1, [r7, #0]
 800f22a:	6878      	ldr	r0, [r7, #4]
 800f22c:	f000 fa76 	bl	800f71c <USBD_CtlError>
        err++;
 800f230:	7afb      	ldrb	r3, [r7, #11]
 800f232:	3301      	adds	r3, #1
 800f234:	72fb      	strb	r3, [r7, #11]
      break;
 800f236:	e055      	b.n	800f2e4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f23e:	691b      	ldr	r3, [r3, #16]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d00b      	beq.n	800f25c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f24a:	691b      	ldr	r3, [r3, #16]
 800f24c:	687a      	ldr	r2, [r7, #4]
 800f24e:	7c12      	ldrb	r2, [r2, #16]
 800f250:	f107 0108 	add.w	r1, r7, #8
 800f254:	4610      	mov	r0, r2
 800f256:	4798      	blx	r3
 800f258:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f25a:	e043      	b.n	800f2e4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f25c:	6839      	ldr	r1, [r7, #0]
 800f25e:	6878      	ldr	r0, [r7, #4]
 800f260:	f000 fa5c 	bl	800f71c <USBD_CtlError>
        err++;
 800f264:	7afb      	ldrb	r3, [r7, #11]
 800f266:	3301      	adds	r3, #1
 800f268:	72fb      	strb	r3, [r7, #11]
      break;
 800f26a:	e03b      	b.n	800f2e4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f272:	695b      	ldr	r3, [r3, #20]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d00b      	beq.n	800f290 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f27e:	695b      	ldr	r3, [r3, #20]
 800f280:	687a      	ldr	r2, [r7, #4]
 800f282:	7c12      	ldrb	r2, [r2, #16]
 800f284:	f107 0108 	add.w	r1, r7, #8
 800f288:	4610      	mov	r0, r2
 800f28a:	4798      	blx	r3
 800f28c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f28e:	e029      	b.n	800f2e4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f290:	6839      	ldr	r1, [r7, #0]
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f000 fa42 	bl	800f71c <USBD_CtlError>
        err++;
 800f298:	7afb      	ldrb	r3, [r7, #11]
 800f29a:	3301      	adds	r3, #1
 800f29c:	72fb      	strb	r3, [r7, #11]
      break;
 800f29e:	e021      	b.n	800f2e4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f2a6:	699b      	ldr	r3, [r3, #24]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d00b      	beq.n	800f2c4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f2b2:	699b      	ldr	r3, [r3, #24]
 800f2b4:	687a      	ldr	r2, [r7, #4]
 800f2b6:	7c12      	ldrb	r2, [r2, #16]
 800f2b8:	f107 0108 	add.w	r1, r7, #8
 800f2bc:	4610      	mov	r0, r2
 800f2be:	4798      	blx	r3
 800f2c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f2c2:	e00f      	b.n	800f2e4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f2c4:	6839      	ldr	r1, [r7, #0]
 800f2c6:	6878      	ldr	r0, [r7, #4]
 800f2c8:	f000 fa28 	bl	800f71c <USBD_CtlError>
        err++;
 800f2cc:	7afb      	ldrb	r3, [r7, #11]
 800f2ce:	3301      	adds	r3, #1
 800f2d0:	72fb      	strb	r3, [r7, #11]
      break;
 800f2d2:	e007      	b.n	800f2e4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800f2d4:	6839      	ldr	r1, [r7, #0]
 800f2d6:	6878      	ldr	r0, [r7, #4]
 800f2d8:	f000 fa20 	bl	800f71c <USBD_CtlError>
      err++;
 800f2dc:	7afb      	ldrb	r3, [r7, #11]
 800f2de:	3301      	adds	r3, #1
 800f2e0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800f2e2:	bf00      	nop
    }
    break;
 800f2e4:	e037      	b.n	800f356 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	7c1b      	ldrb	r3, [r3, #16]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d109      	bne.n	800f302 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2f6:	f107 0208 	add.w	r2, r7, #8
 800f2fa:	4610      	mov	r0, r2
 800f2fc:	4798      	blx	r3
 800f2fe:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f300:	e029      	b.n	800f356 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800f302:	6839      	ldr	r1, [r7, #0]
 800f304:	6878      	ldr	r0, [r7, #4]
 800f306:	f000 fa09 	bl	800f71c <USBD_CtlError>
      err++;
 800f30a:	7afb      	ldrb	r3, [r7, #11]
 800f30c:	3301      	adds	r3, #1
 800f30e:	72fb      	strb	r3, [r7, #11]
    break;
 800f310:	e021      	b.n	800f356 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	7c1b      	ldrb	r3, [r3, #16]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d10d      	bne.n	800f336 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f322:	f107 0208 	add.w	r2, r7, #8
 800f326:	4610      	mov	r0, r2
 800f328:	4798      	blx	r3
 800f32a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	3301      	adds	r3, #1
 800f330:	2207      	movs	r2, #7
 800f332:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f334:	e00f      	b.n	800f356 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800f336:	6839      	ldr	r1, [r7, #0]
 800f338:	6878      	ldr	r0, [r7, #4]
 800f33a:	f000 f9ef 	bl	800f71c <USBD_CtlError>
      err++;
 800f33e:	7afb      	ldrb	r3, [r7, #11]
 800f340:	3301      	adds	r3, #1
 800f342:	72fb      	strb	r3, [r7, #11]
    break;
 800f344:	e007      	b.n	800f356 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800f346:	6839      	ldr	r1, [r7, #0]
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	f000 f9e7 	bl	800f71c <USBD_CtlError>
    err++;
 800f34e:	7afb      	ldrb	r3, [r7, #11]
 800f350:	3301      	adds	r3, #1
 800f352:	72fb      	strb	r3, [r7, #11]
    break;
 800f354:	bf00      	nop
  }

  if (err != 0U)
 800f356:	7afb      	ldrb	r3, [r7, #11]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d11e      	bne.n	800f39a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	88db      	ldrh	r3, [r3, #6]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d016      	beq.n	800f392 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800f364:	893b      	ldrh	r3, [r7, #8]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d00e      	beq.n	800f388 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	88da      	ldrh	r2, [r3, #6]
 800f36e:	893b      	ldrh	r3, [r7, #8]
 800f370:	4293      	cmp	r3, r2
 800f372:	bf28      	it	cs
 800f374:	4613      	movcs	r3, r2
 800f376:	b29b      	uxth	r3, r3
 800f378:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800f37a:	893b      	ldrh	r3, [r7, #8]
 800f37c:	461a      	mov	r2, r3
 800f37e:	68f9      	ldr	r1, [r7, #12]
 800f380:	6878      	ldr	r0, [r7, #4]
 800f382:	f000 fa3c 	bl	800f7fe <USBD_CtlSendData>
 800f386:	e009      	b.n	800f39c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800f388:	6839      	ldr	r1, [r7, #0]
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f000 f9c6 	bl	800f71c <USBD_CtlError>
 800f390:	e004      	b.n	800f39c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	f000 fa8d 	bl	800f8b2 <USBD_CtlSendStatus>
 800f398:	e000      	b.n	800f39c <USBD_GetDescriptor+0x2cc>
    return;
 800f39a:	bf00      	nop
    }
  }
}
 800f39c:	3710      	adds	r7, #16
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bd80      	pop	{r7, pc}
 800f3a2:	bf00      	nop

0800f3a4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b084      	sub	sp, #16
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
 800f3ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	889b      	ldrh	r3, [r3, #4]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d130      	bne.n	800f418 <USBD_SetAddress+0x74>
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	88db      	ldrh	r3, [r3, #6]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d12c      	bne.n	800f418 <USBD_SetAddress+0x74>
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	885b      	ldrh	r3, [r3, #2]
 800f3c2:	2b7f      	cmp	r3, #127	; 0x7f
 800f3c4:	d828      	bhi.n	800f418 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	885b      	ldrh	r3, [r3, #2]
 800f3ca:	b2db      	uxtb	r3, r3
 800f3cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f3d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3d8:	2b03      	cmp	r3, #3
 800f3da:	d104      	bne.n	800f3e6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800f3dc:	6839      	ldr	r1, [r7, #0]
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f000 f99c 	bl	800f71c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3e4:	e01c      	b.n	800f420 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	7bfa      	ldrb	r2, [r7, #15]
 800f3ea:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f3ee:	7bfb      	ldrb	r3, [r7, #15]
 800f3f0:	4619      	mov	r1, r3
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f000 febe 	bl	8010174 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f3f8:	6878      	ldr	r0, [r7, #4]
 800f3fa:	f000 fa5a 	bl	800f8b2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f3fe:	7bfb      	ldrb	r3, [r7, #15]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d004      	beq.n	800f40e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2202      	movs	r2, #2
 800f408:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f40c:	e008      	b.n	800f420 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	2201      	movs	r2, #1
 800f412:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f416:	e003      	b.n	800f420 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f418:	6839      	ldr	r1, [r7, #0]
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f000 f97e 	bl	800f71c <USBD_CtlError>
  }
}
 800f420:	bf00      	nop
 800f422:	3710      	adds	r7, #16
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}

0800f428 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b084      	sub	sp, #16
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
 800f430:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f432:	2300      	movs	r3, #0
 800f434:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	885b      	ldrh	r3, [r3, #2]
 800f43a:	b2da      	uxtb	r2, r3
 800f43c:	4b4b      	ldr	r3, [pc, #300]	; (800f56c <USBD_SetConfig+0x144>)
 800f43e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f440:	4b4a      	ldr	r3, [pc, #296]	; (800f56c <USBD_SetConfig+0x144>)
 800f442:	781b      	ldrb	r3, [r3, #0]
 800f444:	2b01      	cmp	r3, #1
 800f446:	d905      	bls.n	800f454 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f448:	6839      	ldr	r1, [r7, #0]
 800f44a:	6878      	ldr	r0, [r7, #4]
 800f44c:	f000 f966 	bl	800f71c <USBD_CtlError>
    return USBD_FAIL;
 800f450:	2303      	movs	r3, #3
 800f452:	e087      	b.n	800f564 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f45a:	2b02      	cmp	r3, #2
 800f45c:	d002      	beq.n	800f464 <USBD_SetConfig+0x3c>
 800f45e:	2b03      	cmp	r3, #3
 800f460:	d025      	beq.n	800f4ae <USBD_SetConfig+0x86>
 800f462:	e071      	b.n	800f548 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800f464:	4b41      	ldr	r3, [pc, #260]	; (800f56c <USBD_SetConfig+0x144>)
 800f466:	781b      	ldrb	r3, [r3, #0]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d01c      	beq.n	800f4a6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800f46c:	4b3f      	ldr	r3, [pc, #252]	; (800f56c <USBD_SetConfig+0x144>)
 800f46e:	781b      	ldrb	r3, [r3, #0]
 800f470:	461a      	mov	r2, r3
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f476:	4b3d      	ldr	r3, [pc, #244]	; (800f56c <USBD_SetConfig+0x144>)
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	4619      	mov	r1, r3
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f7ff f9a7 	bl	800e7d0 <USBD_SetClassConfig>
 800f482:	4603      	mov	r3, r0
 800f484:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800f486:	7bfb      	ldrb	r3, [r7, #15]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d004      	beq.n	800f496 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800f48c:	6839      	ldr	r1, [r7, #0]
 800f48e:	6878      	ldr	r0, [r7, #4]
 800f490:	f000 f944 	bl	800f71c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f494:	e065      	b.n	800f562 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f000 fa0b 	bl	800f8b2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	2203      	movs	r2, #3
 800f4a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f4a4:	e05d      	b.n	800f562 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f000 fa03 	bl	800f8b2 <USBD_CtlSendStatus>
    break;
 800f4ac:	e059      	b.n	800f562 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800f4ae:	4b2f      	ldr	r3, [pc, #188]	; (800f56c <USBD_SetConfig+0x144>)
 800f4b0:	781b      	ldrb	r3, [r3, #0]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d112      	bne.n	800f4dc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	2202      	movs	r2, #2
 800f4ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800f4be:	4b2b      	ldr	r3, [pc, #172]	; (800f56c <USBD_SetConfig+0x144>)
 800f4c0:	781b      	ldrb	r3, [r3, #0]
 800f4c2:	461a      	mov	r2, r3
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f4c8:	4b28      	ldr	r3, [pc, #160]	; (800f56c <USBD_SetConfig+0x144>)
 800f4ca:	781b      	ldrb	r3, [r3, #0]
 800f4cc:	4619      	mov	r1, r3
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f7ff f99a 	bl	800e808 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800f4d4:	6878      	ldr	r0, [r7, #4]
 800f4d6:	f000 f9ec 	bl	800f8b2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f4da:	e042      	b.n	800f562 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800f4dc:	4b23      	ldr	r3, [pc, #140]	; (800f56c <USBD_SetConfig+0x144>)
 800f4de:	781b      	ldrb	r3, [r3, #0]
 800f4e0:	461a      	mov	r2, r3
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	685b      	ldr	r3, [r3, #4]
 800f4e6:	429a      	cmp	r2, r3
 800f4e8:	d02a      	beq.n	800f540 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	685b      	ldr	r3, [r3, #4]
 800f4ee:	b2db      	uxtb	r3, r3
 800f4f0:	4619      	mov	r1, r3
 800f4f2:	6878      	ldr	r0, [r7, #4]
 800f4f4:	f7ff f988 	bl	800e808 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800f4f8:	4b1c      	ldr	r3, [pc, #112]	; (800f56c <USBD_SetConfig+0x144>)
 800f4fa:	781b      	ldrb	r3, [r3, #0]
 800f4fc:	461a      	mov	r2, r3
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f502:	4b1a      	ldr	r3, [pc, #104]	; (800f56c <USBD_SetConfig+0x144>)
 800f504:	781b      	ldrb	r3, [r3, #0]
 800f506:	4619      	mov	r1, r3
 800f508:	6878      	ldr	r0, [r7, #4]
 800f50a:	f7ff f961 	bl	800e7d0 <USBD_SetClassConfig>
 800f50e:	4603      	mov	r3, r0
 800f510:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800f512:	7bfb      	ldrb	r3, [r7, #15]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d00f      	beq.n	800f538 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800f518:	6839      	ldr	r1, [r7, #0]
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f000 f8fe 	bl	800f71c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	685b      	ldr	r3, [r3, #4]
 800f524:	b2db      	uxtb	r3, r3
 800f526:	4619      	mov	r1, r3
 800f528:	6878      	ldr	r0, [r7, #4]
 800f52a:	f7ff f96d 	bl	800e808 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	2202      	movs	r2, #2
 800f532:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f536:	e014      	b.n	800f562 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f538:	6878      	ldr	r0, [r7, #4]
 800f53a:	f000 f9ba 	bl	800f8b2 <USBD_CtlSendStatus>
    break;
 800f53e:	e010      	b.n	800f562 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f540:	6878      	ldr	r0, [r7, #4]
 800f542:	f000 f9b6 	bl	800f8b2 <USBD_CtlSendStatus>
    break;
 800f546:	e00c      	b.n	800f562 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800f548:	6839      	ldr	r1, [r7, #0]
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	f000 f8e6 	bl	800f71c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f550:	4b06      	ldr	r3, [pc, #24]	; (800f56c <USBD_SetConfig+0x144>)
 800f552:	781b      	ldrb	r3, [r3, #0]
 800f554:	4619      	mov	r1, r3
 800f556:	6878      	ldr	r0, [r7, #4]
 800f558:	f7ff f956 	bl	800e808 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800f55c:	2303      	movs	r3, #3
 800f55e:	73fb      	strb	r3, [r7, #15]
    break;
 800f560:	bf00      	nop
  }

  return ret;
 800f562:	7bfb      	ldrb	r3, [r7, #15]
}
 800f564:	4618      	mov	r0, r3
 800f566:	3710      	adds	r7, #16
 800f568:	46bd      	mov	sp, r7
 800f56a:	bd80      	pop	{r7, pc}
 800f56c:	200002f2 	.word	0x200002f2

0800f570 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b082      	sub	sp, #8
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
 800f578:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f57a:	683b      	ldr	r3, [r7, #0]
 800f57c:	88db      	ldrh	r3, [r3, #6]
 800f57e:	2b01      	cmp	r3, #1
 800f580:	d004      	beq.n	800f58c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f582:	6839      	ldr	r1, [r7, #0]
 800f584:	6878      	ldr	r0, [r7, #4]
 800f586:	f000 f8c9 	bl	800f71c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800f58a:	e021      	b.n	800f5d0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f592:	2b01      	cmp	r3, #1
 800f594:	db17      	blt.n	800f5c6 <USBD_GetConfig+0x56>
 800f596:	2b02      	cmp	r3, #2
 800f598:	dd02      	ble.n	800f5a0 <USBD_GetConfig+0x30>
 800f59a:	2b03      	cmp	r3, #3
 800f59c:	d00b      	beq.n	800f5b6 <USBD_GetConfig+0x46>
 800f59e:	e012      	b.n	800f5c6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	3308      	adds	r3, #8
 800f5aa:	2201      	movs	r2, #1
 800f5ac:	4619      	mov	r1, r3
 800f5ae:	6878      	ldr	r0, [r7, #4]
 800f5b0:	f000 f925 	bl	800f7fe <USBD_CtlSendData>
      break;
 800f5b4:	e00c      	b.n	800f5d0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	3304      	adds	r3, #4
 800f5ba:	2201      	movs	r2, #1
 800f5bc:	4619      	mov	r1, r3
 800f5be:	6878      	ldr	r0, [r7, #4]
 800f5c0:	f000 f91d 	bl	800f7fe <USBD_CtlSendData>
      break;
 800f5c4:	e004      	b.n	800f5d0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800f5c6:	6839      	ldr	r1, [r7, #0]
 800f5c8:	6878      	ldr	r0, [r7, #4]
 800f5ca:	f000 f8a7 	bl	800f71c <USBD_CtlError>
      break;
 800f5ce:	bf00      	nop
}
 800f5d0:	bf00      	nop
 800f5d2:	3708      	adds	r7, #8
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}

0800f5d8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b082      	sub	sp, #8
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
 800f5e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f5e8:	3b01      	subs	r3, #1
 800f5ea:	2b02      	cmp	r3, #2
 800f5ec:	d81e      	bhi.n	800f62c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	88db      	ldrh	r3, [r3, #6]
 800f5f2:	2b02      	cmp	r3, #2
 800f5f4:	d004      	beq.n	800f600 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800f5f6:	6839      	ldr	r1, [r7, #0]
 800f5f8:	6878      	ldr	r0, [r7, #4]
 800f5fa:	f000 f88f 	bl	800f71c <USBD_CtlError>
      break;
 800f5fe:	e01a      	b.n	800f636 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2201      	movs	r2, #1
 800f604:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d005      	beq.n	800f61c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	68db      	ldr	r3, [r3, #12]
 800f614:	f043 0202 	orr.w	r2, r3, #2
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	330c      	adds	r3, #12
 800f620:	2202      	movs	r2, #2
 800f622:	4619      	mov	r1, r3
 800f624:	6878      	ldr	r0, [r7, #4]
 800f626:	f000 f8ea 	bl	800f7fe <USBD_CtlSendData>
    break;
 800f62a:	e004      	b.n	800f636 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800f62c:	6839      	ldr	r1, [r7, #0]
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	f000 f874 	bl	800f71c <USBD_CtlError>
    break;
 800f634:	bf00      	nop
  }
}
 800f636:	bf00      	nop
 800f638:	3708      	adds	r7, #8
 800f63a:	46bd      	mov	sp, r7
 800f63c:	bd80      	pop	{r7, pc}

0800f63e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f63e:	b580      	push	{r7, lr}
 800f640:	b082      	sub	sp, #8
 800f642:	af00      	add	r7, sp, #0
 800f644:	6078      	str	r0, [r7, #4]
 800f646:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	885b      	ldrh	r3, [r3, #2]
 800f64c:	2b01      	cmp	r3, #1
 800f64e:	d106      	bne.n	800f65e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2201      	movs	r2, #1
 800f654:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f658:	6878      	ldr	r0, [r7, #4]
 800f65a:	f000 f92a 	bl	800f8b2 <USBD_CtlSendStatus>
  }
}
 800f65e:	bf00      	nop
 800f660:	3708      	adds	r7, #8
 800f662:	46bd      	mov	sp, r7
 800f664:	bd80      	pop	{r7, pc}

0800f666 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f666:	b580      	push	{r7, lr}
 800f668:	b082      	sub	sp, #8
 800f66a:	af00      	add	r7, sp, #0
 800f66c:	6078      	str	r0, [r7, #4]
 800f66e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f676:	3b01      	subs	r3, #1
 800f678:	2b02      	cmp	r3, #2
 800f67a:	d80b      	bhi.n	800f694 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	885b      	ldrh	r3, [r3, #2]
 800f680:	2b01      	cmp	r3, #1
 800f682:	d10c      	bne.n	800f69e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	2200      	movs	r2, #0
 800f688:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f68c:	6878      	ldr	r0, [r7, #4]
 800f68e:	f000 f910 	bl	800f8b2 <USBD_CtlSendStatus>
      }
      break;
 800f692:	e004      	b.n	800f69e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800f694:	6839      	ldr	r1, [r7, #0]
 800f696:	6878      	ldr	r0, [r7, #4]
 800f698:	f000 f840 	bl	800f71c <USBD_CtlError>
      break;
 800f69c:	e000      	b.n	800f6a0 <USBD_ClrFeature+0x3a>
      break;
 800f69e:	bf00      	nop
  }
}
 800f6a0:	bf00      	nop
 800f6a2:	3708      	adds	r7, #8
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	bd80      	pop	{r7, pc}

0800f6a8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b084      	sub	sp, #16
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
 800f6b0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	781a      	ldrb	r2, [r3, #0]
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	3301      	adds	r3, #1
 800f6c2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	781a      	ldrb	r2, [r3, #0]
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	3301      	adds	r3, #1
 800f6d0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f6d2:	68f8      	ldr	r0, [r7, #12]
 800f6d4:	f7ff fad3 	bl	800ec7e <SWAPBYTE>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	461a      	mov	r2, r3
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	3301      	adds	r3, #1
 800f6e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	3301      	adds	r3, #1
 800f6ea:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f6ec:	68f8      	ldr	r0, [r7, #12]
 800f6ee:	f7ff fac6 	bl	800ec7e <SWAPBYTE>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	461a      	mov	r2, r3
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	3301      	adds	r3, #1
 800f6fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	3301      	adds	r3, #1
 800f704:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f706:	68f8      	ldr	r0, [r7, #12]
 800f708:	f7ff fab9 	bl	800ec7e <SWAPBYTE>
 800f70c:	4603      	mov	r3, r0
 800f70e:	461a      	mov	r2, r3
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	80da      	strh	r2, [r3, #6]
}
 800f714:	bf00      	nop
 800f716:	3710      	adds	r7, #16
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd80      	pop	{r7, pc}

0800f71c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b082      	sub	sp, #8
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
 800f724:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f726:	2180      	movs	r1, #128	; 0x80
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f000 fcb9 	bl	80100a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f72e:	2100      	movs	r1, #0
 800f730:	6878      	ldr	r0, [r7, #4]
 800f732:	f000 fcb5 	bl	80100a0 <USBD_LL_StallEP>
}
 800f736:	bf00      	nop
 800f738:	3708      	adds	r7, #8
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bd80      	pop	{r7, pc}

0800f73e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f73e:	b580      	push	{r7, lr}
 800f740:	b086      	sub	sp, #24
 800f742:	af00      	add	r7, sp, #0
 800f744:	60f8      	str	r0, [r7, #12]
 800f746:	60b9      	str	r1, [r7, #8]
 800f748:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f74a:	2300      	movs	r3, #0
 800f74c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d036      	beq.n	800f7c2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f758:	6938      	ldr	r0, [r7, #16]
 800f75a:	f000 f836 	bl	800f7ca <USBD_GetLen>
 800f75e:	4603      	mov	r3, r0
 800f760:	3301      	adds	r3, #1
 800f762:	b29b      	uxth	r3, r3
 800f764:	005b      	lsls	r3, r3, #1
 800f766:	b29a      	uxth	r2, r3
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f76c:	7dfb      	ldrb	r3, [r7, #23]
 800f76e:	68ba      	ldr	r2, [r7, #8]
 800f770:	4413      	add	r3, r2
 800f772:	687a      	ldr	r2, [r7, #4]
 800f774:	7812      	ldrb	r2, [r2, #0]
 800f776:	701a      	strb	r2, [r3, #0]
  idx++;
 800f778:	7dfb      	ldrb	r3, [r7, #23]
 800f77a:	3301      	adds	r3, #1
 800f77c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f77e:	7dfb      	ldrb	r3, [r7, #23]
 800f780:	68ba      	ldr	r2, [r7, #8]
 800f782:	4413      	add	r3, r2
 800f784:	2203      	movs	r2, #3
 800f786:	701a      	strb	r2, [r3, #0]
  idx++;
 800f788:	7dfb      	ldrb	r3, [r7, #23]
 800f78a:	3301      	adds	r3, #1
 800f78c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f78e:	e013      	b.n	800f7b8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f790:	7dfb      	ldrb	r3, [r7, #23]
 800f792:	68ba      	ldr	r2, [r7, #8]
 800f794:	4413      	add	r3, r2
 800f796:	693a      	ldr	r2, [r7, #16]
 800f798:	7812      	ldrb	r2, [r2, #0]
 800f79a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f79c:	693b      	ldr	r3, [r7, #16]
 800f79e:	3301      	adds	r3, #1
 800f7a0:	613b      	str	r3, [r7, #16]
    idx++;
 800f7a2:	7dfb      	ldrb	r3, [r7, #23]
 800f7a4:	3301      	adds	r3, #1
 800f7a6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f7a8:	7dfb      	ldrb	r3, [r7, #23]
 800f7aa:	68ba      	ldr	r2, [r7, #8]
 800f7ac:	4413      	add	r3, r2
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	701a      	strb	r2, [r3, #0]
    idx++;
 800f7b2:	7dfb      	ldrb	r3, [r7, #23]
 800f7b4:	3301      	adds	r3, #1
 800f7b6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f7b8:	693b      	ldr	r3, [r7, #16]
 800f7ba:	781b      	ldrb	r3, [r3, #0]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d1e7      	bne.n	800f790 <USBD_GetString+0x52>
 800f7c0:	e000      	b.n	800f7c4 <USBD_GetString+0x86>
    return;
 800f7c2:	bf00      	nop
  }
}
 800f7c4:	3718      	adds	r7, #24
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	bd80      	pop	{r7, pc}

0800f7ca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f7ca:	b480      	push	{r7}
 800f7cc:	b085      	sub	sp, #20
 800f7ce:	af00      	add	r7, sp, #0
 800f7d0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f7da:	e005      	b.n	800f7e8 <USBD_GetLen+0x1e>
  {
    len++;
 800f7dc:	7bfb      	ldrb	r3, [r7, #15]
 800f7de:	3301      	adds	r3, #1
 800f7e0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	3301      	adds	r3, #1
 800f7e6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	781b      	ldrb	r3, [r3, #0]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d1f5      	bne.n	800f7dc <USBD_GetLen+0x12>
  }

  return len;
 800f7f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	3714      	adds	r7, #20
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fc:	4770      	bx	lr

0800f7fe <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f7fe:	b580      	push	{r7, lr}
 800f800:	b084      	sub	sp, #16
 800f802:	af00      	add	r7, sp, #0
 800f804:	60f8      	str	r0, [r7, #12]
 800f806:	60b9      	str	r1, [r7, #8]
 800f808:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	2202      	movs	r2, #2
 800f80e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	687a      	ldr	r2, [r7, #4]
 800f816:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	687a      	ldr	r2, [r7, #4]
 800f81c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	68ba      	ldr	r2, [r7, #8]
 800f822:	2100      	movs	r1, #0
 800f824:	68f8      	ldr	r0, [r7, #12]
 800f826:	f000 fcc4 	bl	80101b2 <USBD_LL_Transmit>

  return USBD_OK;
 800f82a:	2300      	movs	r3, #0
}
 800f82c:	4618      	mov	r0, r3
 800f82e:	3710      	adds	r7, #16
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}

0800f834 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b084      	sub	sp, #16
 800f838:	af00      	add	r7, sp, #0
 800f83a:	60f8      	str	r0, [r7, #12]
 800f83c:	60b9      	str	r1, [r7, #8]
 800f83e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	68ba      	ldr	r2, [r7, #8]
 800f844:	2100      	movs	r1, #0
 800f846:	68f8      	ldr	r0, [r7, #12]
 800f848:	f000 fcb3 	bl	80101b2 <USBD_LL_Transmit>

  return USBD_OK;
 800f84c:	2300      	movs	r3, #0
}
 800f84e:	4618      	mov	r0, r3
 800f850:	3710      	adds	r7, #16
 800f852:	46bd      	mov	sp, r7
 800f854:	bd80      	pop	{r7, pc}

0800f856 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f856:	b580      	push	{r7, lr}
 800f858:	b084      	sub	sp, #16
 800f85a:	af00      	add	r7, sp, #0
 800f85c:	60f8      	str	r0, [r7, #12]
 800f85e:	60b9      	str	r1, [r7, #8]
 800f860:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	2203      	movs	r2, #3
 800f866:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	687a      	ldr	r2, [r7, #4]
 800f86e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	687a      	ldr	r2, [r7, #4]
 800f876:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	68ba      	ldr	r2, [r7, #8]
 800f87e:	2100      	movs	r1, #0
 800f880:	68f8      	ldr	r0, [r7, #12]
 800f882:	f000 fcb7 	bl	80101f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f886:	2300      	movs	r3, #0
}
 800f888:	4618      	mov	r0, r3
 800f88a:	3710      	adds	r7, #16
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd80      	pop	{r7, pc}

0800f890 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b084      	sub	sp, #16
 800f894:	af00      	add	r7, sp, #0
 800f896:	60f8      	str	r0, [r7, #12]
 800f898:	60b9      	str	r1, [r7, #8]
 800f89a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	68ba      	ldr	r2, [r7, #8]
 800f8a0:	2100      	movs	r1, #0
 800f8a2:	68f8      	ldr	r0, [r7, #12]
 800f8a4:	f000 fca6 	bl	80101f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f8a8:	2300      	movs	r3, #0
}
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	3710      	adds	r7, #16
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	bd80      	pop	{r7, pc}

0800f8b2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f8b2:	b580      	push	{r7, lr}
 800f8b4:	b082      	sub	sp, #8
 800f8b6:	af00      	add	r7, sp, #0
 800f8b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	2204      	movs	r2, #4
 800f8be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	2100      	movs	r1, #0
 800f8c8:	6878      	ldr	r0, [r7, #4]
 800f8ca:	f000 fc72 	bl	80101b2 <USBD_LL_Transmit>

  return USBD_OK;
 800f8ce:	2300      	movs	r3, #0
}
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	3708      	adds	r7, #8
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}

0800f8d8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b082      	sub	sp, #8
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	2205      	movs	r2, #5
 800f8e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	2100      	movs	r1, #0
 800f8ee:	6878      	ldr	r0, [r7, #4]
 800f8f0:	f000 fc80 	bl	80101f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f8f4:	2300      	movs	r3, #0
}
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	3708      	adds	r7, #8
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bd80      	pop	{r7, pc}
	...

0800f900 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f904:	2200      	movs	r2, #0
 800f906:	4912      	ldr	r1, [pc, #72]	; (800f950 <MX_USB_DEVICE_Init+0x50>)
 800f908:	4812      	ldr	r0, [pc, #72]	; (800f954 <MX_USB_DEVICE_Init+0x54>)
 800f90a:	f7fe fef3 	bl	800e6f4 <USBD_Init>
 800f90e:	4603      	mov	r3, r0
 800f910:	2b00      	cmp	r3, #0
 800f912:	d001      	beq.n	800f918 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f914:	f7f5 f9c2 	bl	8004c9c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f918:	490f      	ldr	r1, [pc, #60]	; (800f958 <MX_USB_DEVICE_Init+0x58>)
 800f91a:	480e      	ldr	r0, [pc, #56]	; (800f954 <MX_USB_DEVICE_Init+0x54>)
 800f91c:	f7fe ff20 	bl	800e760 <USBD_RegisterClass>
 800f920:	4603      	mov	r3, r0
 800f922:	2b00      	cmp	r3, #0
 800f924:	d001      	beq.n	800f92a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f926:	f7f5 f9b9 	bl	8004c9c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f92a:	490c      	ldr	r1, [pc, #48]	; (800f95c <MX_USB_DEVICE_Init+0x5c>)
 800f92c:	4809      	ldr	r0, [pc, #36]	; (800f954 <MX_USB_DEVICE_Init+0x54>)
 800f92e:	f7fe fe75 	bl	800e61c <USBD_CDC_RegisterInterface>
 800f932:	4603      	mov	r3, r0
 800f934:	2b00      	cmp	r3, #0
 800f936:	d001      	beq.n	800f93c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f938:	f7f5 f9b0 	bl	8004c9c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f93c:	4805      	ldr	r0, [pc, #20]	; (800f954 <MX_USB_DEVICE_Init+0x54>)
 800f93e:	f7fe ff30 	bl	800e7a2 <USBD_Start>
 800f942:	4603      	mov	r3, r0
 800f944:	2b00      	cmp	r3, #0
 800f946:	d001      	beq.n	800f94c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f948:	f7f5 f9a8 	bl	8004c9c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f94c:	bf00      	nop
 800f94e:	bd80      	pop	{r7, pc}
 800f950:	20000174 	.word	0x20000174
 800f954:	20002c8c 	.word	0x20002c8c
 800f958:	2000005c 	.word	0x2000005c
 800f95c:	20000160 	.word	0x20000160

0800f960 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f964:	2200      	movs	r2, #0
 800f966:	4905      	ldr	r1, [pc, #20]	; (800f97c <CDC_Init_FS+0x1c>)
 800f968:	4805      	ldr	r0, [pc, #20]	; (800f980 <CDC_Init_FS+0x20>)
 800f96a:	f7fe fe6c 	bl	800e646 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f96e:	4905      	ldr	r1, [pc, #20]	; (800f984 <CDC_Init_FS+0x24>)
 800f970:	4803      	ldr	r0, [pc, #12]	; (800f980 <CDC_Init_FS+0x20>)
 800f972:	f7fe fe81 	bl	800e678 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f976:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f978:	4618      	mov	r0, r3
 800f97a:	bd80      	pop	{r7, pc}
 800f97c:	2000375c 	.word	0x2000375c
 800f980:	20002c8c 	.word	0x20002c8c
 800f984:	20002f5c 	.word	0x20002f5c

0800f988 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f988:	b480      	push	{r7}
 800f98a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f98c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f98e:	4618      	mov	r0, r3
 800f990:	46bd      	mov	sp, r7
 800f992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f996:	4770      	bx	lr

0800f998 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f998:	b480      	push	{r7}
 800f99a:	b083      	sub	sp, #12
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	4603      	mov	r3, r0
 800f9a0:	6039      	str	r1, [r7, #0]
 800f9a2:	71fb      	strb	r3, [r7, #7]
 800f9a4:	4613      	mov	r3, r2
 800f9a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f9a8:	79fb      	ldrb	r3, [r7, #7]
 800f9aa:	2b23      	cmp	r3, #35	; 0x23
 800f9ac:	d84a      	bhi.n	800fa44 <CDC_Control_FS+0xac>
 800f9ae:	a201      	add	r2, pc, #4	; (adr r2, 800f9b4 <CDC_Control_FS+0x1c>)
 800f9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9b4:	0800fa45 	.word	0x0800fa45
 800f9b8:	0800fa45 	.word	0x0800fa45
 800f9bc:	0800fa45 	.word	0x0800fa45
 800f9c0:	0800fa45 	.word	0x0800fa45
 800f9c4:	0800fa45 	.word	0x0800fa45
 800f9c8:	0800fa45 	.word	0x0800fa45
 800f9cc:	0800fa45 	.word	0x0800fa45
 800f9d0:	0800fa45 	.word	0x0800fa45
 800f9d4:	0800fa45 	.word	0x0800fa45
 800f9d8:	0800fa45 	.word	0x0800fa45
 800f9dc:	0800fa45 	.word	0x0800fa45
 800f9e0:	0800fa45 	.word	0x0800fa45
 800f9e4:	0800fa45 	.word	0x0800fa45
 800f9e8:	0800fa45 	.word	0x0800fa45
 800f9ec:	0800fa45 	.word	0x0800fa45
 800f9f0:	0800fa45 	.word	0x0800fa45
 800f9f4:	0800fa45 	.word	0x0800fa45
 800f9f8:	0800fa45 	.word	0x0800fa45
 800f9fc:	0800fa45 	.word	0x0800fa45
 800fa00:	0800fa45 	.word	0x0800fa45
 800fa04:	0800fa45 	.word	0x0800fa45
 800fa08:	0800fa45 	.word	0x0800fa45
 800fa0c:	0800fa45 	.word	0x0800fa45
 800fa10:	0800fa45 	.word	0x0800fa45
 800fa14:	0800fa45 	.word	0x0800fa45
 800fa18:	0800fa45 	.word	0x0800fa45
 800fa1c:	0800fa45 	.word	0x0800fa45
 800fa20:	0800fa45 	.word	0x0800fa45
 800fa24:	0800fa45 	.word	0x0800fa45
 800fa28:	0800fa45 	.word	0x0800fa45
 800fa2c:	0800fa45 	.word	0x0800fa45
 800fa30:	0800fa45 	.word	0x0800fa45
 800fa34:	0800fa45 	.word	0x0800fa45
 800fa38:	0800fa45 	.word	0x0800fa45
 800fa3c:	0800fa45 	.word	0x0800fa45
 800fa40:	0800fa45 	.word	0x0800fa45
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fa44:	bf00      	nop
  }

  return (USBD_OK);
 800fa46:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fa48:	4618      	mov	r0, r3
 800fa4a:	370c      	adds	r7, #12
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa52:	4770      	bx	lr

0800fa54 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b082      	sub	sp, #8
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
 800fa5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fa5e:	6879      	ldr	r1, [r7, #4]
 800fa60:	4805      	ldr	r0, [pc, #20]	; (800fa78 <CDC_Receive_FS+0x24>)
 800fa62:	f7fe fe09 	bl	800e678 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fa66:	4804      	ldr	r0, [pc, #16]	; (800fa78 <CDC_Receive_FS+0x24>)
 800fa68:	f7fe fe1a 	bl	800e6a0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fa6c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fa6e:	4618      	mov	r0, r3
 800fa70:	3708      	adds	r7, #8
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}
 800fa76:	bf00      	nop
 800fa78:	20002c8c 	.word	0x20002c8c

0800fa7c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fa7c:	b480      	push	{r7}
 800fa7e:	b087      	sub	sp, #28
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	60f8      	str	r0, [r7, #12]
 800fa84:	60b9      	str	r1, [r7, #8]
 800fa86:	4613      	mov	r3, r2
 800fa88:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fa8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fa92:	4618      	mov	r0, r3
 800fa94:	371c      	adds	r7, #28
 800fa96:	46bd      	mov	sp, r7
 800fa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9c:	4770      	bx	lr
	...

0800faa0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800faa0:	b480      	push	{r7}
 800faa2:	b083      	sub	sp, #12
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	4603      	mov	r3, r0
 800faa8:	6039      	str	r1, [r7, #0]
 800faaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800faac:	683b      	ldr	r3, [r7, #0]
 800faae:	2212      	movs	r2, #18
 800fab0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fab2:	4b03      	ldr	r3, [pc, #12]	; (800fac0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800fab4:	4618      	mov	r0, r3
 800fab6:	370c      	adds	r7, #12
 800fab8:	46bd      	mov	sp, r7
 800faba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabe:	4770      	bx	lr
 800fac0:	20000190 	.word	0x20000190

0800fac4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fac4:	b480      	push	{r7}
 800fac6:	b083      	sub	sp, #12
 800fac8:	af00      	add	r7, sp, #0
 800faca:	4603      	mov	r3, r0
 800facc:	6039      	str	r1, [r7, #0]
 800face:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	2204      	movs	r2, #4
 800fad4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fad6:	4b03      	ldr	r3, [pc, #12]	; (800fae4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fad8:	4618      	mov	r0, r3
 800fada:	370c      	adds	r7, #12
 800fadc:	46bd      	mov	sp, r7
 800fade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae2:	4770      	bx	lr
 800fae4:	200001a4 	.word	0x200001a4

0800fae8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b082      	sub	sp, #8
 800faec:	af00      	add	r7, sp, #0
 800faee:	4603      	mov	r3, r0
 800faf0:	6039      	str	r1, [r7, #0]
 800faf2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800faf4:	79fb      	ldrb	r3, [r7, #7]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d105      	bne.n	800fb06 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fafa:	683a      	ldr	r2, [r7, #0]
 800fafc:	4907      	ldr	r1, [pc, #28]	; (800fb1c <USBD_FS_ProductStrDescriptor+0x34>)
 800fafe:	4808      	ldr	r0, [pc, #32]	; (800fb20 <USBD_FS_ProductStrDescriptor+0x38>)
 800fb00:	f7ff fe1d 	bl	800f73e <USBD_GetString>
 800fb04:	e004      	b.n	800fb10 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fb06:	683a      	ldr	r2, [r7, #0]
 800fb08:	4904      	ldr	r1, [pc, #16]	; (800fb1c <USBD_FS_ProductStrDescriptor+0x34>)
 800fb0a:	4805      	ldr	r0, [pc, #20]	; (800fb20 <USBD_FS_ProductStrDescriptor+0x38>)
 800fb0c:	f7ff fe17 	bl	800f73e <USBD_GetString>
  }
  return USBD_StrDesc;
 800fb10:	4b02      	ldr	r3, [pc, #8]	; (800fb1c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fb12:	4618      	mov	r0, r3
 800fb14:	3708      	adds	r7, #8
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}
 800fb1a:	bf00      	nop
 800fb1c:	20003f5c 	.word	0x20003f5c
 800fb20:	08013548 	.word	0x08013548

0800fb24 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b082      	sub	sp, #8
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	6039      	str	r1, [r7, #0]
 800fb2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fb30:	683a      	ldr	r2, [r7, #0]
 800fb32:	4904      	ldr	r1, [pc, #16]	; (800fb44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fb34:	4804      	ldr	r0, [pc, #16]	; (800fb48 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fb36:	f7ff fe02 	bl	800f73e <USBD_GetString>
  return USBD_StrDesc;
 800fb3a:	4b02      	ldr	r3, [pc, #8]	; (800fb44 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	3708      	adds	r7, #8
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}
 800fb44:	20003f5c 	.word	0x20003f5c
 800fb48:	08013560 	.word	0x08013560

0800fb4c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b082      	sub	sp, #8
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	4603      	mov	r3, r0
 800fb54:	6039      	str	r1, [r7, #0]
 800fb56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fb58:	683b      	ldr	r3, [r7, #0]
 800fb5a:	221a      	movs	r2, #26
 800fb5c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fb5e:	f000 f843 	bl	800fbe8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fb62:	4b02      	ldr	r3, [pc, #8]	; (800fb6c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fb64:	4618      	mov	r0, r3
 800fb66:	3708      	adds	r7, #8
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd80      	pop	{r7, pc}
 800fb6c:	200001a8 	.word	0x200001a8

0800fb70 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b082      	sub	sp, #8
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	4603      	mov	r3, r0
 800fb78:	6039      	str	r1, [r7, #0]
 800fb7a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fb7c:	79fb      	ldrb	r3, [r7, #7]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d105      	bne.n	800fb8e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fb82:	683a      	ldr	r2, [r7, #0]
 800fb84:	4907      	ldr	r1, [pc, #28]	; (800fba4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fb86:	4808      	ldr	r0, [pc, #32]	; (800fba8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fb88:	f7ff fdd9 	bl	800f73e <USBD_GetString>
 800fb8c:	e004      	b.n	800fb98 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fb8e:	683a      	ldr	r2, [r7, #0]
 800fb90:	4904      	ldr	r1, [pc, #16]	; (800fba4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fb92:	4805      	ldr	r0, [pc, #20]	; (800fba8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fb94:	f7ff fdd3 	bl	800f73e <USBD_GetString>
  }
  return USBD_StrDesc;
 800fb98:	4b02      	ldr	r3, [pc, #8]	; (800fba4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	3708      	adds	r7, #8
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}
 800fba2:	bf00      	nop
 800fba4:	20003f5c 	.word	0x20003f5c
 800fba8:	08013574 	.word	0x08013574

0800fbac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b082      	sub	sp, #8
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	6039      	str	r1, [r7, #0]
 800fbb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fbb8:	79fb      	ldrb	r3, [r7, #7]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d105      	bne.n	800fbca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fbbe:	683a      	ldr	r2, [r7, #0]
 800fbc0:	4907      	ldr	r1, [pc, #28]	; (800fbe0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fbc2:	4808      	ldr	r0, [pc, #32]	; (800fbe4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fbc4:	f7ff fdbb 	bl	800f73e <USBD_GetString>
 800fbc8:	e004      	b.n	800fbd4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fbca:	683a      	ldr	r2, [r7, #0]
 800fbcc:	4904      	ldr	r1, [pc, #16]	; (800fbe0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fbce:	4805      	ldr	r0, [pc, #20]	; (800fbe4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fbd0:	f7ff fdb5 	bl	800f73e <USBD_GetString>
  }
  return USBD_StrDesc;
 800fbd4:	4b02      	ldr	r3, [pc, #8]	; (800fbe0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	3708      	adds	r7, #8
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd80      	pop	{r7, pc}
 800fbde:	bf00      	nop
 800fbe0:	20003f5c 	.word	0x20003f5c
 800fbe4:	08013580 	.word	0x08013580

0800fbe8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b084      	sub	sp, #16
 800fbec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fbee:	4b0f      	ldr	r3, [pc, #60]	; (800fc2c <Get_SerialNum+0x44>)
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fbf4:	4b0e      	ldr	r3, [pc, #56]	; (800fc30 <Get_SerialNum+0x48>)
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fbfa:	4b0e      	ldr	r3, [pc, #56]	; (800fc34 <Get_SerialNum+0x4c>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fc00:	68fa      	ldr	r2, [r7, #12]
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	4413      	add	r3, r2
 800fc06:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d009      	beq.n	800fc22 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fc0e:	2208      	movs	r2, #8
 800fc10:	4909      	ldr	r1, [pc, #36]	; (800fc38 <Get_SerialNum+0x50>)
 800fc12:	68f8      	ldr	r0, [r7, #12]
 800fc14:	f000 f814 	bl	800fc40 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fc18:	2204      	movs	r2, #4
 800fc1a:	4908      	ldr	r1, [pc, #32]	; (800fc3c <Get_SerialNum+0x54>)
 800fc1c:	68b8      	ldr	r0, [r7, #8]
 800fc1e:	f000 f80f 	bl	800fc40 <IntToUnicode>
  }
}
 800fc22:	bf00      	nop
 800fc24:	3710      	adds	r7, #16
 800fc26:	46bd      	mov	sp, r7
 800fc28:	bd80      	pop	{r7, pc}
 800fc2a:	bf00      	nop
 800fc2c:	1fff7a10 	.word	0x1fff7a10
 800fc30:	1fff7a14 	.word	0x1fff7a14
 800fc34:	1fff7a18 	.word	0x1fff7a18
 800fc38:	200001aa 	.word	0x200001aa
 800fc3c:	200001ba 	.word	0x200001ba

0800fc40 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fc40:	b480      	push	{r7}
 800fc42:	b087      	sub	sp, #28
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	60f8      	str	r0, [r7, #12]
 800fc48:	60b9      	str	r1, [r7, #8]
 800fc4a:	4613      	mov	r3, r2
 800fc4c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fc4e:	2300      	movs	r3, #0
 800fc50:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fc52:	2300      	movs	r3, #0
 800fc54:	75fb      	strb	r3, [r7, #23]
 800fc56:	e027      	b.n	800fca8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	0f1b      	lsrs	r3, r3, #28
 800fc5c:	2b09      	cmp	r3, #9
 800fc5e:	d80b      	bhi.n	800fc78 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	0f1b      	lsrs	r3, r3, #28
 800fc64:	b2da      	uxtb	r2, r3
 800fc66:	7dfb      	ldrb	r3, [r7, #23]
 800fc68:	005b      	lsls	r3, r3, #1
 800fc6a:	4619      	mov	r1, r3
 800fc6c:	68bb      	ldr	r3, [r7, #8]
 800fc6e:	440b      	add	r3, r1
 800fc70:	3230      	adds	r2, #48	; 0x30
 800fc72:	b2d2      	uxtb	r2, r2
 800fc74:	701a      	strb	r2, [r3, #0]
 800fc76:	e00a      	b.n	800fc8e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	0f1b      	lsrs	r3, r3, #28
 800fc7c:	b2da      	uxtb	r2, r3
 800fc7e:	7dfb      	ldrb	r3, [r7, #23]
 800fc80:	005b      	lsls	r3, r3, #1
 800fc82:	4619      	mov	r1, r3
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	440b      	add	r3, r1
 800fc88:	3237      	adds	r2, #55	; 0x37
 800fc8a:	b2d2      	uxtb	r2, r2
 800fc8c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	011b      	lsls	r3, r3, #4
 800fc92:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fc94:	7dfb      	ldrb	r3, [r7, #23]
 800fc96:	005b      	lsls	r3, r3, #1
 800fc98:	3301      	adds	r3, #1
 800fc9a:	68ba      	ldr	r2, [r7, #8]
 800fc9c:	4413      	add	r3, r2
 800fc9e:	2200      	movs	r2, #0
 800fca0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fca2:	7dfb      	ldrb	r3, [r7, #23]
 800fca4:	3301      	adds	r3, #1
 800fca6:	75fb      	strb	r3, [r7, #23]
 800fca8:	7dfa      	ldrb	r2, [r7, #23]
 800fcaa:	79fb      	ldrb	r3, [r7, #7]
 800fcac:	429a      	cmp	r2, r3
 800fcae:	d3d3      	bcc.n	800fc58 <IntToUnicode+0x18>
  }
}
 800fcb0:	bf00      	nop
 800fcb2:	371c      	adds	r7, #28
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcba:	4770      	bx	lr

0800fcbc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b08a      	sub	sp, #40	; 0x28
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fcc4:	f107 0314 	add.w	r3, r7, #20
 800fcc8:	2200      	movs	r2, #0
 800fcca:	601a      	str	r2, [r3, #0]
 800fccc:	605a      	str	r2, [r3, #4]
 800fcce:	609a      	str	r2, [r3, #8]
 800fcd0:	60da      	str	r2, [r3, #12]
 800fcd2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fcdc:	d13a      	bne.n	800fd54 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fcde:	2300      	movs	r3, #0
 800fce0:	613b      	str	r3, [r7, #16]
 800fce2:	4b1e      	ldr	r3, [pc, #120]	; (800fd5c <HAL_PCD_MspInit+0xa0>)
 800fce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fce6:	4a1d      	ldr	r2, [pc, #116]	; (800fd5c <HAL_PCD_MspInit+0xa0>)
 800fce8:	f043 0301 	orr.w	r3, r3, #1
 800fcec:	6313      	str	r3, [r2, #48]	; 0x30
 800fcee:	4b1b      	ldr	r3, [pc, #108]	; (800fd5c <HAL_PCD_MspInit+0xa0>)
 800fcf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcf2:	f003 0301 	and.w	r3, r3, #1
 800fcf6:	613b      	str	r3, [r7, #16]
 800fcf8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fcfa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fcfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fd00:	2302      	movs	r3, #2
 800fd02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fd04:	2300      	movs	r3, #0
 800fd06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fd08:	2303      	movs	r3, #3
 800fd0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fd0c:	230a      	movs	r3, #10
 800fd0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fd10:	f107 0314 	add.w	r3, r7, #20
 800fd14:	4619      	mov	r1, r3
 800fd16:	4812      	ldr	r0, [pc, #72]	; (800fd60 <HAL_PCD_MspInit+0xa4>)
 800fd18:	f7f6 fe58 	bl	80069cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fd1c:	4b0f      	ldr	r3, [pc, #60]	; (800fd5c <HAL_PCD_MspInit+0xa0>)
 800fd1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd20:	4a0e      	ldr	r2, [pc, #56]	; (800fd5c <HAL_PCD_MspInit+0xa0>)
 800fd22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd26:	6353      	str	r3, [r2, #52]	; 0x34
 800fd28:	2300      	movs	r3, #0
 800fd2a:	60fb      	str	r3, [r7, #12]
 800fd2c:	4b0b      	ldr	r3, [pc, #44]	; (800fd5c <HAL_PCD_MspInit+0xa0>)
 800fd2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd30:	4a0a      	ldr	r2, [pc, #40]	; (800fd5c <HAL_PCD_MspInit+0xa0>)
 800fd32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fd36:	6453      	str	r3, [r2, #68]	; 0x44
 800fd38:	4b08      	ldr	r3, [pc, #32]	; (800fd5c <HAL_PCD_MspInit+0xa0>)
 800fd3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fd40:	60fb      	str	r3, [r7, #12]
 800fd42:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800fd44:	2200      	movs	r2, #0
 800fd46:	2100      	movs	r1, #0
 800fd48:	2043      	movs	r0, #67	; 0x43
 800fd4a:	f7f6 faf0 	bl	800632e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fd4e:	2043      	movs	r0, #67	; 0x43
 800fd50:	f7f6 fb09 	bl	8006366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fd54:	bf00      	nop
 800fd56:	3728      	adds	r7, #40	; 0x28
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bd80      	pop	{r7, pc}
 800fd5c:	40023800 	.word	0x40023800
 800fd60:	40020000 	.word	0x40020000

0800fd64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b082      	sub	sp, #8
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800fd78:	4619      	mov	r1, r3
 800fd7a:	4610      	mov	r0, r2
 800fd7c:	f7fe fd5c 	bl	800e838 <USBD_LL_SetupStage>
}
 800fd80:	bf00      	nop
 800fd82:	3708      	adds	r7, #8
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}

0800fd88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b082      	sub	sp, #8
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
 800fd90:	460b      	mov	r3, r1
 800fd92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800fd9a:	78fa      	ldrb	r2, [r7, #3]
 800fd9c:	6879      	ldr	r1, [r7, #4]
 800fd9e:	4613      	mov	r3, r2
 800fda0:	00db      	lsls	r3, r3, #3
 800fda2:	1a9b      	subs	r3, r3, r2
 800fda4:	009b      	lsls	r3, r3, #2
 800fda6:	440b      	add	r3, r1
 800fda8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fdac:	681a      	ldr	r2, [r3, #0]
 800fdae:	78fb      	ldrb	r3, [r7, #3]
 800fdb0:	4619      	mov	r1, r3
 800fdb2:	f7fe fd94 	bl	800e8de <USBD_LL_DataOutStage>
}
 800fdb6:	bf00      	nop
 800fdb8:	3708      	adds	r7, #8
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}

0800fdbe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdbe:	b580      	push	{r7, lr}
 800fdc0:	b082      	sub	sp, #8
 800fdc2:	af00      	add	r7, sp, #0
 800fdc4:	6078      	str	r0, [r7, #4]
 800fdc6:	460b      	mov	r3, r1
 800fdc8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800fdd0:	78fa      	ldrb	r2, [r7, #3]
 800fdd2:	6879      	ldr	r1, [r7, #4]
 800fdd4:	4613      	mov	r3, r2
 800fdd6:	00db      	lsls	r3, r3, #3
 800fdd8:	1a9b      	subs	r3, r3, r2
 800fdda:	009b      	lsls	r3, r3, #2
 800fddc:	440b      	add	r3, r1
 800fdde:	3348      	adds	r3, #72	; 0x48
 800fde0:	681a      	ldr	r2, [r3, #0]
 800fde2:	78fb      	ldrb	r3, [r7, #3]
 800fde4:	4619      	mov	r1, r3
 800fde6:	f7fe fddd 	bl	800e9a4 <USBD_LL_DataInStage>
}
 800fdea:	bf00      	nop
 800fdec:	3708      	adds	r7, #8
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	bd80      	pop	{r7, pc}

0800fdf2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdf2:	b580      	push	{r7, lr}
 800fdf4:	b082      	sub	sp, #8
 800fdf6:	af00      	add	r7, sp, #0
 800fdf8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fe00:	4618      	mov	r0, r3
 800fe02:	f7fe fee1 	bl	800ebc8 <USBD_LL_SOF>
}
 800fe06:	bf00      	nop
 800fe08:	3708      	adds	r7, #8
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd80      	pop	{r7, pc}

0800fe0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe0e:	b580      	push	{r7, lr}
 800fe10:	b084      	sub	sp, #16
 800fe12:	af00      	add	r7, sp, #0
 800fe14:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fe16:	2301      	movs	r3, #1
 800fe18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	68db      	ldr	r3, [r3, #12]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d102      	bne.n	800fe28 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800fe22:	2300      	movs	r3, #0
 800fe24:	73fb      	strb	r3, [r7, #15]
 800fe26:	e008      	b.n	800fe3a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	68db      	ldr	r3, [r3, #12]
 800fe2c:	2b02      	cmp	r3, #2
 800fe2e:	d102      	bne.n	800fe36 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fe30:	2301      	movs	r3, #1
 800fe32:	73fb      	strb	r3, [r7, #15]
 800fe34:	e001      	b.n	800fe3a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fe36:	f7f4 ff31 	bl	8004c9c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fe40:	7bfa      	ldrb	r2, [r7, #15]
 800fe42:	4611      	mov	r1, r2
 800fe44:	4618      	mov	r0, r3
 800fe46:	f7fe fe84 	bl	800eb52 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fe50:	4618      	mov	r0, r3
 800fe52:	f7fe fe3d 	bl	800ead0 <USBD_LL_Reset>
}
 800fe56:	bf00      	nop
 800fe58:	3710      	adds	r7, #16
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}
	...

0800fe60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b082      	sub	sp, #8
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f7fe fe7f 	bl	800eb72 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	687a      	ldr	r2, [r7, #4]
 800fe80:	6812      	ldr	r2, [r2, #0]
 800fe82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fe86:	f043 0301 	orr.w	r3, r3, #1
 800fe8a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	6a1b      	ldr	r3, [r3, #32]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d005      	beq.n	800fea0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fe94:	4b04      	ldr	r3, [pc, #16]	; (800fea8 <HAL_PCD_SuspendCallback+0x48>)
 800fe96:	691b      	ldr	r3, [r3, #16]
 800fe98:	4a03      	ldr	r2, [pc, #12]	; (800fea8 <HAL_PCD_SuspendCallback+0x48>)
 800fe9a:	f043 0306 	orr.w	r3, r3, #6
 800fe9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fea0:	bf00      	nop
 800fea2:	3708      	adds	r7, #8
 800fea4:	46bd      	mov	sp, r7
 800fea6:	bd80      	pop	{r7, pc}
 800fea8:	e000ed00 	.word	0xe000ed00

0800feac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b082      	sub	sp, #8
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800feba:	4618      	mov	r0, r3
 800febc:	f7fe fe6e 	bl	800eb9c <USBD_LL_Resume>
}
 800fec0:	bf00      	nop
 800fec2:	3708      	adds	r7, #8
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}

0800fec8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b082      	sub	sp, #8
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
 800fed0:	460b      	mov	r3, r1
 800fed2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800feda:	78fa      	ldrb	r2, [r7, #3]
 800fedc:	4611      	mov	r1, r2
 800fede:	4618      	mov	r0, r3
 800fee0:	f7fe fe99 	bl	800ec16 <USBD_LL_IsoOUTIncomplete>
}
 800fee4:	bf00      	nop
 800fee6:	3708      	adds	r7, #8
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}

0800feec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b082      	sub	sp, #8
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
 800fef4:	460b      	mov	r3, r1
 800fef6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fefe:	78fa      	ldrb	r2, [r7, #3]
 800ff00:	4611      	mov	r1, r2
 800ff02:	4618      	mov	r0, r3
 800ff04:	f7fe fe7a 	bl	800ebfc <USBD_LL_IsoINIncomplete>
}
 800ff08:	bf00      	nop
 800ff0a:	3708      	adds	r7, #8
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	bd80      	pop	{r7, pc}

0800ff10 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b082      	sub	sp, #8
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f7fe fe86 	bl	800ec30 <USBD_LL_DevConnected>
}
 800ff24:	bf00      	nop
 800ff26:	3708      	adds	r7, #8
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd80      	pop	{r7, pc}

0800ff2c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b082      	sub	sp, #8
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f7fe fe83 	bl	800ec46 <USBD_LL_DevDisconnected>
}
 800ff40:	bf00      	nop
 800ff42:	3708      	adds	r7, #8
 800ff44:	46bd      	mov	sp, r7
 800ff46:	bd80      	pop	{r7, pc}

0800ff48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b082      	sub	sp, #8
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	781b      	ldrb	r3, [r3, #0]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d13c      	bne.n	800ffd2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ff58:	4a20      	ldr	r2, [pc, #128]	; (800ffdc <USBD_LL_Init+0x94>)
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	4a1e      	ldr	r2, [pc, #120]	; (800ffdc <USBD_LL_Init+0x94>)
 800ff64:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ff68:	4b1c      	ldr	r3, [pc, #112]	; (800ffdc <USBD_LL_Init+0x94>)
 800ff6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ff6e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ff70:	4b1a      	ldr	r3, [pc, #104]	; (800ffdc <USBD_LL_Init+0x94>)
 800ff72:	2204      	movs	r2, #4
 800ff74:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ff76:	4b19      	ldr	r3, [pc, #100]	; (800ffdc <USBD_LL_Init+0x94>)
 800ff78:	2202      	movs	r2, #2
 800ff7a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ff7c:	4b17      	ldr	r3, [pc, #92]	; (800ffdc <USBD_LL_Init+0x94>)
 800ff7e:	2200      	movs	r2, #0
 800ff80:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ff82:	4b16      	ldr	r3, [pc, #88]	; (800ffdc <USBD_LL_Init+0x94>)
 800ff84:	2202      	movs	r2, #2
 800ff86:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ff88:	4b14      	ldr	r3, [pc, #80]	; (800ffdc <USBD_LL_Init+0x94>)
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ff8e:	4b13      	ldr	r3, [pc, #76]	; (800ffdc <USBD_LL_Init+0x94>)
 800ff90:	2200      	movs	r2, #0
 800ff92:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ff94:	4b11      	ldr	r3, [pc, #68]	; (800ffdc <USBD_LL_Init+0x94>)
 800ff96:	2200      	movs	r2, #0
 800ff98:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ff9a:	4b10      	ldr	r3, [pc, #64]	; (800ffdc <USBD_LL_Init+0x94>)
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ffa0:	4b0e      	ldr	r3, [pc, #56]	; (800ffdc <USBD_LL_Init+0x94>)
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ffa6:	480d      	ldr	r0, [pc, #52]	; (800ffdc <USBD_LL_Init+0x94>)
 800ffa8:	f7f9 fc37 	bl	800981a <HAL_PCD_Init>
 800ffac:	4603      	mov	r3, r0
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d001      	beq.n	800ffb6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ffb2:	f7f4 fe73 	bl	8004c9c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ffb6:	2180      	movs	r1, #128	; 0x80
 800ffb8:	4808      	ldr	r0, [pc, #32]	; (800ffdc <USBD_LL_Init+0x94>)
 800ffba:	f7fa fd94 	bl	800aae6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ffbe:	2240      	movs	r2, #64	; 0x40
 800ffc0:	2100      	movs	r1, #0
 800ffc2:	4806      	ldr	r0, [pc, #24]	; (800ffdc <USBD_LL_Init+0x94>)
 800ffc4:	f7fa fd48 	bl	800aa58 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ffc8:	2280      	movs	r2, #128	; 0x80
 800ffca:	2101      	movs	r1, #1
 800ffcc:	4803      	ldr	r0, [pc, #12]	; (800ffdc <USBD_LL_Init+0x94>)
 800ffce:	f7fa fd43 	bl	800aa58 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ffd2:	2300      	movs	r3, #0
}
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	3708      	adds	r7, #8
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bd80      	pop	{r7, pc}
 800ffdc:	2000415c 	.word	0x2000415c

0800ffe0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b084      	sub	sp, #16
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffe8:	2300      	movs	r3, #0
 800ffea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffec:	2300      	movs	r3, #0
 800ffee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fff6:	4618      	mov	r0, r3
 800fff8:	f7f9 fd2c 	bl	8009a54 <HAL_PCD_Start>
 800fffc:	4603      	mov	r3, r0
 800fffe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010000:	7bfb      	ldrb	r3, [r7, #15]
 8010002:	4618      	mov	r0, r3
 8010004:	f000 f92a 	bl	801025c <USBD_Get_USB_Status>
 8010008:	4603      	mov	r3, r0
 801000a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801000c:	7bbb      	ldrb	r3, [r7, #14]
}
 801000e:	4618      	mov	r0, r3
 8010010:	3710      	adds	r7, #16
 8010012:	46bd      	mov	sp, r7
 8010014:	bd80      	pop	{r7, pc}

08010016 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010016:	b580      	push	{r7, lr}
 8010018:	b084      	sub	sp, #16
 801001a:	af00      	add	r7, sp, #0
 801001c:	6078      	str	r0, [r7, #4]
 801001e:	4608      	mov	r0, r1
 8010020:	4611      	mov	r1, r2
 8010022:	461a      	mov	r2, r3
 8010024:	4603      	mov	r3, r0
 8010026:	70fb      	strb	r3, [r7, #3]
 8010028:	460b      	mov	r3, r1
 801002a:	70bb      	strb	r3, [r7, #2]
 801002c:	4613      	mov	r3, r2
 801002e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010030:	2300      	movs	r3, #0
 8010032:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010034:	2300      	movs	r3, #0
 8010036:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801003e:	78bb      	ldrb	r3, [r7, #2]
 8010040:	883a      	ldrh	r2, [r7, #0]
 8010042:	78f9      	ldrb	r1, [r7, #3]
 8010044:	f7fa f910 	bl	800a268 <HAL_PCD_EP_Open>
 8010048:	4603      	mov	r3, r0
 801004a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801004c:	7bfb      	ldrb	r3, [r7, #15]
 801004e:	4618      	mov	r0, r3
 8010050:	f000 f904 	bl	801025c <USBD_Get_USB_Status>
 8010054:	4603      	mov	r3, r0
 8010056:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010058:	7bbb      	ldrb	r3, [r7, #14]
}
 801005a:	4618      	mov	r0, r3
 801005c:	3710      	adds	r7, #16
 801005e:	46bd      	mov	sp, r7
 8010060:	bd80      	pop	{r7, pc}

08010062 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010062:	b580      	push	{r7, lr}
 8010064:	b084      	sub	sp, #16
 8010066:	af00      	add	r7, sp, #0
 8010068:	6078      	str	r0, [r7, #4]
 801006a:	460b      	mov	r3, r1
 801006c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801006e:	2300      	movs	r3, #0
 8010070:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010072:	2300      	movs	r3, #0
 8010074:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801007c:	78fa      	ldrb	r2, [r7, #3]
 801007e:	4611      	mov	r1, r2
 8010080:	4618      	mov	r0, r3
 8010082:	f7fa f959 	bl	800a338 <HAL_PCD_EP_Close>
 8010086:	4603      	mov	r3, r0
 8010088:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801008a:	7bfb      	ldrb	r3, [r7, #15]
 801008c:	4618      	mov	r0, r3
 801008e:	f000 f8e5 	bl	801025c <USBD_Get_USB_Status>
 8010092:	4603      	mov	r3, r0
 8010094:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010096:	7bbb      	ldrb	r3, [r7, #14]
}
 8010098:	4618      	mov	r0, r3
 801009a:	3710      	adds	r7, #16
 801009c:	46bd      	mov	sp, r7
 801009e:	bd80      	pop	{r7, pc}

080100a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b084      	sub	sp, #16
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
 80100a8:	460b      	mov	r3, r1
 80100aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100ac:	2300      	movs	r3, #0
 80100ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100b0:	2300      	movs	r3, #0
 80100b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80100ba:	78fa      	ldrb	r2, [r7, #3]
 80100bc:	4611      	mov	r1, r2
 80100be:	4618      	mov	r0, r3
 80100c0:	f7fa fa31 	bl	800a526 <HAL_PCD_EP_SetStall>
 80100c4:	4603      	mov	r3, r0
 80100c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80100c8:	7bfb      	ldrb	r3, [r7, #15]
 80100ca:	4618      	mov	r0, r3
 80100cc:	f000 f8c6 	bl	801025c <USBD_Get_USB_Status>
 80100d0:	4603      	mov	r3, r0
 80100d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80100d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3710      	adds	r7, #16
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}

080100de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80100de:	b580      	push	{r7, lr}
 80100e0:	b084      	sub	sp, #16
 80100e2:	af00      	add	r7, sp, #0
 80100e4:	6078      	str	r0, [r7, #4]
 80100e6:	460b      	mov	r3, r1
 80100e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80100ea:	2300      	movs	r3, #0
 80100ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80100ee:	2300      	movs	r3, #0
 80100f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80100f8:	78fa      	ldrb	r2, [r7, #3]
 80100fa:	4611      	mov	r1, r2
 80100fc:	4618      	mov	r0, r3
 80100fe:	f7fa fa76 	bl	800a5ee <HAL_PCD_EP_ClrStall>
 8010102:	4603      	mov	r3, r0
 8010104:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010106:	7bfb      	ldrb	r3, [r7, #15]
 8010108:	4618      	mov	r0, r3
 801010a:	f000 f8a7 	bl	801025c <USBD_Get_USB_Status>
 801010e:	4603      	mov	r3, r0
 8010110:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010112:	7bbb      	ldrb	r3, [r7, #14]
}
 8010114:	4618      	mov	r0, r3
 8010116:	3710      	adds	r7, #16
 8010118:	46bd      	mov	sp, r7
 801011a:	bd80      	pop	{r7, pc}

0801011c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801011c:	b480      	push	{r7}
 801011e:	b085      	sub	sp, #20
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
 8010124:	460b      	mov	r3, r1
 8010126:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801012e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010130:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010134:	2b00      	cmp	r3, #0
 8010136:	da0b      	bge.n	8010150 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010138:	78fb      	ldrb	r3, [r7, #3]
 801013a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801013e:	68f9      	ldr	r1, [r7, #12]
 8010140:	4613      	mov	r3, r2
 8010142:	00db      	lsls	r3, r3, #3
 8010144:	1a9b      	subs	r3, r3, r2
 8010146:	009b      	lsls	r3, r3, #2
 8010148:	440b      	add	r3, r1
 801014a:	333e      	adds	r3, #62	; 0x3e
 801014c:	781b      	ldrb	r3, [r3, #0]
 801014e:	e00b      	b.n	8010168 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010150:	78fb      	ldrb	r3, [r7, #3]
 8010152:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010156:	68f9      	ldr	r1, [r7, #12]
 8010158:	4613      	mov	r3, r2
 801015a:	00db      	lsls	r3, r3, #3
 801015c:	1a9b      	subs	r3, r3, r2
 801015e:	009b      	lsls	r3, r3, #2
 8010160:	440b      	add	r3, r1
 8010162:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010166:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010168:	4618      	mov	r0, r3
 801016a:	3714      	adds	r7, #20
 801016c:	46bd      	mov	sp, r7
 801016e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010172:	4770      	bx	lr

08010174 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b084      	sub	sp, #16
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
 801017c:	460b      	mov	r3, r1
 801017e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010180:	2300      	movs	r3, #0
 8010182:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010184:	2300      	movs	r3, #0
 8010186:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801018e:	78fa      	ldrb	r2, [r7, #3]
 8010190:	4611      	mov	r1, r2
 8010192:	4618      	mov	r0, r3
 8010194:	f7fa f843 	bl	800a21e <HAL_PCD_SetAddress>
 8010198:	4603      	mov	r3, r0
 801019a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801019c:	7bfb      	ldrb	r3, [r7, #15]
 801019e:	4618      	mov	r0, r3
 80101a0:	f000 f85c 	bl	801025c <USBD_Get_USB_Status>
 80101a4:	4603      	mov	r3, r0
 80101a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80101a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80101aa:	4618      	mov	r0, r3
 80101ac:	3710      	adds	r7, #16
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}

080101b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80101b2:	b580      	push	{r7, lr}
 80101b4:	b086      	sub	sp, #24
 80101b6:	af00      	add	r7, sp, #0
 80101b8:	60f8      	str	r0, [r7, #12]
 80101ba:	607a      	str	r2, [r7, #4]
 80101bc:	603b      	str	r3, [r7, #0]
 80101be:	460b      	mov	r3, r1
 80101c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101c2:	2300      	movs	r3, #0
 80101c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80101c6:	2300      	movs	r3, #0
 80101c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80101d0:	7af9      	ldrb	r1, [r7, #11]
 80101d2:	683b      	ldr	r3, [r7, #0]
 80101d4:	687a      	ldr	r2, [r7, #4]
 80101d6:	f7fa f95c 	bl	800a492 <HAL_PCD_EP_Transmit>
 80101da:	4603      	mov	r3, r0
 80101dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80101de:	7dfb      	ldrb	r3, [r7, #23]
 80101e0:	4618      	mov	r0, r3
 80101e2:	f000 f83b 	bl	801025c <USBD_Get_USB_Status>
 80101e6:	4603      	mov	r3, r0
 80101e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80101ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80101ec:	4618      	mov	r0, r3
 80101ee:	3718      	adds	r7, #24
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bd80      	pop	{r7, pc}

080101f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b086      	sub	sp, #24
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	60f8      	str	r0, [r7, #12]
 80101fc:	607a      	str	r2, [r7, #4]
 80101fe:	603b      	str	r3, [r7, #0]
 8010200:	460b      	mov	r3, r1
 8010202:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010204:	2300      	movs	r3, #0
 8010206:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010208:	2300      	movs	r3, #0
 801020a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010212:	7af9      	ldrb	r1, [r7, #11]
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	687a      	ldr	r2, [r7, #4]
 8010218:	f7fa f8d8 	bl	800a3cc <HAL_PCD_EP_Receive>
 801021c:	4603      	mov	r3, r0
 801021e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010220:	7dfb      	ldrb	r3, [r7, #23]
 8010222:	4618      	mov	r0, r3
 8010224:	f000 f81a 	bl	801025c <USBD_Get_USB_Status>
 8010228:	4603      	mov	r3, r0
 801022a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801022c:	7dbb      	ldrb	r3, [r7, #22]
}
 801022e:	4618      	mov	r0, r3
 8010230:	3718      	adds	r7, #24
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}

08010236 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010236:	b580      	push	{r7, lr}
 8010238:	b082      	sub	sp, #8
 801023a:	af00      	add	r7, sp, #0
 801023c:	6078      	str	r0, [r7, #4]
 801023e:	460b      	mov	r3, r1
 8010240:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010248:	78fa      	ldrb	r2, [r7, #3]
 801024a:	4611      	mov	r1, r2
 801024c:	4618      	mov	r0, r3
 801024e:	f7fa f908 	bl	800a462 <HAL_PCD_EP_GetRxCount>
 8010252:	4603      	mov	r3, r0
}
 8010254:	4618      	mov	r0, r3
 8010256:	3708      	adds	r7, #8
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}

0801025c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801025c:	b480      	push	{r7}
 801025e:	b085      	sub	sp, #20
 8010260:	af00      	add	r7, sp, #0
 8010262:	4603      	mov	r3, r0
 8010264:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010266:	2300      	movs	r3, #0
 8010268:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801026a:	79fb      	ldrb	r3, [r7, #7]
 801026c:	2b03      	cmp	r3, #3
 801026e:	d817      	bhi.n	80102a0 <USBD_Get_USB_Status+0x44>
 8010270:	a201      	add	r2, pc, #4	; (adr r2, 8010278 <USBD_Get_USB_Status+0x1c>)
 8010272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010276:	bf00      	nop
 8010278:	08010289 	.word	0x08010289
 801027c:	0801028f 	.word	0x0801028f
 8010280:	08010295 	.word	0x08010295
 8010284:	0801029b 	.word	0x0801029b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010288:	2300      	movs	r3, #0
 801028a:	73fb      	strb	r3, [r7, #15]
    break;
 801028c:	e00b      	b.n	80102a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801028e:	2303      	movs	r3, #3
 8010290:	73fb      	strb	r3, [r7, #15]
    break;
 8010292:	e008      	b.n	80102a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010294:	2301      	movs	r3, #1
 8010296:	73fb      	strb	r3, [r7, #15]
    break;
 8010298:	e005      	b.n	80102a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801029a:	2303      	movs	r3, #3
 801029c:	73fb      	strb	r3, [r7, #15]
    break;
 801029e:	e002      	b.n	80102a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80102a0:	2303      	movs	r3, #3
 80102a2:	73fb      	strb	r3, [r7, #15]
    break;
 80102a4:	bf00      	nop
  }
  return usb_status;
 80102a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80102a8:	4618      	mov	r0, r3
 80102aa:	3714      	adds	r7, #20
 80102ac:	46bd      	mov	sp, r7
 80102ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b2:	4770      	bx	lr

080102b4 <__errno>:
 80102b4:	4b01      	ldr	r3, [pc, #4]	; (80102bc <__errno+0x8>)
 80102b6:	6818      	ldr	r0, [r3, #0]
 80102b8:	4770      	bx	lr
 80102ba:	bf00      	nop
 80102bc:	200001c4 	.word	0x200001c4

080102c0 <__libc_init_array>:
 80102c0:	b570      	push	{r4, r5, r6, lr}
 80102c2:	4e0d      	ldr	r6, [pc, #52]	; (80102f8 <__libc_init_array+0x38>)
 80102c4:	4c0d      	ldr	r4, [pc, #52]	; (80102fc <__libc_init_array+0x3c>)
 80102c6:	1ba4      	subs	r4, r4, r6
 80102c8:	10a4      	asrs	r4, r4, #2
 80102ca:	2500      	movs	r5, #0
 80102cc:	42a5      	cmp	r5, r4
 80102ce:	d109      	bne.n	80102e4 <__libc_init_array+0x24>
 80102d0:	4e0b      	ldr	r6, [pc, #44]	; (8010300 <__libc_init_array+0x40>)
 80102d2:	4c0c      	ldr	r4, [pc, #48]	; (8010304 <__libc_init_array+0x44>)
 80102d4:	f003 f8f4 	bl	80134c0 <_init>
 80102d8:	1ba4      	subs	r4, r4, r6
 80102da:	10a4      	asrs	r4, r4, #2
 80102dc:	2500      	movs	r5, #0
 80102de:	42a5      	cmp	r5, r4
 80102e0:	d105      	bne.n	80102ee <__libc_init_array+0x2e>
 80102e2:	bd70      	pop	{r4, r5, r6, pc}
 80102e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80102e8:	4798      	blx	r3
 80102ea:	3501      	adds	r5, #1
 80102ec:	e7ee      	b.n	80102cc <__libc_init_array+0xc>
 80102ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80102f2:	4798      	blx	r3
 80102f4:	3501      	adds	r5, #1
 80102f6:	e7f2      	b.n	80102de <__libc_init_array+0x1e>
 80102f8:	08013838 	.word	0x08013838
 80102fc:	08013838 	.word	0x08013838
 8010300:	08013838 	.word	0x08013838
 8010304:	0801383c 	.word	0x0801383c

08010308 <malloc>:
 8010308:	4b02      	ldr	r3, [pc, #8]	; (8010314 <malloc+0xc>)
 801030a:	4601      	mov	r1, r0
 801030c:	6818      	ldr	r0, [r3, #0]
 801030e:	f000 b861 	b.w	80103d4 <_malloc_r>
 8010312:	bf00      	nop
 8010314:	200001c4 	.word	0x200001c4

08010318 <free>:
 8010318:	4b02      	ldr	r3, [pc, #8]	; (8010324 <free+0xc>)
 801031a:	4601      	mov	r1, r0
 801031c:	6818      	ldr	r0, [r3, #0]
 801031e:	f000 b80b 	b.w	8010338 <_free_r>
 8010322:	bf00      	nop
 8010324:	200001c4 	.word	0x200001c4

08010328 <memset>:
 8010328:	4402      	add	r2, r0
 801032a:	4603      	mov	r3, r0
 801032c:	4293      	cmp	r3, r2
 801032e:	d100      	bne.n	8010332 <memset+0xa>
 8010330:	4770      	bx	lr
 8010332:	f803 1b01 	strb.w	r1, [r3], #1
 8010336:	e7f9      	b.n	801032c <memset+0x4>

08010338 <_free_r>:
 8010338:	b538      	push	{r3, r4, r5, lr}
 801033a:	4605      	mov	r5, r0
 801033c:	2900      	cmp	r1, #0
 801033e:	d045      	beq.n	80103cc <_free_r+0x94>
 8010340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010344:	1f0c      	subs	r4, r1, #4
 8010346:	2b00      	cmp	r3, #0
 8010348:	bfb8      	it	lt
 801034a:	18e4      	addlt	r4, r4, r3
 801034c:	f000 f8d4 	bl	80104f8 <__malloc_lock>
 8010350:	4a1f      	ldr	r2, [pc, #124]	; (80103d0 <_free_r+0x98>)
 8010352:	6813      	ldr	r3, [r2, #0]
 8010354:	4610      	mov	r0, r2
 8010356:	b933      	cbnz	r3, 8010366 <_free_r+0x2e>
 8010358:	6063      	str	r3, [r4, #4]
 801035a:	6014      	str	r4, [r2, #0]
 801035c:	4628      	mov	r0, r5
 801035e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010362:	f000 b8ca 	b.w	80104fa <__malloc_unlock>
 8010366:	42a3      	cmp	r3, r4
 8010368:	d90c      	bls.n	8010384 <_free_r+0x4c>
 801036a:	6821      	ldr	r1, [r4, #0]
 801036c:	1862      	adds	r2, r4, r1
 801036e:	4293      	cmp	r3, r2
 8010370:	bf04      	itt	eq
 8010372:	681a      	ldreq	r2, [r3, #0]
 8010374:	685b      	ldreq	r3, [r3, #4]
 8010376:	6063      	str	r3, [r4, #4]
 8010378:	bf04      	itt	eq
 801037a:	1852      	addeq	r2, r2, r1
 801037c:	6022      	streq	r2, [r4, #0]
 801037e:	6004      	str	r4, [r0, #0]
 8010380:	e7ec      	b.n	801035c <_free_r+0x24>
 8010382:	4613      	mov	r3, r2
 8010384:	685a      	ldr	r2, [r3, #4]
 8010386:	b10a      	cbz	r2, 801038c <_free_r+0x54>
 8010388:	42a2      	cmp	r2, r4
 801038a:	d9fa      	bls.n	8010382 <_free_r+0x4a>
 801038c:	6819      	ldr	r1, [r3, #0]
 801038e:	1858      	adds	r0, r3, r1
 8010390:	42a0      	cmp	r0, r4
 8010392:	d10b      	bne.n	80103ac <_free_r+0x74>
 8010394:	6820      	ldr	r0, [r4, #0]
 8010396:	4401      	add	r1, r0
 8010398:	1858      	adds	r0, r3, r1
 801039a:	4282      	cmp	r2, r0
 801039c:	6019      	str	r1, [r3, #0]
 801039e:	d1dd      	bne.n	801035c <_free_r+0x24>
 80103a0:	6810      	ldr	r0, [r2, #0]
 80103a2:	6852      	ldr	r2, [r2, #4]
 80103a4:	605a      	str	r2, [r3, #4]
 80103a6:	4401      	add	r1, r0
 80103a8:	6019      	str	r1, [r3, #0]
 80103aa:	e7d7      	b.n	801035c <_free_r+0x24>
 80103ac:	d902      	bls.n	80103b4 <_free_r+0x7c>
 80103ae:	230c      	movs	r3, #12
 80103b0:	602b      	str	r3, [r5, #0]
 80103b2:	e7d3      	b.n	801035c <_free_r+0x24>
 80103b4:	6820      	ldr	r0, [r4, #0]
 80103b6:	1821      	adds	r1, r4, r0
 80103b8:	428a      	cmp	r2, r1
 80103ba:	bf04      	itt	eq
 80103bc:	6811      	ldreq	r1, [r2, #0]
 80103be:	6852      	ldreq	r2, [r2, #4]
 80103c0:	6062      	str	r2, [r4, #4]
 80103c2:	bf04      	itt	eq
 80103c4:	1809      	addeq	r1, r1, r0
 80103c6:	6021      	streq	r1, [r4, #0]
 80103c8:	605c      	str	r4, [r3, #4]
 80103ca:	e7c7      	b.n	801035c <_free_r+0x24>
 80103cc:	bd38      	pop	{r3, r4, r5, pc}
 80103ce:	bf00      	nop
 80103d0:	200002f4 	.word	0x200002f4

080103d4 <_malloc_r>:
 80103d4:	b570      	push	{r4, r5, r6, lr}
 80103d6:	1ccd      	adds	r5, r1, #3
 80103d8:	f025 0503 	bic.w	r5, r5, #3
 80103dc:	3508      	adds	r5, #8
 80103de:	2d0c      	cmp	r5, #12
 80103e0:	bf38      	it	cc
 80103e2:	250c      	movcc	r5, #12
 80103e4:	2d00      	cmp	r5, #0
 80103e6:	4606      	mov	r6, r0
 80103e8:	db01      	blt.n	80103ee <_malloc_r+0x1a>
 80103ea:	42a9      	cmp	r1, r5
 80103ec:	d903      	bls.n	80103f6 <_malloc_r+0x22>
 80103ee:	230c      	movs	r3, #12
 80103f0:	6033      	str	r3, [r6, #0]
 80103f2:	2000      	movs	r0, #0
 80103f4:	bd70      	pop	{r4, r5, r6, pc}
 80103f6:	f000 f87f 	bl	80104f8 <__malloc_lock>
 80103fa:	4a21      	ldr	r2, [pc, #132]	; (8010480 <_malloc_r+0xac>)
 80103fc:	6814      	ldr	r4, [r2, #0]
 80103fe:	4621      	mov	r1, r4
 8010400:	b991      	cbnz	r1, 8010428 <_malloc_r+0x54>
 8010402:	4c20      	ldr	r4, [pc, #128]	; (8010484 <_malloc_r+0xb0>)
 8010404:	6823      	ldr	r3, [r4, #0]
 8010406:	b91b      	cbnz	r3, 8010410 <_malloc_r+0x3c>
 8010408:	4630      	mov	r0, r6
 801040a:	f000 f83d 	bl	8010488 <_sbrk_r>
 801040e:	6020      	str	r0, [r4, #0]
 8010410:	4629      	mov	r1, r5
 8010412:	4630      	mov	r0, r6
 8010414:	f000 f838 	bl	8010488 <_sbrk_r>
 8010418:	1c43      	adds	r3, r0, #1
 801041a:	d124      	bne.n	8010466 <_malloc_r+0x92>
 801041c:	230c      	movs	r3, #12
 801041e:	6033      	str	r3, [r6, #0]
 8010420:	4630      	mov	r0, r6
 8010422:	f000 f86a 	bl	80104fa <__malloc_unlock>
 8010426:	e7e4      	b.n	80103f2 <_malloc_r+0x1e>
 8010428:	680b      	ldr	r3, [r1, #0]
 801042a:	1b5b      	subs	r3, r3, r5
 801042c:	d418      	bmi.n	8010460 <_malloc_r+0x8c>
 801042e:	2b0b      	cmp	r3, #11
 8010430:	d90f      	bls.n	8010452 <_malloc_r+0x7e>
 8010432:	600b      	str	r3, [r1, #0]
 8010434:	50cd      	str	r5, [r1, r3]
 8010436:	18cc      	adds	r4, r1, r3
 8010438:	4630      	mov	r0, r6
 801043a:	f000 f85e 	bl	80104fa <__malloc_unlock>
 801043e:	f104 000b 	add.w	r0, r4, #11
 8010442:	1d23      	adds	r3, r4, #4
 8010444:	f020 0007 	bic.w	r0, r0, #7
 8010448:	1ac3      	subs	r3, r0, r3
 801044a:	d0d3      	beq.n	80103f4 <_malloc_r+0x20>
 801044c:	425a      	negs	r2, r3
 801044e:	50e2      	str	r2, [r4, r3]
 8010450:	e7d0      	b.n	80103f4 <_malloc_r+0x20>
 8010452:	428c      	cmp	r4, r1
 8010454:	684b      	ldr	r3, [r1, #4]
 8010456:	bf16      	itet	ne
 8010458:	6063      	strne	r3, [r4, #4]
 801045a:	6013      	streq	r3, [r2, #0]
 801045c:	460c      	movne	r4, r1
 801045e:	e7eb      	b.n	8010438 <_malloc_r+0x64>
 8010460:	460c      	mov	r4, r1
 8010462:	6849      	ldr	r1, [r1, #4]
 8010464:	e7cc      	b.n	8010400 <_malloc_r+0x2c>
 8010466:	1cc4      	adds	r4, r0, #3
 8010468:	f024 0403 	bic.w	r4, r4, #3
 801046c:	42a0      	cmp	r0, r4
 801046e:	d005      	beq.n	801047c <_malloc_r+0xa8>
 8010470:	1a21      	subs	r1, r4, r0
 8010472:	4630      	mov	r0, r6
 8010474:	f000 f808 	bl	8010488 <_sbrk_r>
 8010478:	3001      	adds	r0, #1
 801047a:	d0cf      	beq.n	801041c <_malloc_r+0x48>
 801047c:	6025      	str	r5, [r4, #0]
 801047e:	e7db      	b.n	8010438 <_malloc_r+0x64>
 8010480:	200002f4 	.word	0x200002f4
 8010484:	200002f8 	.word	0x200002f8

08010488 <_sbrk_r>:
 8010488:	b538      	push	{r3, r4, r5, lr}
 801048a:	4c06      	ldr	r4, [pc, #24]	; (80104a4 <_sbrk_r+0x1c>)
 801048c:	2300      	movs	r3, #0
 801048e:	4605      	mov	r5, r0
 8010490:	4608      	mov	r0, r1
 8010492:	6023      	str	r3, [r4, #0]
 8010494:	f7f4 fd00 	bl	8004e98 <_sbrk>
 8010498:	1c43      	adds	r3, r0, #1
 801049a:	d102      	bne.n	80104a2 <_sbrk_r+0x1a>
 801049c:	6823      	ldr	r3, [r4, #0]
 801049e:	b103      	cbz	r3, 80104a2 <_sbrk_r+0x1a>
 80104a0:	602b      	str	r3, [r5, #0]
 80104a2:	bd38      	pop	{r3, r4, r5, pc}
 80104a4:	20004564 	.word	0x20004564

080104a8 <siprintf>:
 80104a8:	b40e      	push	{r1, r2, r3}
 80104aa:	b500      	push	{lr}
 80104ac:	b09c      	sub	sp, #112	; 0x70
 80104ae:	ab1d      	add	r3, sp, #116	; 0x74
 80104b0:	9002      	str	r0, [sp, #8]
 80104b2:	9006      	str	r0, [sp, #24]
 80104b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80104b8:	4809      	ldr	r0, [pc, #36]	; (80104e0 <siprintf+0x38>)
 80104ba:	9107      	str	r1, [sp, #28]
 80104bc:	9104      	str	r1, [sp, #16]
 80104be:	4909      	ldr	r1, [pc, #36]	; (80104e4 <siprintf+0x3c>)
 80104c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80104c4:	9105      	str	r1, [sp, #20]
 80104c6:	6800      	ldr	r0, [r0, #0]
 80104c8:	9301      	str	r3, [sp, #4]
 80104ca:	a902      	add	r1, sp, #8
 80104cc:	f000 f870 	bl	80105b0 <_svfiprintf_r>
 80104d0:	9b02      	ldr	r3, [sp, #8]
 80104d2:	2200      	movs	r2, #0
 80104d4:	701a      	strb	r2, [r3, #0]
 80104d6:	b01c      	add	sp, #112	; 0x70
 80104d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80104dc:	b003      	add	sp, #12
 80104de:	4770      	bx	lr
 80104e0:	200001c4 	.word	0x200001c4
 80104e4:	ffff0208 	.word	0xffff0208

080104e8 <strcpy>:
 80104e8:	4603      	mov	r3, r0
 80104ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80104ee:	f803 2b01 	strb.w	r2, [r3], #1
 80104f2:	2a00      	cmp	r2, #0
 80104f4:	d1f9      	bne.n	80104ea <strcpy+0x2>
 80104f6:	4770      	bx	lr

080104f8 <__malloc_lock>:
 80104f8:	4770      	bx	lr

080104fa <__malloc_unlock>:
 80104fa:	4770      	bx	lr

080104fc <__ssputs_r>:
 80104fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010500:	688e      	ldr	r6, [r1, #8]
 8010502:	429e      	cmp	r6, r3
 8010504:	4682      	mov	sl, r0
 8010506:	460c      	mov	r4, r1
 8010508:	4690      	mov	r8, r2
 801050a:	4699      	mov	r9, r3
 801050c:	d837      	bhi.n	801057e <__ssputs_r+0x82>
 801050e:	898a      	ldrh	r2, [r1, #12]
 8010510:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010514:	d031      	beq.n	801057a <__ssputs_r+0x7e>
 8010516:	6825      	ldr	r5, [r4, #0]
 8010518:	6909      	ldr	r1, [r1, #16]
 801051a:	1a6f      	subs	r7, r5, r1
 801051c:	6965      	ldr	r5, [r4, #20]
 801051e:	2302      	movs	r3, #2
 8010520:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010524:	fb95 f5f3 	sdiv	r5, r5, r3
 8010528:	f109 0301 	add.w	r3, r9, #1
 801052c:	443b      	add	r3, r7
 801052e:	429d      	cmp	r5, r3
 8010530:	bf38      	it	cc
 8010532:	461d      	movcc	r5, r3
 8010534:	0553      	lsls	r3, r2, #21
 8010536:	d530      	bpl.n	801059a <__ssputs_r+0x9e>
 8010538:	4629      	mov	r1, r5
 801053a:	f7ff ff4b 	bl	80103d4 <_malloc_r>
 801053e:	4606      	mov	r6, r0
 8010540:	b950      	cbnz	r0, 8010558 <__ssputs_r+0x5c>
 8010542:	230c      	movs	r3, #12
 8010544:	f8ca 3000 	str.w	r3, [sl]
 8010548:	89a3      	ldrh	r3, [r4, #12]
 801054a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801054e:	81a3      	strh	r3, [r4, #12]
 8010550:	f04f 30ff 	mov.w	r0, #4294967295
 8010554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010558:	463a      	mov	r2, r7
 801055a:	6921      	ldr	r1, [r4, #16]
 801055c:	f000 faa8 	bl	8010ab0 <memcpy>
 8010560:	89a3      	ldrh	r3, [r4, #12]
 8010562:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801056a:	81a3      	strh	r3, [r4, #12]
 801056c:	6126      	str	r6, [r4, #16]
 801056e:	6165      	str	r5, [r4, #20]
 8010570:	443e      	add	r6, r7
 8010572:	1bed      	subs	r5, r5, r7
 8010574:	6026      	str	r6, [r4, #0]
 8010576:	60a5      	str	r5, [r4, #8]
 8010578:	464e      	mov	r6, r9
 801057a:	454e      	cmp	r6, r9
 801057c:	d900      	bls.n	8010580 <__ssputs_r+0x84>
 801057e:	464e      	mov	r6, r9
 8010580:	4632      	mov	r2, r6
 8010582:	4641      	mov	r1, r8
 8010584:	6820      	ldr	r0, [r4, #0]
 8010586:	f000 fa9e 	bl	8010ac6 <memmove>
 801058a:	68a3      	ldr	r3, [r4, #8]
 801058c:	1b9b      	subs	r3, r3, r6
 801058e:	60a3      	str	r3, [r4, #8]
 8010590:	6823      	ldr	r3, [r4, #0]
 8010592:	441e      	add	r6, r3
 8010594:	6026      	str	r6, [r4, #0]
 8010596:	2000      	movs	r0, #0
 8010598:	e7dc      	b.n	8010554 <__ssputs_r+0x58>
 801059a:	462a      	mov	r2, r5
 801059c:	f000 faac 	bl	8010af8 <_realloc_r>
 80105a0:	4606      	mov	r6, r0
 80105a2:	2800      	cmp	r0, #0
 80105a4:	d1e2      	bne.n	801056c <__ssputs_r+0x70>
 80105a6:	6921      	ldr	r1, [r4, #16]
 80105a8:	4650      	mov	r0, sl
 80105aa:	f7ff fec5 	bl	8010338 <_free_r>
 80105ae:	e7c8      	b.n	8010542 <__ssputs_r+0x46>

080105b0 <_svfiprintf_r>:
 80105b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105b4:	461d      	mov	r5, r3
 80105b6:	898b      	ldrh	r3, [r1, #12]
 80105b8:	061f      	lsls	r7, r3, #24
 80105ba:	b09d      	sub	sp, #116	; 0x74
 80105bc:	4680      	mov	r8, r0
 80105be:	460c      	mov	r4, r1
 80105c0:	4616      	mov	r6, r2
 80105c2:	d50f      	bpl.n	80105e4 <_svfiprintf_r+0x34>
 80105c4:	690b      	ldr	r3, [r1, #16]
 80105c6:	b96b      	cbnz	r3, 80105e4 <_svfiprintf_r+0x34>
 80105c8:	2140      	movs	r1, #64	; 0x40
 80105ca:	f7ff ff03 	bl	80103d4 <_malloc_r>
 80105ce:	6020      	str	r0, [r4, #0]
 80105d0:	6120      	str	r0, [r4, #16]
 80105d2:	b928      	cbnz	r0, 80105e0 <_svfiprintf_r+0x30>
 80105d4:	230c      	movs	r3, #12
 80105d6:	f8c8 3000 	str.w	r3, [r8]
 80105da:	f04f 30ff 	mov.w	r0, #4294967295
 80105de:	e0c8      	b.n	8010772 <_svfiprintf_r+0x1c2>
 80105e0:	2340      	movs	r3, #64	; 0x40
 80105e2:	6163      	str	r3, [r4, #20]
 80105e4:	2300      	movs	r3, #0
 80105e6:	9309      	str	r3, [sp, #36]	; 0x24
 80105e8:	2320      	movs	r3, #32
 80105ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80105ee:	2330      	movs	r3, #48	; 0x30
 80105f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80105f4:	9503      	str	r5, [sp, #12]
 80105f6:	f04f 0b01 	mov.w	fp, #1
 80105fa:	4637      	mov	r7, r6
 80105fc:	463d      	mov	r5, r7
 80105fe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010602:	b10b      	cbz	r3, 8010608 <_svfiprintf_r+0x58>
 8010604:	2b25      	cmp	r3, #37	; 0x25
 8010606:	d13e      	bne.n	8010686 <_svfiprintf_r+0xd6>
 8010608:	ebb7 0a06 	subs.w	sl, r7, r6
 801060c:	d00b      	beq.n	8010626 <_svfiprintf_r+0x76>
 801060e:	4653      	mov	r3, sl
 8010610:	4632      	mov	r2, r6
 8010612:	4621      	mov	r1, r4
 8010614:	4640      	mov	r0, r8
 8010616:	f7ff ff71 	bl	80104fc <__ssputs_r>
 801061a:	3001      	adds	r0, #1
 801061c:	f000 80a4 	beq.w	8010768 <_svfiprintf_r+0x1b8>
 8010620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010622:	4453      	add	r3, sl
 8010624:	9309      	str	r3, [sp, #36]	; 0x24
 8010626:	783b      	ldrb	r3, [r7, #0]
 8010628:	2b00      	cmp	r3, #0
 801062a:	f000 809d 	beq.w	8010768 <_svfiprintf_r+0x1b8>
 801062e:	2300      	movs	r3, #0
 8010630:	f04f 32ff 	mov.w	r2, #4294967295
 8010634:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010638:	9304      	str	r3, [sp, #16]
 801063a:	9307      	str	r3, [sp, #28]
 801063c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010640:	931a      	str	r3, [sp, #104]	; 0x68
 8010642:	462f      	mov	r7, r5
 8010644:	2205      	movs	r2, #5
 8010646:	f817 1b01 	ldrb.w	r1, [r7], #1
 801064a:	4850      	ldr	r0, [pc, #320]	; (801078c <_svfiprintf_r+0x1dc>)
 801064c:	f7ef fdc8 	bl	80001e0 <memchr>
 8010650:	9b04      	ldr	r3, [sp, #16]
 8010652:	b9d0      	cbnz	r0, 801068a <_svfiprintf_r+0xda>
 8010654:	06d9      	lsls	r1, r3, #27
 8010656:	bf44      	itt	mi
 8010658:	2220      	movmi	r2, #32
 801065a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801065e:	071a      	lsls	r2, r3, #28
 8010660:	bf44      	itt	mi
 8010662:	222b      	movmi	r2, #43	; 0x2b
 8010664:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010668:	782a      	ldrb	r2, [r5, #0]
 801066a:	2a2a      	cmp	r2, #42	; 0x2a
 801066c:	d015      	beq.n	801069a <_svfiprintf_r+0xea>
 801066e:	9a07      	ldr	r2, [sp, #28]
 8010670:	462f      	mov	r7, r5
 8010672:	2000      	movs	r0, #0
 8010674:	250a      	movs	r5, #10
 8010676:	4639      	mov	r1, r7
 8010678:	f811 3b01 	ldrb.w	r3, [r1], #1
 801067c:	3b30      	subs	r3, #48	; 0x30
 801067e:	2b09      	cmp	r3, #9
 8010680:	d94d      	bls.n	801071e <_svfiprintf_r+0x16e>
 8010682:	b1b8      	cbz	r0, 80106b4 <_svfiprintf_r+0x104>
 8010684:	e00f      	b.n	80106a6 <_svfiprintf_r+0xf6>
 8010686:	462f      	mov	r7, r5
 8010688:	e7b8      	b.n	80105fc <_svfiprintf_r+0x4c>
 801068a:	4a40      	ldr	r2, [pc, #256]	; (801078c <_svfiprintf_r+0x1dc>)
 801068c:	1a80      	subs	r0, r0, r2
 801068e:	fa0b f000 	lsl.w	r0, fp, r0
 8010692:	4318      	orrs	r0, r3
 8010694:	9004      	str	r0, [sp, #16]
 8010696:	463d      	mov	r5, r7
 8010698:	e7d3      	b.n	8010642 <_svfiprintf_r+0x92>
 801069a:	9a03      	ldr	r2, [sp, #12]
 801069c:	1d11      	adds	r1, r2, #4
 801069e:	6812      	ldr	r2, [r2, #0]
 80106a0:	9103      	str	r1, [sp, #12]
 80106a2:	2a00      	cmp	r2, #0
 80106a4:	db01      	blt.n	80106aa <_svfiprintf_r+0xfa>
 80106a6:	9207      	str	r2, [sp, #28]
 80106a8:	e004      	b.n	80106b4 <_svfiprintf_r+0x104>
 80106aa:	4252      	negs	r2, r2
 80106ac:	f043 0302 	orr.w	r3, r3, #2
 80106b0:	9207      	str	r2, [sp, #28]
 80106b2:	9304      	str	r3, [sp, #16]
 80106b4:	783b      	ldrb	r3, [r7, #0]
 80106b6:	2b2e      	cmp	r3, #46	; 0x2e
 80106b8:	d10c      	bne.n	80106d4 <_svfiprintf_r+0x124>
 80106ba:	787b      	ldrb	r3, [r7, #1]
 80106bc:	2b2a      	cmp	r3, #42	; 0x2a
 80106be:	d133      	bne.n	8010728 <_svfiprintf_r+0x178>
 80106c0:	9b03      	ldr	r3, [sp, #12]
 80106c2:	1d1a      	adds	r2, r3, #4
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	9203      	str	r2, [sp, #12]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	bfb8      	it	lt
 80106cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80106d0:	3702      	adds	r7, #2
 80106d2:	9305      	str	r3, [sp, #20]
 80106d4:	4d2e      	ldr	r5, [pc, #184]	; (8010790 <_svfiprintf_r+0x1e0>)
 80106d6:	7839      	ldrb	r1, [r7, #0]
 80106d8:	2203      	movs	r2, #3
 80106da:	4628      	mov	r0, r5
 80106dc:	f7ef fd80 	bl	80001e0 <memchr>
 80106e0:	b138      	cbz	r0, 80106f2 <_svfiprintf_r+0x142>
 80106e2:	2340      	movs	r3, #64	; 0x40
 80106e4:	1b40      	subs	r0, r0, r5
 80106e6:	fa03 f000 	lsl.w	r0, r3, r0
 80106ea:	9b04      	ldr	r3, [sp, #16]
 80106ec:	4303      	orrs	r3, r0
 80106ee:	3701      	adds	r7, #1
 80106f0:	9304      	str	r3, [sp, #16]
 80106f2:	7839      	ldrb	r1, [r7, #0]
 80106f4:	4827      	ldr	r0, [pc, #156]	; (8010794 <_svfiprintf_r+0x1e4>)
 80106f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80106fa:	2206      	movs	r2, #6
 80106fc:	1c7e      	adds	r6, r7, #1
 80106fe:	f7ef fd6f 	bl	80001e0 <memchr>
 8010702:	2800      	cmp	r0, #0
 8010704:	d038      	beq.n	8010778 <_svfiprintf_r+0x1c8>
 8010706:	4b24      	ldr	r3, [pc, #144]	; (8010798 <_svfiprintf_r+0x1e8>)
 8010708:	bb13      	cbnz	r3, 8010750 <_svfiprintf_r+0x1a0>
 801070a:	9b03      	ldr	r3, [sp, #12]
 801070c:	3307      	adds	r3, #7
 801070e:	f023 0307 	bic.w	r3, r3, #7
 8010712:	3308      	adds	r3, #8
 8010714:	9303      	str	r3, [sp, #12]
 8010716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010718:	444b      	add	r3, r9
 801071a:	9309      	str	r3, [sp, #36]	; 0x24
 801071c:	e76d      	b.n	80105fa <_svfiprintf_r+0x4a>
 801071e:	fb05 3202 	mla	r2, r5, r2, r3
 8010722:	2001      	movs	r0, #1
 8010724:	460f      	mov	r7, r1
 8010726:	e7a6      	b.n	8010676 <_svfiprintf_r+0xc6>
 8010728:	2300      	movs	r3, #0
 801072a:	3701      	adds	r7, #1
 801072c:	9305      	str	r3, [sp, #20]
 801072e:	4619      	mov	r1, r3
 8010730:	250a      	movs	r5, #10
 8010732:	4638      	mov	r0, r7
 8010734:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010738:	3a30      	subs	r2, #48	; 0x30
 801073a:	2a09      	cmp	r2, #9
 801073c:	d903      	bls.n	8010746 <_svfiprintf_r+0x196>
 801073e:	2b00      	cmp	r3, #0
 8010740:	d0c8      	beq.n	80106d4 <_svfiprintf_r+0x124>
 8010742:	9105      	str	r1, [sp, #20]
 8010744:	e7c6      	b.n	80106d4 <_svfiprintf_r+0x124>
 8010746:	fb05 2101 	mla	r1, r5, r1, r2
 801074a:	2301      	movs	r3, #1
 801074c:	4607      	mov	r7, r0
 801074e:	e7f0      	b.n	8010732 <_svfiprintf_r+0x182>
 8010750:	ab03      	add	r3, sp, #12
 8010752:	9300      	str	r3, [sp, #0]
 8010754:	4622      	mov	r2, r4
 8010756:	4b11      	ldr	r3, [pc, #68]	; (801079c <_svfiprintf_r+0x1ec>)
 8010758:	a904      	add	r1, sp, #16
 801075a:	4640      	mov	r0, r8
 801075c:	f3af 8000 	nop.w
 8010760:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010764:	4681      	mov	r9, r0
 8010766:	d1d6      	bne.n	8010716 <_svfiprintf_r+0x166>
 8010768:	89a3      	ldrh	r3, [r4, #12]
 801076a:	065b      	lsls	r3, r3, #25
 801076c:	f53f af35 	bmi.w	80105da <_svfiprintf_r+0x2a>
 8010770:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010772:	b01d      	add	sp, #116	; 0x74
 8010774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010778:	ab03      	add	r3, sp, #12
 801077a:	9300      	str	r3, [sp, #0]
 801077c:	4622      	mov	r2, r4
 801077e:	4b07      	ldr	r3, [pc, #28]	; (801079c <_svfiprintf_r+0x1ec>)
 8010780:	a904      	add	r1, sp, #16
 8010782:	4640      	mov	r0, r8
 8010784:	f000 f882 	bl	801088c <_printf_i>
 8010788:	e7ea      	b.n	8010760 <_svfiprintf_r+0x1b0>
 801078a:	bf00      	nop
 801078c:	080135b0 	.word	0x080135b0
 8010790:	080135b6 	.word	0x080135b6
 8010794:	080135ba 	.word	0x080135ba
 8010798:	00000000 	.word	0x00000000
 801079c:	080104fd 	.word	0x080104fd

080107a0 <_printf_common>:
 80107a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107a4:	4691      	mov	r9, r2
 80107a6:	461f      	mov	r7, r3
 80107a8:	688a      	ldr	r2, [r1, #8]
 80107aa:	690b      	ldr	r3, [r1, #16]
 80107ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80107b0:	4293      	cmp	r3, r2
 80107b2:	bfb8      	it	lt
 80107b4:	4613      	movlt	r3, r2
 80107b6:	f8c9 3000 	str.w	r3, [r9]
 80107ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80107be:	4606      	mov	r6, r0
 80107c0:	460c      	mov	r4, r1
 80107c2:	b112      	cbz	r2, 80107ca <_printf_common+0x2a>
 80107c4:	3301      	adds	r3, #1
 80107c6:	f8c9 3000 	str.w	r3, [r9]
 80107ca:	6823      	ldr	r3, [r4, #0]
 80107cc:	0699      	lsls	r1, r3, #26
 80107ce:	bf42      	ittt	mi
 80107d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80107d4:	3302      	addmi	r3, #2
 80107d6:	f8c9 3000 	strmi.w	r3, [r9]
 80107da:	6825      	ldr	r5, [r4, #0]
 80107dc:	f015 0506 	ands.w	r5, r5, #6
 80107e0:	d107      	bne.n	80107f2 <_printf_common+0x52>
 80107e2:	f104 0a19 	add.w	sl, r4, #25
 80107e6:	68e3      	ldr	r3, [r4, #12]
 80107e8:	f8d9 2000 	ldr.w	r2, [r9]
 80107ec:	1a9b      	subs	r3, r3, r2
 80107ee:	42ab      	cmp	r3, r5
 80107f0:	dc28      	bgt.n	8010844 <_printf_common+0xa4>
 80107f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80107f6:	6822      	ldr	r2, [r4, #0]
 80107f8:	3300      	adds	r3, #0
 80107fa:	bf18      	it	ne
 80107fc:	2301      	movne	r3, #1
 80107fe:	0692      	lsls	r2, r2, #26
 8010800:	d42d      	bmi.n	801085e <_printf_common+0xbe>
 8010802:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010806:	4639      	mov	r1, r7
 8010808:	4630      	mov	r0, r6
 801080a:	47c0      	blx	r8
 801080c:	3001      	adds	r0, #1
 801080e:	d020      	beq.n	8010852 <_printf_common+0xb2>
 8010810:	6823      	ldr	r3, [r4, #0]
 8010812:	68e5      	ldr	r5, [r4, #12]
 8010814:	f8d9 2000 	ldr.w	r2, [r9]
 8010818:	f003 0306 	and.w	r3, r3, #6
 801081c:	2b04      	cmp	r3, #4
 801081e:	bf08      	it	eq
 8010820:	1aad      	subeq	r5, r5, r2
 8010822:	68a3      	ldr	r3, [r4, #8]
 8010824:	6922      	ldr	r2, [r4, #16]
 8010826:	bf0c      	ite	eq
 8010828:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801082c:	2500      	movne	r5, #0
 801082e:	4293      	cmp	r3, r2
 8010830:	bfc4      	itt	gt
 8010832:	1a9b      	subgt	r3, r3, r2
 8010834:	18ed      	addgt	r5, r5, r3
 8010836:	f04f 0900 	mov.w	r9, #0
 801083a:	341a      	adds	r4, #26
 801083c:	454d      	cmp	r5, r9
 801083e:	d11a      	bne.n	8010876 <_printf_common+0xd6>
 8010840:	2000      	movs	r0, #0
 8010842:	e008      	b.n	8010856 <_printf_common+0xb6>
 8010844:	2301      	movs	r3, #1
 8010846:	4652      	mov	r2, sl
 8010848:	4639      	mov	r1, r7
 801084a:	4630      	mov	r0, r6
 801084c:	47c0      	blx	r8
 801084e:	3001      	adds	r0, #1
 8010850:	d103      	bne.n	801085a <_printf_common+0xba>
 8010852:	f04f 30ff 	mov.w	r0, #4294967295
 8010856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801085a:	3501      	adds	r5, #1
 801085c:	e7c3      	b.n	80107e6 <_printf_common+0x46>
 801085e:	18e1      	adds	r1, r4, r3
 8010860:	1c5a      	adds	r2, r3, #1
 8010862:	2030      	movs	r0, #48	; 0x30
 8010864:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010868:	4422      	add	r2, r4
 801086a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801086e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010872:	3302      	adds	r3, #2
 8010874:	e7c5      	b.n	8010802 <_printf_common+0x62>
 8010876:	2301      	movs	r3, #1
 8010878:	4622      	mov	r2, r4
 801087a:	4639      	mov	r1, r7
 801087c:	4630      	mov	r0, r6
 801087e:	47c0      	blx	r8
 8010880:	3001      	adds	r0, #1
 8010882:	d0e6      	beq.n	8010852 <_printf_common+0xb2>
 8010884:	f109 0901 	add.w	r9, r9, #1
 8010888:	e7d8      	b.n	801083c <_printf_common+0x9c>
	...

0801088c <_printf_i>:
 801088c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010890:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010894:	460c      	mov	r4, r1
 8010896:	7e09      	ldrb	r1, [r1, #24]
 8010898:	b085      	sub	sp, #20
 801089a:	296e      	cmp	r1, #110	; 0x6e
 801089c:	4617      	mov	r7, r2
 801089e:	4606      	mov	r6, r0
 80108a0:	4698      	mov	r8, r3
 80108a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80108a4:	f000 80b3 	beq.w	8010a0e <_printf_i+0x182>
 80108a8:	d822      	bhi.n	80108f0 <_printf_i+0x64>
 80108aa:	2963      	cmp	r1, #99	; 0x63
 80108ac:	d036      	beq.n	801091c <_printf_i+0x90>
 80108ae:	d80a      	bhi.n	80108c6 <_printf_i+0x3a>
 80108b0:	2900      	cmp	r1, #0
 80108b2:	f000 80b9 	beq.w	8010a28 <_printf_i+0x19c>
 80108b6:	2958      	cmp	r1, #88	; 0x58
 80108b8:	f000 8083 	beq.w	80109c2 <_printf_i+0x136>
 80108bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80108c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80108c4:	e032      	b.n	801092c <_printf_i+0xa0>
 80108c6:	2964      	cmp	r1, #100	; 0x64
 80108c8:	d001      	beq.n	80108ce <_printf_i+0x42>
 80108ca:	2969      	cmp	r1, #105	; 0x69
 80108cc:	d1f6      	bne.n	80108bc <_printf_i+0x30>
 80108ce:	6820      	ldr	r0, [r4, #0]
 80108d0:	6813      	ldr	r3, [r2, #0]
 80108d2:	0605      	lsls	r5, r0, #24
 80108d4:	f103 0104 	add.w	r1, r3, #4
 80108d8:	d52a      	bpl.n	8010930 <_printf_i+0xa4>
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	6011      	str	r1, [r2, #0]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	da03      	bge.n	80108ea <_printf_i+0x5e>
 80108e2:	222d      	movs	r2, #45	; 0x2d
 80108e4:	425b      	negs	r3, r3
 80108e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80108ea:	486f      	ldr	r0, [pc, #444]	; (8010aa8 <_printf_i+0x21c>)
 80108ec:	220a      	movs	r2, #10
 80108ee:	e039      	b.n	8010964 <_printf_i+0xd8>
 80108f0:	2973      	cmp	r1, #115	; 0x73
 80108f2:	f000 809d 	beq.w	8010a30 <_printf_i+0x1a4>
 80108f6:	d808      	bhi.n	801090a <_printf_i+0x7e>
 80108f8:	296f      	cmp	r1, #111	; 0x6f
 80108fa:	d020      	beq.n	801093e <_printf_i+0xb2>
 80108fc:	2970      	cmp	r1, #112	; 0x70
 80108fe:	d1dd      	bne.n	80108bc <_printf_i+0x30>
 8010900:	6823      	ldr	r3, [r4, #0]
 8010902:	f043 0320 	orr.w	r3, r3, #32
 8010906:	6023      	str	r3, [r4, #0]
 8010908:	e003      	b.n	8010912 <_printf_i+0x86>
 801090a:	2975      	cmp	r1, #117	; 0x75
 801090c:	d017      	beq.n	801093e <_printf_i+0xb2>
 801090e:	2978      	cmp	r1, #120	; 0x78
 8010910:	d1d4      	bne.n	80108bc <_printf_i+0x30>
 8010912:	2378      	movs	r3, #120	; 0x78
 8010914:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010918:	4864      	ldr	r0, [pc, #400]	; (8010aac <_printf_i+0x220>)
 801091a:	e055      	b.n	80109c8 <_printf_i+0x13c>
 801091c:	6813      	ldr	r3, [r2, #0]
 801091e:	1d19      	adds	r1, r3, #4
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	6011      	str	r1, [r2, #0]
 8010924:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801092c:	2301      	movs	r3, #1
 801092e:	e08c      	b.n	8010a4a <_printf_i+0x1be>
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	6011      	str	r1, [r2, #0]
 8010934:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010938:	bf18      	it	ne
 801093a:	b21b      	sxthne	r3, r3
 801093c:	e7cf      	b.n	80108de <_printf_i+0x52>
 801093e:	6813      	ldr	r3, [r2, #0]
 8010940:	6825      	ldr	r5, [r4, #0]
 8010942:	1d18      	adds	r0, r3, #4
 8010944:	6010      	str	r0, [r2, #0]
 8010946:	0628      	lsls	r0, r5, #24
 8010948:	d501      	bpl.n	801094e <_printf_i+0xc2>
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	e002      	b.n	8010954 <_printf_i+0xc8>
 801094e:	0668      	lsls	r0, r5, #25
 8010950:	d5fb      	bpl.n	801094a <_printf_i+0xbe>
 8010952:	881b      	ldrh	r3, [r3, #0]
 8010954:	4854      	ldr	r0, [pc, #336]	; (8010aa8 <_printf_i+0x21c>)
 8010956:	296f      	cmp	r1, #111	; 0x6f
 8010958:	bf14      	ite	ne
 801095a:	220a      	movne	r2, #10
 801095c:	2208      	moveq	r2, #8
 801095e:	2100      	movs	r1, #0
 8010960:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010964:	6865      	ldr	r5, [r4, #4]
 8010966:	60a5      	str	r5, [r4, #8]
 8010968:	2d00      	cmp	r5, #0
 801096a:	f2c0 8095 	blt.w	8010a98 <_printf_i+0x20c>
 801096e:	6821      	ldr	r1, [r4, #0]
 8010970:	f021 0104 	bic.w	r1, r1, #4
 8010974:	6021      	str	r1, [r4, #0]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d13d      	bne.n	80109f6 <_printf_i+0x16a>
 801097a:	2d00      	cmp	r5, #0
 801097c:	f040 808e 	bne.w	8010a9c <_printf_i+0x210>
 8010980:	4665      	mov	r5, ip
 8010982:	2a08      	cmp	r2, #8
 8010984:	d10b      	bne.n	801099e <_printf_i+0x112>
 8010986:	6823      	ldr	r3, [r4, #0]
 8010988:	07db      	lsls	r3, r3, #31
 801098a:	d508      	bpl.n	801099e <_printf_i+0x112>
 801098c:	6923      	ldr	r3, [r4, #16]
 801098e:	6862      	ldr	r2, [r4, #4]
 8010990:	429a      	cmp	r2, r3
 8010992:	bfde      	ittt	le
 8010994:	2330      	movle	r3, #48	; 0x30
 8010996:	f805 3c01 	strble.w	r3, [r5, #-1]
 801099a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801099e:	ebac 0305 	sub.w	r3, ip, r5
 80109a2:	6123      	str	r3, [r4, #16]
 80109a4:	f8cd 8000 	str.w	r8, [sp]
 80109a8:	463b      	mov	r3, r7
 80109aa:	aa03      	add	r2, sp, #12
 80109ac:	4621      	mov	r1, r4
 80109ae:	4630      	mov	r0, r6
 80109b0:	f7ff fef6 	bl	80107a0 <_printf_common>
 80109b4:	3001      	adds	r0, #1
 80109b6:	d14d      	bne.n	8010a54 <_printf_i+0x1c8>
 80109b8:	f04f 30ff 	mov.w	r0, #4294967295
 80109bc:	b005      	add	sp, #20
 80109be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80109c2:	4839      	ldr	r0, [pc, #228]	; (8010aa8 <_printf_i+0x21c>)
 80109c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80109c8:	6813      	ldr	r3, [r2, #0]
 80109ca:	6821      	ldr	r1, [r4, #0]
 80109cc:	1d1d      	adds	r5, r3, #4
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	6015      	str	r5, [r2, #0]
 80109d2:	060a      	lsls	r2, r1, #24
 80109d4:	d50b      	bpl.n	80109ee <_printf_i+0x162>
 80109d6:	07ca      	lsls	r2, r1, #31
 80109d8:	bf44      	itt	mi
 80109da:	f041 0120 	orrmi.w	r1, r1, #32
 80109de:	6021      	strmi	r1, [r4, #0]
 80109e0:	b91b      	cbnz	r3, 80109ea <_printf_i+0x15e>
 80109e2:	6822      	ldr	r2, [r4, #0]
 80109e4:	f022 0220 	bic.w	r2, r2, #32
 80109e8:	6022      	str	r2, [r4, #0]
 80109ea:	2210      	movs	r2, #16
 80109ec:	e7b7      	b.n	801095e <_printf_i+0xd2>
 80109ee:	064d      	lsls	r5, r1, #25
 80109f0:	bf48      	it	mi
 80109f2:	b29b      	uxthmi	r3, r3
 80109f4:	e7ef      	b.n	80109d6 <_printf_i+0x14a>
 80109f6:	4665      	mov	r5, ip
 80109f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80109fc:	fb02 3311 	mls	r3, r2, r1, r3
 8010a00:	5cc3      	ldrb	r3, [r0, r3]
 8010a02:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010a06:	460b      	mov	r3, r1
 8010a08:	2900      	cmp	r1, #0
 8010a0a:	d1f5      	bne.n	80109f8 <_printf_i+0x16c>
 8010a0c:	e7b9      	b.n	8010982 <_printf_i+0xf6>
 8010a0e:	6813      	ldr	r3, [r2, #0]
 8010a10:	6825      	ldr	r5, [r4, #0]
 8010a12:	6961      	ldr	r1, [r4, #20]
 8010a14:	1d18      	adds	r0, r3, #4
 8010a16:	6010      	str	r0, [r2, #0]
 8010a18:	0628      	lsls	r0, r5, #24
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	d501      	bpl.n	8010a22 <_printf_i+0x196>
 8010a1e:	6019      	str	r1, [r3, #0]
 8010a20:	e002      	b.n	8010a28 <_printf_i+0x19c>
 8010a22:	066a      	lsls	r2, r5, #25
 8010a24:	d5fb      	bpl.n	8010a1e <_printf_i+0x192>
 8010a26:	8019      	strh	r1, [r3, #0]
 8010a28:	2300      	movs	r3, #0
 8010a2a:	6123      	str	r3, [r4, #16]
 8010a2c:	4665      	mov	r5, ip
 8010a2e:	e7b9      	b.n	80109a4 <_printf_i+0x118>
 8010a30:	6813      	ldr	r3, [r2, #0]
 8010a32:	1d19      	adds	r1, r3, #4
 8010a34:	6011      	str	r1, [r2, #0]
 8010a36:	681d      	ldr	r5, [r3, #0]
 8010a38:	6862      	ldr	r2, [r4, #4]
 8010a3a:	2100      	movs	r1, #0
 8010a3c:	4628      	mov	r0, r5
 8010a3e:	f7ef fbcf 	bl	80001e0 <memchr>
 8010a42:	b108      	cbz	r0, 8010a48 <_printf_i+0x1bc>
 8010a44:	1b40      	subs	r0, r0, r5
 8010a46:	6060      	str	r0, [r4, #4]
 8010a48:	6863      	ldr	r3, [r4, #4]
 8010a4a:	6123      	str	r3, [r4, #16]
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a52:	e7a7      	b.n	80109a4 <_printf_i+0x118>
 8010a54:	6923      	ldr	r3, [r4, #16]
 8010a56:	462a      	mov	r2, r5
 8010a58:	4639      	mov	r1, r7
 8010a5a:	4630      	mov	r0, r6
 8010a5c:	47c0      	blx	r8
 8010a5e:	3001      	adds	r0, #1
 8010a60:	d0aa      	beq.n	80109b8 <_printf_i+0x12c>
 8010a62:	6823      	ldr	r3, [r4, #0]
 8010a64:	079b      	lsls	r3, r3, #30
 8010a66:	d413      	bmi.n	8010a90 <_printf_i+0x204>
 8010a68:	68e0      	ldr	r0, [r4, #12]
 8010a6a:	9b03      	ldr	r3, [sp, #12]
 8010a6c:	4298      	cmp	r0, r3
 8010a6e:	bfb8      	it	lt
 8010a70:	4618      	movlt	r0, r3
 8010a72:	e7a3      	b.n	80109bc <_printf_i+0x130>
 8010a74:	2301      	movs	r3, #1
 8010a76:	464a      	mov	r2, r9
 8010a78:	4639      	mov	r1, r7
 8010a7a:	4630      	mov	r0, r6
 8010a7c:	47c0      	blx	r8
 8010a7e:	3001      	adds	r0, #1
 8010a80:	d09a      	beq.n	80109b8 <_printf_i+0x12c>
 8010a82:	3501      	adds	r5, #1
 8010a84:	68e3      	ldr	r3, [r4, #12]
 8010a86:	9a03      	ldr	r2, [sp, #12]
 8010a88:	1a9b      	subs	r3, r3, r2
 8010a8a:	42ab      	cmp	r3, r5
 8010a8c:	dcf2      	bgt.n	8010a74 <_printf_i+0x1e8>
 8010a8e:	e7eb      	b.n	8010a68 <_printf_i+0x1dc>
 8010a90:	2500      	movs	r5, #0
 8010a92:	f104 0919 	add.w	r9, r4, #25
 8010a96:	e7f5      	b.n	8010a84 <_printf_i+0x1f8>
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d1ac      	bne.n	80109f6 <_printf_i+0x16a>
 8010a9c:	7803      	ldrb	r3, [r0, #0]
 8010a9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010aa2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010aa6:	e76c      	b.n	8010982 <_printf_i+0xf6>
 8010aa8:	080135c1 	.word	0x080135c1
 8010aac:	080135d2 	.word	0x080135d2

08010ab0 <memcpy>:
 8010ab0:	b510      	push	{r4, lr}
 8010ab2:	1e43      	subs	r3, r0, #1
 8010ab4:	440a      	add	r2, r1
 8010ab6:	4291      	cmp	r1, r2
 8010ab8:	d100      	bne.n	8010abc <memcpy+0xc>
 8010aba:	bd10      	pop	{r4, pc}
 8010abc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010ac0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010ac4:	e7f7      	b.n	8010ab6 <memcpy+0x6>

08010ac6 <memmove>:
 8010ac6:	4288      	cmp	r0, r1
 8010ac8:	b510      	push	{r4, lr}
 8010aca:	eb01 0302 	add.w	r3, r1, r2
 8010ace:	d807      	bhi.n	8010ae0 <memmove+0x1a>
 8010ad0:	1e42      	subs	r2, r0, #1
 8010ad2:	4299      	cmp	r1, r3
 8010ad4:	d00a      	beq.n	8010aec <memmove+0x26>
 8010ad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010ada:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010ade:	e7f8      	b.n	8010ad2 <memmove+0xc>
 8010ae0:	4283      	cmp	r3, r0
 8010ae2:	d9f5      	bls.n	8010ad0 <memmove+0xa>
 8010ae4:	1881      	adds	r1, r0, r2
 8010ae6:	1ad2      	subs	r2, r2, r3
 8010ae8:	42d3      	cmn	r3, r2
 8010aea:	d100      	bne.n	8010aee <memmove+0x28>
 8010aec:	bd10      	pop	{r4, pc}
 8010aee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010af2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010af6:	e7f7      	b.n	8010ae8 <memmove+0x22>

08010af8 <_realloc_r>:
 8010af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010afa:	4607      	mov	r7, r0
 8010afc:	4614      	mov	r4, r2
 8010afe:	460e      	mov	r6, r1
 8010b00:	b921      	cbnz	r1, 8010b0c <_realloc_r+0x14>
 8010b02:	4611      	mov	r1, r2
 8010b04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010b08:	f7ff bc64 	b.w	80103d4 <_malloc_r>
 8010b0c:	b922      	cbnz	r2, 8010b18 <_realloc_r+0x20>
 8010b0e:	f7ff fc13 	bl	8010338 <_free_r>
 8010b12:	4625      	mov	r5, r4
 8010b14:	4628      	mov	r0, r5
 8010b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b18:	f000 f814 	bl	8010b44 <_malloc_usable_size_r>
 8010b1c:	42a0      	cmp	r0, r4
 8010b1e:	d20f      	bcs.n	8010b40 <_realloc_r+0x48>
 8010b20:	4621      	mov	r1, r4
 8010b22:	4638      	mov	r0, r7
 8010b24:	f7ff fc56 	bl	80103d4 <_malloc_r>
 8010b28:	4605      	mov	r5, r0
 8010b2a:	2800      	cmp	r0, #0
 8010b2c:	d0f2      	beq.n	8010b14 <_realloc_r+0x1c>
 8010b2e:	4631      	mov	r1, r6
 8010b30:	4622      	mov	r2, r4
 8010b32:	f7ff ffbd 	bl	8010ab0 <memcpy>
 8010b36:	4631      	mov	r1, r6
 8010b38:	4638      	mov	r0, r7
 8010b3a:	f7ff fbfd 	bl	8010338 <_free_r>
 8010b3e:	e7e9      	b.n	8010b14 <_realloc_r+0x1c>
 8010b40:	4635      	mov	r5, r6
 8010b42:	e7e7      	b.n	8010b14 <_realloc_r+0x1c>

08010b44 <_malloc_usable_size_r>:
 8010b44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b48:	1f18      	subs	r0, r3, #4
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	bfbc      	itt	lt
 8010b4e:	580b      	ldrlt	r3, [r1, r0]
 8010b50:	18c0      	addlt	r0, r0, r3
 8010b52:	4770      	bx	lr
 8010b54:	0000      	movs	r0, r0
	...

08010b58 <cos>:
 8010b58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010b5a:	ec51 0b10 	vmov	r0, r1, d0
 8010b5e:	4a1e      	ldr	r2, [pc, #120]	; (8010bd8 <cos+0x80>)
 8010b60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010b64:	4293      	cmp	r3, r2
 8010b66:	dc06      	bgt.n	8010b76 <cos+0x1e>
 8010b68:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8010bd0 <cos+0x78>
 8010b6c:	f001 fd60 	bl	8012630 <__kernel_cos>
 8010b70:	ec51 0b10 	vmov	r0, r1, d0
 8010b74:	e007      	b.n	8010b86 <cos+0x2e>
 8010b76:	4a19      	ldr	r2, [pc, #100]	; (8010bdc <cos+0x84>)
 8010b78:	4293      	cmp	r3, r2
 8010b7a:	dd09      	ble.n	8010b90 <cos+0x38>
 8010b7c:	ee10 2a10 	vmov	r2, s0
 8010b80:	460b      	mov	r3, r1
 8010b82:	f7ef fb81 	bl	8000288 <__aeabi_dsub>
 8010b86:	ec41 0b10 	vmov	d0, r0, r1
 8010b8a:	b005      	add	sp, #20
 8010b8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010b90:	4668      	mov	r0, sp
 8010b92:	f001 f9fd 	bl	8011f90 <__ieee754_rem_pio2>
 8010b96:	f000 0003 	and.w	r0, r0, #3
 8010b9a:	2801      	cmp	r0, #1
 8010b9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010ba0:	ed9d 0b00 	vldr	d0, [sp]
 8010ba4:	d007      	beq.n	8010bb6 <cos+0x5e>
 8010ba6:	2802      	cmp	r0, #2
 8010ba8:	d00e      	beq.n	8010bc8 <cos+0x70>
 8010baa:	2800      	cmp	r0, #0
 8010bac:	d0de      	beq.n	8010b6c <cos+0x14>
 8010bae:	2001      	movs	r0, #1
 8010bb0:	f002 f946 	bl	8012e40 <__kernel_sin>
 8010bb4:	e7dc      	b.n	8010b70 <cos+0x18>
 8010bb6:	f002 f943 	bl	8012e40 <__kernel_sin>
 8010bba:	ec53 2b10 	vmov	r2, r3, d0
 8010bbe:	ee10 0a10 	vmov	r0, s0
 8010bc2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010bc6:	e7de      	b.n	8010b86 <cos+0x2e>
 8010bc8:	f001 fd32 	bl	8012630 <__kernel_cos>
 8010bcc:	e7f5      	b.n	8010bba <cos+0x62>
 8010bce:	bf00      	nop
	...
 8010bd8:	3fe921fb 	.word	0x3fe921fb
 8010bdc:	7fefffff 	.word	0x7fefffff

08010be0 <round>:
 8010be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010be2:	ec57 6b10 	vmov	r6, r7, d0
 8010be6:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8010bea:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8010bee:	2c13      	cmp	r4, #19
 8010bf0:	463b      	mov	r3, r7
 8010bf2:	463d      	mov	r5, r7
 8010bf4:	dc17      	bgt.n	8010c26 <round+0x46>
 8010bf6:	2c00      	cmp	r4, #0
 8010bf8:	da09      	bge.n	8010c0e <round+0x2e>
 8010bfa:	3401      	adds	r4, #1
 8010bfc:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8010c00:	d103      	bne.n	8010c0a <round+0x2a>
 8010c02:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8010c06:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010c0a:	2100      	movs	r1, #0
 8010c0c:	e02c      	b.n	8010c68 <round+0x88>
 8010c0e:	4a18      	ldr	r2, [pc, #96]	; (8010c70 <round+0x90>)
 8010c10:	4122      	asrs	r2, r4
 8010c12:	4217      	tst	r7, r2
 8010c14:	d100      	bne.n	8010c18 <round+0x38>
 8010c16:	b19e      	cbz	r6, 8010c40 <round+0x60>
 8010c18:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010c1c:	4123      	asrs	r3, r4
 8010c1e:	442b      	add	r3, r5
 8010c20:	ea23 0302 	bic.w	r3, r3, r2
 8010c24:	e7f1      	b.n	8010c0a <round+0x2a>
 8010c26:	2c33      	cmp	r4, #51	; 0x33
 8010c28:	dd0d      	ble.n	8010c46 <round+0x66>
 8010c2a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8010c2e:	d107      	bne.n	8010c40 <round+0x60>
 8010c30:	4630      	mov	r0, r6
 8010c32:	4639      	mov	r1, r7
 8010c34:	ee10 2a10 	vmov	r2, s0
 8010c38:	f7ef fb28 	bl	800028c <__adddf3>
 8010c3c:	4606      	mov	r6, r0
 8010c3e:	460f      	mov	r7, r1
 8010c40:	ec47 6b10 	vmov	d0, r6, r7
 8010c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c46:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8010c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8010c4e:	40d0      	lsrs	r0, r2
 8010c50:	4206      	tst	r6, r0
 8010c52:	d0f5      	beq.n	8010c40 <round+0x60>
 8010c54:	2201      	movs	r2, #1
 8010c56:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8010c5a:	fa02 f404 	lsl.w	r4, r2, r4
 8010c5e:	1931      	adds	r1, r6, r4
 8010c60:	bf28      	it	cs
 8010c62:	189b      	addcs	r3, r3, r2
 8010c64:	ea21 0100 	bic.w	r1, r1, r0
 8010c68:	461f      	mov	r7, r3
 8010c6a:	460e      	mov	r6, r1
 8010c6c:	e7e8      	b.n	8010c40 <round+0x60>
 8010c6e:	bf00      	nop
 8010c70:	000fffff 	.word	0x000fffff
 8010c74:	00000000 	.word	0x00000000

08010c78 <sin>:
 8010c78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010c7a:	ec51 0b10 	vmov	r0, r1, d0
 8010c7e:	4a20      	ldr	r2, [pc, #128]	; (8010d00 <sin+0x88>)
 8010c80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010c84:	4293      	cmp	r3, r2
 8010c86:	dc07      	bgt.n	8010c98 <sin+0x20>
 8010c88:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8010cf8 <sin+0x80>
 8010c8c:	2000      	movs	r0, #0
 8010c8e:	f002 f8d7 	bl	8012e40 <__kernel_sin>
 8010c92:	ec51 0b10 	vmov	r0, r1, d0
 8010c96:	e007      	b.n	8010ca8 <sin+0x30>
 8010c98:	4a1a      	ldr	r2, [pc, #104]	; (8010d04 <sin+0x8c>)
 8010c9a:	4293      	cmp	r3, r2
 8010c9c:	dd09      	ble.n	8010cb2 <sin+0x3a>
 8010c9e:	ee10 2a10 	vmov	r2, s0
 8010ca2:	460b      	mov	r3, r1
 8010ca4:	f7ef faf0 	bl	8000288 <__aeabi_dsub>
 8010ca8:	ec41 0b10 	vmov	d0, r0, r1
 8010cac:	b005      	add	sp, #20
 8010cae:	f85d fb04 	ldr.w	pc, [sp], #4
 8010cb2:	4668      	mov	r0, sp
 8010cb4:	f001 f96c 	bl	8011f90 <__ieee754_rem_pio2>
 8010cb8:	f000 0003 	and.w	r0, r0, #3
 8010cbc:	2801      	cmp	r0, #1
 8010cbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010cc2:	ed9d 0b00 	vldr	d0, [sp]
 8010cc6:	d004      	beq.n	8010cd2 <sin+0x5a>
 8010cc8:	2802      	cmp	r0, #2
 8010cca:	d005      	beq.n	8010cd8 <sin+0x60>
 8010ccc:	b970      	cbnz	r0, 8010cec <sin+0x74>
 8010cce:	2001      	movs	r0, #1
 8010cd0:	e7dd      	b.n	8010c8e <sin+0x16>
 8010cd2:	f001 fcad 	bl	8012630 <__kernel_cos>
 8010cd6:	e7dc      	b.n	8010c92 <sin+0x1a>
 8010cd8:	2001      	movs	r0, #1
 8010cda:	f002 f8b1 	bl	8012e40 <__kernel_sin>
 8010cde:	ec53 2b10 	vmov	r2, r3, d0
 8010ce2:	ee10 0a10 	vmov	r0, s0
 8010ce6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010cea:	e7dd      	b.n	8010ca8 <sin+0x30>
 8010cec:	f001 fca0 	bl	8012630 <__kernel_cos>
 8010cf0:	e7f5      	b.n	8010cde <sin+0x66>
 8010cf2:	bf00      	nop
 8010cf4:	f3af 8000 	nop.w
	...
 8010d00:	3fe921fb 	.word	0x3fe921fb
 8010d04:	7fefffff 	.word	0x7fefffff

08010d08 <asin>:
 8010d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d0a:	ed2d 8b02 	vpush	{d8}
 8010d0e:	4e26      	ldr	r6, [pc, #152]	; (8010da8 <asin+0xa0>)
 8010d10:	b08b      	sub	sp, #44	; 0x2c
 8010d12:	ec55 4b10 	vmov	r4, r5, d0
 8010d16:	f000 fa1b 	bl	8011150 <__ieee754_asin>
 8010d1a:	f996 3000 	ldrsb.w	r3, [r6]
 8010d1e:	eeb0 8a40 	vmov.f32	s16, s0
 8010d22:	eef0 8a60 	vmov.f32	s17, s1
 8010d26:	3301      	adds	r3, #1
 8010d28:	d036      	beq.n	8010d98 <asin+0x90>
 8010d2a:	4622      	mov	r2, r4
 8010d2c:	462b      	mov	r3, r5
 8010d2e:	4620      	mov	r0, r4
 8010d30:	4629      	mov	r1, r5
 8010d32:	f7ef fefb 	bl	8000b2c <__aeabi_dcmpun>
 8010d36:	4607      	mov	r7, r0
 8010d38:	bb70      	cbnz	r0, 8010d98 <asin+0x90>
 8010d3a:	ec45 4b10 	vmov	d0, r4, r5
 8010d3e:	f002 f939 	bl	8012fb4 <fabs>
 8010d42:	2200      	movs	r2, #0
 8010d44:	4b19      	ldr	r3, [pc, #100]	; (8010dac <asin+0xa4>)
 8010d46:	ec51 0b10 	vmov	r0, r1, d0
 8010d4a:	f7ef fee5 	bl	8000b18 <__aeabi_dcmpgt>
 8010d4e:	b318      	cbz	r0, 8010d98 <asin+0x90>
 8010d50:	2301      	movs	r3, #1
 8010d52:	9300      	str	r3, [sp, #0]
 8010d54:	4816      	ldr	r0, [pc, #88]	; (8010db0 <asin+0xa8>)
 8010d56:	4b17      	ldr	r3, [pc, #92]	; (8010db4 <asin+0xac>)
 8010d58:	9301      	str	r3, [sp, #4]
 8010d5a:	9708      	str	r7, [sp, #32]
 8010d5c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8010d60:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8010d64:	f002 f9c0 	bl	80130e8 <nan>
 8010d68:	f996 3000 	ldrsb.w	r3, [r6]
 8010d6c:	2b02      	cmp	r3, #2
 8010d6e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8010d72:	d104      	bne.n	8010d7e <asin+0x76>
 8010d74:	f7ff fa9e 	bl	80102b4 <__errno>
 8010d78:	2321      	movs	r3, #33	; 0x21
 8010d7a:	6003      	str	r3, [r0, #0]
 8010d7c:	e004      	b.n	8010d88 <asin+0x80>
 8010d7e:	4668      	mov	r0, sp
 8010d80:	f002 f9ae 	bl	80130e0 <matherr>
 8010d84:	2800      	cmp	r0, #0
 8010d86:	d0f5      	beq.n	8010d74 <asin+0x6c>
 8010d88:	9b08      	ldr	r3, [sp, #32]
 8010d8a:	b11b      	cbz	r3, 8010d94 <asin+0x8c>
 8010d8c:	f7ff fa92 	bl	80102b4 <__errno>
 8010d90:	9b08      	ldr	r3, [sp, #32]
 8010d92:	6003      	str	r3, [r0, #0]
 8010d94:	ed9d 8b06 	vldr	d8, [sp, #24]
 8010d98:	eeb0 0a48 	vmov.f32	s0, s16
 8010d9c:	eef0 0a68 	vmov.f32	s1, s17
 8010da0:	b00b      	add	sp, #44	; 0x2c
 8010da2:	ecbd 8b02 	vpop	{d8}
 8010da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010da8:	20000228 	.word	0x20000228
 8010dac:	3ff00000 	.word	0x3ff00000
 8010db0:	080135b5 	.word	0x080135b5
 8010db4:	080135e3 	.word	0x080135e3

08010db8 <pow>:
 8010db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dbc:	ed2d 8b04 	vpush	{d8-d9}
 8010dc0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8011094 <pow+0x2dc>
 8010dc4:	b08d      	sub	sp, #52	; 0x34
 8010dc6:	ec57 6b10 	vmov	r6, r7, d0
 8010dca:	ec55 4b11 	vmov	r4, r5, d1
 8010dce:	f000 fbcf 	bl	8011570 <__ieee754_pow>
 8010dd2:	f999 3000 	ldrsb.w	r3, [r9]
 8010dd6:	9300      	str	r3, [sp, #0]
 8010dd8:	3301      	adds	r3, #1
 8010dda:	eeb0 8a40 	vmov.f32	s16, s0
 8010dde:	eef0 8a60 	vmov.f32	s17, s1
 8010de2:	46c8      	mov	r8, r9
 8010de4:	d05f      	beq.n	8010ea6 <pow+0xee>
 8010de6:	4622      	mov	r2, r4
 8010de8:	462b      	mov	r3, r5
 8010dea:	4620      	mov	r0, r4
 8010dec:	4629      	mov	r1, r5
 8010dee:	f7ef fe9d 	bl	8000b2c <__aeabi_dcmpun>
 8010df2:	4683      	mov	fp, r0
 8010df4:	2800      	cmp	r0, #0
 8010df6:	d156      	bne.n	8010ea6 <pow+0xee>
 8010df8:	4632      	mov	r2, r6
 8010dfa:	463b      	mov	r3, r7
 8010dfc:	4630      	mov	r0, r6
 8010dfe:	4639      	mov	r1, r7
 8010e00:	f7ef fe94 	bl	8000b2c <__aeabi_dcmpun>
 8010e04:	9001      	str	r0, [sp, #4]
 8010e06:	b1e8      	cbz	r0, 8010e44 <pow+0x8c>
 8010e08:	2200      	movs	r2, #0
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	4620      	mov	r0, r4
 8010e0e:	4629      	mov	r1, r5
 8010e10:	f7ef fe5a 	bl	8000ac8 <__aeabi_dcmpeq>
 8010e14:	2800      	cmp	r0, #0
 8010e16:	d046      	beq.n	8010ea6 <pow+0xee>
 8010e18:	2301      	movs	r3, #1
 8010e1a:	9302      	str	r3, [sp, #8]
 8010e1c:	4b96      	ldr	r3, [pc, #600]	; (8011078 <pow+0x2c0>)
 8010e1e:	9303      	str	r3, [sp, #12]
 8010e20:	4b96      	ldr	r3, [pc, #600]	; (801107c <pow+0x2c4>)
 8010e22:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8010e26:	2200      	movs	r2, #0
 8010e28:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010e2c:	9b00      	ldr	r3, [sp, #0]
 8010e2e:	2b02      	cmp	r3, #2
 8010e30:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010e34:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010e38:	d033      	beq.n	8010ea2 <pow+0xea>
 8010e3a:	a802      	add	r0, sp, #8
 8010e3c:	f002 f950 	bl	80130e0 <matherr>
 8010e40:	bb48      	cbnz	r0, 8010e96 <pow+0xde>
 8010e42:	e05d      	b.n	8010f00 <pow+0x148>
 8010e44:	f04f 0a00 	mov.w	sl, #0
 8010e48:	f04f 0b00 	mov.w	fp, #0
 8010e4c:	4652      	mov	r2, sl
 8010e4e:	465b      	mov	r3, fp
 8010e50:	4630      	mov	r0, r6
 8010e52:	4639      	mov	r1, r7
 8010e54:	f7ef fe38 	bl	8000ac8 <__aeabi_dcmpeq>
 8010e58:	ec4b ab19 	vmov	d9, sl, fp
 8010e5c:	2800      	cmp	r0, #0
 8010e5e:	d054      	beq.n	8010f0a <pow+0x152>
 8010e60:	4652      	mov	r2, sl
 8010e62:	465b      	mov	r3, fp
 8010e64:	4620      	mov	r0, r4
 8010e66:	4629      	mov	r1, r5
 8010e68:	f7ef fe2e 	bl	8000ac8 <__aeabi_dcmpeq>
 8010e6c:	4680      	mov	r8, r0
 8010e6e:	b318      	cbz	r0, 8010eb8 <pow+0x100>
 8010e70:	2301      	movs	r3, #1
 8010e72:	9302      	str	r3, [sp, #8]
 8010e74:	4b80      	ldr	r3, [pc, #512]	; (8011078 <pow+0x2c0>)
 8010e76:	9303      	str	r3, [sp, #12]
 8010e78:	9b01      	ldr	r3, [sp, #4]
 8010e7a:	930a      	str	r3, [sp, #40]	; 0x28
 8010e7c:	9b00      	ldr	r3, [sp, #0]
 8010e7e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010e82:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010e86:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d0d5      	beq.n	8010e3a <pow+0x82>
 8010e8e:	4b7b      	ldr	r3, [pc, #492]	; (801107c <pow+0x2c4>)
 8010e90:	2200      	movs	r2, #0
 8010e92:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e98:	b11b      	cbz	r3, 8010ea2 <pow+0xea>
 8010e9a:	f7ff fa0b 	bl	80102b4 <__errno>
 8010e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ea0:	6003      	str	r3, [r0, #0]
 8010ea2:	ed9d 8b08 	vldr	d8, [sp, #32]
 8010ea6:	eeb0 0a48 	vmov.f32	s0, s16
 8010eaa:	eef0 0a68 	vmov.f32	s1, s17
 8010eae:	b00d      	add	sp, #52	; 0x34
 8010eb0:	ecbd 8b04 	vpop	{d8-d9}
 8010eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eb8:	ec45 4b10 	vmov	d0, r4, r5
 8010ebc:	f002 f883 	bl	8012fc6 <finite>
 8010ec0:	2800      	cmp	r0, #0
 8010ec2:	d0f0      	beq.n	8010ea6 <pow+0xee>
 8010ec4:	4652      	mov	r2, sl
 8010ec6:	465b      	mov	r3, fp
 8010ec8:	4620      	mov	r0, r4
 8010eca:	4629      	mov	r1, r5
 8010ecc:	f7ef fe06 	bl	8000adc <__aeabi_dcmplt>
 8010ed0:	2800      	cmp	r0, #0
 8010ed2:	d0e8      	beq.n	8010ea6 <pow+0xee>
 8010ed4:	2301      	movs	r3, #1
 8010ed6:	9302      	str	r3, [sp, #8]
 8010ed8:	4b67      	ldr	r3, [pc, #412]	; (8011078 <pow+0x2c0>)
 8010eda:	9303      	str	r3, [sp, #12]
 8010edc:	f999 3000 	ldrsb.w	r3, [r9]
 8010ee0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8010ee4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010ee8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010eec:	b913      	cbnz	r3, 8010ef4 <pow+0x13c>
 8010eee:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8010ef2:	e7a2      	b.n	8010e3a <pow+0x82>
 8010ef4:	4962      	ldr	r1, [pc, #392]	; (8011080 <pow+0x2c8>)
 8010ef6:	2000      	movs	r0, #0
 8010ef8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010efc:	2b02      	cmp	r3, #2
 8010efe:	d19c      	bne.n	8010e3a <pow+0x82>
 8010f00:	f7ff f9d8 	bl	80102b4 <__errno>
 8010f04:	2321      	movs	r3, #33	; 0x21
 8010f06:	6003      	str	r3, [r0, #0]
 8010f08:	e7c5      	b.n	8010e96 <pow+0xde>
 8010f0a:	eeb0 0a48 	vmov.f32	s0, s16
 8010f0e:	eef0 0a68 	vmov.f32	s1, s17
 8010f12:	f002 f858 	bl	8012fc6 <finite>
 8010f16:	9000      	str	r0, [sp, #0]
 8010f18:	2800      	cmp	r0, #0
 8010f1a:	f040 8081 	bne.w	8011020 <pow+0x268>
 8010f1e:	ec47 6b10 	vmov	d0, r6, r7
 8010f22:	f002 f850 	bl	8012fc6 <finite>
 8010f26:	2800      	cmp	r0, #0
 8010f28:	d07a      	beq.n	8011020 <pow+0x268>
 8010f2a:	ec45 4b10 	vmov	d0, r4, r5
 8010f2e:	f002 f84a 	bl	8012fc6 <finite>
 8010f32:	2800      	cmp	r0, #0
 8010f34:	d074      	beq.n	8011020 <pow+0x268>
 8010f36:	ec53 2b18 	vmov	r2, r3, d8
 8010f3a:	ee18 0a10 	vmov	r0, s16
 8010f3e:	4619      	mov	r1, r3
 8010f40:	f7ef fdf4 	bl	8000b2c <__aeabi_dcmpun>
 8010f44:	f999 9000 	ldrsb.w	r9, [r9]
 8010f48:	4b4b      	ldr	r3, [pc, #300]	; (8011078 <pow+0x2c0>)
 8010f4a:	b1b0      	cbz	r0, 8010f7a <pow+0x1c2>
 8010f4c:	2201      	movs	r2, #1
 8010f4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010f52:	9b00      	ldr	r3, [sp, #0]
 8010f54:	930a      	str	r3, [sp, #40]	; 0x28
 8010f56:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010f5a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010f5e:	f1b9 0f00 	cmp.w	r9, #0
 8010f62:	d0c4      	beq.n	8010eee <pow+0x136>
 8010f64:	4652      	mov	r2, sl
 8010f66:	465b      	mov	r3, fp
 8010f68:	4650      	mov	r0, sl
 8010f6a:	4659      	mov	r1, fp
 8010f6c:	f7ef fc6e 	bl	800084c <__aeabi_ddiv>
 8010f70:	f1b9 0f02 	cmp.w	r9, #2
 8010f74:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010f78:	e7c1      	b.n	8010efe <pow+0x146>
 8010f7a:	2203      	movs	r2, #3
 8010f7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010f80:	900a      	str	r0, [sp, #40]	; 0x28
 8010f82:	4629      	mov	r1, r5
 8010f84:	4620      	mov	r0, r4
 8010f86:	2200      	movs	r2, #0
 8010f88:	4b3e      	ldr	r3, [pc, #248]	; (8011084 <pow+0x2cc>)
 8010f8a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010f8e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010f92:	f7ef fb31 	bl	80005f8 <__aeabi_dmul>
 8010f96:	4604      	mov	r4, r0
 8010f98:	460d      	mov	r5, r1
 8010f9a:	f1b9 0f00 	cmp.w	r9, #0
 8010f9e:	d124      	bne.n	8010fea <pow+0x232>
 8010fa0:	4b39      	ldr	r3, [pc, #228]	; (8011088 <pow+0x2d0>)
 8010fa2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8010fa6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010faa:	4630      	mov	r0, r6
 8010fac:	4652      	mov	r2, sl
 8010fae:	465b      	mov	r3, fp
 8010fb0:	4639      	mov	r1, r7
 8010fb2:	f7ef fd93 	bl	8000adc <__aeabi_dcmplt>
 8010fb6:	2800      	cmp	r0, #0
 8010fb8:	d056      	beq.n	8011068 <pow+0x2b0>
 8010fba:	ec45 4b10 	vmov	d0, r4, r5
 8010fbe:	f002 f89b 	bl	80130f8 <rint>
 8010fc2:	4622      	mov	r2, r4
 8010fc4:	462b      	mov	r3, r5
 8010fc6:	ec51 0b10 	vmov	r0, r1, d0
 8010fca:	f7ef fd7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8010fce:	b920      	cbnz	r0, 8010fda <pow+0x222>
 8010fd0:	4b2e      	ldr	r3, [pc, #184]	; (801108c <pow+0x2d4>)
 8010fd2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8010fd6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010fda:	f998 3000 	ldrsb.w	r3, [r8]
 8010fde:	2b02      	cmp	r3, #2
 8010fe0:	d142      	bne.n	8011068 <pow+0x2b0>
 8010fe2:	f7ff f967 	bl	80102b4 <__errno>
 8010fe6:	2322      	movs	r3, #34	; 0x22
 8010fe8:	e78d      	b.n	8010f06 <pow+0x14e>
 8010fea:	4b29      	ldr	r3, [pc, #164]	; (8011090 <pow+0x2d8>)
 8010fec:	2200      	movs	r2, #0
 8010fee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010ff2:	4630      	mov	r0, r6
 8010ff4:	4652      	mov	r2, sl
 8010ff6:	465b      	mov	r3, fp
 8010ff8:	4639      	mov	r1, r7
 8010ffa:	f7ef fd6f 	bl	8000adc <__aeabi_dcmplt>
 8010ffe:	2800      	cmp	r0, #0
 8011000:	d0eb      	beq.n	8010fda <pow+0x222>
 8011002:	ec45 4b10 	vmov	d0, r4, r5
 8011006:	f002 f877 	bl	80130f8 <rint>
 801100a:	4622      	mov	r2, r4
 801100c:	462b      	mov	r3, r5
 801100e:	ec51 0b10 	vmov	r0, r1, d0
 8011012:	f7ef fd59 	bl	8000ac8 <__aeabi_dcmpeq>
 8011016:	2800      	cmp	r0, #0
 8011018:	d1df      	bne.n	8010fda <pow+0x222>
 801101a:	2200      	movs	r2, #0
 801101c:	4b18      	ldr	r3, [pc, #96]	; (8011080 <pow+0x2c8>)
 801101e:	e7da      	b.n	8010fd6 <pow+0x21e>
 8011020:	2200      	movs	r2, #0
 8011022:	2300      	movs	r3, #0
 8011024:	ec51 0b18 	vmov	r0, r1, d8
 8011028:	f7ef fd4e 	bl	8000ac8 <__aeabi_dcmpeq>
 801102c:	2800      	cmp	r0, #0
 801102e:	f43f af3a 	beq.w	8010ea6 <pow+0xee>
 8011032:	ec47 6b10 	vmov	d0, r6, r7
 8011036:	f001 ffc6 	bl	8012fc6 <finite>
 801103a:	2800      	cmp	r0, #0
 801103c:	f43f af33 	beq.w	8010ea6 <pow+0xee>
 8011040:	ec45 4b10 	vmov	d0, r4, r5
 8011044:	f001 ffbf 	bl	8012fc6 <finite>
 8011048:	2800      	cmp	r0, #0
 801104a:	f43f af2c 	beq.w	8010ea6 <pow+0xee>
 801104e:	2304      	movs	r3, #4
 8011050:	9302      	str	r3, [sp, #8]
 8011052:	4b09      	ldr	r3, [pc, #36]	; (8011078 <pow+0x2c0>)
 8011054:	9303      	str	r3, [sp, #12]
 8011056:	2300      	movs	r3, #0
 8011058:	930a      	str	r3, [sp, #40]	; 0x28
 801105a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801105e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011062:	ed8d 9b08 	vstr	d9, [sp, #32]
 8011066:	e7b8      	b.n	8010fda <pow+0x222>
 8011068:	a802      	add	r0, sp, #8
 801106a:	f002 f839 	bl	80130e0 <matherr>
 801106e:	2800      	cmp	r0, #0
 8011070:	f47f af11 	bne.w	8010e96 <pow+0xde>
 8011074:	e7b5      	b.n	8010fe2 <pow+0x22a>
 8011076:	bf00      	nop
 8011078:	080135e8 	.word	0x080135e8
 801107c:	3ff00000 	.word	0x3ff00000
 8011080:	fff00000 	.word	0xfff00000
 8011084:	3fe00000 	.word	0x3fe00000
 8011088:	47efffff 	.word	0x47efffff
 801108c:	c7efffff 	.word	0xc7efffff
 8011090:	7ff00000 	.word	0x7ff00000
 8011094:	20000228 	.word	0x20000228

08011098 <sqrt>:
 8011098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801109c:	ed2d 8b02 	vpush	{d8}
 80110a0:	b08b      	sub	sp, #44	; 0x2c
 80110a2:	ec55 4b10 	vmov	r4, r5, d0
 80110a6:	f001 f965 	bl	8012374 <__ieee754_sqrt>
 80110aa:	4b26      	ldr	r3, [pc, #152]	; (8011144 <sqrt+0xac>)
 80110ac:	eeb0 8a40 	vmov.f32	s16, s0
 80110b0:	eef0 8a60 	vmov.f32	s17, s1
 80110b4:	f993 6000 	ldrsb.w	r6, [r3]
 80110b8:	1c73      	adds	r3, r6, #1
 80110ba:	d02a      	beq.n	8011112 <sqrt+0x7a>
 80110bc:	4622      	mov	r2, r4
 80110be:	462b      	mov	r3, r5
 80110c0:	4620      	mov	r0, r4
 80110c2:	4629      	mov	r1, r5
 80110c4:	f7ef fd32 	bl	8000b2c <__aeabi_dcmpun>
 80110c8:	4607      	mov	r7, r0
 80110ca:	bb10      	cbnz	r0, 8011112 <sqrt+0x7a>
 80110cc:	f04f 0800 	mov.w	r8, #0
 80110d0:	f04f 0900 	mov.w	r9, #0
 80110d4:	4642      	mov	r2, r8
 80110d6:	464b      	mov	r3, r9
 80110d8:	4620      	mov	r0, r4
 80110da:	4629      	mov	r1, r5
 80110dc:	f7ef fcfe 	bl	8000adc <__aeabi_dcmplt>
 80110e0:	b1b8      	cbz	r0, 8011112 <sqrt+0x7a>
 80110e2:	2301      	movs	r3, #1
 80110e4:	9300      	str	r3, [sp, #0]
 80110e6:	4b18      	ldr	r3, [pc, #96]	; (8011148 <sqrt+0xb0>)
 80110e8:	9301      	str	r3, [sp, #4]
 80110ea:	9708      	str	r7, [sp, #32]
 80110ec:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80110f0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80110f4:	b9b6      	cbnz	r6, 8011124 <sqrt+0x8c>
 80110f6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80110fa:	4668      	mov	r0, sp
 80110fc:	f001 fff0 	bl	80130e0 <matherr>
 8011100:	b1d0      	cbz	r0, 8011138 <sqrt+0xa0>
 8011102:	9b08      	ldr	r3, [sp, #32]
 8011104:	b11b      	cbz	r3, 801110e <sqrt+0x76>
 8011106:	f7ff f8d5 	bl	80102b4 <__errno>
 801110a:	9b08      	ldr	r3, [sp, #32]
 801110c:	6003      	str	r3, [r0, #0]
 801110e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8011112:	eeb0 0a48 	vmov.f32	s0, s16
 8011116:	eef0 0a68 	vmov.f32	s1, s17
 801111a:	b00b      	add	sp, #44	; 0x2c
 801111c:	ecbd 8b02 	vpop	{d8}
 8011120:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011124:	4642      	mov	r2, r8
 8011126:	464b      	mov	r3, r9
 8011128:	4640      	mov	r0, r8
 801112a:	4649      	mov	r1, r9
 801112c:	f7ef fb8e 	bl	800084c <__aeabi_ddiv>
 8011130:	2e02      	cmp	r6, #2
 8011132:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011136:	d1e0      	bne.n	80110fa <sqrt+0x62>
 8011138:	f7ff f8bc 	bl	80102b4 <__errno>
 801113c:	2321      	movs	r3, #33	; 0x21
 801113e:	6003      	str	r3, [r0, #0]
 8011140:	e7df      	b.n	8011102 <sqrt+0x6a>
 8011142:	bf00      	nop
 8011144:	20000228 	.word	0x20000228
 8011148:	080135ec 	.word	0x080135ec

0801114c <atan2f>:
 801114c:	f001 b9c2 	b.w	80124d4 <__ieee754_atan2f>

08011150 <__ieee754_asin>:
 8011150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011154:	ec55 4b10 	vmov	r4, r5, d0
 8011158:	4bcb      	ldr	r3, [pc, #812]	; (8011488 <__ieee754_asin+0x338>)
 801115a:	b087      	sub	sp, #28
 801115c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8011160:	429f      	cmp	r7, r3
 8011162:	9501      	str	r5, [sp, #4]
 8011164:	dd31      	ble.n	80111ca <__ieee754_asin+0x7a>
 8011166:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 801116a:	ee10 3a10 	vmov	r3, s0
 801116e:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 8011172:	433b      	orrs	r3, r7
 8011174:	d117      	bne.n	80111a6 <__ieee754_asin+0x56>
 8011176:	a3aa      	add	r3, pc, #680	; (adr r3, 8011420 <__ieee754_asin+0x2d0>)
 8011178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801117c:	ee10 0a10 	vmov	r0, s0
 8011180:	4629      	mov	r1, r5
 8011182:	f7ef fa39 	bl	80005f8 <__aeabi_dmul>
 8011186:	a3a8      	add	r3, pc, #672	; (adr r3, 8011428 <__ieee754_asin+0x2d8>)
 8011188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801118c:	4606      	mov	r6, r0
 801118e:	460f      	mov	r7, r1
 8011190:	4620      	mov	r0, r4
 8011192:	4629      	mov	r1, r5
 8011194:	f7ef fa30 	bl	80005f8 <__aeabi_dmul>
 8011198:	4602      	mov	r2, r0
 801119a:	460b      	mov	r3, r1
 801119c:	4630      	mov	r0, r6
 801119e:	4639      	mov	r1, r7
 80111a0:	f7ef f874 	bl	800028c <__adddf3>
 80111a4:	e00a      	b.n	80111bc <__ieee754_asin+0x6c>
 80111a6:	ee10 2a10 	vmov	r2, s0
 80111aa:	462b      	mov	r3, r5
 80111ac:	4620      	mov	r0, r4
 80111ae:	4629      	mov	r1, r5
 80111b0:	f7ef f86a 	bl	8000288 <__aeabi_dsub>
 80111b4:	4602      	mov	r2, r0
 80111b6:	460b      	mov	r3, r1
 80111b8:	f7ef fb48 	bl	800084c <__aeabi_ddiv>
 80111bc:	4604      	mov	r4, r0
 80111be:	460d      	mov	r5, r1
 80111c0:	ec45 4b10 	vmov	d0, r4, r5
 80111c4:	b007      	add	sp, #28
 80111c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111ca:	4bb0      	ldr	r3, [pc, #704]	; (801148c <__ieee754_asin+0x33c>)
 80111cc:	429f      	cmp	r7, r3
 80111ce:	dc11      	bgt.n	80111f4 <__ieee754_asin+0xa4>
 80111d0:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 80111d4:	f280 80ae 	bge.w	8011334 <__ieee754_asin+0x1e4>
 80111d8:	a395      	add	r3, pc, #596	; (adr r3, 8011430 <__ieee754_asin+0x2e0>)
 80111da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111de:	ee10 0a10 	vmov	r0, s0
 80111e2:	4629      	mov	r1, r5
 80111e4:	f7ef f852 	bl	800028c <__adddf3>
 80111e8:	2200      	movs	r2, #0
 80111ea:	4ba9      	ldr	r3, [pc, #676]	; (8011490 <__ieee754_asin+0x340>)
 80111ec:	f7ef fc94 	bl	8000b18 <__aeabi_dcmpgt>
 80111f0:	2800      	cmp	r0, #0
 80111f2:	d1e5      	bne.n	80111c0 <__ieee754_asin+0x70>
 80111f4:	ec45 4b10 	vmov	d0, r4, r5
 80111f8:	f001 fedc 	bl	8012fb4 <fabs>
 80111fc:	2000      	movs	r0, #0
 80111fe:	ec53 2b10 	vmov	r2, r3, d0
 8011202:	49a3      	ldr	r1, [pc, #652]	; (8011490 <__ieee754_asin+0x340>)
 8011204:	f7ef f840 	bl	8000288 <__aeabi_dsub>
 8011208:	2200      	movs	r2, #0
 801120a:	4ba2      	ldr	r3, [pc, #648]	; (8011494 <__ieee754_asin+0x344>)
 801120c:	f7ef f9f4 	bl	80005f8 <__aeabi_dmul>
 8011210:	a389      	add	r3, pc, #548	; (adr r3, 8011438 <__ieee754_asin+0x2e8>)
 8011212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011216:	4604      	mov	r4, r0
 8011218:	460d      	mov	r5, r1
 801121a:	f7ef f9ed 	bl	80005f8 <__aeabi_dmul>
 801121e:	a388      	add	r3, pc, #544	; (adr r3, 8011440 <__ieee754_asin+0x2f0>)
 8011220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011224:	f7ef f832 	bl	800028c <__adddf3>
 8011228:	4622      	mov	r2, r4
 801122a:	462b      	mov	r3, r5
 801122c:	f7ef f9e4 	bl	80005f8 <__aeabi_dmul>
 8011230:	a385      	add	r3, pc, #532	; (adr r3, 8011448 <__ieee754_asin+0x2f8>)
 8011232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011236:	f7ef f827 	bl	8000288 <__aeabi_dsub>
 801123a:	4622      	mov	r2, r4
 801123c:	462b      	mov	r3, r5
 801123e:	f7ef f9db 	bl	80005f8 <__aeabi_dmul>
 8011242:	a383      	add	r3, pc, #524	; (adr r3, 8011450 <__ieee754_asin+0x300>)
 8011244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011248:	f7ef f820 	bl	800028c <__adddf3>
 801124c:	4622      	mov	r2, r4
 801124e:	462b      	mov	r3, r5
 8011250:	f7ef f9d2 	bl	80005f8 <__aeabi_dmul>
 8011254:	a380      	add	r3, pc, #512	; (adr r3, 8011458 <__ieee754_asin+0x308>)
 8011256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801125a:	f7ef f815 	bl	8000288 <__aeabi_dsub>
 801125e:	4622      	mov	r2, r4
 8011260:	462b      	mov	r3, r5
 8011262:	f7ef f9c9 	bl	80005f8 <__aeabi_dmul>
 8011266:	a37e      	add	r3, pc, #504	; (adr r3, 8011460 <__ieee754_asin+0x310>)
 8011268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801126c:	f7ef f80e 	bl	800028c <__adddf3>
 8011270:	4622      	mov	r2, r4
 8011272:	462b      	mov	r3, r5
 8011274:	f7ef f9c0 	bl	80005f8 <__aeabi_dmul>
 8011278:	a37b      	add	r3, pc, #492	; (adr r3, 8011468 <__ieee754_asin+0x318>)
 801127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801127e:	4680      	mov	r8, r0
 8011280:	4689      	mov	r9, r1
 8011282:	4620      	mov	r0, r4
 8011284:	4629      	mov	r1, r5
 8011286:	f7ef f9b7 	bl	80005f8 <__aeabi_dmul>
 801128a:	a379      	add	r3, pc, #484	; (adr r3, 8011470 <__ieee754_asin+0x320>)
 801128c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011290:	f7ee fffa 	bl	8000288 <__aeabi_dsub>
 8011294:	4622      	mov	r2, r4
 8011296:	462b      	mov	r3, r5
 8011298:	f7ef f9ae 	bl	80005f8 <__aeabi_dmul>
 801129c:	a376      	add	r3, pc, #472	; (adr r3, 8011478 <__ieee754_asin+0x328>)
 801129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112a2:	f7ee fff3 	bl	800028c <__adddf3>
 80112a6:	4622      	mov	r2, r4
 80112a8:	462b      	mov	r3, r5
 80112aa:	f7ef f9a5 	bl	80005f8 <__aeabi_dmul>
 80112ae:	a374      	add	r3, pc, #464	; (adr r3, 8011480 <__ieee754_asin+0x330>)
 80112b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b4:	f7ee ffe8 	bl	8000288 <__aeabi_dsub>
 80112b8:	4622      	mov	r2, r4
 80112ba:	462b      	mov	r3, r5
 80112bc:	f7ef f99c 	bl	80005f8 <__aeabi_dmul>
 80112c0:	4b73      	ldr	r3, [pc, #460]	; (8011490 <__ieee754_asin+0x340>)
 80112c2:	2200      	movs	r2, #0
 80112c4:	f7ee ffe2 	bl	800028c <__adddf3>
 80112c8:	ec45 4b10 	vmov	d0, r4, r5
 80112cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80112d0:	f001 f850 	bl	8012374 <__ieee754_sqrt>
 80112d4:	4b70      	ldr	r3, [pc, #448]	; (8011498 <__ieee754_asin+0x348>)
 80112d6:	429f      	cmp	r7, r3
 80112d8:	ec5b ab10 	vmov	sl, fp, d0
 80112dc:	f340 80de 	ble.w	801149c <__ieee754_asin+0x34c>
 80112e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80112e4:	4640      	mov	r0, r8
 80112e6:	4649      	mov	r1, r9
 80112e8:	f7ef fab0 	bl	800084c <__aeabi_ddiv>
 80112ec:	4652      	mov	r2, sl
 80112ee:	465b      	mov	r3, fp
 80112f0:	f7ef f982 	bl	80005f8 <__aeabi_dmul>
 80112f4:	4652      	mov	r2, sl
 80112f6:	465b      	mov	r3, fp
 80112f8:	f7ee ffc8 	bl	800028c <__adddf3>
 80112fc:	4602      	mov	r2, r0
 80112fe:	460b      	mov	r3, r1
 8011300:	f7ee ffc4 	bl	800028c <__adddf3>
 8011304:	a348      	add	r3, pc, #288	; (adr r3, 8011428 <__ieee754_asin+0x2d8>)
 8011306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801130a:	f7ee ffbd 	bl	8000288 <__aeabi_dsub>
 801130e:	4602      	mov	r2, r0
 8011310:	460b      	mov	r3, r1
 8011312:	a143      	add	r1, pc, #268	; (adr r1, 8011420 <__ieee754_asin+0x2d0>)
 8011314:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011318:	f7ee ffb6 	bl	8000288 <__aeabi_dsub>
 801131c:	9b01      	ldr	r3, [sp, #4]
 801131e:	2b00      	cmp	r3, #0
 8011320:	bfdc      	itt	le
 8011322:	4602      	movle	r2, r0
 8011324:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8011328:	4604      	mov	r4, r0
 801132a:	460d      	mov	r5, r1
 801132c:	bfdc      	itt	le
 801132e:	4614      	movle	r4, r2
 8011330:	461d      	movle	r5, r3
 8011332:	e745      	b.n	80111c0 <__ieee754_asin+0x70>
 8011334:	ee10 2a10 	vmov	r2, s0
 8011338:	ee10 0a10 	vmov	r0, s0
 801133c:	462b      	mov	r3, r5
 801133e:	4629      	mov	r1, r5
 8011340:	f7ef f95a 	bl	80005f8 <__aeabi_dmul>
 8011344:	a33c      	add	r3, pc, #240	; (adr r3, 8011438 <__ieee754_asin+0x2e8>)
 8011346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801134a:	4606      	mov	r6, r0
 801134c:	460f      	mov	r7, r1
 801134e:	f7ef f953 	bl	80005f8 <__aeabi_dmul>
 8011352:	a33b      	add	r3, pc, #236	; (adr r3, 8011440 <__ieee754_asin+0x2f0>)
 8011354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011358:	f7ee ff98 	bl	800028c <__adddf3>
 801135c:	4632      	mov	r2, r6
 801135e:	463b      	mov	r3, r7
 8011360:	f7ef f94a 	bl	80005f8 <__aeabi_dmul>
 8011364:	a338      	add	r3, pc, #224	; (adr r3, 8011448 <__ieee754_asin+0x2f8>)
 8011366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801136a:	f7ee ff8d 	bl	8000288 <__aeabi_dsub>
 801136e:	4632      	mov	r2, r6
 8011370:	463b      	mov	r3, r7
 8011372:	f7ef f941 	bl	80005f8 <__aeabi_dmul>
 8011376:	a336      	add	r3, pc, #216	; (adr r3, 8011450 <__ieee754_asin+0x300>)
 8011378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801137c:	f7ee ff86 	bl	800028c <__adddf3>
 8011380:	4632      	mov	r2, r6
 8011382:	463b      	mov	r3, r7
 8011384:	f7ef f938 	bl	80005f8 <__aeabi_dmul>
 8011388:	a333      	add	r3, pc, #204	; (adr r3, 8011458 <__ieee754_asin+0x308>)
 801138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801138e:	f7ee ff7b 	bl	8000288 <__aeabi_dsub>
 8011392:	4632      	mov	r2, r6
 8011394:	463b      	mov	r3, r7
 8011396:	f7ef f92f 	bl	80005f8 <__aeabi_dmul>
 801139a:	a331      	add	r3, pc, #196	; (adr r3, 8011460 <__ieee754_asin+0x310>)
 801139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113a0:	f7ee ff74 	bl	800028c <__adddf3>
 80113a4:	4632      	mov	r2, r6
 80113a6:	463b      	mov	r3, r7
 80113a8:	f7ef f926 	bl	80005f8 <__aeabi_dmul>
 80113ac:	a32e      	add	r3, pc, #184	; (adr r3, 8011468 <__ieee754_asin+0x318>)
 80113ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113b2:	4680      	mov	r8, r0
 80113b4:	4689      	mov	r9, r1
 80113b6:	4630      	mov	r0, r6
 80113b8:	4639      	mov	r1, r7
 80113ba:	f7ef f91d 	bl	80005f8 <__aeabi_dmul>
 80113be:	a32c      	add	r3, pc, #176	; (adr r3, 8011470 <__ieee754_asin+0x320>)
 80113c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113c4:	f7ee ff60 	bl	8000288 <__aeabi_dsub>
 80113c8:	4632      	mov	r2, r6
 80113ca:	463b      	mov	r3, r7
 80113cc:	f7ef f914 	bl	80005f8 <__aeabi_dmul>
 80113d0:	a329      	add	r3, pc, #164	; (adr r3, 8011478 <__ieee754_asin+0x328>)
 80113d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113d6:	f7ee ff59 	bl	800028c <__adddf3>
 80113da:	4632      	mov	r2, r6
 80113dc:	463b      	mov	r3, r7
 80113de:	f7ef f90b 	bl	80005f8 <__aeabi_dmul>
 80113e2:	a327      	add	r3, pc, #156	; (adr r3, 8011480 <__ieee754_asin+0x330>)
 80113e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113e8:	f7ee ff4e 	bl	8000288 <__aeabi_dsub>
 80113ec:	4632      	mov	r2, r6
 80113ee:	463b      	mov	r3, r7
 80113f0:	f7ef f902 	bl	80005f8 <__aeabi_dmul>
 80113f4:	2200      	movs	r2, #0
 80113f6:	4b26      	ldr	r3, [pc, #152]	; (8011490 <__ieee754_asin+0x340>)
 80113f8:	f7ee ff48 	bl	800028c <__adddf3>
 80113fc:	4602      	mov	r2, r0
 80113fe:	460b      	mov	r3, r1
 8011400:	4640      	mov	r0, r8
 8011402:	4649      	mov	r1, r9
 8011404:	f7ef fa22 	bl	800084c <__aeabi_ddiv>
 8011408:	4622      	mov	r2, r4
 801140a:	462b      	mov	r3, r5
 801140c:	f7ef f8f4 	bl	80005f8 <__aeabi_dmul>
 8011410:	4602      	mov	r2, r0
 8011412:	460b      	mov	r3, r1
 8011414:	4620      	mov	r0, r4
 8011416:	4629      	mov	r1, r5
 8011418:	e6c2      	b.n	80111a0 <__ieee754_asin+0x50>
 801141a:	bf00      	nop
 801141c:	f3af 8000 	nop.w
 8011420:	54442d18 	.word	0x54442d18
 8011424:	3ff921fb 	.word	0x3ff921fb
 8011428:	33145c07 	.word	0x33145c07
 801142c:	3c91a626 	.word	0x3c91a626
 8011430:	8800759c 	.word	0x8800759c
 8011434:	7e37e43c 	.word	0x7e37e43c
 8011438:	0dfdf709 	.word	0x0dfdf709
 801143c:	3f023de1 	.word	0x3f023de1
 8011440:	7501b288 	.word	0x7501b288
 8011444:	3f49efe0 	.word	0x3f49efe0
 8011448:	b5688f3b 	.word	0xb5688f3b
 801144c:	3fa48228 	.word	0x3fa48228
 8011450:	0e884455 	.word	0x0e884455
 8011454:	3fc9c155 	.word	0x3fc9c155
 8011458:	03eb6f7d 	.word	0x03eb6f7d
 801145c:	3fd4d612 	.word	0x3fd4d612
 8011460:	55555555 	.word	0x55555555
 8011464:	3fc55555 	.word	0x3fc55555
 8011468:	b12e9282 	.word	0xb12e9282
 801146c:	3fb3b8c5 	.word	0x3fb3b8c5
 8011470:	1b8d0159 	.word	0x1b8d0159
 8011474:	3fe6066c 	.word	0x3fe6066c
 8011478:	9c598ac8 	.word	0x9c598ac8
 801147c:	40002ae5 	.word	0x40002ae5
 8011480:	1c8a2d4b 	.word	0x1c8a2d4b
 8011484:	40033a27 	.word	0x40033a27
 8011488:	3fefffff 	.word	0x3fefffff
 801148c:	3fdfffff 	.word	0x3fdfffff
 8011490:	3ff00000 	.word	0x3ff00000
 8011494:	3fe00000 	.word	0x3fe00000
 8011498:	3fef3332 	.word	0x3fef3332
 801149c:	ee10 2a10 	vmov	r2, s0
 80114a0:	ee10 0a10 	vmov	r0, s0
 80114a4:	465b      	mov	r3, fp
 80114a6:	4659      	mov	r1, fp
 80114a8:	f7ee fef0 	bl	800028c <__adddf3>
 80114ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80114b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80114b4:	4640      	mov	r0, r8
 80114b6:	4649      	mov	r1, r9
 80114b8:	f7ef f9c8 	bl	800084c <__aeabi_ddiv>
 80114bc:	4602      	mov	r2, r0
 80114be:	460b      	mov	r3, r1
 80114c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80114c4:	f7ef f898 	bl	80005f8 <__aeabi_dmul>
 80114c8:	2600      	movs	r6, #0
 80114ca:	4680      	mov	r8, r0
 80114cc:	4689      	mov	r9, r1
 80114ce:	4632      	mov	r2, r6
 80114d0:	465b      	mov	r3, fp
 80114d2:	4630      	mov	r0, r6
 80114d4:	4659      	mov	r1, fp
 80114d6:	f7ef f88f 	bl	80005f8 <__aeabi_dmul>
 80114da:	4602      	mov	r2, r0
 80114dc:	460b      	mov	r3, r1
 80114de:	4620      	mov	r0, r4
 80114e0:	4629      	mov	r1, r5
 80114e2:	f7ee fed1 	bl	8000288 <__aeabi_dsub>
 80114e6:	4632      	mov	r2, r6
 80114e8:	4604      	mov	r4, r0
 80114ea:	460d      	mov	r5, r1
 80114ec:	465b      	mov	r3, fp
 80114ee:	4650      	mov	r0, sl
 80114f0:	4659      	mov	r1, fp
 80114f2:	f7ee fecb 	bl	800028c <__adddf3>
 80114f6:	4602      	mov	r2, r0
 80114f8:	460b      	mov	r3, r1
 80114fa:	4620      	mov	r0, r4
 80114fc:	4629      	mov	r1, r5
 80114fe:	f7ef f9a5 	bl	800084c <__aeabi_ddiv>
 8011502:	4602      	mov	r2, r0
 8011504:	460b      	mov	r3, r1
 8011506:	f7ee fec1 	bl	800028c <__adddf3>
 801150a:	4602      	mov	r2, r0
 801150c:	460b      	mov	r3, r1
 801150e:	a114      	add	r1, pc, #80	; (adr r1, 8011560 <__ieee754_asin+0x410>)
 8011510:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011514:	f7ee feb8 	bl	8000288 <__aeabi_dsub>
 8011518:	4602      	mov	r2, r0
 801151a:	460b      	mov	r3, r1
 801151c:	4640      	mov	r0, r8
 801151e:	4649      	mov	r1, r9
 8011520:	f7ee feb2 	bl	8000288 <__aeabi_dsub>
 8011524:	465f      	mov	r7, fp
 8011526:	4604      	mov	r4, r0
 8011528:	460d      	mov	r5, r1
 801152a:	4632      	mov	r2, r6
 801152c:	465b      	mov	r3, fp
 801152e:	4630      	mov	r0, r6
 8011530:	4639      	mov	r1, r7
 8011532:	f7ee feab 	bl	800028c <__adddf3>
 8011536:	4602      	mov	r2, r0
 8011538:	460b      	mov	r3, r1
 801153a:	a10b      	add	r1, pc, #44	; (adr r1, 8011568 <__ieee754_asin+0x418>)
 801153c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011540:	f7ee fea2 	bl	8000288 <__aeabi_dsub>
 8011544:	4602      	mov	r2, r0
 8011546:	460b      	mov	r3, r1
 8011548:	4620      	mov	r0, r4
 801154a:	4629      	mov	r1, r5
 801154c:	f7ee fe9c 	bl	8000288 <__aeabi_dsub>
 8011550:	4602      	mov	r2, r0
 8011552:	460b      	mov	r3, r1
 8011554:	a104      	add	r1, pc, #16	; (adr r1, 8011568 <__ieee754_asin+0x418>)
 8011556:	e9d1 0100 	ldrd	r0, r1, [r1]
 801155a:	e6dd      	b.n	8011318 <__ieee754_asin+0x1c8>
 801155c:	f3af 8000 	nop.w
 8011560:	33145c07 	.word	0x33145c07
 8011564:	3c91a626 	.word	0x3c91a626
 8011568:	54442d18 	.word	0x54442d18
 801156c:	3fe921fb 	.word	0x3fe921fb

08011570 <__ieee754_pow>:
 8011570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011574:	b091      	sub	sp, #68	; 0x44
 8011576:	ed8d 1b00 	vstr	d1, [sp]
 801157a:	e9dd 2900 	ldrd	r2, r9, [sp]
 801157e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8011582:	ea58 0302 	orrs.w	r3, r8, r2
 8011586:	ec57 6b10 	vmov	r6, r7, d0
 801158a:	f000 84be 	beq.w	8011f0a <__ieee754_pow+0x99a>
 801158e:	4b7a      	ldr	r3, [pc, #488]	; (8011778 <__ieee754_pow+0x208>)
 8011590:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8011594:	429c      	cmp	r4, r3
 8011596:	463d      	mov	r5, r7
 8011598:	ee10 aa10 	vmov	sl, s0
 801159c:	dc09      	bgt.n	80115b2 <__ieee754_pow+0x42>
 801159e:	d103      	bne.n	80115a8 <__ieee754_pow+0x38>
 80115a0:	b93e      	cbnz	r6, 80115b2 <__ieee754_pow+0x42>
 80115a2:	45a0      	cmp	r8, r4
 80115a4:	dc0d      	bgt.n	80115c2 <__ieee754_pow+0x52>
 80115a6:	e001      	b.n	80115ac <__ieee754_pow+0x3c>
 80115a8:	4598      	cmp	r8, r3
 80115aa:	dc02      	bgt.n	80115b2 <__ieee754_pow+0x42>
 80115ac:	4598      	cmp	r8, r3
 80115ae:	d10e      	bne.n	80115ce <__ieee754_pow+0x5e>
 80115b0:	b16a      	cbz	r2, 80115ce <__ieee754_pow+0x5e>
 80115b2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80115b6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80115ba:	ea54 030a 	orrs.w	r3, r4, sl
 80115be:	f000 84a4 	beq.w	8011f0a <__ieee754_pow+0x99a>
 80115c2:	486e      	ldr	r0, [pc, #440]	; (801177c <__ieee754_pow+0x20c>)
 80115c4:	b011      	add	sp, #68	; 0x44
 80115c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115ca:	f001 bd8d 	b.w	80130e8 <nan>
 80115ce:	2d00      	cmp	r5, #0
 80115d0:	da53      	bge.n	801167a <__ieee754_pow+0x10a>
 80115d2:	4b6b      	ldr	r3, [pc, #428]	; (8011780 <__ieee754_pow+0x210>)
 80115d4:	4598      	cmp	r8, r3
 80115d6:	dc4d      	bgt.n	8011674 <__ieee754_pow+0x104>
 80115d8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80115dc:	4598      	cmp	r8, r3
 80115de:	dd4c      	ble.n	801167a <__ieee754_pow+0x10a>
 80115e0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80115e4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80115e8:	2b14      	cmp	r3, #20
 80115ea:	dd26      	ble.n	801163a <__ieee754_pow+0xca>
 80115ec:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80115f0:	fa22 f103 	lsr.w	r1, r2, r3
 80115f4:	fa01 f303 	lsl.w	r3, r1, r3
 80115f8:	4293      	cmp	r3, r2
 80115fa:	d13e      	bne.n	801167a <__ieee754_pow+0x10a>
 80115fc:	f001 0101 	and.w	r1, r1, #1
 8011600:	f1c1 0b02 	rsb	fp, r1, #2
 8011604:	2a00      	cmp	r2, #0
 8011606:	d15b      	bne.n	80116c0 <__ieee754_pow+0x150>
 8011608:	4b5b      	ldr	r3, [pc, #364]	; (8011778 <__ieee754_pow+0x208>)
 801160a:	4598      	cmp	r8, r3
 801160c:	d124      	bne.n	8011658 <__ieee754_pow+0xe8>
 801160e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011612:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011616:	ea53 030a 	orrs.w	r3, r3, sl
 801161a:	f000 8476 	beq.w	8011f0a <__ieee754_pow+0x99a>
 801161e:	4b59      	ldr	r3, [pc, #356]	; (8011784 <__ieee754_pow+0x214>)
 8011620:	429c      	cmp	r4, r3
 8011622:	dd2d      	ble.n	8011680 <__ieee754_pow+0x110>
 8011624:	f1b9 0f00 	cmp.w	r9, #0
 8011628:	f280 8473 	bge.w	8011f12 <__ieee754_pow+0x9a2>
 801162c:	2000      	movs	r0, #0
 801162e:	2100      	movs	r1, #0
 8011630:	ec41 0b10 	vmov	d0, r0, r1
 8011634:	b011      	add	sp, #68	; 0x44
 8011636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801163a:	2a00      	cmp	r2, #0
 801163c:	d13e      	bne.n	80116bc <__ieee754_pow+0x14c>
 801163e:	f1c3 0314 	rsb	r3, r3, #20
 8011642:	fa48 f103 	asr.w	r1, r8, r3
 8011646:	fa01 f303 	lsl.w	r3, r1, r3
 801164a:	4543      	cmp	r3, r8
 801164c:	f040 8469 	bne.w	8011f22 <__ieee754_pow+0x9b2>
 8011650:	f001 0101 	and.w	r1, r1, #1
 8011654:	f1c1 0b02 	rsb	fp, r1, #2
 8011658:	4b4b      	ldr	r3, [pc, #300]	; (8011788 <__ieee754_pow+0x218>)
 801165a:	4598      	cmp	r8, r3
 801165c:	d118      	bne.n	8011690 <__ieee754_pow+0x120>
 801165e:	f1b9 0f00 	cmp.w	r9, #0
 8011662:	f280 845a 	bge.w	8011f1a <__ieee754_pow+0x9aa>
 8011666:	4948      	ldr	r1, [pc, #288]	; (8011788 <__ieee754_pow+0x218>)
 8011668:	4632      	mov	r2, r6
 801166a:	463b      	mov	r3, r7
 801166c:	2000      	movs	r0, #0
 801166e:	f7ef f8ed 	bl	800084c <__aeabi_ddiv>
 8011672:	e7dd      	b.n	8011630 <__ieee754_pow+0xc0>
 8011674:	f04f 0b02 	mov.w	fp, #2
 8011678:	e7c4      	b.n	8011604 <__ieee754_pow+0x94>
 801167a:	f04f 0b00 	mov.w	fp, #0
 801167e:	e7c1      	b.n	8011604 <__ieee754_pow+0x94>
 8011680:	f1b9 0f00 	cmp.w	r9, #0
 8011684:	dad2      	bge.n	801162c <__ieee754_pow+0xbc>
 8011686:	e9dd 0300 	ldrd	r0, r3, [sp]
 801168a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801168e:	e7cf      	b.n	8011630 <__ieee754_pow+0xc0>
 8011690:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011694:	d106      	bne.n	80116a4 <__ieee754_pow+0x134>
 8011696:	4632      	mov	r2, r6
 8011698:	463b      	mov	r3, r7
 801169a:	4610      	mov	r0, r2
 801169c:	4619      	mov	r1, r3
 801169e:	f7ee ffab 	bl	80005f8 <__aeabi_dmul>
 80116a2:	e7c5      	b.n	8011630 <__ieee754_pow+0xc0>
 80116a4:	4b39      	ldr	r3, [pc, #228]	; (801178c <__ieee754_pow+0x21c>)
 80116a6:	4599      	cmp	r9, r3
 80116a8:	d10a      	bne.n	80116c0 <__ieee754_pow+0x150>
 80116aa:	2d00      	cmp	r5, #0
 80116ac:	db08      	blt.n	80116c0 <__ieee754_pow+0x150>
 80116ae:	ec47 6b10 	vmov	d0, r6, r7
 80116b2:	b011      	add	sp, #68	; 0x44
 80116b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116b8:	f000 be5c 	b.w	8012374 <__ieee754_sqrt>
 80116bc:	f04f 0b00 	mov.w	fp, #0
 80116c0:	ec47 6b10 	vmov	d0, r6, r7
 80116c4:	f001 fc76 	bl	8012fb4 <fabs>
 80116c8:	ec51 0b10 	vmov	r0, r1, d0
 80116cc:	f1ba 0f00 	cmp.w	sl, #0
 80116d0:	d127      	bne.n	8011722 <__ieee754_pow+0x1b2>
 80116d2:	b124      	cbz	r4, 80116de <__ieee754_pow+0x16e>
 80116d4:	4b2c      	ldr	r3, [pc, #176]	; (8011788 <__ieee754_pow+0x218>)
 80116d6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80116da:	429a      	cmp	r2, r3
 80116dc:	d121      	bne.n	8011722 <__ieee754_pow+0x1b2>
 80116de:	f1b9 0f00 	cmp.w	r9, #0
 80116e2:	da05      	bge.n	80116f0 <__ieee754_pow+0x180>
 80116e4:	4602      	mov	r2, r0
 80116e6:	460b      	mov	r3, r1
 80116e8:	2000      	movs	r0, #0
 80116ea:	4927      	ldr	r1, [pc, #156]	; (8011788 <__ieee754_pow+0x218>)
 80116ec:	f7ef f8ae 	bl	800084c <__aeabi_ddiv>
 80116f0:	2d00      	cmp	r5, #0
 80116f2:	da9d      	bge.n	8011630 <__ieee754_pow+0xc0>
 80116f4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80116f8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80116fc:	ea54 030b 	orrs.w	r3, r4, fp
 8011700:	d108      	bne.n	8011714 <__ieee754_pow+0x1a4>
 8011702:	4602      	mov	r2, r0
 8011704:	460b      	mov	r3, r1
 8011706:	4610      	mov	r0, r2
 8011708:	4619      	mov	r1, r3
 801170a:	f7ee fdbd 	bl	8000288 <__aeabi_dsub>
 801170e:	4602      	mov	r2, r0
 8011710:	460b      	mov	r3, r1
 8011712:	e7ac      	b.n	801166e <__ieee754_pow+0xfe>
 8011714:	f1bb 0f01 	cmp.w	fp, #1
 8011718:	d18a      	bne.n	8011630 <__ieee754_pow+0xc0>
 801171a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801171e:	4619      	mov	r1, r3
 8011720:	e786      	b.n	8011630 <__ieee754_pow+0xc0>
 8011722:	0fed      	lsrs	r5, r5, #31
 8011724:	1e6b      	subs	r3, r5, #1
 8011726:	930d      	str	r3, [sp, #52]	; 0x34
 8011728:	ea5b 0303 	orrs.w	r3, fp, r3
 801172c:	d102      	bne.n	8011734 <__ieee754_pow+0x1c4>
 801172e:	4632      	mov	r2, r6
 8011730:	463b      	mov	r3, r7
 8011732:	e7e8      	b.n	8011706 <__ieee754_pow+0x196>
 8011734:	4b16      	ldr	r3, [pc, #88]	; (8011790 <__ieee754_pow+0x220>)
 8011736:	4598      	cmp	r8, r3
 8011738:	f340 80fe 	ble.w	8011938 <__ieee754_pow+0x3c8>
 801173c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011740:	4598      	cmp	r8, r3
 8011742:	dd0a      	ble.n	801175a <__ieee754_pow+0x1ea>
 8011744:	4b0f      	ldr	r3, [pc, #60]	; (8011784 <__ieee754_pow+0x214>)
 8011746:	429c      	cmp	r4, r3
 8011748:	dc0d      	bgt.n	8011766 <__ieee754_pow+0x1f6>
 801174a:	f1b9 0f00 	cmp.w	r9, #0
 801174e:	f6bf af6d 	bge.w	801162c <__ieee754_pow+0xbc>
 8011752:	a307      	add	r3, pc, #28	; (adr r3, 8011770 <__ieee754_pow+0x200>)
 8011754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011758:	e79f      	b.n	801169a <__ieee754_pow+0x12a>
 801175a:	4b0e      	ldr	r3, [pc, #56]	; (8011794 <__ieee754_pow+0x224>)
 801175c:	429c      	cmp	r4, r3
 801175e:	ddf4      	ble.n	801174a <__ieee754_pow+0x1da>
 8011760:	4b09      	ldr	r3, [pc, #36]	; (8011788 <__ieee754_pow+0x218>)
 8011762:	429c      	cmp	r4, r3
 8011764:	dd18      	ble.n	8011798 <__ieee754_pow+0x228>
 8011766:	f1b9 0f00 	cmp.w	r9, #0
 801176a:	dcf2      	bgt.n	8011752 <__ieee754_pow+0x1e2>
 801176c:	e75e      	b.n	801162c <__ieee754_pow+0xbc>
 801176e:	bf00      	nop
 8011770:	8800759c 	.word	0x8800759c
 8011774:	7e37e43c 	.word	0x7e37e43c
 8011778:	7ff00000 	.word	0x7ff00000
 801177c:	080135b5 	.word	0x080135b5
 8011780:	433fffff 	.word	0x433fffff
 8011784:	3fefffff 	.word	0x3fefffff
 8011788:	3ff00000 	.word	0x3ff00000
 801178c:	3fe00000 	.word	0x3fe00000
 8011790:	41e00000 	.word	0x41e00000
 8011794:	3feffffe 	.word	0x3feffffe
 8011798:	2200      	movs	r2, #0
 801179a:	4b63      	ldr	r3, [pc, #396]	; (8011928 <__ieee754_pow+0x3b8>)
 801179c:	f7ee fd74 	bl	8000288 <__aeabi_dsub>
 80117a0:	a355      	add	r3, pc, #340	; (adr r3, 80118f8 <__ieee754_pow+0x388>)
 80117a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117a6:	4604      	mov	r4, r0
 80117a8:	460d      	mov	r5, r1
 80117aa:	f7ee ff25 	bl	80005f8 <__aeabi_dmul>
 80117ae:	a354      	add	r3, pc, #336	; (adr r3, 8011900 <__ieee754_pow+0x390>)
 80117b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b4:	4606      	mov	r6, r0
 80117b6:	460f      	mov	r7, r1
 80117b8:	4620      	mov	r0, r4
 80117ba:	4629      	mov	r1, r5
 80117bc:	f7ee ff1c 	bl	80005f8 <__aeabi_dmul>
 80117c0:	2200      	movs	r2, #0
 80117c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80117c6:	4b59      	ldr	r3, [pc, #356]	; (801192c <__ieee754_pow+0x3bc>)
 80117c8:	4620      	mov	r0, r4
 80117ca:	4629      	mov	r1, r5
 80117cc:	f7ee ff14 	bl	80005f8 <__aeabi_dmul>
 80117d0:	4602      	mov	r2, r0
 80117d2:	460b      	mov	r3, r1
 80117d4:	a14c      	add	r1, pc, #304	; (adr r1, 8011908 <__ieee754_pow+0x398>)
 80117d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80117da:	f7ee fd55 	bl	8000288 <__aeabi_dsub>
 80117de:	4622      	mov	r2, r4
 80117e0:	462b      	mov	r3, r5
 80117e2:	f7ee ff09 	bl	80005f8 <__aeabi_dmul>
 80117e6:	4602      	mov	r2, r0
 80117e8:	460b      	mov	r3, r1
 80117ea:	2000      	movs	r0, #0
 80117ec:	4950      	ldr	r1, [pc, #320]	; (8011930 <__ieee754_pow+0x3c0>)
 80117ee:	f7ee fd4b 	bl	8000288 <__aeabi_dsub>
 80117f2:	4622      	mov	r2, r4
 80117f4:	462b      	mov	r3, r5
 80117f6:	4680      	mov	r8, r0
 80117f8:	4689      	mov	r9, r1
 80117fa:	4620      	mov	r0, r4
 80117fc:	4629      	mov	r1, r5
 80117fe:	f7ee fefb 	bl	80005f8 <__aeabi_dmul>
 8011802:	4602      	mov	r2, r0
 8011804:	460b      	mov	r3, r1
 8011806:	4640      	mov	r0, r8
 8011808:	4649      	mov	r1, r9
 801180a:	f7ee fef5 	bl	80005f8 <__aeabi_dmul>
 801180e:	a340      	add	r3, pc, #256	; (adr r3, 8011910 <__ieee754_pow+0x3a0>)
 8011810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011814:	f7ee fef0 	bl	80005f8 <__aeabi_dmul>
 8011818:	4602      	mov	r2, r0
 801181a:	460b      	mov	r3, r1
 801181c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011820:	f7ee fd32 	bl	8000288 <__aeabi_dsub>
 8011824:	4602      	mov	r2, r0
 8011826:	460b      	mov	r3, r1
 8011828:	4604      	mov	r4, r0
 801182a:	460d      	mov	r5, r1
 801182c:	4630      	mov	r0, r6
 801182e:	4639      	mov	r1, r7
 8011830:	f7ee fd2c 	bl	800028c <__adddf3>
 8011834:	2000      	movs	r0, #0
 8011836:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801183a:	4632      	mov	r2, r6
 801183c:	463b      	mov	r3, r7
 801183e:	f7ee fd23 	bl	8000288 <__aeabi_dsub>
 8011842:	4602      	mov	r2, r0
 8011844:	460b      	mov	r3, r1
 8011846:	4620      	mov	r0, r4
 8011848:	4629      	mov	r1, r5
 801184a:	f7ee fd1d 	bl	8000288 <__aeabi_dsub>
 801184e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011850:	f10b 33ff 	add.w	r3, fp, #4294967295
 8011854:	4313      	orrs	r3, r2
 8011856:	4606      	mov	r6, r0
 8011858:	460f      	mov	r7, r1
 801185a:	f040 81eb 	bne.w	8011c34 <__ieee754_pow+0x6c4>
 801185e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011918 <__ieee754_pow+0x3a8>
 8011862:	e9dd 4500 	ldrd	r4, r5, [sp]
 8011866:	2400      	movs	r4, #0
 8011868:	4622      	mov	r2, r4
 801186a:	462b      	mov	r3, r5
 801186c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011870:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011874:	f7ee fd08 	bl	8000288 <__aeabi_dsub>
 8011878:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801187c:	f7ee febc 	bl	80005f8 <__aeabi_dmul>
 8011880:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011884:	4680      	mov	r8, r0
 8011886:	4689      	mov	r9, r1
 8011888:	4630      	mov	r0, r6
 801188a:	4639      	mov	r1, r7
 801188c:	f7ee feb4 	bl	80005f8 <__aeabi_dmul>
 8011890:	4602      	mov	r2, r0
 8011892:	460b      	mov	r3, r1
 8011894:	4640      	mov	r0, r8
 8011896:	4649      	mov	r1, r9
 8011898:	f7ee fcf8 	bl	800028c <__adddf3>
 801189c:	4622      	mov	r2, r4
 801189e:	462b      	mov	r3, r5
 80118a0:	4680      	mov	r8, r0
 80118a2:	4689      	mov	r9, r1
 80118a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80118a8:	f7ee fea6 	bl	80005f8 <__aeabi_dmul>
 80118ac:	460b      	mov	r3, r1
 80118ae:	4604      	mov	r4, r0
 80118b0:	460d      	mov	r5, r1
 80118b2:	4602      	mov	r2, r0
 80118b4:	4649      	mov	r1, r9
 80118b6:	4640      	mov	r0, r8
 80118b8:	e9cd 4500 	strd	r4, r5, [sp]
 80118bc:	f7ee fce6 	bl	800028c <__adddf3>
 80118c0:	4b1c      	ldr	r3, [pc, #112]	; (8011934 <__ieee754_pow+0x3c4>)
 80118c2:	4299      	cmp	r1, r3
 80118c4:	4606      	mov	r6, r0
 80118c6:	460f      	mov	r7, r1
 80118c8:	468b      	mov	fp, r1
 80118ca:	f340 82f7 	ble.w	8011ebc <__ieee754_pow+0x94c>
 80118ce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80118d2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80118d6:	4303      	orrs	r3, r0
 80118d8:	f000 81ea 	beq.w	8011cb0 <__ieee754_pow+0x740>
 80118dc:	a310      	add	r3, pc, #64	; (adr r3, 8011920 <__ieee754_pow+0x3b0>)
 80118de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80118e6:	f7ee fe87 	bl	80005f8 <__aeabi_dmul>
 80118ea:	a30d      	add	r3, pc, #52	; (adr r3, 8011920 <__ieee754_pow+0x3b0>)
 80118ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118f0:	e6d5      	b.n	801169e <__ieee754_pow+0x12e>
 80118f2:	bf00      	nop
 80118f4:	f3af 8000 	nop.w
 80118f8:	60000000 	.word	0x60000000
 80118fc:	3ff71547 	.word	0x3ff71547
 8011900:	f85ddf44 	.word	0xf85ddf44
 8011904:	3e54ae0b 	.word	0x3e54ae0b
 8011908:	55555555 	.word	0x55555555
 801190c:	3fd55555 	.word	0x3fd55555
 8011910:	652b82fe 	.word	0x652b82fe
 8011914:	3ff71547 	.word	0x3ff71547
 8011918:	00000000 	.word	0x00000000
 801191c:	bff00000 	.word	0xbff00000
 8011920:	8800759c 	.word	0x8800759c
 8011924:	7e37e43c 	.word	0x7e37e43c
 8011928:	3ff00000 	.word	0x3ff00000
 801192c:	3fd00000 	.word	0x3fd00000
 8011930:	3fe00000 	.word	0x3fe00000
 8011934:	408fffff 	.word	0x408fffff
 8011938:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801193c:	f04f 0200 	mov.w	r2, #0
 8011940:	da05      	bge.n	801194e <__ieee754_pow+0x3de>
 8011942:	4bd3      	ldr	r3, [pc, #844]	; (8011c90 <__ieee754_pow+0x720>)
 8011944:	f7ee fe58 	bl	80005f8 <__aeabi_dmul>
 8011948:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801194c:	460c      	mov	r4, r1
 801194e:	1523      	asrs	r3, r4, #20
 8011950:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011954:	4413      	add	r3, r2
 8011956:	9309      	str	r3, [sp, #36]	; 0x24
 8011958:	4bce      	ldr	r3, [pc, #824]	; (8011c94 <__ieee754_pow+0x724>)
 801195a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801195e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011962:	429c      	cmp	r4, r3
 8011964:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011968:	dd08      	ble.n	801197c <__ieee754_pow+0x40c>
 801196a:	4bcb      	ldr	r3, [pc, #812]	; (8011c98 <__ieee754_pow+0x728>)
 801196c:	429c      	cmp	r4, r3
 801196e:	f340 815e 	ble.w	8011c2e <__ieee754_pow+0x6be>
 8011972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011974:	3301      	adds	r3, #1
 8011976:	9309      	str	r3, [sp, #36]	; 0x24
 8011978:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801197c:	f04f 0a00 	mov.w	sl, #0
 8011980:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8011984:	930c      	str	r3, [sp, #48]	; 0x30
 8011986:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011988:	4bc4      	ldr	r3, [pc, #784]	; (8011c9c <__ieee754_pow+0x72c>)
 801198a:	4413      	add	r3, r2
 801198c:	ed93 7b00 	vldr	d7, [r3]
 8011990:	4629      	mov	r1, r5
 8011992:	ec53 2b17 	vmov	r2, r3, d7
 8011996:	ed8d 7b06 	vstr	d7, [sp, #24]
 801199a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801199e:	f7ee fc73 	bl	8000288 <__aeabi_dsub>
 80119a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80119a6:	4606      	mov	r6, r0
 80119a8:	460f      	mov	r7, r1
 80119aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80119ae:	f7ee fc6d 	bl	800028c <__adddf3>
 80119b2:	4602      	mov	r2, r0
 80119b4:	460b      	mov	r3, r1
 80119b6:	2000      	movs	r0, #0
 80119b8:	49b9      	ldr	r1, [pc, #740]	; (8011ca0 <__ieee754_pow+0x730>)
 80119ba:	f7ee ff47 	bl	800084c <__aeabi_ddiv>
 80119be:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80119c2:	4602      	mov	r2, r0
 80119c4:	460b      	mov	r3, r1
 80119c6:	4630      	mov	r0, r6
 80119c8:	4639      	mov	r1, r7
 80119ca:	f7ee fe15 	bl	80005f8 <__aeabi_dmul>
 80119ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80119d2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80119d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80119da:	2300      	movs	r3, #0
 80119dc:	9302      	str	r3, [sp, #8]
 80119de:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80119e2:	106d      	asrs	r5, r5, #1
 80119e4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80119e8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80119ec:	2200      	movs	r2, #0
 80119ee:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80119f2:	4640      	mov	r0, r8
 80119f4:	4649      	mov	r1, r9
 80119f6:	4614      	mov	r4, r2
 80119f8:	461d      	mov	r5, r3
 80119fa:	f7ee fdfd 	bl	80005f8 <__aeabi_dmul>
 80119fe:	4602      	mov	r2, r0
 8011a00:	460b      	mov	r3, r1
 8011a02:	4630      	mov	r0, r6
 8011a04:	4639      	mov	r1, r7
 8011a06:	f7ee fc3f 	bl	8000288 <__aeabi_dsub>
 8011a0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011a0e:	4606      	mov	r6, r0
 8011a10:	460f      	mov	r7, r1
 8011a12:	4620      	mov	r0, r4
 8011a14:	4629      	mov	r1, r5
 8011a16:	f7ee fc37 	bl	8000288 <__aeabi_dsub>
 8011a1a:	4602      	mov	r2, r0
 8011a1c:	460b      	mov	r3, r1
 8011a1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011a22:	f7ee fc31 	bl	8000288 <__aeabi_dsub>
 8011a26:	4642      	mov	r2, r8
 8011a28:	464b      	mov	r3, r9
 8011a2a:	f7ee fde5 	bl	80005f8 <__aeabi_dmul>
 8011a2e:	4602      	mov	r2, r0
 8011a30:	460b      	mov	r3, r1
 8011a32:	4630      	mov	r0, r6
 8011a34:	4639      	mov	r1, r7
 8011a36:	f7ee fc27 	bl	8000288 <__aeabi_dsub>
 8011a3a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8011a3e:	f7ee fddb 	bl	80005f8 <__aeabi_dmul>
 8011a42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011a46:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011a4a:	4610      	mov	r0, r2
 8011a4c:	4619      	mov	r1, r3
 8011a4e:	f7ee fdd3 	bl	80005f8 <__aeabi_dmul>
 8011a52:	a37b      	add	r3, pc, #492	; (adr r3, 8011c40 <__ieee754_pow+0x6d0>)
 8011a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a58:	4604      	mov	r4, r0
 8011a5a:	460d      	mov	r5, r1
 8011a5c:	f7ee fdcc 	bl	80005f8 <__aeabi_dmul>
 8011a60:	a379      	add	r3, pc, #484	; (adr r3, 8011c48 <__ieee754_pow+0x6d8>)
 8011a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a66:	f7ee fc11 	bl	800028c <__adddf3>
 8011a6a:	4622      	mov	r2, r4
 8011a6c:	462b      	mov	r3, r5
 8011a6e:	f7ee fdc3 	bl	80005f8 <__aeabi_dmul>
 8011a72:	a377      	add	r3, pc, #476	; (adr r3, 8011c50 <__ieee754_pow+0x6e0>)
 8011a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a78:	f7ee fc08 	bl	800028c <__adddf3>
 8011a7c:	4622      	mov	r2, r4
 8011a7e:	462b      	mov	r3, r5
 8011a80:	f7ee fdba 	bl	80005f8 <__aeabi_dmul>
 8011a84:	a374      	add	r3, pc, #464	; (adr r3, 8011c58 <__ieee754_pow+0x6e8>)
 8011a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a8a:	f7ee fbff 	bl	800028c <__adddf3>
 8011a8e:	4622      	mov	r2, r4
 8011a90:	462b      	mov	r3, r5
 8011a92:	f7ee fdb1 	bl	80005f8 <__aeabi_dmul>
 8011a96:	a372      	add	r3, pc, #456	; (adr r3, 8011c60 <__ieee754_pow+0x6f0>)
 8011a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a9c:	f7ee fbf6 	bl	800028c <__adddf3>
 8011aa0:	4622      	mov	r2, r4
 8011aa2:	462b      	mov	r3, r5
 8011aa4:	f7ee fda8 	bl	80005f8 <__aeabi_dmul>
 8011aa8:	a36f      	add	r3, pc, #444	; (adr r3, 8011c68 <__ieee754_pow+0x6f8>)
 8011aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aae:	f7ee fbed 	bl	800028c <__adddf3>
 8011ab2:	4622      	mov	r2, r4
 8011ab4:	4606      	mov	r6, r0
 8011ab6:	460f      	mov	r7, r1
 8011ab8:	462b      	mov	r3, r5
 8011aba:	4620      	mov	r0, r4
 8011abc:	4629      	mov	r1, r5
 8011abe:	f7ee fd9b 	bl	80005f8 <__aeabi_dmul>
 8011ac2:	4602      	mov	r2, r0
 8011ac4:	460b      	mov	r3, r1
 8011ac6:	4630      	mov	r0, r6
 8011ac8:	4639      	mov	r1, r7
 8011aca:	f7ee fd95 	bl	80005f8 <__aeabi_dmul>
 8011ace:	4642      	mov	r2, r8
 8011ad0:	4604      	mov	r4, r0
 8011ad2:	460d      	mov	r5, r1
 8011ad4:	464b      	mov	r3, r9
 8011ad6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011ada:	f7ee fbd7 	bl	800028c <__adddf3>
 8011ade:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011ae2:	f7ee fd89 	bl	80005f8 <__aeabi_dmul>
 8011ae6:	4622      	mov	r2, r4
 8011ae8:	462b      	mov	r3, r5
 8011aea:	f7ee fbcf 	bl	800028c <__adddf3>
 8011aee:	4642      	mov	r2, r8
 8011af0:	4606      	mov	r6, r0
 8011af2:	460f      	mov	r7, r1
 8011af4:	464b      	mov	r3, r9
 8011af6:	4640      	mov	r0, r8
 8011af8:	4649      	mov	r1, r9
 8011afa:	f7ee fd7d 	bl	80005f8 <__aeabi_dmul>
 8011afe:	2200      	movs	r2, #0
 8011b00:	4b68      	ldr	r3, [pc, #416]	; (8011ca4 <__ieee754_pow+0x734>)
 8011b02:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011b06:	f7ee fbc1 	bl	800028c <__adddf3>
 8011b0a:	4632      	mov	r2, r6
 8011b0c:	463b      	mov	r3, r7
 8011b0e:	f7ee fbbd 	bl	800028c <__adddf3>
 8011b12:	9802      	ldr	r0, [sp, #8]
 8011b14:	460d      	mov	r5, r1
 8011b16:	4604      	mov	r4, r0
 8011b18:	4602      	mov	r2, r0
 8011b1a:	460b      	mov	r3, r1
 8011b1c:	4640      	mov	r0, r8
 8011b1e:	4649      	mov	r1, r9
 8011b20:	f7ee fd6a 	bl	80005f8 <__aeabi_dmul>
 8011b24:	2200      	movs	r2, #0
 8011b26:	4680      	mov	r8, r0
 8011b28:	4689      	mov	r9, r1
 8011b2a:	4b5e      	ldr	r3, [pc, #376]	; (8011ca4 <__ieee754_pow+0x734>)
 8011b2c:	4620      	mov	r0, r4
 8011b2e:	4629      	mov	r1, r5
 8011b30:	f7ee fbaa 	bl	8000288 <__aeabi_dsub>
 8011b34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011b38:	f7ee fba6 	bl	8000288 <__aeabi_dsub>
 8011b3c:	4602      	mov	r2, r0
 8011b3e:	460b      	mov	r3, r1
 8011b40:	4630      	mov	r0, r6
 8011b42:	4639      	mov	r1, r7
 8011b44:	f7ee fba0 	bl	8000288 <__aeabi_dsub>
 8011b48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011b4c:	f7ee fd54 	bl	80005f8 <__aeabi_dmul>
 8011b50:	4622      	mov	r2, r4
 8011b52:	4606      	mov	r6, r0
 8011b54:	460f      	mov	r7, r1
 8011b56:	462b      	mov	r3, r5
 8011b58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011b5c:	f7ee fd4c 	bl	80005f8 <__aeabi_dmul>
 8011b60:	4602      	mov	r2, r0
 8011b62:	460b      	mov	r3, r1
 8011b64:	4630      	mov	r0, r6
 8011b66:	4639      	mov	r1, r7
 8011b68:	f7ee fb90 	bl	800028c <__adddf3>
 8011b6c:	4606      	mov	r6, r0
 8011b6e:	460f      	mov	r7, r1
 8011b70:	4602      	mov	r2, r0
 8011b72:	460b      	mov	r3, r1
 8011b74:	4640      	mov	r0, r8
 8011b76:	4649      	mov	r1, r9
 8011b78:	f7ee fb88 	bl	800028c <__adddf3>
 8011b7c:	9802      	ldr	r0, [sp, #8]
 8011b7e:	a33c      	add	r3, pc, #240	; (adr r3, 8011c70 <__ieee754_pow+0x700>)
 8011b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b84:	4604      	mov	r4, r0
 8011b86:	460d      	mov	r5, r1
 8011b88:	f7ee fd36 	bl	80005f8 <__aeabi_dmul>
 8011b8c:	4642      	mov	r2, r8
 8011b8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011b92:	464b      	mov	r3, r9
 8011b94:	4620      	mov	r0, r4
 8011b96:	4629      	mov	r1, r5
 8011b98:	f7ee fb76 	bl	8000288 <__aeabi_dsub>
 8011b9c:	4602      	mov	r2, r0
 8011b9e:	460b      	mov	r3, r1
 8011ba0:	4630      	mov	r0, r6
 8011ba2:	4639      	mov	r1, r7
 8011ba4:	f7ee fb70 	bl	8000288 <__aeabi_dsub>
 8011ba8:	a333      	add	r3, pc, #204	; (adr r3, 8011c78 <__ieee754_pow+0x708>)
 8011baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bae:	f7ee fd23 	bl	80005f8 <__aeabi_dmul>
 8011bb2:	a333      	add	r3, pc, #204	; (adr r3, 8011c80 <__ieee754_pow+0x710>)
 8011bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bb8:	4606      	mov	r6, r0
 8011bba:	460f      	mov	r7, r1
 8011bbc:	4620      	mov	r0, r4
 8011bbe:	4629      	mov	r1, r5
 8011bc0:	f7ee fd1a 	bl	80005f8 <__aeabi_dmul>
 8011bc4:	4602      	mov	r2, r0
 8011bc6:	460b      	mov	r3, r1
 8011bc8:	4630      	mov	r0, r6
 8011bca:	4639      	mov	r1, r7
 8011bcc:	f7ee fb5e 	bl	800028c <__adddf3>
 8011bd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011bd2:	4b35      	ldr	r3, [pc, #212]	; (8011ca8 <__ieee754_pow+0x738>)
 8011bd4:	4413      	add	r3, r2
 8011bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bda:	f7ee fb57 	bl	800028c <__adddf3>
 8011bde:	4604      	mov	r4, r0
 8011be0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011be2:	460d      	mov	r5, r1
 8011be4:	f7ee fc9e 	bl	8000524 <__aeabi_i2d>
 8011be8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011bea:	4b30      	ldr	r3, [pc, #192]	; (8011cac <__ieee754_pow+0x73c>)
 8011bec:	4413      	add	r3, r2
 8011bee:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011bf2:	4606      	mov	r6, r0
 8011bf4:	460f      	mov	r7, r1
 8011bf6:	4622      	mov	r2, r4
 8011bf8:	462b      	mov	r3, r5
 8011bfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011bfe:	f7ee fb45 	bl	800028c <__adddf3>
 8011c02:	4642      	mov	r2, r8
 8011c04:	464b      	mov	r3, r9
 8011c06:	f7ee fb41 	bl	800028c <__adddf3>
 8011c0a:	4632      	mov	r2, r6
 8011c0c:	463b      	mov	r3, r7
 8011c0e:	f7ee fb3d 	bl	800028c <__adddf3>
 8011c12:	9802      	ldr	r0, [sp, #8]
 8011c14:	4632      	mov	r2, r6
 8011c16:	463b      	mov	r3, r7
 8011c18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011c1c:	f7ee fb34 	bl	8000288 <__aeabi_dsub>
 8011c20:	4642      	mov	r2, r8
 8011c22:	464b      	mov	r3, r9
 8011c24:	f7ee fb30 	bl	8000288 <__aeabi_dsub>
 8011c28:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011c2c:	e607      	b.n	801183e <__ieee754_pow+0x2ce>
 8011c2e:	f04f 0a01 	mov.w	sl, #1
 8011c32:	e6a5      	b.n	8011980 <__ieee754_pow+0x410>
 8011c34:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8011c88 <__ieee754_pow+0x718>
 8011c38:	e613      	b.n	8011862 <__ieee754_pow+0x2f2>
 8011c3a:	bf00      	nop
 8011c3c:	f3af 8000 	nop.w
 8011c40:	4a454eef 	.word	0x4a454eef
 8011c44:	3fca7e28 	.word	0x3fca7e28
 8011c48:	93c9db65 	.word	0x93c9db65
 8011c4c:	3fcd864a 	.word	0x3fcd864a
 8011c50:	a91d4101 	.word	0xa91d4101
 8011c54:	3fd17460 	.word	0x3fd17460
 8011c58:	518f264d 	.word	0x518f264d
 8011c5c:	3fd55555 	.word	0x3fd55555
 8011c60:	db6fabff 	.word	0xdb6fabff
 8011c64:	3fdb6db6 	.word	0x3fdb6db6
 8011c68:	33333303 	.word	0x33333303
 8011c6c:	3fe33333 	.word	0x3fe33333
 8011c70:	e0000000 	.word	0xe0000000
 8011c74:	3feec709 	.word	0x3feec709
 8011c78:	dc3a03fd 	.word	0xdc3a03fd
 8011c7c:	3feec709 	.word	0x3feec709
 8011c80:	145b01f5 	.word	0x145b01f5
 8011c84:	be3e2fe0 	.word	0xbe3e2fe0
 8011c88:	00000000 	.word	0x00000000
 8011c8c:	3ff00000 	.word	0x3ff00000
 8011c90:	43400000 	.word	0x43400000
 8011c94:	0003988e 	.word	0x0003988e
 8011c98:	000bb679 	.word	0x000bb679
 8011c9c:	080135f8 	.word	0x080135f8
 8011ca0:	3ff00000 	.word	0x3ff00000
 8011ca4:	40080000 	.word	0x40080000
 8011ca8:	08013618 	.word	0x08013618
 8011cac:	08013608 	.word	0x08013608
 8011cb0:	a3b4      	add	r3, pc, #720	; (adr r3, 8011f84 <__ieee754_pow+0xa14>)
 8011cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cb6:	4640      	mov	r0, r8
 8011cb8:	4649      	mov	r1, r9
 8011cba:	f7ee fae7 	bl	800028c <__adddf3>
 8011cbe:	4622      	mov	r2, r4
 8011cc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011cc4:	462b      	mov	r3, r5
 8011cc6:	4630      	mov	r0, r6
 8011cc8:	4639      	mov	r1, r7
 8011cca:	f7ee fadd 	bl	8000288 <__aeabi_dsub>
 8011cce:	4602      	mov	r2, r0
 8011cd0:	460b      	mov	r3, r1
 8011cd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011cd6:	f7ee ff1f 	bl	8000b18 <__aeabi_dcmpgt>
 8011cda:	2800      	cmp	r0, #0
 8011cdc:	f47f adfe 	bne.w	80118dc <__ieee754_pow+0x36c>
 8011ce0:	4aa3      	ldr	r2, [pc, #652]	; (8011f70 <__ieee754_pow+0xa00>)
 8011ce2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011ce6:	4293      	cmp	r3, r2
 8011ce8:	f340 810a 	ble.w	8011f00 <__ieee754_pow+0x990>
 8011cec:	151b      	asrs	r3, r3, #20
 8011cee:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011cf2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011cf6:	fa4a f303 	asr.w	r3, sl, r3
 8011cfa:	445b      	add	r3, fp
 8011cfc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011d00:	4e9c      	ldr	r6, [pc, #624]	; (8011f74 <__ieee754_pow+0xa04>)
 8011d02:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011d06:	4116      	asrs	r6, r2
 8011d08:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011d0c:	2000      	movs	r0, #0
 8011d0e:	ea23 0106 	bic.w	r1, r3, r6
 8011d12:	f1c2 0214 	rsb	r2, r2, #20
 8011d16:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011d1a:	fa4a fa02 	asr.w	sl, sl, r2
 8011d1e:	f1bb 0f00 	cmp.w	fp, #0
 8011d22:	4602      	mov	r2, r0
 8011d24:	460b      	mov	r3, r1
 8011d26:	4620      	mov	r0, r4
 8011d28:	4629      	mov	r1, r5
 8011d2a:	bfb8      	it	lt
 8011d2c:	f1ca 0a00 	rsblt	sl, sl, #0
 8011d30:	f7ee faaa 	bl	8000288 <__aeabi_dsub>
 8011d34:	e9cd 0100 	strd	r0, r1, [sp]
 8011d38:	4642      	mov	r2, r8
 8011d3a:	464b      	mov	r3, r9
 8011d3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011d40:	f7ee faa4 	bl	800028c <__adddf3>
 8011d44:	2000      	movs	r0, #0
 8011d46:	a378      	add	r3, pc, #480	; (adr r3, 8011f28 <__ieee754_pow+0x9b8>)
 8011d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d4c:	4604      	mov	r4, r0
 8011d4e:	460d      	mov	r5, r1
 8011d50:	f7ee fc52 	bl	80005f8 <__aeabi_dmul>
 8011d54:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011d58:	4606      	mov	r6, r0
 8011d5a:	460f      	mov	r7, r1
 8011d5c:	4620      	mov	r0, r4
 8011d5e:	4629      	mov	r1, r5
 8011d60:	f7ee fa92 	bl	8000288 <__aeabi_dsub>
 8011d64:	4602      	mov	r2, r0
 8011d66:	460b      	mov	r3, r1
 8011d68:	4640      	mov	r0, r8
 8011d6a:	4649      	mov	r1, r9
 8011d6c:	f7ee fa8c 	bl	8000288 <__aeabi_dsub>
 8011d70:	a36f      	add	r3, pc, #444	; (adr r3, 8011f30 <__ieee754_pow+0x9c0>)
 8011d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d76:	f7ee fc3f 	bl	80005f8 <__aeabi_dmul>
 8011d7a:	a36f      	add	r3, pc, #444	; (adr r3, 8011f38 <__ieee754_pow+0x9c8>)
 8011d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d80:	4680      	mov	r8, r0
 8011d82:	4689      	mov	r9, r1
 8011d84:	4620      	mov	r0, r4
 8011d86:	4629      	mov	r1, r5
 8011d88:	f7ee fc36 	bl	80005f8 <__aeabi_dmul>
 8011d8c:	4602      	mov	r2, r0
 8011d8e:	460b      	mov	r3, r1
 8011d90:	4640      	mov	r0, r8
 8011d92:	4649      	mov	r1, r9
 8011d94:	f7ee fa7a 	bl	800028c <__adddf3>
 8011d98:	4604      	mov	r4, r0
 8011d9a:	460d      	mov	r5, r1
 8011d9c:	4602      	mov	r2, r0
 8011d9e:	460b      	mov	r3, r1
 8011da0:	4630      	mov	r0, r6
 8011da2:	4639      	mov	r1, r7
 8011da4:	f7ee fa72 	bl	800028c <__adddf3>
 8011da8:	4632      	mov	r2, r6
 8011daa:	463b      	mov	r3, r7
 8011dac:	4680      	mov	r8, r0
 8011dae:	4689      	mov	r9, r1
 8011db0:	f7ee fa6a 	bl	8000288 <__aeabi_dsub>
 8011db4:	4602      	mov	r2, r0
 8011db6:	460b      	mov	r3, r1
 8011db8:	4620      	mov	r0, r4
 8011dba:	4629      	mov	r1, r5
 8011dbc:	f7ee fa64 	bl	8000288 <__aeabi_dsub>
 8011dc0:	4642      	mov	r2, r8
 8011dc2:	4606      	mov	r6, r0
 8011dc4:	460f      	mov	r7, r1
 8011dc6:	464b      	mov	r3, r9
 8011dc8:	4640      	mov	r0, r8
 8011dca:	4649      	mov	r1, r9
 8011dcc:	f7ee fc14 	bl	80005f8 <__aeabi_dmul>
 8011dd0:	a35b      	add	r3, pc, #364	; (adr r3, 8011f40 <__ieee754_pow+0x9d0>)
 8011dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dd6:	4604      	mov	r4, r0
 8011dd8:	460d      	mov	r5, r1
 8011dda:	f7ee fc0d 	bl	80005f8 <__aeabi_dmul>
 8011dde:	a35a      	add	r3, pc, #360	; (adr r3, 8011f48 <__ieee754_pow+0x9d8>)
 8011de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011de4:	f7ee fa50 	bl	8000288 <__aeabi_dsub>
 8011de8:	4622      	mov	r2, r4
 8011dea:	462b      	mov	r3, r5
 8011dec:	f7ee fc04 	bl	80005f8 <__aeabi_dmul>
 8011df0:	a357      	add	r3, pc, #348	; (adr r3, 8011f50 <__ieee754_pow+0x9e0>)
 8011df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011df6:	f7ee fa49 	bl	800028c <__adddf3>
 8011dfa:	4622      	mov	r2, r4
 8011dfc:	462b      	mov	r3, r5
 8011dfe:	f7ee fbfb 	bl	80005f8 <__aeabi_dmul>
 8011e02:	a355      	add	r3, pc, #340	; (adr r3, 8011f58 <__ieee754_pow+0x9e8>)
 8011e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e08:	f7ee fa3e 	bl	8000288 <__aeabi_dsub>
 8011e0c:	4622      	mov	r2, r4
 8011e0e:	462b      	mov	r3, r5
 8011e10:	f7ee fbf2 	bl	80005f8 <__aeabi_dmul>
 8011e14:	a352      	add	r3, pc, #328	; (adr r3, 8011f60 <__ieee754_pow+0x9f0>)
 8011e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e1a:	f7ee fa37 	bl	800028c <__adddf3>
 8011e1e:	4622      	mov	r2, r4
 8011e20:	462b      	mov	r3, r5
 8011e22:	f7ee fbe9 	bl	80005f8 <__aeabi_dmul>
 8011e26:	4602      	mov	r2, r0
 8011e28:	460b      	mov	r3, r1
 8011e2a:	4640      	mov	r0, r8
 8011e2c:	4649      	mov	r1, r9
 8011e2e:	f7ee fa2b 	bl	8000288 <__aeabi_dsub>
 8011e32:	4604      	mov	r4, r0
 8011e34:	460d      	mov	r5, r1
 8011e36:	4602      	mov	r2, r0
 8011e38:	460b      	mov	r3, r1
 8011e3a:	4640      	mov	r0, r8
 8011e3c:	4649      	mov	r1, r9
 8011e3e:	f7ee fbdb 	bl	80005f8 <__aeabi_dmul>
 8011e42:	2200      	movs	r2, #0
 8011e44:	e9cd 0100 	strd	r0, r1, [sp]
 8011e48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011e4c:	4620      	mov	r0, r4
 8011e4e:	4629      	mov	r1, r5
 8011e50:	f7ee fa1a 	bl	8000288 <__aeabi_dsub>
 8011e54:	4602      	mov	r2, r0
 8011e56:	460b      	mov	r3, r1
 8011e58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011e5c:	f7ee fcf6 	bl	800084c <__aeabi_ddiv>
 8011e60:	4632      	mov	r2, r6
 8011e62:	4604      	mov	r4, r0
 8011e64:	460d      	mov	r5, r1
 8011e66:	463b      	mov	r3, r7
 8011e68:	4640      	mov	r0, r8
 8011e6a:	4649      	mov	r1, r9
 8011e6c:	f7ee fbc4 	bl	80005f8 <__aeabi_dmul>
 8011e70:	4632      	mov	r2, r6
 8011e72:	463b      	mov	r3, r7
 8011e74:	f7ee fa0a 	bl	800028c <__adddf3>
 8011e78:	4602      	mov	r2, r0
 8011e7a:	460b      	mov	r3, r1
 8011e7c:	4620      	mov	r0, r4
 8011e7e:	4629      	mov	r1, r5
 8011e80:	f7ee fa02 	bl	8000288 <__aeabi_dsub>
 8011e84:	4642      	mov	r2, r8
 8011e86:	464b      	mov	r3, r9
 8011e88:	f7ee f9fe 	bl	8000288 <__aeabi_dsub>
 8011e8c:	4602      	mov	r2, r0
 8011e8e:	460b      	mov	r3, r1
 8011e90:	2000      	movs	r0, #0
 8011e92:	4939      	ldr	r1, [pc, #228]	; (8011f78 <__ieee754_pow+0xa08>)
 8011e94:	f7ee f9f8 	bl	8000288 <__aeabi_dsub>
 8011e98:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8011e9c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8011ea0:	4602      	mov	r2, r0
 8011ea2:	460b      	mov	r3, r1
 8011ea4:	da2f      	bge.n	8011f06 <__ieee754_pow+0x996>
 8011ea6:	4650      	mov	r0, sl
 8011ea8:	ec43 2b10 	vmov	d0, r2, r3
 8011eac:	f001 f9a8 	bl	8013200 <scalbn>
 8011eb0:	ec51 0b10 	vmov	r0, r1, d0
 8011eb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011eb8:	f7ff bbf1 	b.w	801169e <__ieee754_pow+0x12e>
 8011ebc:	4b2f      	ldr	r3, [pc, #188]	; (8011f7c <__ieee754_pow+0xa0c>)
 8011ebe:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011ec2:	429e      	cmp	r6, r3
 8011ec4:	f77f af0c 	ble.w	8011ce0 <__ieee754_pow+0x770>
 8011ec8:	4b2d      	ldr	r3, [pc, #180]	; (8011f80 <__ieee754_pow+0xa10>)
 8011eca:	440b      	add	r3, r1
 8011ecc:	4303      	orrs	r3, r0
 8011ece:	d00b      	beq.n	8011ee8 <__ieee754_pow+0x978>
 8011ed0:	a325      	add	r3, pc, #148	; (adr r3, 8011f68 <__ieee754_pow+0x9f8>)
 8011ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ed6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011eda:	f7ee fb8d 	bl	80005f8 <__aeabi_dmul>
 8011ede:	a322      	add	r3, pc, #136	; (adr r3, 8011f68 <__ieee754_pow+0x9f8>)
 8011ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ee4:	f7ff bbdb 	b.w	801169e <__ieee754_pow+0x12e>
 8011ee8:	4622      	mov	r2, r4
 8011eea:	462b      	mov	r3, r5
 8011eec:	f7ee f9cc 	bl	8000288 <__aeabi_dsub>
 8011ef0:	4642      	mov	r2, r8
 8011ef2:	464b      	mov	r3, r9
 8011ef4:	f7ee fe06 	bl	8000b04 <__aeabi_dcmpge>
 8011ef8:	2800      	cmp	r0, #0
 8011efa:	f43f aef1 	beq.w	8011ce0 <__ieee754_pow+0x770>
 8011efe:	e7e7      	b.n	8011ed0 <__ieee754_pow+0x960>
 8011f00:	f04f 0a00 	mov.w	sl, #0
 8011f04:	e718      	b.n	8011d38 <__ieee754_pow+0x7c8>
 8011f06:	4621      	mov	r1, r4
 8011f08:	e7d4      	b.n	8011eb4 <__ieee754_pow+0x944>
 8011f0a:	2000      	movs	r0, #0
 8011f0c:	491a      	ldr	r1, [pc, #104]	; (8011f78 <__ieee754_pow+0xa08>)
 8011f0e:	f7ff bb8f 	b.w	8011630 <__ieee754_pow+0xc0>
 8011f12:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011f16:	f7ff bb8b 	b.w	8011630 <__ieee754_pow+0xc0>
 8011f1a:	4630      	mov	r0, r6
 8011f1c:	4639      	mov	r1, r7
 8011f1e:	f7ff bb87 	b.w	8011630 <__ieee754_pow+0xc0>
 8011f22:	4693      	mov	fp, r2
 8011f24:	f7ff bb98 	b.w	8011658 <__ieee754_pow+0xe8>
 8011f28:	00000000 	.word	0x00000000
 8011f2c:	3fe62e43 	.word	0x3fe62e43
 8011f30:	fefa39ef 	.word	0xfefa39ef
 8011f34:	3fe62e42 	.word	0x3fe62e42
 8011f38:	0ca86c39 	.word	0x0ca86c39
 8011f3c:	be205c61 	.word	0xbe205c61
 8011f40:	72bea4d0 	.word	0x72bea4d0
 8011f44:	3e663769 	.word	0x3e663769
 8011f48:	c5d26bf1 	.word	0xc5d26bf1
 8011f4c:	3ebbbd41 	.word	0x3ebbbd41
 8011f50:	af25de2c 	.word	0xaf25de2c
 8011f54:	3f11566a 	.word	0x3f11566a
 8011f58:	16bebd93 	.word	0x16bebd93
 8011f5c:	3f66c16c 	.word	0x3f66c16c
 8011f60:	5555553e 	.word	0x5555553e
 8011f64:	3fc55555 	.word	0x3fc55555
 8011f68:	c2f8f359 	.word	0xc2f8f359
 8011f6c:	01a56e1f 	.word	0x01a56e1f
 8011f70:	3fe00000 	.word	0x3fe00000
 8011f74:	000fffff 	.word	0x000fffff
 8011f78:	3ff00000 	.word	0x3ff00000
 8011f7c:	4090cbff 	.word	0x4090cbff
 8011f80:	3f6f3400 	.word	0x3f6f3400
 8011f84:	652b82fe 	.word	0x652b82fe
 8011f88:	3c971547 	.word	0x3c971547
 8011f8c:	00000000 	.word	0x00000000

08011f90 <__ieee754_rem_pio2>:
 8011f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f94:	ec57 6b10 	vmov	r6, r7, d0
 8011f98:	4bc3      	ldr	r3, [pc, #780]	; (80122a8 <__ieee754_rem_pio2+0x318>)
 8011f9a:	b08d      	sub	sp, #52	; 0x34
 8011f9c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011fa0:	4598      	cmp	r8, r3
 8011fa2:	4604      	mov	r4, r0
 8011fa4:	9704      	str	r7, [sp, #16]
 8011fa6:	dc07      	bgt.n	8011fb8 <__ieee754_rem_pio2+0x28>
 8011fa8:	2200      	movs	r2, #0
 8011faa:	2300      	movs	r3, #0
 8011fac:	ed84 0b00 	vstr	d0, [r4]
 8011fb0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011fb4:	2500      	movs	r5, #0
 8011fb6:	e027      	b.n	8012008 <__ieee754_rem_pio2+0x78>
 8011fb8:	4bbc      	ldr	r3, [pc, #752]	; (80122ac <__ieee754_rem_pio2+0x31c>)
 8011fba:	4598      	cmp	r8, r3
 8011fbc:	dc75      	bgt.n	80120aa <__ieee754_rem_pio2+0x11a>
 8011fbe:	9b04      	ldr	r3, [sp, #16]
 8011fc0:	4dbb      	ldr	r5, [pc, #748]	; (80122b0 <__ieee754_rem_pio2+0x320>)
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	ee10 0a10 	vmov	r0, s0
 8011fc8:	a3a9      	add	r3, pc, #676	; (adr r3, 8012270 <__ieee754_rem_pio2+0x2e0>)
 8011fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fce:	4639      	mov	r1, r7
 8011fd0:	dd36      	ble.n	8012040 <__ieee754_rem_pio2+0xb0>
 8011fd2:	f7ee f959 	bl	8000288 <__aeabi_dsub>
 8011fd6:	45a8      	cmp	r8, r5
 8011fd8:	4606      	mov	r6, r0
 8011fda:	460f      	mov	r7, r1
 8011fdc:	d018      	beq.n	8012010 <__ieee754_rem_pio2+0x80>
 8011fde:	a3a6      	add	r3, pc, #664	; (adr r3, 8012278 <__ieee754_rem_pio2+0x2e8>)
 8011fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fe4:	f7ee f950 	bl	8000288 <__aeabi_dsub>
 8011fe8:	4602      	mov	r2, r0
 8011fea:	460b      	mov	r3, r1
 8011fec:	e9c4 2300 	strd	r2, r3, [r4]
 8011ff0:	4630      	mov	r0, r6
 8011ff2:	4639      	mov	r1, r7
 8011ff4:	f7ee f948 	bl	8000288 <__aeabi_dsub>
 8011ff8:	a39f      	add	r3, pc, #636	; (adr r3, 8012278 <__ieee754_rem_pio2+0x2e8>)
 8011ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ffe:	f7ee f943 	bl	8000288 <__aeabi_dsub>
 8012002:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012006:	2501      	movs	r5, #1
 8012008:	4628      	mov	r0, r5
 801200a:	b00d      	add	sp, #52	; 0x34
 801200c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012010:	a39b      	add	r3, pc, #620	; (adr r3, 8012280 <__ieee754_rem_pio2+0x2f0>)
 8012012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012016:	f7ee f937 	bl	8000288 <__aeabi_dsub>
 801201a:	a39b      	add	r3, pc, #620	; (adr r3, 8012288 <__ieee754_rem_pio2+0x2f8>)
 801201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012020:	4606      	mov	r6, r0
 8012022:	460f      	mov	r7, r1
 8012024:	f7ee f930 	bl	8000288 <__aeabi_dsub>
 8012028:	4602      	mov	r2, r0
 801202a:	460b      	mov	r3, r1
 801202c:	e9c4 2300 	strd	r2, r3, [r4]
 8012030:	4630      	mov	r0, r6
 8012032:	4639      	mov	r1, r7
 8012034:	f7ee f928 	bl	8000288 <__aeabi_dsub>
 8012038:	a393      	add	r3, pc, #588	; (adr r3, 8012288 <__ieee754_rem_pio2+0x2f8>)
 801203a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801203e:	e7de      	b.n	8011ffe <__ieee754_rem_pio2+0x6e>
 8012040:	f7ee f924 	bl	800028c <__adddf3>
 8012044:	45a8      	cmp	r8, r5
 8012046:	4606      	mov	r6, r0
 8012048:	460f      	mov	r7, r1
 801204a:	d016      	beq.n	801207a <__ieee754_rem_pio2+0xea>
 801204c:	a38a      	add	r3, pc, #552	; (adr r3, 8012278 <__ieee754_rem_pio2+0x2e8>)
 801204e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012052:	f7ee f91b 	bl	800028c <__adddf3>
 8012056:	4602      	mov	r2, r0
 8012058:	460b      	mov	r3, r1
 801205a:	e9c4 2300 	strd	r2, r3, [r4]
 801205e:	4630      	mov	r0, r6
 8012060:	4639      	mov	r1, r7
 8012062:	f7ee f911 	bl	8000288 <__aeabi_dsub>
 8012066:	a384      	add	r3, pc, #528	; (adr r3, 8012278 <__ieee754_rem_pio2+0x2e8>)
 8012068:	e9d3 2300 	ldrd	r2, r3, [r3]
 801206c:	f7ee f90e 	bl	800028c <__adddf3>
 8012070:	f04f 35ff 	mov.w	r5, #4294967295
 8012074:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012078:	e7c6      	b.n	8012008 <__ieee754_rem_pio2+0x78>
 801207a:	a381      	add	r3, pc, #516	; (adr r3, 8012280 <__ieee754_rem_pio2+0x2f0>)
 801207c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012080:	f7ee f904 	bl	800028c <__adddf3>
 8012084:	a380      	add	r3, pc, #512	; (adr r3, 8012288 <__ieee754_rem_pio2+0x2f8>)
 8012086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801208a:	4606      	mov	r6, r0
 801208c:	460f      	mov	r7, r1
 801208e:	f7ee f8fd 	bl	800028c <__adddf3>
 8012092:	4602      	mov	r2, r0
 8012094:	460b      	mov	r3, r1
 8012096:	e9c4 2300 	strd	r2, r3, [r4]
 801209a:	4630      	mov	r0, r6
 801209c:	4639      	mov	r1, r7
 801209e:	f7ee f8f3 	bl	8000288 <__aeabi_dsub>
 80120a2:	a379      	add	r3, pc, #484	; (adr r3, 8012288 <__ieee754_rem_pio2+0x2f8>)
 80120a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120a8:	e7e0      	b.n	801206c <__ieee754_rem_pio2+0xdc>
 80120aa:	4b82      	ldr	r3, [pc, #520]	; (80122b4 <__ieee754_rem_pio2+0x324>)
 80120ac:	4598      	cmp	r8, r3
 80120ae:	f300 80d0 	bgt.w	8012252 <__ieee754_rem_pio2+0x2c2>
 80120b2:	f000 ff7f 	bl	8012fb4 <fabs>
 80120b6:	ec57 6b10 	vmov	r6, r7, d0
 80120ba:	ee10 0a10 	vmov	r0, s0
 80120be:	a374      	add	r3, pc, #464	; (adr r3, 8012290 <__ieee754_rem_pio2+0x300>)
 80120c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120c4:	4639      	mov	r1, r7
 80120c6:	f7ee fa97 	bl	80005f8 <__aeabi_dmul>
 80120ca:	2200      	movs	r2, #0
 80120cc:	4b7a      	ldr	r3, [pc, #488]	; (80122b8 <__ieee754_rem_pio2+0x328>)
 80120ce:	f7ee f8dd 	bl	800028c <__adddf3>
 80120d2:	f7ee fd41 	bl	8000b58 <__aeabi_d2iz>
 80120d6:	4605      	mov	r5, r0
 80120d8:	f7ee fa24 	bl	8000524 <__aeabi_i2d>
 80120dc:	a364      	add	r3, pc, #400	; (adr r3, 8012270 <__ieee754_rem_pio2+0x2e0>)
 80120de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80120e6:	f7ee fa87 	bl	80005f8 <__aeabi_dmul>
 80120ea:	4602      	mov	r2, r0
 80120ec:	460b      	mov	r3, r1
 80120ee:	4630      	mov	r0, r6
 80120f0:	4639      	mov	r1, r7
 80120f2:	f7ee f8c9 	bl	8000288 <__aeabi_dsub>
 80120f6:	a360      	add	r3, pc, #384	; (adr r3, 8012278 <__ieee754_rem_pio2+0x2e8>)
 80120f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120fc:	4682      	mov	sl, r0
 80120fe:	468b      	mov	fp, r1
 8012100:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012104:	f7ee fa78 	bl	80005f8 <__aeabi_dmul>
 8012108:	2d1f      	cmp	r5, #31
 801210a:	4606      	mov	r6, r0
 801210c:	460f      	mov	r7, r1
 801210e:	dc0c      	bgt.n	801212a <__ieee754_rem_pio2+0x19a>
 8012110:	1e6a      	subs	r2, r5, #1
 8012112:	4b6a      	ldr	r3, [pc, #424]	; (80122bc <__ieee754_rem_pio2+0x32c>)
 8012114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012118:	4543      	cmp	r3, r8
 801211a:	d006      	beq.n	801212a <__ieee754_rem_pio2+0x19a>
 801211c:	4632      	mov	r2, r6
 801211e:	463b      	mov	r3, r7
 8012120:	4650      	mov	r0, sl
 8012122:	4659      	mov	r1, fp
 8012124:	f7ee f8b0 	bl	8000288 <__aeabi_dsub>
 8012128:	e00e      	b.n	8012148 <__ieee754_rem_pio2+0x1b8>
 801212a:	4632      	mov	r2, r6
 801212c:	463b      	mov	r3, r7
 801212e:	4650      	mov	r0, sl
 8012130:	4659      	mov	r1, fp
 8012132:	f7ee f8a9 	bl	8000288 <__aeabi_dsub>
 8012136:	ea4f 5328 	mov.w	r3, r8, asr #20
 801213a:	9305      	str	r3, [sp, #20]
 801213c:	9a05      	ldr	r2, [sp, #20]
 801213e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012142:	1ad3      	subs	r3, r2, r3
 8012144:	2b10      	cmp	r3, #16
 8012146:	dc02      	bgt.n	801214e <__ieee754_rem_pio2+0x1be>
 8012148:	e9c4 0100 	strd	r0, r1, [r4]
 801214c:	e039      	b.n	80121c2 <__ieee754_rem_pio2+0x232>
 801214e:	a34c      	add	r3, pc, #304	; (adr r3, 8012280 <__ieee754_rem_pio2+0x2f0>)
 8012150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012154:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012158:	f7ee fa4e 	bl	80005f8 <__aeabi_dmul>
 801215c:	4606      	mov	r6, r0
 801215e:	460f      	mov	r7, r1
 8012160:	4602      	mov	r2, r0
 8012162:	460b      	mov	r3, r1
 8012164:	4650      	mov	r0, sl
 8012166:	4659      	mov	r1, fp
 8012168:	f7ee f88e 	bl	8000288 <__aeabi_dsub>
 801216c:	4602      	mov	r2, r0
 801216e:	460b      	mov	r3, r1
 8012170:	4680      	mov	r8, r0
 8012172:	4689      	mov	r9, r1
 8012174:	4650      	mov	r0, sl
 8012176:	4659      	mov	r1, fp
 8012178:	f7ee f886 	bl	8000288 <__aeabi_dsub>
 801217c:	4632      	mov	r2, r6
 801217e:	463b      	mov	r3, r7
 8012180:	f7ee f882 	bl	8000288 <__aeabi_dsub>
 8012184:	a340      	add	r3, pc, #256	; (adr r3, 8012288 <__ieee754_rem_pio2+0x2f8>)
 8012186:	e9d3 2300 	ldrd	r2, r3, [r3]
 801218a:	4606      	mov	r6, r0
 801218c:	460f      	mov	r7, r1
 801218e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012192:	f7ee fa31 	bl	80005f8 <__aeabi_dmul>
 8012196:	4632      	mov	r2, r6
 8012198:	463b      	mov	r3, r7
 801219a:	f7ee f875 	bl	8000288 <__aeabi_dsub>
 801219e:	4602      	mov	r2, r0
 80121a0:	460b      	mov	r3, r1
 80121a2:	4606      	mov	r6, r0
 80121a4:	460f      	mov	r7, r1
 80121a6:	4640      	mov	r0, r8
 80121a8:	4649      	mov	r1, r9
 80121aa:	f7ee f86d 	bl	8000288 <__aeabi_dsub>
 80121ae:	9a05      	ldr	r2, [sp, #20]
 80121b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80121b4:	1ad3      	subs	r3, r2, r3
 80121b6:	2b31      	cmp	r3, #49	; 0x31
 80121b8:	dc20      	bgt.n	80121fc <__ieee754_rem_pio2+0x26c>
 80121ba:	e9c4 0100 	strd	r0, r1, [r4]
 80121be:	46c2      	mov	sl, r8
 80121c0:	46cb      	mov	fp, r9
 80121c2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80121c6:	4650      	mov	r0, sl
 80121c8:	4642      	mov	r2, r8
 80121ca:	464b      	mov	r3, r9
 80121cc:	4659      	mov	r1, fp
 80121ce:	f7ee f85b 	bl	8000288 <__aeabi_dsub>
 80121d2:	463b      	mov	r3, r7
 80121d4:	4632      	mov	r2, r6
 80121d6:	f7ee f857 	bl	8000288 <__aeabi_dsub>
 80121da:	9b04      	ldr	r3, [sp, #16]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80121e2:	f6bf af11 	bge.w	8012008 <__ieee754_rem_pio2+0x78>
 80121e6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80121ea:	6063      	str	r3, [r4, #4]
 80121ec:	f8c4 8000 	str.w	r8, [r4]
 80121f0:	60a0      	str	r0, [r4, #8]
 80121f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80121f6:	60e3      	str	r3, [r4, #12]
 80121f8:	426d      	negs	r5, r5
 80121fa:	e705      	b.n	8012008 <__ieee754_rem_pio2+0x78>
 80121fc:	a326      	add	r3, pc, #152	; (adr r3, 8012298 <__ieee754_rem_pio2+0x308>)
 80121fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012202:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012206:	f7ee f9f7 	bl	80005f8 <__aeabi_dmul>
 801220a:	4606      	mov	r6, r0
 801220c:	460f      	mov	r7, r1
 801220e:	4602      	mov	r2, r0
 8012210:	460b      	mov	r3, r1
 8012212:	4640      	mov	r0, r8
 8012214:	4649      	mov	r1, r9
 8012216:	f7ee f837 	bl	8000288 <__aeabi_dsub>
 801221a:	4602      	mov	r2, r0
 801221c:	460b      	mov	r3, r1
 801221e:	4682      	mov	sl, r0
 8012220:	468b      	mov	fp, r1
 8012222:	4640      	mov	r0, r8
 8012224:	4649      	mov	r1, r9
 8012226:	f7ee f82f 	bl	8000288 <__aeabi_dsub>
 801222a:	4632      	mov	r2, r6
 801222c:	463b      	mov	r3, r7
 801222e:	f7ee f82b 	bl	8000288 <__aeabi_dsub>
 8012232:	a31b      	add	r3, pc, #108	; (adr r3, 80122a0 <__ieee754_rem_pio2+0x310>)
 8012234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012238:	4606      	mov	r6, r0
 801223a:	460f      	mov	r7, r1
 801223c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012240:	f7ee f9da 	bl	80005f8 <__aeabi_dmul>
 8012244:	4632      	mov	r2, r6
 8012246:	463b      	mov	r3, r7
 8012248:	f7ee f81e 	bl	8000288 <__aeabi_dsub>
 801224c:	4606      	mov	r6, r0
 801224e:	460f      	mov	r7, r1
 8012250:	e764      	b.n	801211c <__ieee754_rem_pio2+0x18c>
 8012252:	4b1b      	ldr	r3, [pc, #108]	; (80122c0 <__ieee754_rem_pio2+0x330>)
 8012254:	4598      	cmp	r8, r3
 8012256:	dd35      	ble.n	80122c4 <__ieee754_rem_pio2+0x334>
 8012258:	ee10 2a10 	vmov	r2, s0
 801225c:	463b      	mov	r3, r7
 801225e:	4630      	mov	r0, r6
 8012260:	4639      	mov	r1, r7
 8012262:	f7ee f811 	bl	8000288 <__aeabi_dsub>
 8012266:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801226a:	e9c4 0100 	strd	r0, r1, [r4]
 801226e:	e6a1      	b.n	8011fb4 <__ieee754_rem_pio2+0x24>
 8012270:	54400000 	.word	0x54400000
 8012274:	3ff921fb 	.word	0x3ff921fb
 8012278:	1a626331 	.word	0x1a626331
 801227c:	3dd0b461 	.word	0x3dd0b461
 8012280:	1a600000 	.word	0x1a600000
 8012284:	3dd0b461 	.word	0x3dd0b461
 8012288:	2e037073 	.word	0x2e037073
 801228c:	3ba3198a 	.word	0x3ba3198a
 8012290:	6dc9c883 	.word	0x6dc9c883
 8012294:	3fe45f30 	.word	0x3fe45f30
 8012298:	2e000000 	.word	0x2e000000
 801229c:	3ba3198a 	.word	0x3ba3198a
 80122a0:	252049c1 	.word	0x252049c1
 80122a4:	397b839a 	.word	0x397b839a
 80122a8:	3fe921fb 	.word	0x3fe921fb
 80122ac:	4002d97b 	.word	0x4002d97b
 80122b0:	3ff921fb 	.word	0x3ff921fb
 80122b4:	413921fb 	.word	0x413921fb
 80122b8:	3fe00000 	.word	0x3fe00000
 80122bc:	08013628 	.word	0x08013628
 80122c0:	7fefffff 	.word	0x7fefffff
 80122c4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80122c8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80122cc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80122d0:	4630      	mov	r0, r6
 80122d2:	460f      	mov	r7, r1
 80122d4:	f7ee fc40 	bl	8000b58 <__aeabi_d2iz>
 80122d8:	f7ee f924 	bl	8000524 <__aeabi_i2d>
 80122dc:	4602      	mov	r2, r0
 80122de:	460b      	mov	r3, r1
 80122e0:	4630      	mov	r0, r6
 80122e2:	4639      	mov	r1, r7
 80122e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80122e8:	f7ed ffce 	bl	8000288 <__aeabi_dsub>
 80122ec:	2200      	movs	r2, #0
 80122ee:	4b1f      	ldr	r3, [pc, #124]	; (801236c <__ieee754_rem_pio2+0x3dc>)
 80122f0:	f7ee f982 	bl	80005f8 <__aeabi_dmul>
 80122f4:	460f      	mov	r7, r1
 80122f6:	4606      	mov	r6, r0
 80122f8:	f7ee fc2e 	bl	8000b58 <__aeabi_d2iz>
 80122fc:	f7ee f912 	bl	8000524 <__aeabi_i2d>
 8012300:	4602      	mov	r2, r0
 8012302:	460b      	mov	r3, r1
 8012304:	4630      	mov	r0, r6
 8012306:	4639      	mov	r1, r7
 8012308:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801230c:	f7ed ffbc 	bl	8000288 <__aeabi_dsub>
 8012310:	2200      	movs	r2, #0
 8012312:	4b16      	ldr	r3, [pc, #88]	; (801236c <__ieee754_rem_pio2+0x3dc>)
 8012314:	f7ee f970 	bl	80005f8 <__aeabi_dmul>
 8012318:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801231c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8012320:	f04f 0803 	mov.w	r8, #3
 8012324:	2600      	movs	r6, #0
 8012326:	2700      	movs	r7, #0
 8012328:	4632      	mov	r2, r6
 801232a:	463b      	mov	r3, r7
 801232c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8012330:	f108 3aff 	add.w	sl, r8, #4294967295
 8012334:	f7ee fbc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8012338:	b9b0      	cbnz	r0, 8012368 <__ieee754_rem_pio2+0x3d8>
 801233a:	4b0d      	ldr	r3, [pc, #52]	; (8012370 <__ieee754_rem_pio2+0x3e0>)
 801233c:	9301      	str	r3, [sp, #4]
 801233e:	2302      	movs	r3, #2
 8012340:	9300      	str	r3, [sp, #0]
 8012342:	462a      	mov	r2, r5
 8012344:	4643      	mov	r3, r8
 8012346:	4621      	mov	r1, r4
 8012348:	a806      	add	r0, sp, #24
 801234a:	f000 fa39 	bl	80127c0 <__kernel_rem_pio2>
 801234e:	9b04      	ldr	r3, [sp, #16]
 8012350:	2b00      	cmp	r3, #0
 8012352:	4605      	mov	r5, r0
 8012354:	f6bf ae58 	bge.w	8012008 <__ieee754_rem_pio2+0x78>
 8012358:	6863      	ldr	r3, [r4, #4]
 801235a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801235e:	6063      	str	r3, [r4, #4]
 8012360:	68e3      	ldr	r3, [r4, #12]
 8012362:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012366:	e746      	b.n	80121f6 <__ieee754_rem_pio2+0x266>
 8012368:	46d0      	mov	r8, sl
 801236a:	e7dd      	b.n	8012328 <__ieee754_rem_pio2+0x398>
 801236c:	41700000 	.word	0x41700000
 8012370:	080136a8 	.word	0x080136a8

08012374 <__ieee754_sqrt>:
 8012374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012378:	4955      	ldr	r1, [pc, #340]	; (80124d0 <__ieee754_sqrt+0x15c>)
 801237a:	ec55 4b10 	vmov	r4, r5, d0
 801237e:	43a9      	bics	r1, r5
 8012380:	462b      	mov	r3, r5
 8012382:	462a      	mov	r2, r5
 8012384:	d112      	bne.n	80123ac <__ieee754_sqrt+0x38>
 8012386:	ee10 2a10 	vmov	r2, s0
 801238a:	ee10 0a10 	vmov	r0, s0
 801238e:	4629      	mov	r1, r5
 8012390:	f7ee f932 	bl	80005f8 <__aeabi_dmul>
 8012394:	4602      	mov	r2, r0
 8012396:	460b      	mov	r3, r1
 8012398:	4620      	mov	r0, r4
 801239a:	4629      	mov	r1, r5
 801239c:	f7ed ff76 	bl	800028c <__adddf3>
 80123a0:	4604      	mov	r4, r0
 80123a2:	460d      	mov	r5, r1
 80123a4:	ec45 4b10 	vmov	d0, r4, r5
 80123a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123ac:	2d00      	cmp	r5, #0
 80123ae:	ee10 0a10 	vmov	r0, s0
 80123b2:	4621      	mov	r1, r4
 80123b4:	dc0f      	bgt.n	80123d6 <__ieee754_sqrt+0x62>
 80123b6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80123ba:	4330      	orrs	r0, r6
 80123bc:	d0f2      	beq.n	80123a4 <__ieee754_sqrt+0x30>
 80123be:	b155      	cbz	r5, 80123d6 <__ieee754_sqrt+0x62>
 80123c0:	ee10 2a10 	vmov	r2, s0
 80123c4:	4620      	mov	r0, r4
 80123c6:	4629      	mov	r1, r5
 80123c8:	f7ed ff5e 	bl	8000288 <__aeabi_dsub>
 80123cc:	4602      	mov	r2, r0
 80123ce:	460b      	mov	r3, r1
 80123d0:	f7ee fa3c 	bl	800084c <__aeabi_ddiv>
 80123d4:	e7e4      	b.n	80123a0 <__ieee754_sqrt+0x2c>
 80123d6:	151b      	asrs	r3, r3, #20
 80123d8:	d073      	beq.n	80124c2 <__ieee754_sqrt+0x14e>
 80123da:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80123de:	07dd      	lsls	r5, r3, #31
 80123e0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80123e4:	bf48      	it	mi
 80123e6:	0fc8      	lsrmi	r0, r1, #31
 80123e8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80123ec:	bf44      	itt	mi
 80123ee:	0049      	lslmi	r1, r1, #1
 80123f0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80123f4:	2500      	movs	r5, #0
 80123f6:	1058      	asrs	r0, r3, #1
 80123f8:	0fcb      	lsrs	r3, r1, #31
 80123fa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80123fe:	0049      	lsls	r1, r1, #1
 8012400:	2316      	movs	r3, #22
 8012402:	462c      	mov	r4, r5
 8012404:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8012408:	19a7      	adds	r7, r4, r6
 801240a:	4297      	cmp	r7, r2
 801240c:	bfde      	ittt	le
 801240e:	19bc      	addle	r4, r7, r6
 8012410:	1bd2      	suble	r2, r2, r7
 8012412:	19ad      	addle	r5, r5, r6
 8012414:	0fcf      	lsrs	r7, r1, #31
 8012416:	3b01      	subs	r3, #1
 8012418:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801241c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012420:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012424:	d1f0      	bne.n	8012408 <__ieee754_sqrt+0x94>
 8012426:	f04f 0c20 	mov.w	ip, #32
 801242a:	469e      	mov	lr, r3
 801242c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012430:	42a2      	cmp	r2, r4
 8012432:	eb06 070e 	add.w	r7, r6, lr
 8012436:	dc02      	bgt.n	801243e <__ieee754_sqrt+0xca>
 8012438:	d112      	bne.n	8012460 <__ieee754_sqrt+0xec>
 801243a:	428f      	cmp	r7, r1
 801243c:	d810      	bhi.n	8012460 <__ieee754_sqrt+0xec>
 801243e:	2f00      	cmp	r7, #0
 8012440:	eb07 0e06 	add.w	lr, r7, r6
 8012444:	da42      	bge.n	80124cc <__ieee754_sqrt+0x158>
 8012446:	f1be 0f00 	cmp.w	lr, #0
 801244a:	db3f      	blt.n	80124cc <__ieee754_sqrt+0x158>
 801244c:	f104 0801 	add.w	r8, r4, #1
 8012450:	1b12      	subs	r2, r2, r4
 8012452:	428f      	cmp	r7, r1
 8012454:	bf88      	it	hi
 8012456:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801245a:	1bc9      	subs	r1, r1, r7
 801245c:	4433      	add	r3, r6
 801245e:	4644      	mov	r4, r8
 8012460:	0052      	lsls	r2, r2, #1
 8012462:	f1bc 0c01 	subs.w	ip, ip, #1
 8012466:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801246a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801246e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012472:	d1dd      	bne.n	8012430 <__ieee754_sqrt+0xbc>
 8012474:	430a      	orrs	r2, r1
 8012476:	d006      	beq.n	8012486 <__ieee754_sqrt+0x112>
 8012478:	1c5c      	adds	r4, r3, #1
 801247a:	bf13      	iteet	ne
 801247c:	3301      	addne	r3, #1
 801247e:	3501      	addeq	r5, #1
 8012480:	4663      	moveq	r3, ip
 8012482:	f023 0301 	bicne.w	r3, r3, #1
 8012486:	106a      	asrs	r2, r5, #1
 8012488:	085b      	lsrs	r3, r3, #1
 801248a:	07e9      	lsls	r1, r5, #31
 801248c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8012490:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8012494:	bf48      	it	mi
 8012496:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801249a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801249e:	461c      	mov	r4, r3
 80124a0:	e780      	b.n	80123a4 <__ieee754_sqrt+0x30>
 80124a2:	0aca      	lsrs	r2, r1, #11
 80124a4:	3815      	subs	r0, #21
 80124a6:	0549      	lsls	r1, r1, #21
 80124a8:	2a00      	cmp	r2, #0
 80124aa:	d0fa      	beq.n	80124a2 <__ieee754_sqrt+0x12e>
 80124ac:	02d6      	lsls	r6, r2, #11
 80124ae:	d50a      	bpl.n	80124c6 <__ieee754_sqrt+0x152>
 80124b0:	f1c3 0420 	rsb	r4, r3, #32
 80124b4:	fa21 f404 	lsr.w	r4, r1, r4
 80124b8:	1e5d      	subs	r5, r3, #1
 80124ba:	4099      	lsls	r1, r3
 80124bc:	4322      	orrs	r2, r4
 80124be:	1b43      	subs	r3, r0, r5
 80124c0:	e78b      	b.n	80123da <__ieee754_sqrt+0x66>
 80124c2:	4618      	mov	r0, r3
 80124c4:	e7f0      	b.n	80124a8 <__ieee754_sqrt+0x134>
 80124c6:	0052      	lsls	r2, r2, #1
 80124c8:	3301      	adds	r3, #1
 80124ca:	e7ef      	b.n	80124ac <__ieee754_sqrt+0x138>
 80124cc:	46a0      	mov	r8, r4
 80124ce:	e7bf      	b.n	8012450 <__ieee754_sqrt+0xdc>
 80124d0:	7ff00000 	.word	0x7ff00000

080124d4 <__ieee754_atan2f>:
 80124d4:	ee10 2a90 	vmov	r2, s1
 80124d8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80124dc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80124e0:	b510      	push	{r4, lr}
 80124e2:	eef0 7a40 	vmov.f32	s15, s0
 80124e6:	dc06      	bgt.n	80124f6 <__ieee754_atan2f+0x22>
 80124e8:	ee10 0a10 	vmov	r0, s0
 80124ec:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80124f0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80124f4:	dd04      	ble.n	8012500 <__ieee754_atan2f+0x2c>
 80124f6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80124fa:	eeb0 0a67 	vmov.f32	s0, s15
 80124fe:	bd10      	pop	{r4, pc}
 8012500:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8012504:	d103      	bne.n	801250e <__ieee754_atan2f+0x3a>
 8012506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801250a:	f000 beef 	b.w	80132ec <atanf>
 801250e:	1794      	asrs	r4, r2, #30
 8012510:	f004 0402 	and.w	r4, r4, #2
 8012514:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8012518:	b943      	cbnz	r3, 801252c <__ieee754_atan2f+0x58>
 801251a:	2c02      	cmp	r4, #2
 801251c:	d06e      	beq.n	80125fc <__ieee754_atan2f+0x128>
 801251e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8012604 <__ieee754_atan2f+0x130>
 8012522:	2c03      	cmp	r4, #3
 8012524:	bf08      	it	eq
 8012526:	eef0 7a47 	vmoveq.f32	s15, s14
 801252a:	e7e6      	b.n	80124fa <__ieee754_atan2f+0x26>
 801252c:	b941      	cbnz	r1, 8012540 <__ieee754_atan2f+0x6c>
 801252e:	eddf 7a36 	vldr	s15, [pc, #216]	; 8012608 <__ieee754_atan2f+0x134>
 8012532:	ed9f 7a36 	vldr	s14, [pc, #216]	; 801260c <__ieee754_atan2f+0x138>
 8012536:	2800      	cmp	r0, #0
 8012538:	bfb8      	it	lt
 801253a:	eef0 7a47 	vmovlt.f32	s15, s14
 801253e:	e7dc      	b.n	80124fa <__ieee754_atan2f+0x26>
 8012540:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012544:	d122      	bne.n	801258c <__ieee754_atan2f+0xb8>
 8012546:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801254a:	d112      	bne.n	8012572 <__ieee754_atan2f+0x9e>
 801254c:	2c02      	cmp	r4, #2
 801254e:	d00a      	beq.n	8012566 <__ieee754_atan2f+0x92>
 8012550:	2c03      	cmp	r4, #3
 8012552:	d00b      	beq.n	801256c <__ieee754_atan2f+0x98>
 8012554:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8012610 <__ieee754_atan2f+0x13c>
 8012558:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8012614 <__ieee754_atan2f+0x140>
 801255c:	2c01      	cmp	r4, #1
 801255e:	bf18      	it	ne
 8012560:	eef0 7a47 	vmovne.f32	s15, s14
 8012564:	e7c9      	b.n	80124fa <__ieee754_atan2f+0x26>
 8012566:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8012618 <__ieee754_atan2f+0x144>
 801256a:	e7c6      	b.n	80124fa <__ieee754_atan2f+0x26>
 801256c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801261c <__ieee754_atan2f+0x148>
 8012570:	e7c3      	b.n	80124fa <__ieee754_atan2f+0x26>
 8012572:	2c02      	cmp	r4, #2
 8012574:	d042      	beq.n	80125fc <__ieee754_atan2f+0x128>
 8012576:	2c03      	cmp	r4, #3
 8012578:	d005      	beq.n	8012586 <__ieee754_atan2f+0xb2>
 801257a:	2c01      	cmp	r4, #1
 801257c:	eddf 7a28 	vldr	s15, [pc, #160]	; 8012620 <__ieee754_atan2f+0x14c>
 8012580:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8012624 <__ieee754_atan2f+0x150>
 8012584:	e7eb      	b.n	801255e <__ieee754_atan2f+0x8a>
 8012586:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8012604 <__ieee754_atan2f+0x130>
 801258a:	e7b6      	b.n	80124fa <__ieee754_atan2f+0x26>
 801258c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012590:	d0cd      	beq.n	801252e <__ieee754_atan2f+0x5a>
 8012592:	1a5b      	subs	r3, r3, r1
 8012594:	15db      	asrs	r3, r3, #23
 8012596:	2b3c      	cmp	r3, #60	; 0x3c
 8012598:	dc1a      	bgt.n	80125d0 <__ieee754_atan2f+0xfc>
 801259a:	2a00      	cmp	r2, #0
 801259c:	da01      	bge.n	80125a2 <__ieee754_atan2f+0xce>
 801259e:	333c      	adds	r3, #60	; 0x3c
 80125a0:	db19      	blt.n	80125d6 <__ieee754_atan2f+0x102>
 80125a2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80125a6:	f000 ff75 	bl	8013494 <fabsf>
 80125aa:	f000 fe9f 	bl	80132ec <atanf>
 80125ae:	eef0 7a40 	vmov.f32	s15, s0
 80125b2:	2c01      	cmp	r4, #1
 80125b4:	d012      	beq.n	80125dc <__ieee754_atan2f+0x108>
 80125b6:	2c02      	cmp	r4, #2
 80125b8:	d017      	beq.n	80125ea <__ieee754_atan2f+0x116>
 80125ba:	2c00      	cmp	r4, #0
 80125bc:	d09d      	beq.n	80124fa <__ieee754_atan2f+0x26>
 80125be:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8012628 <__ieee754_atan2f+0x154>
 80125c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80125c6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 801262c <__ieee754_atan2f+0x158>
 80125ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80125ce:	e794      	b.n	80124fa <__ieee754_atan2f+0x26>
 80125d0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8012608 <__ieee754_atan2f+0x134>
 80125d4:	e7ed      	b.n	80125b2 <__ieee754_atan2f+0xde>
 80125d6:	eddf 7a13 	vldr	s15, [pc, #76]	; 8012624 <__ieee754_atan2f+0x150>
 80125da:	e7ea      	b.n	80125b2 <__ieee754_atan2f+0xde>
 80125dc:	ee17 3a90 	vmov	r3, s15
 80125e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80125e4:	ee07 3a90 	vmov	s15, r3
 80125e8:	e787      	b.n	80124fa <__ieee754_atan2f+0x26>
 80125ea:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8012628 <__ieee754_atan2f+0x154>
 80125ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80125f2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 801262c <__ieee754_atan2f+0x158>
 80125f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80125fa:	e77e      	b.n	80124fa <__ieee754_atan2f+0x26>
 80125fc:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801262c <__ieee754_atan2f+0x158>
 8012600:	e77b      	b.n	80124fa <__ieee754_atan2f+0x26>
 8012602:	bf00      	nop
 8012604:	c0490fdb 	.word	0xc0490fdb
 8012608:	3fc90fdb 	.word	0x3fc90fdb
 801260c:	bfc90fdb 	.word	0xbfc90fdb
 8012610:	bf490fdb 	.word	0xbf490fdb
 8012614:	3f490fdb 	.word	0x3f490fdb
 8012618:	4016cbe4 	.word	0x4016cbe4
 801261c:	c016cbe4 	.word	0xc016cbe4
 8012620:	80000000 	.word	0x80000000
 8012624:	00000000 	.word	0x00000000
 8012628:	33bbbd2e 	.word	0x33bbbd2e
 801262c:	40490fdb 	.word	0x40490fdb

08012630 <__kernel_cos>:
 8012630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012634:	ec59 8b10 	vmov	r8, r9, d0
 8012638:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801263c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8012640:	ed2d 8b02 	vpush	{d8}
 8012644:	eeb0 8a41 	vmov.f32	s16, s2
 8012648:	eef0 8a61 	vmov.f32	s17, s3
 801264c:	da07      	bge.n	801265e <__kernel_cos+0x2e>
 801264e:	ee10 0a10 	vmov	r0, s0
 8012652:	4649      	mov	r1, r9
 8012654:	f7ee fa80 	bl	8000b58 <__aeabi_d2iz>
 8012658:	2800      	cmp	r0, #0
 801265a:	f000 8089 	beq.w	8012770 <__kernel_cos+0x140>
 801265e:	4642      	mov	r2, r8
 8012660:	464b      	mov	r3, r9
 8012662:	4640      	mov	r0, r8
 8012664:	4649      	mov	r1, r9
 8012666:	f7ed ffc7 	bl	80005f8 <__aeabi_dmul>
 801266a:	2200      	movs	r2, #0
 801266c:	4b4e      	ldr	r3, [pc, #312]	; (80127a8 <__kernel_cos+0x178>)
 801266e:	4604      	mov	r4, r0
 8012670:	460d      	mov	r5, r1
 8012672:	f7ed ffc1 	bl	80005f8 <__aeabi_dmul>
 8012676:	a340      	add	r3, pc, #256	; (adr r3, 8012778 <__kernel_cos+0x148>)
 8012678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801267c:	4682      	mov	sl, r0
 801267e:	468b      	mov	fp, r1
 8012680:	4620      	mov	r0, r4
 8012682:	4629      	mov	r1, r5
 8012684:	f7ed ffb8 	bl	80005f8 <__aeabi_dmul>
 8012688:	a33d      	add	r3, pc, #244	; (adr r3, 8012780 <__kernel_cos+0x150>)
 801268a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801268e:	f7ed fdfd 	bl	800028c <__adddf3>
 8012692:	4622      	mov	r2, r4
 8012694:	462b      	mov	r3, r5
 8012696:	f7ed ffaf 	bl	80005f8 <__aeabi_dmul>
 801269a:	a33b      	add	r3, pc, #236	; (adr r3, 8012788 <__kernel_cos+0x158>)
 801269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126a0:	f7ed fdf2 	bl	8000288 <__aeabi_dsub>
 80126a4:	4622      	mov	r2, r4
 80126a6:	462b      	mov	r3, r5
 80126a8:	f7ed ffa6 	bl	80005f8 <__aeabi_dmul>
 80126ac:	a338      	add	r3, pc, #224	; (adr r3, 8012790 <__kernel_cos+0x160>)
 80126ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126b2:	f7ed fdeb 	bl	800028c <__adddf3>
 80126b6:	4622      	mov	r2, r4
 80126b8:	462b      	mov	r3, r5
 80126ba:	f7ed ff9d 	bl	80005f8 <__aeabi_dmul>
 80126be:	a336      	add	r3, pc, #216	; (adr r3, 8012798 <__kernel_cos+0x168>)
 80126c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126c4:	f7ed fde0 	bl	8000288 <__aeabi_dsub>
 80126c8:	4622      	mov	r2, r4
 80126ca:	462b      	mov	r3, r5
 80126cc:	f7ed ff94 	bl	80005f8 <__aeabi_dmul>
 80126d0:	a333      	add	r3, pc, #204	; (adr r3, 80127a0 <__kernel_cos+0x170>)
 80126d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126d6:	f7ed fdd9 	bl	800028c <__adddf3>
 80126da:	4622      	mov	r2, r4
 80126dc:	462b      	mov	r3, r5
 80126de:	f7ed ff8b 	bl	80005f8 <__aeabi_dmul>
 80126e2:	4622      	mov	r2, r4
 80126e4:	462b      	mov	r3, r5
 80126e6:	f7ed ff87 	bl	80005f8 <__aeabi_dmul>
 80126ea:	ec53 2b18 	vmov	r2, r3, d8
 80126ee:	4604      	mov	r4, r0
 80126f0:	460d      	mov	r5, r1
 80126f2:	4640      	mov	r0, r8
 80126f4:	4649      	mov	r1, r9
 80126f6:	f7ed ff7f 	bl	80005f8 <__aeabi_dmul>
 80126fa:	460b      	mov	r3, r1
 80126fc:	4602      	mov	r2, r0
 80126fe:	4629      	mov	r1, r5
 8012700:	4620      	mov	r0, r4
 8012702:	f7ed fdc1 	bl	8000288 <__aeabi_dsub>
 8012706:	4b29      	ldr	r3, [pc, #164]	; (80127ac <__kernel_cos+0x17c>)
 8012708:	429e      	cmp	r6, r3
 801270a:	4680      	mov	r8, r0
 801270c:	4689      	mov	r9, r1
 801270e:	dc11      	bgt.n	8012734 <__kernel_cos+0x104>
 8012710:	4602      	mov	r2, r0
 8012712:	460b      	mov	r3, r1
 8012714:	4650      	mov	r0, sl
 8012716:	4659      	mov	r1, fp
 8012718:	f7ed fdb6 	bl	8000288 <__aeabi_dsub>
 801271c:	460b      	mov	r3, r1
 801271e:	4924      	ldr	r1, [pc, #144]	; (80127b0 <__kernel_cos+0x180>)
 8012720:	4602      	mov	r2, r0
 8012722:	2000      	movs	r0, #0
 8012724:	f7ed fdb0 	bl	8000288 <__aeabi_dsub>
 8012728:	ecbd 8b02 	vpop	{d8}
 801272c:	ec41 0b10 	vmov	d0, r0, r1
 8012730:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012734:	4b1f      	ldr	r3, [pc, #124]	; (80127b4 <__kernel_cos+0x184>)
 8012736:	491e      	ldr	r1, [pc, #120]	; (80127b0 <__kernel_cos+0x180>)
 8012738:	429e      	cmp	r6, r3
 801273a:	bfcc      	ite	gt
 801273c:	4d1e      	ldrgt	r5, [pc, #120]	; (80127b8 <__kernel_cos+0x188>)
 801273e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8012742:	2400      	movs	r4, #0
 8012744:	4622      	mov	r2, r4
 8012746:	462b      	mov	r3, r5
 8012748:	2000      	movs	r0, #0
 801274a:	f7ed fd9d 	bl	8000288 <__aeabi_dsub>
 801274e:	4622      	mov	r2, r4
 8012750:	4606      	mov	r6, r0
 8012752:	460f      	mov	r7, r1
 8012754:	462b      	mov	r3, r5
 8012756:	4650      	mov	r0, sl
 8012758:	4659      	mov	r1, fp
 801275a:	f7ed fd95 	bl	8000288 <__aeabi_dsub>
 801275e:	4642      	mov	r2, r8
 8012760:	464b      	mov	r3, r9
 8012762:	f7ed fd91 	bl	8000288 <__aeabi_dsub>
 8012766:	4602      	mov	r2, r0
 8012768:	460b      	mov	r3, r1
 801276a:	4630      	mov	r0, r6
 801276c:	4639      	mov	r1, r7
 801276e:	e7d9      	b.n	8012724 <__kernel_cos+0xf4>
 8012770:	2000      	movs	r0, #0
 8012772:	490f      	ldr	r1, [pc, #60]	; (80127b0 <__kernel_cos+0x180>)
 8012774:	e7d8      	b.n	8012728 <__kernel_cos+0xf8>
 8012776:	bf00      	nop
 8012778:	be8838d4 	.word	0xbe8838d4
 801277c:	bda8fae9 	.word	0xbda8fae9
 8012780:	bdb4b1c4 	.word	0xbdb4b1c4
 8012784:	3e21ee9e 	.word	0x3e21ee9e
 8012788:	809c52ad 	.word	0x809c52ad
 801278c:	3e927e4f 	.word	0x3e927e4f
 8012790:	19cb1590 	.word	0x19cb1590
 8012794:	3efa01a0 	.word	0x3efa01a0
 8012798:	16c15177 	.word	0x16c15177
 801279c:	3f56c16c 	.word	0x3f56c16c
 80127a0:	5555554c 	.word	0x5555554c
 80127a4:	3fa55555 	.word	0x3fa55555
 80127a8:	3fe00000 	.word	0x3fe00000
 80127ac:	3fd33332 	.word	0x3fd33332
 80127b0:	3ff00000 	.word	0x3ff00000
 80127b4:	3fe90000 	.word	0x3fe90000
 80127b8:	3fd20000 	.word	0x3fd20000
 80127bc:	00000000 	.word	0x00000000

080127c0 <__kernel_rem_pio2>:
 80127c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127c4:	ed2d 8b02 	vpush	{d8}
 80127c8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80127cc:	1ed4      	subs	r4, r2, #3
 80127ce:	9308      	str	r3, [sp, #32]
 80127d0:	9101      	str	r1, [sp, #4]
 80127d2:	4bc5      	ldr	r3, [pc, #788]	; (8012ae8 <__kernel_rem_pio2+0x328>)
 80127d4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80127d6:	9009      	str	r0, [sp, #36]	; 0x24
 80127d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80127dc:	9304      	str	r3, [sp, #16]
 80127de:	9b08      	ldr	r3, [sp, #32]
 80127e0:	3b01      	subs	r3, #1
 80127e2:	9307      	str	r3, [sp, #28]
 80127e4:	2318      	movs	r3, #24
 80127e6:	fb94 f4f3 	sdiv	r4, r4, r3
 80127ea:	f06f 0317 	mvn.w	r3, #23
 80127ee:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80127f2:	fb04 3303 	mla	r3, r4, r3, r3
 80127f6:	eb03 0a02 	add.w	sl, r3, r2
 80127fa:	9b04      	ldr	r3, [sp, #16]
 80127fc:	9a07      	ldr	r2, [sp, #28]
 80127fe:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8012ad8 <__kernel_rem_pio2+0x318>
 8012802:	eb03 0802 	add.w	r8, r3, r2
 8012806:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012808:	1aa7      	subs	r7, r4, r2
 801280a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801280e:	ae22      	add	r6, sp, #136	; 0x88
 8012810:	2500      	movs	r5, #0
 8012812:	4545      	cmp	r5, r8
 8012814:	dd13      	ble.n	801283e <__kernel_rem_pio2+0x7e>
 8012816:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8012ad8 <__kernel_rem_pio2+0x318>
 801281a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801281e:	2600      	movs	r6, #0
 8012820:	9b04      	ldr	r3, [sp, #16]
 8012822:	429e      	cmp	r6, r3
 8012824:	dc32      	bgt.n	801288c <__kernel_rem_pio2+0xcc>
 8012826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012828:	9302      	str	r3, [sp, #8]
 801282a:	9b08      	ldr	r3, [sp, #32]
 801282c:	199d      	adds	r5, r3, r6
 801282e:	ab22      	add	r3, sp, #136	; 0x88
 8012830:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012834:	9306      	str	r3, [sp, #24]
 8012836:	ec59 8b18 	vmov	r8, r9, d8
 801283a:	2700      	movs	r7, #0
 801283c:	e01f      	b.n	801287e <__kernel_rem_pio2+0xbe>
 801283e:	42ef      	cmn	r7, r5
 8012840:	d407      	bmi.n	8012852 <__kernel_rem_pio2+0x92>
 8012842:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012846:	f7ed fe6d 	bl	8000524 <__aeabi_i2d>
 801284a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801284e:	3501      	adds	r5, #1
 8012850:	e7df      	b.n	8012812 <__kernel_rem_pio2+0x52>
 8012852:	ec51 0b18 	vmov	r0, r1, d8
 8012856:	e7f8      	b.n	801284a <__kernel_rem_pio2+0x8a>
 8012858:	9906      	ldr	r1, [sp, #24]
 801285a:	9d02      	ldr	r5, [sp, #8]
 801285c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8012860:	9106      	str	r1, [sp, #24]
 8012862:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8012866:	9502      	str	r5, [sp, #8]
 8012868:	f7ed fec6 	bl	80005f8 <__aeabi_dmul>
 801286c:	4602      	mov	r2, r0
 801286e:	460b      	mov	r3, r1
 8012870:	4640      	mov	r0, r8
 8012872:	4649      	mov	r1, r9
 8012874:	f7ed fd0a 	bl	800028c <__adddf3>
 8012878:	3701      	adds	r7, #1
 801287a:	4680      	mov	r8, r0
 801287c:	4689      	mov	r9, r1
 801287e:	9b07      	ldr	r3, [sp, #28]
 8012880:	429f      	cmp	r7, r3
 8012882:	dde9      	ble.n	8012858 <__kernel_rem_pio2+0x98>
 8012884:	e8eb 8902 	strd	r8, r9, [fp], #8
 8012888:	3601      	adds	r6, #1
 801288a:	e7c9      	b.n	8012820 <__kernel_rem_pio2+0x60>
 801288c:	9b04      	ldr	r3, [sp, #16]
 801288e:	aa0e      	add	r2, sp, #56	; 0x38
 8012890:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012894:	930c      	str	r3, [sp, #48]	; 0x30
 8012896:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012898:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801289c:	9c04      	ldr	r4, [sp, #16]
 801289e:	930b      	str	r3, [sp, #44]	; 0x2c
 80128a0:	ab9a      	add	r3, sp, #616	; 0x268
 80128a2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80128a6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80128aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80128ae:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80128b2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80128b6:	ab9a      	add	r3, sp, #616	; 0x268
 80128b8:	445b      	add	r3, fp
 80128ba:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80128be:	2500      	movs	r5, #0
 80128c0:	1b63      	subs	r3, r4, r5
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	dc78      	bgt.n	80129b8 <__kernel_rem_pio2+0x1f8>
 80128c6:	4650      	mov	r0, sl
 80128c8:	ec49 8b10 	vmov	d0, r8, r9
 80128cc:	f000 fc98 	bl	8013200 <scalbn>
 80128d0:	ec57 6b10 	vmov	r6, r7, d0
 80128d4:	2200      	movs	r2, #0
 80128d6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80128da:	ee10 0a10 	vmov	r0, s0
 80128de:	4639      	mov	r1, r7
 80128e0:	f7ed fe8a 	bl	80005f8 <__aeabi_dmul>
 80128e4:	ec41 0b10 	vmov	d0, r0, r1
 80128e8:	f000 fb76 	bl	8012fd8 <floor>
 80128ec:	2200      	movs	r2, #0
 80128ee:	ec51 0b10 	vmov	r0, r1, d0
 80128f2:	4b7e      	ldr	r3, [pc, #504]	; (8012aec <__kernel_rem_pio2+0x32c>)
 80128f4:	f7ed fe80 	bl	80005f8 <__aeabi_dmul>
 80128f8:	4602      	mov	r2, r0
 80128fa:	460b      	mov	r3, r1
 80128fc:	4630      	mov	r0, r6
 80128fe:	4639      	mov	r1, r7
 8012900:	f7ed fcc2 	bl	8000288 <__aeabi_dsub>
 8012904:	460f      	mov	r7, r1
 8012906:	4606      	mov	r6, r0
 8012908:	f7ee f926 	bl	8000b58 <__aeabi_d2iz>
 801290c:	9006      	str	r0, [sp, #24]
 801290e:	f7ed fe09 	bl	8000524 <__aeabi_i2d>
 8012912:	4602      	mov	r2, r0
 8012914:	460b      	mov	r3, r1
 8012916:	4630      	mov	r0, r6
 8012918:	4639      	mov	r1, r7
 801291a:	f7ed fcb5 	bl	8000288 <__aeabi_dsub>
 801291e:	f1ba 0f00 	cmp.w	sl, #0
 8012922:	4606      	mov	r6, r0
 8012924:	460f      	mov	r7, r1
 8012926:	dd6c      	ble.n	8012a02 <__kernel_rem_pio2+0x242>
 8012928:	1e62      	subs	r2, r4, #1
 801292a:	ab0e      	add	r3, sp, #56	; 0x38
 801292c:	f1ca 0118 	rsb	r1, sl, #24
 8012930:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012934:	9d06      	ldr	r5, [sp, #24]
 8012936:	fa40 f301 	asr.w	r3, r0, r1
 801293a:	441d      	add	r5, r3
 801293c:	408b      	lsls	r3, r1
 801293e:	1ac0      	subs	r0, r0, r3
 8012940:	ab0e      	add	r3, sp, #56	; 0x38
 8012942:	9506      	str	r5, [sp, #24]
 8012944:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8012948:	f1ca 0317 	rsb	r3, sl, #23
 801294c:	fa40 f303 	asr.w	r3, r0, r3
 8012950:	9302      	str	r3, [sp, #8]
 8012952:	9b02      	ldr	r3, [sp, #8]
 8012954:	2b00      	cmp	r3, #0
 8012956:	dd62      	ble.n	8012a1e <__kernel_rem_pio2+0x25e>
 8012958:	9b06      	ldr	r3, [sp, #24]
 801295a:	2200      	movs	r2, #0
 801295c:	3301      	adds	r3, #1
 801295e:	9306      	str	r3, [sp, #24]
 8012960:	4615      	mov	r5, r2
 8012962:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012966:	4294      	cmp	r4, r2
 8012968:	f300 8095 	bgt.w	8012a96 <__kernel_rem_pio2+0x2d6>
 801296c:	f1ba 0f00 	cmp.w	sl, #0
 8012970:	dd07      	ble.n	8012982 <__kernel_rem_pio2+0x1c2>
 8012972:	f1ba 0f01 	cmp.w	sl, #1
 8012976:	f000 80a2 	beq.w	8012abe <__kernel_rem_pio2+0x2fe>
 801297a:	f1ba 0f02 	cmp.w	sl, #2
 801297e:	f000 80c1 	beq.w	8012b04 <__kernel_rem_pio2+0x344>
 8012982:	9b02      	ldr	r3, [sp, #8]
 8012984:	2b02      	cmp	r3, #2
 8012986:	d14a      	bne.n	8012a1e <__kernel_rem_pio2+0x25e>
 8012988:	4632      	mov	r2, r6
 801298a:	463b      	mov	r3, r7
 801298c:	2000      	movs	r0, #0
 801298e:	4958      	ldr	r1, [pc, #352]	; (8012af0 <__kernel_rem_pio2+0x330>)
 8012990:	f7ed fc7a 	bl	8000288 <__aeabi_dsub>
 8012994:	4606      	mov	r6, r0
 8012996:	460f      	mov	r7, r1
 8012998:	2d00      	cmp	r5, #0
 801299a:	d040      	beq.n	8012a1e <__kernel_rem_pio2+0x25e>
 801299c:	4650      	mov	r0, sl
 801299e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8012ae0 <__kernel_rem_pio2+0x320>
 80129a2:	f000 fc2d 	bl	8013200 <scalbn>
 80129a6:	4630      	mov	r0, r6
 80129a8:	4639      	mov	r1, r7
 80129aa:	ec53 2b10 	vmov	r2, r3, d0
 80129ae:	f7ed fc6b 	bl	8000288 <__aeabi_dsub>
 80129b2:	4606      	mov	r6, r0
 80129b4:	460f      	mov	r7, r1
 80129b6:	e032      	b.n	8012a1e <__kernel_rem_pio2+0x25e>
 80129b8:	2200      	movs	r2, #0
 80129ba:	4b4e      	ldr	r3, [pc, #312]	; (8012af4 <__kernel_rem_pio2+0x334>)
 80129bc:	4640      	mov	r0, r8
 80129be:	4649      	mov	r1, r9
 80129c0:	f7ed fe1a 	bl	80005f8 <__aeabi_dmul>
 80129c4:	f7ee f8c8 	bl	8000b58 <__aeabi_d2iz>
 80129c8:	f7ed fdac 	bl	8000524 <__aeabi_i2d>
 80129cc:	2200      	movs	r2, #0
 80129ce:	4b4a      	ldr	r3, [pc, #296]	; (8012af8 <__kernel_rem_pio2+0x338>)
 80129d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80129d4:	f7ed fe10 	bl	80005f8 <__aeabi_dmul>
 80129d8:	4602      	mov	r2, r0
 80129da:	460b      	mov	r3, r1
 80129dc:	4640      	mov	r0, r8
 80129de:	4649      	mov	r1, r9
 80129e0:	f7ed fc52 	bl	8000288 <__aeabi_dsub>
 80129e4:	f7ee f8b8 	bl	8000b58 <__aeabi_d2iz>
 80129e8:	ab0e      	add	r3, sp, #56	; 0x38
 80129ea:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80129ee:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80129f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80129f6:	f7ed fc49 	bl	800028c <__adddf3>
 80129fa:	3501      	adds	r5, #1
 80129fc:	4680      	mov	r8, r0
 80129fe:	4689      	mov	r9, r1
 8012a00:	e75e      	b.n	80128c0 <__kernel_rem_pio2+0x100>
 8012a02:	d105      	bne.n	8012a10 <__kernel_rem_pio2+0x250>
 8012a04:	1e63      	subs	r3, r4, #1
 8012a06:	aa0e      	add	r2, sp, #56	; 0x38
 8012a08:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012a0c:	15c3      	asrs	r3, r0, #23
 8012a0e:	e79f      	b.n	8012950 <__kernel_rem_pio2+0x190>
 8012a10:	2200      	movs	r2, #0
 8012a12:	4b3a      	ldr	r3, [pc, #232]	; (8012afc <__kernel_rem_pio2+0x33c>)
 8012a14:	f7ee f876 	bl	8000b04 <__aeabi_dcmpge>
 8012a18:	2800      	cmp	r0, #0
 8012a1a:	d139      	bne.n	8012a90 <__kernel_rem_pio2+0x2d0>
 8012a1c:	9002      	str	r0, [sp, #8]
 8012a1e:	2200      	movs	r2, #0
 8012a20:	2300      	movs	r3, #0
 8012a22:	4630      	mov	r0, r6
 8012a24:	4639      	mov	r1, r7
 8012a26:	f7ee f84f 	bl	8000ac8 <__aeabi_dcmpeq>
 8012a2a:	2800      	cmp	r0, #0
 8012a2c:	f000 80c7 	beq.w	8012bbe <__kernel_rem_pio2+0x3fe>
 8012a30:	1e65      	subs	r5, r4, #1
 8012a32:	462b      	mov	r3, r5
 8012a34:	2200      	movs	r2, #0
 8012a36:	9904      	ldr	r1, [sp, #16]
 8012a38:	428b      	cmp	r3, r1
 8012a3a:	da6a      	bge.n	8012b12 <__kernel_rem_pio2+0x352>
 8012a3c:	2a00      	cmp	r2, #0
 8012a3e:	f000 8088 	beq.w	8012b52 <__kernel_rem_pio2+0x392>
 8012a42:	ab0e      	add	r3, sp, #56	; 0x38
 8012a44:	f1aa 0a18 	sub.w	sl, sl, #24
 8012a48:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	f000 80b4 	beq.w	8012bba <__kernel_rem_pio2+0x3fa>
 8012a52:	4650      	mov	r0, sl
 8012a54:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8012ae0 <__kernel_rem_pio2+0x320>
 8012a58:	f000 fbd2 	bl	8013200 <scalbn>
 8012a5c:	00ec      	lsls	r4, r5, #3
 8012a5e:	ab72      	add	r3, sp, #456	; 0x1c8
 8012a60:	191e      	adds	r6, r3, r4
 8012a62:	ec59 8b10 	vmov	r8, r9, d0
 8012a66:	f106 0a08 	add.w	sl, r6, #8
 8012a6a:	462f      	mov	r7, r5
 8012a6c:	2f00      	cmp	r7, #0
 8012a6e:	f280 80df 	bge.w	8012c30 <__kernel_rem_pio2+0x470>
 8012a72:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8012ad8 <__kernel_rem_pio2+0x318>
 8012a76:	f04f 0a00 	mov.w	sl, #0
 8012a7a:	eba5 030a 	sub.w	r3, r5, sl
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	f2c0 810a 	blt.w	8012c98 <__kernel_rem_pio2+0x4d8>
 8012a84:	f8df b078 	ldr.w	fp, [pc, #120]	; 8012b00 <__kernel_rem_pio2+0x340>
 8012a88:	ec59 8b18 	vmov	r8, r9, d8
 8012a8c:	2700      	movs	r7, #0
 8012a8e:	e0f5      	b.n	8012c7c <__kernel_rem_pio2+0x4bc>
 8012a90:	2302      	movs	r3, #2
 8012a92:	9302      	str	r3, [sp, #8]
 8012a94:	e760      	b.n	8012958 <__kernel_rem_pio2+0x198>
 8012a96:	ab0e      	add	r3, sp, #56	; 0x38
 8012a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a9c:	b94d      	cbnz	r5, 8012ab2 <__kernel_rem_pio2+0x2f2>
 8012a9e:	b12b      	cbz	r3, 8012aac <__kernel_rem_pio2+0x2ec>
 8012aa0:	a80e      	add	r0, sp, #56	; 0x38
 8012aa2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012aa6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012aaa:	2301      	movs	r3, #1
 8012aac:	3201      	adds	r2, #1
 8012aae:	461d      	mov	r5, r3
 8012ab0:	e759      	b.n	8012966 <__kernel_rem_pio2+0x1a6>
 8012ab2:	a80e      	add	r0, sp, #56	; 0x38
 8012ab4:	1acb      	subs	r3, r1, r3
 8012ab6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012aba:	462b      	mov	r3, r5
 8012abc:	e7f6      	b.n	8012aac <__kernel_rem_pio2+0x2ec>
 8012abe:	1e62      	subs	r2, r4, #1
 8012ac0:	ab0e      	add	r3, sp, #56	; 0x38
 8012ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ac6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012aca:	a90e      	add	r1, sp, #56	; 0x38
 8012acc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012ad0:	e757      	b.n	8012982 <__kernel_rem_pio2+0x1c2>
 8012ad2:	bf00      	nop
 8012ad4:	f3af 8000 	nop.w
	...
 8012ae4:	3ff00000 	.word	0x3ff00000
 8012ae8:	080137f0 	.word	0x080137f0
 8012aec:	40200000 	.word	0x40200000
 8012af0:	3ff00000 	.word	0x3ff00000
 8012af4:	3e700000 	.word	0x3e700000
 8012af8:	41700000 	.word	0x41700000
 8012afc:	3fe00000 	.word	0x3fe00000
 8012b00:	080137b0 	.word	0x080137b0
 8012b04:	1e62      	subs	r2, r4, #1
 8012b06:	ab0e      	add	r3, sp, #56	; 0x38
 8012b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b0c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012b10:	e7db      	b.n	8012aca <__kernel_rem_pio2+0x30a>
 8012b12:	a90e      	add	r1, sp, #56	; 0x38
 8012b14:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012b18:	3b01      	subs	r3, #1
 8012b1a:	430a      	orrs	r2, r1
 8012b1c:	e78b      	b.n	8012a36 <__kernel_rem_pio2+0x276>
 8012b1e:	3301      	adds	r3, #1
 8012b20:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012b24:	2900      	cmp	r1, #0
 8012b26:	d0fa      	beq.n	8012b1e <__kernel_rem_pio2+0x35e>
 8012b28:	9a08      	ldr	r2, [sp, #32]
 8012b2a:	4422      	add	r2, r4
 8012b2c:	00d2      	lsls	r2, r2, #3
 8012b2e:	a922      	add	r1, sp, #136	; 0x88
 8012b30:	18e3      	adds	r3, r4, r3
 8012b32:	9206      	str	r2, [sp, #24]
 8012b34:	440a      	add	r2, r1
 8012b36:	9302      	str	r3, [sp, #8]
 8012b38:	f10b 0108 	add.w	r1, fp, #8
 8012b3c:	f102 0308 	add.w	r3, r2, #8
 8012b40:	1c66      	adds	r6, r4, #1
 8012b42:	910a      	str	r1, [sp, #40]	; 0x28
 8012b44:	2500      	movs	r5, #0
 8012b46:	930d      	str	r3, [sp, #52]	; 0x34
 8012b48:	9b02      	ldr	r3, [sp, #8]
 8012b4a:	42b3      	cmp	r3, r6
 8012b4c:	da04      	bge.n	8012b58 <__kernel_rem_pio2+0x398>
 8012b4e:	461c      	mov	r4, r3
 8012b50:	e6a6      	b.n	80128a0 <__kernel_rem_pio2+0xe0>
 8012b52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012b54:	2301      	movs	r3, #1
 8012b56:	e7e3      	b.n	8012b20 <__kernel_rem_pio2+0x360>
 8012b58:	9b06      	ldr	r3, [sp, #24]
 8012b5a:	18ef      	adds	r7, r5, r3
 8012b5c:	ab22      	add	r3, sp, #136	; 0x88
 8012b5e:	441f      	add	r7, r3
 8012b60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012b62:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012b66:	f7ed fcdd 	bl	8000524 <__aeabi_i2d>
 8012b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b6c:	461c      	mov	r4, r3
 8012b6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012b70:	e9c7 0100 	strd	r0, r1, [r7]
 8012b74:	eb03 0b05 	add.w	fp, r3, r5
 8012b78:	2700      	movs	r7, #0
 8012b7a:	f04f 0800 	mov.w	r8, #0
 8012b7e:	f04f 0900 	mov.w	r9, #0
 8012b82:	9b07      	ldr	r3, [sp, #28]
 8012b84:	429f      	cmp	r7, r3
 8012b86:	dd08      	ble.n	8012b9a <__kernel_rem_pio2+0x3da>
 8012b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b8a:	aa72      	add	r2, sp, #456	; 0x1c8
 8012b8c:	18eb      	adds	r3, r5, r3
 8012b8e:	4413      	add	r3, r2
 8012b90:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8012b94:	3601      	adds	r6, #1
 8012b96:	3508      	adds	r5, #8
 8012b98:	e7d6      	b.n	8012b48 <__kernel_rem_pio2+0x388>
 8012b9a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012b9e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012ba2:	f7ed fd29 	bl	80005f8 <__aeabi_dmul>
 8012ba6:	4602      	mov	r2, r0
 8012ba8:	460b      	mov	r3, r1
 8012baa:	4640      	mov	r0, r8
 8012bac:	4649      	mov	r1, r9
 8012bae:	f7ed fb6d 	bl	800028c <__adddf3>
 8012bb2:	3701      	adds	r7, #1
 8012bb4:	4680      	mov	r8, r0
 8012bb6:	4689      	mov	r9, r1
 8012bb8:	e7e3      	b.n	8012b82 <__kernel_rem_pio2+0x3c2>
 8012bba:	3d01      	subs	r5, #1
 8012bbc:	e741      	b.n	8012a42 <__kernel_rem_pio2+0x282>
 8012bbe:	f1ca 0000 	rsb	r0, sl, #0
 8012bc2:	ec47 6b10 	vmov	d0, r6, r7
 8012bc6:	f000 fb1b 	bl	8013200 <scalbn>
 8012bca:	ec57 6b10 	vmov	r6, r7, d0
 8012bce:	2200      	movs	r2, #0
 8012bd0:	4b99      	ldr	r3, [pc, #612]	; (8012e38 <__kernel_rem_pio2+0x678>)
 8012bd2:	ee10 0a10 	vmov	r0, s0
 8012bd6:	4639      	mov	r1, r7
 8012bd8:	f7ed ff94 	bl	8000b04 <__aeabi_dcmpge>
 8012bdc:	b1f8      	cbz	r0, 8012c1e <__kernel_rem_pio2+0x45e>
 8012bde:	2200      	movs	r2, #0
 8012be0:	4b96      	ldr	r3, [pc, #600]	; (8012e3c <__kernel_rem_pio2+0x67c>)
 8012be2:	4630      	mov	r0, r6
 8012be4:	4639      	mov	r1, r7
 8012be6:	f7ed fd07 	bl	80005f8 <__aeabi_dmul>
 8012bea:	f7ed ffb5 	bl	8000b58 <__aeabi_d2iz>
 8012bee:	4680      	mov	r8, r0
 8012bf0:	f7ed fc98 	bl	8000524 <__aeabi_i2d>
 8012bf4:	2200      	movs	r2, #0
 8012bf6:	4b90      	ldr	r3, [pc, #576]	; (8012e38 <__kernel_rem_pio2+0x678>)
 8012bf8:	f7ed fcfe 	bl	80005f8 <__aeabi_dmul>
 8012bfc:	460b      	mov	r3, r1
 8012bfe:	4602      	mov	r2, r0
 8012c00:	4639      	mov	r1, r7
 8012c02:	4630      	mov	r0, r6
 8012c04:	f7ed fb40 	bl	8000288 <__aeabi_dsub>
 8012c08:	f7ed ffa6 	bl	8000b58 <__aeabi_d2iz>
 8012c0c:	1c65      	adds	r5, r4, #1
 8012c0e:	ab0e      	add	r3, sp, #56	; 0x38
 8012c10:	f10a 0a18 	add.w	sl, sl, #24
 8012c14:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012c18:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8012c1c:	e719      	b.n	8012a52 <__kernel_rem_pio2+0x292>
 8012c1e:	4630      	mov	r0, r6
 8012c20:	4639      	mov	r1, r7
 8012c22:	f7ed ff99 	bl	8000b58 <__aeabi_d2iz>
 8012c26:	ab0e      	add	r3, sp, #56	; 0x38
 8012c28:	4625      	mov	r5, r4
 8012c2a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012c2e:	e710      	b.n	8012a52 <__kernel_rem_pio2+0x292>
 8012c30:	ab0e      	add	r3, sp, #56	; 0x38
 8012c32:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8012c36:	f7ed fc75 	bl	8000524 <__aeabi_i2d>
 8012c3a:	4642      	mov	r2, r8
 8012c3c:	464b      	mov	r3, r9
 8012c3e:	f7ed fcdb 	bl	80005f8 <__aeabi_dmul>
 8012c42:	2200      	movs	r2, #0
 8012c44:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8012c48:	4b7c      	ldr	r3, [pc, #496]	; (8012e3c <__kernel_rem_pio2+0x67c>)
 8012c4a:	4640      	mov	r0, r8
 8012c4c:	4649      	mov	r1, r9
 8012c4e:	f7ed fcd3 	bl	80005f8 <__aeabi_dmul>
 8012c52:	3f01      	subs	r7, #1
 8012c54:	4680      	mov	r8, r0
 8012c56:	4689      	mov	r9, r1
 8012c58:	e708      	b.n	8012a6c <__kernel_rem_pio2+0x2ac>
 8012c5a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8012c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c62:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8012c66:	f7ed fcc7 	bl	80005f8 <__aeabi_dmul>
 8012c6a:	4602      	mov	r2, r0
 8012c6c:	460b      	mov	r3, r1
 8012c6e:	4640      	mov	r0, r8
 8012c70:	4649      	mov	r1, r9
 8012c72:	f7ed fb0b 	bl	800028c <__adddf3>
 8012c76:	3701      	adds	r7, #1
 8012c78:	4680      	mov	r8, r0
 8012c7a:	4689      	mov	r9, r1
 8012c7c:	9b04      	ldr	r3, [sp, #16]
 8012c7e:	429f      	cmp	r7, r3
 8012c80:	dc01      	bgt.n	8012c86 <__kernel_rem_pio2+0x4c6>
 8012c82:	45ba      	cmp	sl, r7
 8012c84:	dae9      	bge.n	8012c5a <__kernel_rem_pio2+0x49a>
 8012c86:	ab4a      	add	r3, sp, #296	; 0x128
 8012c88:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012c8c:	e9c3 8900 	strd	r8, r9, [r3]
 8012c90:	f10a 0a01 	add.w	sl, sl, #1
 8012c94:	3e08      	subs	r6, #8
 8012c96:	e6f0      	b.n	8012a7a <__kernel_rem_pio2+0x2ba>
 8012c98:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012c9a:	2b03      	cmp	r3, #3
 8012c9c:	d85b      	bhi.n	8012d56 <__kernel_rem_pio2+0x596>
 8012c9e:	e8df f003 	tbb	[pc, r3]
 8012ca2:	264a      	.short	0x264a
 8012ca4:	0226      	.short	0x0226
 8012ca6:	ab9a      	add	r3, sp, #616	; 0x268
 8012ca8:	441c      	add	r4, r3
 8012caa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012cae:	46a2      	mov	sl, r4
 8012cb0:	46ab      	mov	fp, r5
 8012cb2:	f1bb 0f00 	cmp.w	fp, #0
 8012cb6:	dc6c      	bgt.n	8012d92 <__kernel_rem_pio2+0x5d2>
 8012cb8:	46a2      	mov	sl, r4
 8012cba:	46ab      	mov	fp, r5
 8012cbc:	f1bb 0f01 	cmp.w	fp, #1
 8012cc0:	f300 8086 	bgt.w	8012dd0 <__kernel_rem_pio2+0x610>
 8012cc4:	2000      	movs	r0, #0
 8012cc6:	2100      	movs	r1, #0
 8012cc8:	2d01      	cmp	r5, #1
 8012cca:	f300 80a0 	bgt.w	8012e0e <__kernel_rem_pio2+0x64e>
 8012cce:	9b02      	ldr	r3, [sp, #8]
 8012cd0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8012cd4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	f040 809e 	bne.w	8012e1a <__kernel_rem_pio2+0x65a>
 8012cde:	9b01      	ldr	r3, [sp, #4]
 8012ce0:	e9c3 7800 	strd	r7, r8, [r3]
 8012ce4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012ce8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012cec:	e033      	b.n	8012d56 <__kernel_rem_pio2+0x596>
 8012cee:	3408      	adds	r4, #8
 8012cf0:	ab4a      	add	r3, sp, #296	; 0x128
 8012cf2:	441c      	add	r4, r3
 8012cf4:	462e      	mov	r6, r5
 8012cf6:	2000      	movs	r0, #0
 8012cf8:	2100      	movs	r1, #0
 8012cfa:	2e00      	cmp	r6, #0
 8012cfc:	da3a      	bge.n	8012d74 <__kernel_rem_pio2+0x5b4>
 8012cfe:	9b02      	ldr	r3, [sp, #8]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d03d      	beq.n	8012d80 <__kernel_rem_pio2+0x5c0>
 8012d04:	4602      	mov	r2, r0
 8012d06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012d0a:	9c01      	ldr	r4, [sp, #4]
 8012d0c:	e9c4 2300 	strd	r2, r3, [r4]
 8012d10:	4602      	mov	r2, r0
 8012d12:	460b      	mov	r3, r1
 8012d14:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012d18:	f7ed fab6 	bl	8000288 <__aeabi_dsub>
 8012d1c:	ae4c      	add	r6, sp, #304	; 0x130
 8012d1e:	2401      	movs	r4, #1
 8012d20:	42a5      	cmp	r5, r4
 8012d22:	da30      	bge.n	8012d86 <__kernel_rem_pio2+0x5c6>
 8012d24:	9b02      	ldr	r3, [sp, #8]
 8012d26:	b113      	cbz	r3, 8012d2e <__kernel_rem_pio2+0x56e>
 8012d28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012d2c:	4619      	mov	r1, r3
 8012d2e:	9b01      	ldr	r3, [sp, #4]
 8012d30:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012d34:	e00f      	b.n	8012d56 <__kernel_rem_pio2+0x596>
 8012d36:	ab9a      	add	r3, sp, #616	; 0x268
 8012d38:	441c      	add	r4, r3
 8012d3a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012d3e:	2000      	movs	r0, #0
 8012d40:	2100      	movs	r1, #0
 8012d42:	2d00      	cmp	r5, #0
 8012d44:	da10      	bge.n	8012d68 <__kernel_rem_pio2+0x5a8>
 8012d46:	9b02      	ldr	r3, [sp, #8]
 8012d48:	b113      	cbz	r3, 8012d50 <__kernel_rem_pio2+0x590>
 8012d4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012d4e:	4619      	mov	r1, r3
 8012d50:	9b01      	ldr	r3, [sp, #4]
 8012d52:	e9c3 0100 	strd	r0, r1, [r3]
 8012d56:	9b06      	ldr	r3, [sp, #24]
 8012d58:	f003 0007 	and.w	r0, r3, #7
 8012d5c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8012d60:	ecbd 8b02 	vpop	{d8}
 8012d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d68:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012d6c:	f7ed fa8e 	bl	800028c <__adddf3>
 8012d70:	3d01      	subs	r5, #1
 8012d72:	e7e6      	b.n	8012d42 <__kernel_rem_pio2+0x582>
 8012d74:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012d78:	f7ed fa88 	bl	800028c <__adddf3>
 8012d7c:	3e01      	subs	r6, #1
 8012d7e:	e7bc      	b.n	8012cfa <__kernel_rem_pio2+0x53a>
 8012d80:	4602      	mov	r2, r0
 8012d82:	460b      	mov	r3, r1
 8012d84:	e7c1      	b.n	8012d0a <__kernel_rem_pio2+0x54a>
 8012d86:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012d8a:	f7ed fa7f 	bl	800028c <__adddf3>
 8012d8e:	3401      	adds	r4, #1
 8012d90:	e7c6      	b.n	8012d20 <__kernel_rem_pio2+0x560>
 8012d92:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8012d96:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012d9a:	4640      	mov	r0, r8
 8012d9c:	ec53 2b17 	vmov	r2, r3, d7
 8012da0:	4649      	mov	r1, r9
 8012da2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012da6:	f7ed fa71 	bl	800028c <__adddf3>
 8012daa:	4602      	mov	r2, r0
 8012dac:	460b      	mov	r3, r1
 8012dae:	4606      	mov	r6, r0
 8012db0:	460f      	mov	r7, r1
 8012db2:	4640      	mov	r0, r8
 8012db4:	4649      	mov	r1, r9
 8012db6:	f7ed fa67 	bl	8000288 <__aeabi_dsub>
 8012dba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012dbe:	f7ed fa65 	bl	800028c <__adddf3>
 8012dc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012dc6:	e9ca 0100 	strd	r0, r1, [sl]
 8012dca:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8012dce:	e770      	b.n	8012cb2 <__kernel_rem_pio2+0x4f2>
 8012dd0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8012dd4:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012dd8:	4630      	mov	r0, r6
 8012dda:	ec53 2b17 	vmov	r2, r3, d7
 8012dde:	4639      	mov	r1, r7
 8012de0:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012de4:	f7ed fa52 	bl	800028c <__adddf3>
 8012de8:	4602      	mov	r2, r0
 8012dea:	460b      	mov	r3, r1
 8012dec:	4680      	mov	r8, r0
 8012dee:	4689      	mov	r9, r1
 8012df0:	4630      	mov	r0, r6
 8012df2:	4639      	mov	r1, r7
 8012df4:	f7ed fa48 	bl	8000288 <__aeabi_dsub>
 8012df8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012dfc:	f7ed fa46 	bl	800028c <__adddf3>
 8012e00:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012e04:	e9ca 0100 	strd	r0, r1, [sl]
 8012e08:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8012e0c:	e756      	b.n	8012cbc <__kernel_rem_pio2+0x4fc>
 8012e0e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012e12:	f7ed fa3b 	bl	800028c <__adddf3>
 8012e16:	3d01      	subs	r5, #1
 8012e18:	e756      	b.n	8012cc8 <__kernel_rem_pio2+0x508>
 8012e1a:	9b01      	ldr	r3, [sp, #4]
 8012e1c:	9a01      	ldr	r2, [sp, #4]
 8012e1e:	601f      	str	r7, [r3, #0]
 8012e20:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8012e24:	605c      	str	r4, [r3, #4]
 8012e26:	609d      	str	r5, [r3, #8]
 8012e28:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012e2c:	60d3      	str	r3, [r2, #12]
 8012e2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e32:	6110      	str	r0, [r2, #16]
 8012e34:	6153      	str	r3, [r2, #20]
 8012e36:	e78e      	b.n	8012d56 <__kernel_rem_pio2+0x596>
 8012e38:	41700000 	.word	0x41700000
 8012e3c:	3e700000 	.word	0x3e700000

08012e40 <__kernel_sin>:
 8012e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e44:	ec55 4b10 	vmov	r4, r5, d0
 8012e48:	b085      	sub	sp, #20
 8012e4a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012e4e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012e52:	ed8d 1b00 	vstr	d1, [sp]
 8012e56:	9002      	str	r0, [sp, #8]
 8012e58:	da06      	bge.n	8012e68 <__kernel_sin+0x28>
 8012e5a:	ee10 0a10 	vmov	r0, s0
 8012e5e:	4629      	mov	r1, r5
 8012e60:	f7ed fe7a 	bl	8000b58 <__aeabi_d2iz>
 8012e64:	2800      	cmp	r0, #0
 8012e66:	d051      	beq.n	8012f0c <__kernel_sin+0xcc>
 8012e68:	4622      	mov	r2, r4
 8012e6a:	462b      	mov	r3, r5
 8012e6c:	4620      	mov	r0, r4
 8012e6e:	4629      	mov	r1, r5
 8012e70:	f7ed fbc2 	bl	80005f8 <__aeabi_dmul>
 8012e74:	4682      	mov	sl, r0
 8012e76:	468b      	mov	fp, r1
 8012e78:	4602      	mov	r2, r0
 8012e7a:	460b      	mov	r3, r1
 8012e7c:	4620      	mov	r0, r4
 8012e7e:	4629      	mov	r1, r5
 8012e80:	f7ed fbba 	bl	80005f8 <__aeabi_dmul>
 8012e84:	a341      	add	r3, pc, #260	; (adr r3, 8012f8c <__kernel_sin+0x14c>)
 8012e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e8a:	4680      	mov	r8, r0
 8012e8c:	4689      	mov	r9, r1
 8012e8e:	4650      	mov	r0, sl
 8012e90:	4659      	mov	r1, fp
 8012e92:	f7ed fbb1 	bl	80005f8 <__aeabi_dmul>
 8012e96:	a33f      	add	r3, pc, #252	; (adr r3, 8012f94 <__kernel_sin+0x154>)
 8012e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e9c:	f7ed f9f4 	bl	8000288 <__aeabi_dsub>
 8012ea0:	4652      	mov	r2, sl
 8012ea2:	465b      	mov	r3, fp
 8012ea4:	f7ed fba8 	bl	80005f8 <__aeabi_dmul>
 8012ea8:	a33c      	add	r3, pc, #240	; (adr r3, 8012f9c <__kernel_sin+0x15c>)
 8012eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eae:	f7ed f9ed 	bl	800028c <__adddf3>
 8012eb2:	4652      	mov	r2, sl
 8012eb4:	465b      	mov	r3, fp
 8012eb6:	f7ed fb9f 	bl	80005f8 <__aeabi_dmul>
 8012eba:	a33a      	add	r3, pc, #232	; (adr r3, 8012fa4 <__kernel_sin+0x164>)
 8012ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ec0:	f7ed f9e2 	bl	8000288 <__aeabi_dsub>
 8012ec4:	4652      	mov	r2, sl
 8012ec6:	465b      	mov	r3, fp
 8012ec8:	f7ed fb96 	bl	80005f8 <__aeabi_dmul>
 8012ecc:	a337      	add	r3, pc, #220	; (adr r3, 8012fac <__kernel_sin+0x16c>)
 8012ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ed2:	f7ed f9db 	bl	800028c <__adddf3>
 8012ed6:	9b02      	ldr	r3, [sp, #8]
 8012ed8:	4606      	mov	r6, r0
 8012eda:	460f      	mov	r7, r1
 8012edc:	b9db      	cbnz	r3, 8012f16 <__kernel_sin+0xd6>
 8012ede:	4602      	mov	r2, r0
 8012ee0:	460b      	mov	r3, r1
 8012ee2:	4650      	mov	r0, sl
 8012ee4:	4659      	mov	r1, fp
 8012ee6:	f7ed fb87 	bl	80005f8 <__aeabi_dmul>
 8012eea:	a325      	add	r3, pc, #148	; (adr r3, 8012f80 <__kernel_sin+0x140>)
 8012eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ef0:	f7ed f9ca 	bl	8000288 <__aeabi_dsub>
 8012ef4:	4642      	mov	r2, r8
 8012ef6:	464b      	mov	r3, r9
 8012ef8:	f7ed fb7e 	bl	80005f8 <__aeabi_dmul>
 8012efc:	4602      	mov	r2, r0
 8012efe:	460b      	mov	r3, r1
 8012f00:	4620      	mov	r0, r4
 8012f02:	4629      	mov	r1, r5
 8012f04:	f7ed f9c2 	bl	800028c <__adddf3>
 8012f08:	4604      	mov	r4, r0
 8012f0a:	460d      	mov	r5, r1
 8012f0c:	ec45 4b10 	vmov	d0, r4, r5
 8012f10:	b005      	add	sp, #20
 8012f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f16:	2200      	movs	r2, #0
 8012f18:	4b1b      	ldr	r3, [pc, #108]	; (8012f88 <__kernel_sin+0x148>)
 8012f1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f1e:	f7ed fb6b 	bl	80005f8 <__aeabi_dmul>
 8012f22:	4632      	mov	r2, r6
 8012f24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012f28:	463b      	mov	r3, r7
 8012f2a:	4640      	mov	r0, r8
 8012f2c:	4649      	mov	r1, r9
 8012f2e:	f7ed fb63 	bl	80005f8 <__aeabi_dmul>
 8012f32:	4602      	mov	r2, r0
 8012f34:	460b      	mov	r3, r1
 8012f36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012f3a:	f7ed f9a5 	bl	8000288 <__aeabi_dsub>
 8012f3e:	4652      	mov	r2, sl
 8012f40:	465b      	mov	r3, fp
 8012f42:	f7ed fb59 	bl	80005f8 <__aeabi_dmul>
 8012f46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012f4a:	f7ed f99d 	bl	8000288 <__aeabi_dsub>
 8012f4e:	a30c      	add	r3, pc, #48	; (adr r3, 8012f80 <__kernel_sin+0x140>)
 8012f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f54:	4606      	mov	r6, r0
 8012f56:	460f      	mov	r7, r1
 8012f58:	4640      	mov	r0, r8
 8012f5a:	4649      	mov	r1, r9
 8012f5c:	f7ed fb4c 	bl	80005f8 <__aeabi_dmul>
 8012f60:	4602      	mov	r2, r0
 8012f62:	460b      	mov	r3, r1
 8012f64:	4630      	mov	r0, r6
 8012f66:	4639      	mov	r1, r7
 8012f68:	f7ed f990 	bl	800028c <__adddf3>
 8012f6c:	4602      	mov	r2, r0
 8012f6e:	460b      	mov	r3, r1
 8012f70:	4620      	mov	r0, r4
 8012f72:	4629      	mov	r1, r5
 8012f74:	f7ed f988 	bl	8000288 <__aeabi_dsub>
 8012f78:	e7c6      	b.n	8012f08 <__kernel_sin+0xc8>
 8012f7a:	bf00      	nop
 8012f7c:	f3af 8000 	nop.w
 8012f80:	55555549 	.word	0x55555549
 8012f84:	3fc55555 	.word	0x3fc55555
 8012f88:	3fe00000 	.word	0x3fe00000
 8012f8c:	5acfd57c 	.word	0x5acfd57c
 8012f90:	3de5d93a 	.word	0x3de5d93a
 8012f94:	8a2b9ceb 	.word	0x8a2b9ceb
 8012f98:	3e5ae5e6 	.word	0x3e5ae5e6
 8012f9c:	57b1fe7d 	.word	0x57b1fe7d
 8012fa0:	3ec71de3 	.word	0x3ec71de3
 8012fa4:	19c161d5 	.word	0x19c161d5
 8012fa8:	3f2a01a0 	.word	0x3f2a01a0
 8012fac:	1110f8a6 	.word	0x1110f8a6
 8012fb0:	3f811111 	.word	0x3f811111

08012fb4 <fabs>:
 8012fb4:	ec51 0b10 	vmov	r0, r1, d0
 8012fb8:	ee10 2a10 	vmov	r2, s0
 8012fbc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012fc0:	ec43 2b10 	vmov	d0, r2, r3
 8012fc4:	4770      	bx	lr

08012fc6 <finite>:
 8012fc6:	ee10 3a90 	vmov	r3, s1
 8012fca:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8012fce:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012fd2:	0fc0      	lsrs	r0, r0, #31
 8012fd4:	4770      	bx	lr
	...

08012fd8 <floor>:
 8012fd8:	ec51 0b10 	vmov	r0, r1, d0
 8012fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fe0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012fe4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012fe8:	2e13      	cmp	r6, #19
 8012fea:	460c      	mov	r4, r1
 8012fec:	ee10 5a10 	vmov	r5, s0
 8012ff0:	4680      	mov	r8, r0
 8012ff2:	dc34      	bgt.n	801305e <floor+0x86>
 8012ff4:	2e00      	cmp	r6, #0
 8012ff6:	da16      	bge.n	8013026 <floor+0x4e>
 8012ff8:	a335      	add	r3, pc, #212	; (adr r3, 80130d0 <floor+0xf8>)
 8012ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ffe:	f7ed f945 	bl	800028c <__adddf3>
 8013002:	2200      	movs	r2, #0
 8013004:	2300      	movs	r3, #0
 8013006:	f7ed fd87 	bl	8000b18 <__aeabi_dcmpgt>
 801300a:	b148      	cbz	r0, 8013020 <floor+0x48>
 801300c:	2c00      	cmp	r4, #0
 801300e:	da59      	bge.n	80130c4 <floor+0xec>
 8013010:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013014:	4a30      	ldr	r2, [pc, #192]	; (80130d8 <floor+0x100>)
 8013016:	432b      	orrs	r3, r5
 8013018:	2500      	movs	r5, #0
 801301a:	42ab      	cmp	r3, r5
 801301c:	bf18      	it	ne
 801301e:	4614      	movne	r4, r2
 8013020:	4621      	mov	r1, r4
 8013022:	4628      	mov	r0, r5
 8013024:	e025      	b.n	8013072 <floor+0x9a>
 8013026:	4f2d      	ldr	r7, [pc, #180]	; (80130dc <floor+0x104>)
 8013028:	4137      	asrs	r7, r6
 801302a:	ea01 0307 	and.w	r3, r1, r7
 801302e:	4303      	orrs	r3, r0
 8013030:	d01f      	beq.n	8013072 <floor+0x9a>
 8013032:	a327      	add	r3, pc, #156	; (adr r3, 80130d0 <floor+0xf8>)
 8013034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013038:	f7ed f928 	bl	800028c <__adddf3>
 801303c:	2200      	movs	r2, #0
 801303e:	2300      	movs	r3, #0
 8013040:	f7ed fd6a 	bl	8000b18 <__aeabi_dcmpgt>
 8013044:	2800      	cmp	r0, #0
 8013046:	d0eb      	beq.n	8013020 <floor+0x48>
 8013048:	2c00      	cmp	r4, #0
 801304a:	bfbe      	ittt	lt
 801304c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013050:	fa43 f606 	asrlt.w	r6, r3, r6
 8013054:	19a4      	addlt	r4, r4, r6
 8013056:	ea24 0407 	bic.w	r4, r4, r7
 801305a:	2500      	movs	r5, #0
 801305c:	e7e0      	b.n	8013020 <floor+0x48>
 801305e:	2e33      	cmp	r6, #51	; 0x33
 8013060:	dd0b      	ble.n	801307a <floor+0xa2>
 8013062:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013066:	d104      	bne.n	8013072 <floor+0x9a>
 8013068:	ee10 2a10 	vmov	r2, s0
 801306c:	460b      	mov	r3, r1
 801306e:	f7ed f90d 	bl	800028c <__adddf3>
 8013072:	ec41 0b10 	vmov	d0, r0, r1
 8013076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801307a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801307e:	f04f 33ff 	mov.w	r3, #4294967295
 8013082:	fa23 f707 	lsr.w	r7, r3, r7
 8013086:	4207      	tst	r7, r0
 8013088:	d0f3      	beq.n	8013072 <floor+0x9a>
 801308a:	a311      	add	r3, pc, #68	; (adr r3, 80130d0 <floor+0xf8>)
 801308c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013090:	f7ed f8fc 	bl	800028c <__adddf3>
 8013094:	2200      	movs	r2, #0
 8013096:	2300      	movs	r3, #0
 8013098:	f7ed fd3e 	bl	8000b18 <__aeabi_dcmpgt>
 801309c:	2800      	cmp	r0, #0
 801309e:	d0bf      	beq.n	8013020 <floor+0x48>
 80130a0:	2c00      	cmp	r4, #0
 80130a2:	da02      	bge.n	80130aa <floor+0xd2>
 80130a4:	2e14      	cmp	r6, #20
 80130a6:	d103      	bne.n	80130b0 <floor+0xd8>
 80130a8:	3401      	adds	r4, #1
 80130aa:	ea25 0507 	bic.w	r5, r5, r7
 80130ae:	e7b7      	b.n	8013020 <floor+0x48>
 80130b0:	2301      	movs	r3, #1
 80130b2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80130b6:	fa03 f606 	lsl.w	r6, r3, r6
 80130ba:	4435      	add	r5, r6
 80130bc:	4545      	cmp	r5, r8
 80130be:	bf38      	it	cc
 80130c0:	18e4      	addcc	r4, r4, r3
 80130c2:	e7f2      	b.n	80130aa <floor+0xd2>
 80130c4:	2500      	movs	r5, #0
 80130c6:	462c      	mov	r4, r5
 80130c8:	e7aa      	b.n	8013020 <floor+0x48>
 80130ca:	bf00      	nop
 80130cc:	f3af 8000 	nop.w
 80130d0:	8800759c 	.word	0x8800759c
 80130d4:	7e37e43c 	.word	0x7e37e43c
 80130d8:	bff00000 	.word	0xbff00000
 80130dc:	000fffff 	.word	0x000fffff

080130e0 <matherr>:
 80130e0:	2000      	movs	r0, #0
 80130e2:	4770      	bx	lr
 80130e4:	0000      	movs	r0, r0
	...

080130e8 <nan>:
 80130e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80130f0 <nan+0x8>
 80130ec:	4770      	bx	lr
 80130ee:	bf00      	nop
 80130f0:	00000000 	.word	0x00000000
 80130f4:	7ff80000 	.word	0x7ff80000

080130f8 <rint>:
 80130f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80130fa:	ec51 0b10 	vmov	r0, r1, d0
 80130fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013102:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8013106:	2e13      	cmp	r6, #19
 8013108:	460b      	mov	r3, r1
 801310a:	ee10 4a10 	vmov	r4, s0
 801310e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8013112:	dc56      	bgt.n	80131c2 <rint+0xca>
 8013114:	2e00      	cmp	r6, #0
 8013116:	da2b      	bge.n	8013170 <rint+0x78>
 8013118:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801311c:	4302      	orrs	r2, r0
 801311e:	d023      	beq.n	8013168 <rint+0x70>
 8013120:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8013124:	4302      	orrs	r2, r0
 8013126:	4254      	negs	r4, r2
 8013128:	4314      	orrs	r4, r2
 801312a:	0c4b      	lsrs	r3, r1, #17
 801312c:	0b24      	lsrs	r4, r4, #12
 801312e:	045b      	lsls	r3, r3, #17
 8013130:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8013134:	ea44 0103 	orr.w	r1, r4, r3
 8013138:	460b      	mov	r3, r1
 801313a:	492f      	ldr	r1, [pc, #188]	; (80131f8 <rint+0x100>)
 801313c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8013140:	e9d1 6700 	ldrd	r6, r7, [r1]
 8013144:	4602      	mov	r2, r0
 8013146:	4639      	mov	r1, r7
 8013148:	4630      	mov	r0, r6
 801314a:	f7ed f89f 	bl	800028c <__adddf3>
 801314e:	e9cd 0100 	strd	r0, r1, [sp]
 8013152:	463b      	mov	r3, r7
 8013154:	4632      	mov	r2, r6
 8013156:	e9dd 0100 	ldrd	r0, r1, [sp]
 801315a:	f7ed f895 	bl	8000288 <__aeabi_dsub>
 801315e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013162:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8013166:	4639      	mov	r1, r7
 8013168:	ec41 0b10 	vmov	d0, r0, r1
 801316c:	b003      	add	sp, #12
 801316e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013170:	4a22      	ldr	r2, [pc, #136]	; (80131fc <rint+0x104>)
 8013172:	4132      	asrs	r2, r6
 8013174:	ea01 0702 	and.w	r7, r1, r2
 8013178:	4307      	orrs	r7, r0
 801317a:	d0f5      	beq.n	8013168 <rint+0x70>
 801317c:	0852      	lsrs	r2, r2, #1
 801317e:	4011      	ands	r1, r2
 8013180:	430c      	orrs	r4, r1
 8013182:	d00b      	beq.n	801319c <rint+0xa4>
 8013184:	ea23 0202 	bic.w	r2, r3, r2
 8013188:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801318c:	2e13      	cmp	r6, #19
 801318e:	fa43 f306 	asr.w	r3, r3, r6
 8013192:	bf0c      	ite	eq
 8013194:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8013198:	2400      	movne	r4, #0
 801319a:	4313      	orrs	r3, r2
 801319c:	4916      	ldr	r1, [pc, #88]	; (80131f8 <rint+0x100>)
 801319e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80131a2:	4622      	mov	r2, r4
 80131a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80131a8:	4620      	mov	r0, r4
 80131aa:	4629      	mov	r1, r5
 80131ac:	f7ed f86e 	bl	800028c <__adddf3>
 80131b0:	e9cd 0100 	strd	r0, r1, [sp]
 80131b4:	4622      	mov	r2, r4
 80131b6:	462b      	mov	r3, r5
 80131b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80131bc:	f7ed f864 	bl	8000288 <__aeabi_dsub>
 80131c0:	e7d2      	b.n	8013168 <rint+0x70>
 80131c2:	2e33      	cmp	r6, #51	; 0x33
 80131c4:	dd07      	ble.n	80131d6 <rint+0xde>
 80131c6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80131ca:	d1cd      	bne.n	8013168 <rint+0x70>
 80131cc:	ee10 2a10 	vmov	r2, s0
 80131d0:	f7ed f85c 	bl	800028c <__adddf3>
 80131d4:	e7c8      	b.n	8013168 <rint+0x70>
 80131d6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80131da:	f04f 32ff 	mov.w	r2, #4294967295
 80131de:	40f2      	lsrs	r2, r6
 80131e0:	4210      	tst	r0, r2
 80131e2:	d0c1      	beq.n	8013168 <rint+0x70>
 80131e4:	0852      	lsrs	r2, r2, #1
 80131e6:	4210      	tst	r0, r2
 80131e8:	bf1f      	itttt	ne
 80131ea:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80131ee:	ea20 0202 	bicne.w	r2, r0, r2
 80131f2:	4134      	asrne	r4, r6
 80131f4:	4314      	orrne	r4, r2
 80131f6:	e7d1      	b.n	801319c <rint+0xa4>
 80131f8:	08013800 	.word	0x08013800
 80131fc:	000fffff 	.word	0x000fffff

08013200 <scalbn>:
 8013200:	b570      	push	{r4, r5, r6, lr}
 8013202:	ec55 4b10 	vmov	r4, r5, d0
 8013206:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801320a:	4606      	mov	r6, r0
 801320c:	462b      	mov	r3, r5
 801320e:	b9aa      	cbnz	r2, 801323c <scalbn+0x3c>
 8013210:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013214:	4323      	orrs	r3, r4
 8013216:	d03b      	beq.n	8013290 <scalbn+0x90>
 8013218:	4b31      	ldr	r3, [pc, #196]	; (80132e0 <scalbn+0xe0>)
 801321a:	4629      	mov	r1, r5
 801321c:	2200      	movs	r2, #0
 801321e:	ee10 0a10 	vmov	r0, s0
 8013222:	f7ed f9e9 	bl	80005f8 <__aeabi_dmul>
 8013226:	4b2f      	ldr	r3, [pc, #188]	; (80132e4 <scalbn+0xe4>)
 8013228:	429e      	cmp	r6, r3
 801322a:	4604      	mov	r4, r0
 801322c:	460d      	mov	r5, r1
 801322e:	da12      	bge.n	8013256 <scalbn+0x56>
 8013230:	a327      	add	r3, pc, #156	; (adr r3, 80132d0 <scalbn+0xd0>)
 8013232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013236:	f7ed f9df 	bl	80005f8 <__aeabi_dmul>
 801323a:	e009      	b.n	8013250 <scalbn+0x50>
 801323c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013240:	428a      	cmp	r2, r1
 8013242:	d10c      	bne.n	801325e <scalbn+0x5e>
 8013244:	ee10 2a10 	vmov	r2, s0
 8013248:	4620      	mov	r0, r4
 801324a:	4629      	mov	r1, r5
 801324c:	f7ed f81e 	bl	800028c <__adddf3>
 8013250:	4604      	mov	r4, r0
 8013252:	460d      	mov	r5, r1
 8013254:	e01c      	b.n	8013290 <scalbn+0x90>
 8013256:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801325a:	460b      	mov	r3, r1
 801325c:	3a36      	subs	r2, #54	; 0x36
 801325e:	4432      	add	r2, r6
 8013260:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013264:	428a      	cmp	r2, r1
 8013266:	dd0b      	ble.n	8013280 <scalbn+0x80>
 8013268:	ec45 4b11 	vmov	d1, r4, r5
 801326c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80132d8 <scalbn+0xd8>
 8013270:	f000 f917 	bl	80134a2 <copysign>
 8013274:	a318      	add	r3, pc, #96	; (adr r3, 80132d8 <scalbn+0xd8>)
 8013276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801327a:	ec51 0b10 	vmov	r0, r1, d0
 801327e:	e7da      	b.n	8013236 <scalbn+0x36>
 8013280:	2a00      	cmp	r2, #0
 8013282:	dd08      	ble.n	8013296 <scalbn+0x96>
 8013284:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013288:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801328c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013290:	ec45 4b10 	vmov	d0, r4, r5
 8013294:	bd70      	pop	{r4, r5, r6, pc}
 8013296:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801329a:	da0d      	bge.n	80132b8 <scalbn+0xb8>
 801329c:	f24c 3350 	movw	r3, #50000	; 0xc350
 80132a0:	429e      	cmp	r6, r3
 80132a2:	ec45 4b11 	vmov	d1, r4, r5
 80132a6:	dce1      	bgt.n	801326c <scalbn+0x6c>
 80132a8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80132d0 <scalbn+0xd0>
 80132ac:	f000 f8f9 	bl	80134a2 <copysign>
 80132b0:	a307      	add	r3, pc, #28	; (adr r3, 80132d0 <scalbn+0xd0>)
 80132b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132b6:	e7e0      	b.n	801327a <scalbn+0x7a>
 80132b8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80132bc:	3236      	adds	r2, #54	; 0x36
 80132be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80132c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80132c6:	4620      	mov	r0, r4
 80132c8:	4629      	mov	r1, r5
 80132ca:	2200      	movs	r2, #0
 80132cc:	4b06      	ldr	r3, [pc, #24]	; (80132e8 <scalbn+0xe8>)
 80132ce:	e7b2      	b.n	8013236 <scalbn+0x36>
 80132d0:	c2f8f359 	.word	0xc2f8f359
 80132d4:	01a56e1f 	.word	0x01a56e1f
 80132d8:	8800759c 	.word	0x8800759c
 80132dc:	7e37e43c 	.word	0x7e37e43c
 80132e0:	43500000 	.word	0x43500000
 80132e4:	ffff3cb0 	.word	0xffff3cb0
 80132e8:	3c900000 	.word	0x3c900000

080132ec <atanf>:
 80132ec:	b538      	push	{r3, r4, r5, lr}
 80132ee:	ee10 5a10 	vmov	r5, s0
 80132f2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80132f6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80132fa:	eef0 7a40 	vmov.f32	s15, s0
 80132fe:	db10      	blt.n	8013322 <atanf+0x36>
 8013300:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8013304:	dd04      	ble.n	8013310 <atanf+0x24>
 8013306:	ee70 7a00 	vadd.f32	s15, s0, s0
 801330a:	eeb0 0a67 	vmov.f32	s0, s15
 801330e:	bd38      	pop	{r3, r4, r5, pc}
 8013310:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8013448 <atanf+0x15c>
 8013314:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801344c <atanf+0x160>
 8013318:	2d00      	cmp	r5, #0
 801331a:	bfd8      	it	le
 801331c:	eef0 7a47 	vmovle.f32	s15, s14
 8013320:	e7f3      	b.n	801330a <atanf+0x1e>
 8013322:	4b4b      	ldr	r3, [pc, #300]	; (8013450 <atanf+0x164>)
 8013324:	429c      	cmp	r4, r3
 8013326:	dc10      	bgt.n	801334a <atanf+0x5e>
 8013328:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801332c:	da0a      	bge.n	8013344 <atanf+0x58>
 801332e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8013454 <atanf+0x168>
 8013332:	ee30 7a07 	vadd.f32	s14, s0, s14
 8013336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801333a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801333e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013342:	dce2      	bgt.n	801330a <atanf+0x1e>
 8013344:	f04f 33ff 	mov.w	r3, #4294967295
 8013348:	e013      	b.n	8013372 <atanf+0x86>
 801334a:	f000 f8a3 	bl	8013494 <fabsf>
 801334e:	4b42      	ldr	r3, [pc, #264]	; (8013458 <atanf+0x16c>)
 8013350:	429c      	cmp	r4, r3
 8013352:	dc4f      	bgt.n	80133f4 <atanf+0x108>
 8013354:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8013358:	429c      	cmp	r4, r3
 801335a:	dc41      	bgt.n	80133e0 <atanf+0xf4>
 801335c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013360:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013364:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013368:	2300      	movs	r3, #0
 801336a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801336e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8013372:	1c5a      	adds	r2, r3, #1
 8013374:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8013378:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801345c <atanf+0x170>
 801337c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8013460 <atanf+0x174>
 8013380:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8013464 <atanf+0x178>
 8013384:	ee66 6a06 	vmul.f32	s13, s12, s12
 8013388:	eee6 5a87 	vfma.f32	s11, s13, s14
 801338c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8013468 <atanf+0x17c>
 8013390:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013394:	eddf 5a35 	vldr	s11, [pc, #212]	; 801346c <atanf+0x180>
 8013398:	eee7 5a26 	vfma.f32	s11, s14, s13
 801339c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8013470 <atanf+0x184>
 80133a0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80133a4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8013474 <atanf+0x188>
 80133a8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80133ac:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8013478 <atanf+0x18c>
 80133b0:	eea6 5a87 	vfma.f32	s10, s13, s14
 80133b4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 801347c <atanf+0x190>
 80133b8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80133bc:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8013480 <atanf+0x194>
 80133c0:	eea7 5a26 	vfma.f32	s10, s14, s13
 80133c4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8013484 <atanf+0x198>
 80133c8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80133cc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80133d0:	eea5 7a86 	vfma.f32	s14, s11, s12
 80133d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80133d8:	d121      	bne.n	801341e <atanf+0x132>
 80133da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80133de:	e794      	b.n	801330a <atanf+0x1e>
 80133e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80133e4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80133e8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80133ec:	2301      	movs	r3, #1
 80133ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80133f2:	e7be      	b.n	8013372 <atanf+0x86>
 80133f4:	4b24      	ldr	r3, [pc, #144]	; (8013488 <atanf+0x19c>)
 80133f6:	429c      	cmp	r4, r3
 80133f8:	dc0b      	bgt.n	8013412 <atanf+0x126>
 80133fa:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80133fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013402:	eea0 7a27 	vfma.f32	s14, s0, s15
 8013406:	2302      	movs	r3, #2
 8013408:	ee70 6a67 	vsub.f32	s13, s0, s15
 801340c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013410:	e7af      	b.n	8013372 <atanf+0x86>
 8013412:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013416:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801341a:	2303      	movs	r3, #3
 801341c:	e7a9      	b.n	8013372 <atanf+0x86>
 801341e:	4a1b      	ldr	r2, [pc, #108]	; (801348c <atanf+0x1a0>)
 8013420:	491b      	ldr	r1, [pc, #108]	; (8013490 <atanf+0x1a4>)
 8013422:	009b      	lsls	r3, r3, #2
 8013424:	441a      	add	r2, r3
 8013426:	440b      	add	r3, r1
 8013428:	edd3 6a00 	vldr	s13, [r3]
 801342c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8013430:	2d00      	cmp	r5, #0
 8013432:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013436:	ed92 7a00 	vldr	s14, [r2]
 801343a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801343e:	bfb8      	it	lt
 8013440:	eef1 7a67 	vneglt.f32	s15, s15
 8013444:	e761      	b.n	801330a <atanf+0x1e>
 8013446:	bf00      	nop
 8013448:	bfc90fdb 	.word	0xbfc90fdb
 801344c:	3fc90fdb 	.word	0x3fc90fdb
 8013450:	3edfffff 	.word	0x3edfffff
 8013454:	7149f2ca 	.word	0x7149f2ca
 8013458:	3f97ffff 	.word	0x3f97ffff
 801345c:	3c8569d7 	.word	0x3c8569d7
 8013460:	3d4bda59 	.word	0x3d4bda59
 8013464:	bd6ef16b 	.word	0xbd6ef16b
 8013468:	3d886b35 	.word	0x3d886b35
 801346c:	3dba2e6e 	.word	0x3dba2e6e
 8013470:	3e124925 	.word	0x3e124925
 8013474:	3eaaaaab 	.word	0x3eaaaaab
 8013478:	bd15a221 	.word	0xbd15a221
 801347c:	bd9d8795 	.word	0xbd9d8795
 8013480:	bde38e38 	.word	0xbde38e38
 8013484:	be4ccccd 	.word	0xbe4ccccd
 8013488:	401bffff 	.word	0x401bffff
 801348c:	08013810 	.word	0x08013810
 8013490:	08013820 	.word	0x08013820

08013494 <fabsf>:
 8013494:	ee10 3a10 	vmov	r3, s0
 8013498:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801349c:	ee00 3a10 	vmov	s0, r3
 80134a0:	4770      	bx	lr

080134a2 <copysign>:
 80134a2:	ec51 0b10 	vmov	r0, r1, d0
 80134a6:	ee11 0a90 	vmov	r0, s3
 80134aa:	ee10 2a10 	vmov	r2, s0
 80134ae:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80134b2:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80134b6:	ea41 0300 	orr.w	r3, r1, r0
 80134ba:	ec43 2b10 	vmov	d0, r2, r3
 80134be:	4770      	bx	lr

080134c0 <_init>:
 80134c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134c2:	bf00      	nop
 80134c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80134c6:	bc08      	pop	{r3}
 80134c8:	469e      	mov	lr, r3
 80134ca:	4770      	bx	lr

080134cc <_fini>:
 80134cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134ce:	bf00      	nop
 80134d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80134d2:	bc08      	pop	{r3}
 80134d4:	469e      	mov	lr, r3
 80134d6:	4770      	bx	lr
