
TelemetryComputer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005df8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08005f04  08005f04  00015f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f30  08005f30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005f30  08005f30  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f30  08005f30  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f30  08005f30  00015f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f34  08005f34  00015f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005f38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d04  2000000c  08005f44  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d10  08005f44  00020d10  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000127d1  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b95  00000000  00000000  00032806  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001290  00000000  00000000  000353a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001128  00000000  00000000  00036630  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015a29  00000000  00000000  00037758  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f8a0  00000000  00000000  0004d181  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00077097  00000000  00000000  0005ca21  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d3ab8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ca0  00000000  00000000  000d3b34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005eec 	.word	0x08005eec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08005eec 	.word	0x08005eec

0800014c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	; (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	; (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	; (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	; (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	; (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f001 fb93 	bl	80018b4 <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f000 fcdc 	bl	8000b50 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000198:	2308      	movs	r3, #8
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	; (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f001 fc5b 	bl	8001a64 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f000 fccc 	bl	8000b50 <Error_Handler>
  }

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	200000a4 	.word	0x200000a4
 80001c4:	40012400 	.word	0x40012400

080001c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d0:	f107 0310 	add.w	r3, r7, #16
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a14      	ldr	r2, [pc, #80]	; (8000234 <HAL_ADC_MspInit+0x6c>)
 80001e4:	4293      	cmp	r3, r2
 80001e6:	d121      	bne.n	800022c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80001e8:	4b13      	ldr	r3, [pc, #76]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a12      	ldr	r2, [pc, #72]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b10      	ldr	r3, [pc, #64]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000200:	4b0d      	ldr	r3, [pc, #52]	; (8000238 <HAL_ADC_MspInit+0x70>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a0c      	ldr	r2, [pc, #48]	; (8000238 <HAL_ADC_MspInit+0x70>)
 8000206:	f043 0308 	orr.w	r3, r3, #8
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <HAL_ADC_MspInit+0x70>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0308 	and.w	r3, r3, #8
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000218:	2301      	movs	r3, #1
 800021a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021c:	2303      	movs	r3, #3
 800021e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
 8000226:	4805      	ldr	r0, [pc, #20]	; (800023c <HAL_ADC_MspInit+0x74>)
 8000228:	f002 f83e 	bl	80022a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800022c:	bf00      	nop
 800022e:	3720      	adds	r7, #32
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40012400 	.word	0x40012400
 8000238:	40021000 	.word	0x40021000
 800023c:	40010c00 	.word	0x40010c00

08000240 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000246:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <MX_DMA_Init+0x38>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	4a0b      	ldr	r2, [pc, #44]	; (8000278 <MX_DMA_Init+0x38>)
 800024c:	f043 0301 	orr.w	r3, r3, #1
 8000250:	6153      	str	r3, [r2, #20]
 8000252:	4b09      	ldr	r3, [pc, #36]	; (8000278 <MX_DMA_Init+0x38>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	f003 0301 	and.w	r3, r3, #1
 800025a:	607b      	str	r3, [r7, #4]
 800025c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800025e:	2200      	movs	r2, #0
 8000260:	2100      	movs	r1, #0
 8000262:	2010      	movs	r0, #16
 8000264:	f001 fe07 	bl	8001e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000268:	2010      	movs	r0, #16
 800026a:	f001 fe20 	bl	8001eae <HAL_NVIC_EnableIRQ>

}
 800026e:	bf00      	nop
 8000270:	3708      	adds	r7, #8
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	40021000 	.word	0x40021000

0800027c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b088      	sub	sp, #32
 8000280:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000282:	f107 0310 	add.w	r3, r7, #16
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	605a      	str	r2, [r3, #4]
 800028c:	609a      	str	r2, [r3, #8]
 800028e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000290:	4b39      	ldr	r3, [pc, #228]	; (8000378 <MX_GPIO_Init+0xfc>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	4a38      	ldr	r2, [pc, #224]	; (8000378 <MX_GPIO_Init+0xfc>)
 8000296:	f043 0320 	orr.w	r3, r3, #32
 800029a:	6193      	str	r3, [r2, #24]
 800029c:	4b36      	ldr	r3, [pc, #216]	; (8000378 <MX_GPIO_Init+0xfc>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	f003 0320 	and.w	r3, r3, #32
 80002a4:	60fb      	str	r3, [r7, #12]
 80002a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a8:	4b33      	ldr	r3, [pc, #204]	; (8000378 <MX_GPIO_Init+0xfc>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	4a32      	ldr	r2, [pc, #200]	; (8000378 <MX_GPIO_Init+0xfc>)
 80002ae:	f043 0304 	orr.w	r3, r3, #4
 80002b2:	6193      	str	r3, [r2, #24]
 80002b4:	4b30      	ldr	r3, [pc, #192]	; (8000378 <MX_GPIO_Init+0xfc>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	f003 0304 	and.w	r3, r3, #4
 80002bc:	60bb      	str	r3, [r7, #8]
 80002be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002c0:	4b2d      	ldr	r3, [pc, #180]	; (8000378 <MX_GPIO_Init+0xfc>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a2c      	ldr	r2, [pc, #176]	; (8000378 <MX_GPIO_Init+0xfc>)
 80002c6:	f043 0308 	orr.w	r3, r3, #8
 80002ca:	6193      	str	r3, [r2, #24]
 80002cc:	4b2a      	ldr	r3, [pc, #168]	; (8000378 <MX_GPIO_Init+0xfc>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	f003 0308 	and.w	r3, r3, #8
 80002d4:	607b      	str	r3, [r7, #4]
 80002d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|NRF_CSN_Pin, GPIO_PIN_RESET);
 80002d8:	2200      	movs	r2, #0
 80002da:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80002de:	4827      	ldr	r0, [pc, #156]	; (800037c <MX_GPIO_Init+0x100>)
 80002e0:	f002 f93c 	bl	800255c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 80002e4:	2200      	movs	r2, #0
 80002e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002ea:	4825      	ldr	r0, [pc, #148]	; (8000380 <MX_GPIO_Init+0x104>)
 80002ec:	f002 f936 	bl	800255c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|NRF_CSN_Pin;
 80002f0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80002f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f6:	2301      	movs	r3, #1
 80002f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fa:	2300      	movs	r3, #0
 80002fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002fe:	2302      	movs	r3, #2
 8000300:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000302:	f107 0310 	add.w	r3, r7, #16
 8000306:	4619      	mov	r1, r3
 8000308:	481c      	ldr	r0, [pc, #112]	; (800037c <MX_GPIO_Init+0x100>)
 800030a:	f001 ffcd 	bl	80022a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 800030e:	2302      	movs	r3, #2
 8000310:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000312:	4b1c      	ldr	r3, [pc, #112]	; (8000384 <MX_GPIO_Init+0x108>)
 8000314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000316:	2300      	movs	r3, #0
 8000318:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 800031a:	f107 0310 	add.w	r3, r7, #16
 800031e:	4619      	mov	r1, r3
 8000320:	4817      	ldr	r0, [pc, #92]	; (8000380 <MX_GPIO_Init+0x104>)
 8000322:	f001 ffc1 	bl	80022a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8000326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800032a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032c:	2301      	movs	r3, #1
 800032e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000330:	2300      	movs	r3, #0
 8000332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000334:	2302      	movs	r3, #2
 8000336:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8000338:	f107 0310 	add.w	r3, r7, #16
 800033c:	4619      	mov	r1, r3
 800033e:	4810      	ldr	r0, [pc, #64]	; (8000380 <MX_GPIO_Init+0x104>)
 8000340:	f001 ffb2 	bl	80022a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8000344:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000348:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800034a:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <MX_GPIO_Init+0x10c>)
 800034c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034e:	2300      	movs	r3, #0
 8000350:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000352:	f107 0310 	add.w	r3, r7, #16
 8000356:	4619      	mov	r1, r3
 8000358:	4808      	ldr	r0, [pc, #32]	; (800037c <MX_GPIO_Init+0x100>)
 800035a:	f001 ffa5 	bl	80022a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800035e:	2200      	movs	r2, #0
 8000360:	2100      	movs	r1, #0
 8000362:	2028      	movs	r0, #40	; 0x28
 8000364:	f001 fd87 	bl	8001e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000368:	2028      	movs	r0, #40	; 0x28
 800036a:	f001 fda0 	bl	8001eae <HAL_NVIC_EnableIRQ>

}
 800036e:	bf00      	nop
 8000370:	3720      	adds	r7, #32
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40021000 	.word	0x40021000
 800037c:	40010800 	.word	0x40010800
 8000380:	40010c00 	.word	0x40010c00
 8000384:	10110000 	.word	0x10110000
 8000388:	10210000 	.word	0x10210000

0800038c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <MX_I2C1_Init+0x50>)
 8000392:	4a13      	ldr	r2, [pc, #76]	; (80003e0 <MX_I2C1_Init+0x54>)
 8000394:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000396:	4b11      	ldr	r3, [pc, #68]	; (80003dc <MX_I2C1_Init+0x50>)
 8000398:	4a12      	ldr	r2, [pc, #72]	; (80003e4 <MX_I2C1_Init+0x58>)
 800039a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <MX_I2C1_Init+0x50>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 8;
 80003a2:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <MX_I2C1_Init+0x50>)
 80003a4:	2208      	movs	r2, #8
 80003a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003a8:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <MX_I2C1_Init+0x50>)
 80003aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003b0:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <MX_I2C1_Init+0x50>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003b6:	4b09      	ldr	r3, [pc, #36]	; (80003dc <MX_I2C1_Init+0x50>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003bc:	4b07      	ldr	r3, [pc, #28]	; (80003dc <MX_I2C1_Init+0x50>)
 80003be:	2200      	movs	r2, #0
 80003c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003c2:	4b06      	ldr	r3, [pc, #24]	; (80003dc <MX_I2C1_Init+0x50>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003c8:	4804      	ldr	r0, [pc, #16]	; (80003dc <MX_I2C1_Init+0x50>)
 80003ca:	f002 f90f 	bl	80025ec <HAL_I2C_Init>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003d4:	f000 fbbc 	bl	8000b50 <Error_Handler>
  }

}
 80003d8:	bf00      	nop
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	200000d4 	.word	0x200000d4
 80003e0:	40005400 	.word	0x40005400
 80003e4:	00061a80 	.word	0x00061a80

080003e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f0:	f107 0310 	add.w	r3, r7, #16
 80003f4:	2200      	movs	r2, #0
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	605a      	str	r2, [r3, #4]
 80003fa:	609a      	str	r2, [r3, #8]
 80003fc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4a19      	ldr	r2, [pc, #100]	; (8000468 <HAL_I2C_MspInit+0x80>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d12b      	bne.n	8000460 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000408:	4b18      	ldr	r3, [pc, #96]	; (800046c <HAL_I2C_MspInit+0x84>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	4a17      	ldr	r2, [pc, #92]	; (800046c <HAL_I2C_MspInit+0x84>)
 800040e:	f043 0308 	orr.w	r3, r3, #8
 8000412:	6193      	str	r3, [r2, #24]
 8000414:	4b15      	ldr	r3, [pc, #84]	; (800046c <HAL_I2C_MspInit+0x84>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	f003 0308 	and.w	r3, r3, #8
 800041c:	60fb      	str	r3, [r7, #12]
 800041e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000420:	23c0      	movs	r3, #192	; 0xc0
 8000422:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000424:	2312      	movs	r3, #18
 8000426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000428:	2303      	movs	r3, #3
 800042a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800042c:	f107 0310 	add.w	r3, r7, #16
 8000430:	4619      	mov	r1, r3
 8000432:	480f      	ldr	r0, [pc, #60]	; (8000470 <HAL_I2C_MspInit+0x88>)
 8000434:	f001 ff38 	bl	80022a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000438:	4b0c      	ldr	r3, [pc, #48]	; (800046c <HAL_I2C_MspInit+0x84>)
 800043a:	69db      	ldr	r3, [r3, #28]
 800043c:	4a0b      	ldr	r2, [pc, #44]	; (800046c <HAL_I2C_MspInit+0x84>)
 800043e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000442:	61d3      	str	r3, [r2, #28]
 8000444:	4b09      	ldr	r3, [pc, #36]	; (800046c <HAL_I2C_MspInit+0x84>)
 8000446:	69db      	ldr	r3, [r3, #28]
 8000448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800044c:	60bb      	str	r3, [r7, #8]
 800044e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000450:	2200      	movs	r2, #0
 8000452:	2100      	movs	r1, #0
 8000454:	201f      	movs	r0, #31
 8000456:	f001 fd0e 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800045a:	201f      	movs	r0, #31
 800045c:	f001 fd27 	bl	8001eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000460:	bf00      	nop
 8000462:	3720      	adds	r7, #32
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40005400 	.word	0x40005400
 800046c:	40021000 	.word	0x40021000
 8000470:	40010c00 	.word	0x40010c00

08000474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b088      	sub	sp, #32
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800047a:	f001 f997 	bl	80017ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800047e:	f000 fa8d 	bl	800099c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000482:	f7ff fefb 	bl	800027c <MX_GPIO_Init>
  MX_DMA_Init();
 8000486:	f7ff fedb 	bl	8000240 <MX_DMA_Init>
  MX_ADC1_Init();
 800048a:	f7ff fe5f 	bl	800014c <MX_ADC1_Init>
  MX_I2C1_Init();
 800048e:	f7ff ff7d 	bl	800038c <MX_I2C1_Init>
  MX_SPI2_Init();
 8000492:	f000 fe3d 	bl	8001110 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000496:	f000 fff1 	bl	800147c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800049a:	f001 f819 	bl	80014d0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800049e:	f001 f841 	bl	8001524 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 80004a2:	f000 ff77 	bl	8001394 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  nrf_radio.spiHandle = &hspi2;
 80004a6:	4bad      	ldr	r3, [pc, #692]	; (800075c <main+0x2e8>)
 80004a8:	4aad      	ldr	r2, [pc, #692]	; (8000760 <main+0x2ec>)
 80004aa:	601a      	str	r2, [r3, #0]
  nrf_radio.csnPinPort = NRF_CSN_GPIO_Port;
 80004ac:	4bab      	ldr	r3, [pc, #684]	; (800075c <main+0x2e8>)
 80004ae:	4aad      	ldr	r2, [pc, #692]	; (8000764 <main+0x2f0>)
 80004b0:	605a      	str	r2, [r3, #4]
  nrf_radio.cePinPort = NRF_CE_GPIO_Port;
 80004b2:	4baa      	ldr	r3, [pc, #680]	; (800075c <main+0x2e8>)
 80004b4:	4aac      	ldr	r2, [pc, #688]	; (8000768 <main+0x2f4>)
 80004b6:	609a      	str	r2, [r3, #8]
  nrf_radio.csnPin = NRF_CSN_Pin;
 80004b8:	4ba8      	ldr	r3, [pc, #672]	; (800075c <main+0x2e8>)
 80004ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004be:	819a      	strh	r2, [r3, #12]
  nrf_radio.cePin = NRF_CE_Pin;
 80004c0:	4ba6      	ldr	r3, [pc, #664]	; (800075c <main+0x2e8>)
 80004c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004c6:	81da      	strh	r2, [r3, #14]

  HAL_Delay(500);
 80004c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004cc:	f001 f9d0 	bl	8001870 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim4);
 80004d0:	48a6      	ldr	r0, [pc, #664]	; (800076c <main+0x2f8>)
 80004d2:	f004 fe2d 	bl	8005130 <HAL_TIM_Base_Start_IT>

  empty_data_packet.width = 1;
 80004d6:	4ba6      	ldr	r3, [pc, #664]	; (8000770 <main+0x2fc>)
 80004d8:	2201      	movs	r2, #1
 80004da:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  empty_data_packet.reliable = 0;
 80004de:	4ba4      	ldr	r3, [pc, #656]	; (8000770 <main+0x2fc>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  unreliable_packet.width = 0;
 80004e6:	4ba3      	ldr	r3, [pc, #652]	; (8000774 <main+0x300>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  current_i2c_packet.width = 0;
 80004ee:	4ba2      	ldr	r3, [pc, #648]	; (8000778 <main+0x304>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  for(int i = 0; i < 35; i++)
 80004f6:	2300      	movs	r3, #0
 80004f8:	61fb      	str	r3, [r7, #28]
 80004fa:	e011      	b.n	8000520 <main+0xac>
  {
	  empty_data_packet.payload[i] = 0x00;
 80004fc:	4a9c      	ldr	r2, [pc, #624]	; (8000770 <main+0x2fc>)
 80004fe:	69fb      	ldr	r3, [r7, #28]
 8000500:	4413      	add	r3, r2
 8000502:	2200      	movs	r2, #0
 8000504:	701a      	strb	r2, [r3, #0]
	  unreliable_packet.payload[i] = 0x00;
 8000506:	4a9b      	ldr	r2, [pc, #620]	; (8000774 <main+0x300>)
 8000508:	69fb      	ldr	r3, [r7, #28]
 800050a:	4413      	add	r3, r2
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]
	  current_i2c_packet.payload[i] = 0x00;
 8000510:	4a99      	ldr	r2, [pc, #612]	; (8000778 <main+0x304>)
 8000512:	69fb      	ldr	r3, [r7, #28]
 8000514:	4413      	add	r3, r2
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 35; i++)
 800051a:	69fb      	ldr	r3, [r7, #28]
 800051c:	3301      	adds	r3, #1
 800051e:	61fb      	str	r3, [r7, #28]
 8000520:	69fb      	ldr	r3, [r7, #28]
 8000522:	2b22      	cmp	r3, #34	; 0x22
 8000524:	ddea      	ble.n	80004fc <main+0x88>
  }

  NRF24_Init(&nrf_radio);
 8000526:	488d      	ldr	r0, [pc, #564]	; (800075c <main+0x2e8>)
 8000528:	f000 fb18 	bl	8000b5c <NRF24_Init>

  HAL_Delay(500);
 800052c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000530:	f001 f99e 	bl	8001870 <HAL_Delay>

  HAL_I2C_Slave_Receive_IT(&hi2c1, (uint8_t *)current_i2c_packet.payload, 35);
 8000534:	2223      	movs	r2, #35	; 0x23
 8000536:	4990      	ldr	r1, [pc, #576]	; (8000778 <main+0x304>)
 8000538:	4890      	ldr	r0, [pc, #576]	; (800077c <main+0x308>)
 800053a:	f002 fa95 	bl	8002a68 <HAL_I2C_Slave_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(GetMicros() - test_led_timer > 50000)
 800053e:	f000 fad5 	bl	8000aec <GetMicros>
 8000542:	4602      	mov	r2, r0
 8000544:	4b8e      	ldr	r3, [pc, #568]	; (8000780 <main+0x30c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	1ad3      	subs	r3, r2, r3
 800054a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800054e:	4293      	cmp	r3, r2
 8000550:	d904      	bls.n	800055c <main+0xe8>
	  {
		  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
		  test_led_timer = GetMicros();
 8000552:	f000 facb 	bl	8000aec <GetMicros>
 8000556:	4602      	mov	r2, r0
 8000558:	4b89      	ldr	r3, [pc, #548]	; (8000780 <main+0x30c>)
 800055a:	601a      	str	r2, [r3, #0]
	  }

	  if(radio_irq_flag == 1)
 800055c:	4b89      	ldr	r3, [pc, #548]	; (8000784 <main+0x310>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	b2db      	uxtb	r3, r3
 8000562:	2b01      	cmp	r3, #1
 8000564:	f040 8094 	bne.w	8000690 <main+0x21c>
	  {
		  radio_irq_flag = 0;
 8000568:	4b86      	ldr	r3, [pc, #536]	; (8000784 <main+0x310>)
 800056a:	2200      	movs	r2, #0
 800056c:	701a      	strb	r2, [r3, #0]

		  uint8_t reg_value = NRF24_GetAddress(&nrf_radio, 7);
 800056e:	2107      	movs	r1, #7
 8000570:	487a      	ldr	r0, [pc, #488]	; (800075c <main+0x2e8>)
 8000572:	f000 fd11 	bl	8000f98 <NRF24_GetAddress>
 8000576:	4603      	mov	r3, r0
 8000578:	70fb      	strb	r3, [r7, #3]

		  uint8_t tx_success = reg_value & (1 << 5);
 800057a:	78fb      	ldrb	r3, [r7, #3]
 800057c:	f003 0320 	and.w	r3, r3, #32
 8000580:	70bb      	strb	r3, [r7, #2]
		  uint8_t rx_success = reg_value & (1 << 6);
 8000582:	78fb      	ldrb	r3, [r7, #3]
 8000584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000588:	707b      	strb	r3, [r7, #1]
		  uint8_t tx_fail = reg_value & (1 << 4);
 800058a:	78fb      	ldrb	r3, [r7, #3]
 800058c:	f003 0310 	and.w	r3, r3, #16
 8000590:	703b      	strb	r3, [r7, #0]

		  if(tx_success)
 8000592:	78bb      	ldrb	r3, [r7, #2]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d06f      	beq.n	8000678 <main+0x204>
		  {
			  waiting_for_ack = 0;
 8000598:	4b7b      	ldr	r3, [pc, #492]	; (8000788 <main+0x314>)
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]

			  if(reliable_packet_to_gcs_counter > 0)
 800059e:	4b7b      	ldr	r3, [pc, #492]	; (800078c <main+0x318>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d053      	beq.n	800064e <main+0x1da>
			  {
				  //Get rid of first index of array and shift
				  for(int i = 0; i < reliable_packet_to_gcs_counter - 1; i++)
 80005a6:	2300      	movs	r3, #0
 80005a8:	61bb      	str	r3, [r7, #24]
 80005aa:	e044      	b.n	8000636 <main+0x1c2>
				  {
					  reliable_packets_to_gcs[i].width = reliable_packets_to_gcs[i+1].width;
 80005ac:	69bb      	ldr	r3, [r7, #24]
 80005ae:	1c5a      	adds	r2, r3, #1
 80005b0:	4977      	ldr	r1, [pc, #476]	; (8000790 <main+0x31c>)
 80005b2:	4613      	mov	r3, r2
 80005b4:	00db      	lsls	r3, r3, #3
 80005b6:	4413      	add	r3, r2
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	4413      	add	r3, r2
 80005bc:	440b      	add	r3, r1
 80005be:	3323      	adds	r3, #35	; 0x23
 80005c0:	7818      	ldrb	r0, [r3, #0]
 80005c2:	4973      	ldr	r1, [pc, #460]	; (8000790 <main+0x31c>)
 80005c4:	69ba      	ldr	r2, [r7, #24]
 80005c6:	4613      	mov	r3, r2
 80005c8:	00db      	lsls	r3, r3, #3
 80005ca:	4413      	add	r3, r2
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	4413      	add	r3, r2
 80005d0:	440b      	add	r3, r1
 80005d2:	3323      	adds	r3, #35	; 0x23
 80005d4:	4602      	mov	r2, r0
 80005d6:	701a      	strb	r2, [r3, #0]
					  reliable_packets_to_gcs[i].reliable = 1;
 80005d8:	496d      	ldr	r1, [pc, #436]	; (8000790 <main+0x31c>)
 80005da:	69ba      	ldr	r2, [r7, #24]
 80005dc:	4613      	mov	r3, r2
 80005de:	00db      	lsls	r3, r3, #3
 80005e0:	4413      	add	r3, r2
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	4413      	add	r3, r2
 80005e6:	440b      	add	r3, r1
 80005e8:	3324      	adds	r3, #36	; 0x24
 80005ea:	2201      	movs	r2, #1
 80005ec:	701a      	strb	r2, [r3, #0]

					  for(int j = 0; j < 35; j++)
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
 80005f2:	e01a      	b.n	800062a <main+0x1b6>
					  {
						  reliable_packets_to_gcs[i].payload[j] = reliable_packets_to_gcs[i+1].payload[j];
 80005f4:	69bb      	ldr	r3, [r7, #24]
 80005f6:	1c5a      	adds	r2, r3, #1
 80005f8:	4965      	ldr	r1, [pc, #404]	; (8000790 <main+0x31c>)
 80005fa:	4613      	mov	r3, r2
 80005fc:	00db      	lsls	r3, r3, #3
 80005fe:	4413      	add	r3, r2
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	4413      	add	r3, r2
 8000604:	18ca      	adds	r2, r1, r3
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	4413      	add	r3, r2
 800060a:	7818      	ldrb	r0, [r3, #0]
 800060c:	4960      	ldr	r1, [pc, #384]	; (8000790 <main+0x31c>)
 800060e:	69ba      	ldr	r2, [r7, #24]
 8000610:	4613      	mov	r3, r2
 8000612:	00db      	lsls	r3, r3, #3
 8000614:	4413      	add	r3, r2
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	4413      	add	r3, r2
 800061a:	18ca      	adds	r2, r1, r3
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	4413      	add	r3, r2
 8000620:	4602      	mov	r2, r0
 8000622:	701a      	strb	r2, [r3, #0]
					  for(int j = 0; j < 35; j++)
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	3301      	adds	r3, #1
 8000628:	617b      	str	r3, [r7, #20]
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	2b22      	cmp	r3, #34	; 0x22
 800062e:	dde1      	ble.n	80005f4 <main+0x180>
				  for(int i = 0; i < reliable_packet_to_gcs_counter - 1; i++)
 8000630:	69bb      	ldr	r3, [r7, #24]
 8000632:	3301      	adds	r3, #1
 8000634:	61bb      	str	r3, [r7, #24]
 8000636:	4b55      	ldr	r3, [pc, #340]	; (800078c <main+0x318>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	3b01      	subs	r3, #1
 800063c:	69ba      	ldr	r2, [r7, #24]
 800063e:	429a      	cmp	r2, r3
 8000640:	dbb4      	blt.n	80005ac <main+0x138>
					  }
				  }

				  reliable_packet_to_gcs_counter--;
 8000642:	4b52      	ldr	r3, [pc, #328]	; (800078c <main+0x318>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	3b01      	subs	r3, #1
 8000648:	b2da      	uxtb	r2, r3
 800064a:	4b50      	ldr	r3, [pc, #320]	; (800078c <main+0x318>)
 800064c:	701a      	strb	r2, [r3, #0]
			  }

			  if(rx_success)
 800064e:	787b      	ldrb	r3, [r7, #1]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d00b      	beq.n	800066c <main+0x1f8>
			  {
				  NRF24_PacketRead(&nrf_radio);
 8000654:	4841      	ldr	r0, [pc, #260]	; (800075c <main+0x2e8>)
 8000656:	f000 fb8b 	bl	8000d70 <NRF24_PacketRead>
				  NRF24_FlushRX(&nrf_radio);
 800065a:	4840      	ldr	r0, [pc, #256]	; (800075c <main+0x2e8>)
 800065c:	f000 fcf4 	bl	8001048 <NRF24_FlushRX>
				  NRF24_WriteBit(&nrf_radio, 7, 6, 1);
 8000660:	2301      	movs	r3, #1
 8000662:	2206      	movs	r2, #6
 8000664:	2107      	movs	r1, #7
 8000666:	483d      	ldr	r0, [pc, #244]	; (800075c <main+0x2e8>)
 8000668:	f000 fc38 	bl	8000edc <NRF24_WriteBit>
			  }

			  NRF24_WriteBit(&nrf_radio, 7, 5, 1);
 800066c:	2301      	movs	r3, #1
 800066e:	2205      	movs	r2, #5
 8000670:	2107      	movs	r1, #7
 8000672:	483a      	ldr	r0, [pc, #232]	; (800075c <main+0x2e8>)
 8000674:	f000 fc32 	bl	8000edc <NRF24_WriteBit>
		  }

		  if(tx_fail)
 8000678:	783b      	ldrb	r3, [r7, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d008      	beq.n	8000690 <main+0x21c>
		  {
			  waiting_for_ack = 0;
 800067e:	4b42      	ldr	r3, [pc, #264]	; (8000788 <main+0x314>)
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
			  NRF24_WriteBit(&nrf_radio, 7, 4, 1);
 8000684:	2301      	movs	r3, #1
 8000686:	2204      	movs	r2, #4
 8000688:	2107      	movs	r1, #7
 800068a:	4834      	ldr	r0, [pc, #208]	; (800075c <main+0x2e8>)
 800068c:	f000 fc26 	bl	8000edc <NRF24_WriteBit>
		  }
	  }

	  if(GetMicros() - time_since_last_radio_send > 2500 && (new_packet_to_send_available || reliable_packet_to_gcs_counter > 0) && waiting_for_ack == 0)
 8000690:	f000 fa2c 	bl	8000aec <GetMicros>
 8000694:	4602      	mov	r2, r0
 8000696:	4b3f      	ldr	r3, [pc, #252]	; (8000794 <main+0x320>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	1ad3      	subs	r3, r2, r3
 800069c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d926      	bls.n	80006f2 <main+0x27e>
 80006a4:	4b3c      	ldr	r3, [pc, #240]	; (8000798 <main+0x324>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d103      	bne.n	80006b6 <main+0x242>
 80006ae:	4b37      	ldr	r3, [pc, #220]	; (800078c <main+0x318>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d01d      	beq.n	80006f2 <main+0x27e>
 80006b6:	4b34      	ldr	r3, [pc, #208]	; (8000788 <main+0x314>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d118      	bne.n	80006f2 <main+0x27e>
	  {
		  time_since_last_radio_send = GetMicros();
 80006c0:	f000 fa14 	bl	8000aec <GetMicros>
 80006c4:	4602      	mov	r2, r0
 80006c6:	4b33      	ldr	r3, [pc, #204]	; (8000794 <main+0x320>)
 80006c8:	601a      	str	r2, [r3, #0]

		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80006ca:	2180      	movs	r1, #128	; 0x80
 80006cc:	4825      	ldr	r0, [pc, #148]	; (8000764 <main+0x2f0>)
 80006ce:	f001 ff5d 	bl	800258c <HAL_GPIO_TogglePin>

		  if(reliable_packet_to_gcs_counter > 0)
 80006d2:	4b2e      	ldr	r3, [pc, #184]	; (800078c <main+0x318>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d004      	beq.n	80006e4 <main+0x270>
		  {
			  NRF24_PacketSend(&nrf_radio, &reliable_packets_to_gcs[0]);
 80006da:	492d      	ldr	r1, [pc, #180]	; (8000790 <main+0x31c>)
 80006dc:	481f      	ldr	r0, [pc, #124]	; (800075c <main+0x2e8>)
 80006de:	f000 fae5 	bl	8000cac <NRF24_PacketSend>
 80006e2:	e006      	b.n	80006f2 <main+0x27e>
		  }
		  else
		  {
			  new_packet_to_send_available = 0;
 80006e4:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <main+0x324>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	701a      	strb	r2, [r3, #0]
			  NRF24_PacketSend(&nrf_radio, &unreliable_packet);
 80006ea:	4922      	ldr	r1, [pc, #136]	; (8000774 <main+0x300>)
 80006ec:	481b      	ldr	r0, [pc, #108]	; (800075c <main+0x2e8>)
 80006ee:	f000 fadd 	bl	8000cac <NRF24_PacketSend>
			  //HAL_UART_Transmit(&huart1, unreliable_packet.payload, unreliable_packet.width, HAL_MAX_DELAY);
		  }
	  }

	  if(i2c_receive_flag)
 80006f2:	4b2a      	ldr	r3, [pc, #168]	; (800079c <main+0x328>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	f43f af20 	beq.w	800053e <main+0xca>
	  {
		  i2c_receive_flag = 0;
 80006fe:	4b27      	ldr	r3, [pc, #156]	; (800079c <main+0x328>)
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]

		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000704:	2140      	movs	r1, #64	; 0x40
 8000706:	4817      	ldr	r0, [pc, #92]	; (8000764 <main+0x2f0>)
 8000708:	f001 ff40 	bl	800258c <HAL_GPIO_TogglePin>

		  if(current_i2c_packet.payload[34])
 800070c:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <main+0x304>)
 800070e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b00      	cmp	r3, #0
 8000716:	f000 80a8 	beq.w	800086a <main+0x3f6>
		  {
			  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);

			  new_packet_to_send_available = 0;
 800071a:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <main+0x324>)
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]

			  if(packets_to_receive_counter > 0)
 8000720:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <main+0x32c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	f000 8093 	beq.w	8000850 <main+0x3dc>
			  {
				  HAL_I2C_Slave_Transmit(&hi2c1, (uint8_t *)packets_to_receive[packets_to_receive_counter].payload, 34, HAL_MAX_DELAY);
 800072a:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <main+0x32c>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	461a      	mov	r2, r3
 8000730:	4613      	mov	r3, r2
 8000732:	00db      	lsls	r3, r3, #3
 8000734:	4413      	add	r3, r2
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	4413      	add	r3, r2
 800073a:	4a1a      	ldr	r2, [pc, #104]	; (80007a4 <main+0x330>)
 800073c:	1899      	adds	r1, r3, r2
 800073e:	f04f 33ff 	mov.w	r3, #4294967295
 8000742:	2222      	movs	r2, #34	; 0x22
 8000744:	480d      	ldr	r0, [pc, #52]	; (800077c <main+0x308>)
 8000746:	f002 f879 	bl	800283c <HAL_I2C_Slave_Transmit>
				  HAL_I2C_Slave_Receive_IT(&hi2c1, (uint8_t *)current_i2c_packet.payload, 35);
 800074a:	2223      	movs	r2, #35	; 0x23
 800074c:	490a      	ldr	r1, [pc, #40]	; (8000778 <main+0x304>)
 800074e:	480b      	ldr	r0, [pc, #44]	; (800077c <main+0x308>)
 8000750:	f002 f98a 	bl	8002a68 <HAL_I2C_Slave_Receive_IT>

				  for(int i = 0; i < packets_to_receive_counter - 1; i++)
 8000754:	2300      	movs	r3, #0
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	e06d      	b.n	8000836 <main+0x3c2>
 800075a:	bf00      	nop
 800075c:	20000150 	.word	0x20000150
 8000760:	20000b70 	.word	0x20000b70
 8000764:	40010800 	.word	0x40010800
 8000768:	40010c00 	.word	0x40010c00
 800076c:	20000bc8 	.word	0x20000bc8
 8000770:	200001b4 	.word	0x200001b4
 8000774:	20000b48 	.word	0x20000b48
 8000778:	200001dc 	.word	0x200001dc
 800077c:	200000d4 	.word	0x200000d4
 8000780:	20000030 	.word	0x20000030
 8000784:	20000036 	.word	0x20000036
 8000788:	20000037 	.word	0x20000037
 800078c:	20000034 	.word	0x20000034
 8000790:	20000204 	.word	0x20000204
 8000794:	2000002c 	.word	0x2000002c
 8000798:	20000029 	.word	0x20000029
 800079c:	20000028 	.word	0x20000028
 80007a0:	20000035 	.word	0x20000035
 80007a4:	200006a4 	.word	0x200006a4
				  {
					  packets_to_receive[i].width = packets_to_receive[i+1].width;
 80007a8:	693b      	ldr	r3, [r7, #16]
 80007aa:	1c5a      	adds	r2, r3, #1
 80007ac:	4972      	ldr	r1, [pc, #456]	; (8000978 <main+0x504>)
 80007ae:	4613      	mov	r3, r2
 80007b0:	00db      	lsls	r3, r3, #3
 80007b2:	4413      	add	r3, r2
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	4413      	add	r3, r2
 80007b8:	440b      	add	r3, r1
 80007ba:	3323      	adds	r3, #35	; 0x23
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	b2d8      	uxtb	r0, r3
 80007c0:	496d      	ldr	r1, [pc, #436]	; (8000978 <main+0x504>)
 80007c2:	693a      	ldr	r2, [r7, #16]
 80007c4:	4613      	mov	r3, r2
 80007c6:	00db      	lsls	r3, r3, #3
 80007c8:	4413      	add	r3, r2
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	4413      	add	r3, r2
 80007ce:	440b      	add	r3, r1
 80007d0:	3323      	adds	r3, #35	; 0x23
 80007d2:	4602      	mov	r2, r0
 80007d4:	701a      	strb	r2, [r3, #0]
					  packets_to_receive[i].reliable = 0;
 80007d6:	4968      	ldr	r1, [pc, #416]	; (8000978 <main+0x504>)
 80007d8:	693a      	ldr	r2, [r7, #16]
 80007da:	4613      	mov	r3, r2
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	4413      	add	r3, r2
 80007e0:	009b      	lsls	r3, r3, #2
 80007e2:	4413      	add	r3, r2
 80007e4:	440b      	add	r3, r1
 80007e6:	3324      	adds	r3, #36	; 0x24
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]

					  for(int j = 0; j < 35; j++)
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	e01b      	b.n	800082a <main+0x3b6>
					  {
						  packets_to_receive[i].payload[j] = packets_to_receive[i+1].payload[j];
 80007f2:	693b      	ldr	r3, [r7, #16]
 80007f4:	1c5a      	adds	r2, r3, #1
 80007f6:	4960      	ldr	r1, [pc, #384]	; (8000978 <main+0x504>)
 80007f8:	4613      	mov	r3, r2
 80007fa:	00db      	lsls	r3, r3, #3
 80007fc:	4413      	add	r3, r2
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	4413      	add	r3, r2
 8000802:	18ca      	adds	r2, r1, r3
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	4413      	add	r3, r2
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	b2d8      	uxtb	r0, r3
 800080c:	495a      	ldr	r1, [pc, #360]	; (8000978 <main+0x504>)
 800080e:	693a      	ldr	r2, [r7, #16]
 8000810:	4613      	mov	r3, r2
 8000812:	00db      	lsls	r3, r3, #3
 8000814:	4413      	add	r3, r2
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	4413      	add	r3, r2
 800081a:	18ca      	adds	r2, r1, r3
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	4413      	add	r3, r2
 8000820:	4602      	mov	r2, r0
 8000822:	701a      	strb	r2, [r3, #0]
					  for(int j = 0; j < 35; j++)
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	3301      	adds	r3, #1
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	2b22      	cmp	r3, #34	; 0x22
 800082e:	dde0      	ble.n	80007f2 <main+0x37e>
				  for(int i = 0; i < packets_to_receive_counter - 1; i++)
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	3301      	adds	r3, #1
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	4b51      	ldr	r3, [pc, #324]	; (800097c <main+0x508>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	3b01      	subs	r3, #1
 800083c:	693a      	ldr	r2, [r7, #16]
 800083e:	429a      	cmp	r2, r3
 8000840:	dbb2      	blt.n	80007a8 <main+0x334>
					  }
				  }

				  packets_to_receive_counter--;
 8000842:	4b4e      	ldr	r3, [pc, #312]	; (800097c <main+0x508>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	3b01      	subs	r3, #1
 8000848:	b2da      	uxtb	r2, r3
 800084a:	4b4c      	ldr	r3, [pc, #304]	; (800097c <main+0x508>)
 800084c:	701a      	strb	r2, [r3, #0]
 800084e:	e676      	b.n	800053e <main+0xca>
			  }
			  else
			  {
				  HAL_I2C_Slave_Transmit(&hi2c1, (uint8_t *)empty_data_packet.payload, 34, HAL_MAX_DELAY);
 8000850:	f04f 33ff 	mov.w	r3, #4294967295
 8000854:	2222      	movs	r2, #34	; 0x22
 8000856:	494a      	ldr	r1, [pc, #296]	; (8000980 <main+0x50c>)
 8000858:	484a      	ldr	r0, [pc, #296]	; (8000984 <main+0x510>)
 800085a:	f001 ffef 	bl	800283c <HAL_I2C_Slave_Transmit>
				  HAL_I2C_Slave_Receive_IT(&hi2c1, (uint8_t *)current_i2c_packet.payload, 35);
 800085e:	2223      	movs	r2, #35	; 0x23
 8000860:	4949      	ldr	r1, [pc, #292]	; (8000988 <main+0x514>)
 8000862:	4848      	ldr	r0, [pc, #288]	; (8000984 <main+0x510>)
 8000864:	f002 f900 	bl	8002a68 <HAL_I2C_Slave_Receive_IT>
 8000868:	e669      	b.n	800053e <main+0xca>
			  }
		  }
		  else
		  {
			  new_packet_to_send_available = 1;
 800086a:	4b48      	ldr	r3, [pc, #288]	; (800098c <main+0x518>)
 800086c:	2201      	movs	r2, #1
 800086e:	701a      	strb	r2, [r3, #0]

			  current_i2c_packet.width = current_i2c_packet.payload[32];
 8000870:	4b45      	ldr	r3, [pc, #276]	; (8000988 <main+0x514>)
 8000872:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000876:	b2da      	uxtb	r2, r3
 8000878:	4b43      	ldr	r3, [pc, #268]	; (8000988 <main+0x514>)
 800087a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			  current_i2c_packet.reliable = current_i2c_packet.payload[33];
 800087e:	4b42      	ldr	r3, [pc, #264]	; (8000988 <main+0x514>)
 8000880:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000884:	b2da      	uxtb	r2, r3
 8000886:	4b40      	ldr	r3, [pc, #256]	; (8000988 <main+0x514>)
 8000888:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			  if(current_i2c_packet.reliable && reliable_packet_to_gcs_counter < 31)
 800088c:	4b3e      	ldr	r3, [pc, #248]	; (8000988 <main+0x514>)
 800088e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2b00      	cmp	r3, #0
 8000896:	d044      	beq.n	8000922 <main+0x4ae>
 8000898:	4b3d      	ldr	r3, [pc, #244]	; (8000990 <main+0x51c>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b1e      	cmp	r3, #30
 800089e:	d840      	bhi.n	8000922 <main+0x4ae>
			  {
				  reliable_packets_to_gcs[reliable_packet_to_gcs_counter].width = current_i2c_packet.width;
 80008a0:	4b3b      	ldr	r3, [pc, #236]	; (8000990 <main+0x51c>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b38      	ldr	r3, [pc, #224]	; (8000988 <main+0x514>)
 80008a8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80008ac:	b2d8      	uxtb	r0, r3
 80008ae:	4939      	ldr	r1, [pc, #228]	; (8000994 <main+0x520>)
 80008b0:	4613      	mov	r3, r2
 80008b2:	00db      	lsls	r3, r3, #3
 80008b4:	4413      	add	r3, r2
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	4413      	add	r3, r2
 80008ba:	440b      	add	r3, r1
 80008bc:	3323      	adds	r3, #35	; 0x23
 80008be:	4602      	mov	r2, r0
 80008c0:	701a      	strb	r2, [r3, #0]
				  reliable_packets_to_gcs[reliable_packet_to_gcs_counter].reliable = 1;
 80008c2:	4b33      	ldr	r3, [pc, #204]	; (8000990 <main+0x51c>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	461a      	mov	r2, r3
 80008c8:	4932      	ldr	r1, [pc, #200]	; (8000994 <main+0x520>)
 80008ca:	4613      	mov	r3, r2
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	4413      	add	r3, r2
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	4413      	add	r3, r2
 80008d4:	440b      	add	r3, r1
 80008d6:	3324      	adds	r3, #36	; 0x24
 80008d8:	2201      	movs	r2, #1
 80008da:	701a      	strb	r2, [r3, #0]
				  for(int i = 0; i < 35; i++)
 80008dc:	2300      	movs	r3, #0
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	e015      	b.n	800090e <main+0x49a>
				  {
					  reliable_packets_to_gcs[reliable_packet_to_gcs_counter].payload[i] = current_i2c_packet.payload[i];
 80008e2:	4b2b      	ldr	r3, [pc, #172]	; (8000990 <main+0x51c>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	461a      	mov	r2, r3
 80008e8:	4927      	ldr	r1, [pc, #156]	; (8000988 <main+0x514>)
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	440b      	add	r3, r1
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	b2d8      	uxtb	r0, r3
 80008f2:	4928      	ldr	r1, [pc, #160]	; (8000994 <main+0x520>)
 80008f4:	4613      	mov	r3, r2
 80008f6:	00db      	lsls	r3, r3, #3
 80008f8:	4413      	add	r3, r2
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	4413      	add	r3, r2
 80008fe:	18ca      	adds	r2, r1, r3
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	4413      	add	r3, r2
 8000904:	4602      	mov	r2, r0
 8000906:	701a      	strb	r2, [r3, #0]
				  for(int i = 0; i < 35; i++)
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	3301      	adds	r3, #1
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	2b22      	cmp	r3, #34	; 0x22
 8000912:	dde6      	ble.n	80008e2 <main+0x46e>
				  }

				  reliable_packet_to_gcs_counter++;
 8000914:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <main+0x51c>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	3301      	adds	r3, #1
 800091a:	b2da      	uxtb	r2, r3
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <main+0x51c>)
 800091e:	701a      	strb	r2, [r3, #0]
 8000920:	e023      	b.n	800096a <main+0x4f6>
			  }
			  else if(current_i2c_packet.reliable == 0)
 8000922:	4b19      	ldr	r3, [pc, #100]	; (8000988 <main+0x514>)
 8000924:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000928:	b2db      	uxtb	r3, r3
 800092a:	2b00      	cmp	r3, #0
 800092c:	d11d      	bne.n	800096a <main+0x4f6>
			  {
				  unreliable_packet.width = current_i2c_packet.width;
 800092e:	4b16      	ldr	r3, [pc, #88]	; (8000988 <main+0x514>)
 8000930:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4b18      	ldr	r3, [pc, #96]	; (8000998 <main+0x524>)
 8000938:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				  unreliable_packet.reliable = 0;
 800093c:	4b16      	ldr	r3, [pc, #88]	; (8000998 <main+0x524>)
 800093e:	2200      	movs	r2, #0
 8000940:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

				  for(int i = 0; i < 35; i++)
 8000944:	2300      	movs	r3, #0
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	e00c      	b.n	8000964 <main+0x4f0>
				  {
					  unreliable_packet.payload[i] = current_i2c_packet.payload[i];
 800094a:	4a0f      	ldr	r2, [pc, #60]	; (8000988 <main+0x514>)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4413      	add	r3, r2
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	b2d9      	uxtb	r1, r3
 8000954:	4a10      	ldr	r2, [pc, #64]	; (8000998 <main+0x524>)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4413      	add	r3, r2
 800095a:	460a      	mov	r2, r1
 800095c:	701a      	strb	r2, [r3, #0]
				  for(int i = 0; i < 35; i++)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	3301      	adds	r3, #1
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2b22      	cmp	r3, #34	; 0x22
 8000968:	ddef      	ble.n	800094a <main+0x4d6>
				  }
			  }

			  HAL_I2C_Slave_Receive_IT(&hi2c1, (uint8_t *)current_i2c_packet.payload, 35);
 800096a:	2223      	movs	r2, #35	; 0x23
 800096c:	4906      	ldr	r1, [pc, #24]	; (8000988 <main+0x514>)
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <main+0x510>)
 8000970:	f002 f87a 	bl	8002a68 <HAL_I2C_Slave_Receive_IT>
	  if(GetMicros() - test_led_timer > 50000)
 8000974:	e5e3      	b.n	800053e <main+0xca>
 8000976:	bf00      	nop
 8000978:	200006a4 	.word	0x200006a4
 800097c:	20000035 	.word	0x20000035
 8000980:	200001b4 	.word	0x200001b4
 8000984:	200000d4 	.word	0x200000d4
 8000988:	200001dc 	.word	0x200001dc
 800098c:	20000029 	.word	0x20000029
 8000990:	20000034 	.word	0x20000034
 8000994:	20000204 	.word	0x20000204
 8000998:	20000b48 	.word	0x20000b48

0800099c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b094      	sub	sp, #80	; 0x50
 80009a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009a6:	2228      	movs	r2, #40	; 0x28
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f005 fa96 	bl	8005edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009cc:	2301      	movs	r3, #1
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80009d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009dc:	2301      	movs	r3, #1
 80009de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e0:	2302      	movs	r3, #2
 80009e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009f4:	4618      	mov	r0, r3
 80009f6:	f003 fc11 	bl	800421c <HAL_RCC_OscConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000a00:	f000 f8a6 	bl	8000b50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a04:	230f      	movs	r3, #15
 8000a06:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a14:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a1a:	f107 0314 	add.w	r3, r7, #20
 8000a1e:	2102      	movs	r1, #2
 8000a20:	4618      	mov	r0, r3
 8000a22:	f003 fe7b 	bl	800471c <HAL_RCC_ClockConfig>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a2c:	f000 f890 	bl	8000b50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a30:	2302      	movs	r3, #2
 8000a32:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000a34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a38:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f004 f80b 	bl	8004a58 <HAL_RCCEx_PeriphCLKConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000a48:	f000 f882 	bl	8000b50 <Error_Handler>
  }
}
 8000a4c:	bf00      	nop
 8000a4e:	3750      	adds	r7, #80	; 0x50
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NRF_IRQ_Pin)
 8000a5e:	88fb      	ldrh	r3, [r7, #6]
 8000a60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a64:	d102      	bne.n	8000a6c <HAL_GPIO_EXTI_Callback+0x18>
	{
		radio_irq_flag = 1;
 8000a66:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <HAL_GPIO_EXTI_Callback+0x24>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	701a      	strb	r2, [r3, #0]
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
	}
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000036 	.word	0x20000036

08000a7c <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	i2c_receive_flag = 1;
 8000a84:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <HAL_I2C_SlaveRxCpltCallback+0x18>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	701a      	strb	r2, [r3, #0]
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	20000028 	.word	0x20000028

08000a98 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	//HAL_I2C_Slave_Receive_IT(&hi2c1, (uint8_t *)current_i2c_packet.payload, 35);
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr
	...

08000aac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d10b      	bne.n	8000ad4 <HAL_TIM_PeriodElapsedCallback+0x28>
	{
		//Look into overflow
		micros_timer_base += 65000;//65536;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f503 437d 	add.w	r3, r3, #64768	; 0xfd00
 8000ac4:	33e8      	adds	r3, #232	; 0xe8
 8000ac6:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000ac8:	6013      	str	r3, [r2, #0]
		millis_timer_base += 65;//Overflow doesn't matter unless board is running for more than 49 days
 8000aca:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	3341      	adds	r3, #65	; 0x41
 8000ad0:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000ad2:	6013      	str	r3, [r2, #0]
	}
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000bc8 	.word	0x20000bc8
 8000ae4:	20000128 	.word	0x20000128
 8000ae8:	2000014c 	.word	0x2000014c

08000aec <GetMicros>:

uint32_t GetMicros()
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
	//return micros_timer_base + __HAL_TIM_GET_COUNTER(&htim4);
	return __HAL_TIM_GET_COUNTER(&htim4);
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <GetMicros+0x14>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20000bc8 	.word	0x20000bc8

08000b04 <GetMicrosDifference>:
{
	return GetMillis() - *timer_counter_to_use;
}

uint32_t GetMicrosDifference(uint32_t *timer_counter_to_use)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	uint32_t current_micros = GetMicros();
 8000b0c:	f7ff ffee 	bl	8000aec <GetMicros>
 8000b10:	60b8      	str	r0, [r7, #8]
	uint32_t micros_difference = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]

	if(current_micros > *timer_counter_to_use)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d905      	bls.n	8000b2c <GetMicrosDifference+0x28>
	{
		micros_difference = current_micros - *timer_counter_to_use;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	68ba      	ldr	r2, [r7, #8]
 8000b26:	1ad3      	subs	r3, r2, r3
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	e00c      	b.n	8000b46 <GetMicrosDifference+0x42>
	}
	else if(current_micros < *timer_counter_to_use)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	68ba      	ldr	r2, [r7, #8]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d207      	bcs.n	8000b46 <GetMicrosDifference+0x42>
	{
		micros_difference = 65000 + current_micros - *timer_counter_to_use;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	68ba      	ldr	r2, [r7, #8]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	f503 437d 	add.w	r3, r3, #64768	; 0xfd00
 8000b42:	33e8      	adds	r3, #232	; 0xe8
 8000b44:	60fb      	str	r3, [r7, #12]
	}

	return micros_difference;
 8000b46:	68fb      	ldr	r3, [r7, #12]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr

08000b5c <NRF24_Init>:

volatile uint8_t radio_irq_flag = 0;
volatile uint8_t waiting_for_ack = 0;

void NRF24_Init(NRF24_RADIO *radio)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8000b64:	2201      	movs	r2, #1
 8000b66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b6a:	484e      	ldr	r0, [pc, #312]	; (8000ca4 <NRF24_Init+0x148>)
 8000b6c:	f001 fcf6 	bl	800255c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8000b70:	2201      	movs	r2, #1
 8000b72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b76:	484c      	ldr	r0, [pc, #304]	; (8000ca8 <NRF24_Init+0x14c>)
 8000b78:	f001 fcf0 	bl	800255c <HAL_GPIO_WritePin>

	NRF24_WriteBit(radio, 0, 0, 1); //register#, bit#, and value 0 or 1, ::  0,0,1 RX Mode
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2100      	movs	r1, #0
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f000 f9aa 	bl	8000edc <NRF24_WriteBit>
	NRF24_WriteBit(radio, 0, 1, 1); //register, bit, and value 0,1,1 PowerUP
 8000b88:	2301      	movs	r3, #1
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f000 f9a4 	bl	8000edc <NRF24_WriteBit>
	    //NRF24_WriteBit(radio, 0, 4, 1); //RT Mask turns off the RT interrupt
	    //NRF24_WriteBit(radio, 0, 5, 1); //TX Mask turns off the TX interrupt
	    //NRF24_WriteBit(radio, 0, 6, 1);

	NRF24_WriteBit(radio, 4, 4, 0);//1 wait 2750ms for AA
 8000b94:	2300      	movs	r3, #0
 8000b96:	2204      	movs	r2, #4
 8000b98:	2104      	movs	r1, #4
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f000 f99e 	bl	8000edc <NRF24_WriteBit>
	NRF24_WriteBit(radio, 4, 5, 0);//1
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	2205      	movs	r2, #5
 8000ba4:	2104      	movs	r1, #4
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f000 f998 	bl	8000edc <NRF24_WriteBit>
	NRF24_WriteBit(radio, 4, 6, 1);//0
 8000bac:	2301      	movs	r3, #1
 8000bae:	2206      	movs	r2, #6
 8000bb0:	2104      	movs	r1, #4
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f000 f992 	bl	8000edc <NRF24_WriteBit>
	NRF24_WriteBit(radio, 4, 7, 1);//1
 8000bb8:	2301      	movs	r3, #1
 8000bba:	2207      	movs	r2, #7
 8000bbc:	2104      	movs	r1, #4
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f000 f98c 	bl	8000edc <NRF24_WriteBit>

	NRF24_WriteBit(radio, 4, 3, 0);
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	2104      	movs	r1, #4
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f000 f986 	bl	8000edc <NRF24_WriteBit>
	NRF24_WriteBit(radio, 4, 2, 1);
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	2104      	movs	r1, #4
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f000 f980 	bl	8000edc <NRF24_WriteBit>
	NRF24_WriteBit(radio, 4, 1, 0);
 8000bdc:	2300      	movs	r3, #0
 8000bde:	2201      	movs	r2, #1
 8000be0:	2104      	movs	r1, #4
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f000 f97a 	bl	8000edc <NRF24_WriteBit>
	NRF24_WriteBit(radio, 4, 0, 1);
 8000be8:	2301      	movs	r3, #1
 8000bea:	2200      	movs	r2, #0
 8000bec:	2104      	movs	r1, #4
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f000 f974 	bl	8000edc <NRF24_WriteBit>

	NRF24_WriteBit(radio, 6, 3, 0);
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	2203      	movs	r2, #3
 8000bf8:	2106      	movs	r1, #6
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f000 f96e 	bl	8000edc <NRF24_WriteBit>
	NRF24_WriteBit(radio, 6, 5, 1); //250kbps
 8000c00:	2301      	movs	r3, #1
 8000c02:	2205      	movs	r2, #5
 8000c04:	2106      	movs	r1, #6
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f000 f968 	bl	8000edc <NRF24_WriteBit>

	NRF24_WriteBit(radio, 5, 6, 1);
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	2206      	movs	r2, #6
 8000c10:	2105      	movs	r1, #5
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f000 f962 	bl	8000edc <NRF24_WriteBit>
	NRF24_WriteBit(radio, 5, 5, 1);
 8000c18:	2301      	movs	r3, #1
 8000c1a:	2205      	movs	r2, #5
 8000c1c:	2105      	movs	r1, #5
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f000 f95c 	bl	8000edc <NRF24_WriteBit>
	NRF24_WriteBit(radio, 5, 4, 0);
 8000c24:	2300      	movs	r3, #0
 8000c26:	2204      	movs	r2, #4
 8000c28:	2105      	movs	r1, #5
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f000 f956 	bl	8000edc <NRF24_WriteBit>
	NRF24_WriteBit(radio, 5, 3, 1);
 8000c30:	2301      	movs	r3, #1
 8000c32:	2203      	movs	r2, #3
 8000c34:	2105      	movs	r1, #5
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f000 f950 	bl	8000edc <NRF24_WriteBit>
	NRF24_WriteBit(radio, 5, 2, 1);
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	2202      	movs	r2, #2
 8000c40:	2105      	movs	r1, #5
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f000 f94a 	bl	8000edc <NRF24_WriteBit>
	NRF24_WriteBit(radio, 5, 1, 1);
 8000c48:	2301      	movs	r3, #1
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	2105      	movs	r1, #5
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f000 f944 	bl	8000edc <NRF24_WriteBit>
	NRF24_WriteBit(radio, 5, 0, 0);
 8000c54:	2300      	movs	r3, #0
 8000c56:	2200      	movs	r2, #0
 8000c58:	2105      	movs	r1, #5
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f000 f93e 	bl	8000edc <NRF24_WriteBit>

	NRF24_WriteBit(radio, 29, 2, 1);
 8000c60:	2301      	movs	r3, #1
 8000c62:	2202      	movs	r2, #2
 8000c64:	211d      	movs	r1, #29
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f000 f938 	bl	8000edc <NRF24_WriteBit>
	NRF24_WriteBit(radio, 29, 1, 1);
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	2201      	movs	r2, #1
 8000c70:	211d      	movs	r1, #29
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f000 f932 	bl	8000edc <NRF24_WriteBit>

	NRF24_WriteBit(radio, 28, 0, 1);
 8000c78:	2301      	movs	r3, #1
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	211c      	movs	r1, #28
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f000 f92c 	bl	8000edc <NRF24_WriteBit>

	NRF24_FlushRX(radio);
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f000 f9df 	bl	8001048 <NRF24_FlushRX>
	HAL_Delay(50);
 8000c8a:	2032      	movs	r0, #50	; 0x32
 8000c8c:	f000 fdf0 	bl	8001870 <HAL_Delay>
	NRF24_FlushTX(radio);
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f000 f9b1 	bl	8000ff8 <NRF24_FlushTX>

	NRF24_ClearInterrupts(radio);
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f000 f9fe 	bl	8001098 <NRF24_ClearInterrupts>
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40010c00 	.word	0x40010c00
 8000ca8:	40010800 	.word	0x40010800

08000cac <NRF24_PacketSend>:

uint32_t send_delay_timer;

void NRF24_PacketSend(NRF24_RADIO *radio, data_packet *packet)
{
 8000cac:	b590      	push	{r4, r7, lr}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af02      	add	r7, sp, #8
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
	static uint8_t txBuf[2];
	static uint8_t rxBuf[2];

	waiting_for_ack = 1;
 8000cb6:	4b28      	ldr	r3, [pc, #160]	; (8000d58 <NRF24_PacketSend+0xac>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]

	NRF24_FlushTX(radio);
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f000 f99b 	bl	8000ff8 <NRF24_FlushTX>

	txBuf[0] = 0b10100000;
 8000cc2:	4b26      	ldr	r3, [pc, #152]	; (8000d5c <NRF24_PacketSend+0xb0>)
 8000cc4:	22a0      	movs	r2, #160	; 0xa0
 8000cc6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cce:	4824      	ldr	r0, [pc, #144]	; (8000d60 <NRF24_PacketSend+0xb4>)
 8000cd0:	f001 fc44 	bl	800255c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(radio->spiHandle, txBuf, rxBuf, 1, HAL_MAX_DELAY);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6818      	ldr	r0, [r3, #0]
 8000cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cdc:	9300      	str	r3, [sp, #0]
 8000cde:	2301      	movs	r3, #1
 8000ce0:	4a20      	ldr	r2, [pc, #128]	; (8000d64 <NRF24_PacketSend+0xb8>)
 8000ce2:	491e      	ldr	r1, [pc, #120]	; (8000d5c <NRF24_PacketSend+0xb0>)
 8000ce4:	f003 ffcf 	bl	8004c86 <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(radio->spiHandle, packet->payload, radio->garbageRxBuf, packet->width, HAL_MAX_DELAY);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6818      	ldr	r0, [r3, #0]
 8000cec:	6839      	ldr	r1, [r7, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000cfa:	b29c      	uxth	r4, r3
 8000cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	4623      	mov	r3, r4
 8000d04:	f003 ffbf 	bl	8004c86 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d0e:	4814      	ldr	r0, [pc, #80]	; (8000d60 <NRF24_PacketSend+0xb4>)
 8000d10:	f001 fc24 	bl	800255c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000d14:	2200      	movs	r2, #0
 8000d16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d1a:	4813      	ldr	r0, [pc, #76]	; (8000d68 <NRF24_PacketSend+0xbc>)
 8000d1c:	f001 fc1e 	bl	800255c <HAL_GPIO_WritePin>
	NRF24_WriteBit(radio, 0, 0, 0);//Go into TX mode
 8000d20:	2300      	movs	r3, #0
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f000 f8d8 	bl	8000edc <NRF24_WriteBit>
	send_delay_timer = GetMicros();
 8000d2c:	f7ff fede 	bl	8000aec <GetMicros>
 8000d30:	4602      	mov	r2, r0
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <NRF24_PacketSend+0xc0>)
 8000d34:	601a      	str	r2, [r3, #0]
	while(GetMicrosDifference(&send_delay_timer) < 50);
 8000d36:	bf00      	nop
 8000d38:	480c      	ldr	r0, [pc, #48]	; (8000d6c <NRF24_PacketSend+0xc0>)
 8000d3a:	f7ff fee3 	bl	8000b04 <GetMicrosDifference>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b31      	cmp	r3, #49	; 0x31
 8000d42:	d9f9      	bls.n	8000d38 <NRF24_PacketSend+0x8c>
	HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d4a:	4807      	ldr	r0, [pc, #28]	; (8000d68 <NRF24_PacketSend+0xbc>)
 8000d4c:	f001 fc06 	bl	800255c <HAL_GPIO_WritePin>
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd90      	pop	{r4, r7, pc}
 8000d58:	20000037 	.word	0x20000037
 8000d5c:	20000038 	.word	0x20000038
 8000d60:	40010800 	.word	0x40010800
 8000d64:	2000003c 	.word	0x2000003c
 8000d68:	40010c00 	.word	0x40010c00
 8000d6c:	20000b44 	.word	0x20000b44

08000d70 <NRF24_PacketRead>:

void NRF24_PacketRead(NRF24_RADIO *radio)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af02      	add	r7, sp, #8
 8000d76:	6078      	str	r0, [r7, #4]
	static uint8_t txBuf[32];
	static uint8_t rxBuf[32];
	static uint8_t packet_width;

	txBuf[0] = 0b01100000;
 8000d78:	4b52      	ldr	r3, [pc, #328]	; (8000ec4 <NRF24_PacketRead+0x154>)
 8000d7a:	2260      	movs	r2, #96	; 0x60
 8000d7c:	701a      	strb	r2, [r3, #0]
	txBuf[1] = 0;
 8000d7e:	4b51      	ldr	r3, [pc, #324]	; (8000ec4 <NRF24_PacketRead+0x154>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d8a:	484f      	ldr	r0, [pc, #316]	; (8000ec8 <NRF24_PacketRead+0x158>)
 8000d8c:	f001 fbe6 	bl	800255c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(radio->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6818      	ldr	r0, [r3, #0]
 8000d94:	f04f 33ff 	mov.w	r3, #4294967295
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	4a4b      	ldr	r2, [pc, #300]	; (8000ecc <NRF24_PacketRead+0x15c>)
 8000d9e:	4949      	ldr	r1, [pc, #292]	; (8000ec4 <NRF24_PacketRead+0x154>)
 8000da0:	f003 ff71 	bl	8004c86 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8000da4:	2201      	movs	r2, #1
 8000da6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000daa:	4847      	ldr	r0, [pc, #284]	; (8000ec8 <NRF24_PacketRead+0x158>)
 8000dac:	f001 fbd6 	bl	800255c <HAL_GPIO_WritePin>
	packet_width = rxBuf[1];
 8000db0:	4b46      	ldr	r3, [pc, #280]	; (8000ecc <NRF24_PacketRead+0x15c>)
 8000db2:	785a      	ldrb	r2, [r3, #1]
 8000db4:	4b46      	ldr	r3, [pc, #280]	; (8000ed0 <NRF24_PacketRead+0x160>)
 8000db6:	701a      	strb	r2, [r3, #0]

	txBuf[0] = 0b01100001;
 8000db8:	4b42      	ldr	r3, [pc, #264]	; (8000ec4 <NRF24_PacketRead+0x154>)
 8000dba:	2261      	movs	r2, #97	; 0x61
 8000dbc:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dc4:	4840      	ldr	r0, [pc, #256]	; (8000ec8 <NRF24_PacketRead+0x158>)
 8000dc6:	f001 fbc9 	bl	800255c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(radio->spiHandle, txBuf, rxBuf, 1, HAL_MAX_DELAY);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6818      	ldr	r0, [r3, #0]
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	4a3d      	ldr	r2, [pc, #244]	; (8000ecc <NRF24_PacketRead+0x15c>)
 8000dd8:	493a      	ldr	r1, [pc, #232]	; (8000ec4 <NRF24_PacketRead+0x154>)
 8000dda:	f003 ff54 	bl	8004c86 <HAL_SPI_TransmitReceive>

	for(int i = 0; i < 32; i++)
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	e00c      	b.n	8000dfe <NRF24_PacketRead+0x8e>
	{
		txBuf[i] = 0;
 8000de4:	4a37      	ldr	r2, [pc, #220]	; (8000ec4 <NRF24_PacketRead+0x154>)
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	4413      	add	r3, r2
 8000dea:	2200      	movs	r2, #0
 8000dec:	701a      	strb	r2, [r3, #0]
		rxBuf[i] = 0;
 8000dee:	4a37      	ldr	r2, [pc, #220]	; (8000ecc <NRF24_PacketRead+0x15c>)
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4413      	add	r3, r2
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 32; i++)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	2b1f      	cmp	r3, #31
 8000e02:	ddef      	ble.n	8000de4 <NRF24_PacketRead+0x74>
	}

	HAL_SPI_TransmitReceive(radio->spiHandle, txBuf, rxBuf, packet_width, HAL_MAX_DELAY);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6818      	ldr	r0, [r3, #0]
 8000e08:	4b31      	ldr	r3, [pc, #196]	; (8000ed0 <NRF24_PacketRead+0x160>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e12:	9300      	str	r3, [sp, #0]
 8000e14:	4613      	mov	r3, r2
 8000e16:	4a2d      	ldr	r2, [pc, #180]	; (8000ecc <NRF24_PacketRead+0x15c>)
 8000e18:	492a      	ldr	r1, [pc, #168]	; (8000ec4 <NRF24_PacketRead+0x154>)
 8000e1a:	f003 ff34 	bl	8004c86 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8000e1e:	2201      	movs	r2, #1
 8000e20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e24:	4828      	ldr	r0, [pc, #160]	; (8000ec8 <NRF24_PacketRead+0x158>)
 8000e26:	f001 fb99 	bl	800255c <HAL_GPIO_WritePin>

	if(rxBuf[0] != 0x00)
 8000e2a:	4b28      	ldr	r3, [pc, #160]	; (8000ecc <NRF24_PacketRead+0x15c>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d043      	beq.n	8000eba <NRF24_PacketRead+0x14a>
	{
		packets_to_receive[packets_to_receive_counter].width = packet_width;
 8000e32:	4b28      	ldr	r3, [pc, #160]	; (8000ed4 <NRF24_PacketRead+0x164>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	461a      	mov	r2, r3
 8000e38:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <NRF24_PacketRead+0x160>)
 8000e3a:	7818      	ldrb	r0, [r3, #0]
 8000e3c:	4926      	ldr	r1, [pc, #152]	; (8000ed8 <NRF24_PacketRead+0x168>)
 8000e3e:	4613      	mov	r3, r2
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	4413      	add	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	4413      	add	r3, r2
 8000e48:	440b      	add	r3, r1
 8000e4a:	3323      	adds	r3, #35	; 0x23
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	701a      	strb	r2, [r3, #0]
		packets_to_receive[packets_to_receive_counter].reliable = 1;
 8000e50:	4b20      	ldr	r3, [pc, #128]	; (8000ed4 <NRF24_PacketRead+0x164>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	4920      	ldr	r1, [pc, #128]	; (8000ed8 <NRF24_PacketRead+0x168>)
 8000e58:	4613      	mov	r3, r2
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	4413      	add	r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	4413      	add	r3, r2
 8000e62:	440b      	add	r3, r1
 8000e64:	3324      	adds	r3, #36	; 0x24
 8000e66:	2201      	movs	r2, #1
 8000e68:	701a      	strb	r2, [r3, #0]

		for(int i = 0; i < packet_width; i++)
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	e014      	b.n	8000e9a <NRF24_PacketRead+0x12a>
		{
			packets_to_receive[packets_to_receive_counter].payload[i] = rxBuf[i];
 8000e70:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <NRF24_PacketRead+0x164>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	4915      	ldr	r1, [pc, #84]	; (8000ecc <NRF24_PacketRead+0x15c>)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	440b      	add	r3, r1
 8000e7c:	7818      	ldrb	r0, [r3, #0]
 8000e7e:	4916      	ldr	r1, [pc, #88]	; (8000ed8 <NRF24_PacketRead+0x168>)
 8000e80:	4613      	mov	r3, r2
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	4413      	add	r3, r2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	4413      	add	r3, r2
 8000e8a:	18ca      	adds	r2, r1, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	4413      	add	r3, r2
 8000e90:	4602      	mov	r2, r0
 8000e92:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < packet_width; i++)
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	3301      	adds	r3, #1
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <NRF24_PacketRead+0x160>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	dbe4      	blt.n	8000e70 <NRF24_PacketRead+0x100>
		}

		if(packets_to_receive_counter < 31)
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <NRF24_PacketRead+0x164>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b1e      	cmp	r3, #30
 8000eac:	d805      	bhi.n	8000eba <NRF24_PacketRead+0x14a>
			packets_to_receive_counter++;
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <NRF24_PacketRead+0x164>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <NRF24_PacketRead+0x164>)
 8000eb8:	701a      	strb	r2, [r3, #0]
	}
}
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000040 	.word	0x20000040
 8000ec8:	40010800 	.word	0x40010800
 8000ecc:	20000060 	.word	0x20000060
 8000ed0:	20000080 	.word	0x20000080
 8000ed4:	20000035 	.word	0x20000035
 8000ed8:	200006a4 	.word	0x200006a4

08000edc <NRF24_WriteBit>:

/*
 * Change single bit in register
 */
void NRF24_WriteBit(NRF24_RADIO *radio, uint8_t address, uint8_t bit_add, uint8_t val)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af02      	add	r7, sp, #8
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	4608      	mov	r0, r1
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4603      	mov	r3, r0
 8000eec:	70fb      	strb	r3, [r7, #3]
 8000eee:	460b      	mov	r3, r1
 8000ef0:	70bb      	strb	r3, [r7, #2]
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	707b      	strb	r3, [r7, #1]
	static uint8_t txBuf[2];
	static uint8_t rxBuf[2];

	txBuf[0] = address + 32;
 8000ef6:	78fb      	ldrb	r3, [r7, #3]
 8000ef8:	3320      	adds	r3, #32
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	4b24      	ldr	r3, [pc, #144]	; (8000f90 <NRF24_WriteBit+0xb4>)
 8000efe:	701a      	strb	r2, [r3, #0]
    txBuf[1] = NRF24_GetAddress(radio, address);
 8000f00:	78fb      	ldrb	r3, [r7, #3]
 8000f02:	4619      	mov	r1, r3
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f000 f847 	bl	8000f98 <NRF24_GetAddress>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b20      	ldr	r3, [pc, #128]	; (8000f90 <NRF24_WriteBit+0xb4>)
 8000f10:	705a      	strb	r2, [r3, #1]

	if(val == 1)
 8000f12:	787b      	ldrb	r3, [r7, #1]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d10d      	bne.n	8000f34 <NRF24_WriteBit+0x58>
	{
		txBuf[1] |= 1 << bit_add;
 8000f18:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <NRF24_WriteBit+0xb4>)
 8000f1a:	785b      	ldrb	r3, [r3, #1]
 8000f1c:	b25a      	sxtb	r2, r3
 8000f1e:	78bb      	ldrb	r3, [r7, #2]
 8000f20:	2101      	movs	r1, #1
 8000f22:	fa01 f303 	lsl.w	r3, r1, r3
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	b25b      	sxtb	r3, r3
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <NRF24_WriteBit+0xb4>)
 8000f30:	705a      	strb	r2, [r3, #1]
 8000f32:	e00e      	b.n	8000f52 <NRF24_WriteBit+0x76>
	}
	else
	{
		txBuf[1] &= ~(1 << bit_add);
 8000f34:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <NRF24_WriteBit+0xb4>)
 8000f36:	785b      	ldrb	r3, [r3, #1]
 8000f38:	b25a      	sxtb	r2, r3
 8000f3a:	78bb      	ldrb	r3, [r7, #2]
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	b25b      	sxtb	r3, r3
 8000f48:	4013      	ands	r3, r2
 8000f4a:	b25b      	sxtb	r3, r3
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <NRF24_WriteBit+0xb4>)
 8000f50:	705a      	strb	r2, [r3, #1]
	}

	HAL_GPIO_WritePin(radio->csnPinPort, radio->csnPin, GPIO_PIN_RESET);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6858      	ldr	r0, [r3, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	899b      	ldrh	r3, [r3, #12]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f001 fafd 	bl	800255c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(radio->spiHandle, txBuf, rxBuf, 2, HAL_MAX_DELAY);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6818      	ldr	r0, [r3, #0]
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	4a09      	ldr	r2, [pc, #36]	; (8000f94 <NRF24_WriteBit+0xb8>)
 8000f70:	4907      	ldr	r1, [pc, #28]	; (8000f90 <NRF24_WriteBit+0xb4>)
 8000f72:	f003 fe88 	bl	8004c86 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(radio->csnPinPort, radio->csnPin, GPIO_PIN_SET);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6858      	ldr	r0, [r3, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	899b      	ldrh	r3, [r3, #12]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	4619      	mov	r1, r3
 8000f82:	f001 faeb 	bl	800255c <HAL_GPIO_WritePin>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000084 	.word	0x20000084
 8000f94:	20000088 	.word	0x20000088

08000f98 <NRF24_GetAddress>:

/*
 * Get NRF24 radio register value
 */
uint8_t NRF24_GetAddress(NRF24_RADIO *radio, uint8_t address)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
	static uint8_t txBuf[2];
	txBuf[0] = address;
 8000fa4:	4a12      	ldr	r2, [pc, #72]	; (8000ff0 <NRF24_GetAddress+0x58>)
 8000fa6:	78fb      	ldrb	r3, [r7, #3]
 8000fa8:	7013      	strb	r3, [r2, #0]
	txBuf[1] = 0x00;
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <NRF24_GetAddress+0x58>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	705a      	strb	r2, [r3, #1]

	static uint8_t reg_value[2];

	HAL_GPIO_WritePin(radio->csnPinPort, radio->csnPin, GPIO_PIN_RESET);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6858      	ldr	r0, [r3, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	899b      	ldrh	r3, [r3, #12]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f001 face 	bl	800255c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(radio->spiHandle, txBuf, reg_value, 2, HAL_MAX_DELAY);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6818      	ldr	r0, [r3, #0]
 8000fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2302      	movs	r3, #2
 8000fcc:	4a09      	ldr	r2, [pc, #36]	; (8000ff4 <NRF24_GetAddress+0x5c>)
 8000fce:	4908      	ldr	r1, [pc, #32]	; (8000ff0 <NRF24_GetAddress+0x58>)
 8000fd0:	f003 fe59 	bl	8004c86 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(radio->csnPinPort, radio->csnPin, GPIO_PIN_SET);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6858      	ldr	r0, [r3, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	899b      	ldrh	r3, [r3, #12]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f001 fabc 	bl	800255c <HAL_GPIO_WritePin>

	return reg_value[1];
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <NRF24_GetAddress+0x5c>)
 8000fe6:	785b      	ldrb	r3, [r3, #1]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	2000008c 	.word	0x2000008c
 8000ff4:	20000090 	.word	0x20000090

08000ff8 <NRF24_FlushTX>:

void NRF24_FlushTX(NRF24_RADIO *radio)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	6078      	str	r0, [r7, #4]
	static uint8_t txBuf[1];
	static uint8_t rxBuf[1];

	txBuf[0] = 0b11100001;//Flush TX
 8001000:	4b0e      	ldr	r3, [pc, #56]	; (800103c <NRF24_FlushTX+0x44>)
 8001002:	22e1      	movs	r2, #225	; 0xe1
 8001004:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 7180 	mov.w	r1, #256	; 0x100
 800100c:	480c      	ldr	r0, [pc, #48]	; (8001040 <NRF24_FlushTX+0x48>)
 800100e:	f001 faa5 	bl	800255c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(radio->spiHandle, txBuf, rxBuf, 1, HAL_MAX_DELAY);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6818      	ldr	r0, [r3, #0]
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2301      	movs	r3, #1
 800101e:	4a09      	ldr	r2, [pc, #36]	; (8001044 <NRF24_FlushTX+0x4c>)
 8001020:	4906      	ldr	r1, [pc, #24]	; (800103c <NRF24_FlushTX+0x44>)
 8001022:	f003 fe30 	bl	8004c86 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8001026:	2201      	movs	r2, #1
 8001028:	f44f 7180 	mov.w	r1, #256	; 0x100
 800102c:	4804      	ldr	r0, [pc, #16]	; (8001040 <NRF24_FlushTX+0x48>)
 800102e:	f001 fa95 	bl	800255c <HAL_GPIO_WritePin>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000094 	.word	0x20000094
 8001040:	40010800 	.word	0x40010800
 8001044:	20000098 	.word	0x20000098

08001048 <NRF24_FlushRX>:

void NRF24_FlushRX(NRF24_RADIO *radio)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af02      	add	r7, sp, #8
 800104e:	6078      	str	r0, [r7, #4]
	static uint8_t txBuf[1];
	static uint8_t rxBuf[1];

	txBuf[0] = 0b11100010;//Flush RX
 8001050:	4b0e      	ldr	r3, [pc, #56]	; (800108c <NRF24_FlushRX+0x44>)
 8001052:	22e2      	movs	r2, #226	; 0xe2
 8001054:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	f44f 7180 	mov.w	r1, #256	; 0x100
 800105c:	480c      	ldr	r0, [pc, #48]	; (8001090 <NRF24_FlushRX+0x48>)
 800105e:	f001 fa7d 	bl	800255c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(radio->spiHandle, txBuf, rxBuf, 1, HAL_MAX_DELAY);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6818      	ldr	r0, [r3, #0]
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	4a09      	ldr	r2, [pc, #36]	; (8001094 <NRF24_FlushRX+0x4c>)
 8001070:	4906      	ldr	r1, [pc, #24]	; (800108c <NRF24_FlushRX+0x44>)
 8001072:	f003 fe08 	bl	8004c86 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8001076:	2201      	movs	r2, #1
 8001078:	f44f 7180 	mov.w	r1, #256	; 0x100
 800107c:	4804      	ldr	r0, [pc, #16]	; (8001090 <NRF24_FlushRX+0x48>)
 800107e:	f001 fa6d 	bl	800255c <HAL_GPIO_WritePin>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2000009c 	.word	0x2000009c
 8001090:	40010800 	.word	0x40010800
 8001094:	200000a0 	.word	0x200000a0

08001098 <NRF24_ClearInterrupts>:

void NRF24_ClearInterrupts(NRF24_RADIO *radio)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	if((NRF24_GetAddress(radio, 7) >> 4) & 0x01)//RT interrupt
 80010a0:	2107      	movs	r1, #7
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ff78 	bl	8000f98 <NRF24_GetAddress>
 80010a8:	4603      	mov	r3, r0
 80010aa:	091b      	lsrs	r3, r3, #4
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d005      	beq.n	80010c2 <NRF24_ClearInterrupts+0x2a>
	{
		NRF24_WriteBit(radio, 7, 4, 1);
 80010b6:	2301      	movs	r3, #1
 80010b8:	2204      	movs	r2, #4
 80010ba:	2107      	movs	r1, #7
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff0d 	bl	8000edc <NRF24_WriteBit>
	}

	if((NRF24_GetAddress(radio, 7) >> 5) & 0x01)//TX interrupt
 80010c2:	2107      	movs	r1, #7
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ff67 	bl	8000f98 <NRF24_GetAddress>
 80010ca:	4603      	mov	r3, r0
 80010cc:	095b      	lsrs	r3, r3, #5
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d005      	beq.n	80010e4 <NRF24_ClearInterrupts+0x4c>
	{
		NRF24_WriteBit(radio, 7, 5, 1);
 80010d8:	2301      	movs	r3, #1
 80010da:	2205      	movs	r2, #5
 80010dc:	2107      	movs	r1, #7
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff fefc 	bl	8000edc <NRF24_WriteBit>
	}

	if((NRF24_GetAddress(radio, 7) >> 6) & 0x01)//RX interrupt
 80010e4:	2107      	movs	r1, #7
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ff56 	bl	8000f98 <NRF24_GetAddress>
 80010ec:	4603      	mov	r3, r0
 80010ee:	099b      	lsrs	r3, r3, #6
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d005      	beq.n	8001106 <NRF24_ClearInterrupts+0x6e>
	{
		NRF24_WriteBit(radio, 7, 6, 1);
 80010fa:	2301      	movs	r3, #1
 80010fc:	2206      	movs	r2, #6
 80010fe:	2107      	movs	r1, #7
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff feeb 	bl	8000edc <NRF24_WriteBit>
	}
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001114:	4b17      	ldr	r3, [pc, #92]	; (8001174 <MX_SPI2_Init+0x64>)
 8001116:	4a18      	ldr	r2, [pc, #96]	; (8001178 <MX_SPI2_Init+0x68>)
 8001118:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800111a:	4b16      	ldr	r3, [pc, #88]	; (8001174 <MX_SPI2_Init+0x64>)
 800111c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001120:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001122:	4b14      	ldr	r3, [pc, #80]	; (8001174 <MX_SPI2_Init+0x64>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <MX_SPI2_Init+0x64>)
 800112a:	2200      	movs	r2, #0
 800112c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <MX_SPI2_Init+0x64>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001134:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <MX_SPI2_Init+0x64>)
 8001136:	2200      	movs	r2, #0
 8001138:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <MX_SPI2_Init+0x64>)
 800113c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001140:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001142:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <MX_SPI2_Init+0x64>)
 8001144:	2210      	movs	r2, #16
 8001146:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <MX_SPI2_Init+0x64>)
 800114a:	2200      	movs	r2, #0
 800114c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <MX_SPI2_Init+0x64>)
 8001150:	2200      	movs	r2, #0
 8001152:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001154:	4b07      	ldr	r3, [pc, #28]	; (8001174 <MX_SPI2_Init+0x64>)
 8001156:	2200      	movs	r2, #0
 8001158:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <MX_SPI2_Init+0x64>)
 800115c:	220a      	movs	r2, #10
 800115e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001160:	4804      	ldr	r0, [pc, #16]	; (8001174 <MX_SPI2_Init+0x64>)
 8001162:	f003 fd2f 	bl	8004bc4 <HAL_SPI_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800116c:	f7ff fcf0 	bl	8000b50 <Error_Handler>
  }

}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000b70 	.word	0x20000b70
 8001178:	40003800 	.word	0x40003800

0800117c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a1c      	ldr	r2, [pc, #112]	; (8001208 <HAL_SPI_MspInit+0x8c>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d131      	bne.n	8001200 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800119c:	4b1b      	ldr	r3, [pc, #108]	; (800120c <HAL_SPI_MspInit+0x90>)
 800119e:	69db      	ldr	r3, [r3, #28]
 80011a0:	4a1a      	ldr	r2, [pc, #104]	; (800120c <HAL_SPI_MspInit+0x90>)
 80011a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a6:	61d3      	str	r3, [r2, #28]
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <HAL_SPI_MspInit+0x90>)
 80011aa:	69db      	ldr	r3, [r3, #28]
 80011ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b4:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_SPI_MspInit+0x90>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a14      	ldr	r2, [pc, #80]	; (800120c <HAL_SPI_MspInit+0x90>)
 80011ba:	f043 0308 	orr.w	r3, r3, #8
 80011be:	6193      	str	r3, [r2, #24]
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_SPI_MspInit+0x90>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f003 0308 	and.w	r3, r3, #8
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80011cc:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80011d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011da:	f107 0310 	add.w	r3, r7, #16
 80011de:	4619      	mov	r1, r3
 80011e0:	480b      	ldr	r0, [pc, #44]	; (8001210 <HAL_SPI_MspInit+0x94>)
 80011e2:	f001 f861 	bl	80022a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80011e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	4619      	mov	r1, r3
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <HAL_SPI_MspInit+0x94>)
 80011fc:	f001 f854 	bl	80022a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001200:	bf00      	nop
 8001202:	3720      	adds	r7, #32
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40003800 	.word	0x40003800
 800120c:	40021000 	.word	0x40021000
 8001210:	40010c00 	.word	0x40010c00

08001214 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <HAL_MspInit+0x5c>)
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	4a14      	ldr	r2, [pc, #80]	; (8001270 <HAL_MspInit+0x5c>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6193      	str	r3, [r2, #24]
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_MspInit+0x5c>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001232:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <HAL_MspInit+0x5c>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <HAL_MspInit+0x5c>)
 8001238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800123c:	61d3      	str	r3, [r2, #28]
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <HAL_MspInit+0x5c>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800124a:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <HAL_MspInit+0x60>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	4a04      	ldr	r2, [pc, #16]	; (8001274 <HAL_MspInit+0x60>)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	40021000 	.word	0x40021000
 8001274:	40010000 	.word	0x40010000

08001278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <HardFault_Handler+0x4>

0800128a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800128e:	e7fe      	b.n	800128e <MemManage_Handler+0x4>

08001290 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <BusFault_Handler+0x4>

08001296 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800129a:	e7fe      	b.n	800129a <UsageFault_Handler+0x4>

0800129c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr

080012a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr

080012b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr

080012c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c4:	f000 fab8 	bl	8001838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}

080012cc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80012d0:	4802      	ldr	r0, [pc, #8]	; (80012dc <DMA1_Channel6_IRQHandler+0x10>)
 80012d2:	f000 fed7 	bl	8002084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000c08 	.word	0x20000c08

080012e0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80012e4:	4802      	ldr	r0, [pc, #8]	; (80012f0 <TIM4_IRQHandler+0x10>)
 80012e6:	f003 ff46 	bl	8005176 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000bc8 	.word	0x20000bc8

080012f4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80012f8:	4802      	ldr	r0, [pc, #8]	; (8001304 <I2C1_EV_IRQHandler+0x10>)
 80012fa:	f001 fc23 	bl	8002b44 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200000d4 	.word	0x200000d4

08001308 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800130c:	4802      	ldr	r0, [pc, #8]	; (8001318 <USART2_IRQHandler+0x10>)
 800130e:	f004 fab1 	bl	8005874 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000ccc 	.word	0x20000ccc

0800131c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001320:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001324:	f001 f94a 	bl	80025bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}

0800132c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001330:	4b15      	ldr	r3, [pc, #84]	; (8001388 <SystemInit+0x5c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a14      	ldr	r2, [pc, #80]	; (8001388 <SystemInit+0x5c>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <SystemInit+0x5c>)
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	4911      	ldr	r1, [pc, #68]	; (8001388 <SystemInit+0x5c>)
 8001342:	4b12      	ldr	r3, [pc, #72]	; (800138c <SystemInit+0x60>)
 8001344:	4013      	ands	r3, r2
 8001346:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <SystemInit+0x5c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a0e      	ldr	r2, [pc, #56]	; (8001388 <SystemInit+0x5c>)
 800134e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001356:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001358:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <SystemInit+0x5c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <SystemInit+0x5c>)
 800135e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001362:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <SystemInit+0x5c>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	4a07      	ldr	r2, [pc, #28]	; (8001388 <SystemInit+0x5c>)
 800136a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800136e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <SystemInit+0x5c>)
 8001372:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001376:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <SystemInit+0x64>)
 800137a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800137e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	40021000 	.word	0x40021000
 800138c:	f8ff0000 	.word	0xf8ff0000
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139a:	f107 0308 	add.w	r3, r7, #8
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a8:	463b      	mov	r3, r7
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 80013b0:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <MX_TIM4_Init+0x94>)
 80013b2:	4a1e      	ldr	r2, [pc, #120]	; (800142c <MX_TIM4_Init+0x98>)
 80013b4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80013b6:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <MX_TIM4_Init+0x94>)
 80013b8:	2247      	movs	r2, #71	; 0x47
 80013ba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013bc:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <MX_TIM4_Init+0x94>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 64999;
 80013c2:	4b19      	ldr	r3, [pc, #100]	; (8001428 <MX_TIM4_Init+0x94>)
 80013c4:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 80013c8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ca:	4b17      	ldr	r3, [pc, #92]	; (8001428 <MX_TIM4_Init+0x94>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d0:	4b15      	ldr	r3, [pc, #84]	; (8001428 <MX_TIM4_Init+0x94>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013d6:	4814      	ldr	r0, [pc, #80]	; (8001428 <MX_TIM4_Init+0x94>)
 80013d8:	f003 fe7f 	bl	80050da <HAL_TIM_Base_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80013e2:	f7ff fbb5 	bl	8000b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013ec:	f107 0308 	add.w	r3, r7, #8
 80013f0:	4619      	mov	r1, r3
 80013f2:	480d      	ldr	r0, [pc, #52]	; (8001428 <MX_TIM4_Init+0x94>)
 80013f4:	f003 ffc7 	bl	8005386 <HAL_TIM_ConfigClockSource>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80013fe:	f7ff fba7 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001402:	2300      	movs	r3, #0
 8001404:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800140a:	463b      	mov	r3, r7
 800140c:	4619      	mov	r1, r3
 800140e:	4806      	ldr	r0, [pc, #24]	; (8001428 <MX_TIM4_Init+0x94>)
 8001410:	f004 f98c 	bl	800572c <HAL_TIMEx_MasterConfigSynchronization>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800141a:	f7ff fb99 	bl	8000b50 <Error_Handler>
  }

}
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000bc8 	.word	0x20000bc8
 800142c:	40000800 	.word	0x40000800

08001430 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0d      	ldr	r2, [pc, #52]	; (8001474 <HAL_TIM_Base_MspInit+0x44>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d113      	bne.n	800146a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <HAL_TIM_Base_MspInit+0x48>)
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	4a0c      	ldr	r2, [pc, #48]	; (8001478 <HAL_TIM_Base_MspInit+0x48>)
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	61d3      	str	r3, [r2, #28]
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <HAL_TIM_Base_MspInit+0x48>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	2100      	movs	r1, #0
 800145e:	201e      	movs	r0, #30
 8001460:	f000 fd09 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001464:	201e      	movs	r0, #30
 8001466:	f000 fd22 	bl	8001eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40000800 	.word	0x40000800
 8001478:	40021000 	.word	0x40021000

0800147c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001480:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <MX_USART1_UART_Init+0x4c>)
 8001482:	4a12      	ldr	r2, [pc, #72]	; (80014cc <MX_USART1_UART_Init+0x50>)
 8001484:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <MX_USART1_UART_Init+0x4c>)
 8001488:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800148c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <MX_USART1_UART_Init+0x4c>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <MX_USART1_UART_Init+0x4c>)
 8001496:	2200      	movs	r2, #0
 8001498:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <MX_USART1_UART_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <MX_USART1_UART_Init+0x4c>)
 80014a2:	220c      	movs	r2, #12
 80014a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <MX_USART1_UART_Init+0x4c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <MX_USART1_UART_Init+0x4c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <MX_USART1_UART_Init+0x4c>)
 80014b4:	f004 f990 	bl	80057d8 <HAL_UART_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014be:	f7ff fb47 	bl	8000b50 <Error_Handler>
  }

}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000c8c 	.word	0x20000c8c
 80014cc:	40013800 	.word	0x40013800

080014d0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014d6:	4a12      	ldr	r2, [pc, #72]	; (8001520 <MX_USART2_UART_Init+0x50>)
 80014d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014f6:	220c      	movs	r2, #12
 80014f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <MX_USART2_UART_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <MX_USART2_UART_Init+0x4c>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_USART2_UART_Init+0x4c>)
 8001508:	f004 f966 	bl	80057d8 <HAL_UART_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001512:	f7ff fb1d 	bl	8000b50 <Error_Handler>
  }

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000ccc 	.word	0x20000ccc
 8001520:	40004400 	.word	0x40004400

08001524 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <MX_USART3_UART_Init+0x4c>)
 800152a:	4a12      	ldr	r2, [pc, #72]	; (8001574 <MX_USART3_UART_Init+0x50>)
 800152c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <MX_USART3_UART_Init+0x4c>)
 8001530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001534:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <MX_USART3_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_USART3_UART_Init+0x4c>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <MX_USART3_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_USART3_UART_Init+0x4c>)
 800154a:	220c      	movs	r2, #12
 800154c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <MX_USART3_UART_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_USART3_UART_Init+0x4c>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <MX_USART3_UART_Init+0x4c>)
 800155c:	f004 f93c 	bl	80057d8 <HAL_UART_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001566:	f7ff faf3 	bl	8000b50 <Error_Handler>
  }

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000c4c 	.word	0x20000c4c
 8001574:	40004800 	.word	0x40004800

08001578 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08c      	sub	sp, #48	; 0x30
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 0320 	add.w	r3, r7, #32
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a6b      	ldr	r2, [pc, #428]	; (8001740 <HAL_UART_MspInit+0x1c8>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d132      	bne.n	80015fe <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001598:	4b6a      	ldr	r3, [pc, #424]	; (8001744 <HAL_UART_MspInit+0x1cc>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	4a69      	ldr	r2, [pc, #420]	; (8001744 <HAL_UART_MspInit+0x1cc>)
 800159e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a2:	6193      	str	r3, [r2, #24]
 80015a4:	4b67      	ldr	r3, [pc, #412]	; (8001744 <HAL_UART_MspInit+0x1cc>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ac:	61fb      	str	r3, [r7, #28]
 80015ae:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b0:	4b64      	ldr	r3, [pc, #400]	; (8001744 <HAL_UART_MspInit+0x1cc>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	4a63      	ldr	r2, [pc, #396]	; (8001744 <HAL_UART_MspInit+0x1cc>)
 80015b6:	f043 0304 	orr.w	r3, r3, #4
 80015ba:	6193      	str	r3, [r2, #24]
 80015bc:	4b61      	ldr	r3, [pc, #388]	; (8001744 <HAL_UART_MspInit+0x1cc>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	61bb      	str	r3, [r7, #24]
 80015c6:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015d2:	2303      	movs	r3, #3
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	f107 0320 	add.w	r3, r7, #32
 80015da:	4619      	mov	r1, r3
 80015dc:	485a      	ldr	r0, [pc, #360]	; (8001748 <HAL_UART_MspInit+0x1d0>)
 80015de:	f000 fe63 	bl	80022a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e8:	2300      	movs	r3, #0
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f0:	f107 0320 	add.w	r3, r7, #32
 80015f4:	4619      	mov	r1, r3
 80015f6:	4854      	ldr	r0, [pc, #336]	; (8001748 <HAL_UART_MspInit+0x1d0>)
 80015f8:	f000 fe56 	bl	80022a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80015fc:	e09b      	b.n	8001736 <HAL_UART_MspInit+0x1be>
  else if(uartHandle->Instance==USART2)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a52      	ldr	r2, [pc, #328]	; (800174c <HAL_UART_MspInit+0x1d4>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d15f      	bne.n	80016c8 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001608:	4b4e      	ldr	r3, [pc, #312]	; (8001744 <HAL_UART_MspInit+0x1cc>)
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	4a4d      	ldr	r2, [pc, #308]	; (8001744 <HAL_UART_MspInit+0x1cc>)
 800160e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001612:	61d3      	str	r3, [r2, #28]
 8001614:	4b4b      	ldr	r3, [pc, #300]	; (8001744 <HAL_UART_MspInit+0x1cc>)
 8001616:	69db      	ldr	r3, [r3, #28]
 8001618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001620:	4b48      	ldr	r3, [pc, #288]	; (8001744 <HAL_UART_MspInit+0x1cc>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	4a47      	ldr	r2, [pc, #284]	; (8001744 <HAL_UART_MspInit+0x1cc>)
 8001626:	f043 0304 	orr.w	r3, r3, #4
 800162a:	6193      	str	r3, [r2, #24]
 800162c:	4b45      	ldr	r3, [pc, #276]	; (8001744 <HAL_UART_MspInit+0x1cc>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SAT_TX_Pin;
 8001638:	2304      	movs	r3, #4
 800163a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001640:	2303      	movs	r3, #3
 8001642:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SAT_TX_GPIO_Port, &GPIO_InitStruct);
 8001644:	f107 0320 	add.w	r3, r7, #32
 8001648:	4619      	mov	r1, r3
 800164a:	483f      	ldr	r0, [pc, #252]	; (8001748 <HAL_UART_MspInit+0x1d0>)
 800164c:	f000 fe2c 	bl	80022a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SAT_RX_Pin;
 8001650:	2308      	movs	r3, #8
 8001652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001654:	2300      	movs	r3, #0
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(SAT_RX_GPIO_Port, &GPIO_InitStruct);
 800165c:	f107 0320 	add.w	r3, r7, #32
 8001660:	4619      	mov	r1, r3
 8001662:	4839      	ldr	r0, [pc, #228]	; (8001748 <HAL_UART_MspInit+0x1d0>)
 8001664:	f000 fe20 	bl	80022a8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001668:	4b39      	ldr	r3, [pc, #228]	; (8001750 <HAL_UART_MspInit+0x1d8>)
 800166a:	4a3a      	ldr	r2, [pc, #232]	; (8001754 <HAL_UART_MspInit+0x1dc>)
 800166c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800166e:	4b38      	ldr	r3, [pc, #224]	; (8001750 <HAL_UART_MspInit+0x1d8>)
 8001670:	2200      	movs	r2, #0
 8001672:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001674:	4b36      	ldr	r3, [pc, #216]	; (8001750 <HAL_UART_MspInit+0x1d8>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800167a:	4b35      	ldr	r3, [pc, #212]	; (8001750 <HAL_UART_MspInit+0x1d8>)
 800167c:	2280      	movs	r2, #128	; 0x80
 800167e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001680:	4b33      	ldr	r3, [pc, #204]	; (8001750 <HAL_UART_MspInit+0x1d8>)
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001686:	4b32      	ldr	r3, [pc, #200]	; (8001750 <HAL_UART_MspInit+0x1d8>)
 8001688:	2200      	movs	r2, #0
 800168a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800168c:	4b30      	ldr	r3, [pc, #192]	; (8001750 <HAL_UART_MspInit+0x1d8>)
 800168e:	2200      	movs	r2, #0
 8001690:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001692:	4b2f      	ldr	r3, [pc, #188]	; (8001750 <HAL_UART_MspInit+0x1d8>)
 8001694:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001698:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800169a:	482d      	ldr	r0, [pc, #180]	; (8001750 <HAL_UART_MspInit+0x1d8>)
 800169c:	f000 fc22 	bl	8001ee4 <HAL_DMA_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_UART_MspInit+0x132>
      Error_Handler();
 80016a6:	f7ff fa53 	bl	8000b50 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a28      	ldr	r2, [pc, #160]	; (8001750 <HAL_UART_MspInit+0x1d8>)
 80016ae:	635a      	str	r2, [r3, #52]	; 0x34
 80016b0:	4a27      	ldr	r2, [pc, #156]	; (8001750 <HAL_UART_MspInit+0x1d8>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	2026      	movs	r0, #38	; 0x26
 80016bc:	f000 fbdb 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016c0:	2026      	movs	r0, #38	; 0x26
 80016c2:	f000 fbf4 	bl	8001eae <HAL_NVIC_EnableIRQ>
}
 80016c6:	e036      	b.n	8001736 <HAL_UART_MspInit+0x1be>
  else if(uartHandle->Instance==USART3)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a22      	ldr	r2, [pc, #136]	; (8001758 <HAL_UART_MspInit+0x1e0>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d131      	bne.n	8001736 <HAL_UART_MspInit+0x1be>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016d2:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <HAL_UART_MspInit+0x1cc>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	4a1b      	ldr	r2, [pc, #108]	; (8001744 <HAL_UART_MspInit+0x1cc>)
 80016d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016dc:	61d3      	str	r3, [r2, #28]
 80016de:	4b19      	ldr	r3, [pc, #100]	; (8001744 <HAL_UART_MspInit+0x1cc>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ea:	4b16      	ldr	r3, [pc, #88]	; (8001744 <HAL_UART_MspInit+0x1cc>)
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	4a15      	ldr	r2, [pc, #84]	; (8001744 <HAL_UART_MspInit+0x1cc>)
 80016f0:	f043 0308 	orr.w	r3, r3, #8
 80016f4:	6193      	str	r3, [r2, #24]
 80016f6:	4b13      	ldr	r3, [pc, #76]	; (8001744 <HAL_UART_MspInit+0x1cc>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BLE_TX_Pin;
 8001702:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800170c:	2303      	movs	r3, #3
 800170e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 8001710:	f107 0320 	add.w	r3, r7, #32
 8001714:	4619      	mov	r1, r3
 8001716:	4811      	ldr	r0, [pc, #68]	; (800175c <HAL_UART_MspInit+0x1e4>)
 8001718:	f000 fdc6 	bl	80022a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BLE_RX_Pin;
 800171c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001722:	2300      	movs	r3, #0
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(BLE_RX_GPIO_Port, &GPIO_InitStruct);
 800172a:	f107 0320 	add.w	r3, r7, #32
 800172e:	4619      	mov	r1, r3
 8001730:	480a      	ldr	r0, [pc, #40]	; (800175c <HAL_UART_MspInit+0x1e4>)
 8001732:	f000 fdb9 	bl	80022a8 <HAL_GPIO_Init>
}
 8001736:	bf00      	nop
 8001738:	3730      	adds	r7, #48	; 0x30
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40013800 	.word	0x40013800
 8001744:	40021000 	.word	0x40021000
 8001748:	40010800 	.word	0x40010800
 800174c:	40004400 	.word	0x40004400
 8001750:	20000c08 	.word	0x20000c08
 8001754:	4002006c 	.word	0x4002006c
 8001758:	40004800 	.word	0x40004800
 800175c:	40010c00 	.word	0x40010c00

08001760 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001760:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001762:	e003      	b.n	800176c <LoopCopyDataInit>

08001764 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001766:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001768:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800176a:	3104      	adds	r1, #4

0800176c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800176c:	480a      	ldr	r0, [pc, #40]	; (8001798 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800176e:	4b0b      	ldr	r3, [pc, #44]	; (800179c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001770:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001772:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001774:	d3f6      	bcc.n	8001764 <CopyDataInit>
  ldr r2, =_sbss
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001778:	e002      	b.n	8001780 <LoopFillZerobss>

0800177a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800177c:	f842 3b04 	str.w	r3, [r2], #4

08001780 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001782:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001784:	d3f9      	bcc.n	800177a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001786:	f7ff fdd1 	bl	800132c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800178a:	f004 fb83 	bl	8005e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800178e:	f7fe fe71 	bl	8000474 <main>
  bx lr
 8001792:	4770      	bx	lr
  ldr r3, =_sidata
 8001794:	08005f38 	.word	0x08005f38
  ldr r0, =_sdata
 8001798:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800179c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80017a0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80017a4:	20000d10 	.word	0x20000d10

080017a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017a8:	e7fe      	b.n	80017a8 <ADC1_2_IRQHandler>
	...

080017ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b0:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <HAL_Init+0x28>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a07      	ldr	r2, [pc, #28]	; (80017d4 <HAL_Init+0x28>)
 80017b6:	f043 0310 	orr.w	r3, r3, #16
 80017ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017bc:	2003      	movs	r0, #3
 80017be:	f000 fb4f 	bl	8001e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017c2:	2000      	movs	r0, #0
 80017c4:	f000 f808 	bl	80017d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017c8:	f7ff fd24 	bl	8001214 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40022000 	.word	0x40022000

080017d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_InitTick+0x54>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <HAL_InitTick+0x58>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	4619      	mov	r1, r3
 80017ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80017f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 fb67 	bl	8001eca <HAL_SYSTICK_Config>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e00e      	b.n	8001824 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b0f      	cmp	r3, #15
 800180a:	d80a      	bhi.n	8001822 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800180c:	2200      	movs	r2, #0
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	f04f 30ff 	mov.w	r0, #4294967295
 8001814:	f000 fb2f 	bl	8001e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001818:	4a06      	ldr	r2, [pc, #24]	; (8001834 <HAL_InitTick+0x5c>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800181e:	2300      	movs	r3, #0
 8001820:	e000      	b.n	8001824 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000000 	.word	0x20000000
 8001830:	20000008 	.word	0x20000008
 8001834:	20000004 	.word	0x20000004

08001838 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_IncTick+0x1c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4b05      	ldr	r3, [pc, #20]	; (8001858 <HAL_IncTick+0x20>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4413      	add	r3, r2
 8001848:	4a03      	ldr	r2, [pc, #12]	; (8001858 <HAL_IncTick+0x20>)
 800184a:	6013      	str	r3, [r2, #0]
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	20000008 	.word	0x20000008
 8001858:	20000d0c 	.word	0x20000d0c

0800185c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return uwTick;
 8001860:	4b02      	ldr	r3, [pc, #8]	; (800186c <HAL_GetTick+0x10>)
 8001862:	681b      	ldr	r3, [r3, #0]
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	20000d0c 	.word	0x20000d0c

08001870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001878:	f7ff fff0 	bl	800185c <HAL_GetTick>
 800187c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001888:	d005      	beq.n	8001896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_Delay+0x40>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	461a      	mov	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4413      	add	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001896:	bf00      	nop
 8001898:	f7ff ffe0 	bl	800185c <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d8f7      	bhi.n	8001898 <HAL_Delay+0x28>
  {
  }
}
 80018a8:	bf00      	nop
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000008 	.word	0x20000008

080018b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018bc:	2300      	movs	r3, #0
 80018be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e0be      	b.n	8001a54 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d109      	bne.n	80018f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7fe fc68 	bl	80001c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 f9ab 	bl	8001c54 <ADC_ConversionStop_Disable>
 80018fe:	4603      	mov	r3, r0
 8001900:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	2b00      	cmp	r3, #0
 800190c:	f040 8099 	bne.w	8001a42 <HAL_ADC_Init+0x18e>
 8001910:	7dfb      	ldrb	r3, [r7, #23]
 8001912:	2b00      	cmp	r3, #0
 8001914:	f040 8095 	bne.w	8001a42 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001920:	f023 0302 	bic.w	r3, r3, #2
 8001924:	f043 0202 	orr.w	r2, r3, #2
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001934:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	7b1b      	ldrb	r3, [r3, #12]
 800193a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800193c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	4313      	orrs	r3, r2
 8001942:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800194c:	d003      	beq.n	8001956 <HAL_ADC_Init+0xa2>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d102      	bne.n	800195c <HAL_ADC_Init+0xa8>
 8001956:	f44f 7380 	mov.w	r3, #256	; 0x100
 800195a:	e000      	b.n	800195e <HAL_ADC_Init+0xaa>
 800195c:	2300      	movs	r3, #0
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4313      	orrs	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	7d1b      	ldrb	r3, [r3, #20]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d119      	bne.n	80019a0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	7b1b      	ldrb	r3, [r3, #12]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d109      	bne.n	8001988 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	3b01      	subs	r3, #1
 800197a:	035a      	lsls	r2, r3, #13
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	e00b      	b.n	80019a0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198c:	f043 0220 	orr.w	r2, r3, #32
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001998:	f043 0201 	orr.w	r2, r3, #1
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <HAL_ADC_Init+0x1a8>)
 80019bc:	4013      	ands	r3, r2
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	68b9      	ldr	r1, [r7, #8]
 80019c4:	430b      	orrs	r3, r1
 80019c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019d0:	d003      	beq.n	80019da <HAL_ADC_Init+0x126>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d104      	bne.n	80019e4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	3b01      	subs	r3, #1
 80019e0:	051b      	lsls	r3, r3, #20
 80019e2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <HAL_ADC_Init+0x1ac>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d10b      	bne.n	8001a20 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a12:	f023 0303 	bic.w	r3, r3, #3
 8001a16:	f043 0201 	orr.w	r2, r3, #1
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a1e:	e018      	b.n	8001a52 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a24:	f023 0312 	bic.w	r3, r3, #18
 8001a28:	f043 0210 	orr.w	r2, r3, #16
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a34:	f043 0201 	orr.w	r2, r3, #1
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a40:	e007      	b.n	8001a52 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a46:	f043 0210 	orr.w	r2, r3, #16
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	ffe1f7fd 	.word	0xffe1f7fd
 8001a60:	ff1f0efe 	.word	0xff1f0efe

08001a64 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <HAL_ADC_ConfigChannel+0x20>
 8001a80:	2302      	movs	r3, #2
 8001a82:	e0dc      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x1da>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b06      	cmp	r3, #6
 8001a92:	d81c      	bhi.n	8001ace <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3b05      	subs	r3, #5
 8001aa6:	221f      	movs	r2, #31
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	4019      	ands	r1, r3
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	6818      	ldr	r0, [r3, #0]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	3b05      	subs	r3, #5
 8001ac0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	635a      	str	r2, [r3, #52]	; 0x34
 8001acc:	e03c      	b.n	8001b48 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b0c      	cmp	r3, #12
 8001ad4:	d81c      	bhi.n	8001b10 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	3b23      	subs	r3, #35	; 0x23
 8001ae8:	221f      	movs	r2, #31
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	4019      	ands	r1, r3
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	6818      	ldr	r0, [r3, #0]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	3b23      	subs	r3, #35	; 0x23
 8001b02:	fa00 f203 	lsl.w	r2, r0, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	631a      	str	r2, [r3, #48]	; 0x30
 8001b0e:	e01b      	b.n	8001b48 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	3b41      	subs	r3, #65	; 0x41
 8001b22:	221f      	movs	r2, #31
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	4019      	ands	r1, r3
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	6818      	ldr	r0, [r3, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	3b41      	subs	r3, #65	; 0x41
 8001b3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b09      	cmp	r3, #9
 8001b4e:	d91c      	bls.n	8001b8a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68d9      	ldr	r1, [r3, #12]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4413      	add	r3, r2
 8001b60:	3b1e      	subs	r3, #30
 8001b62:	2207      	movs	r2, #7
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	4019      	ands	r1, r3
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	6898      	ldr	r0, [r3, #8]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4613      	mov	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	4413      	add	r3, r2
 8001b7a:	3b1e      	subs	r3, #30
 8001b7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	430a      	orrs	r2, r1
 8001b86:	60da      	str	r2, [r3, #12]
 8001b88:	e019      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6919      	ldr	r1, [r3, #16]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4613      	mov	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4413      	add	r3, r2
 8001b9a:	2207      	movs	r2, #7
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	4019      	ands	r1, r3
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	6898      	ldr	r0, [r3, #8]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b10      	cmp	r3, #16
 8001bc4:	d003      	beq.n	8001bce <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bca:	2b11      	cmp	r3, #17
 8001bcc:	d132      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a1d      	ldr	r2, [pc, #116]	; (8001c48 <HAL_ADC_ConfigChannel+0x1e4>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d125      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d126      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001bf4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2b10      	cmp	r3, #16
 8001bfc:	d11a      	bne.n	8001c34 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bfe:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <HAL_ADC_ConfigChannel+0x1e8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a13      	ldr	r2, [pc, #76]	; (8001c50 <HAL_ADC_ConfigChannel+0x1ec>)
 8001c04:	fba2 2303 	umull	r2, r3, r2, r3
 8001c08:	0c9a      	lsrs	r2, r3, #18
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c14:	e002      	b.n	8001c1c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f9      	bne.n	8001c16 <HAL_ADC_ConfigChannel+0x1b2>
 8001c22:	e007      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c28:	f043 0220 	orr.w	r2, r3, #32
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr
 8001c48:	40012400 	.word	0x40012400
 8001c4c:	20000000 	.word	0x20000000
 8001c50:	431bde83 	.word	0x431bde83

08001c54 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d127      	bne.n	8001cbe <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 0201 	bic.w	r2, r2, #1
 8001c7c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c7e:	f7ff fded 	bl	800185c <HAL_GetTick>
 8001c82:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c84:	e014      	b.n	8001cb0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c86:	f7ff fde9 	bl	800185c <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d90d      	bls.n	8001cb0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c98:	f043 0210 	orr.w	r2, r3, #16
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca4:	f043 0201 	orr.w	r2, r3, #1
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e007      	b.n	8001cc0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d0e3      	beq.n	8001c86 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <__NVIC_SetPriorityGrouping+0x44>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfa:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <__NVIC_SetPriorityGrouping+0x44>)
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	60d3      	str	r3, [r2, #12]
}
 8001d00:	bf00      	nop
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d14:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <__NVIC_GetPriorityGrouping+0x18>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	0a1b      	lsrs	r3, r3, #8
 8001d1a:	f003 0307 	and.w	r3, r3, #7
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	db0b      	blt.n	8001d56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	f003 021f 	and.w	r2, r3, #31
 8001d44:	4906      	ldr	r1, [pc, #24]	; (8001d60 <__NVIC_EnableIRQ+0x34>)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	095b      	lsrs	r3, r3, #5
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr
 8001d60:	e000e100 	.word	0xe000e100

08001d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	6039      	str	r1, [r7, #0]
 8001d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	db0a      	blt.n	8001d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	490c      	ldr	r1, [pc, #48]	; (8001db0 <__NVIC_SetPriority+0x4c>)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	0112      	lsls	r2, r2, #4
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	440b      	add	r3, r1
 8001d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d8c:	e00a      	b.n	8001da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4908      	ldr	r1, [pc, #32]	; (8001db4 <__NVIC_SetPriority+0x50>)
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	3b04      	subs	r3, #4
 8001d9c:	0112      	lsls	r2, r2, #4
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	440b      	add	r3, r1
 8001da2:	761a      	strb	r2, [r3, #24]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000e100 	.word	0xe000e100
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b089      	sub	sp, #36	; 0x24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f1c3 0307 	rsb	r3, r3, #7
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	bf28      	it	cs
 8001dd6:	2304      	movcs	r3, #4
 8001dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	2b06      	cmp	r3, #6
 8001de0:	d902      	bls.n	8001de8 <NVIC_EncodePriority+0x30>
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3b03      	subs	r3, #3
 8001de6:	e000      	b.n	8001dea <NVIC_EncodePriority+0x32>
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	f04f 32ff 	mov.w	r2, #4294967295
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43da      	mvns	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e00:	f04f 31ff 	mov.w	r1, #4294967295
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0a:	43d9      	mvns	r1, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	4313      	orrs	r3, r2
         );
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3724      	adds	r7, #36	; 0x24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e2c:	d301      	bcc.n	8001e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e00f      	b.n	8001e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e32:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <SysTick_Config+0x40>)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e3a:	210f      	movs	r1, #15
 8001e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e40:	f7ff ff90 	bl	8001d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <SysTick_Config+0x40>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e4a:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <SysTick_Config+0x40>)
 8001e4c:	2207      	movs	r2, #7
 8001e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	e000e010 	.word	0xe000e010

08001e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff ff2d 	bl	8001cc8 <__NVIC_SetPriorityGrouping>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b086      	sub	sp, #24
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	607a      	str	r2, [r7, #4]
 8001e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e88:	f7ff ff42 	bl	8001d10 <__NVIC_GetPriorityGrouping>
 8001e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	68b9      	ldr	r1, [r7, #8]
 8001e92:	6978      	ldr	r0, [r7, #20]
 8001e94:	f7ff ff90 	bl	8001db8 <NVIC_EncodePriority>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff5f 	bl	8001d64 <__NVIC_SetPriority>
}
 8001ea6:	bf00      	nop
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff ff35 	bl	8001d2c <__NVIC_EnableIRQ>
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff ffa2 	bl	8001e1c <SysTick_Config>
 8001ed8:	4603      	mov	r3, r0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
	...

08001ee4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e043      	b.n	8001f82 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	4b22      	ldr	r3, [pc, #136]	; (8001f8c <HAL_DMA_Init+0xa8>)
 8001f02:	4413      	add	r3, r2
 8001f04:	4a22      	ldr	r2, [pc, #136]	; (8001f90 <HAL_DMA_Init+0xac>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	091b      	lsrs	r3, r3, #4
 8001f0c:	009a      	lsls	r2, r3, #2
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a1f      	ldr	r2, [pc, #124]	; (8001f94 <HAL_DMA_Init+0xb0>)
 8001f16:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f2e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	bffdfff8 	.word	0xbffdfff8
 8001f90:	cccccccd 	.word	0xcccccccd
 8001f94:	40020000 	.word	0x40020000

08001f98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d005      	beq.n	8001fba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2204      	movs	r2, #4
 8001fb2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
 8001fb8:	e051      	b.n	800205e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 020e 	bic.w	r2, r2, #14
 8001fc8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0201 	bic.w	r2, r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a22      	ldr	r2, [pc, #136]	; (8002068 <HAL_DMA_Abort_IT+0xd0>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d029      	beq.n	8002038 <HAL_DMA_Abort_IT+0xa0>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a20      	ldr	r2, [pc, #128]	; (800206c <HAL_DMA_Abort_IT+0xd4>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d022      	beq.n	8002034 <HAL_DMA_Abort_IT+0x9c>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a1f      	ldr	r2, [pc, #124]	; (8002070 <HAL_DMA_Abort_IT+0xd8>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d01a      	beq.n	800202e <HAL_DMA_Abort_IT+0x96>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a1d      	ldr	r2, [pc, #116]	; (8002074 <HAL_DMA_Abort_IT+0xdc>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d012      	beq.n	8002028 <HAL_DMA_Abort_IT+0x90>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a1c      	ldr	r2, [pc, #112]	; (8002078 <HAL_DMA_Abort_IT+0xe0>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d00a      	beq.n	8002022 <HAL_DMA_Abort_IT+0x8a>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a1a      	ldr	r2, [pc, #104]	; (800207c <HAL_DMA_Abort_IT+0xe4>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d102      	bne.n	800201c <HAL_DMA_Abort_IT+0x84>
 8002016:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800201a:	e00e      	b.n	800203a <HAL_DMA_Abort_IT+0xa2>
 800201c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002020:	e00b      	b.n	800203a <HAL_DMA_Abort_IT+0xa2>
 8002022:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002026:	e008      	b.n	800203a <HAL_DMA_Abort_IT+0xa2>
 8002028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800202c:	e005      	b.n	800203a <HAL_DMA_Abort_IT+0xa2>
 800202e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002032:	e002      	b.n	800203a <HAL_DMA_Abort_IT+0xa2>
 8002034:	2310      	movs	r3, #16
 8002036:	e000      	b.n	800203a <HAL_DMA_Abort_IT+0xa2>
 8002038:	2301      	movs	r3, #1
 800203a:	4a11      	ldr	r2, [pc, #68]	; (8002080 <HAL_DMA_Abort_IT+0xe8>)
 800203c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	4798      	blx	r3
    } 
  }
  return status;
 800205e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40020008 	.word	0x40020008
 800206c:	4002001c 	.word	0x4002001c
 8002070:	40020030 	.word	0x40020030
 8002074:	40020044 	.word	0x40020044
 8002078:	40020058 	.word	0x40020058
 800207c:	4002006c 	.word	0x4002006c
 8002080:	40020000 	.word	0x40020000

08002084 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	2204      	movs	r2, #4
 80020a2:	409a      	lsls	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d04f      	beq.n	800214c <HAL_DMA_IRQHandler+0xc8>
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d04a      	beq.n	800214c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0320 	and.w	r3, r3, #32
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d107      	bne.n	80020d4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0204 	bic.w	r2, r2, #4
 80020d2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a66      	ldr	r2, [pc, #408]	; (8002274 <HAL_DMA_IRQHandler+0x1f0>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d029      	beq.n	8002132 <HAL_DMA_IRQHandler+0xae>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a65      	ldr	r2, [pc, #404]	; (8002278 <HAL_DMA_IRQHandler+0x1f4>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d022      	beq.n	800212e <HAL_DMA_IRQHandler+0xaa>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a63      	ldr	r2, [pc, #396]	; (800227c <HAL_DMA_IRQHandler+0x1f8>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d01a      	beq.n	8002128 <HAL_DMA_IRQHandler+0xa4>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a62      	ldr	r2, [pc, #392]	; (8002280 <HAL_DMA_IRQHandler+0x1fc>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d012      	beq.n	8002122 <HAL_DMA_IRQHandler+0x9e>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a60      	ldr	r2, [pc, #384]	; (8002284 <HAL_DMA_IRQHandler+0x200>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d00a      	beq.n	800211c <HAL_DMA_IRQHandler+0x98>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a5f      	ldr	r2, [pc, #380]	; (8002288 <HAL_DMA_IRQHandler+0x204>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d102      	bne.n	8002116 <HAL_DMA_IRQHandler+0x92>
 8002110:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002114:	e00e      	b.n	8002134 <HAL_DMA_IRQHandler+0xb0>
 8002116:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800211a:	e00b      	b.n	8002134 <HAL_DMA_IRQHandler+0xb0>
 800211c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002120:	e008      	b.n	8002134 <HAL_DMA_IRQHandler+0xb0>
 8002122:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002126:	e005      	b.n	8002134 <HAL_DMA_IRQHandler+0xb0>
 8002128:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800212c:	e002      	b.n	8002134 <HAL_DMA_IRQHandler+0xb0>
 800212e:	2340      	movs	r3, #64	; 0x40
 8002130:	e000      	b.n	8002134 <HAL_DMA_IRQHandler+0xb0>
 8002132:	2304      	movs	r3, #4
 8002134:	4a55      	ldr	r2, [pc, #340]	; (800228c <HAL_DMA_IRQHandler+0x208>)
 8002136:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 8094 	beq.w	800226a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800214a:	e08e      	b.n	800226a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	2202      	movs	r2, #2
 8002152:	409a      	lsls	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4013      	ands	r3, r2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d056      	beq.n	800220a <HAL_DMA_IRQHandler+0x186>
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d051      	beq.n	800220a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0320 	and.w	r3, r3, #32
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10b      	bne.n	800218c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 020a 	bic.w	r2, r2, #10
 8002182:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a38      	ldr	r2, [pc, #224]	; (8002274 <HAL_DMA_IRQHandler+0x1f0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d029      	beq.n	80021ea <HAL_DMA_IRQHandler+0x166>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a37      	ldr	r2, [pc, #220]	; (8002278 <HAL_DMA_IRQHandler+0x1f4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d022      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x162>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a35      	ldr	r2, [pc, #212]	; (800227c <HAL_DMA_IRQHandler+0x1f8>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d01a      	beq.n	80021e0 <HAL_DMA_IRQHandler+0x15c>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a34      	ldr	r2, [pc, #208]	; (8002280 <HAL_DMA_IRQHandler+0x1fc>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d012      	beq.n	80021da <HAL_DMA_IRQHandler+0x156>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a32      	ldr	r2, [pc, #200]	; (8002284 <HAL_DMA_IRQHandler+0x200>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d00a      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x150>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a31      	ldr	r2, [pc, #196]	; (8002288 <HAL_DMA_IRQHandler+0x204>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d102      	bne.n	80021ce <HAL_DMA_IRQHandler+0x14a>
 80021c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021cc:	e00e      	b.n	80021ec <HAL_DMA_IRQHandler+0x168>
 80021ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021d2:	e00b      	b.n	80021ec <HAL_DMA_IRQHandler+0x168>
 80021d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021d8:	e008      	b.n	80021ec <HAL_DMA_IRQHandler+0x168>
 80021da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021de:	e005      	b.n	80021ec <HAL_DMA_IRQHandler+0x168>
 80021e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021e4:	e002      	b.n	80021ec <HAL_DMA_IRQHandler+0x168>
 80021e6:	2320      	movs	r3, #32
 80021e8:	e000      	b.n	80021ec <HAL_DMA_IRQHandler+0x168>
 80021ea:	2302      	movs	r3, #2
 80021ec:	4a27      	ldr	r2, [pc, #156]	; (800228c <HAL_DMA_IRQHandler+0x208>)
 80021ee:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d034      	beq.n	800226a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002208:	e02f      	b.n	800226a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	2208      	movs	r2, #8
 8002210:	409a      	lsls	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4013      	ands	r3, r2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d028      	beq.n	800226c <HAL_DMA_IRQHandler+0x1e8>
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	f003 0308 	and.w	r3, r3, #8
 8002220:	2b00      	cmp	r3, #0
 8002222:	d023      	beq.n	800226c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 020e 	bic.w	r2, r2, #14
 8002232:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223c:	2101      	movs	r1, #1
 800223e:	fa01 f202 	lsl.w	r2, r1, r2
 8002242:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	2b00      	cmp	r3, #0
 8002260:	d004      	beq.n	800226c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	4798      	blx	r3
    }
  }
  return;
 800226a:	bf00      	nop
 800226c:	bf00      	nop
}
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40020008 	.word	0x40020008
 8002278:	4002001c 	.word	0x4002001c
 800227c:	40020030 	.word	0x40020030
 8002280:	40020044 	.word	0x40020044
 8002284:	40020058 	.word	0x40020058
 8002288:	4002006c 	.word	0x4002006c
 800228c:	40020000 	.word	0x40020000

08002290 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800229e:	4618      	mov	r0, r3
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b08b      	sub	sp, #44	; 0x2c
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022b2:	2300      	movs	r3, #0
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022b6:	2300      	movs	r3, #0
 80022b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ba:	e127      	b.n	800250c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022bc:	2201      	movs	r2, #1
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	69fa      	ldr	r2, [r7, #28]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	f040 8116 	bne.w	8002506 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b12      	cmp	r3, #18
 80022e0:	d034      	beq.n	800234c <HAL_GPIO_Init+0xa4>
 80022e2:	2b12      	cmp	r3, #18
 80022e4:	d80d      	bhi.n	8002302 <HAL_GPIO_Init+0x5a>
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d02b      	beq.n	8002342 <HAL_GPIO_Init+0x9a>
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d804      	bhi.n	80022f8 <HAL_GPIO_Init+0x50>
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d031      	beq.n	8002356 <HAL_GPIO_Init+0xae>
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d01c      	beq.n	8002330 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022f6:	e048      	b.n	800238a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80022f8:	2b03      	cmp	r3, #3
 80022fa:	d043      	beq.n	8002384 <HAL_GPIO_Init+0xdc>
 80022fc:	2b11      	cmp	r3, #17
 80022fe:	d01b      	beq.n	8002338 <HAL_GPIO_Init+0x90>
          break;
 8002300:	e043      	b.n	800238a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002302:	4a89      	ldr	r2, [pc, #548]	; (8002528 <HAL_GPIO_Init+0x280>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d026      	beq.n	8002356 <HAL_GPIO_Init+0xae>
 8002308:	4a87      	ldr	r2, [pc, #540]	; (8002528 <HAL_GPIO_Init+0x280>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d806      	bhi.n	800231c <HAL_GPIO_Init+0x74>
 800230e:	4a87      	ldr	r2, [pc, #540]	; (800252c <HAL_GPIO_Init+0x284>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d020      	beq.n	8002356 <HAL_GPIO_Init+0xae>
 8002314:	4a86      	ldr	r2, [pc, #536]	; (8002530 <HAL_GPIO_Init+0x288>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d01d      	beq.n	8002356 <HAL_GPIO_Init+0xae>
          break;
 800231a:	e036      	b.n	800238a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800231c:	4a85      	ldr	r2, [pc, #532]	; (8002534 <HAL_GPIO_Init+0x28c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d019      	beq.n	8002356 <HAL_GPIO_Init+0xae>
 8002322:	4a85      	ldr	r2, [pc, #532]	; (8002538 <HAL_GPIO_Init+0x290>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d016      	beq.n	8002356 <HAL_GPIO_Init+0xae>
 8002328:	4a84      	ldr	r2, [pc, #528]	; (800253c <HAL_GPIO_Init+0x294>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d013      	beq.n	8002356 <HAL_GPIO_Init+0xae>
          break;
 800232e:	e02c      	b.n	800238a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	623b      	str	r3, [r7, #32]
          break;
 8002336:	e028      	b.n	800238a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	3304      	adds	r3, #4
 800233e:	623b      	str	r3, [r7, #32]
          break;
 8002340:	e023      	b.n	800238a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	3308      	adds	r3, #8
 8002348:	623b      	str	r3, [r7, #32]
          break;
 800234a:	e01e      	b.n	800238a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	330c      	adds	r3, #12
 8002352:	623b      	str	r3, [r7, #32]
          break;
 8002354:	e019      	b.n	800238a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d102      	bne.n	8002364 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800235e:	2304      	movs	r3, #4
 8002360:	623b      	str	r3, [r7, #32]
          break;
 8002362:	e012      	b.n	800238a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d105      	bne.n	8002378 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800236c:	2308      	movs	r3, #8
 800236e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69fa      	ldr	r2, [r7, #28]
 8002374:	611a      	str	r2, [r3, #16]
          break;
 8002376:	e008      	b.n	800238a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002378:	2308      	movs	r3, #8
 800237a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69fa      	ldr	r2, [r7, #28]
 8002380:	615a      	str	r2, [r3, #20]
          break;
 8002382:	e002      	b.n	800238a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002384:	2300      	movs	r3, #0
 8002386:	623b      	str	r3, [r7, #32]
          break;
 8002388:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	2bff      	cmp	r3, #255	; 0xff
 800238e:	d801      	bhi.n	8002394 <HAL_GPIO_Init+0xec>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	e001      	b.n	8002398 <HAL_GPIO_Init+0xf0>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3304      	adds	r3, #4
 8002398:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	2bff      	cmp	r3, #255	; 0xff
 800239e:	d802      	bhi.n	80023a6 <HAL_GPIO_Init+0xfe>
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	e002      	b.n	80023ac <HAL_GPIO_Init+0x104>
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	3b08      	subs	r3, #8
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	210f      	movs	r1, #15
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	401a      	ands	r2, r3
 80023be:	6a39      	ldr	r1, [r7, #32]
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	fa01 f303 	lsl.w	r3, r1, r3
 80023c6:	431a      	orrs	r2, r3
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 8096 	beq.w	8002506 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023da:	4b59      	ldr	r3, [pc, #356]	; (8002540 <HAL_GPIO_Init+0x298>)
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	4a58      	ldr	r2, [pc, #352]	; (8002540 <HAL_GPIO_Init+0x298>)
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	6193      	str	r3, [r2, #24]
 80023e6:	4b56      	ldr	r3, [pc, #344]	; (8002540 <HAL_GPIO_Init+0x298>)
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023f2:	4a54      	ldr	r2, [pc, #336]	; (8002544 <HAL_GPIO_Init+0x29c>)
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	089b      	lsrs	r3, r3, #2
 80023f8:	3302      	adds	r3, #2
 80023fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023fe:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	220f      	movs	r2, #15
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	4013      	ands	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a4b      	ldr	r2, [pc, #300]	; (8002548 <HAL_GPIO_Init+0x2a0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d013      	beq.n	8002446 <HAL_GPIO_Init+0x19e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a4a      	ldr	r2, [pc, #296]	; (800254c <HAL_GPIO_Init+0x2a4>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d00d      	beq.n	8002442 <HAL_GPIO_Init+0x19a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a49      	ldr	r2, [pc, #292]	; (8002550 <HAL_GPIO_Init+0x2a8>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d007      	beq.n	800243e <HAL_GPIO_Init+0x196>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a48      	ldr	r2, [pc, #288]	; (8002554 <HAL_GPIO_Init+0x2ac>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d101      	bne.n	800243a <HAL_GPIO_Init+0x192>
 8002436:	2303      	movs	r3, #3
 8002438:	e006      	b.n	8002448 <HAL_GPIO_Init+0x1a0>
 800243a:	2304      	movs	r3, #4
 800243c:	e004      	b.n	8002448 <HAL_GPIO_Init+0x1a0>
 800243e:	2302      	movs	r3, #2
 8002440:	e002      	b.n	8002448 <HAL_GPIO_Init+0x1a0>
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <HAL_GPIO_Init+0x1a0>
 8002446:	2300      	movs	r3, #0
 8002448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800244a:	f002 0203 	and.w	r2, r2, #3
 800244e:	0092      	lsls	r2, r2, #2
 8002450:	4093      	lsls	r3, r2
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	4313      	orrs	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002458:	493a      	ldr	r1, [pc, #232]	; (8002544 <HAL_GPIO_Init+0x29c>)
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	089b      	lsrs	r3, r3, #2
 800245e:	3302      	adds	r3, #2
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d006      	beq.n	8002480 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002472:	4b39      	ldr	r3, [pc, #228]	; (8002558 <HAL_GPIO_Init+0x2b0>)
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	4938      	ldr	r1, [pc, #224]	; (8002558 <HAL_GPIO_Init+0x2b0>)
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	4313      	orrs	r3, r2
 800247c:	600b      	str	r3, [r1, #0]
 800247e:	e006      	b.n	800248e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002480:	4b35      	ldr	r3, [pc, #212]	; (8002558 <HAL_GPIO_Init+0x2b0>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	43db      	mvns	r3, r3
 8002488:	4933      	ldr	r1, [pc, #204]	; (8002558 <HAL_GPIO_Init+0x2b0>)
 800248a:	4013      	ands	r3, r2
 800248c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d006      	beq.n	80024a8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800249a:	4b2f      	ldr	r3, [pc, #188]	; (8002558 <HAL_GPIO_Init+0x2b0>)
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	492e      	ldr	r1, [pc, #184]	; (8002558 <HAL_GPIO_Init+0x2b0>)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	604b      	str	r3, [r1, #4]
 80024a6:	e006      	b.n	80024b6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024a8:	4b2b      	ldr	r3, [pc, #172]	; (8002558 <HAL_GPIO_Init+0x2b0>)
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	43db      	mvns	r3, r3
 80024b0:	4929      	ldr	r1, [pc, #164]	; (8002558 <HAL_GPIO_Init+0x2b0>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d006      	beq.n	80024d0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024c2:	4b25      	ldr	r3, [pc, #148]	; (8002558 <HAL_GPIO_Init+0x2b0>)
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	4924      	ldr	r1, [pc, #144]	; (8002558 <HAL_GPIO_Init+0x2b0>)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	608b      	str	r3, [r1, #8]
 80024ce:	e006      	b.n	80024de <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024d0:	4b21      	ldr	r3, [pc, #132]	; (8002558 <HAL_GPIO_Init+0x2b0>)
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	43db      	mvns	r3, r3
 80024d8:	491f      	ldr	r1, [pc, #124]	; (8002558 <HAL_GPIO_Init+0x2b0>)
 80024da:	4013      	ands	r3, r2
 80024dc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d006      	beq.n	80024f8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024ea:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <HAL_GPIO_Init+0x2b0>)
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	491a      	ldr	r1, [pc, #104]	; (8002558 <HAL_GPIO_Init+0x2b0>)
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	60cb      	str	r3, [r1, #12]
 80024f6:	e006      	b.n	8002506 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024f8:	4b17      	ldr	r3, [pc, #92]	; (8002558 <HAL_GPIO_Init+0x2b0>)
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	43db      	mvns	r3, r3
 8002500:	4915      	ldr	r1, [pc, #84]	; (8002558 <HAL_GPIO_Init+0x2b0>)
 8002502:	4013      	ands	r3, r2
 8002504:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	3301      	adds	r3, #1
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	fa22 f303 	lsr.w	r3, r2, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	f47f aed0 	bne.w	80022bc <HAL_GPIO_Init+0x14>
  }
}
 800251c:	bf00      	nop
 800251e:	372c      	adds	r7, #44	; 0x2c
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	10210000 	.word	0x10210000
 800252c:	10110000 	.word	0x10110000
 8002530:	10120000 	.word	0x10120000
 8002534:	10310000 	.word	0x10310000
 8002538:	10320000 	.word	0x10320000
 800253c:	10220000 	.word	0x10220000
 8002540:	40021000 	.word	0x40021000
 8002544:	40010000 	.word	0x40010000
 8002548:	40010800 	.word	0x40010800
 800254c:	40010c00 	.word	0x40010c00
 8002550:	40011000 	.word	0x40011000
 8002554:	40011400 	.word	0x40011400
 8002558:	40010400 	.word	0x40010400

0800255c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	807b      	strh	r3, [r7, #2]
 8002568:	4613      	mov	r3, r2
 800256a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800256c:	787b      	ldrb	r3, [r7, #1]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002572:	887a      	ldrh	r2, [r7, #2]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002578:	e003      	b.n	8002582 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800257a:	887b      	ldrh	r3, [r7, #2]
 800257c:	041a      	lsls	r2, r3, #16
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	611a      	str	r2, [r3, #16]
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr

0800258c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	887b      	ldrh	r3, [r7, #2]
 800259e:	4013      	ands	r3, r2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025a4:	887a      	ldrh	r2, [r7, #2]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80025aa:	e002      	b.n	80025b2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025ac:	887a      	ldrh	r2, [r7, #2]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	611a      	str	r2, [r3, #16]
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr

080025bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025c6:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025c8:	695a      	ldr	r2, [r3, #20]
 80025ca:	88fb      	ldrh	r3, [r7, #6]
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d006      	beq.n	80025e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025d2:	4a05      	ldr	r2, [pc, #20]	; (80025e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025d4:	88fb      	ldrh	r3, [r7, #6]
 80025d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025d8:	88fb      	ldrh	r3, [r7, #6]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fe fa3a 	bl	8000a54 <HAL_GPIO_EXTI_Callback>
  }
}
 80025e0:	bf00      	nop
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40010400 	.word	0x40010400

080025ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e10f      	b.n	800281e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d106      	bne.n	8002618 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7fd fee8 	bl	80003e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2224      	movs	r2, #36	; 0x24
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0201 	bic.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002630:	f002 f9cc 	bl	80049cc <HAL_RCC_GetPCLK1Freq>
 8002634:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	4a7b      	ldr	r2, [pc, #492]	; (8002828 <HAL_I2C_Init+0x23c>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d807      	bhi.n	8002650 <HAL_I2C_Init+0x64>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4a7a      	ldr	r2, [pc, #488]	; (800282c <HAL_I2C_Init+0x240>)
 8002644:	4293      	cmp	r3, r2
 8002646:	bf94      	ite	ls
 8002648:	2301      	movls	r3, #1
 800264a:	2300      	movhi	r3, #0
 800264c:	b2db      	uxtb	r3, r3
 800264e:	e006      	b.n	800265e <HAL_I2C_Init+0x72>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4a77      	ldr	r2, [pc, #476]	; (8002830 <HAL_I2C_Init+0x244>)
 8002654:	4293      	cmp	r3, r2
 8002656:	bf94      	ite	ls
 8002658:	2301      	movls	r3, #1
 800265a:	2300      	movhi	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e0db      	b.n	800281e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4a72      	ldr	r2, [pc, #456]	; (8002834 <HAL_I2C_Init+0x248>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	0c9b      	lsrs	r3, r3, #18
 8002670:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	430a      	orrs	r2, r1
 8002684:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4a64      	ldr	r2, [pc, #400]	; (8002828 <HAL_I2C_Init+0x23c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d802      	bhi.n	80026a0 <HAL_I2C_Init+0xb4>
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	3301      	adds	r3, #1
 800269e:	e009      	b.n	80026b4 <HAL_I2C_Init+0xc8>
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026a6:	fb02 f303 	mul.w	r3, r2, r3
 80026aa:	4a63      	ldr	r2, [pc, #396]	; (8002838 <HAL_I2C_Init+0x24c>)
 80026ac:	fba2 2303 	umull	r2, r3, r2, r3
 80026b0:	099b      	lsrs	r3, r3, #6
 80026b2:	3301      	adds	r3, #1
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6812      	ldr	r2, [r2, #0]
 80026b8:	430b      	orrs	r3, r1
 80026ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	4956      	ldr	r1, [pc, #344]	; (8002828 <HAL_I2C_Init+0x23c>)
 80026d0:	428b      	cmp	r3, r1
 80026d2:	d80d      	bhi.n	80026f0 <HAL_I2C_Init+0x104>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	1e59      	subs	r1, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	fbb1 f3f3 	udiv	r3, r1, r3
 80026e2:	3301      	adds	r3, #1
 80026e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	bf38      	it	cc
 80026ec:	2304      	movcc	r3, #4
 80026ee:	e04f      	b.n	8002790 <HAL_I2C_Init+0x1a4>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d111      	bne.n	800271c <HAL_I2C_Init+0x130>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	1e58      	subs	r0, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6859      	ldr	r1, [r3, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	440b      	add	r3, r1
 8002706:	fbb0 f3f3 	udiv	r3, r0, r3
 800270a:	3301      	adds	r3, #1
 800270c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002710:	2b00      	cmp	r3, #0
 8002712:	bf0c      	ite	eq
 8002714:	2301      	moveq	r3, #1
 8002716:	2300      	movne	r3, #0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	e012      	b.n	8002742 <HAL_I2C_Init+0x156>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	1e58      	subs	r0, r3, #1
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6859      	ldr	r1, [r3, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	0099      	lsls	r1, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002732:	3301      	adds	r3, #1
 8002734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002738:	2b00      	cmp	r3, #0
 800273a:	bf0c      	ite	eq
 800273c:	2301      	moveq	r3, #1
 800273e:	2300      	movne	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_I2C_Init+0x15e>
 8002746:	2301      	movs	r3, #1
 8002748:	e022      	b.n	8002790 <HAL_I2C_Init+0x1a4>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10e      	bne.n	8002770 <HAL_I2C_Init+0x184>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	1e58      	subs	r0, r3, #1
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6859      	ldr	r1, [r3, #4]
 800275a:	460b      	mov	r3, r1
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	440b      	add	r3, r1
 8002760:	fbb0 f3f3 	udiv	r3, r0, r3
 8002764:	3301      	adds	r3, #1
 8002766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800276a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800276e:	e00f      	b.n	8002790 <HAL_I2C_Init+0x1a4>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	1e58      	subs	r0, r3, #1
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6859      	ldr	r1, [r3, #4]
 8002778:	460b      	mov	r3, r1
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	0099      	lsls	r1, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	fbb0 f3f3 	udiv	r3, r0, r3
 8002786:	3301      	adds	r3, #1
 8002788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800278c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	6809      	ldr	r1, [r1, #0]
 8002794:	4313      	orrs	r3, r2
 8002796:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69da      	ldr	r2, [r3, #28]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6911      	ldr	r1, [r2, #16]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	68d2      	ldr	r2, [r2, #12]
 80027ca:	4311      	orrs	r1, r2
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	430b      	orrs	r3, r1
 80027d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695a      	ldr	r2, [r3, #20]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0201 	orr.w	r2, r2, #1
 80027fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2220      	movs	r2, #32
 800280a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	000186a0 	.word	0x000186a0
 800282c:	001e847f 	.word	0x001e847f
 8002830:	003d08ff 	.word	0x003d08ff
 8002834:	431bde83 	.word	0x431bde83
 8002838:	10624dd3 	.word	0x10624dd3

0800283c <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08a      	sub	sp, #40	; 0x28
 8002840:	af02      	add	r7, sp, #8
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	603b      	str	r3, [r7, #0]
 8002848:	4613      	mov	r3, r2
 800284a:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800284c:	f7ff f806 	bl	800185c <HAL_GetTick>
 8002850:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b20      	cmp	r3, #32
 800285c:	f040 80fb 	bne.w	8002a56 <HAL_I2C_Slave_Transmit+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <HAL_I2C_Slave_Transmit+0x30>
 8002866:	88fb      	ldrh	r3, [r7, #6]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_I2C_Slave_Transmit+0x34>
    {
      return  HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e0f3      	b.n	8002a58 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002876:	2b01      	cmp	r3, #1
 8002878:	d101      	bne.n	800287e <HAL_I2C_Slave_Transmit+0x42>
 800287a:	2302      	movs	r3, #2
 800287c:	e0ec      	b.n	8002a58 <HAL_I2C_Slave_Transmit+0x21c>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b01      	cmp	r3, #1
 8002892:	d007      	beq.n	80028a4 <HAL_I2C_Slave_Transmit+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028b2:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2221      	movs	r2, #33	; 0x21
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	88fa      	ldrh	r2, [r7, #6]
 80028d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028da:	b29a      	uxth	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	4a5f      	ldr	r2, [pc, #380]	; (8002a60 <HAL_I2C_Slave_Transmit+0x224>)
 80028e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028f4:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2200      	movs	r2, #0
 80028fe:	4959      	ldr	r1, [pc, #356]	; (8002a64 <HAL_I2C_Slave_Transmit+0x228>)
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f001 fbaa 	bl	800405a <I2C_WaitOnFlagUntilTimeout>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <HAL_I2C_Slave_Transmit+0xd4>
    {
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0a3      	b.n	8002a58 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002910:	2300      	movs	r3, #0
 8002912:	61bb      	str	r3, [r7, #24]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	61bb      	str	r3, [r7, #24]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	61bb      	str	r3, [r7, #24]
 8002924:	69bb      	ldr	r3, [r7, #24]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800292e:	d165      	bne.n	80029fc <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	2200      	movs	r2, #0
 8002938:	494a      	ldr	r1, [pc, #296]	; (8002a64 <HAL_I2C_Slave_Transmit+0x228>)
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f001 fb8d 	bl	800405a <I2C_WaitOnFlagUntilTimeout>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_I2C_Slave_Transmit+0x10e>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e086      	b.n	8002a58 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002960:	e04c      	b.n	80029fc <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002962:	69fa      	ldr	r2, [r7, #28]
 8002964:	6839      	ldr	r1, [r7, #0]
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f001 fbce 	bl	8004108 <I2C_WaitOnTXEFlagUntilTimeout>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d009      	beq.n	8002986 <HAL_I2C_Slave_Transmit+0x14a>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002980:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e068      	b.n	8002a58 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	781a      	ldrb	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	3b01      	subs	r3, #1
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d11b      	bne.n	80029fc <HAL_I2C_Slave_Transmit+0x1c0>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d017      	beq.n	80029fc <HAL_I2C_Slave_Transmit+0x1c0>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	781a      	ldrb	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1ae      	bne.n	8002962 <HAL_I2C_Slave_Transmit+0x126>
      }
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f44f 3182 	mov.w	r1, #66560	; 0x10400
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f001 fb22 	bl	800405a <I2C_WaitOnFlagUntilTimeout>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <HAL_I2C_Slave_Transmit+0x1e4>
    {
      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e01b      	b.n	8002a58 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a28:	615a      	str	r2, [r3, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a52:	2300      	movs	r3, #0
 8002a54:	e000      	b.n	8002a58 <HAL_I2C_Slave_Transmit+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002a56:	2302      	movs	r3, #2
  }
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3720      	adds	r7, #32
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	ffff0000 	.word	0xffff0000
 8002a64:	00010002 	.word	0x00010002

08002a68 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	4613      	mov	r3, r2
 8002a74:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b20      	cmp	r3, #32
 8002a80:	d158      	bne.n	8002b34 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d002      	beq.n	8002a8e <HAL_I2C_Slave_Receive_IT+0x26>
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e051      	b.n	8002b36 <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d101      	bne.n	8002aa0 <HAL_I2C_Slave_Receive_IT+0x38>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e04a      	b.n	8002b36 <HAL_I2C_Slave_Receive_IT+0xce>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d007      	beq.n	8002ac6 <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f042 0201 	orr.w	r2, r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ad4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2222      	movs	r2, #34	; 0x22
 8002ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	88fa      	ldrh	r2, [r7, #6]
 8002af6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4a0e      	ldr	r2, [pc, #56]	; (8002b40 <HAL_I2C_Slave_Receive_IT+0xd8>)
 8002b06:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b16:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8002b2e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	e000      	b.n	8002b36 <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8002b34:	2302      	movs	r3, #2
  }
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr
 8002b40:	ffff0000 	.word	0xffff0000

08002b44 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b088      	sub	sp, #32
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b64:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b6c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
 8002b70:	2b10      	cmp	r3, #16
 8002b72:	d003      	beq.n	8002b7c <HAL_I2C_EV_IRQHandler+0x38>
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
 8002b76:	2b40      	cmp	r3, #64	; 0x40
 8002b78:	f040 80b6 	bne.w	8002ce8 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10d      	bne.n	8002bb2 <HAL_I2C_EV_IRQHandler+0x6e>
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002b9c:	d003      	beq.n	8002ba6 <HAL_I2C_EV_IRQHandler+0x62>
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002ba4:	d101      	bne.n	8002baa <HAL_I2C_EV_IRQHandler+0x66>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <HAL_I2C_EV_IRQHandler+0x68>
 8002baa:	2300      	movs	r3, #0
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	f000 8127 	beq.w	8002e00 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00c      	beq.n	8002bd6 <HAL_I2C_EV_IRQHandler+0x92>
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	0a5b      	lsrs	r3, r3, #9
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d006      	beq.n	8002bd6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f001 fb0c 	bl	80041e6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 fc44 	bl	800345c <I2C_Master_SB>
 8002bd4:	e087      	b.n	8002ce6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	08db      	lsrs	r3, r3, #3
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d009      	beq.n	8002bf6 <HAL_I2C_EV_IRQHandler+0xb2>
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	0a5b      	lsrs	r3, r3, #9
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 fcb9 	bl	8003566 <I2C_Master_ADD10>
 8002bf4:	e077      	b.n	8002ce6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	085b      	lsrs	r3, r3, #1
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d009      	beq.n	8002c16 <HAL_I2C_EV_IRQHandler+0xd2>
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	0a5b      	lsrs	r3, r3, #9
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 fcd2 	bl	80035b8 <I2C_Master_ADDR>
 8002c14:	e067      	b.n	8002ce6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	089b      	lsrs	r3, r3, #2
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d030      	beq.n	8002c84 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c30:	f000 80e8 	beq.w	8002e04 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	09db      	lsrs	r3, r3, #7
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00f      	beq.n	8002c60 <HAL_I2C_EV_IRQHandler+0x11c>
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	0a9b      	lsrs	r3, r3, #10
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d009      	beq.n	8002c60 <HAL_I2C_EV_IRQHandler+0x11c>
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	089b      	lsrs	r3, r3, #2
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d103      	bne.n	8002c60 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f925 	bl	8002ea8 <I2C_MasterTransmit_TXE>
 8002c5e:	e042      	b.n	8002ce6 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	089b      	lsrs	r3, r3, #2
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 80cb 	beq.w	8002e04 <HAL_I2C_EV_IRQHandler+0x2c0>
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	0a5b      	lsrs	r3, r3, #9
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 80c4 	beq.w	8002e04 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 fa0b 	bl	8003098 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002c82:	e0bf      	b.n	8002e04 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c92:	f000 80b7 	beq.w	8002e04 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	099b      	lsrs	r3, r3, #6
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00f      	beq.n	8002cc2 <HAL_I2C_EV_IRQHandler+0x17e>
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	0a9b      	lsrs	r3, r3, #10
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d009      	beq.n	8002cc2 <HAL_I2C_EV_IRQHandler+0x17e>
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	089b      	lsrs	r3, r3, #2
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d103      	bne.n	8002cc2 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 fa62 	bl	8003184 <I2C_MasterReceive_RXNE>
 8002cc0:	e011      	b.n	8002ce6 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	089b      	lsrs	r3, r3, #2
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 809a 	beq.w	8002e04 <HAL_I2C_EV_IRQHandler+0x2c0>
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	0a5b      	lsrs	r3, r3, #9
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 8093 	beq.w	8002e04 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 fad2 	bl	8003288 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ce4:	e08e      	b.n	8002e04 <HAL_I2C_EV_IRQHandler+0x2c0>
 8002ce6:	e08d      	b.n	8002e04 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d004      	beq.n	8002cfa <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	61fb      	str	r3, [r7, #28]
 8002cf8:	e007      	b.n	8002d0a <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	085b      	lsrs	r3, r3, #1
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d012      	beq.n	8002d3c <HAL_I2C_EV_IRQHandler+0x1f8>
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	0a5b      	lsrs	r3, r3, #9
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00c      	beq.n	8002d3c <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002d32:	69b9      	ldr	r1, [r7, #24]
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 fe96 	bl	8003a66 <I2C_Slave_ADDR>
 8002d3a:	e066      	b.n	8002e0a <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	091b      	lsrs	r3, r3, #4
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d009      	beq.n	8002d5c <HAL_I2C_EV_IRQHandler+0x218>
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	0a5b      	lsrs	r3, r3, #9
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 fecb 	bl	8003af0 <I2C_Slave_STOPF>
 8002d5a:	e056      	b.n	8002e0a <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002d5c:	7bbb      	ldrb	r3, [r7, #14]
 8002d5e:	2b21      	cmp	r3, #33	; 0x21
 8002d60:	d002      	beq.n	8002d68 <HAL_I2C_EV_IRQHandler+0x224>
 8002d62:	7bbb      	ldrb	r3, [r7, #14]
 8002d64:	2b29      	cmp	r3, #41	; 0x29
 8002d66:	d125      	bne.n	8002db4 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	09db      	lsrs	r3, r3, #7
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00f      	beq.n	8002d94 <HAL_I2C_EV_IRQHandler+0x250>
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	0a9b      	lsrs	r3, r3, #10
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d009      	beq.n	8002d94 <HAL_I2C_EV_IRQHandler+0x250>
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	089b      	lsrs	r3, r3, #2
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d103      	bne.n	8002d94 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 fdae 	bl	80038ee <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002d92:	e039      	b.n	8002e08 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	089b      	lsrs	r3, r3, #2
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d033      	beq.n	8002e08 <HAL_I2C_EV_IRQHandler+0x2c4>
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	0a5b      	lsrs	r3, r3, #9
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d02d      	beq.n	8002e08 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 fddb 	bl	8003968 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002db2:	e029      	b.n	8002e08 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	099b      	lsrs	r3, r3, #6
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00f      	beq.n	8002de0 <HAL_I2C_EV_IRQHandler+0x29c>
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	0a9b      	lsrs	r3, r3, #10
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d009      	beq.n	8002de0 <HAL_I2C_EV_IRQHandler+0x29c>
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	089b      	lsrs	r3, r3, #2
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d103      	bne.n	8002de0 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 fde5 	bl	80039a8 <I2C_SlaveReceive_RXNE>
 8002dde:	e014      	b.n	8002e0a <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	089b      	lsrs	r3, r3, #2
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00e      	beq.n	8002e0a <HAL_I2C_EV_IRQHandler+0x2c6>
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	0a5b      	lsrs	r3, r3, #9
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d008      	beq.n	8002e0a <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 fe13 	bl	8003a24 <I2C_SlaveReceive_BTF>
 8002dfe:	e004      	b.n	8002e0a <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8002e00:	bf00      	nop
 8002e02:	e002      	b.n	8002e0a <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e04:	bf00      	nop
 8002e06:	e000      	b.n	8002e0a <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e08:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002e0a:	3720      	adds	r7, #32
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr

08002e22 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	70fb      	strb	r3, [r7, #3]
 8002e40:	4613      	mov	r3, r2
 8002e42:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr

08002e4e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr

08002e60 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr

08002e72 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr

08002e84 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr

08002e96 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ebe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d150      	bne.n	8002f70 <I2C_MasterTransmit_TXE+0xc8>
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	2b21      	cmp	r3, #33	; 0x21
 8002ed2:	d14d      	bne.n	8002f70 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d01d      	beq.n	8002f16 <I2C_MasterTransmit_TXE+0x6e>
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	d01a      	beq.n	8002f16 <I2C_MasterTransmit_TXE+0x6e>
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ee6:	d016      	beq.n	8002f16 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ef6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2211      	movs	r2, #17
 8002efc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7ff ff7e 	bl	8002e10 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f14:	e0bc      	b.n	8003090 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f24:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f34:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b40      	cmp	r3, #64	; 0x40
 8002f4e:	d107      	bne.n	8002f60 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7ff ff81 	bl	8002e60 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f5e:	e097      	b.n	8003090 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7ff ff51 	bl	8002e10 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002f6e:	e08f      	b.n	8003090 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
 8002f72:	2b21      	cmp	r3, #33	; 0x21
 8002f74:	d007      	beq.n	8002f86 <I2C_MasterTransmit_TXE+0xde>
 8002f76:	7bbb      	ldrb	r3, [r7, #14]
 8002f78:	2b40      	cmp	r3, #64	; 0x40
 8002f7a:	f040 8089 	bne.w	8003090 <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
 8002f80:	2b22      	cmp	r3, #34	; 0x22
 8002f82:	f040 8085 	bne.w	8003090 <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d108      	bne.n	8002fa2 <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f9e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002fa0:	e076      	b.n	8003090 <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b40      	cmp	r3, #64	; 0x40
 8002fac:	d15d      	bne.n	800306a <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d11d      	bne.n	8002ff2 <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d10b      	bne.n	8002fd6 <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fce:	1c9a      	adds	r2, r3, #2
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002fd4:	e05c      	b.n	8003090 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	121b      	asrs	r3, r3, #8
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002ff0:	e04e      	b.n	8003090 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d10b      	bne.n	8003012 <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800300a:	1c5a      	adds	r2, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003010:	e03e      	b.n	8003090 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003016:	2b02      	cmp	r3, #2
 8003018:	d13a      	bne.n	8003090 <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b22      	cmp	r3, #34	; 0x22
 8003024:	d108      	bne.n	8003038 <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003034:	601a      	str	r2, [r3, #0]
}
 8003036:	e02b      	b.n	8003090 <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b21      	cmp	r3, #33	; 0x21
 8003042:	d125      	bne.n	8003090 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	781a      	ldrb	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305e:	b29b      	uxth	r3, r3
 8003060:	3b01      	subs	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003068:	e012      	b.n	8003090 <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	781a      	ldrb	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003084:	b29b      	uxth	r3, r3
 8003086:	3b01      	subs	r3, #1
 8003088:	b29a      	uxth	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800308e:	e7ff      	b.n	8003090 <I2C_MasterTransmit_TXE+0x1e8>
 8003090:	bf00      	nop
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b21      	cmp	r3, #33	; 0x21
 80030b0:	d164      	bne.n	800317c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d012      	beq.n	80030e2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	781a      	ldrb	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	1c5a      	adds	r2, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 80030e0:	e04c      	b.n	800317c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d01d      	beq.n	8003124 <I2C_MasterTransmit_BTF+0x8c>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2b20      	cmp	r3, #32
 80030ec:	d01a      	beq.n	8003124 <I2C_MasterTransmit_BTF+0x8c>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030f4:	d016      	beq.n	8003124 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003104:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2211      	movs	r2, #17
 800310a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2220      	movs	r2, #32
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7ff fe77 	bl	8002e10 <HAL_I2C_MasterTxCpltCallback>
}
 8003122:	e02b      	b.n	800317c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003132:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003142:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b40      	cmp	r3, #64	; 0x40
 800315c:	d107      	bne.n	800316e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7ff fe7a 	bl	8002e60 <HAL_I2C_MemTxCpltCallback>
}
 800316c:	e006      	b.n	800317c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7ff fe4a 	bl	8002e10 <HAL_I2C_MasterTxCpltCallback>
}
 800317c:	bf00      	nop
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b22      	cmp	r3, #34	; 0x22
 8003196:	d173      	bne.n	8003280 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319c:	b29b      	uxth	r3, r3
 800319e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	d920      	bls.n	80031e8 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	691a      	ldr	r2, [r3, #16]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	3b01      	subs	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	d154      	bne.n	8003280 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031e4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80031e6:	e04b      	b.n	8003280 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d047      	beq.n	8003280 <I2C_MasterReceive_RXNE+0xfc>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d002      	beq.n	80031fc <I2C_MasterReceive_RXNE+0x78>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d141      	bne.n	8003280 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800320a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800321a:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	691a      	ldr	r2, [r3, #16]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2220      	movs	r2, #32
 8003246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b40      	cmp	r3, #64	; 0x40
 8003254:	d10a      	bne.n	800326c <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7ff fe04 	bl	8002e72 <HAL_I2C_MemRxCpltCallback>
}
 800326a:	e009      	b.n	8003280 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2212      	movs	r2, #18
 8003278:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7ff fdd1 	bl	8002e22 <HAL_I2C_MasterRxCpltCallback>
}
 8003280:	bf00      	nop
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003294:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329a:	b29b      	uxth	r3, r3
 800329c:	2b04      	cmp	r3, #4
 800329e:	d11b      	bne.n	80032d8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ae:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691a      	ldr	r2, [r3, #16]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80032d6:	e0bd      	b.n	8003454 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032dc:	b29b      	uxth	r3, r3
 80032de:	2b03      	cmp	r3, #3
 80032e0:	d129      	bne.n	8003336 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d00a      	beq.n	800330e <I2C_MasterReceive_BTF+0x86>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d007      	beq.n	800330e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800330c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332a:	b29b      	uxth	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003334:	e08e      	b.n	8003454 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333a:	b29b      	uxth	r3, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d176      	bne.n	800342e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d002      	beq.n	800334c <I2C_MasterReceive_BTF+0xc4>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2b10      	cmp	r3, #16
 800334a:	d108      	bne.n	800335e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	e019      	b.n	8003392 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2b04      	cmp	r3, #4
 8003362:	d002      	beq.n	800336a <I2C_MasterReceive_BTF+0xe2>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2b02      	cmp	r3, #2
 8003368:	d108      	bne.n	800337c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	e00a      	b.n	8003392 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2b10      	cmp	r3, #16
 8003380:	d007      	beq.n	8003392 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003390:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	1c5a      	adds	r2, r3, #1
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691a      	ldr	r2, [r3, #16]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	1c5a      	adds	r2, r3, #1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	3b01      	subs	r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80033ec:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2220      	movs	r2, #32
 80033f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b40      	cmp	r3, #64	; 0x40
 8003400:	d10a      	bne.n	8003418 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7ff fd2e 	bl	8002e72 <HAL_I2C_MemRxCpltCallback>
}
 8003416:	e01d      	b.n	8003454 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2212      	movs	r2, #18
 8003424:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff fcfb 	bl	8002e22 <HAL_I2C_MasterRxCpltCallback>
}
 800342c:	e012      	b.n	8003454 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344a:	b29b      	uxth	r3, r3
 800344c:	3b01      	subs	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003454:	bf00      	nop
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b40      	cmp	r3, #64	; 0x40
 800346e:	d117      	bne.n	80034a0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003474:	2b00      	cmp	r3, #0
 8003476:	d109      	bne.n	800348c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347c:	b2db      	uxtb	r3, r3
 800347e:	461a      	mov	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003488:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800348a:	e067      	b.n	800355c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003490:	b2db      	uxtb	r3, r3
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	b2da      	uxtb	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	611a      	str	r2, [r3, #16]
}
 800349e:	e05d      	b.n	800355c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034a8:	d133      	bne.n	8003512 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b21      	cmp	r3, #33	; 0x21
 80034b4:	d109      	bne.n	80034ca <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	461a      	mov	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034c6:	611a      	str	r2, [r3, #16]
 80034c8:	e008      	b.n	80034dc <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	f043 0301 	orr.w	r3, r3, #1
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d103      	bne.n	80034ec <I2C_Master_SB+0x90>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d037      	beq.n	800355c <I2C_Master_SB+0x100>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d104      	bne.n	8003500 <I2C_Master_SB+0xa4>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d02d      	beq.n	800355c <I2C_Master_SB+0x100>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800350e:	605a      	str	r2, [r3, #4]
}
 8003510:	e024      	b.n	800355c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10e      	bne.n	8003538 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351e:	b29b      	uxth	r3, r3
 8003520:	11db      	asrs	r3, r3, #7
 8003522:	b2db      	uxtb	r3, r3
 8003524:	f003 0306 	and.w	r3, r3, #6
 8003528:	b2db      	uxtb	r3, r3
 800352a:	f063 030f 	orn	r3, r3, #15
 800352e:	b2da      	uxtb	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	611a      	str	r2, [r3, #16]
}
 8003536:	e011      	b.n	800355c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353c:	2b01      	cmp	r3, #1
 800353e:	d10d      	bne.n	800355c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003544:	b29b      	uxth	r3, r3
 8003546:	11db      	asrs	r3, r3, #7
 8003548:	b2db      	uxtb	r3, r3
 800354a:	f003 0306 	and.w	r3, r3, #6
 800354e:	b2db      	uxtb	r3, r3
 8003550:	f063 030e 	orn	r3, r3, #14
 8003554:	b2da      	uxtb	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	611a      	str	r2, [r3, #16]
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	bc80      	pop	{r7}
 8003564:	4770      	bx	lr

08003566 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003572:	b2da      	uxtb	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357e:	2b00      	cmp	r3, #0
 8003580:	d103      	bne.n	800358a <I2C_Master_ADD10+0x24>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003586:	2b00      	cmp	r3, #0
 8003588:	d011      	beq.n	80035ae <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003590:	2b00      	cmp	r3, #0
 8003592:	d104      	bne.n	800359e <I2C_Master_ADD10+0x38>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359a:	2b00      	cmp	r3, #0
 800359c:	d007      	beq.n	80035ae <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ac:	605a      	str	r2, [r3, #4]
    }
  }
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bc80      	pop	{r7}
 80035b6:	4770      	bx	lr

080035b8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b091      	sub	sp, #68	; 0x44
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ce:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b22      	cmp	r3, #34	; 0x22
 80035e0:	f040 8174 	bne.w	80038cc <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10f      	bne.n	800360c <I2C_Master_ADDR+0x54>
 80035ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80035f0:	2b40      	cmp	r3, #64	; 0x40
 80035f2:	d10b      	bne.n	800360c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035f4:	2300      	movs	r3, #0
 80035f6:	633b      	str	r3, [r7, #48]	; 0x30
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	633b      	str	r3, [r7, #48]	; 0x30
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	633b      	str	r3, [r7, #48]	; 0x30
 8003608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360a:	e16b      	b.n	80038e4 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003610:	2b00      	cmp	r3, #0
 8003612:	d11d      	bne.n	8003650 <I2C_Master_ADDR+0x98>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800361c:	d118      	bne.n	8003650 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800361e:	2300      	movs	r3, #0
 8003620:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	62fb      	str	r3, [r7, #44]	; 0x2c
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003632:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003642:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	651a      	str	r2, [r3, #80]	; 0x50
 800364e:	e149      	b.n	80038e4 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003654:	b29b      	uxth	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d113      	bne.n	8003682 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800365a:	2300      	movs	r3, #0
 800365c:	62bb      	str	r3, [r7, #40]	; 0x28
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	62bb      	str	r3, [r7, #40]	; 0x28
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	62bb      	str	r3, [r7, #40]	; 0x28
 800366e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	e120      	b.n	80038c4 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003686:	b29b      	uxth	r3, r3
 8003688:	2b01      	cmp	r3, #1
 800368a:	f040 808a 	bne.w	80037a2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800368e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003690:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003694:	d137      	bne.n	8003706 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036b4:	d113      	bne.n	80036de <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036c4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036c6:	2300      	movs	r3, #0
 80036c8:	627b      	str	r3, [r7, #36]	; 0x24
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	e0f2      	b.n	80038c4 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036de:	2300      	movs	r3, #0
 80036e0:	623b      	str	r3, [r7, #32]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	623b      	str	r3, [r7, #32]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	623b      	str	r3, [r7, #32]
 80036f2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	e0de      	b.n	80038c4 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003708:	2b08      	cmp	r3, #8
 800370a:	d02e      	beq.n	800376a <I2C_Master_ADDR+0x1b2>
 800370c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370e:	2b20      	cmp	r3, #32
 8003710:	d02b      	beq.n	800376a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003714:	2b12      	cmp	r3, #18
 8003716:	d102      	bne.n	800371e <I2C_Master_ADDR+0x166>
 8003718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371a:	2b01      	cmp	r3, #1
 800371c:	d125      	bne.n	800376a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800371e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003720:	2b04      	cmp	r3, #4
 8003722:	d00e      	beq.n	8003742 <I2C_Master_ADDR+0x18a>
 8003724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003726:	2b02      	cmp	r3, #2
 8003728:	d00b      	beq.n	8003742 <I2C_Master_ADDR+0x18a>
 800372a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372c:	2b10      	cmp	r3, #16
 800372e:	d008      	beq.n	8003742 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	e007      	b.n	8003752 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003750:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003752:	2300      	movs	r3, #0
 8003754:	61fb      	str	r3, [r7, #28]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	61fb      	str	r3, [r7, #28]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	61fb      	str	r3, [r7, #28]
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	e0ac      	b.n	80038c4 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003778:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800377a:	2300      	movs	r3, #0
 800377c:	61bb      	str	r3, [r7, #24]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	61bb      	str	r3, [r7, #24]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	61bb      	str	r3, [r7, #24]
 800378e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	e090      	b.n	80038c4 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d158      	bne.n	800385e <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80037ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d021      	beq.n	80037f6 <I2C_Master_ADDR+0x23e>
 80037b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d01e      	beq.n	80037f6 <I2C_Master_ADDR+0x23e>
 80037b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ba:	2b10      	cmp	r3, #16
 80037bc:	d01b      	beq.n	80037f6 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037cc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	617b      	str	r3, [r7, #20]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	617b      	str	r3, [r7, #20]
 80037e2:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	e012      	b.n	800381c <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003804:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003806:	2300      	movs	r3, #0
 8003808:	613b      	str	r3, [r7, #16]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	613b      	str	r3, [r7, #16]
 800381a:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800382a:	d14b      	bne.n	80038c4 <I2C_Master_ADDR+0x30c>
 800382c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800382e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003832:	d00b      	beq.n	800384c <I2C_Master_ADDR+0x294>
 8003834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003836:	2b01      	cmp	r3, #1
 8003838:	d008      	beq.n	800384c <I2C_Master_ADDR+0x294>
 800383a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800383c:	2b08      	cmp	r3, #8
 800383e:	d005      	beq.n	800384c <I2C_Master_ADDR+0x294>
 8003840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003842:	2b10      	cmp	r3, #16
 8003844:	d002      	beq.n	800384c <I2C_Master_ADDR+0x294>
 8003846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003848:	2b20      	cmp	r3, #32
 800384a:	d13b      	bne.n	80038c4 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800385a:	605a      	str	r2, [r3, #4]
 800385c:	e032      	b.n	80038c4 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800386c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003878:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800387c:	d117      	bne.n	80038ae <I2C_Master_ADDR+0x2f6>
 800387e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003880:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003884:	d00b      	beq.n	800389e <I2C_Master_ADDR+0x2e6>
 8003886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003888:	2b01      	cmp	r3, #1
 800388a:	d008      	beq.n	800389e <I2C_Master_ADDR+0x2e6>
 800388c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388e:	2b08      	cmp	r3, #8
 8003890:	d005      	beq.n	800389e <I2C_Master_ADDR+0x2e6>
 8003892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003894:	2b10      	cmp	r3, #16
 8003896:	d002      	beq.n	800389e <I2C_Master_ADDR+0x2e6>
 8003898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389a:	2b20      	cmp	r3, #32
 800389c:	d107      	bne.n	80038ae <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038ac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ae:	2300      	movs	r3, #0
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	60fb      	str	r3, [r7, #12]
 80038c2:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80038ca:	e00b      	b.n	80038e4 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038cc:	2300      	movs	r3, #0
 80038ce:	60bb      	str	r3, [r7, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	60bb      	str	r3, [r7, #8]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	60bb      	str	r3, [r7, #8]
 80038e0:	68bb      	ldr	r3, [r7, #8]
}
 80038e2:	e7ff      	b.n	80038e4 <I2C_Master_ADDR+0x32c>
 80038e4:	bf00      	nop
 80038e6:	3744      	adds	r7, #68	; 0x44
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc80      	pop	{r7}
 80038ec:	4770      	bx	lr

080038ee <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b084      	sub	sp, #16
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038fc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003902:	b29b      	uxth	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	d02b      	beq.n	8003960 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	781a      	ldrb	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	1c5a      	adds	r2, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003922:	b29b      	uxth	r3, r3
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003930:	b29b      	uxth	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d114      	bne.n	8003960 <I2C_SlaveTransmit_TXE+0x72>
 8003936:	7bfb      	ldrb	r3, [r7, #15]
 8003938:	2b29      	cmp	r3, #41	; 0x29
 800393a:	d111      	bne.n	8003960 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800394a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2221      	movs	r2, #33	; 0x21
 8003950:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2228      	movs	r2, #40	; 0x28
 8003956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7fd f89c 	bl	8000a98 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003960:	bf00      	nop
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003974:	b29b      	uxth	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d011      	beq.n	800399e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	781a      	ldrb	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bc80      	pop	{r7}
 80039a6:	4770      	bx	lr

080039a8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039bc:	b29b      	uxth	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d02c      	beq.n	8003a1c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691a      	ldr	r2, [r3, #16]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039de:	b29b      	uxth	r3, r3
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d114      	bne.n	8003a1c <I2C_SlaveReceive_RXNE+0x74>
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
 80039f4:	2b2a      	cmp	r3, #42	; 0x2a
 80039f6:	d111      	bne.n	8003a1c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a06:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2222      	movs	r2, #34	; 0x22
 8003a0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2228      	movs	r2, #40	; 0x28
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7fd f830 	bl	8000a7c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003a1c:	bf00      	nop
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d012      	beq.n	8003a5c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bc80      	pop	{r7}
 8003a64:	4770      	bx	lr

08003a66 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b084      	sub	sp, #16
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
 8003a6e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003a70:	2300      	movs	r3, #0
 8003a72:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a80:	2b28      	cmp	r3, #40	; 0x28
 8003a82:	d127      	bne.n	8003ad4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a92:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	089b      	lsrs	r3, r3, #2
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	09db      	lsrs	r3, r3, #7
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d103      	bne.n	8003ab8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	81bb      	strh	r3, [r7, #12]
 8003ab6:	e002      	b.n	8003abe <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003ac6:	89ba      	ldrh	r2, [r7, #12]
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	4619      	mov	r1, r3
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff f9b1 	bl	8002e34 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003ad2:	e008      	b.n	8003ae6 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 0202 	mvn.w	r2, #2
 8003adc:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003ae6:	bf00      	nop
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
	...

08003af0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003afe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b0e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003b10:	2300      	movs	r3, #0
 8003b12:	60bb      	str	r3, [r7, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	60bb      	str	r3, [r7, #8]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b3c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b4c:	d172      	bne.n	8003c34 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
 8003b50:	2b22      	cmp	r3, #34	; 0x22
 8003b52:	d002      	beq.n	8003b5a <I2C_Slave_STOPF+0x6a>
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
 8003b56:	2b2a      	cmp	r3, #42	; 0x2a
 8003b58:	d135      	bne.n	8003bc6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d005      	beq.n	8003b7e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	f043 0204 	orr.w	r2, r3, #4
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b8c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fe fb7c 	bl	8002290 <HAL_DMA_GetState>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d049      	beq.n	8003c32 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba2:	4a69      	ldr	r2, [pc, #420]	; (8003d48 <I2C_Slave_STOPF+0x258>)
 8003ba4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fe f9f4 	bl	8001f98 <HAL_DMA_Abort_IT>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d03d      	beq.n	8003c32 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003bc4:	e035      	b.n	8003c32 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d005      	beq.n	8003bea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	f043 0204 	orr.w	r2, r3, #4
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bf8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fe fb46 	bl	8002290 <HAL_DMA_GetState>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d014      	beq.n	8003c34 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0e:	4a4e      	ldr	r2, [pc, #312]	; (8003d48 <I2C_Slave_STOPF+0x258>)
 8003c10:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fe f9be 	bl	8001f98 <HAL_DMA_Abort_IT>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d008      	beq.n	8003c34 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	4798      	blx	r3
 8003c30:	e000      	b.n	8003c34 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c32:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d03e      	beq.n	8003cbc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b04      	cmp	r3, #4
 8003c4a:	d112      	bne.n	8003c72 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	691a      	ldr	r2, [r3, #16]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	b2d2      	uxtb	r2, r2
 8003c58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7c:	2b40      	cmp	r3, #64	; 0x40
 8003c7e:	d112      	bne.n	8003ca6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691a      	ldr	r2, [r3, #16]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d005      	beq.n	8003cbc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	f043 0204 	orr.w	r2, r3, #4
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 f843 	bl	8003d50 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003cca:	e039      	b.n	8003d40 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003ccc:	7bfb      	ldrb	r3, [r7, #15]
 8003cce:	2b2a      	cmp	r3, #42	; 0x2a
 8003cd0:	d109      	bne.n	8003ce6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2228      	movs	r2, #40	; 0x28
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7fc fecb 	bl	8000a7c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b28      	cmp	r3, #40	; 0x28
 8003cf0:	d111      	bne.n	8003d16 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a15      	ldr	r2, [pc, #84]	; (8003d4c <I2C_Slave_STOPF+0x25c>)
 8003cf6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2220      	movs	r2, #32
 8003d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7ff f89d 	bl	8002e4e <HAL_I2C_ListenCpltCallback>
}
 8003d14:	e014      	b.n	8003d40 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1a:	2b22      	cmp	r3, #34	; 0x22
 8003d1c:	d002      	beq.n	8003d24 <I2C_Slave_STOPF+0x234>
 8003d1e:	7bfb      	ldrb	r3, [r7, #15]
 8003d20:	2b22      	cmp	r3, #34	; 0x22
 8003d22:	d10d      	bne.n	8003d40 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7fc fe9e 	bl	8000a7c <HAL_I2C_SlaveRxCpltCallback>
}
 8003d40:	bf00      	nop
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	08003f7d 	.word	0x08003f7d
 8003d4c:	ffff0000 	.word	0xffff0000

08003d50 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d5e:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b10      	cmp	r3, #16
 8003d6a:	d10a      	bne.n	8003d82 <I2C_ITError+0x32>
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
 8003d6e:	2b22      	cmp	r3, #34	; 0x22
 8003d70:	d107      	bne.n	8003d82 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d80:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
 8003d84:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d88:	2b28      	cmp	r3, #40	; 0x28
 8003d8a:	d107      	bne.n	8003d9c <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2228      	movs	r2, #40	; 0x28
 8003d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003d9a:	e015      	b.n	8003dc8 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003da6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003daa:	d006      	beq.n	8003dba <I2C_ITError+0x6a>
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
 8003dae:	2b60      	cmp	r3, #96	; 0x60
 8003db0:	d003      	beq.n	8003dba <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2220      	movs	r2, #32
 8003db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd6:	d161      	bne.n	8003e9c <I2C_ITError+0x14c>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003de6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d020      	beq.n	8003e36 <I2C_ITError+0xe6>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df8:	4a5e      	ldr	r2, [pc, #376]	; (8003f74 <I2C_ITError+0x224>)
 8003dfa:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fe f8c9 	bl	8001f98 <HAL_DMA_Abort_IT>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 8089 	beq.w	8003f20 <I2C_ITError+0x1d0>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0201 	bic.w	r2, r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2220      	movs	r2, #32
 8003e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e30:	4610      	mov	r0, r2
 8003e32:	4798      	blx	r3
 8003e34:	e074      	b.n	8003f20 <I2C_ITError+0x1d0>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3a:	4a4e      	ldr	r2, [pc, #312]	; (8003f74 <I2C_ITError+0x224>)
 8003e3c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fe f8a8 	bl	8001f98 <HAL_DMA_Abort_IT>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d068      	beq.n	8003f20 <I2C_ITError+0x1d0>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e58:	2b40      	cmp	r3, #64	; 0x40
 8003e5a:	d10b      	bne.n	8003e74 <I2C_ITError+0x124>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691a      	ldr	r2, [r3, #16]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	1c5a      	adds	r2, r3, #1
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0201 	bic.w	r2, r2, #1
 8003e82:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e96:	4610      	mov	r0, r2
 8003e98:	4798      	blx	r3
 8003e9a:	e041      	b.n	8003f20 <I2C_ITError+0x1d0>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b60      	cmp	r3, #96	; 0x60
 8003ea6:	d125      	bne.n	8003ef4 <I2C_ITError+0x1a4>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec0:	2b40      	cmp	r3, #64	; 0x40
 8003ec2:	d10b      	bne.n	8003edc <I2C_ITError+0x18c>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	691a      	ldr	r2, [r3, #16]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	1c5a      	adds	r2, r3, #1
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0201 	bic.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7fe ffd2 	bl	8002e96 <HAL_I2C_AbortCpltCallback>
 8003ef2:	e015      	b.n	8003f20 <I2C_ITError+0x1d0>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efe:	2b40      	cmp	r3, #64	; 0x40
 8003f00:	d10b      	bne.n	8003f1a <I2C_ITError+0x1ca>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	691a      	ldr	r2, [r3, #16]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	b2d2      	uxtb	r2, r2
 8003f0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7fe ffb2 	bl	8002e84 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f26:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b04      	cmp	r3, #4
 8003f32:	d11b      	bne.n	8003f6c <I2C_ITError+0x21c>
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	2b28      	cmp	r3, #40	; 0x28
 8003f38:	d118      	bne.n	8003f6c <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f48:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a0a      	ldr	r2, [pc, #40]	; (8003f78 <I2C_ITError+0x228>)
 8003f4e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7fe ff71 	bl	8002e4e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003f6c:	bf00      	nop
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	08003f7d 	.word	0x08003f7d
 8003f78:	ffff0000 	.word	0xffff0000

08003f7c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f90:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f96:	2200      	movs	r2, #0
 8003f98:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fb0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0201 	bic.w	r2, r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b60      	cmp	r3, #96	; 0x60
 8003fe2:	d10e      	bne.n	8004002 <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f7fe ff4b 	bl	8002e96 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004000:	e027      	b.n	8004052 <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004002:	7afb      	ldrb	r3, [r7, #11]
 8004004:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004008:	2b28      	cmp	r3, #40	; 0x28
 800400a:	d117      	bne.n	800403c <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0201 	orr.w	r2, r2, #1
 800401a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800402a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2228      	movs	r2, #40	; 0x28
 8004036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800403a:	e007      	b.n	800404c <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f7fe ff19 	bl	8002e84 <HAL_I2C_ErrorCallback>
}
 8004052:	bf00      	nop
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b084      	sub	sp, #16
 800405e:	af00      	add	r7, sp, #0
 8004060:	60f8      	str	r0, [r7, #12]
 8004062:	60b9      	str	r1, [r7, #8]
 8004064:	603b      	str	r3, [r7, #0]
 8004066:	4613      	mov	r3, r2
 8004068:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800406a:	e025      	b.n	80040b8 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004072:	d021      	beq.n	80040b8 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004074:	f7fd fbf2 	bl	800185c <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	429a      	cmp	r2, r3
 8004082:	d302      	bcc.n	800408a <I2C_WaitOnFlagUntilTimeout+0x30>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d116      	bne.n	80040b8 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	f043 0220 	orr.w	r2, r3, #32
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e023      	b.n	8004100 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	0c1b      	lsrs	r3, r3, #16
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d10d      	bne.n	80040de <I2C_WaitOnFlagUntilTimeout+0x84>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	43da      	mvns	r2, r3
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	4013      	ands	r3, r2
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	bf0c      	ite	eq
 80040d4:	2301      	moveq	r3, #1
 80040d6:	2300      	movne	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	461a      	mov	r2, r3
 80040dc:	e00c      	b.n	80040f8 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	43da      	mvns	r2, r3
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	4013      	ands	r3, r2
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	bf0c      	ite	eq
 80040f0:	2301      	moveq	r3, #1
 80040f2:	2300      	movne	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	461a      	mov	r2, r3
 80040f8:	79fb      	ldrb	r3, [r7, #7]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d0b6      	beq.n	800406c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004114:	e02d      	b.n	8004172 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 f837 	bl	800418a <I2C_IsAcknowledgeFailed>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e02d      	b.n	8004182 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412c:	d021      	beq.n	8004172 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800412e:	f7fd fb95 	bl	800185c <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	429a      	cmp	r2, r3
 800413c:	d302      	bcc.n	8004144 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d116      	bne.n	8004172 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2220      	movs	r2, #32
 800414e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	f043 0220 	orr.w	r2, r3, #32
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e007      	b.n	8004182 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417c:	2b80      	cmp	r3, #128	; 0x80
 800417e:	d1ca      	bne.n	8004116 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800419c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a0:	d11b      	bne.n	80041da <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041aa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	f043 0204 	orr.w	r2, r3, #4
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e000      	b.n	80041dc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bc80      	pop	{r7}
 80041e4:	4770      	bx	lr

080041e6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80041f6:	d103      	bne.n	8004200 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80041fe:	e007      	b.n	8004210 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004204:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004208:	d102      	bne.n	8004210 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2208      	movs	r2, #8
 800420e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	bc80      	pop	{r7}
 8004218:	4770      	bx	lr
	...

0800421c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e26c      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 8087 	beq.w	800434a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800423c:	4b92      	ldr	r3, [pc, #584]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f003 030c 	and.w	r3, r3, #12
 8004244:	2b04      	cmp	r3, #4
 8004246:	d00c      	beq.n	8004262 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004248:	4b8f      	ldr	r3, [pc, #572]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f003 030c 	and.w	r3, r3, #12
 8004250:	2b08      	cmp	r3, #8
 8004252:	d112      	bne.n	800427a <HAL_RCC_OscConfig+0x5e>
 8004254:	4b8c      	ldr	r3, [pc, #560]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800425c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004260:	d10b      	bne.n	800427a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004262:	4b89      	ldr	r3, [pc, #548]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d06c      	beq.n	8004348 <HAL_RCC_OscConfig+0x12c>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d168      	bne.n	8004348 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e246      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004282:	d106      	bne.n	8004292 <HAL_RCC_OscConfig+0x76>
 8004284:	4b80      	ldr	r3, [pc, #512]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a7f      	ldr	r2, [pc, #508]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 800428a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800428e:	6013      	str	r3, [r2, #0]
 8004290:	e02e      	b.n	80042f0 <HAL_RCC_OscConfig+0xd4>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10c      	bne.n	80042b4 <HAL_RCC_OscConfig+0x98>
 800429a:	4b7b      	ldr	r3, [pc, #492]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a7a      	ldr	r2, [pc, #488]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	4b78      	ldr	r3, [pc, #480]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a77      	ldr	r2, [pc, #476]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042b0:	6013      	str	r3, [r2, #0]
 80042b2:	e01d      	b.n	80042f0 <HAL_RCC_OscConfig+0xd4>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042bc:	d10c      	bne.n	80042d8 <HAL_RCC_OscConfig+0xbc>
 80042be:	4b72      	ldr	r3, [pc, #456]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a71      	ldr	r2, [pc, #452]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	4b6f      	ldr	r3, [pc, #444]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a6e      	ldr	r2, [pc, #440]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	e00b      	b.n	80042f0 <HAL_RCC_OscConfig+0xd4>
 80042d8:	4b6b      	ldr	r3, [pc, #428]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a6a      	ldr	r2, [pc, #424]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	4b68      	ldr	r3, [pc, #416]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a67      	ldr	r2, [pc, #412]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d013      	beq.n	8004320 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f8:	f7fd fab0 	bl	800185c <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004300:	f7fd faac 	bl	800185c <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b64      	cmp	r3, #100	; 0x64
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e1fa      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004312:	4b5d      	ldr	r3, [pc, #372]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0f0      	beq.n	8004300 <HAL_RCC_OscConfig+0xe4>
 800431e:	e014      	b.n	800434a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004320:	f7fd fa9c 	bl	800185c <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004328:	f7fd fa98 	bl	800185c <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b64      	cmp	r3, #100	; 0x64
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e1e6      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800433a:	4b53      	ldr	r3, [pc, #332]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1f0      	bne.n	8004328 <HAL_RCC_OscConfig+0x10c>
 8004346:	e000      	b.n	800434a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d063      	beq.n	800441e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004356:	4b4c      	ldr	r3, [pc, #304]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f003 030c 	and.w	r3, r3, #12
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00b      	beq.n	800437a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004362:	4b49      	ldr	r3, [pc, #292]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f003 030c 	and.w	r3, r3, #12
 800436a:	2b08      	cmp	r3, #8
 800436c:	d11c      	bne.n	80043a8 <HAL_RCC_OscConfig+0x18c>
 800436e:	4b46      	ldr	r3, [pc, #280]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d116      	bne.n	80043a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800437a:	4b43      	ldr	r3, [pc, #268]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d005      	beq.n	8004392 <HAL_RCC_OscConfig+0x176>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d001      	beq.n	8004392 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e1ba      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004392:	4b3d      	ldr	r3, [pc, #244]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	4939      	ldr	r1, [pc, #228]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043a6:	e03a      	b.n	800441e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d020      	beq.n	80043f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043b0:	4b36      	ldr	r3, [pc, #216]	; (800448c <HAL_RCC_OscConfig+0x270>)
 80043b2:	2201      	movs	r2, #1
 80043b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b6:	f7fd fa51 	bl	800185c <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043be:	f7fd fa4d 	bl	800185c <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e19b      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d0:	4b2d      	ldr	r3, [pc, #180]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0f0      	beq.n	80043be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043dc:	4b2a      	ldr	r3, [pc, #168]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	4927      	ldr	r1, [pc, #156]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	600b      	str	r3, [r1, #0]
 80043f0:	e015      	b.n	800441e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043f2:	4b26      	ldr	r3, [pc, #152]	; (800448c <HAL_RCC_OscConfig+0x270>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f8:	f7fd fa30 	bl	800185c <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004400:	f7fd fa2c 	bl	800185c <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e17a      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004412:	4b1d      	ldr	r3, [pc, #116]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1f0      	bne.n	8004400 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0308 	and.w	r3, r3, #8
 8004426:	2b00      	cmp	r3, #0
 8004428:	d03a      	beq.n	80044a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d019      	beq.n	8004466 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004432:	4b17      	ldr	r3, [pc, #92]	; (8004490 <HAL_RCC_OscConfig+0x274>)
 8004434:	2201      	movs	r2, #1
 8004436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004438:	f7fd fa10 	bl	800185c <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004440:	f7fd fa0c 	bl	800185c <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e15a      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004452:	4b0d      	ldr	r3, [pc, #52]	; (8004488 <HAL_RCC_OscConfig+0x26c>)
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f0      	beq.n	8004440 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800445e:	2001      	movs	r0, #1
 8004460:	f000 fadc 	bl	8004a1c <RCC_Delay>
 8004464:	e01c      	b.n	80044a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004466:	4b0a      	ldr	r3, [pc, #40]	; (8004490 <HAL_RCC_OscConfig+0x274>)
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800446c:	f7fd f9f6 	bl	800185c <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004472:	e00f      	b.n	8004494 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004474:	f7fd f9f2 	bl	800185c <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d908      	bls.n	8004494 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e140      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>
 8004486:	bf00      	nop
 8004488:	40021000 	.word	0x40021000
 800448c:	42420000 	.word	0x42420000
 8004490:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004494:	4b9e      	ldr	r3, [pc, #632]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1e9      	bne.n	8004474 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 80a6 	beq.w	80045fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ae:	2300      	movs	r3, #0
 80044b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044b2:	4b97      	ldr	r3, [pc, #604]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10d      	bne.n	80044da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044be:	4b94      	ldr	r3, [pc, #592]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	4a93      	ldr	r2, [pc, #588]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 80044c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044c8:	61d3      	str	r3, [r2, #28]
 80044ca:	4b91      	ldr	r3, [pc, #580]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d2:	60bb      	str	r3, [r7, #8]
 80044d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044d6:	2301      	movs	r3, #1
 80044d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044da:	4b8e      	ldr	r3, [pc, #568]	; (8004714 <HAL_RCC_OscConfig+0x4f8>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d118      	bne.n	8004518 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044e6:	4b8b      	ldr	r3, [pc, #556]	; (8004714 <HAL_RCC_OscConfig+0x4f8>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a8a      	ldr	r2, [pc, #552]	; (8004714 <HAL_RCC_OscConfig+0x4f8>)
 80044ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044f2:	f7fd f9b3 	bl	800185c <HAL_GetTick>
 80044f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f8:	e008      	b.n	800450c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044fa:	f7fd f9af 	bl	800185c <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b64      	cmp	r3, #100	; 0x64
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e0fd      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450c:	4b81      	ldr	r3, [pc, #516]	; (8004714 <HAL_RCC_OscConfig+0x4f8>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0f0      	beq.n	80044fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d106      	bne.n	800452e <HAL_RCC_OscConfig+0x312>
 8004520:	4b7b      	ldr	r3, [pc, #492]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	4a7a      	ldr	r2, [pc, #488]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 8004526:	f043 0301 	orr.w	r3, r3, #1
 800452a:	6213      	str	r3, [r2, #32]
 800452c:	e02d      	b.n	800458a <HAL_RCC_OscConfig+0x36e>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10c      	bne.n	8004550 <HAL_RCC_OscConfig+0x334>
 8004536:	4b76      	ldr	r3, [pc, #472]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	4a75      	ldr	r2, [pc, #468]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 800453c:	f023 0301 	bic.w	r3, r3, #1
 8004540:	6213      	str	r3, [r2, #32]
 8004542:	4b73      	ldr	r3, [pc, #460]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	4a72      	ldr	r2, [pc, #456]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 8004548:	f023 0304 	bic.w	r3, r3, #4
 800454c:	6213      	str	r3, [r2, #32]
 800454e:	e01c      	b.n	800458a <HAL_RCC_OscConfig+0x36e>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	2b05      	cmp	r3, #5
 8004556:	d10c      	bne.n	8004572 <HAL_RCC_OscConfig+0x356>
 8004558:	4b6d      	ldr	r3, [pc, #436]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	4a6c      	ldr	r2, [pc, #432]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 800455e:	f043 0304 	orr.w	r3, r3, #4
 8004562:	6213      	str	r3, [r2, #32]
 8004564:	4b6a      	ldr	r3, [pc, #424]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	4a69      	ldr	r2, [pc, #420]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 800456a:	f043 0301 	orr.w	r3, r3, #1
 800456e:	6213      	str	r3, [r2, #32]
 8004570:	e00b      	b.n	800458a <HAL_RCC_OscConfig+0x36e>
 8004572:	4b67      	ldr	r3, [pc, #412]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	4a66      	ldr	r2, [pc, #408]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 8004578:	f023 0301 	bic.w	r3, r3, #1
 800457c:	6213      	str	r3, [r2, #32]
 800457e:	4b64      	ldr	r3, [pc, #400]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	4a63      	ldr	r2, [pc, #396]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 8004584:	f023 0304 	bic.w	r3, r3, #4
 8004588:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d015      	beq.n	80045be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004592:	f7fd f963 	bl	800185c <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004598:	e00a      	b.n	80045b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800459a:	f7fd f95f 	bl	800185c <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e0ab      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b0:	4b57      	ldr	r3, [pc, #348]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0ee      	beq.n	800459a <HAL_RCC_OscConfig+0x37e>
 80045bc:	e014      	b.n	80045e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045be:	f7fd f94d 	bl	800185c <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045c4:	e00a      	b.n	80045dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c6:	f7fd f949 	bl	800185c <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e095      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045dc:	4b4c      	ldr	r3, [pc, #304]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1ee      	bne.n	80045c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045e8:	7dfb      	ldrb	r3, [r7, #23]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d105      	bne.n	80045fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ee:	4b48      	ldr	r3, [pc, #288]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	4a47      	ldr	r2, [pc, #284]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 80045f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 8081 	beq.w	8004706 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004604:	4b42      	ldr	r3, [pc, #264]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f003 030c 	and.w	r3, r3, #12
 800460c:	2b08      	cmp	r3, #8
 800460e:	d061      	beq.n	80046d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	2b02      	cmp	r3, #2
 8004616:	d146      	bne.n	80046a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004618:	4b3f      	ldr	r3, [pc, #252]	; (8004718 <HAL_RCC_OscConfig+0x4fc>)
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461e:	f7fd f91d 	bl	800185c <HAL_GetTick>
 8004622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004624:	e008      	b.n	8004638 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004626:	f7fd f919 	bl	800185c <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e067      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004638:	4b35      	ldr	r3, [pc, #212]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1f0      	bne.n	8004626 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800464c:	d108      	bne.n	8004660 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800464e:	4b30      	ldr	r3, [pc, #192]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	492d      	ldr	r1, [pc, #180]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 800465c:	4313      	orrs	r3, r2
 800465e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004660:	4b2b      	ldr	r3, [pc, #172]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a19      	ldr	r1, [r3, #32]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	430b      	orrs	r3, r1
 8004672:	4927      	ldr	r1, [pc, #156]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 8004674:	4313      	orrs	r3, r2
 8004676:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004678:	4b27      	ldr	r3, [pc, #156]	; (8004718 <HAL_RCC_OscConfig+0x4fc>)
 800467a:	2201      	movs	r2, #1
 800467c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800467e:	f7fd f8ed 	bl	800185c <HAL_GetTick>
 8004682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004684:	e008      	b.n	8004698 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004686:	f7fd f8e9 	bl	800185c <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d901      	bls.n	8004698 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e037      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004698:	4b1d      	ldr	r3, [pc, #116]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0f0      	beq.n	8004686 <HAL_RCC_OscConfig+0x46a>
 80046a4:	e02f      	b.n	8004706 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046a6:	4b1c      	ldr	r3, [pc, #112]	; (8004718 <HAL_RCC_OscConfig+0x4fc>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ac:	f7fd f8d6 	bl	800185c <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b4:	f7fd f8d2 	bl	800185c <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e020      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046c6:	4b12      	ldr	r3, [pc, #72]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1f0      	bne.n	80046b4 <HAL_RCC_OscConfig+0x498>
 80046d2:	e018      	b.n	8004706 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d101      	bne.n	80046e0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e013      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046e0:	4b0b      	ldr	r3, [pc, #44]	; (8004710 <HAL_RCC_OscConfig+0x4f4>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d106      	bne.n	8004702 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046fe:	429a      	cmp	r2, r3
 8004700:	d001      	beq.n	8004706 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3718      	adds	r7, #24
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	40021000 	.word	0x40021000
 8004714:	40007000 	.word	0x40007000
 8004718:	42420060 	.word	0x42420060

0800471c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e0d0      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004730:	4b6a      	ldr	r3, [pc, #424]	; (80048dc <HAL_RCC_ClockConfig+0x1c0>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	429a      	cmp	r2, r3
 800473c:	d910      	bls.n	8004760 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473e:	4b67      	ldr	r3, [pc, #412]	; (80048dc <HAL_RCC_ClockConfig+0x1c0>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f023 0207 	bic.w	r2, r3, #7
 8004746:	4965      	ldr	r1, [pc, #404]	; (80048dc <HAL_RCC_ClockConfig+0x1c0>)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	4313      	orrs	r3, r2
 800474c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800474e:	4b63      	ldr	r3, [pc, #396]	; (80048dc <HAL_RCC_ClockConfig+0x1c0>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	429a      	cmp	r2, r3
 800475a:	d001      	beq.n	8004760 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e0b8      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d020      	beq.n	80047ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004778:	4b59      	ldr	r3, [pc, #356]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	4a58      	ldr	r2, [pc, #352]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 800477e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004782:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0308 	and.w	r3, r3, #8
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004790:	4b53      	ldr	r3, [pc, #332]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	4a52      	ldr	r2, [pc, #328]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004796:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800479a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800479c:	4b50      	ldr	r3, [pc, #320]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	494d      	ldr	r1, [pc, #308]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d040      	beq.n	800483c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d107      	bne.n	80047d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c2:	4b47      	ldr	r3, [pc, #284]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d115      	bne.n	80047fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e07f      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d107      	bne.n	80047ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047da:	4b41      	ldr	r3, [pc, #260]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d109      	bne.n	80047fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e073      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ea:	4b3d      	ldr	r3, [pc, #244]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e06b      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047fa:	4b39      	ldr	r3, [pc, #228]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f023 0203 	bic.w	r2, r3, #3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	4936      	ldr	r1, [pc, #216]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004808:	4313      	orrs	r3, r2
 800480a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800480c:	f7fd f826 	bl	800185c <HAL_GetTick>
 8004810:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004812:	e00a      	b.n	800482a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004814:	f7fd f822 	bl	800185c <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004822:	4293      	cmp	r3, r2
 8004824:	d901      	bls.n	800482a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e053      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800482a:	4b2d      	ldr	r3, [pc, #180]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f003 020c 	and.w	r2, r3, #12
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	429a      	cmp	r2, r3
 800483a:	d1eb      	bne.n	8004814 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800483c:	4b27      	ldr	r3, [pc, #156]	; (80048dc <HAL_RCC_ClockConfig+0x1c0>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	429a      	cmp	r2, r3
 8004848:	d210      	bcs.n	800486c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484a:	4b24      	ldr	r3, [pc, #144]	; (80048dc <HAL_RCC_ClockConfig+0x1c0>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f023 0207 	bic.w	r2, r3, #7
 8004852:	4922      	ldr	r1, [pc, #136]	; (80048dc <HAL_RCC_ClockConfig+0x1c0>)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	4313      	orrs	r3, r2
 8004858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800485a:	4b20      	ldr	r3, [pc, #128]	; (80048dc <HAL_RCC_ClockConfig+0x1c0>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	429a      	cmp	r2, r3
 8004866:	d001      	beq.n	800486c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e032      	b.n	80048d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	d008      	beq.n	800488a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004878:	4b19      	ldr	r3, [pc, #100]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	4916      	ldr	r1, [pc, #88]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004886:	4313      	orrs	r3, r2
 8004888:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0308 	and.w	r3, r3, #8
 8004892:	2b00      	cmp	r3, #0
 8004894:	d009      	beq.n	80048aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004896:	4b12      	ldr	r3, [pc, #72]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	490e      	ldr	r1, [pc, #56]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048aa:	f000 f821 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 80048ae:	4601      	mov	r1, r0
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <HAL_RCC_ClockConfig+0x1c4>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	091b      	lsrs	r3, r3, #4
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	4a0a      	ldr	r2, [pc, #40]	; (80048e4 <HAL_RCC_ClockConfig+0x1c8>)
 80048bc:	5cd3      	ldrb	r3, [r2, r3]
 80048be:	fa21 f303 	lsr.w	r3, r1, r3
 80048c2:	4a09      	ldr	r2, [pc, #36]	; (80048e8 <HAL_RCC_ClockConfig+0x1cc>)
 80048c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048c6:	4b09      	ldr	r3, [pc, #36]	; (80048ec <HAL_RCC_ClockConfig+0x1d0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fc ff84 	bl	80017d8 <HAL_InitTick>

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40022000 	.word	0x40022000
 80048e0:	40021000 	.word	0x40021000
 80048e4:	08005f18 	.word	0x08005f18
 80048e8:	20000000 	.word	0x20000000
 80048ec:	20000004 	.word	0x20000004

080048f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048f0:	b490      	push	{r4, r7}
 80048f2:	b08a      	sub	sp, #40	; 0x28
 80048f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80048f6:	4b2a      	ldr	r3, [pc, #168]	; (80049a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80048f8:	1d3c      	adds	r4, r7, #4
 80048fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004900:	4b28      	ldr	r3, [pc, #160]	; (80049a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	61fb      	str	r3, [r7, #28]
 800490a:	2300      	movs	r3, #0
 800490c:	61bb      	str	r3, [r7, #24]
 800490e:	2300      	movs	r3, #0
 8004910:	627b      	str	r3, [r7, #36]	; 0x24
 8004912:	2300      	movs	r3, #0
 8004914:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004916:	2300      	movs	r3, #0
 8004918:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800491a:	4b23      	ldr	r3, [pc, #140]	; (80049a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	f003 030c 	and.w	r3, r3, #12
 8004926:	2b04      	cmp	r3, #4
 8004928:	d002      	beq.n	8004930 <HAL_RCC_GetSysClockFreq+0x40>
 800492a:	2b08      	cmp	r3, #8
 800492c:	d003      	beq.n	8004936 <HAL_RCC_GetSysClockFreq+0x46>
 800492e:	e02d      	b.n	800498c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004930:	4b1e      	ldr	r3, [pc, #120]	; (80049ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8004932:	623b      	str	r3, [r7, #32]
      break;
 8004934:	e02d      	b.n	8004992 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	0c9b      	lsrs	r3, r3, #18
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004942:	4413      	add	r3, r2
 8004944:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004948:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d013      	beq.n	800497c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004954:	4b14      	ldr	r3, [pc, #80]	; (80049a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	0c5b      	lsrs	r3, r3, #17
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004962:	4413      	add	r3, r2
 8004964:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004968:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	4a0f      	ldr	r2, [pc, #60]	; (80049ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800496e:	fb02 f203 	mul.w	r2, r2, r3
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	fbb2 f3f3 	udiv	r3, r2, r3
 8004978:	627b      	str	r3, [r7, #36]	; 0x24
 800497a:	e004      	b.n	8004986 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	4a0c      	ldr	r2, [pc, #48]	; (80049b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004980:	fb02 f303 	mul.w	r3, r2, r3
 8004984:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	623b      	str	r3, [r7, #32]
      break;
 800498a:	e002      	b.n	8004992 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800498c:	4b09      	ldr	r3, [pc, #36]	; (80049b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800498e:	623b      	str	r3, [r7, #32]
      break;
 8004990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004992:	6a3b      	ldr	r3, [r7, #32]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3728      	adds	r7, #40	; 0x28
 8004998:	46bd      	mov	sp, r7
 800499a:	bc90      	pop	{r4, r7}
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	08005f04 	.word	0x08005f04
 80049a4:	08005f14 	.word	0x08005f14
 80049a8:	40021000 	.word	0x40021000
 80049ac:	00f42400 	.word	0x00f42400
 80049b0:	003d0900 	.word	0x003d0900
 80049b4:	007a1200 	.word	0x007a1200

080049b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049bc:	4b02      	ldr	r3, [pc, #8]	; (80049c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80049be:	681b      	ldr	r3, [r3, #0]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr
 80049c8:	20000000 	.word	0x20000000

080049cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049d0:	f7ff fff2 	bl	80049b8 <HAL_RCC_GetHCLKFreq>
 80049d4:	4601      	mov	r1, r0
 80049d6:	4b05      	ldr	r3, [pc, #20]	; (80049ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	0a1b      	lsrs	r3, r3, #8
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	4a03      	ldr	r2, [pc, #12]	; (80049f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049e2:	5cd3      	ldrb	r3, [r2, r3]
 80049e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40021000 	.word	0x40021000
 80049f0:	08005f28 	.word	0x08005f28

080049f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049f8:	f7ff ffde 	bl	80049b8 <HAL_RCC_GetHCLKFreq>
 80049fc:	4601      	mov	r1, r0
 80049fe:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	0adb      	lsrs	r3, r3, #11
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	4a03      	ldr	r2, [pc, #12]	; (8004a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a0a:	5cd3      	ldrb	r3, [r2, r3]
 8004a0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	40021000 	.word	0x40021000
 8004a18:	08005f28 	.word	0x08005f28

08004a1c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a24:	4b0a      	ldr	r3, [pc, #40]	; (8004a50 <RCC_Delay+0x34>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a0a      	ldr	r2, [pc, #40]	; (8004a54 <RCC_Delay+0x38>)
 8004a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2e:	0a5b      	lsrs	r3, r3, #9
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	fb02 f303 	mul.w	r3, r2, r3
 8004a36:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a38:	bf00      	nop
  }
  while (Delay --);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	1e5a      	subs	r2, r3, #1
 8004a3e:	60fa      	str	r2, [r7, #12]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1f9      	bne.n	8004a38 <RCC_Delay+0x1c>
}
 8004a44:	bf00      	nop
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bc80      	pop	{r7}
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	20000000 	.word	0x20000000
 8004a54:	10624dd3 	.word	0x10624dd3

08004a58 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	613b      	str	r3, [r7, #16]
 8004a64:	2300      	movs	r3, #0
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d07d      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004a74:	2300      	movs	r3, #0
 8004a76:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a78:	4b4f      	ldr	r3, [pc, #316]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10d      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a84:	4b4c      	ldr	r3, [pc, #304]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a86:	69db      	ldr	r3, [r3, #28]
 8004a88:	4a4b      	ldr	r2, [pc, #300]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a8e:	61d3      	str	r3, [r2, #28]
 8004a90:	4b49      	ldr	r3, [pc, #292]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a98:	60bb      	str	r3, [r7, #8]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aa0:	4b46      	ldr	r3, [pc, #280]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d118      	bne.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004aac:	4b43      	ldr	r3, [pc, #268]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a42      	ldr	r2, [pc, #264]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ab6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ab8:	f7fc fed0 	bl	800185c <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004abe:	e008      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ac0:	f7fc fecc 	bl	800185c <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b64      	cmp	r3, #100	; 0x64
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e06d      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad2:	4b3a      	ldr	r3, [pc, #232]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0f0      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ade:	4b36      	ldr	r3, [pc, #216]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ae6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d02e      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d027      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004afc:	4b2e      	ldr	r3, [pc, #184]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b04:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b06:	4b2e      	ldr	r3, [pc, #184]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b08:	2201      	movs	r2, #1
 8004b0a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b0c:	4b2c      	ldr	r3, [pc, #176]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b12:	4a29      	ldr	r2, [pc, #164]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d014      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b22:	f7fc fe9b 	bl	800185c <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b28:	e00a      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b2a:	f7fc fe97 	bl	800185c <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e036      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b40:	4b1d      	ldr	r3, [pc, #116]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0ee      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b4c:	4b1a      	ldr	r3, [pc, #104]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	4917      	ldr	r1, [pc, #92]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b5e:	7dfb      	ldrb	r3, [r7, #23]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d105      	bne.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b64:	4b14      	ldr	r3, [pc, #80]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	4a13      	ldr	r2, [pc, #76]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b6e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d008      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b7c:	4b0e      	ldr	r3, [pc, #56]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	490b      	ldr	r1, [pc, #44]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0310 	and.w	r3, r3, #16
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d008      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b9a:	4b07      	ldr	r3, [pc, #28]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	4904      	ldr	r1, [pc, #16]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3718      	adds	r7, #24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	40007000 	.word	0x40007000
 8004bc0:	42420440 	.word	0x42420440

08004bc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e053      	b.n	8004c7e <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d106      	bne.n	8004bf6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7fc fac3 	bl	800117c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c0c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c32:	431a      	orrs	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	431a      	orrs	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	ea42 0103 	orr.w	r1, r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	0c1a      	lsrs	r2, r3, #16
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f002 0204 	and.w	r2, r2, #4
 8004c5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	69da      	ldr	r2, [r3, #28]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b08c      	sub	sp, #48	; 0x30
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	60f8      	str	r0, [r7, #12]
 8004c8e:	60b9      	str	r1, [r7, #8]
 8004c90:	607a      	str	r2, [r7, #4]
 8004c92:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c94:	2301      	movs	r3, #1
 8004c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d101      	bne.n	8004cac <HAL_SPI_TransmitReceive+0x26>
 8004ca8:	2302      	movs	r3, #2
 8004caa:	e18a      	b.n	8004fc2 <HAL_SPI_TransmitReceive+0x33c>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cb4:	f7fc fdd2 	bl	800185c <HAL_GetTick>
 8004cb8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004cca:	887b      	ldrh	r3, [r7, #2]
 8004ccc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004cce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d00f      	beq.n	8004cf6 <HAL_SPI_TransmitReceive+0x70>
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cdc:	d107      	bne.n	8004cee <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d103      	bne.n	8004cee <HAL_SPI_TransmitReceive+0x68>
 8004ce6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	d003      	beq.n	8004cf6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004cee:	2302      	movs	r3, #2
 8004cf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004cf4:	e15b      	b.n	8004fae <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d005      	beq.n	8004d08 <HAL_SPI_TransmitReceive+0x82>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d002      	beq.n	8004d08 <HAL_SPI_TransmitReceive+0x82>
 8004d02:	887b      	ldrh	r3, [r7, #2]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d103      	bne.n	8004d10 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d0e:	e14e      	b.n	8004fae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b04      	cmp	r3, #4
 8004d1a:	d003      	beq.n	8004d24 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2205      	movs	r2, #5
 8004d20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	887a      	ldrh	r2, [r7, #2]
 8004d34:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	887a      	ldrh	r2, [r7, #2]
 8004d3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	887a      	ldrh	r2, [r7, #2]
 8004d46:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	887a      	ldrh	r2, [r7, #2]
 8004d4c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d64:	2b40      	cmp	r3, #64	; 0x40
 8004d66:	d007      	beq.n	8004d78 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d80:	d178      	bne.n	8004e74 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <HAL_SPI_TransmitReceive+0x10a>
 8004d8a:	8b7b      	ldrh	r3, [r7, #26]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d166      	bne.n	8004e5e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d94:	881a      	ldrh	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da0:	1c9a      	adds	r2, r3, #2
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	3b01      	subs	r3, #1
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004db4:	e053      	b.n	8004e5e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d11b      	bne.n	8004dfc <HAL_SPI_TransmitReceive+0x176>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d016      	beq.n	8004dfc <HAL_SPI_TransmitReceive+0x176>
 8004dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d113      	bne.n	8004dfc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd8:	881a      	ldrh	r2, [r3, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de4:	1c9a      	adds	r2, r3, #2
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	3b01      	subs	r3, #1
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d119      	bne.n	8004e3e <HAL_SPI_TransmitReceive+0x1b8>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d014      	beq.n	8004e3e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1e:	b292      	uxth	r2, r2
 8004e20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	1c9a      	adds	r2, r3, #2
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	3b01      	subs	r3, #1
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e3e:	f7fc fd0d 	bl	800185c <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d807      	bhi.n	8004e5e <HAL_SPI_TransmitReceive+0x1d8>
 8004e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e54:	d003      	beq.n	8004e5e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e5c:	e0a7      	b.n	8004fae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1a6      	bne.n	8004db6 <HAL_SPI_TransmitReceive+0x130>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1a1      	bne.n	8004db6 <HAL_SPI_TransmitReceive+0x130>
 8004e72:	e07c      	b.n	8004f6e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d002      	beq.n	8004e82 <HAL_SPI_TransmitReceive+0x1fc>
 8004e7c:	8b7b      	ldrh	r3, [r7, #26]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d16b      	bne.n	8004f5a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	330c      	adds	r3, #12
 8004e8c:	7812      	ldrb	r2, [r2, #0]
 8004e8e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e94:	1c5a      	adds	r2, r3, #1
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ea8:	e057      	b.n	8004f5a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d11c      	bne.n	8004ef2 <HAL_SPI_TransmitReceive+0x26c>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d017      	beq.n	8004ef2 <HAL_SPI_TransmitReceive+0x26c>
 8004ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d114      	bne.n	8004ef2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	330c      	adds	r3, #12
 8004ed2:	7812      	ldrb	r2, [r2, #0]
 8004ed4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eda:	1c5a      	adds	r2, r3, #1
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d119      	bne.n	8004f34 <HAL_SPI_TransmitReceive+0x2ae>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d014      	beq.n	8004f34 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68da      	ldr	r2, [r3, #12]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f30:	2301      	movs	r3, #1
 8004f32:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f34:	f7fc fc92 	bl	800185c <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d803      	bhi.n	8004f4c <HAL_SPI_TransmitReceive+0x2c6>
 8004f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4a:	d102      	bne.n	8004f52 <HAL_SPI_TransmitReceive+0x2cc>
 8004f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d103      	bne.n	8004f5a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f58:	e029      	b.n	8004fae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1a2      	bne.n	8004eaa <HAL_SPI_TransmitReceive+0x224>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d19d      	bne.n	8004eaa <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 f893 	bl	800509e <SPI_EndRxTxTransaction>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d006      	beq.n	8004f8c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2220      	movs	r2, #32
 8004f88:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f8a:	e010      	b.n	8004fae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10b      	bne.n	8004fac <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f94:	2300      	movs	r3, #0
 8004f96:	617b      	str	r3, [r7, #20]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	617b      	str	r3, [r7, #20]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	617b      	str	r3, [r7, #20]
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	e000      	b.n	8004fae <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004fac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004fbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3730      	adds	r7, #48	; 0x30
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b084      	sub	sp, #16
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	60f8      	str	r0, [r7, #12]
 8004fd2:	60b9      	str	r1, [r7, #8]
 8004fd4:	603b      	str	r3, [r7, #0]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fda:	e04c      	b.n	8005076 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe2:	d048      	beq.n	8005076 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004fe4:	f7fc fc3a 	bl	800185c <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d902      	bls.n	8004ffa <SPI_WaitFlagStateUntilTimeout+0x30>
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d13d      	bne.n	8005076 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005008:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005012:	d111      	bne.n	8005038 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800501c:	d004      	beq.n	8005028 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005026:	d107      	bne.n	8005038 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005036:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005040:	d10f      	bne.n	8005062 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005060:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e00f      	b.n	8005096 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	4013      	ands	r3, r2
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	429a      	cmp	r2, r3
 8005084:	bf0c      	ite	eq
 8005086:	2301      	moveq	r3, #1
 8005088:	2300      	movne	r3, #0
 800508a:	b2db      	uxtb	r3, r3
 800508c:	461a      	mov	r2, r3
 800508e:	79fb      	ldrb	r3, [r7, #7]
 8005090:	429a      	cmp	r2, r3
 8005092:	d1a3      	bne.n	8004fdc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b086      	sub	sp, #24
 80050a2:	af02      	add	r7, sp, #8
 80050a4:	60f8      	str	r0, [r7, #12]
 80050a6:	60b9      	str	r1, [r7, #8]
 80050a8:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2200      	movs	r2, #0
 80050b2:	2180      	movs	r1, #128	; 0x80
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f7ff ff88 	bl	8004fca <SPI_WaitFlagStateUntilTimeout>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d007      	beq.n	80050d0 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c4:	f043 0220 	orr.w	r2, r3, #32
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e000      	b.n	80050d2 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b082      	sub	sp, #8
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e01d      	b.n	8005128 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d106      	bne.n	8005106 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f7fc f995 	bl	8001430 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2202      	movs	r2, #2
 800510a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	3304      	adds	r3, #4
 8005116:	4619      	mov	r1, r3
 8005118:	4610      	mov	r0, r2
 800511a:	f000 fa0f 	bl	800553c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3708      	adds	r7, #8
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 0201 	orr.w	r2, r2, #1
 8005146:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f003 0307 	and.w	r3, r3, #7
 8005152:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2b06      	cmp	r3, #6
 8005158:	d007      	beq.n	800516a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f042 0201 	orr.w	r2, r2, #1
 8005168:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	bc80      	pop	{r7}
 8005174:	4770      	bx	lr

08005176 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b082      	sub	sp, #8
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b02      	cmp	r3, #2
 800518a:	d122      	bne.n	80051d2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b02      	cmp	r3, #2
 8005198:	d11b      	bne.n	80051d2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f06f 0202 	mvn.w	r2, #2
 80051a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	f003 0303 	and.w	r3, r3, #3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d003      	beq.n	80051c0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 f9a4 	bl	8005506 <HAL_TIM_IC_CaptureCallback>
 80051be:	e005      	b.n	80051cc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f997 	bl	80054f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f9a6 	bl	8005518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b04      	cmp	r3, #4
 80051de:	d122      	bne.n	8005226 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f003 0304 	and.w	r3, r3, #4
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d11b      	bne.n	8005226 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f06f 0204 	mvn.w	r2, #4
 80051f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2202      	movs	r2, #2
 80051fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f97a 	bl	8005506 <HAL_TIM_IC_CaptureCallback>
 8005212:	e005      	b.n	8005220 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 f96d 	bl	80054f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f97c 	bl	8005518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	f003 0308 	and.w	r3, r3, #8
 8005230:	2b08      	cmp	r3, #8
 8005232:	d122      	bne.n	800527a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f003 0308 	and.w	r3, r3, #8
 800523e:	2b08      	cmp	r3, #8
 8005240:	d11b      	bne.n	800527a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f06f 0208 	mvn.w	r2, #8
 800524a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2204      	movs	r2, #4
 8005250:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	69db      	ldr	r3, [r3, #28]
 8005258:	f003 0303 	and.w	r3, r3, #3
 800525c:	2b00      	cmp	r3, #0
 800525e:	d003      	beq.n	8005268 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 f950 	bl	8005506 <HAL_TIM_IC_CaptureCallback>
 8005266:	e005      	b.n	8005274 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f943 	bl	80054f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f952 	bl	8005518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	f003 0310 	and.w	r3, r3, #16
 8005284:	2b10      	cmp	r3, #16
 8005286:	d122      	bne.n	80052ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	f003 0310 	and.w	r3, r3, #16
 8005292:	2b10      	cmp	r3, #16
 8005294:	d11b      	bne.n	80052ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f06f 0210 	mvn.w	r2, #16
 800529e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2208      	movs	r2, #8
 80052a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f926 	bl	8005506 <HAL_TIM_IC_CaptureCallback>
 80052ba:	e005      	b.n	80052c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f919 	bl	80054f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f928 	bl	8005518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d10e      	bne.n	80052fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d107      	bne.n	80052fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f06f 0201 	mvn.w	r2, #1
 80052f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f7fb fbd9 	bl	8000aac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005304:	2b80      	cmp	r3, #128	; 0x80
 8005306:	d10e      	bne.n	8005326 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005312:	2b80      	cmp	r3, #128	; 0x80
 8005314:	d107      	bne.n	8005326 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800531e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 fa50 	bl	80057c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005330:	2b40      	cmp	r3, #64	; 0x40
 8005332:	d10e      	bne.n	8005352 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533e:	2b40      	cmp	r3, #64	; 0x40
 8005340:	d107      	bne.n	8005352 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800534a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 f8ec 	bl	800552a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	f003 0320 	and.w	r3, r3, #32
 800535c:	2b20      	cmp	r3, #32
 800535e:	d10e      	bne.n	800537e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	f003 0320 	and.w	r3, r3, #32
 800536a:	2b20      	cmp	r3, #32
 800536c:	d107      	bne.n	800537e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f06f 0220 	mvn.w	r2, #32
 8005376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 fa1b 	bl	80057b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800537e:	bf00      	nop
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b084      	sub	sp, #16
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005396:	2b01      	cmp	r3, #1
 8005398:	d101      	bne.n	800539e <HAL_TIM_ConfigClockSource+0x18>
 800539a:	2302      	movs	r3, #2
 800539c:	e0a6      	b.n	80054ec <HAL_TIM_ConfigClockSource+0x166>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2202      	movs	r2, #2
 80053aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053bc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053c4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b40      	cmp	r3, #64	; 0x40
 80053d4:	d067      	beq.n	80054a6 <HAL_TIM_ConfigClockSource+0x120>
 80053d6:	2b40      	cmp	r3, #64	; 0x40
 80053d8:	d80b      	bhi.n	80053f2 <HAL_TIM_ConfigClockSource+0x6c>
 80053da:	2b10      	cmp	r3, #16
 80053dc:	d073      	beq.n	80054c6 <HAL_TIM_ConfigClockSource+0x140>
 80053de:	2b10      	cmp	r3, #16
 80053e0:	d802      	bhi.n	80053e8 <HAL_TIM_ConfigClockSource+0x62>
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d06f      	beq.n	80054c6 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80053e6:	e078      	b.n	80054da <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053e8:	2b20      	cmp	r3, #32
 80053ea:	d06c      	beq.n	80054c6 <HAL_TIM_ConfigClockSource+0x140>
 80053ec:	2b30      	cmp	r3, #48	; 0x30
 80053ee:	d06a      	beq.n	80054c6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80053f0:	e073      	b.n	80054da <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053f2:	2b70      	cmp	r3, #112	; 0x70
 80053f4:	d00d      	beq.n	8005412 <HAL_TIM_ConfigClockSource+0x8c>
 80053f6:	2b70      	cmp	r3, #112	; 0x70
 80053f8:	d804      	bhi.n	8005404 <HAL_TIM_ConfigClockSource+0x7e>
 80053fa:	2b50      	cmp	r3, #80	; 0x50
 80053fc:	d033      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0xe0>
 80053fe:	2b60      	cmp	r3, #96	; 0x60
 8005400:	d041      	beq.n	8005486 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005402:	e06a      	b.n	80054da <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005408:	d066      	beq.n	80054d8 <HAL_TIM_ConfigClockSource+0x152>
 800540a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800540e:	d017      	beq.n	8005440 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005410:	e063      	b.n	80054da <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6818      	ldr	r0, [r3, #0]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	6899      	ldr	r1, [r3, #8]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f000 f964 	bl	80056ee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005434:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	609a      	str	r2, [r3, #8]
      break;
 800543e:	e04c      	b.n	80054da <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6818      	ldr	r0, [r3, #0]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	6899      	ldr	r1, [r3, #8]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f000 f94d 	bl	80056ee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689a      	ldr	r2, [r3, #8]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005462:	609a      	str	r2, [r3, #8]
      break;
 8005464:	e039      	b.n	80054da <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6818      	ldr	r0, [r3, #0]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	6859      	ldr	r1, [r3, #4]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	461a      	mov	r2, r3
 8005474:	f000 f8c4 	bl	8005600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2150      	movs	r1, #80	; 0x50
 800547e:	4618      	mov	r0, r3
 8005480:	f000 f91b 	bl	80056ba <TIM_ITRx_SetConfig>
      break;
 8005484:	e029      	b.n	80054da <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6818      	ldr	r0, [r3, #0]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	6859      	ldr	r1, [r3, #4]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	461a      	mov	r2, r3
 8005494:	f000 f8e2 	bl	800565c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2160      	movs	r1, #96	; 0x60
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 f90b 	bl	80056ba <TIM_ITRx_SetConfig>
      break;
 80054a4:	e019      	b.n	80054da <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6818      	ldr	r0, [r3, #0]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	6859      	ldr	r1, [r3, #4]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	461a      	mov	r2, r3
 80054b4:	f000 f8a4 	bl	8005600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2140      	movs	r1, #64	; 0x40
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 f8fb 	bl	80056ba <TIM_ITRx_SetConfig>
      break;
 80054c4:	e009      	b.n	80054da <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4619      	mov	r1, r3
 80054d0:	4610      	mov	r0, r2
 80054d2:	f000 f8f2 	bl	80056ba <TIM_ITRx_SetConfig>
      break;
 80054d6:	e000      	b.n	80054da <HAL_TIM_ConfigClockSource+0x154>
      break;
 80054d8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	bc80      	pop	{r7}
 8005504:	4770      	bx	lr

08005506 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800550e:	bf00      	nop
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	bc80      	pop	{r7}
 8005516:	4770      	bx	lr

08005518 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	bc80      	pop	{r7}
 8005528:	4770      	bx	lr

0800552a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800552a:	b480      	push	{r7}
 800552c:	b083      	sub	sp, #12
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005532:	bf00      	nop
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	bc80      	pop	{r7}
 800553a:	4770      	bx	lr

0800553c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a29      	ldr	r2, [pc, #164]	; (80055f4 <TIM_Base_SetConfig+0xb8>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d00b      	beq.n	800556c <TIM_Base_SetConfig+0x30>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800555a:	d007      	beq.n	800556c <TIM_Base_SetConfig+0x30>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a26      	ldr	r2, [pc, #152]	; (80055f8 <TIM_Base_SetConfig+0xbc>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d003      	beq.n	800556c <TIM_Base_SetConfig+0x30>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a25      	ldr	r2, [pc, #148]	; (80055fc <TIM_Base_SetConfig+0xc0>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d108      	bne.n	800557e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4313      	orrs	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a1c      	ldr	r2, [pc, #112]	; (80055f4 <TIM_Base_SetConfig+0xb8>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d00b      	beq.n	800559e <TIM_Base_SetConfig+0x62>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800558c:	d007      	beq.n	800559e <TIM_Base_SetConfig+0x62>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a19      	ldr	r2, [pc, #100]	; (80055f8 <TIM_Base_SetConfig+0xbc>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d003      	beq.n	800559e <TIM_Base_SetConfig+0x62>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a18      	ldr	r2, [pc, #96]	; (80055fc <TIM_Base_SetConfig+0xc0>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d108      	bne.n	80055b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a07      	ldr	r2, [pc, #28]	; (80055f4 <TIM_Base_SetConfig+0xb8>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d103      	bne.n	80055e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	691a      	ldr	r2, [r3, #16]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	615a      	str	r2, [r3, #20]
}
 80055ea:	bf00      	nop
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bc80      	pop	{r7}
 80055f2:	4770      	bx	lr
 80055f4:	40012c00 	.word	0x40012c00
 80055f8:	40000400 	.word	0x40000400
 80055fc:	40000800 	.word	0x40000800

08005600 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005600:	b480      	push	{r7}
 8005602:	b087      	sub	sp, #28
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	f023 0201 	bic.w	r2, r3, #1
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800562a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f023 030a 	bic.w	r3, r3, #10
 800563c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4313      	orrs	r3, r2
 8005644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	621a      	str	r2, [r3, #32]
}
 8005652:	bf00      	nop
 8005654:	371c      	adds	r7, #28
 8005656:	46bd      	mov	sp, r7
 8005658:	bc80      	pop	{r7}
 800565a:	4770      	bx	lr

0800565c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	f023 0210 	bic.w	r2, r3, #16
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005686:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	031b      	lsls	r3, r3, #12
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	4313      	orrs	r3, r2
 8005690:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005698:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	011b      	lsls	r3, r3, #4
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	621a      	str	r2, [r3, #32]
}
 80056b0:	bf00      	nop
 80056b2:	371c      	adds	r7, #28
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bc80      	pop	{r7}
 80056b8:	4770      	bx	lr

080056ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b085      	sub	sp, #20
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	f043 0307 	orr.w	r3, r3, #7
 80056dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	609a      	str	r2, [r3, #8]
}
 80056e4:	bf00      	nop
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bc80      	pop	{r7}
 80056ec:	4770      	bx	lr

080056ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b087      	sub	sp, #28
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	60f8      	str	r0, [r7, #12]
 80056f6:	60b9      	str	r1, [r7, #8]
 80056f8:	607a      	str	r2, [r7, #4]
 80056fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005708:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	021a      	lsls	r2, r3, #8
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	431a      	orrs	r2, r3
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	4313      	orrs	r3, r2
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	4313      	orrs	r3, r2
 800571a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	609a      	str	r2, [r3, #8]
}
 8005722:	bf00      	nop
 8005724:	371c      	adds	r7, #28
 8005726:	46bd      	mov	sp, r7
 8005728:	bc80      	pop	{r7}
 800572a:	4770      	bx	lr

0800572c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800573c:	2b01      	cmp	r3, #1
 800573e:	d101      	bne.n	8005744 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005740:	2302      	movs	r3, #2
 8005742:	e032      	b.n	80057aa <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2202      	movs	r2, #2
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	4313      	orrs	r3, r2
 8005774:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800577c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	4313      	orrs	r3, r2
 8005786:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bc80      	pop	{r7}
 80057b2:	4770      	bx	lr

080057b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bc80      	pop	{r7}
 80057c4:	4770      	bx	lr

080057c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057ce:	bf00      	nop
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bc80      	pop	{r7}
 80057d6:	4770      	bx	lr

080057d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e03f      	b.n	800586a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d106      	bne.n	8005804 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7fb feba 	bl	8001578 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2224      	movs	r2, #36	; 0x24
 8005808:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68da      	ldr	r2, [r3, #12]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800581a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fa5f 	bl	8005ce0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	691a      	ldr	r2, [r3, #16]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005830:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	695a      	ldr	r2, [r3, #20]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005840:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68da      	ldr	r2, [r3, #12]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005850:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2220      	movs	r2, #32
 800585c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2220      	movs	r2, #32
 8005864:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
	...

08005874 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b088      	sub	sp, #32
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005894:	2300      	movs	r3, #0
 8005896:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005898:	2300      	movs	r3, #0
 800589a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	f003 030f 	and.w	r3, r3, #15
 80058a2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10d      	bne.n	80058c6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	f003 0320 	and.w	r3, r3, #32
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d008      	beq.n	80058c6 <HAL_UART_IRQHandler+0x52>
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	f003 0320 	and.w	r3, r3, #32
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f98d 	bl	8005bde <UART_Receive_IT>
      return;
 80058c4:	e0cc      	b.n	8005a60 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	f000 80ab 	beq.w	8005a24 <HAL_UART_IRQHandler+0x1b0>
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d105      	bne.n	80058e4 <HAL_UART_IRQHandler+0x70>
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 80a0 	beq.w	8005a24 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00a      	beq.n	8005904 <HAL_UART_IRQHandler+0x90>
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d005      	beq.n	8005904 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058fc:	f043 0201 	orr.w	r2, r3, #1
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	f003 0304 	and.w	r3, r3, #4
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00a      	beq.n	8005924 <HAL_UART_IRQHandler+0xb0>
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b00      	cmp	r3, #0
 8005916:	d005      	beq.n	8005924 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591c:	f043 0202 	orr.w	r2, r3, #2
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00a      	beq.n	8005944 <HAL_UART_IRQHandler+0xd0>
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	2b00      	cmp	r3, #0
 8005936:	d005      	beq.n	8005944 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593c:	f043 0204 	orr.w	r2, r3, #4
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	f003 0308 	and.w	r3, r3, #8
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00a      	beq.n	8005964 <HAL_UART_IRQHandler+0xf0>
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b00      	cmp	r3, #0
 8005956:	d005      	beq.n	8005964 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800595c:	f043 0208 	orr.w	r2, r3, #8
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005968:	2b00      	cmp	r3, #0
 800596a:	d078      	beq.n	8005a5e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	2b00      	cmp	r3, #0
 8005974:	d007      	beq.n	8005986 <HAL_UART_IRQHandler+0x112>
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	f003 0320 	and.w	r3, r3, #32
 800597c:	2b00      	cmp	r3, #0
 800597e:	d002      	beq.n	8005986 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f92c 	bl	8005bde <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005990:	2b00      	cmp	r3, #0
 8005992:	bf14      	ite	ne
 8005994:	2301      	movne	r3, #1
 8005996:	2300      	moveq	r3, #0
 8005998:	b2db      	uxtb	r3, r3
 800599a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a0:	f003 0308 	and.w	r3, r3, #8
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d102      	bne.n	80059ae <HAL_UART_IRQHandler+0x13a>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d031      	beq.n	8005a12 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f877 	bl	8005aa2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d023      	beq.n	8005a0a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	695a      	ldr	r2, [r3, #20]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059d0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d013      	beq.n	8005a02 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059de:	4a22      	ldr	r2, [pc, #136]	; (8005a68 <HAL_UART_IRQHandler+0x1f4>)
 80059e0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fc fad6 	bl	8001f98 <HAL_DMA_Abort_IT>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d016      	beq.n	8005a20 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80059fc:	4610      	mov	r0, r2
 80059fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a00:	e00e      	b.n	8005a20 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f844 	bl	8005a90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a08:	e00a      	b.n	8005a20 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f840 	bl	8005a90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a10:	e006      	b.n	8005a20 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f83c 	bl	8005a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005a1e:	e01e      	b.n	8005a5e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a20:	bf00      	nop
    return;
 8005a22:	e01c      	b.n	8005a5e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d008      	beq.n	8005a40 <HAL_UART_IRQHandler+0x1cc>
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d003      	beq.n	8005a40 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f863 	bl	8005b04 <UART_Transmit_IT>
    return;
 8005a3e:	e00f      	b.n	8005a60 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00a      	beq.n	8005a60 <HAL_UART_IRQHandler+0x1ec>
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d005      	beq.n	8005a60 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 f8aa 	bl	8005bae <UART_EndTransmit_IT>
    return;
 8005a5a:	bf00      	nop
 8005a5c:	e000      	b.n	8005a60 <HAL_UART_IRQHandler+0x1ec>
    return;
 8005a5e:	bf00      	nop
  }
}
 8005a60:	3720      	adds	r7, #32
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	08005add 	.word	0x08005add

08005a6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bc80      	pop	{r7}
 8005a7c:	4770      	bx	lr

08005a7e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005a86:	bf00      	nop
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bc80      	pop	{r7}
 8005a8e:	4770      	bx	lr

08005a90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bc80      	pop	{r7}
 8005aa0:	4770      	bx	lr

08005aa2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b083      	sub	sp, #12
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68da      	ldr	r2, [r3, #12]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ab8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	695a      	ldr	r2, [r3, #20]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 0201 	bic.w	r2, r2, #1
 8005ac8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2220      	movs	r2, #32
 8005ace:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005ad2:	bf00      	nop
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bc80      	pop	{r7}
 8005ada:	4770      	bx	lr

08005adc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f7ff ffca 	bl	8005a90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005afc:	bf00      	nop
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b21      	cmp	r3, #33	; 0x21
 8005b16:	d144      	bne.n	8005ba2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b20:	d11a      	bne.n	8005b58 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	881b      	ldrh	r3, [r3, #0]
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b36:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d105      	bne.n	8005b4c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	1c9a      	adds	r2, r3, #2
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	621a      	str	r2, [r3, #32]
 8005b4a:	e00e      	b.n	8005b6a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a1b      	ldr	r3, [r3, #32]
 8005b50:	1c5a      	adds	r2, r3, #1
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	621a      	str	r2, [r3, #32]
 8005b56:	e008      	b.n	8005b6a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	1c59      	adds	r1, r3, #1
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	6211      	str	r1, [r2, #32]
 8005b62:	781a      	ldrb	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	3b01      	subs	r3, #1
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	4619      	mov	r1, r3
 8005b78:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10f      	bne.n	8005b9e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68da      	ldr	r2, [r3, #12]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b8c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68da      	ldr	r2, [r3, #12]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b9c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	e000      	b.n	8005ba4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005ba2:	2302      	movs	r3, #2
  }
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bc80      	pop	{r7}
 8005bac:	4770      	bx	lr

08005bae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b082      	sub	sp, #8
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68da      	ldr	r2, [r3, #12]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bc4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2220      	movs	r2, #32
 8005bca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7ff ff4c 	bl	8005a6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3708      	adds	r7, #8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b084      	sub	sp, #16
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b22      	cmp	r3, #34	; 0x22
 8005bf0:	d171      	bne.n	8005cd6 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bfa:	d123      	bne.n	8005c44 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c00:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10e      	bne.n	8005c28 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c20:	1c9a      	adds	r2, r3, #2
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	629a      	str	r2, [r3, #40]	; 0x28
 8005c26:	e029      	b.n	8005c7c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3c:	1c5a      	adds	r2, r3, #1
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	629a      	str	r2, [r3, #40]	; 0x28
 8005c42:	e01b      	b.n	8005c7c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10a      	bne.n	8005c62 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6858      	ldr	r0, [r3, #4]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c56:	1c59      	adds	r1, r3, #1
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	6291      	str	r1, [r2, #40]	; 0x28
 8005c5c:	b2c2      	uxtb	r2, r0
 8005c5e:	701a      	strb	r2, [r3, #0]
 8005c60:	e00c      	b.n	8005c7c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6e:	1c58      	adds	r0, r3, #1
 8005c70:	6879      	ldr	r1, [r7, #4]
 8005c72:	6288      	str	r0, [r1, #40]	; 0x28
 8005c74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c78:	b2d2      	uxtb	r2, r2
 8005c7a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	3b01      	subs	r3, #1
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	4619      	mov	r1, r3
 8005c8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d120      	bne.n	8005cd2 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68da      	ldr	r2, [r3, #12]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 0220 	bic.w	r2, r2, #32
 8005c9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	695a      	ldr	r2, [r3, #20]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 0201 	bic.w	r2, r2, #1
 8005cbe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f7ff fed8 	bl	8005a7e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	e002      	b.n	8005cd8 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	e000      	b.n	8005cd8 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005cd6:	2302      	movs	r3, #2
  }
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	689a      	ldr	r2, [r3, #8]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	431a      	orrs	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005d1a:	f023 030c 	bic.w	r3, r3, #12
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	6812      	ldr	r2, [r2, #0]
 8005d22:	68f9      	ldr	r1, [r7, #12]
 8005d24:	430b      	orrs	r3, r1
 8005d26:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	699a      	ldr	r2, [r3, #24]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a52      	ldr	r2, [pc, #328]	; (8005e8c <UART_SetConfig+0x1ac>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d14e      	bne.n	8005de6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005d48:	f7fe fe54 	bl	80049f4 <HAL_RCC_GetPCLK2Freq>
 8005d4c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	4613      	mov	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	009a      	lsls	r2, r3, #2
 8005d58:	441a      	add	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d64:	4a4a      	ldr	r2, [pc, #296]	; (8005e90 <UART_SetConfig+0x1b0>)
 8005d66:	fba2 2303 	umull	r2, r3, r2, r3
 8005d6a:	095b      	lsrs	r3, r3, #5
 8005d6c:	0119      	lsls	r1, r3, #4
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	4613      	mov	r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4413      	add	r3, r2
 8005d76:	009a      	lsls	r2, r3, #2
 8005d78:	441a      	add	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d84:	4b42      	ldr	r3, [pc, #264]	; (8005e90 <UART_SetConfig+0x1b0>)
 8005d86:	fba3 0302 	umull	r0, r3, r3, r2
 8005d8a:	095b      	lsrs	r3, r3, #5
 8005d8c:	2064      	movs	r0, #100	; 0x64
 8005d8e:	fb00 f303 	mul.w	r3, r0, r3
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	011b      	lsls	r3, r3, #4
 8005d96:	3332      	adds	r3, #50	; 0x32
 8005d98:	4a3d      	ldr	r2, [pc, #244]	; (8005e90 <UART_SetConfig+0x1b0>)
 8005d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9e:	095b      	lsrs	r3, r3, #5
 8005da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005da4:	4419      	add	r1, r3
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	4613      	mov	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	009a      	lsls	r2, r3, #2
 8005db0:	441a      	add	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005dbc:	4b34      	ldr	r3, [pc, #208]	; (8005e90 <UART_SetConfig+0x1b0>)
 8005dbe:	fba3 0302 	umull	r0, r3, r3, r2
 8005dc2:	095b      	lsrs	r3, r3, #5
 8005dc4:	2064      	movs	r0, #100	; 0x64
 8005dc6:	fb00 f303 	mul.w	r3, r0, r3
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	011b      	lsls	r3, r3, #4
 8005dce:	3332      	adds	r3, #50	; 0x32
 8005dd0:	4a2f      	ldr	r2, [pc, #188]	; (8005e90 <UART_SetConfig+0x1b0>)
 8005dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd6:	095b      	lsrs	r3, r3, #5
 8005dd8:	f003 020f 	and.w	r2, r3, #15
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	440a      	add	r2, r1
 8005de2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005de4:	e04d      	b.n	8005e82 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8005de6:	f7fe fdf1 	bl	80049cc <HAL_RCC_GetPCLK1Freq>
 8005dea:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	4613      	mov	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4413      	add	r3, r2
 8005df4:	009a      	lsls	r2, r3, #2
 8005df6:	441a      	add	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e02:	4a23      	ldr	r2, [pc, #140]	; (8005e90 <UART_SetConfig+0x1b0>)
 8005e04:	fba2 2303 	umull	r2, r3, r2, r3
 8005e08:	095b      	lsrs	r3, r3, #5
 8005e0a:	0119      	lsls	r1, r3, #4
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	009a      	lsls	r2, r3, #2
 8005e16:	441a      	add	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e22:	4b1b      	ldr	r3, [pc, #108]	; (8005e90 <UART_SetConfig+0x1b0>)
 8005e24:	fba3 0302 	umull	r0, r3, r3, r2
 8005e28:	095b      	lsrs	r3, r3, #5
 8005e2a:	2064      	movs	r0, #100	; 0x64
 8005e2c:	fb00 f303 	mul.w	r3, r0, r3
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	011b      	lsls	r3, r3, #4
 8005e34:	3332      	adds	r3, #50	; 0x32
 8005e36:	4a16      	ldr	r2, [pc, #88]	; (8005e90 <UART_SetConfig+0x1b0>)
 8005e38:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3c:	095b      	lsrs	r3, r3, #5
 8005e3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e42:	4419      	add	r1, r3
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	4613      	mov	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	009a      	lsls	r2, r3, #2
 8005e4e:	441a      	add	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e5a:	4b0d      	ldr	r3, [pc, #52]	; (8005e90 <UART_SetConfig+0x1b0>)
 8005e5c:	fba3 0302 	umull	r0, r3, r3, r2
 8005e60:	095b      	lsrs	r3, r3, #5
 8005e62:	2064      	movs	r0, #100	; 0x64
 8005e64:	fb00 f303 	mul.w	r3, r0, r3
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	011b      	lsls	r3, r3, #4
 8005e6c:	3332      	adds	r3, #50	; 0x32
 8005e6e:	4a08      	ldr	r2, [pc, #32]	; (8005e90 <UART_SetConfig+0x1b0>)
 8005e70:	fba2 2303 	umull	r2, r3, r2, r3
 8005e74:	095b      	lsrs	r3, r3, #5
 8005e76:	f003 020f 	and.w	r2, r3, #15
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	440a      	add	r2, r1
 8005e80:	609a      	str	r2, [r3, #8]
}
 8005e82:	bf00      	nop
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	40013800 	.word	0x40013800
 8005e90:	51eb851f 	.word	0x51eb851f

08005e94 <__libc_init_array>:
 8005e94:	b570      	push	{r4, r5, r6, lr}
 8005e96:	2500      	movs	r5, #0
 8005e98:	4e0c      	ldr	r6, [pc, #48]	; (8005ecc <__libc_init_array+0x38>)
 8005e9a:	4c0d      	ldr	r4, [pc, #52]	; (8005ed0 <__libc_init_array+0x3c>)
 8005e9c:	1ba4      	subs	r4, r4, r6
 8005e9e:	10a4      	asrs	r4, r4, #2
 8005ea0:	42a5      	cmp	r5, r4
 8005ea2:	d109      	bne.n	8005eb8 <__libc_init_array+0x24>
 8005ea4:	f000 f822 	bl	8005eec <_init>
 8005ea8:	2500      	movs	r5, #0
 8005eaa:	4e0a      	ldr	r6, [pc, #40]	; (8005ed4 <__libc_init_array+0x40>)
 8005eac:	4c0a      	ldr	r4, [pc, #40]	; (8005ed8 <__libc_init_array+0x44>)
 8005eae:	1ba4      	subs	r4, r4, r6
 8005eb0:	10a4      	asrs	r4, r4, #2
 8005eb2:	42a5      	cmp	r5, r4
 8005eb4:	d105      	bne.n	8005ec2 <__libc_init_array+0x2e>
 8005eb6:	bd70      	pop	{r4, r5, r6, pc}
 8005eb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ebc:	4798      	blx	r3
 8005ebe:	3501      	adds	r5, #1
 8005ec0:	e7ee      	b.n	8005ea0 <__libc_init_array+0xc>
 8005ec2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ec6:	4798      	blx	r3
 8005ec8:	3501      	adds	r5, #1
 8005eca:	e7f2      	b.n	8005eb2 <__libc_init_array+0x1e>
 8005ecc:	08005f30 	.word	0x08005f30
 8005ed0:	08005f30 	.word	0x08005f30
 8005ed4:	08005f30 	.word	0x08005f30
 8005ed8:	08005f34 	.word	0x08005f34

08005edc <memset>:
 8005edc:	4603      	mov	r3, r0
 8005ede:	4402      	add	r2, r0
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d100      	bne.n	8005ee6 <memset+0xa>
 8005ee4:	4770      	bx	lr
 8005ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8005eea:	e7f9      	b.n	8005ee0 <memset+0x4>

08005eec <_init>:
 8005eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eee:	bf00      	nop
 8005ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ef2:	bc08      	pop	{r3}
 8005ef4:	469e      	mov	lr, r3
 8005ef6:	4770      	bx	lr

08005ef8 <_fini>:
 8005ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005efa:	bf00      	nop
 8005efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005efe:	bc08      	pop	{r3}
 8005f00:	469e      	mov	lr, r3
 8005f02:	4770      	bx	lr
